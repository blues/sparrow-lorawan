// Copyright 2021 Blues Inc.  All rights reserved.
// Use of this source code is governed by licenses granted by the
// copyright holder including that found in the LICENSE file.

#pragma once

#include "platform.h"

// Defines
#if defined(USE_BSP_DRIVER)
// code generated by STM32CubeMX does not support BSP
// In order to use BSP driver, add the correspondent files in the IDE workspace
// and define USE_BSP_DRIVER in the preprocessor definitions  or in platform.h
#define RBI_CONF_RFO_LP_HP  RADIO_CONF_RFO_LP_HP
#define RBI_CONF_RFO_LP     RADIO_CONF_RFO_LP
#define RBI_CONF_RFO_HP     RADIO_CONF_RFO_HP
#else
#define RBI_CONF_RFO_LP_HP  0
#define RBI_CONF_RFO_LP     1
#define RBI_CONF_RFO_HP     2
#endif  // USE_BSP_DRIVER 

#if defined(USE_BSP_DRIVER)
// code generated by STM32CubeMX does not support BSP
// In order to use BSP driver, add the correspondent files in the IDE workspace
// and define USE_BSP_DRIVER in the preprocessor definitions  or in platform.h
#else

// Indicates the type of switch between the ones proposed by CONFIG Constants
#define RBI_CONF_RFO                        RBI_CONF_RFO_LP_HP

// Indicates whether or not TCXO is supported by the board
// 0: TCXO not supported
// 1: TCXO supported
#define IS_TCXO_SUPPORTED                   1U

// Indicates whether or not DCDC is supported by the board
// 0: DCDC not supported
// 1: DCDC supported
#define IS_DCDC_SUPPORTED                   1U

#endif  // USE_BSP_DRIVER

#if defined(USE_BSP_DRIVER)
// code generated by STM32CubeMX does not support BSP
// In order to use BSP driver, add the correspondent files in the IDE workspace
// and define USE_BSP_DRIVER in the preprocessor definitions  or in platform.h

#else
#warning user to provide its board definitions pins
#endif  // USE_BSP_DRIVER

#if defined(USE_BSP_DRIVER)
// code generated by STM32CubeMX does not support BSP
// In order to use BSP driver, add the correspondent files in the IDE workspace
// and define USE_BSP_DRIVER in the preprocessor definitions  or in platform.h
typedef enum {
    RBI_SWITCH_OFF    = RADIO_SWITCH_OFF,
    RBI_SWITCH_RX     = RADIO_SWITCH_RX,
    RBI_SWITCH_RFO_LP = RADIO_SWITCH_RFO_LP,
    RBI_SWITCH_RFO_HP = RADIO_SWITCH_RFO_HP,
} RBI_Switch_TypeDef;

#else

typedef enum {
    RBI_SWITCH_OFF    = 0,
    RBI_SWITCH_RX     = 1,
    RBI_SWITCH_RFO_LP = 2,
    RBI_SWITCH_RFO_HP = 3,
} RBI_Switch_TypeDef;

#endif  // USE_BSP_DRIVER

// Public

// Init Radio Switch
// Returns BSP status
int32_t RBI_Init(void);

// DeInit Radio Switch
// Returns BSP status
int32_t RBI_DeInit(void);

// Configure Radio Switch.
// Config: Specifies the Radio RF switch path to be set.
//         This parameter can be one of following parameters:
//           RADIO_SWITCH_OFF
//           RADIO_SWITCH_RX
//           RADIO_SWITCH_RFO_LP
//           RADIO_SWITCH_RFO_HP
// Returns BSP status
int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config);

// Return Board Configuration
// Returns RBI_CONF_RFO_LP_HP
//         RBI_CONF_RFO_LP
//         RBI_CONF_RFO_HP
int32_t RBI_GetTxConfig(void);

// Get If TCXO is to be present on board
// never remove called by MW,
// return 1 if present, 0 if not present
int32_t RBI_IsTCXO(void);

// Get If DCDC is to be present on board
// never remove called by MW,
// return 1 if present, 0 if not present
int32_t RBI_IsDCDC(void);

