
sparrow.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017460  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001004  08017598  08017598  00027598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801859c  0801859c  000300dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801859c  0801859c  0002859c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080185a4  080185a4  000300dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080185a4  080185a4  000285a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080185a8  080185a8  000285a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  080185ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002388  20000200  08018688  00030200  2**9
                  ALLOC
 10 ._user_heap_stack 00000a00  20002588  08018688  00032588  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000a13b5  00000000  00000000  00030106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000ebd1  00000000  00000000  000d14bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000320de  00000000  00000000  000e008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003570  00000000  00000000  00112170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000037a8  00000000  00000000  001156e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f96c  00000000  00000000  00118e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005d6e3  00000000  00000000  001487f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5fcd  00000000  00000000  001a5ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0029bea4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009e58  00000000  00000000  0029bef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000200 	.word	0x20000200
 8000154:	00000000 	.word	0x00000000
 8000158:	08017580 	.word	0x08017580

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000204 	.word	0x20000204
 8000174:	08017580 	.word	0x08017580

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2uiz>:
 8000b1c:	0042      	lsls	r2, r0, #1
 8000b1e:	d20e      	bcs.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30b      	bcc.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d409      	bmi.n	8000b44 <__aeabi_f2uiz+0x28>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr
 8000b44:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b48:	d101      	bne.n	8000b4e <__aeabi_f2uiz+0x32>
 8000b4a:	0242      	lsls	r2, r0, #9
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_f2uiz+0x38>
 8000b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b96c 	b.w	8000e4c <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	468e      	mov	lr, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f040 8082 	bne.w	8000ca2 <__udivmoddi4+0x116>
 8000b9e:	428a      	cmp	r2, r1
 8000ba0:	4617      	mov	r7, r2
 8000ba2:	d946      	bls.n	8000c32 <__udivmoddi4+0xa6>
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	b14a      	cbz	r2, 8000bbe <__udivmoddi4+0x32>
 8000baa:	f1c2 0120 	rsb	r1, r2, #32
 8000bae:	fa05 f302 	lsl.w	r3, r5, r2
 8000bb2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb6:	4097      	lsls	r7, r2
 8000bb8:	ea41 0e03 	orr.w	lr, r1, r3
 8000bbc:	4094      	lsls	r4, r2
 8000bbe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc2:	0c23      	lsrs	r3, r4, #16
 8000bc4:	fbbe fcf8 	udiv	ip, lr, r8
 8000bc8:	b2b9      	uxth	r1, r7
 8000bca:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000bce:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000bd2:	fb0c f001 	mul.w	r0, ip, r1
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x64>
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000be0:	f080 8116 	bcs.w	8000e10 <__udivmoddi4+0x284>
 8000be4:	4298      	cmp	r0, r3
 8000be6:	f240 8113 	bls.w	8000e10 <__udivmoddi4+0x284>
 8000bea:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bee:	443b      	add	r3, r7
 8000bf0:	1a1b      	subs	r3, r3, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c00:	fb00 f101 	mul.w	r1, r0, r1
 8000c04:	42a1      	cmp	r1, r4
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	f080 8101 	bcs.w	8000e14 <__udivmoddi4+0x288>
 8000c12:	42a1      	cmp	r1, r4
 8000c14:	f240 80fe 	bls.w	8000e14 <__udivmoddi4+0x288>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	1a64      	subs	r4, r4, r1
 8000c1e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40d4      	lsrs	r4, r2
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	b902      	cbnz	r2, 8000c36 <__udivmoddi4+0xaa>
 8000c34:	deff      	udf	#255	; 0xff
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d14f      	bne.n	8000cde <__udivmoddi4+0x152>
 8000c3e:	1bcb      	subs	r3, r1, r7
 8000c40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c44:	fa1f f887 	uxth.w	r8, r7
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4e:	0c25      	lsrs	r5, r4, #16
 8000c50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c58:	fb08 f30c 	mul.w	r3, r8, ip
 8000c5c:	42ab      	cmp	r3, r5
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0xe4>
 8000c60:	197d      	adds	r5, r7, r5
 8000c62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0xe2>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	f200 80e7 	bhi.w	8000e3c <__udivmoddi4+0x2b0>
 8000c6e:	4684      	mov	ip, r0
 8000c70:	1aed      	subs	r5, r5, r3
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c78:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c7c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x10c>
 8000c88:	193c      	adds	r4, r7, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x10a>
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	f200 80d7 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 0408 	sub.w	r4, r4, r8
 8000c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca0:	e7c0      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x12c>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	f000 80af 	beq.w	8000e0a <__udivmoddi4+0x27e>
 8000cac:	2100      	movs	r1, #0
 8000cae:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	fab3 f183 	clz	r1, r3
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	d14b      	bne.n	8000d58 <__udivmoddi4+0x1cc>
 8000cc0:	42ab      	cmp	r3, r5
 8000cc2:	d302      	bcc.n	8000cca <__udivmoddi4+0x13e>
 8000cc4:	4282      	cmp	r2, r0
 8000cc6:	f200 80b7 	bhi.w	8000e38 <__udivmoddi4+0x2ac>
 8000cca:	1a84      	subs	r4, r0, r2
 8000ccc:	eb65 0303 	sbc.w	r3, r5, r3
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	469e      	mov	lr, r3
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d0aa      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000cd8:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cdc:	e7a7      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000cde:	f1c2 0c20 	rsb	ip, r2, #32
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	4097      	lsls	r7, r2
 8000ce8:	fa20 f00c 	lsr.w	r0, r0, ip
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000cf4:	4318      	orrs	r0, r3
 8000cf6:	fbbc f1fe 	udiv	r1, ip, lr
 8000cfa:	0c05      	lsrs	r5, r0, #16
 8000cfc:	fb0e cc11 	mls	ip, lr, r1, ip
 8000d00:	fa1f f887 	uxth.w	r8, r7
 8000d04:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d08:	fb01 f308 	mul.w	r3, r1, r8
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x19c>
 8000d14:	197d      	adds	r5, r7, r5
 8000d16:	f101 3cff 	add.w	ip, r1, #4294967295
 8000d1a:	f080 808b 	bcs.w	8000e34 <__udivmoddi4+0x2a8>
 8000d1e:	42ab      	cmp	r3, r5
 8000d20:	f240 8088 	bls.w	8000e34 <__udivmoddi4+0x2a8>
 8000d24:	3902      	subs	r1, #2
 8000d26:	443d      	add	r5, r7
 8000d28:	1aeb      	subs	r3, r5, r3
 8000d2a:	b285      	uxth	r5, r0
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d38:	fb00 f308 	mul.w	r3, r0, r8
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x1c4>
 8000d40:	197d      	adds	r5, r7, r5
 8000d42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d46:	d271      	bcs.n	8000e2c <__udivmoddi4+0x2a0>
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	d96f      	bls.n	8000e2c <__udivmoddi4+0x2a0>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	443d      	add	r5, r7
 8000d50:	1aeb      	subs	r3, r5, r3
 8000d52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d56:	e778      	b.n	8000c4a <__udivmoddi4+0xbe>
 8000d58:	f1c1 0c20 	rsb	ip, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f70c 	lsr.w	r7, r2, ip
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 f40c 	lsr.w	r4, r0, ip
 8000d68:	fa05 f301 	lsl.w	r3, r5, r1
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa25 f50c 	lsr.w	r5, r5, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbb5 f9fe 	udiv	r9, r5, lr
 8000d7c:	fa1f f887 	uxth.w	r8, r7
 8000d80:	fb0e 5519 	mls	r5, lr, r9, r5
 8000d84:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000d88:	fb09 fa08 	mul.w	sl, r9, r8
 8000d8c:	45aa      	cmp	sl, r5
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	fa00 f301 	lsl.w	r3, r0, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x21e>
 8000d98:	197d      	adds	r5, r7, r5
 8000d9a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d9e:	d247      	bcs.n	8000e30 <__udivmoddi4+0x2a4>
 8000da0:	45aa      	cmp	sl, r5
 8000da2:	d945      	bls.n	8000e30 <__udivmoddi4+0x2a4>
 8000da4:	f1a9 0902 	sub.w	r9, r9, #2
 8000da8:	443d      	add	r5, r7
 8000daa:	eba5 050a 	sub.w	r5, r5, sl
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000db4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000db8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dbc:	fb00 f808 	mul.w	r8, r0, r8
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x248>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dca:	d22d      	bcs.n	8000e28 <__udivmoddi4+0x29c>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	d92b      	bls.n	8000e28 <__udivmoddi4+0x29c>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	443c      	add	r4, r7
 8000dd4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	fba0 8902 	umull	r8, r9, r0, r2
 8000de0:	454c      	cmp	r4, r9
 8000de2:	46c6      	mov	lr, r8
 8000de4:	464d      	mov	r5, r9
 8000de6:	d319      	bcc.n	8000e1c <__udivmoddi4+0x290>
 8000de8:	d016      	beq.n	8000e18 <__udivmoddi4+0x28c>
 8000dea:	b15e      	cbz	r6, 8000e04 <__udivmoddi4+0x278>
 8000dec:	ebb3 020e 	subs.w	r2, r3, lr
 8000df0:	eb64 0405 	sbc.w	r4, r4, r5
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40ca      	lsrs	r2, r1
 8000dfa:	ea4c 0202 	orr.w	r2, ip, r2
 8000dfe:	40cc      	lsrs	r4, r1
 8000e00:	e9c6 2400 	strd	r2, r4, [r6]
 8000e04:	2100      	movs	r1, #0
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e70e      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e10:	46ac      	mov	ip, r5
 8000e12:	e6ed      	b.n	8000bf0 <__udivmoddi4+0x64>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e701      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e18:	4543      	cmp	r3, r8
 8000e1a:	d2e6      	bcs.n	8000dea <__udivmoddi4+0x25e>
 8000e1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e20:	eb69 0507 	sbc.w	r5, r9, r7
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7e0      	b.n	8000dea <__udivmoddi4+0x25e>
 8000e28:	4628      	mov	r0, r5
 8000e2a:	e7d3      	b.n	8000dd4 <__udivmoddi4+0x248>
 8000e2c:	4660      	mov	r0, ip
 8000e2e:	e78f      	b.n	8000d50 <__udivmoddi4+0x1c4>
 8000e30:	4681      	mov	r9, r0
 8000e32:	e7ba      	b.n	8000daa <__udivmoddi4+0x21e>
 8000e34:	4661      	mov	r1, ip
 8000e36:	e777      	b.n	8000d28 <__udivmoddi4+0x19c>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e74b      	b.n	8000cd4 <__udivmoddi4+0x148>
 8000e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e40:	443d      	add	r5, r7
 8000e42:	e715      	b.n	8000c70 <__udivmoddi4+0xe4>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	e726      	b.n	8000c98 <__udivmoddi4+0x10c>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <OnTxTimerEvent>:
}

// TX timer callback function
// context ptr of timer context
static void OnTxTimerEvent(void *context)
{
 8000e50:	b508      	push	{r3, lr}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimer), CFG_SEQ_Prio_0);
 8000e52:	2100      	movs	r1, #0
 8000e54:	2002      	movs	r0, #2
 8000e56:	f015 fe5f 	bl	8016b18 <UTIL_SEQ_SetTask>
    // Wait for next tx slot
    UTIL_TIMER_Start(&TxTimer);
 8000e5a:	4802      	ldr	r0, [pc, #8]	; (8000e64 <OnTxTimerEvent+0x14>)
 8000e5c:	f016 f8d2 	bl	8017004 <UTIL_TIMER_Start>
}
 8000e60:	bd08      	pop	{r3, pc}
 8000e62:	bf00      	nop
 8000e64:	20000358 	.word	0x20000358

08000e68 <OnMacProcessNotify>:
    }
}

// Will be called each time a Radio IRQ is handled by the MAC layer
static void OnMacProcessNotify(void)
{
 8000e68:	b508      	push	{r3, lr}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f015 fe53 	bl	8016b18 <UTIL_SEQ_SetTask>
}
 8000e72:	bd08      	pop	{r3, pc}

08000e74 <OnRxTimerLedEvent>:
{
 8000e74:	b508      	push	{r3, lr}
    ledIndicateReceiveInProgress(false);
 8000e76:	2000      	movs	r0, #0
 8000e78:	f000 fb86 	bl	8001588 <ledIndicateReceiveInProgress>
}
 8000e7c:	bd08      	pop	{r3, pc}
	...

08000e80 <OnRxData>:
{
 8000e80:	b570      	push	{r4, r5, r6, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	460c      	mov	r4, r1
    if ((appData != NULL) || (params != NULL)) {
 8000e86:	4605      	mov	r5, r0
 8000e88:	b348      	cbz	r0, 8000ede <OnRxData+0x5e>
        ledIndicateReceiveInProgress(true);
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f000 fb7c 	bl	8001588 <ledIndicateReceiveInProgress>
        UTIL_TIMER_Start(&RxLedTimer);
 8000e90:	4820      	ldr	r0, [pc, #128]	; (8000f14 <OnRxData+0x94>)
 8000e92:	f016 f8b7 	bl	8017004 <UTIL_TIMER_Start>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 8000e96:	4b20      	ldr	r3, [pc, #128]	; (8000f18 <OnRxData+0x98>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	f015 fd15 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 8000ea2:	f994 200c 	ldrsb.w	r2, [r4, #12]
 8000ea6:	782b      	ldrb	r3, [r5, #0]
 8000ea8:	f994 1002 	ldrsb.w	r1, [r4, #2]
 8000eac:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8000eb0:	f994 6004 	ldrsb.w	r6, [r4, #4]
 8000eb4:	9605      	str	r6, [sp, #20]
 8000eb6:	9004      	str	r0, [sp, #16]
 8000eb8:	9103      	str	r1, [sp, #12]
 8000eba:	9302      	str	r3, [sp, #8]
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <OnRxData+0x9c>)
 8000ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	68a3      	ldr	r3, [r4, #8]
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <OnRxData+0xa0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	4611      	mov	r1, r2
 8000ece:	2003      	movs	r0, #3
 8000ed0:	f015 fcfc 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
        switch (appData->Port) {
 8000ed4:	782b      	ldrb	r3, [r5, #0]
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	d004      	beq.n	8000ee4 <OnRxData+0x64>
}
 8000eda:	b006      	add	sp, #24
 8000edc:	bd70      	pop	{r4, r5, r6, pc}
    if ((appData != NULL) || (params != NULL)) {
 8000ede:	2900      	cmp	r1, #0
 8000ee0:	d1d3      	bne.n	8000e8a <OnRxData+0xa>
    }
 8000ee2:	e7fa      	b.n	8000eda <OnRxData+0x5a>
            if (appData->BufferSize == 1) {
 8000ee4:	786b      	ldrb	r3, [r5, #1]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d1f7      	bne.n	8000eda <OnRxData+0x5a>
                switch (appData->Buffer[0]) {
 8000eea:	686b      	ldr	r3, [r5, #4]
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d007      	beq.n	8000f02 <OnRxData+0x82>
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d009      	beq.n	8000f0a <OnRxData+0x8a>
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1ef      	bne.n	8000eda <OnRxData+0x5a>
                    LmHandlerRequestClass(CLASS_A);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f006 f9be 	bl	800727c <LmHandlerRequestClass>
                    break;
 8000f00:	e7eb      	b.n	8000eda <OnRxData+0x5a>
                    LmHandlerRequestClass(CLASS_B);
 8000f02:	2001      	movs	r0, #1
 8000f04:	f006 f9ba 	bl	800727c <LmHandlerRequestClass>
                    break;
 8000f08:	e7e7      	b.n	8000eda <OnRxData+0x5a>
                    LmHandlerRequestClass(CLASS_C);
 8000f0a:	2002      	movs	r0, #2
 8000f0c:	f006 f9b6 	bl	800727c <LmHandlerRequestClass>
}
 8000f10:	e7e3      	b.n	8000eda <OnRxData+0x5a>
 8000f12:	bf00      	nop
 8000f14:	20000328 	.word	0x20000328
 8000f18:	080176b0 	.word	0x080176b0
 8000f1c:	08017914 	.word	0x08017914
 8000f20:	080176e4 	.word	0x080176e4

08000f24 <OnTxData>:
    if ((params != NULL)) {
 8000f24:	2800      	cmp	r0, #0
 8000f26:	d03f      	beq.n	8000fa8 <OnTxData+0x84>
{
 8000f28:	b510      	push	{r4, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	4604      	mov	r4, r0
        if (params->IsMcpsConfirm != 0) {
 8000f2e:	7803      	ldrb	r3, [r0, #0]
 8000f30:	b90b      	cbnz	r3, 8000f36 <OnTxData+0x12>
}
 8000f32:	b004      	add	sp, #16
 8000f34:	bd10      	pop	{r4, pc}
            ledIndicateTransmitInProgress(true);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f000 fb30 	bl	800159c <ledIndicateTransmitInProgress>
            UTIL_TIMER_Start(&TxLedTimer);
 8000f3c:	481b      	ldr	r0, [pc, #108]	; (8000fac <OnTxData+0x88>)
 8000f3e:	f016 f861 	bl	8017004 <UTIL_TIMER_Start>
            APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8000f42:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <OnTxData+0x8c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	4611      	mov	r1, r2
 8000f48:	2002      	movs	r0, #2
 8000f4a:	f015 fcbf 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
            APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8000f4e:	7b23      	ldrb	r3, [r4, #12]
 8000f50:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8000f54:	f994 1014 	ldrsb.w	r1, [r4, #20]
 8000f58:	9103      	str	r1, [sp, #12]
 8000f5a:	9202      	str	r2, [sp, #8]
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	68a3      	ldr	r3, [r4, #8]
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <OnTxData+0x90>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	4611      	mov	r1, r2
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f015 fcaf 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
            APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <OnTxData+0x94>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	4611      	mov	r1, r2
 8000f74:	2003      	movs	r0, #3
 8000f76:	f015 fca9 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
            if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG) {
 8000f7a:	78a3      	ldrb	r3, [r4, #2]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d10c      	bne.n	8000f9a <OnTxData+0x76>
                APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8000f80:	78e3      	ldrb	r3, [r4, #3]
 8000f82:	b143      	cbz	r3, 8000f96 <OnTxData+0x72>
 8000f84:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <OnTxData+0x98>)
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <OnTxData+0x9c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	2003      	movs	r0, #3
 8000f90:	f015 fc9c 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
 8000f94:	e7cd      	b.n	8000f32 <OnTxData+0xe>
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <OnTxData+0xa0>)
 8000f98:	e7f5      	b.n	8000f86 <OnTxData+0x62>
                APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <OnTxData+0xa4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f015 fc93 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
}
 8000fa6:	e7c4      	b.n	8000f32 <OnTxData+0xe>
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000340 	.word	0x20000340
 8000fb0:	08017738 	.word	0x08017738
 8000fb4:	0801776c 	.word	0x0801776c
 8000fb8:	080177a0 	.word	0x080177a0
 8000fbc:	08017734 	.word	0x08017734
 8000fc0:	080177b0 	.word	0x080177b0
 8000fc4:	0801772c 	.word	0x0801772c
 8000fc8:	080177c4 	.word	0x080177c4

08000fcc <OnTxTimerLedEvent>:
{
 8000fcc:	b508      	push	{r3, lr}
    ledIndicateTransmitInProgress(false);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 fae4 	bl	800159c <ledIndicateTransmitInProgress>
}
 8000fd4:	bd08      	pop	{r3, pc}
	...

08000fd8 <OnJoinRequest>:
    if (joinParams != NULL) {
 8000fd8:	b338      	cbz	r0, 800102a <OnJoinRequest+0x52>
{
 8000fda:	b510      	push	{r4, lr}
 8000fdc:	4604      	mov	r4, r0
        if (joinParams->Status == LORAMAC_HANDLER_SUCCESS) {
 8000fde:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8000fe2:	b9db      	cbnz	r3, 800101c <OnJoinRequest+0x44>
            UTIL_TIMER_Stop(&JoinLedTimer);
 8000fe4:	4811      	ldr	r0, [pc, #68]	; (800102c <OnJoinRequest+0x54>)
 8000fe6:	f015 ffab 	bl	8016f40 <UTIL_TIMER_Stop>
            ledJoined();
 8000fea:	f000 fa9f 	bl	800152c <ledJoined>
            APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <OnJoinRequest+0x58>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	2002      	movs	r0, #2
 8000ff6:	f015 fc69 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
            if (joinParams->Mode == ACTIVATION_TYPE_ABP) {
 8000ffa:	78a3      	ldrb	r3, [r4, #2]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d006      	beq.n	800100e <OnJoinRequest+0x36>
                APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <OnJoinRequest+0x5c>)
 8001002:	2200      	movs	r2, #0
 8001004:	4611      	mov	r1, r2
 8001006:	2002      	movs	r0, #2
 8001008:	f015 fc60 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
 800100c:	e00c      	b.n	8001028 <OnJoinRequest+0x50>
                APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <OnJoinRequest+0x60>)
 8001010:	2200      	movs	r2, #0
 8001012:	4611      	mov	r1, r2
 8001014:	2002      	movs	r0, #2
 8001016:	f015 fc59 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
 800101a:	e005      	b.n	8001028 <OnJoinRequest+0x50>
            APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <OnJoinRequest+0x64>)
 800101e:	2200      	movs	r2, #0
 8001020:	4611      	mov	r1, r2
 8001022:	2002      	movs	r0, #2
 8001024:	f015 fc52 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
}
 8001028:	bd10      	pop	{r4, pc}
 800102a:	4770      	bx	lr
 800102c:	20000310 	.word	0x20000310
 8001030:	080177d4 	.word	0x080177d4
 8001034:	0801780c 	.word	0x0801780c
 8001038:	080177ec 	.word	0x080177ec
 800103c:	0801782c 	.word	0x0801782c

08001040 <SendTxData>:
{
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	b08b      	sub	sp, #44	; 0x2c
    UTIL_TIMER_Time_t nextTxIn = 0;
 8001044:	2700      	movs	r7, #0
 8001046:	9703      	str	r7, [sp, #12]
    EnvSensors_Read(&sensor_data);
 8001048:	a804      	add	r0, sp, #16
 800104a:	f001 fa5d 	bl	8002508 <EnvSensors_Read>
    temperature = (SYS_GetTemperatureLevel() >> 8);
 800104e:	f000 fb6f 	bl	8001730 <SYS_GetTemperatureLevel>
 8001052:	f340 260f 	sbfx	r6, r0, #8, #16
    pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 8001056:	4937      	ldr	r1, [pc, #220]	; (8001134 <SendTxData+0xf4>)
 8001058:	9804      	ldr	r0, [sp, #16]
 800105a:	f7ff fc0f 	bl	800087c <__aeabi_fmul>
 800105e:	4936      	ldr	r1, [pc, #216]	; (8001138 <SendTxData+0xf8>)
 8001060:	f7ff fcc0 	bl	80009e4 <__aeabi_fdiv>
 8001064:	f7ff fd5a 	bl	8000b1c <__aeabi_f2uiz>
 8001068:	b285      	uxth	r5, r0
    AppData.Port = LORAWAN_USER_APP_PORT;
 800106a:	4c34      	ldr	r4, [pc, #208]	; (800113c <SendTxData+0xfc>)
 800106c:	2302      	movs	r3, #2
 800106e:	7023      	strb	r3, [r4, #0]
    humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8001070:	4931      	ldr	r1, [pc, #196]	; (8001138 <SendTxData+0xf8>)
 8001072:	9806      	ldr	r0, [sp, #24]
 8001074:	f7ff fc02 	bl	800087c <__aeabi_fmul>
 8001078:	f7ff fd50 	bl	8000b1c <__aeabi_f2uiz>
    AppData.Buffer[i++] = 0; // LED state
 800107c:	6863      	ldr	r3, [r4, #4]
 800107e:	701f      	strb	r7, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 8001080:	6863      	ldr	r3, [r4, #4]
 8001082:	0a2a      	lsrs	r2, r5, #8
 8001084:	705a      	strb	r2, [r3, #1]
    AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8001086:	6863      	ldr	r3, [r4, #4]
 8001088:	709d      	strb	r5, [r3, #2]
    AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800108a:	6863      	ldr	r3, [r4, #4]
 800108c:	70de      	strb	r6, [r3, #3]
    AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800108e:	6863      	ldr	r3, [r4, #4]
 8001090:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8001094:	711a      	strb	r2, [r3, #4]
    AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8001096:	6863      	ldr	r3, [r4, #4]
 8001098:	7158      	strb	r0, [r3, #5]
    if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800109a:	4b29      	ldr	r3, [pc, #164]	; (8001140 <SendTxData+0x100>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b08      	cmp	r3, #8
 80010a0:	d002      	beq.n	80010a8 <SendTxData+0x68>
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d000      	beq.n	80010a8 <SendTxData+0x68>
            || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923)) {
 80010a6:	b9ab      	cbnz	r3, 80010d4 <SendTxData+0x94>
        AppData.Buffer[i++] = 0;
 80010a8:	4a24      	ldr	r2, [pc, #144]	; (800113c <SendTxData+0xfc>)
 80010aa:	6851      	ldr	r1, [r2, #4]
 80010ac:	2300      	movs	r3, #0
 80010ae:	718b      	strb	r3, [r1, #6]
        AppData.Buffer[i++] = 0;
 80010b0:	6851      	ldr	r1, [r2, #4]
 80010b2:	71cb      	strb	r3, [r1, #7]
        AppData.Buffer[i++] = 0;
 80010b4:	6852      	ldr	r2, [r2, #4]
 80010b6:	7213      	strb	r3, [r2, #8]
        AppData.Buffer[i++] = 0;
 80010b8:	7253      	strb	r3, [r2, #9]
 80010ba:	230a      	movs	r3, #10
    AppData.BufferSize = i;
 80010bc:	481f      	ldr	r0, [pc, #124]	; (800113c <SendTxData+0xfc>)
 80010be:	7043      	strb	r3, [r0, #1]
    if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false)) {
 80010c0:	2300      	movs	r3, #0
 80010c2:	aa03      	add	r2, sp, #12
 80010c4:	4619      	mov	r1, r3
 80010c6:	f006 f985 	bl	80073d4 <LmHandlerSend>
 80010ca:	b1f8      	cbz	r0, 800110c <SendTxData+0xcc>
    } else if (nextTxIn > 0) {
 80010cc:	9b03      	ldr	r3, [sp, #12]
 80010ce:	bb23      	cbnz	r3, 800111a <SendTxData+0xda>
}
 80010d0:	b00b      	add	sp, #44	; 0x2c
 80010d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        latitude = sensor_data.latitude;
 80010d4:	9d07      	ldr	r5, [sp, #28]
        longitude = sensor_data.longitude;
 80010d6:	9c08      	ldr	r4, [sp, #32]
        AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 80010d8:	4e18      	ldr	r6, [pc, #96]	; (800113c <SendTxData+0xfc>)
 80010da:	6877      	ldr	r7, [r6, #4]
 80010dc:	f001 f994 	bl	8002408 <GetBatteryLevel>
 80010e0:	71b8      	strb	r0, [r7, #6]
        AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 80010e2:	6873      	ldr	r3, [r6, #4]
 80010e4:	f3c5 4207 	ubfx	r2, r5, #16, #8
 80010e8:	71da      	strb	r2, [r3, #7]
        AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 80010ea:	6873      	ldr	r3, [r6, #4]
 80010ec:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80010f0:	721a      	strb	r2, [r3, #8]
        AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 80010f2:	725d      	strb	r5, [r3, #9]
        AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 80010f4:	f3c4 4207 	ubfx	r2, r4, #16, #8
 80010f8:	729a      	strb	r2, [r3, #10]
        AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 80010fa:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80010fe:	72da      	strb	r2, [r3, #11]
        AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8001100:	731c      	strb	r4, [r3, #12]
        AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 8001102:	2200      	movs	r2, #0
 8001104:	735a      	strb	r2, [r3, #13]
        AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8001106:	739a      	strb	r2, [r3, #14]
 8001108:	230f      	movs	r3, #15
 800110a:	e7d7      	b.n	80010bc <SendTxData+0x7c>
        APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800110c:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <SendTxData+0x104>)
 800110e:	2201      	movs	r2, #1
 8001110:	2100      	movs	r1, #0
 8001112:	4610      	mov	r0, r2
 8001114:	f015 fbda 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
 8001118:	e7da      	b.n	80010d0 <SendTxData+0x90>
        APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800111a:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <SendTxData+0x108>)
 800111c:	fba2 2303 	umull	r2, r3, r2, r3
 8001120:	099b      	lsrs	r3, r3, #6
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <SendTxData+0x10c>)
 8001126:	2201      	movs	r2, #1
 8001128:	2100      	movs	r1, #0
 800112a:	4610      	mov	r0, r2
 800112c:	f015 fbce 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
}
 8001130:	e7ce      	b.n	80010d0 <SendTxData+0x90>
 8001132:	bf00      	nop
 8001134:	42c80000 	.word	0x42c80000
 8001138:	41200000 	.word	0x41200000
 800113c:	20000000 	.word	0x20000000
 8001140:	2000003c 	.word	0x2000003c
 8001144:	08017848 	.word	0x08017848
 8001148:	10624dd3 	.word	0x10624dd3
 800114c:	08017858 	.word	0x08017858

08001150 <OnJoinTimerLedEvent>:
{
 8001150:	b508      	push	{r3, lr}
    ledToggleJoin();
 8001152:	f000 fa0c 	bl	800156e <ledToggleJoin>
}
 8001156:	bd08      	pop	{r3, pc}

08001158 <App_Init>:
{
 8001158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800115c:	b084      	sub	sp, #16
 800115e:	4680      	mov	r8, r0
    APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8001160:	2400      	movs	r4, #0
 8001162:	9402      	str	r4, [sp, #8]
 8001164:	2501      	movs	r5, #1
 8001166:	9501      	str	r5, [sp, #4]
 8001168:	9500      	str	r5, [sp, #0]
 800116a:	4b3a      	ldr	r3, [pc, #232]	; (8001254 <App_Init+0xfc>)
 800116c:	4622      	mov	r2, r4
 800116e:	4621      	mov	r1, r4
 8001170:	2002      	movs	r0, #2
 8001172:	f015 fbab 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8001176:	9402      	str	r4, [sp, #8]
 8001178:	2303      	movs	r3, #3
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	2602      	movs	r6, #2
 800117e:	9600      	str	r6, [sp, #0]
 8001180:	4b35      	ldr	r3, [pc, #212]	; (8001258 <App_Init+0x100>)
 8001182:	4622      	mov	r2, r4
 8001184:	4621      	mov	r1, r4
 8001186:	4630      	mov	r0, r6
 8001188:	f015 fba0 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800118c:	9402      	str	r4, [sp, #8]
 800118e:	9501      	str	r5, [sp, #4]
 8001190:	9500      	str	r5, [sp, #0]
 8001192:	4b32      	ldr	r3, [pc, #200]	; (800125c <App_Init+0x104>)
 8001194:	4622      	mov	r2, r4
 8001196:	4621      	mov	r1, r4
 8001198:	4630      	mov	r0, r6
 800119a:	f015 fb97 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
    UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800119e:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8001288 <App_Init+0x130>
 80011a2:	9400      	str	r4, [sp, #0]
 80011a4:	4b2e      	ldr	r3, [pc, #184]	; (8001260 <App_Init+0x108>)
 80011a6:	4622      	mov	r2, r4
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ac:	4650      	mov	r0, sl
 80011ae:	f015 fe69 	bl	8016e84 <UTIL_TIMER_Create>
    UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 80011b2:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 800128c <App_Init+0x134>
 80011b6:	9400      	str	r4, [sp, #0]
 80011b8:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <App_Init+0x10c>)
 80011ba:	4622      	mov	r2, r4
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295
 80011c0:	4648      	mov	r0, r9
 80011c2:	f015 fe5f 	bl	8016e84 <UTIL_TIMER_Create>
    UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 80011c6:	4f28      	ldr	r7, [pc, #160]	; (8001268 <App_Init+0x110>)
 80011c8:	9400      	str	r4, [sp, #0]
 80011ca:	4b28      	ldr	r3, [pc, #160]	; (800126c <App_Init+0x114>)
 80011cc:	462a      	mov	r2, r5
 80011ce:	f04f 31ff 	mov.w	r1, #4294967295
 80011d2:	4638      	mov	r0, r7
 80011d4:	f015 fe56 	bl	8016e84 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 80011d8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80011dc:	4650      	mov	r0, sl
 80011de:	f015 ff57 	bl	8017090 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 80011e2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80011e6:	4648      	mov	r0, r9
 80011e8:	f015 ff52 	bl	8017090 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 80011ec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80011f0:	4638      	mov	r0, r7
 80011f2:	f015 ff4d 	bl	8017090 <UTIL_TIMER_SetPeriod>
    UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 80011f6:	4a1e      	ldr	r2, [pc, #120]	; (8001270 <App_Init+0x118>)
 80011f8:	4621      	mov	r1, r4
 80011fa:	4628      	mov	r0, r5
 80011fc:	f015 fd4a 	bl	8016c94 <UTIL_SEQ_RegTask>
    UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimer), UTIL_SEQ_RFU, SendTxData);
 8001200:	4a1c      	ldr	r2, [pc, #112]	; (8001274 <App_Init+0x11c>)
 8001202:	4621      	mov	r1, r4
 8001204:	4630      	mov	r0, r6
 8001206:	f015 fd45 	bl	8016c94 <UTIL_SEQ_RegTask>
    LoraInfo_Init();
 800120a:	f000 f9cf 	bl	80015ac <LoraInfo_Init>
    LmHandlerParams.ActiveRegion = selectedRegion;
 800120e:	4d1a      	ldr	r5, [pc, #104]	; (8001278 <App_Init+0x120>)
 8001210:	f885 8000 	strb.w	r8, [r5]
    LmHandlerInit(&LmHandlerCallbacks);
 8001214:	4819      	ldr	r0, [pc, #100]	; (800127c <App_Init+0x124>)
 8001216:	f006 fa97 	bl	8007748 <LmHandlerInit>
    LmHandlerConfigure(&LmHandlerParams);
 800121a:	4628      	mov	r0, r5
 800121c:	f005 ff36 	bl	800708c <LmHandlerConfigure>
    UTIL_TIMER_Start(&JoinLedTimer);
 8001220:	4638      	mov	r0, r7
 8001222:	f015 feef 	bl	8017004 <UTIL_TIMER_Start>
    LmHandlerJoin(ActivationType);
 8001226:	4630      	mov	r0, r6
 8001228:	f006 f88a 	bl	8007340 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800122c:	4d14      	ldr	r5, [pc, #80]	; (8001280 <App_Init+0x128>)
 800122e:	9400      	str	r4, [sp, #0]
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <App_Init+0x12c>)
 8001232:	4622      	mov	r2, r4
 8001234:	f04f 31ff 	mov.w	r1, #4294967295
 8001238:	4628      	mov	r0, r5
 800123a:	f015 fe23 	bl	8016e84 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer, APP_TX_DUTYCYCLE);
 800123e:	f242 7110 	movw	r1, #10000	; 0x2710
 8001242:	4628      	mov	r0, r5
 8001244:	f015 ff24 	bl	8017090 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8001248:	4628      	mov	r0, r5
 800124a:	f015 fedb 	bl	8017004 <UTIL_TIMER_Start>
}
 800124e:	b004      	add	sp, #16
 8001250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001254:	08017878 	.word	0x08017878
 8001258:	08017898 	.word	0x08017898
 800125c:	080178b8 	.word	0x080178b8
 8001260:	08000fcd 	.word	0x08000fcd
 8001264:	08000e75 	.word	0x08000e75
 8001268:	20000310 	.word	0x20000310
 800126c:	08001151 	.word	0x08001151
 8001270:	08007249 	.word	0x08007249
 8001274:	08001041 	.word	0x08001041
 8001278:	2000003c 	.word	0x2000003c
 800127c:	20000008 	.word	0x20000008
 8001280:	20000358 	.word	0x20000358
 8001284:	08000e51 	.word	0x08000e51
 8001288:	20000340 	.word	0x20000340
 800128c:	20000328 	.word	0x20000328

08001290 <MX_AppISR>:
}

// ISR for interrupts to be processed by the app
void MX_AppISR(uint16_t GPIO_Pin)
{
}
 8001290:	4770      	bx	lr

08001292 <tristate>:
// Get the value of a tri-state GPIO
#define TRISTATE_FLOAT  0
#define TRISTATE_HIGH   1
#define TRISTATE_LOW    2
int tristate(uint16_t pin, GPIO_TypeDef *port)
{
 8001292:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001296:	b087      	sub	sp, #28
 8001298:	4605      	mov	r5, r0
 800129a:	460c      	mov	r4, r1
    GPIO_InitTypeDef  gpio_init_structure = {0};
 800129c:	2600      	movs	r6, #0
 800129e:	9605      	str	r6, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80012a0:	9602      	str	r6, [sp, #8]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a6:	2702      	movs	r7, #2
 80012a8:	9704      	str	r7, [sp, #16]
    gpio_init_structure.Pin = pin;
 80012aa:	9001      	str	r0, [sp, #4]
    HAL_GPIO_Init(port, &gpio_init_structure);
 80012ac:	a901      	add	r1, sp, #4
 80012ae:	4620      	mov	r0, r4
 80012b0:	f002 f9dc 	bl	800366c <HAL_GPIO_Init>
    bool pulledHigh = (GPIO_PIN_SET == HAL_GPIO_ReadPin(port, pin));
 80012b4:	4629      	mov	r1, r5
 80012b6:	4620      	mov	r0, r4
 80012b8:	f002 fa90 	bl	80037dc <HAL_GPIO_ReadPin>
 80012bc:	4680      	mov	r8, r0
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80012be:	9602      	str	r6, [sp, #8]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 80012c0:	9703      	str	r7, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c2:	9704      	str	r7, [sp, #16]
    gpio_init_structure.Pin = pin;
 80012c4:	9501      	str	r5, [sp, #4]
    HAL_GPIO_Init(port, &gpio_init_structure);
 80012c6:	a901      	add	r1, sp, #4
 80012c8:	4620      	mov	r0, r4
 80012ca:	f002 f9cf 	bl	800366c <HAL_GPIO_Init>
    bool pulledLow = (GPIO_PIN_RESET == HAL_GPIO_ReadPin(port, pin));
 80012ce:	4629      	mov	r1, r5
 80012d0:	4620      	mov	r0, r4
 80012d2:	f002 fa83 	bl	80037dc <HAL_GPIO_ReadPin>
 80012d6:	4681      	mov	r9, r0
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80012d8:	9602      	str	r6, [sp, #8]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80012da:	9603      	str	r6, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80012dc:	9704      	str	r7, [sp, #16]
    gpio_init_structure.Pin = pin;
 80012de:	9501      	str	r5, [sp, #4]
    HAL_GPIO_Init(port, &gpio_init_structure);
 80012e0:	a901      	add	r1, sp, #4
 80012e2:	4620      	mov	r0, r4
 80012e4:	f002 f9c2 	bl	800366c <HAL_GPIO_Init>
    bool high = (GPIO_PIN_SET == HAL_GPIO_ReadPin(port, pin));
 80012e8:	4629      	mov	r1, r5
 80012ea:	4620      	mov	r0, r4
 80012ec:	f002 fa76 	bl	80037dc <HAL_GPIO_ReadPin>
 80012f0:	4607      	mov	r7, r0
    gpio_init_structure.Mode = GPIO_MODE_ANALOG;
 80012f2:	2303      	movs	r3, #3
 80012f4:	9302      	str	r3, [sp, #8]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80012f6:	9603      	str	r6, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	9604      	str	r6, [sp, #16]
    gpio_init_structure.Pin = pin;
 80012fa:	9501      	str	r5, [sp, #4]
    HAL_GPIO_Init(port, &gpio_init_structure);
 80012fc:	a901      	add	r1, sp, #4
 80012fe:	4620      	mov	r0, r4
 8001300:	f002 f9b4 	bl	800366c <HAL_GPIO_Init>
    if (pulledHigh && pulledLow) {
 8001304:	f1b8 0f01 	cmp.w	r8, #1
 8001308:	d005      	beq.n	8001316 <tristate+0x84>
        return TRISTATE_FLOAT;
    }
    return (high ? TRISTATE_HIGH : TRISTATE_LOW);
 800130a:	2f01      	cmp	r7, #1
 800130c:	d008      	beq.n	8001320 <tristate+0x8e>
 800130e:	2002      	movs	r0, #2
}
 8001310:	b007      	add	sp, #28
 8001312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (pulledHigh && pulledLow) {
 8001316:	f1b9 0f00 	cmp.w	r9, #0
 800131a:	d1f6      	bne.n	800130a <tristate+0x78>
        return TRISTATE_FLOAT;
 800131c:	2000      	movs	r0, #0
 800131e:	e7f7      	b.n	8001310 <tristate+0x7e>
    return (high ? TRISTATE_HIGH : TRISTATE_LOW);
 8001320:	2001      	movs	r0, #1
 8001322:	e7f5      	b.n	8001310 <tristate+0x7e>

08001324 <ioInit>:

// Initialize app hardware I/O
void ioInit(void)
{
 8001324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001328:	b086      	sub	sp, #24
    GPIO_InitTypeDef  gpio_init_structure = {0};
 800132a:	2300      	movs	r3, #0
 800132c:	9305      	str	r3, [sp, #20]

    // Compute the RF frequency based on the region switch settings.  Note that
    // we power these pins with LED_RED so that they aren't a constant current
    // draw on the system.
#if (CURRENT_BOARD!=BOARD_NUCLEO)
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2401      	movs	r4, #1
 8001330:	9402      	str	r4, [sp, #8]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001332:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Pin = LED_RED_Pin;
 8001336:	9401      	str	r4, [sp, #4]
    HAL_GPIO_Init(LED_RED_GPIO_Port, &gpio_init_structure);
 8001338:	a901      	add	r1, sp, #4
 800133a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133e:	f002 f995 	bl	800366c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001342:	4622      	mov	r2, r4
 8001344:	4621      	mov	r1, r4
 8001346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134a:	f002 fa4e 	bl	80037ea <HAL_GPIO_WritePin>
    int gpio0 = tristate(RFSEL_0_Pin, RFSEL_0_GPIO_Port);
 800134e:	4d6b      	ldr	r5, [pc, #428]	; (80014fc <ioInit+0x1d8>)
 8001350:	4629      	mov	r1, r5
 8001352:	2008      	movs	r0, #8
 8001354:	f7ff ff9d 	bl	8001292 <tristate>
 8001358:	4604      	mov	r4, r0
    int gpio1 = tristate(RFSEL_1_Pin, RFSEL_1_GPIO_Port);
 800135a:	4629      	mov	r1, r5
 800135c:	2020      	movs	r0, #32
 800135e:	f7ff ff98 	bl	8001292 <tristate>
    int value = 0;
    if (gpio0 == TRISTATE_FLOAT && gpio1 == TRISTATE_FLOAT) {
 8001362:	b904      	cbnz	r4, 8001366 <ioInit+0x42>
 8001364:	b350      	cbz	r0, 80013bc <ioInit+0x98>
        value = 0;
    } else if (gpio0 == TRISTATE_HIGH && gpio1 == TRISTATE_FLOAT) {
 8001366:	2c01      	cmp	r4, #1
 8001368:	d076      	beq.n	8001458 <ioInit+0x134>
        value = 1;
    } else if (gpio0 == TRISTATE_LOW && gpio1 == TRISTATE_FLOAT) {
 800136a:	2c02      	cmp	r4, #2
 800136c:	d07a      	beq.n	8001464 <ioInit+0x140>
        value = 2;
    } else if (gpio0 == TRISTATE_HIGH && gpio1 == TRISTATE_FLOAT) {
 800136e:	2c01      	cmp	r4, #1
 8001370:	d07e      	beq.n	8001470 <ioInit+0x14c>
        value = 1;
    } else if (gpio0 == TRISTATE_FLOAT && gpio1 == TRISTATE_HIGH) {
 8001372:	b914      	cbnz	r4, 800137a <ioInit+0x56>
 8001374:	2801      	cmp	r0, #1
 8001376:	f000 80b1 	beq.w	80014dc <ioInit+0x1b8>
        value = 3;
    } else if (gpio0 == TRISTATE_HIGH && gpio1 == TRISTATE_HIGH) {
 800137a:	2c01      	cmp	r4, #1
 800137c:	d07b      	beq.n	8001476 <ioInit+0x152>
        value = 4;
    } else if (gpio0 == TRISTATE_LOW && gpio1 == TRISTATE_HIGH) {
 800137e:	2c02      	cmp	r4, #2
 8001380:	d07f      	beq.n	8001482 <ioInit+0x15e>
        value = 5;
    } else if (gpio0 == TRISTATE_HIGH && gpio1 == TRISTATE_HIGH) {
 8001382:	2c01      	cmp	r4, #1
 8001384:	f000 8084 	beq.w	8001490 <ioInit+0x16c>
        value = 4;
    } else if (gpio0 == TRISTATE_FLOAT && gpio1 == TRISTATE_LOW) {
 8001388:	b914      	cbnz	r4, 8001390 <ioInit+0x6c>
 800138a:	2802      	cmp	r0, #2
 800138c:	f000 80a2 	beq.w	80014d4 <ioInit+0x1b0>
        value = 6;
    } else if (gpio0 == TRISTATE_HIGH && gpio1 == TRISTATE_LOW) {
 8001390:	2c01      	cmp	r4, #1
 8001392:	f000 8081 	beq.w	8001498 <ioInit+0x174>
        value = 7;
    } else if (gpio0 == TRISTATE_LOW && gpio1 == TRISTATE_LOW) {
 8001396:	2c02      	cmp	r4, #2
 8001398:	f000 8085 	beq.w	80014a6 <ioInit+0x182>
        value = 8;
    } else if (gpio0 == TRISTATE_HIGH && gpio1 == TRISTATE_LOW) {
 800139c:	2c01      	cmp	r4, #1
 800139e:	f000 8089 	beq.w	80014b4 <ioInit+0x190>
        value = 7;
    } else if (gpio0 == TRISTATE_FLOAT && gpio1 == TRISTATE_HIGH) {
 80013a2:	b914      	cbnz	r4, 80013aa <ioInit+0x86>
 80013a4:	2801      	cmp	r0, #1
 80013a6:	f000 8099 	beq.w	80014dc <ioInit+0x1b8>
        value = 3;
    } else if (gpio0 == TRISTATE_HIGH && gpio1 == TRISTATE_HIGH) {
 80013aa:	2c01      	cmp	r4, #1
 80013ac:	f000 8086 	beq.w	80014bc <ioInit+0x198>
        value = 4;
    } else if (gpio0 == TRISTATE_LOW && gpio1 == TRISTATE_HIGH) {
 80013b0:	2c02      	cmp	r4, #2
 80013b2:	f000 8087 	beq.w	80014c4 <ioInit+0x1a0>
        value = 5;
    } else if (gpio0 == TRISTATE_HIGH && gpio1 == TRISTATE_HIGH) {
 80013b6:	2c01      	cmp	r4, #1
 80013b8:	f000 8088 	beq.w	80014cc <ioInit+0x1a8>
        value = 4;
    }
    switch (value) {
    default:
    case 0:
        RegionSwitchSelection = LORAMAC_REGION_US915;   // OFF OFF OFF OFF (US915)
 80013bc:	4b50      	ldr	r3, [pc, #320]	; (8001500 <ioInit+0x1dc>)
 80013be:	2208      	movs	r2, #8
 80013c0:	701a      	strb	r2, [r3, #0]
#else
    RegionSwitchSelection = LORAMAC_REGION_US915;       // When using NUCLEO, use US region
#endif

    // Init LEDs
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80013c2:	2501      	movs	r5, #1
 80013c4:	9502      	str	r5, [sp, #8]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80013c6:	2400      	movs	r4, #0
 80013c8:	9403      	str	r4, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	9404      	str	r4, [sp, #16]
    gpio_init_structure.Pin = LED_BLUE_Pin;
 80013cc:	2602      	movs	r6, #2
 80013ce:	9601      	str	r6, [sp, #4]
    HAL_GPIO_Init(LED_BLUE_GPIO_Port, &gpio_init_structure);
 80013d0:	a901      	add	r1, sp, #4
 80013d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d6:	f002 f949 	bl	800366c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80013da:	4622      	mov	r2, r4
 80013dc:	4631      	mov	r1, r6
 80013de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e2:	f002 fa02 	bl	80037ea <HAL_GPIO_WritePin>
    gpio_init_structure.Pin = LED_GREEN_Pin;
 80013e6:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 80013ea:	f8cd 8004 	str.w	r8, [sp, #4]
    HAL_GPIO_Init(LED_GREEN_GPIO_Port, &gpio_init_structure);
 80013ee:	4f43      	ldr	r7, [pc, #268]	; (80014fc <ioInit+0x1d8>)
 80013f0:	a901      	add	r1, sp, #4
 80013f2:	4638      	mov	r0, r7
 80013f4:	f002 f93a 	bl	800366c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80013f8:	4622      	mov	r2, r4
 80013fa:	4641      	mov	r1, r8
 80013fc:	4638      	mov	r0, r7
 80013fe:	f002 f9f4 	bl	80037ea <HAL_GPIO_WritePin>
    gpio_init_structure.Pin = LED_RED_Pin;
 8001402:	9501      	str	r5, [sp, #4]
    HAL_GPIO_Init(LED_RED_GPIO_Port, &gpio_init_structure);
 8001404:	a901      	add	r1, sp, #4
 8001406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140a:	f002 f92f 	bl	800366c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800140e:	4622      	mov	r2, r4
 8001410:	4629      	mov	r1, r5
 8001412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001416:	f002 f9e8 	bl	80037ea <HAL_GPIO_WritePin>

    // Init button, and determine whether or not it was held down at boot
    gpio_init_structure.Pin = BUTTON1_Pin;
 800141a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800141e:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001420:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001424:	9302      	str	r3, [sp, #8]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001426:	9604      	str	r6, [sp, #16]
    gpio_init_structure.Pull = BUTTON1_ACTIVE_HIGH ? GPIO_PULLDOWN : GPIO_PULLUP;
 8001428:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(BUTTON1_GPIO_Port, &gpio_init_structure);
 800142a:	a901      	add	r1, sp, #4
 800142c:	4835      	ldr	r0, [pc, #212]	; (8001504 <ioInit+0x1e0>)
 800142e:	f002 f91d 	bl	800366c <HAL_GPIO_Init>
    for (int i=0; i<250; i++) {
 8001432:	2cf9      	cmp	r4, #249	; 0xf9
 8001434:	dc56      	bgt.n	80014e4 <ioInit+0x1c0>
        HAL_Delay(1);
 8001436:	2001      	movs	r0, #1
 8001438:	f001 f85c 	bl	80024f4 <HAL_Delay>
        buttonHeldAtBoot = (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == (BUTTON1_ACTIVE_HIGH ? GPIO_PIN_SET : GPIO_PIN_RESET));
 800143c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001440:	4830      	ldr	r0, [pc, #192]	; (8001504 <ioInit+0x1e0>)
 8001442:	f002 f9cb 	bl	80037dc <HAL_GPIO_ReadPin>
 8001446:	fab0 f080 	clz	r0, r0
 800144a:	0940      	lsrs	r0, r0, #5
 800144c:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <ioInit+0x1e4>)
 800144e:	7018      	strb	r0, [r3, #0]
        if (!buttonHeldAtBoot) {
 8001450:	2800      	cmp	r0, #0
 8001452:	d047      	beq.n	80014e4 <ioInit+0x1c0>
    for (int i=0; i<250; i++) {
 8001454:	3401      	adds	r4, #1
 8001456:	e7ec      	b.n	8001432 <ioInit+0x10e>
    } else if (gpio0 == TRISTATE_HIGH && gpio1 == TRISTATE_FLOAT) {
 8001458:	2800      	cmp	r0, #0
 800145a:	d186      	bne.n	800136a <ioInit+0x46>
        RegionSwitchSelection = LORAMAC_REGION_AS923;   //  ON OFF OFF OFF (AS923)
 800145c:	4b28      	ldr	r3, [pc, #160]	; (8001500 <ioInit+0x1dc>)
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
        break;
 8001462:	e7ae      	b.n	80013c2 <ioInit+0x9e>
    } else if (gpio0 == TRISTATE_LOW && gpio1 == TRISTATE_FLOAT) {
 8001464:	2800      	cmp	r0, #0
 8001466:	d182      	bne.n	800136e <ioInit+0x4a>
        RegionSwitchSelection = LORAMAC_REGION_KR920;   // OFF  ON OFF OFF (KR920)
 8001468:	4b25      	ldr	r3, [pc, #148]	; (8001500 <ioInit+0x1dc>)
 800146a:	2206      	movs	r2, #6
 800146c:	701a      	strb	r2, [r3, #0]
        break;
 800146e:	e7a8      	b.n	80013c2 <ioInit+0x9e>
    } else if (gpio0 == TRISTATE_HIGH && gpio1 == TRISTATE_FLOAT) {
 8001470:	2800      	cmp	r0, #0
 8001472:	d0f3      	beq.n	800145c <ioInit+0x138>
 8001474:	e77d      	b.n	8001372 <ioInit+0x4e>
    } else if (gpio0 == TRISTATE_HIGH && gpio1 == TRISTATE_HIGH) {
 8001476:	2801      	cmp	r0, #1
 8001478:	d181      	bne.n	800137e <ioInit+0x5a>
        RegionSwitchSelection = LORAMAC_REGION_EU868;   //  ON OFF  ON OFF (EU868)
 800147a:	4b21      	ldr	r3, [pc, #132]	; (8001500 <ioInit+0x1dc>)
 800147c:	2205      	movs	r2, #5
 800147e:	701a      	strb	r2, [r3, #0]
        break;
 8001480:	e79f      	b.n	80013c2 <ioInit+0x9e>
    } else if (gpio0 == TRISTATE_LOW && gpio1 == TRISTATE_HIGH) {
 8001482:	2801      	cmp	r0, #1
 8001484:	f47f af7d 	bne.w	8001382 <ioInit+0x5e>
        RegionSwitchSelection = LORAMAC_REGION_RU864;   // OFF  ON  ON OFF (RU864)
 8001488:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <ioInit+0x1dc>)
 800148a:	2209      	movs	r2, #9
 800148c:	701a      	strb	r2, [r3, #0]
        break;
 800148e:	e798      	b.n	80013c2 <ioInit+0x9e>
    } else if (gpio0 == TRISTATE_HIGH && gpio1 == TRISTATE_HIGH) {
 8001490:	2801      	cmp	r0, #1
 8001492:	f47f af79 	bne.w	8001388 <ioInit+0x64>
 8001496:	e7f0      	b.n	800147a <ioInit+0x156>
    } else if (gpio0 == TRISTATE_HIGH && gpio1 == TRISTATE_LOW) {
 8001498:	2802      	cmp	r0, #2
 800149a:	f47f af7c 	bne.w	8001396 <ioInit+0x72>
        RegionSwitchSelection = LORAMAC_REGION_CN470;   //  ON OFF OFF  ON (CN470)
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <ioInit+0x1dc>)
 80014a0:	2202      	movs	r2, #2
 80014a2:	701a      	strb	r2, [r3, #0]
        break;
 80014a4:	e78d      	b.n	80013c2 <ioInit+0x9e>
    } else if (gpio0 == TRISTATE_LOW && gpio1 == TRISTATE_LOW) {
 80014a6:	2802      	cmp	r0, #2
 80014a8:	f47f af78 	bne.w	800139c <ioInit+0x78>
        RegionSwitchSelection = LORAMAC_REGION_EU433;   // OFF  ON OFF  ON (EU433)
 80014ac:	4b14      	ldr	r3, [pc, #80]	; (8001500 <ioInit+0x1dc>)
 80014ae:	2204      	movs	r2, #4
 80014b0:	701a      	strb	r2, [r3, #0]
        break;
 80014b2:	e786      	b.n	80013c2 <ioInit+0x9e>
    } else if (gpio0 == TRISTATE_HIGH && gpio1 == TRISTATE_LOW) {
 80014b4:	2802      	cmp	r0, #2
 80014b6:	f47f af74 	bne.w	80013a2 <ioInit+0x7e>
 80014ba:	e7f0      	b.n	800149e <ioInit+0x17a>
    } else if (gpio0 == TRISTATE_HIGH && gpio1 == TRISTATE_HIGH) {
 80014bc:	2801      	cmp	r0, #1
 80014be:	f47f af77 	bne.w	80013b0 <ioInit+0x8c>
 80014c2:	e7da      	b.n	800147a <ioInit+0x156>
    } else if (gpio0 == TRISTATE_LOW && gpio1 == TRISTATE_HIGH) {
 80014c4:	2801      	cmp	r0, #1
 80014c6:	f47f af76 	bne.w	80013b6 <ioInit+0x92>
 80014ca:	e7dd      	b.n	8001488 <ioInit+0x164>
    } else if (gpio0 == TRISTATE_HIGH && gpio1 == TRISTATE_HIGH) {
 80014cc:	2801      	cmp	r0, #1
 80014ce:	f47f af75 	bne.w	80013bc <ioInit+0x98>
 80014d2:	e7d2      	b.n	800147a <ioInit+0x156>
        RegionSwitchSelection = LORAMAC_REGION_CN779;   // OFF OFF OFF  ON (CN779)
 80014d4:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <ioInit+0x1dc>)
 80014d6:	2203      	movs	r2, #3
 80014d8:	701a      	strb	r2, [r3, #0]
        break;
 80014da:	e772      	b.n	80013c2 <ioInit+0x9e>
        RegionSwitchSelection = LORAMAC_REGION_IN865;   // OFF OFF  ON OFF (IN865)
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <ioInit+0x1dc>)
 80014de:	2207      	movs	r2, #7
 80014e0:	701a      	strb	r2, [r3, #0]
        break;
 80014e2:	e76e      	b.n	80013c2 <ioInit+0x9e>
            break;
        }
    }
    HAL_NVIC_SetPriority(BUTTON1_EXTI_IRQn, BUTTONx_IT_PRIORITY, 0x00);
 80014e4:	2200      	movs	r2, #0
 80014e6:	210f      	movs	r1, #15
 80014e8:	2029      	movs	r0, #41	; 0x29
 80014ea:	f001 fec5 	bl	8003278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BUTTON1_EXTI_IRQn);
 80014ee:	2029      	movs	r0, #41	; 0x29
 80014f0:	f001 fef6 	bl	80032e0 <HAL_NVIC_EnableIRQ>

}
 80014f4:	b006      	add	sp, #24
 80014f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014fa:	bf00      	nop
 80014fc:	48000400 	.word	0x48000400
 8001500:	2000004c 	.word	0x2000004c
 8001504:	48000800 	.word	0x48000800
 8001508:	20000370 	.word	0x20000370

0800150c <MX_AppMain>:
{
 800150c:	b508      	push	{r3, lr}
    ioInit();
 800150e:	f7ff ff09 	bl	8001324 <ioInit>
    SystemApp_Init();
 8001512:	f000 ff73 	bl	80023fc <SystemApp_Init>
    App_Init(RegionSwitchSelection);
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <MX_AppMain+0x1c>)
 8001518:	7818      	ldrb	r0, [r3, #0]
 800151a:	f7ff fe1d 	bl	8001158 <App_Init>
        UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800151e:	f04f 30ff 	mov.w	r0, #4294967295
 8001522:	f015 fb2f 	bl	8016b84 <UTIL_SEQ_Run>
    while (1) {
 8001526:	e7fa      	b.n	800151e <MX_AppMain+0x12>
 8001528:	2000004c 	.word	0x2000004c

0800152c <ledJoined>:
#include "main.h"
#include "app.h"

// Indicate that we've joined
void ledJoined()
{
 800152c:	b510      	push	{r4, lr}
    for (int i=0; i<3; i++) {
 800152e:	2400      	movs	r4, #0
 8001530:	e012      	b.n	8001558 <ledJoined+0x2c>
        HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8001532:	2201      	movs	r2, #1
 8001534:	2102      	movs	r1, #2
 8001536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153a:	f002 f956 	bl	80037ea <HAL_GPIO_WritePin>
        HAL_Delay(250);
 800153e:	20fa      	movs	r0, #250	; 0xfa
 8001540:	f000 ffd8 	bl	80024f4 <HAL_Delay>
        HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	2102      	movs	r1, #2
 8001548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154c:	f002 f94d 	bl	80037ea <HAL_GPIO_WritePin>
        HAL_Delay(250);
 8001550:	20fa      	movs	r0, #250	; 0xfa
 8001552:	f000 ffcf 	bl	80024f4 <HAL_Delay>
    for (int i=0; i<3; i++) {
 8001556:	3401      	adds	r4, #1
 8001558:	2c02      	cmp	r4, #2
 800155a:	ddea      	ble.n	8001532 <ledJoined+0x6>
    }

}
 800155c:	bd10      	pop	{r4, pc}

0800155e <ledIndicateJoinInProgress>:

// Indicate that a join is in progress
void ledIndicateJoinInProgress(bool on)
{
 800155e:	b508      	push	{r3, lr}
 8001560:	4602      	mov	r2, r0
    HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001562:	2102      	movs	r1, #2
 8001564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001568:	f002 f93f 	bl	80037ea <HAL_GPIO_WritePin>
}
 800156c:	bd08      	pop	{r3, pc}

0800156e <ledToggleJoin>:

// Toggle join status
void ledToggleJoin()
{
 800156e:	b508      	push	{r3, lr}
    bool on = HAL_GPIO_ReadPin(LED_BLUE_GPIO_Port, LED_BLUE_Pin) == GPIO_PIN_SET;
 8001570:	2102      	movs	r1, #2
 8001572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001576:	f002 f931 	bl	80037dc <HAL_GPIO_ReadPin>
    ledIndicateJoinInProgress(!on);
 800157a:	3801      	subs	r0, #1
 800157c:	bf18      	it	ne
 800157e:	2001      	movne	r0, #1
 8001580:	f7ff ffed 	bl	800155e <ledIndicateJoinInProgress>
}
 8001584:	bd08      	pop	{r3, pc}
	...

08001588 <ledIndicateReceiveInProgress>:

// Indicate that a receive is in progress
void ledIndicateReceiveInProgress(bool on)
{
 8001588:	b508      	push	{r3, lr}
 800158a:	4602      	mov	r2, r0
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800158c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001590:	4801      	ldr	r0, [pc, #4]	; (8001598 <ledIndicateReceiveInProgress+0x10>)
 8001592:	f002 f92a 	bl	80037ea <HAL_GPIO_WritePin>
}
 8001596:	bd08      	pop	{r3, pc}
 8001598:	48000400 	.word	0x48000400

0800159c <ledIndicateTransmitInProgress>:

// Indicate that a receive is in progress
void ledIndicateTransmitInProgress(bool on)
{
 800159c:	b508      	push	{r3, lr}
 800159e:	4602      	mov	r2, r0
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80015a0:	2101      	movs	r1, #1
 80015a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a6:	f002 f920 	bl	80037ea <HAL_GPIO_WritePin>
}
 80015aa:	bd08      	pop	{r3, pc}

080015ac <LoraInfo_Init>:
// Init lora info structure
void LoraInfo_Init(void)
{
    loraInfo.ActivationMode = 0;
    loraInfo.Region = 0;
    loraInfo.ClassB = 0;
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <LoraInfo_Init+0x14>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
    loraInfo.Kms = 0;
 80015b2:	60da      	str	r2, [r3, #12]
#endif
#ifdef  REGION_US915
    loraInfo.Region |= (1 << LORAMAC_REGION_US915) ;
#endif
#ifdef  REGION_RU864
    loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
 80015b4:	f240 32bf 	movw	r2, #959	; 0x3bf
 80015b8:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif // LORAMAC_CLASSB_ENABLED 

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    loraInfo.Kms = 0;
    loraInfo.ActivationMode = 3;
 80015ba:	2203      	movs	r2, #3
 80015bc:	601a      	str	r2, [r3, #0]
#else // LORAWAN_KMS == 1
    loraInfo.Kms = 1;
    loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif // LORAWAN_KMS 

}
 80015be:	4770      	bx	lr
 80015c0:	20000374 	.word	0x20000374

080015c4 <LoraInfo_GetPtr>:

// Get a pointer to the info structure
LoraInfo_t *LoraInfo_GetPtr(void)
{
    return &loraInfo;
}
 80015c4:	4800      	ldr	r0, [pc, #0]	; (80015c8 <LoraInfo_GetPtr+0x4>)
 80015c6:	4770      	bx	lr
 80015c8:	20000374 	.word	0x20000374

080015cc <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

// ADC init function
void MX_ADC_Init(void)
{
 80015cc:	b508      	push	{r3, lr}

    // Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    hadc.Instance = ADC;
 80015ce:	4813      	ldr	r0, [pc, #76]	; (800161c <MX_ADC_Init+0x50>)
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <MX_ADC_Init+0x54>)
 80015d2:	6003      	str	r3, [r0, #0]
    hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80015d8:	6043      	str	r3, [r0, #4]
    hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80015da:	2300      	movs	r3, #0
 80015dc:	6083      	str	r3, [r0, #8]
    hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015de:	60c3      	str	r3, [r0, #12]
    hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015e0:	6103      	str	r3, [r0, #16]
    hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015e2:	2204      	movs	r2, #4
 80015e4:	6142      	str	r2, [r0, #20]
    hadc.Init.LowPowerAutoWait = DISABLE;
 80015e6:	7603      	strb	r3, [r0, #24]
    hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80015e8:	7643      	strb	r3, [r0, #25]
    hadc.Init.ContinuousConvMode = DISABLE;
 80015ea:	7683      	strb	r3, [r0, #26]
    hadc.Init.NbrOfConversion = 1;
 80015ec:	2201      	movs	r2, #1
 80015ee:	61c2      	str	r2, [r0, #28]
    hadc.Init.DiscontinuousConvMode = DISABLE;
 80015f0:	f880 3020 	strb.w	r3, [r0, #32]
    hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015f4:	6243      	str	r3, [r0, #36]	; 0x24
    hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015f6:	6283      	str	r3, [r0, #40]	; 0x28
    hadc.Init.DMAContinuousRequests = DISABLE;
 80015f8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001600:	6302      	str	r2, [r0, #48]	; 0x30
    hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001602:	2207      	movs	r2, #7
 8001604:	6342      	str	r2, [r0, #52]	; 0x34
    hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001606:	6382      	str	r2, [r0, #56]	; 0x38
    hadc.Init.OversamplingMode = DISABLE;
 8001608:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800160c:	64c3      	str	r3, [r0, #76]	; 0x4c
    if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800160e:	f001 f99f 	bl	8002950 <HAL_ADC_Init>
 8001612:	b900      	cbnz	r0, 8001616 <MX_ADC_Init+0x4a>
        Error_Handler();
    }

}
 8001614:	bd08      	pop	{r3, pc}
        Error_Handler();
 8001616:	f000 fec5 	bl	80023a4 <Error_Handler>
}
 800161a:	e7fb      	b.n	8001614 <MX_ADC_Init+0x48>
 800161c:	20001c48 	.word	0x20001c48
 8001620:	40012400 	.word	0x40012400

08001624 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

    if(adcHandle->Instance==ADC) {
 8001624:	6802      	ldr	r2, [r0, #0]
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_ADC_MspInit+0x28>)
 8001628:	429a      	cmp	r2, r3
 800162a:	d000      	beq.n	800162e <HAL_ADC_MspInit+0xa>
 800162c:	4770      	bx	lr
{
 800162e:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001634:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800163a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800163c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001642:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001644:	9b01      	ldr	r3, [sp, #4]
        __HAL_RCC_ADC_CLK_ENABLE();
    }
}
 8001646:	b002      	add	sp, #8
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40012400 	.word	0x40012400

08001650 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
    if(adcHandle->Instance==ADC) {
 8001650:	6802      	ldr	r2, [r0, #0]
 8001652:	4b05      	ldr	r3, [pc, #20]	; (8001668 <HAL_ADC_MspDeInit+0x18>)
 8001654:	429a      	cmp	r2, r3
 8001656:	d000      	beq.n	800165a <HAL_ADC_MspDeInit+0xa>
        __HAL_RCC_ADC_CLK_DISABLE();
    }
}
 8001658:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800165a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800165e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001660:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001664:	6613      	str	r3, [r2, #96]	; 0x60
 8001666:	e7f7      	b.n	8001658 <HAL_ADC_MspDeInit+0x8>
 8001668:	40012400 	.word	0x40012400

0800166c <ADC_ReadChannels>:
    return batteryLevelmV;
}

// Read ADC channels
static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800166c:	b530      	push	{r4, r5, lr}
 800166e:	b085      	sub	sp, #20
 8001670:	4604      	mov	r4, r0
    uint32_t ADCxConvertedValues = 0;
    ADC_ChannelConfTypeDef sConfig = {0};
 8001672:	2300      	movs	r3, #0
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	9302      	str	r3, [sp, #8]
 8001678:	9303      	str	r3, [sp, #12]

    MX_ADC_Init();
 800167a:	f7ff ffa7 	bl	80015cc <MX_ADC_Init>

    // Start Calibration
    if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK) {
 800167e:	4816      	ldr	r0, [pc, #88]	; (80016d8 <ADC_ReadChannels+0x6c>)
 8001680:	f001 fd98 	bl	80031b4 <HAL_ADCEx_Calibration_Start>
 8001684:	b9f8      	cbnz	r0, 80016c6 <ADC_ReadChannels+0x5a>
        Error_Handler();
    }

    // Configure Regular Channel
    sConfig.Channel = channel;
 8001686:	9401      	str	r4, [sp, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001688:	2300      	movs	r3, #0
 800168a:	9302      	str	r3, [sp, #8]
    sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800168c:	9303      	str	r3, [sp, #12]
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800168e:	a901      	add	r1, sp, #4
 8001690:	4811      	ldr	r0, [pc, #68]	; (80016d8 <ADC_ReadChannels+0x6c>)
 8001692:	f001 faf5 	bl	8002c80 <HAL_ADC_ConfigChannel>
 8001696:	b9c8      	cbnz	r0, 80016cc <ADC_ReadChannels+0x60>
        Error_Handler();
    }

    if (HAL_ADC_Start(&hadc) != HAL_OK) {
 8001698:	480f      	ldr	r0, [pc, #60]	; (80016d8 <ADC_ReadChannels+0x6c>)
 800169a:	f001 fc9b 	bl	8002fd4 <HAL_ADC_Start>
 800169e:	b9c0      	cbnz	r0, 80016d2 <ADC_ReadChannels+0x66>
        Error_Handler();
    }
    // Wait for end of conversion
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80016a0:	4c0d      	ldr	r4, [pc, #52]	; (80016d8 <ADC_ReadChannels+0x6c>)
 80016a2:	f04f 31ff 	mov.w	r1, #4294967295
 80016a6:	4620      	mov	r0, r4
 80016a8:	f001 fa88 	bl	8002bbc <HAL_ADC_PollForConversion>

    // Wait for end of conversion
    HAL_ADC_Stop(&hadc) ;   // it calls also ADC_Disable()
 80016ac:	4620      	mov	r0, r4
 80016ae:	f001 fd61 	bl	8003174 <HAL_ADC_Stop>

    ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80016b2:	4620      	mov	r0, r4
 80016b4:	f001 fae1 	bl	8002c7a <HAL_ADC_GetValue>
 80016b8:	4605      	mov	r5, r0

    HAL_ADC_DeInit(&hadc);
 80016ba:	4620      	mov	r0, r4
 80016bc:	f001 fd06 	bl	80030cc <HAL_ADC_DeInit>

    return ADCxConvertedValues;
}
 80016c0:	4628      	mov	r0, r5
 80016c2:	b005      	add	sp, #20
 80016c4:	bd30      	pop	{r4, r5, pc}
        Error_Handler();
 80016c6:	f000 fe6d 	bl	80023a4 <Error_Handler>
 80016ca:	e7dc      	b.n	8001686 <ADC_ReadChannels+0x1a>
        Error_Handler();
 80016cc:	f000 fe6a 	bl	80023a4 <Error_Handler>
 80016d0:	e7e2      	b.n	8001698 <ADC_ReadChannels+0x2c>
        Error_Handler();
 80016d2:	f000 fe67 	bl	80023a4 <Error_Handler>
 80016d6:	e7e3      	b.n	80016a0 <ADC_ReadChannels+0x34>
 80016d8:	20001c48 	.word	0x20001c48

080016dc <SYS_InitMeasurement>:
    hadc.Instance = ADC;
 80016dc:	4b01      	ldr	r3, [pc, #4]	; (80016e4 <SYS_InitMeasurement+0x8>)
 80016de:	4a02      	ldr	r2, [pc, #8]	; (80016e8 <SYS_InitMeasurement+0xc>)
 80016e0:	601a      	str	r2, [r3, #0]
}
 80016e2:	4770      	bx	lr
 80016e4:	20001c48 	.word	0x20001c48
 80016e8:	40012400 	.word	0x40012400

080016ec <SYS_GetBatteryLevel>:
{
 80016ec:	b508      	push	{r3, lr}
    measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80016ee:	480d      	ldr	r0, [pc, #52]	; (8001724 <SYS_GetBatteryLevel+0x38>)
 80016f0:	f7ff ffbc 	bl	800166c <ADC_ReadChannels>
    if (measuredLevel == 0) {
 80016f4:	b198      	cbz	r0, 800171e <SYS_GetBatteryLevel+0x32>
 80016f6:	4603      	mov	r3, r0
        if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU) {
 80016f8:	4a0b      	ldr	r2, [pc, #44]	; (8001728 <SYS_GetBatteryLevel+0x3c>)
 80016fa:	8812      	ldrh	r2, [r2, #0]
 80016fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001700:	428a      	cmp	r2, r1
 8001702:	d007      	beq.n	8001714 <SYS_GetBatteryLevel+0x28>
            batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001704:	f640 40e4 	movw	r0, #3300	; 0xce4
 8001708:	fb00 f002 	mul.w	r0, r0, r2
 800170c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001710:	b280      	uxth	r0, r0
 8001712:	e005      	b.n	8001720 <SYS_GetBatteryLevel+0x34>
            batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001714:	4805      	ldr	r0, [pc, #20]	; (800172c <SYS_GetBatteryLevel+0x40>)
 8001716:	fbb0 f0f3 	udiv	r0, r0, r3
 800171a:	b280      	uxth	r0, r0
 800171c:	e000      	b.n	8001720 <SYS_GetBatteryLevel+0x34>
        batteryLevelmV = 0;
 800171e:	2000      	movs	r0, #0
}
 8001720:	bd08      	pop	{r3, pc}
 8001722:	bf00      	nop
 8001724:	b4002000 	.word	0xb4002000
 8001728:	1fff75aa 	.word	0x1fff75aa
 800172c:	004c08d8 	.word	0x004c08d8

08001730 <SYS_GetTemperatureLevel>:
{
 8001730:	b510      	push	{r4, lr}
    uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8001732:	f7ff ffdb 	bl	80016ec <SYS_GetBatteryLevel>
 8001736:	4604      	mov	r4, r0
    measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001738:	481a      	ldr	r0, [pc, #104]	; (80017a4 <SYS_GetTemperatureLevel+0x74>)
 800173a:	f7ff ff97 	bl	800166c <ADC_ReadChannels>
    if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0) {
 800173e:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <SYS_GetTemperatureLevel+0x78>)
 8001740:	881a      	ldrh	r2, [r3, #0]
 8001742:	3b20      	subs	r3, #32
 8001744:	8819      	ldrh	r1, [r3, #0]
 8001746:	428a      	cmp	r2, r1
 8001748:	d012      	beq.n	8001770 <SYS_GetTemperatureLevel+0x40>
        temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 800174a:	fb00 f004 	mul.w	r0, r0, r4
 800174e:	0883      	lsrs	r3, r0, #2
 8001750:	4816      	ldr	r0, [pc, #88]	; (80017ac <SYS_GetTemperatureLevel+0x7c>)
 8001752:	fba0 3003 	umull	r3, r0, r0, r3
 8001756:	ebc1 1350 	rsb	r3, r1, r0, lsr #5
 800175a:	2064      	movs	r0, #100	; 0x64
 800175c:	fb00 f003 	mul.w	r0, r0, r3
 8001760:	1a52      	subs	r2, r2, r1
 8001762:	fb90 f0f2 	sdiv	r0, r0, r2
 8001766:	301e      	adds	r0, #30
 8001768:	b200      	sxth	r0, r0
    temperatureDegreeC <<= 8;
 800176a:	0200      	lsls	r0, r0, #8
}
 800176c:	b200      	sxth	r0, r0
 800176e:	bd10      	pop	{r4, pc}
        temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001770:	fb00 f004 	mul.w	r0, r0, r4
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <SYS_GetTemperatureLevel+0x80>)
 8001776:	fba3 2300 	umull	r2, r3, r3, r0
 800177a:	1ac0      	subs	r0, r0, r3
 800177c:	eb03 0050 	add.w	r0, r3, r0, lsr #1
 8001780:	0ac0      	lsrs	r0, r0, #11
 8001782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001786:	fb03 f300 	mul.w	r3, r3, r0
 800178a:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 800178e:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <SYS_GetTemperatureLevel+0x84>)
 8001794:	fb82 1203 	smull	r1, r2, r2, r3
 8001798:	17d8      	asrs	r0, r3, #31
 800179a:	ebc0 20a2 	rsb	r0, r0, r2, asr #10
 800179e:	301e      	adds	r0, #30
 80017a0:	b200      	sxth	r0, r0
 80017a2:	e7e2      	b.n	800176a <SYS_GetTemperatureLevel+0x3a>
 80017a4:	b0001000 	.word	0xb0001000
 80017a8:	1fff75c8 	.word	0x1fff75c8
 80017ac:	09ee009f 	.word	0x09ee009f
 80017b0:	00100101 	.word	0x00100101
 80017b4:	68db8bad 	.word	0x68db8bad

080017b8 <MX_DBG_TxCpltCallback>:
// Optional callbacks
static void (*dbgRxCallback)(uint8_t *rxChar, uint16_t size, uint8_t error) = NULL;

// Register a TX completion callback
void MX_DBG_TxCpltCallback(void (*cb)(void *))
{
 80017b8:	b508      	push	{r3, lr}
 80017ba:	4601      	mov	r1, r0
#if (DEBUGGER_ON_USART2||DEBUGGER_ON_LPUART1)
#if DEBUGGER_ON_USART2
    MX_UART_TxCpltCallback(&huart2, cb);
#endif
#if DEBUGGER_ON_LPUART1
    MX_UART_TxCpltCallback(&hlpuart1, cb);
 80017bc:	4801      	ldr	r0, [pc, #4]	; (80017c4 <MX_DBG_TxCpltCallback+0xc>)
 80017be:	f000 f9cb 	bl	8001b58 <MX_UART_TxCpltCallback>
#endif
#endif
}
 80017c2:	bd08      	pop	{r3, pc}
 80017c4:	20001f4c 	.word	0x20001f4c

080017c8 <MX_DBG_RxCallback>:

// Set the optional rx callback
void MX_DBG_RxCallback(void (*cb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
    dbgRxCallback = cb;
 80017c8:	4b01      	ldr	r3, [pc, #4]	; (80017d0 <MX_DBG_RxCallback+0x8>)
 80017ca:	6018      	str	r0, [r3, #0]
}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000390 	.word	0x20000390

080017d4 <MX_DBG_Active>:

// See if the debugger is active
bool MX_DBG_Active()
{
    return ((CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) != 0);
 80017d4:	4b02      	ldr	r3, [pc, #8]	; (80017e0 <MX_DBG_Active+0xc>)
 80017d6:	6818      	ldr	r0, [r3, #0]
 80017d8:	f000 0001 	and.w	r0, r0, #1
}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000edf0 	.word	0xe000edf0

080017e4 <MX_DBG>:

// Output a message to the console, a line at a time because
// the STM32CubeIDE doesn't recognize \n as doing an implicit
// carriage return.
void MX_DBG(const char *message, size_t length, uint32_t timeout)
{
 80017e4:	b508      	push	{r3, lr}
#if (DEBUGGER_ON_USART2||DEBUGGER_ON_LPUART1)
#if DEBUGGER_ON_USART2
    MX_USART2_UART_Transmit((uint8_t *)message, length, timeout);
#endif
#if DEBUGGER_ON_LPUART1
    MX_LPUART1_UART_Transmit((uint8_t *)message, length, timeout);
 80017e6:	f000 fa73 	bl	8001cd0 <MX_LPUART1_UART_Transmit>
        __dwrite(_LLIO_STDOUT, (const unsigned char *)message, length);
    }
#endif
#endif

}
 80017ea:	bd08      	pop	{r3, pc}

080017ec <MX_DBG_Suspend>:

// Prepare for going into stop2 mode
void MX_DBG_Suspend()
{
 80017ec:	b508      	push	{r3, lr}
#if DEBUGGER_ON_USART2
    MX_USART2_UART_Suspend();
#endif
#if DEBUGGER_ON_LPUART1
    MX_LPUART1_UART_Suspend();
 80017ee:	f000 fa3b 	bl	8001c68 <MX_LPUART1_UART_Suspend>
#endif
}
 80017f2:	bd08      	pop	{r3, pc}

080017f4 <MX_DBG_Available>:
}

// Get pending received bytes and reset the counter.
bool MX_DBG_Available(void)
{
    uint32_t drainIndex = dbgReceiveDrainIndex;
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <MX_DBG_Available+0x14>)
 80017f6:	681b      	ldr	r3, [r3, #0]
    if (dbgReceiveFillIndex != drainIndex) {
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <MX_DBG_Available+0x18>)
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d101      	bne.n	8001804 <MX_DBG_Available+0x10>
        return true;
    }
    return false;
 8001800:	2000      	movs	r0, #0
 8001802:	4770      	bx	lr
        return true;
 8001804:	2001      	movs	r0, #1
}
 8001806:	4770      	bx	lr
 8001808:	20000384 	.word	0x20000384
 800180c:	20000388 	.word	0x20000388

08001810 <MX_DBG_Receive>:

// Get pending received bytes and reset the counter.
uint8_t MX_DBG_Receive(bool *underrun, bool *overrun)
{
    if (overrun != NULL) {
 8001810:	b129      	cbz	r1, 800181e <MX_DBG_Receive+0xe>
 8001812:	460a      	mov	r2, r1
        *overrun = dbgReceiveOverrun;
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <MX_DBG_Receive+0x50>)
 8001816:	7819      	ldrb	r1, [r3, #0]
 8001818:	7011      	strb	r1, [r2, #0]
        dbgReceiveOverrun = false;
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
    }
    uint32_t drainIndex = dbgReceiveDrainIndex;
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <MX_DBG_Receive+0x54>)
 8001820:	681b      	ldr	r3, [r3, #0]
    if (dbgReceiveFillIndex == drainIndex) {
 8001822:	4a11      	ldr	r2, [pc, #68]	; (8001868 <MX_DBG_Receive+0x58>)
 8001824:	6812      	ldr	r2, [r2, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d015      	beq.n	8001856 <MX_DBG_Receive+0x46>
{
 800182a:	b082      	sub	sp, #8
        if (underrun != NULL) {
            *underrun = true;
        }
        return 0;
    }
    if (underrun != NULL) {
 800182c:	b108      	cbz	r0, 8001832 <MX_DBG_Receive+0x22>
        *underrun = false;
 800182e:	2300      	movs	r3, #0
 8001830:	7003      	strb	r3, [r0, #0]
    }
    uint32_t nextIndex = dbgReceiveDrainIndex + 1;
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <MX_DBG_Receive+0x54>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	1c53      	adds	r3, r2, #1
    if (nextIndex >= sizeof(dbgReceiveBuffer)) {
 8001838:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800183c:	d300      	bcc.n	8001840 <MX_DBG_Receive+0x30>
        nextIndex = 0;
 800183e:	2300      	movs	r3, #0
    }
    volatile uint8_t databyte = dbgReceiveBuffer[dbgReceiveDrainIndex];
 8001840:	490a      	ldr	r1, [pc, #40]	; (800186c <MX_DBG_Receive+0x5c>)
 8001842:	5c8a      	ldrb	r2, [r1, r2]
 8001844:	f88d 2007 	strb.w	r2, [sp, #7]
    dbgReceiveDrainIndex = nextIndex;
 8001848:	4a06      	ldr	r2, [pc, #24]	; (8001864 <MX_DBG_Receive+0x54>)
 800184a:	6013      	str	r3, [r2, #0]
    return databyte;
 800184c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001850:	b2c0      	uxtb	r0, r0
}
 8001852:	b002      	add	sp, #8
 8001854:	4770      	bx	lr
        if (underrun != NULL) {
 8001856:	b108      	cbz	r0, 800185c <MX_DBG_Receive+0x4c>
            *underrun = true;
 8001858:	2301      	movs	r3, #1
 800185a:	7003      	strb	r3, [r0, #0]
        return 0;
 800185c:	2000      	movs	r0, #0
}
 800185e:	4770      	bx	lr
 8001860:	2000038c 	.word	0x2000038c
 8001864:	20000384 	.word	0x20000384
 8001868:	20000388 	.word	0x20000388
 800186c:	20001cac 	.word	0x20001cac

08001870 <dbgRestartReceive>:

// ISR for debug character receive
#if (DEBUGGER_ON_USART2||DEBUGGER_ON_LPUART1)
void dbgRestartReceive(UART_HandleTypeDef *huart)
{
 8001870:	b508      	push	{r3, lr}
    // Use zero/nonzero as an indicator of a valid byte having been received
    dbgReceiveBuffer[dbgReceiveFillIndex] = 0;
 8001872:	4b05      	ldr	r3, [pc, #20]	; (8001888 <dbgRestartReceive+0x18>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4905      	ldr	r1, [pc, #20]	; (800188c <dbgRestartReceive+0x1c>)
 8001878:	2200      	movs	r2, #0
 800187a:	54ca      	strb	r2, [r1, r3]
#else
    HAL_UART_Receive_IT(huart, &dbgReceiveBuffer[dbgReceiveFillIndex], 1);
#endif
#endif
#if DEBUGGER_ON_LPUART1
    HAL_UART_Receive_IT(huart, &dbgReceiveBuffer[dbgReceiveFillIndex], 1);
 800187c:	2201      	movs	r2, #1
 800187e:	4419      	add	r1, r3
 8001880:	f005 fa8e 	bl	8006da0 <HAL_UART_Receive_IT>
#endif
}
 8001884:	bd08      	pop	{r3, pc}
 8001886:	bf00      	nop
 8001888:	20000388 	.word	0x20000388
 800188c:	20001cac 	.word	0x20001cac

08001890 <MX_DBG_Resume>:
{
 8001890:	b508      	push	{r3, lr}
    MX_LPUART1_UART_Resume();
 8001892:	f000 fa1b 	bl	8001ccc <MX_LPUART1_UART_Resume>
    dbgRestartReceive(&hlpuart1);
 8001896:	4802      	ldr	r0, [pc, #8]	; (80018a0 <MX_DBG_Resume+0x10>)
 8001898:	f7ff ffea 	bl	8001870 <dbgRestartReceive>
}
 800189c:	bd08      	pop	{r3, pc}
 800189e:	bf00      	nop
 80018a0:	20001f4c 	.word	0x20001f4c

080018a4 <dbgReceivedByteISR>:
void dbgReceivedByteISR(UART_HandleTypeDef *huart)
{
 80018a4:	b500      	push	{lr}
 80018a6:	b083      	sub	sp, #12

    // Ingest the byte
    uint32_t nextIndex = dbgReceiveFillIndex + 1;
 80018a8:	4b16      	ldr	r3, [pc, #88]	; (8001904 <dbgReceivedByteISR+0x60>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
    if (nextIndex >= sizeof(dbgReceiveBuffer)) {
 80018ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018b2:	d300      	bcc.n	80018b6 <dbgReceivedByteISR+0x12>
        nextIndex = 0;
 80018b4:	2300      	movs	r3, #0
    }
    if (nextIndex == dbgReceiveDrainIndex) {
 80018b6:	4a14      	ldr	r2, [pc, #80]	; (8001908 <dbgReceivedByteISR+0x64>)
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d00a      	beq.n	80018d4 <dbgReceivedByteISR+0x30>
        dbgReceiveOverrun = true;
    } else {
        dbgReceiveFillIndex = nextIndex;
 80018be:	4a11      	ldr	r2, [pc, #68]	; (8001904 <dbgReceivedByteISR+0x60>)
 80018c0:	6013      	str	r3, [r2, #0]
    }
    dbgRestartReceive(huart);
 80018c2:	f7ff ffd5 	bl	8001870 <dbgRestartReceive>

    // Notify someone
    if (dbgRxCallback == NULL) {
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <dbgReceivedByteISR+0x68>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	b9a3      	cbnz	r3, 80018f6 <dbgReceivedByteISR+0x52>
        MX_AppISR(0);
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7ff fcdf 	bl	8001290 <MX_AppISR>
 80018d2:	e014      	b.n	80018fe <dbgReceivedByteISR+0x5a>
        dbgReceiveOverrun = true;
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <dbgReceivedByteISR+0x6c>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	701a      	strb	r2, [r3, #0]
 80018da:	e7f2      	b.n	80018c2 <dbgReceivedByteISR+0x1e>
    } else {
        while (MX_DBG_Available()) {
            uint8_t ch = MX_DBG_Receive(NULL, NULL);
 80018dc:	2100      	movs	r1, #0
 80018de:	4608      	mov	r0, r1
 80018e0:	f7ff ff96 	bl	8001810 <MX_DBG_Receive>
 80018e4:	f88d 0007 	strb.w	r0, [sp, #7]
            dbgRxCallback(&ch, 1, 0);
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <dbgReceivedByteISR+0x68>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2200      	movs	r2, #0
 80018ee:	2101      	movs	r1, #1
 80018f0:	f10d 0007 	add.w	r0, sp, #7
 80018f4:	4798      	blx	r3
        while (MX_DBG_Available()) {
 80018f6:	f7ff ff7d 	bl	80017f4 <MX_DBG_Available>
 80018fa:	2800      	cmp	r0, #0
 80018fc:	d1ee      	bne.n	80018dc <dbgReceivedByteISR+0x38>
        }
    }

}
 80018fe:	b003      	add	sp, #12
 8001900:	f85d fb04 	ldr.w	pc, [sp], #4
 8001904:	20000388 	.word	0x20000388
 8001908:	20000384 	.word	0x20000384
 800190c:	20000390 	.word	0x20000390
 8001910:	2000038c 	.word	0x2000038c

08001914 <MX_DBG_Init>:

}

// Init debugging
void MX_DBG_Init(void)
{
 8001914:	b510      	push	{r4, lr}
 8001916:	b086      	sub	sp, #24

    // Initialize debug output
#if DEBUGGER_ON_LPUART1

    // Init UART
    MX_LPUART1_UART_Init();
 8001918:	f000 f96a 	bl	8001bf0 <MX_LPUART1_UART_Init>

    // Register a receive callback and initiate the receive
    HAL_UART_RegisterCallback(&hlpuart1, HAL_UART_RX_COMPLETE_CB_ID, dbgReceivedByteISR);
 800191c:	4c1b      	ldr	r4, [pc, #108]	; (800198c <MX_DBG_Init+0x78>)
 800191e:	4a1c      	ldr	r2, [pc, #112]	; (8001990 <MX_DBG_Init+0x7c>)
 8001920:	2103      	movs	r1, #3
 8001922:	4620      	mov	r0, r4
 8001924:	f004 fc26 	bl	8006174 <HAL_UART_RegisterCallback>
    dbgRestartReceive(&hlpuart1);
 8001928:	4620      	mov	r0, r4
 800192a:	f7ff ffa1 	bl	8001870 <dbgRestartReceive>
    HAL_GPIO_WritePin(DBG_LINE4_GPIO_Port, DBG_LINE4_Pin, GPIO_PIN_RESET);

#endif  // Radio debugging

    // Enable or disable debug mode
    if (MX_DBG_Active()) {
 800192e:	f7ff ff51 	bl	80017d4 <MX_DBG_Active>
 8001932:	b170      	cbz	r0, 8001952 <MX_DBG_Init+0x3e>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001934:	4a17      	ldr	r2, [pc, #92]	; (8001994 <MX_DBG_Init+0x80>)
 8001936:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800193a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);    // RM0453 Table 93 38.3.4
        HAL_DBGMCU_EnableDBGSleepMode();
 8001942:	f000 ffd5 	bl	80028f0 <HAL_DBGMCU_EnableDBGSleepMode>
        HAL_DBGMCU_EnableDBGStopMode();
 8001946:	f000 ffe3 	bl	8002910 <HAL_DBGMCU_EnableDBGStopMode>
        HAL_DBGMCU_EnableDBGStandbyMode();
 800194a:	f000 fff1 	bl	8002930 <HAL_DBGMCU_EnableDBGStandbyMode>
        HAL_DBGMCU_DisableDBGSleepMode();
        HAL_DBGMCU_DisableDBGStopMode();
        HAL_DBGMCU_DisableDBGStandbyMode();
    }

}
 800194e:	b006      	add	sp, #24
 8001950:	bd10      	pop	{r4, pc}
        GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001952:	2300      	movs	r3, #0
 8001954:	9304      	str	r3, [sp, #16]
 8001956:	9305      	str	r3, [sp, #20]
        GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 8001958:	2203      	movs	r2, #3
 800195a:	9202      	str	r2, [sp, #8]
        GPIO_InitStruct.Pull   = GPIO_NOPULL;
 800195c:	9303      	str	r3, [sp, #12]
        GPIO_InitStruct.Pin    = SWCLK_Pin;
 800195e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001962:	9301      	str	r3, [sp, #4]
        HAL_GPIO_Init(SWCLK_GPIO_Port, &GPIO_InitStruct);
 8001964:	a901      	add	r1, sp, #4
 8001966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196a:	f001 fe7f 	bl	800366c <HAL_GPIO_Init>
        GPIO_InitStruct.Pin    = SWDIO_Pin;
 800196e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001972:	9301      	str	r3, [sp, #4]
        HAL_GPIO_Init(SWDIO_GPIO_Port, &GPIO_InitStruct);
 8001974:	a901      	add	r1, sp, #4
 8001976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197a:	f001 fe77 	bl	800366c <HAL_GPIO_Init>
        HAL_DBGMCU_DisableDBGSleepMode();
 800197e:	f000 ffbf 	bl	8002900 <HAL_DBGMCU_DisableDBGSleepMode>
        HAL_DBGMCU_DisableDBGStopMode();
 8001982:	f000 ffcd 	bl	8002920 <HAL_DBGMCU_DisableDBGStopMode>
        HAL_DBGMCU_DisableDBGStandbyMode();
 8001986:	f000 ffdb 	bl	8002940 <HAL_DBGMCU_DisableDBGStandbyMode>
}
 800198a:	e7e0      	b.n	800194e <MX_DBG_Init+0x3a>
 800198c:	20001f4c 	.word	0x20001f4c
 8001990:	080018a5 	.word	0x080018a5
 8001994:	58000800 	.word	0x58000800

08001998 <SystemClock_Config>:

}

// System Clock Configuration
void SystemClock_Config(void)
{
 8001998:	b510      	push	{r4, lr}
 800199a:	b09a      	sub	sp, #104	; 0x68
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199c:	2248      	movs	r2, #72	; 0x48
 800199e:	2100      	movs	r1, #0
 80019a0:	a808      	add	r0, sp, #32
 80019a2:	f015 fd65 	bl	8017470 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a6:	2400      	movs	r4, #0
 80019a8:	9401      	str	r4, [sp, #4]
 80019aa:	9402      	str	r4, [sp, #8]
 80019ac:	9403      	str	r4, [sp, #12]
 80019ae:	9404      	str	r4, [sp, #16]
 80019b0:	9405      	str	r4, [sp, #20]
 80019b2:	9406      	str	r4, [sp, #24]
 80019b4:	9407      	str	r4, [sp, #28]

    // Configure LSE Drive Capability
    HAL_PWR_EnableBkUpAccess();
 80019b6:	f002 fa91 	bl	8003edc <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80019ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019be:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80019c2:	f023 0318 	bic.w	r3, r3, #24
 80019c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);

    // Configure the main internal regulator output voltage
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019ce:	6813      	ldr	r3, [r2, #0]
 80019d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	6813      	ldr	r3, [r2, #0]
 80019dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	9b00      	ldr	r3, [sp, #0]

    // Initializes the CPU, AHB and APB busses clocks
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80019e4:	232c      	movs	r3, #44	; 0x2c
 80019e6:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80019e8:	2381      	movs	r3, #129	; 0x81
 80019ea:	930b      	str	r3, [sp, #44]	; 0x2c
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019ec:	2301      	movs	r3, #1
 80019ee:	9310      	str	r3, [sp, #64]	; 0x40
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80019f0:	9411      	str	r4, [sp, #68]	; 0x44
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80019f2:	22b0      	movs	r2, #176	; 0xb0
 80019f4:	9212      	str	r2, [sp, #72]	; 0x48
    RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80019f6:	940f      	str	r4, [sp, #60]	; 0x3c
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019f8:	930e      	str	r3, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019fa:	9413      	str	r4, [sp, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80019fc:	a808      	add	r0, sp, #32
 80019fe:	f002 fc05 	bl	800420c <HAL_RCC_OscConfig>
 8001a02:	b9a0      	cbnz	r0, 8001a2e <SystemClock_Config+0x96>
        Error_Handler();
    }

    // Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001a04:	234f      	movs	r3, #79	; 0x4f
 8001a06:	9301      	str	r3, [sp, #4]
                                  |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                                  |RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	9302      	str	r3, [sp, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a0c:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a0e:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a10:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001a12:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001a14:	2102      	movs	r1, #2
 8001a16:	a801      	add	r0, sp, #4
 8001a18:	f002 ff34 	bl	8004884 <HAL_RCC_ClockConfig>
 8001a1c:	b950      	cbnz	r0, 8001a34 <SystemClock_Config+0x9c>
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001a1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a22:	6893      	ldr	r3, [r2, #8]
 8001a24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001a28:	6093      	str	r3, [r2, #8]
    }

    // Ensure that MSI is wake-up system clock
    __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);

}
 8001a2a:	b01a      	add	sp, #104	; 0x68
 8001a2c:	bd10      	pop	{r4, pc}
        Error_Handler();
 8001a2e:	f000 fcb9 	bl	80023a4 <Error_Handler>
 8001a32:	e7e7      	b.n	8001a04 <SystemClock_Config+0x6c>
        Error_Handler();
 8001a34:	f000 fcb6 	bl	80023a4 <Error_Handler>
 8001a38:	e7f1      	b.n	8001a1e <SystemClock_Config+0x86>
	...

08001a3c <MX_GPIO_Init>:

// Initialize for GPIO
void MX_GPIO_Init(void)
{
 8001a3c:	b500      	push	{lr}
 8001a3e:	b08b      	sub	sp, #44	; 0x2c
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a4e:	f002 0201 	and.w	r2, r2, #1
 8001a52:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8001a54:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a58:	f042 0202 	orr.w	r2, r2, #2
 8001a5c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a60:	f002 0202 	and.w	r2, r2, #2
 8001a64:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8001a66:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a6a:	f042 0204 	orr.w	r2, r2, #4
 8001a6e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a72:	f002 0204 	and.w	r2, r2, #4
 8001a76:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001a78:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a80:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a88:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001a8a:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
    __HAL_RCC_GPIOH_CLK_ENABLE();

    // Default all pins to analog except SWD pins.  (This has a hard-wired
    // assumption that SWDIO_GPIO_Port and SWCLK_GPIO_Port are GPIOA.)
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	9308      	str	r3, [sp, #32]
 8001a90:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a92:	2203      	movs	r2, #3
 8001a94:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_All & (~(SWDIO_Pin|SWCLK_Pin));
 8001a98:	f649 73ff 	movw	r3, #40959	; 0x9fff
 8001a9c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	a905      	add	r1, sp, #20
 8001aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa4:	f001 fde2 	bl	800366c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_All;
 8001aa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aac:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aae:	a905      	add	r1, sp, #20
 8001ab0:	4806      	ldr	r0, [pc, #24]	; (8001acc <MX_GPIO_Init+0x90>)
 8001ab2:	f001 fddb 	bl	800366c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab6:	a905      	add	r1, sp, #20
 8001ab8:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <MX_GPIO_Init+0x94>)
 8001aba:	f001 fdd7 	bl	800366c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001abe:	a905      	add	r1, sp, #20
 8001ac0:	4804      	ldr	r0, [pc, #16]	; (8001ad4 <MX_GPIO_Init+0x98>)
 8001ac2:	f001 fdd3 	bl	800366c <HAL_GPIO_Init>

}
 8001ac6:	b00b      	add	sp, #44	; 0x2c
 8001ac8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001acc:	48000400 	.word	0x48000400
 8001ad0:	48000800 	.word	0x48000800
 8001ad4:	48001c00 	.word	0x48001c00

08001ad8 <MX_DMA_Init>:

// Enable DMA controller clock
void MX_DMA_Init(void)
{
 8001ad8:	b084      	sub	sp, #16
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ade:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ae0:	f042 0204 	orr.w	r2, r2, #4
 8001ae4:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001ae6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ae8:	f002 0204 	and.w	r2, r2, #4
 8001aec:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8001aee:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001af0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001af2:	f042 0201 	orr.w	r2, r2, #1
 8001af6:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001af8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001afa:	f002 0201 	and.w	r2, r2, #1
 8001afe:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001b00:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001b02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001b04:	f042 0202 	orr.w	r2, r2, #2
 8001b08:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001b12:	9b01      	ldr	r3, [sp, #4]
    // DMA controller clock enable
    __HAL_RCC_DMAMUX1_CLK_ENABLE();
    __HAL_RCC_DMA1_CLK_ENABLE();
    __HAL_RCC_DMA2_CLK_ENABLE();

}
 8001b14:	b004      	add	sp, #16
 8001b16:	4770      	bx	lr

08001b18 <main>:
{
 8001b18:	b510      	push	{r4, lr}
    memcpy(vector_t, (uint8_t *) FLASH_BASE, sizeof(vector_t));
 8001b1a:	4c0d      	ldr	r4, [pc, #52]	; (8001b50 <main+0x38>)
 8001b1c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001b20:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001b24:	4620      	mov	r0, r4
 8001b26:	f015 fc95 	bl	8017454 <memcpy>
    SCB->VTOR = (uint32_t) vector_t;
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <main+0x3c>)
 8001b2c:	609c      	str	r4, [r3, #8]
    HAL_Init();
 8001b2e:	f000 fea7 	bl	8002880 <HAL_Init>
    SystemClock_Config();
 8001b32:	f7ff ff31 	bl	8001998 <SystemClock_Config>
    MX_GPIO_Init();
 8001b36:	f7ff ff81 	bl	8001a3c <MX_GPIO_Init>
    MX_DMA_Init();
 8001b3a:	f7ff ffcd 	bl	8001ad8 <MX_DMA_Init>
    MX_DBG_Init();
 8001b3e:	f7ff fee9 	bl	8001914 <MX_DBG_Init>
    MX_UTIL_Init();
 8001b42:	f000 fe4f 	bl	80027e4 <MX_UTIL_Init>
    MX_AppMain();
 8001b46:	f7ff fce1 	bl	800150c <MX_AppMain>
}
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	bd10      	pop	{r4, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000400 	.word	0x20000400
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <MX_UART_TxCpltCallback>:
}

// Register a completion callback
void MX_UART_TxCpltCallback(UART_HandleTypeDef *huart, void (*cb)(void *))
{
    if (huart == &huart1) {
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <MX_UART_TxCpltCallback+0x28>)
 8001b5a:	4298      	cmp	r0, r3
 8001b5c:	d006      	beq.n	8001b6c <MX_UART_TxCpltCallback+0x14>
        TxCpltCallback_USART1 = cb;
    } 
    if (huart == &huart2) {
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <MX_UART_TxCpltCallback+0x2c>)
 8001b60:	4298      	cmp	r0, r3
 8001b62:	d006      	beq.n	8001b72 <MX_UART_TxCpltCallback+0x1a>
        TxCpltCallback_USART2 = cb;
    } 
    if (huart == &hlpuart1) {
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <MX_UART_TxCpltCallback+0x30>)
 8001b66:	4298      	cmp	r0, r3
 8001b68:	d006      	beq.n	8001b78 <MX_UART_TxCpltCallback+0x20>
        TxCpltCallback_LPUART1 = cb;
    } 
}
 8001b6a:	4770      	bx	lr
        TxCpltCallback_USART1 = cb;
 8001b6c:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <MX_UART_TxCpltCallback+0x34>)
 8001b6e:	6019      	str	r1, [r3, #0]
 8001b70:	e7f5      	b.n	8001b5e <MX_UART_TxCpltCallback+0x6>
        TxCpltCallback_USART2 = cb;
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <MX_UART_TxCpltCallback+0x38>)
 8001b74:	6019      	str	r1, [r3, #0]
 8001b76:	e7f5      	b.n	8001b64 <MX_UART_TxCpltCallback+0xc>
        TxCpltCallback_LPUART1 = cb;
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <MX_UART_TxCpltCallback+0x3c>)
 8001b7a:	6019      	str	r1, [r3, #0]
}
 8001b7c:	e7f5      	b.n	8001b6a <MX_UART_TxCpltCallback+0x12>
 8001b7e:	bf00      	nop
 8001b80:	200021f4 	.word	0x200021f4
 8001b84:	20002320 	.word	0x20002320
 8001b88:	20001f4c 	.word	0x20001f4c
 8001b8c:	20000398 	.word	0x20000398
 8001b90:	2000039c 	.word	0x2000039c
 8001b94:	20000394 	.word	0x20000394

08001b98 <HAL_UART_TxCpltCallback>:

// Transmit complete callback for serial ports
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b98:	b510      	push	{r4, lr}
 8001b9a:	4604      	mov	r4, r0
    if (huart == &huart1 && TxCpltCallback_USART1 != NULL) {
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <HAL_UART_TxCpltCallback+0x40>)
 8001b9e:	4298      	cmp	r0, r3
 8001ba0:	d006      	beq.n	8001bb0 <HAL_UART_TxCpltCallback+0x18>
        TxCpltCallback_USART1(huart);
    } 
    if (huart == &huart2 && TxCpltCallback_USART2 != NULL) {
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <HAL_UART_TxCpltCallback+0x44>)
 8001ba4:	429c      	cmp	r4, r3
 8001ba6:	d009      	beq.n	8001bbc <HAL_UART_TxCpltCallback+0x24>
        TxCpltCallback_USART2(huart);
    } 
    if (huart == &hlpuart1 && TxCpltCallback_LPUART1 != NULL) {
 8001ba8:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <HAL_UART_TxCpltCallback+0x48>)
 8001baa:	429c      	cmp	r4, r3
 8001bac:	d00d      	beq.n	8001bca <HAL_UART_TxCpltCallback+0x32>
        TxCpltCallback_LPUART1(huart);
    } 
}
 8001bae:	bd10      	pop	{r4, pc}
    if (huart == &huart1 && TxCpltCallback_USART1 != NULL) {
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_UART_TxCpltCallback+0x4c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f4      	beq.n	8001ba2 <HAL_UART_TxCpltCallback+0xa>
        TxCpltCallback_USART1(huart);
 8001bb8:	4798      	blx	r3
 8001bba:	e7f2      	b.n	8001ba2 <HAL_UART_TxCpltCallback+0xa>
    if (huart == &huart2 && TxCpltCallback_USART2 != NULL) {
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_UART_TxCpltCallback+0x50>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0f1      	beq.n	8001ba8 <HAL_UART_TxCpltCallback+0x10>
        TxCpltCallback_USART2(huart);
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	4798      	blx	r3
 8001bc8:	e7ee      	b.n	8001ba8 <HAL_UART_TxCpltCallback+0x10>
    if (huart == &hlpuart1 && TxCpltCallback_LPUART1 != NULL) {
 8001bca:	4b08      	ldr	r3, [pc, #32]	; (8001bec <HAL_UART_TxCpltCallback+0x54>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0ed      	beq.n	8001bae <HAL_UART_TxCpltCallback+0x16>
        TxCpltCallback_LPUART1(huart);
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	4798      	blx	r3
}
 8001bd6:	e7ea      	b.n	8001bae <HAL_UART_TxCpltCallback+0x16>
 8001bd8:	200021f4 	.word	0x200021f4
 8001bdc:	20002320 	.word	0x20002320
 8001be0:	20001f4c 	.word	0x20001f4c
 8001be4:	20000398 	.word	0x20000398
 8001be8:	2000039c 	.word	0x2000039c
 8001bec:	20000394 	.word	0x20000394

08001bf0 <MX_LPUART1_UART_Init>:

}

// LPUART1 Initialization Function
void MX_LPUART1_UART_Init(void)
{
 8001bf0:	b508      	push	{r3, lr}

    hlpuart1.Instance = LPUART1;
 8001bf2:	481a      	ldr	r0, [pc, #104]	; (8001c5c <MX_LPUART1_UART_Init+0x6c>)
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <MX_LPUART1_UART_Init+0x70>)
 8001bf6:	6003      	str	r3, [r0, #0]
    hlpuart1.Init.BaudRate = LPUART1_BAUDRATE;
 8001bf8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001bfc:	6043      	str	r3, [r0, #4]
    hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	6083      	str	r3, [r0, #8]
    hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001c02:	60c3      	str	r3, [r0, #12]
    hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001c04:	6103      	str	r3, [r0, #16]
    hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001c06:	220c      	movs	r2, #12
 8001c08:	6142      	str	r2, [r0, #20]
    hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0a:	6183      	str	r3, [r0, #24]
    hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c0c:	6203      	str	r3, [r0, #32]
    hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c0e:	6243      	str	r3, [r0, #36]	; 0x24
    hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c10:	6283      	str	r3, [r0, #40]	; 0x28
    hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001c12:	6643      	str	r3, [r0, #100]	; 0x64
    if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 8001c14:	f004 ffee 	bl	8006bf4 <HAL_UART_Init>
 8001c18:	b998      	cbnz	r0, 8001c42 <MX_LPUART1_UART_Init+0x52>
        Error_Handler();
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	480f      	ldr	r0, [pc, #60]	; (8001c5c <MX_LPUART1_UART_Init+0x6c>)
 8001c1e:	f005 f935 	bl	8006e8c <HAL_UARTEx_SetTxFifoThreshold>
 8001c22:	b988      	cbnz	r0, 8001c48 <MX_LPUART1_UART_Init+0x58>
        Error_Handler();
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8001c24:	2100      	movs	r1, #0
 8001c26:	480d      	ldr	r0, [pc, #52]	; (8001c5c <MX_LPUART1_UART_Init+0x6c>)
 8001c28:	f005 f955 	bl	8006ed6 <HAL_UARTEx_SetRxFifoThreshold>
 8001c2c:	b978      	cbnz	r0, 8001c4e <MX_LPUART1_UART_Init+0x5e>
        Error_Handler();
    }
    if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 8001c2e:	480b      	ldr	r0, [pc, #44]	; (8001c5c <MX_LPUART1_UART_Init+0x6c>)
 8001c30:	f005 f90d 	bl	8006e4e <HAL_UARTEx_DisableFifoMode>
 8001c34:	b970      	cbnz	r0, 8001c54 <MX_LPUART1_UART_Init+0x64>
        Error_Handler();
    }

    peripherals |= PERIPHERAL_LPUART1;
 8001c36:	4a0b      	ldr	r2, [pc, #44]	; (8001c64 <MX_LPUART1_UART_Init+0x74>)
 8001c38:	6813      	ldr	r3, [r2, #0]
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6013      	str	r3, [r2, #0]

}
 8001c40:	bd08      	pop	{r3, pc}
        Error_Handler();
 8001c42:	f000 fbaf 	bl	80023a4 <Error_Handler>
 8001c46:	e7e8      	b.n	8001c1a <MX_LPUART1_UART_Init+0x2a>
        Error_Handler();
 8001c48:	f000 fbac 	bl	80023a4 <Error_Handler>
 8001c4c:	e7ea      	b.n	8001c24 <MX_LPUART1_UART_Init+0x34>
        Error_Handler();
 8001c4e:	f000 fba9 	bl	80023a4 <Error_Handler>
 8001c52:	e7ec      	b.n	8001c2e <MX_LPUART1_UART_Init+0x3e>
        Error_Handler();
 8001c54:	f000 fba6 	bl	80023a4 <Error_Handler>
 8001c58:	e7ed      	b.n	8001c36 <MX_LPUART1_UART_Init+0x46>
 8001c5a:	bf00      	nop
 8001c5c:	20001f4c 	.word	0x20001f4c
 8001c60:	40008000 	.word	0x40008000
 8001c64:	200003a0 	.word	0x200003a0

08001c68 <MX_LPUART1_UART_Suspend>:
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_ORE(USART_TypeDef *LPUARTx)
{
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 8001c68:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <MX_LPUART1_UART_Suspend+0x58>)
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	621a      	str	r2, [r3, #32]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_BUSY) == (USART_ISR_BUSY)) ? 1UL : 0UL);
 8001c6e:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <MX_LPUART1_UART_Suspend+0x58>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001c76:	d1fa      	bne.n	8001c6e <MX_LPUART1_UART_Suspend+0x6>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <MX_LPUART1_UART_Suspend+0x58>)
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001c80:	d0fa      	beq.n	8001c78 <MX_LPUART1_UART_Suspend+0x10>
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_WKUP(USART_TypeDef *LPUARTx)
{
  WRITE_REG(LPUARTx->ICR, USART_ICR_WUCF);
 8001c82:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <MX_LPUART1_UART_Suspend+0x58>)
 8001c84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c88:	621a      	str	r2, [r3, #32]
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_WKUP(USART_TypeDef *LPUARTx)
{
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_WUFIE);
 8001c8a:	4a0e      	ldr	r2, [pc, #56]	; (8001cc4 <MX_LPUART1_UART_Suspend+0x5c>)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c8c:	e852 3f00 	ldrex	r3, [r2]
 8001c90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c94:	e842 3100 	strex	r1, r3, [r2]
 8001c98:	2900      	cmp	r1, #0
 8001c9a:	d1f6      	bne.n	8001c8a <MX_LPUART1_UART_Suspend+0x22>
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_UESM);
 8001c9c:	4a08      	ldr	r2, [pc, #32]	; (8001cc0 <MX_LPUART1_UART_Suspend+0x58>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c9e:	e852 3f00 	ldrex	r3, [r2]
 8001ca2:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ca6:	e842 3100 	strex	r1, r3, [r2]
 8001caa:	2900      	cmp	r1, #0
 8001cac:	d1f6      	bne.n	8001c9c <MX_LPUART1_UART_Suspend+0x34>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001cae:	4a06      	ldr	r2, [pc, #24]	; (8001cc8 <MX_LPUART1_UART_Suspend+0x60>)
 8001cb0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8001cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    LL_LPUART_EnableInStopMode(LPUART1);

    // Unmask wakeup with Interrupt request from LPUART1
    LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_28);

}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40008000 	.word	0x40008000
 8001cc4:	40008008 	.word	0x40008008
 8001cc8:	58000800 	.word	0x58000800

08001ccc <MX_LPUART1_UART_Resume>:

// LPUART1 resume function
void MX_LPUART1_UART_Resume(void)
{
}
 8001ccc:	4770      	bx	lr
	...

08001cd0 <MX_LPUART1_UART_Transmit>:

// Transmit to LPUART1
void MX_LPUART1_UART_Transmit(uint8_t *buf, uint32_t len, uint32_t timeoutMs)
{
 8001cd0:	b538      	push	{r3, r4, r5, lr}
 8001cd2:	4615      	mov	r5, r2

    // Transmit
    HAL_UART_Transmit_IT(&hlpuart1, buf, len);
 8001cd4:	b28a      	uxth	r2, r1
 8001cd6:	4601      	mov	r1, r0
 8001cd8:	4809      	ldr	r0, [pc, #36]	; (8001d00 <MX_LPUART1_UART_Transmit+0x30>)
 8001cda:	f004 facd 	bl	8006278 <HAL_UART_Transmit_IT>

    // Wait, so that the caller won't mess with the buffer while the HAL is using it
    for (uint32_t i=0; i<timeoutMs; i++) {
 8001cde:	2400      	movs	r4, #0
 8001ce0:	42ac      	cmp	r4, r5
 8001ce2:	d20b      	bcs.n	8001cfc <MX_LPUART1_UART_Transmit+0x2c>
        HAL_UART_StateTypeDef state = HAL_UART_GetState(&hlpuart1);
 8001ce4:	4806      	ldr	r0, [pc, #24]	; (8001d00 <MX_LPUART1_UART_Transmit+0x30>)
 8001ce6:	f004 fccb 	bl	8006680 <HAL_UART_GetState>
        if ((state & HAL_UART_STATE_BUSY_TX) != HAL_UART_STATE_BUSY_TX) {
 8001cea:	f000 0021 	and.w	r0, r0, #33	; 0x21
 8001cee:	2821      	cmp	r0, #33	; 0x21
 8001cf0:	d104      	bne.n	8001cfc <MX_LPUART1_UART_Transmit+0x2c>
            break;
        }
        HAL_Delay(1);
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	f000 fbfe 	bl	80024f4 <HAL_Delay>
    for (uint32_t i=0; i<timeoutMs; i++) {
 8001cf8:	3401      	adds	r4, #1
 8001cfa:	e7f1      	b.n	8001ce0 <MX_LPUART1_UART_Transmit+0x10>
    }

}
 8001cfc:	bd38      	pop	{r3, r4, r5, pc}
 8001cfe:	bf00      	nop
 8001d00:	20001f4c 	.word	0x20001f4c

08001d04 <RBI_Init>:

#include "board.h"
#include "radio_conf.h"

int32_t RBI_Init(void)
{
 8001d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d06:	b087      	sub	sp, #28

    // should be calling BSP_RADIO_Init() but not supported by MX

    GPIO_InitTypeDef  gpio_init_structure = {0};
 8001d08:	2400      	movs	r4, #0
 8001d0a:	9405      	str	r4, [sp, #20]

    // Configure the Radio Switch pin
    gpio_init_structure.Pin   = FE_CTRL1_Pin;
 8001d0c:	f44f 7580 	mov.w	r5, #256	; 0x100
 8001d10:	9501      	str	r5, [sp, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001d12:	2301      	movs	r3, #1
 8001d14:	9302      	str	r3, [sp, #8]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001d16:	9403      	str	r4, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	9304      	str	r3, [sp, #16]

    HAL_GPIO_Init(FE_CTRL1_GPIO_Port, &gpio_init_structure);
 8001d1c:	a901      	add	r1, sp, #4
 8001d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d22:	f001 fca3 	bl	800366c <HAL_GPIO_Init>

    gpio_init_structure.Pin = FE_CTRL2_Pin;
 8001d26:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001d2a:	9701      	str	r7, [sp, #4]
    HAL_GPIO_Init(FE_CTRL2_GPIO_Port, &gpio_init_structure);
 8001d2c:	a901      	add	r1, sp, #4
 8001d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d32:	f001 fc9b 	bl	800366c <HAL_GPIO_Init>

    gpio_init_structure.Pin = FE_CTRL3_Pin;
 8001d36:	9501      	str	r5, [sp, #4]
    HAL_GPIO_Init(FE_CTRL3_GPIO_Port, &gpio_init_structure);
 8001d38:	4e0c      	ldr	r6, [pc, #48]	; (8001d6c <RBI_Init+0x68>)
 8001d3a:	a901      	add	r1, sp, #4
 8001d3c:	4630      	mov	r0, r6
 8001d3e:	f001 fc95 	bl	800366c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(FE_CTRL2_GPIO_Port, FE_CTRL2_Pin, GPIO_PIN_RESET);
 8001d42:	4622      	mov	r2, r4
 8001d44:	4639      	mov	r1, r7
 8001d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d4a:	f001 fd4e 	bl	80037ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FE_CTRL1_GPIO_Port, FE_CTRL1_Pin, GPIO_PIN_RESET);
 8001d4e:	4622      	mov	r2, r4
 8001d50:	4629      	mov	r1, r5
 8001d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d56:	f001 fd48 	bl	80037ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FE_CTRL3_GPIO_Port, FE_CTRL3_Pin, GPIO_PIN_RESET);
 8001d5a:	4622      	mov	r2, r4
 8001d5c:	4629      	mov	r1, r5
 8001d5e:	4630      	mov	r0, r6
 8001d60:	f001 fd43 	bl	80037ea <HAL_GPIO_WritePin>

    return 0;

}
 8001d64:	4620      	mov	r0, r4
 8001d66:	b007      	add	sp, #28
 8001d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	48000400 	.word	0x48000400

08001d70 <RBI_ConfigRFSwitch>:
    return 0;

}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8001d70:	b508      	push	{r3, lr}

    switch (Config) {
 8001d72:	2803      	cmp	r0, #3
 8001d74:	d817      	bhi.n	8001da6 <RBI_ConfigRFSwitch+0x36>
 8001d76:	e8df f000 	tbb	[pc, r0]
 8001d7a:	1802      	.short	0x1802
 8001d7c:	422d      	.short	0x422d
    case RBI_SWITCH_OFF: {
        // Turn off switch
        HAL_GPIO_WritePin(FE_CTRL3_GPIO_Port, FE_CTRL3_Pin, GPIO_PIN_RESET);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d84:	4828      	ldr	r0, [pc, #160]	; (8001e28 <RBI_ConfigRFSwitch+0xb8>)
 8001d86:	f001 fd30 	bl	80037ea <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FE_CTRL1_GPIO_Port, FE_CTRL1_Pin, GPIO_PIN_RESET);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d94:	f001 fd29 	bl	80037ea <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FE_CTRL2_GPIO_Port, FE_CTRL2_Pin, GPIO_PIN_RESET);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da2:	f001 fd22 	bl	80037ea <HAL_GPIO_WritePin>
        break;
    }

    return 0;

}
 8001da6:	2000      	movs	r0, #0
 8001da8:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(FE_CTRL3_GPIO_Port, FE_CTRL3_Pin, GPIO_PIN_SET);
 8001daa:	2201      	movs	r2, #1
 8001dac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001db0:	481d      	ldr	r0, [pc, #116]	; (8001e28 <RBI_ConfigRFSwitch+0xb8>)
 8001db2:	f001 fd1a 	bl	80037ea <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FE_CTRL1_GPIO_Port, FE_CTRL1_Pin, GPIO_PIN_SET);
 8001db6:	2201      	movs	r2, #1
 8001db8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc0:	f001 fd13 	bl	80037ea <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FE_CTRL2_GPIO_Port, FE_CTRL2_Pin, GPIO_PIN_RESET);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dce:	f001 fd0c 	bl	80037ea <HAL_GPIO_WritePin>
        break;
 8001dd2:	e7e8      	b.n	8001da6 <RBI_ConfigRFSwitch+0x36>
        HAL_GPIO_WritePin(FE_CTRL3_GPIO_Port, FE_CTRL3_Pin, GPIO_PIN_SET);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dda:	4813      	ldr	r0, [pc, #76]	; (8001e28 <RBI_ConfigRFSwitch+0xb8>)
 8001ddc:	f001 fd05 	bl	80037ea <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FE_CTRL1_GPIO_Port, FE_CTRL1_Pin, GPIO_PIN_SET);
 8001de0:	2201      	movs	r2, #1
 8001de2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dea:	f001 fcfe 	bl	80037ea <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FE_CTRL2_GPIO_Port, FE_CTRL2_Pin, GPIO_PIN_SET);
 8001dee:	2201      	movs	r2, #1
 8001df0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df8:	f001 fcf7 	bl	80037ea <HAL_GPIO_WritePin>
        break;
 8001dfc:	e7d3      	b.n	8001da6 <RBI_ConfigRFSwitch+0x36>
        HAL_GPIO_WritePin(FE_CTRL3_GPIO_Port, FE_CTRL3_Pin, GPIO_PIN_SET);
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e04:	4808      	ldr	r0, [pc, #32]	; (8001e28 <RBI_ConfigRFSwitch+0xb8>)
 8001e06:	f001 fcf0 	bl	80037ea <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FE_CTRL1_GPIO_Port, FE_CTRL1_Pin, GPIO_PIN_RESET);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e14:	f001 fce9 	bl	80037ea <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FE_CTRL2_GPIO_Port, FE_CTRL2_Pin, GPIO_PIN_SET);
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e22:	f001 fce2 	bl	80037ea <HAL_GPIO_WritePin>
        break;
 8001e26:	e7be      	b.n	8001da6 <RBI_ConfigRFSwitch+0x36>
 8001e28:	48000400 	.word	0x48000400

08001e2c <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
    return RBI_CONF_RFO;
}
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	4770      	bx	lr

08001e30 <RBI_IsTCXO>:
}

int32_t RBI_IsTCXO(void)
{
    return IS_TCXO_SUPPORTED;
}
 8001e30:	2001      	movs	r0, #1
 8001e32:	4770      	bx	lr

08001e34 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
    return IS_DCDC_SUPPORTED;
}
 8001e34:	2001      	movs	r0, #1
 8001e36:	4770      	bx	lr

08001e38 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

// RTC init
void MX_RTC_Init(void)
{
 8001e38:	b500      	push	{lr}
 8001e3a:	b08d      	sub	sp, #52	; 0x34

    RTC_AlarmTypeDef sAlarm = {0};
 8001e3c:	222c      	movs	r2, #44	; 0x2c
 8001e3e:	2100      	movs	r1, #0
 8001e40:	a801      	add	r0, sp, #4
 8001e42:	f015 fb15 	bl	8017470 <memset>

    hrtc.Instance = RTC;
 8001e46:	4819      	ldr	r0, [pc, #100]	; (8001eac <MX_RTC_Init+0x74>)
 8001e48:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <MX_RTC_Init+0x78>)
 8001e4a:	6003      	str	r3, [r0, #0]
    hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001e4c:	231f      	movs	r3, #31
 8001e4e:	6083      	str	r3, [r0, #8]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	6103      	str	r3, [r0, #16]
    hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001e54:	6143      	str	r3, [r0, #20]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e56:	6183      	str	r3, [r0, #24]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e5c:	61c2      	str	r2, [r0, #28]
    hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001e5e:	6203      	str	r3, [r0, #32]
    hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001e60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e64:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001e66:	f003 f869 	bl	8004f3c <HAL_RTC_Init>
 8001e6a:	b9a8      	cbnz	r0, 8001e98 <MX_RTC_Init+0x60>
        Error_Handler();
    }

    // Initialize RTC and set the Time and Date
    if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK) {
 8001e6c:	480f      	ldr	r0, [pc, #60]	; (8001eac <MX_RTC_Init+0x74>)
 8001e6e:	f003 f99f 	bl	80051b0 <HAL_RTCEx_SetSSRU_IT>
 8001e72:	b9a0      	cbnz	r0, 8001e9e <MX_RTC_Init+0x66>
        Error_Handler();
    }

    // Enable the Alarm A
    sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001e74:	2200      	movs	r2, #0
 8001e76:	9208      	str	r2, [sp, #32]
    sAlarm.AlarmTime.SubSeconds = 0x0;
 8001e78:	9202      	str	r2, [sp, #8]
    sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001e7a:	9206      	str	r2, [sp, #24]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001e7c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001e80:	9307      	str	r3, [sp, #28]
    sAlarm.Alarm = RTC_ALARM_A;
 8001e82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e86:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK) {
 8001e88:	a901      	add	r1, sp, #4
 8001e8a:	4808      	ldr	r0, [pc, #32]	; (8001eac <MX_RTC_Init+0x74>)
 8001e8c:	f003 f8b4 	bl	8004ff8 <HAL_RTC_SetAlarm_IT>
 8001e90:	b940      	cbnz	r0, 8001ea4 <MX_RTC_Init+0x6c>
        Error_Handler();
    }

}
 8001e92:	b00d      	add	sp, #52	; 0x34
 8001e94:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 8001e98:	f000 fa84 	bl	80023a4 <Error_Handler>
 8001e9c:	e7e6      	b.n	8001e6c <MX_RTC_Init+0x34>
        Error_Handler();
 8001e9e:	f000 fa81 	bl	80023a4 <Error_Handler>
 8001ea2:	e7e7      	b.n	8001e74 <MX_RTC_Init+0x3c>
        Error_Handler();
 8001ea4:	f000 fa7e 	bl	80023a4 <Error_Handler>
}
 8001ea8:	e7f3      	b.n	8001e92 <MX_RTC_Init+0x5a>
 8001eaa:	bf00      	nop
 8001eac:	200024a8 	.word	0x200024a8
 8001eb0:	40002800 	.word	0x40002800

08001eb4 <HAL_RTC_MspInit>:

// MSP init
void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001eb4:	b510      	push	{r4, lr}
 8001eb6:	b090      	sub	sp, #64	; 0x40
 8001eb8:	4604      	mov	r4, r0

    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eba:	2238      	movs	r2, #56	; 0x38
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	a802      	add	r0, sp, #8
 8001ec0:	f015 fad6 	bl	8017470 <memset>
    if(rtcHandle->Instance==RTC) {
 8001ec4:	6822      	ldr	r2, [r4, #0]
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <HAL_RTC_MspInit+0x7c>)
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d001      	beq.n	8001ed0 <HAL_RTC_MspInit+0x1c>
        HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
        HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
        HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);

    }
}
 8001ecc:	b010      	add	sp, #64	; 0x40
 8001ece:	bd10      	pop	{r4, pc}
        PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ed0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ed4:	9302      	str	r3, [sp, #8]
        PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eda:	930f      	str	r3, [sp, #60]	; 0x3c
        if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001edc:	a802      	add	r0, sp, #8
 8001ede:	f002 fe25 	bl	8004b2c <HAL_RCCEx_PeriphCLKConfig>
 8001ee2:	bb08      	cbnz	r0, 8001f28 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001eec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ef0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001ef4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ef6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001efa:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f02:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001f04:	9b01      	ldr	r3, [sp, #4]
        HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	4611      	mov	r1, r2
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	f001 f9b4 	bl	8003278 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001f10:	2002      	movs	r0, #2
 8001f12:	f001 f9e5 	bl	80032e0 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	4611      	mov	r1, r2
 8001f1a:	202a      	movs	r0, #42	; 0x2a
 8001f1c:	f001 f9ac 	bl	8003278 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001f20:	202a      	movs	r0, #42	; 0x2a
 8001f22:	f001 f9dd 	bl	80032e0 <HAL_NVIC_EnableIRQ>
}
 8001f26:	e7d1      	b.n	8001ecc <HAL_RTC_MspInit+0x18>
            Error_Handler();
 8001f28:	f000 fa3c 	bl	80023a4 <Error_Handler>
 8001f2c:	e7da      	b.n	8001ee4 <HAL_RTC_MspInit+0x30>
 8001f2e:	bf00      	nop
 8001f30:	40002800 	.word	0x40002800

08001f34 <PWR_EnterOffMode>:
    PWR_ExitOffMode,
};

void PWR_EnterOffMode(void)
{
}
 8001f34:	4770      	bx	lr

08001f36 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
}
 8001f36:	4770      	bx	lr

08001f38 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001f38:	b508      	push	{r3, lr}

    // Suspend
    MX_DBG_Suspend();
 8001f3a:	f7ff fc57 	bl	80017ec <MX_DBG_Suspend>

    // Suspend sysTick : work around for degugger problem in dual core (tickets 71085,  72038, 71087 )
    HAL_SuspendTick();
 8001f3e:	f000 fcb5 	bl	80028ac <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001f42:	2001      	movs	r0, #1
 8001f44:	4b02      	ldr	r3, [pc, #8]	; (8001f50 <PWR_EnterStopMode+0x18>)
 8001f46:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88

    // Clear Status Flag before entering STOP/STANDBY Mode
    LL_PWR_ClearFlag_C1STOP_C1STB();

    HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001f4a:	f002 f82b 	bl	8003fa4 <HAL_PWREx_EnterSTOP2Mode>

}
 8001f4e:	bd08      	pop	{r3, pc}
 8001f50:	58000400 	.word	0x58000400

08001f54 <PWR_ExitSleepMode>:
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);

}

void PWR_ExitSleepMode(void)
{
 8001f54:	b508      	push	{r3, lr}

    // Suspend sysTick
    HAL_ResumeTick();
 8001f56:	f000 fcb1 	bl	80028bc <HAL_ResumeTick>

}
 8001f5a:	bd08      	pop	{r3, pc}

08001f5c <PWR_ExitStopMode>:
{
 8001f5c:	b508      	push	{r3, lr}
    HAL_ResumeTick();
 8001f5e:	f000 fcad 	bl	80028bc <HAL_ResumeTick>
    MX_DBG_Resume();
 8001f62:	f7ff fc95 	bl	8001890 <MX_DBG_Resume>
}
 8001f66:	bd08      	pop	{r3, pc}

08001f68 <PWR_EnterSleepMode>:
{
 8001f68:	b508      	push	{r3, lr}
    HAL_SuspendTick();
 8001f6a:	f000 fc9f 	bl	80028ac <HAL_SuspendTick>
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001f6e:	2101      	movs	r1, #1
 8001f70:	2000      	movs	r0, #0
 8001f72:	f001 ffbb 	bl	8003eec <HAL_PWR_EnterSLEEPMode>
}
 8001f76:	bd08      	pop	{r3, pc}

08001f78 <HAL_MspInit>:
extern DMA_HandleTypeDef hdma_usart2_tx;

// Initializes the Global MSP.
void HAL_MspInit(void)
{
}
 8001f78:	4770      	bx	lr
	...

08001f7c <HAL_UART_MspInit>:

}

// UART MSP Initialization
void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f7e:	b097      	sub	sp, #92	; 0x5c
 8001f80:	4604      	mov	r4, r0

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f82:	2100      	movs	r1, #0
 8001f84:	9111      	str	r1, [sp, #68]	; 0x44
 8001f86:	9112      	str	r1, [sp, #72]	; 0x48
 8001f88:	9113      	str	r1, [sp, #76]	; 0x4c
 8001f8a:	9114      	str	r1, [sp, #80]	; 0x50
 8001f8c:	9115      	str	r1, [sp, #84]	; 0x54
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f8e:	2238      	movs	r2, #56	; 0x38
 8001f90:	a803      	add	r0, sp, #12
 8001f92:	f015 fa6d 	bl	8017470 <memset>

    if (uartHandle->Instance==USART1) {
 8001f96:	6822      	ldr	r2, [r4, #0]
 8001f98:	4b80      	ldr	r3, [pc, #512]	; (800219c <HAL_UART_MspInit+0x220>)
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d00a      	beq.n	8001fb4 <HAL_UART_MspInit+0x38>
        HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
        HAL_NVIC_EnableIRQ(USART1_IRQn);

    }

    if (uartHandle->Instance==USART2) {
 8001f9e:	6822      	ldr	r2, [r4, #0]
 8001fa0:	4b7f      	ldr	r3, [pc, #508]	; (80021a0 <HAL_UART_MspInit+0x224>)
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d071      	beq.n	800208a <HAL_UART_MspInit+0x10e>
        HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
        HAL_NVIC_EnableIRQ(USART2_IRQn);

    }

    if (uartHandle->Instance==LPUART1) {
 8001fa6:	6822      	ldr	r2, [r4, #0]
 8001fa8:	4b7e      	ldr	r3, [pc, #504]	; (80021a4 <HAL_UART_MspInit+0x228>)
 8001faa:	429a      	cmp	r2, r3
 8001fac:	f000 80c2 	beq.w	8002134 <HAL_UART_MspInit+0x1b8>
        HAL_NVIC_SetPriority(LPUART1_IRQn, 2, 0);
        HAL_NVIC_EnableIRQ(LPUART1_IRQn);

    }

}
 8001fb0:	b017      	add	sp, #92	; 0x5c
 8001fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	9303      	str	r3, [sp, #12]
        PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001fb8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001fbc:	9304      	str	r3, [sp, #16]
        if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001fbe:	a803      	add	r0, sp, #12
 8001fc0:	f002 fdb4 	bl	8004b2c <HAL_RCCEx_PeriphCLKConfig>
 8001fc4:	2800      	cmp	r0, #0
 8001fc6:	d154      	bne.n	8002072 <HAL_UART_MspInit+0xf6>
  SET_BIT(RCC->APB2ENR, Periphs);
 8001fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fcc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fd2:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fda:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001fdc:	9b00      	ldr	r3, [sp, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	9312      	str	r3, [sp, #72]	; 0x48
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2500      	movs	r5, #0
 8001fe4:	9513      	str	r5, [sp, #76]	; 0x4c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	9314      	str	r3, [sp, #80]	; 0x50
        GPIO_InitStruct.Alternate = USART1_GPIO_AF;
 8001fea:	2307      	movs	r3, #7
 8001fec:	9315      	str	r3, [sp, #84]	; 0x54
        GPIO_InitStruct.Pin = USART1_RX_Pin;
 8001fee:	2680      	movs	r6, #128	; 0x80
 8001ff0:	9611      	str	r6, [sp, #68]	; 0x44
        HAL_GPIO_Init(USART1_RX_GPIO_Port, &GPIO_InitStruct);
 8001ff2:	4f6d      	ldr	r7, [pc, #436]	; (80021a8 <HAL_UART_MspInit+0x22c>)
 8001ff4:	a911      	add	r1, sp, #68	; 0x44
 8001ff6:	4638      	mov	r0, r7
 8001ff8:	f001 fb38 	bl	800366c <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = USART1_TX_Pin;
 8001ffc:	2340      	movs	r3, #64	; 0x40
 8001ffe:	9311      	str	r3, [sp, #68]	; 0x44
        HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8002000:	a911      	add	r1, sp, #68	; 0x44
 8002002:	4638      	mov	r0, r7
 8002004:	f001 fb32 	bl	800366c <HAL_GPIO_Init>
        hdma_usart1_tx.Instance = USART1_TX_DMA_Channel;
 8002008:	4868      	ldr	r0, [pc, #416]	; (80021ac <HAL_UART_MspInit+0x230>)
 800200a:	4b69      	ldr	r3, [pc, #420]	; (80021b0 <HAL_UART_MspInit+0x234>)
 800200c:	6003      	str	r3, [r0, #0]
        hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800200e:	2312      	movs	r3, #18
 8002010:	6043      	str	r3, [r0, #4]
        hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002012:	2310      	movs	r3, #16
 8002014:	6083      	str	r3, [r0, #8]
        hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002016:	60c5      	str	r5, [r0, #12]
        hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002018:	6106      	str	r6, [r0, #16]
        hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800201a:	6145      	str	r5, [r0, #20]
        hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800201c:	6185      	str	r5, [r0, #24]
        hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800201e:	61c5      	str	r5, [r0, #28]
        hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002020:	6205      	str	r5, [r0, #32]
        if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK) {
 8002022:	f001 f9b3 	bl	800338c <HAL_DMA_Init>
 8002026:	bb38      	cbnz	r0, 8002078 <HAL_UART_MspInit+0xfc>
        if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK) {
 8002028:	2110      	movs	r1, #16
 800202a:	4860      	ldr	r0, [pc, #384]	; (80021ac <HAL_UART_MspInit+0x230>)
 800202c:	f001 fb0b 	bl	8003646 <HAL_DMA_ConfigChannelAttributes>
 8002030:	bb28      	cbnz	r0, 800207e <HAL_UART_MspInit+0x102>
        __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002032:	4b5e      	ldr	r3, [pc, #376]	; (80021ac <HAL_UART_MspInit+0x230>)
 8002034:	67a3      	str	r3, [r4, #120]	; 0x78
 8002036:	629c      	str	r4, [r3, #40]	; 0x28
        hdma_usart1_rx.Instance = USART1_RX_DMA_Channel;;
 8002038:	485e      	ldr	r0, [pc, #376]	; (80021b4 <HAL_UART_MspInit+0x238>)
 800203a:	4b5f      	ldr	r3, [pc, #380]	; (80021b8 <HAL_UART_MspInit+0x23c>)
 800203c:	6003      	str	r3, [r0, #0]
        hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800203e:	2311      	movs	r3, #17
 8002040:	6043      	str	r3, [r0, #4]
        hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002042:	2300      	movs	r3, #0
 8002044:	6083      	str	r3, [r0, #8]
        hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002046:	60c3      	str	r3, [r0, #12]
        hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002048:	2280      	movs	r2, #128	; 0x80
 800204a:	6102      	str	r2, [r0, #16]
        hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800204c:	6143      	str	r3, [r0, #20]
        hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800204e:	6183      	str	r3, [r0, #24]
        hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002050:	61c3      	str	r3, [r0, #28]
        hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002052:	6203      	str	r3, [r0, #32]
        if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK) {
 8002054:	f001 f99a 	bl	800338c <HAL_DMA_Init>
 8002058:	b9a0      	cbnz	r0, 8002084 <HAL_UART_MspInit+0x108>
        __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800205a:	4b56      	ldr	r3, [pc, #344]	; (80021b4 <HAL_UART_MspInit+0x238>)
 800205c:	67e3      	str	r3, [r4, #124]	; 0x7c
 800205e:	629c      	str	r4, [r3, #40]	; 0x28
        HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002060:	2200      	movs	r2, #0
 8002062:	2102      	movs	r1, #2
 8002064:	2024      	movs	r0, #36	; 0x24
 8002066:	f001 f907 	bl	8003278 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 800206a:	2024      	movs	r0, #36	; 0x24
 800206c:	f001 f938 	bl	80032e0 <HAL_NVIC_EnableIRQ>
 8002070:	e795      	b.n	8001f9e <HAL_UART_MspInit+0x22>
            Error_Handler();
 8002072:	f000 f997 	bl	80023a4 <Error_Handler>
 8002076:	e7a7      	b.n	8001fc8 <HAL_UART_MspInit+0x4c>
            Error_Handler();
 8002078:	f000 f994 	bl	80023a4 <Error_Handler>
 800207c:	e7d4      	b.n	8002028 <HAL_UART_MspInit+0xac>
            Error_Handler();
 800207e:	f000 f991 	bl	80023a4 <Error_Handler>
 8002082:	e7d6      	b.n	8002032 <HAL_UART_MspInit+0xb6>
            Error_Handler();
 8002084:	f000 f98e 	bl	80023a4 <Error_Handler>
 8002088:	e7e7      	b.n	800205a <HAL_UART_MspInit+0xde>
        PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800208a:	2302      	movs	r3, #2
 800208c:	9303      	str	r3, [sp, #12]
        PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800208e:	4b4b      	ldr	r3, [pc, #300]	; (80021bc <HAL_UART_MspInit+0x240>)
 8002090:	9305      	str	r3, [sp, #20]
        if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8002092:	a803      	add	r0, sp, #12
 8002094:	f002 fd4a 	bl	8004b2c <HAL_RCCEx_PeriphCLKConfig>
 8002098:	2800      	cmp	r0, #0
 800209a:	d142      	bne.n	8002122 <HAL_UART_MspInit+0x1a6>
  SET_BIT(RCC->APB1ENR1, Periphs);
 800209c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020a2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020a6:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80020b0:	9b01      	ldr	r3, [sp, #4]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	9312      	str	r3, [sp, #72]	; 0x48
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2500      	movs	r5, #0
 80020b8:	9513      	str	r5, [sp, #76]	; 0x4c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ba:	2303      	movs	r3, #3
 80020bc:	9314      	str	r3, [sp, #80]	; 0x50
        GPIO_InitStruct.Alternate = USART2_GPIO_AF;
 80020be:	2307      	movs	r3, #7
 80020c0:	9315      	str	r3, [sp, #84]	; 0x54
        GPIO_InitStruct.Pin = USART2_RX_Pin;
 80020c2:	2308      	movs	r3, #8
 80020c4:	9311      	str	r3, [sp, #68]	; 0x44
        HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 80020c6:	a911      	add	r1, sp, #68	; 0x44
 80020c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020cc:	f001 face 	bl	800366c <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = USART2_TX_Pin;
 80020d0:	2304      	movs	r3, #4
 80020d2:	9311      	str	r3, [sp, #68]	; 0x44
        HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80020d4:	a911      	add	r1, sp, #68	; 0x44
 80020d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020da:	f001 fac7 	bl	800366c <HAL_GPIO_Init>
        hdma_usart2_tx.Instance = USART2_TX_DMA_Channel;
 80020de:	4838      	ldr	r0, [pc, #224]	; (80021c0 <HAL_UART_MspInit+0x244>)
 80020e0:	4b38      	ldr	r3, [pc, #224]	; (80021c4 <HAL_UART_MspInit+0x248>)
 80020e2:	6003      	str	r3, [r0, #0]
        hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80020e4:	2314      	movs	r3, #20
 80020e6:	6043      	str	r3, [r0, #4]
        hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020e8:	2310      	movs	r3, #16
 80020ea:	6083      	str	r3, [r0, #8]
        hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ec:	60c5      	str	r5, [r0, #12]
        hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020ee:	2380      	movs	r3, #128	; 0x80
 80020f0:	6103      	str	r3, [r0, #16]
        hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020f2:	6145      	str	r5, [r0, #20]
        hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020f4:	6185      	str	r5, [r0, #24]
        hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80020f6:	61c5      	str	r5, [r0, #28]
        hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020f8:	6205      	str	r5, [r0, #32]
        if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK) {
 80020fa:	f001 f947 	bl	800338c <HAL_DMA_Init>
 80020fe:	b998      	cbnz	r0, 8002128 <HAL_UART_MspInit+0x1ac>
        if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK) {
 8002100:	2110      	movs	r1, #16
 8002102:	482f      	ldr	r0, [pc, #188]	; (80021c0 <HAL_UART_MspInit+0x244>)
 8002104:	f001 fa9f 	bl	8003646 <HAL_DMA_ConfigChannelAttributes>
 8002108:	b988      	cbnz	r0, 800212e <HAL_UART_MspInit+0x1b2>
        __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800210a:	4b2d      	ldr	r3, [pc, #180]	; (80021c0 <HAL_UART_MspInit+0x244>)
 800210c:	67a3      	str	r3, [r4, #120]	; 0x78
 800210e:	629c      	str	r4, [r3, #40]	; 0x28
        HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002110:	2200      	movs	r2, #0
 8002112:	2102      	movs	r1, #2
 8002114:	2025      	movs	r0, #37	; 0x25
 8002116:	f001 f8af 	bl	8003278 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART2_IRQn);
 800211a:	2025      	movs	r0, #37	; 0x25
 800211c:	f001 f8e0 	bl	80032e0 <HAL_NVIC_EnableIRQ>
 8002120:	e741      	b.n	8001fa6 <HAL_UART_MspInit+0x2a>
            Error_Handler();
 8002122:	f000 f93f 	bl	80023a4 <Error_Handler>
 8002126:	e7b9      	b.n	800209c <HAL_UART_MspInit+0x120>
            Error_Handler();
 8002128:	f000 f93c 	bl	80023a4 <Error_Handler>
 800212c:	e7e8      	b.n	8002100 <HAL_UART_MspInit+0x184>
            Error_Handler();
 800212e:	f000 f939 	bl	80023a4 <Error_Handler>
 8002132:	e7ea      	b.n	800210a <HAL_UART_MspInit+0x18e>
        PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002134:	2320      	movs	r3, #32
 8002136:	9303      	str	r3, [sp, #12]
        PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 8002138:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800213c:	9307      	str	r3, [sp, #28]
        if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800213e:	a803      	add	r0, sp, #12
 8002140:	f002 fcf4 	bl	8004b2c <HAL_RCCEx_PeriphCLKConfig>
 8002144:	bb38      	cbnz	r0, 8002196 <HAL_UART_MspInit+0x21a>
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800214c:	f042 0201 	orr.w	r2, r2, #1
 8002150:	65da      	str	r2, [r3, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800215a:	9b02      	ldr	r3, [sp, #8]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2400      	movs	r4, #0
 800215e:	9413      	str	r4, [sp, #76]	; 0x4c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	9414      	str	r4, [sp, #80]	; 0x50
        GPIO_InitStruct.Alternate = LPUART1_GPIO_AF;
 8002162:	2608      	movs	r6, #8
 8002164:	9615      	str	r6, [sp, #84]	; 0x54
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2502      	movs	r5, #2
 8002168:	9512      	str	r5, [sp, #72]	; 0x48
        GPIO_InitStruct.Pin = LPUART1_TX_Pin;
 800216a:	2304      	movs	r3, #4
 800216c:	9311      	str	r3, [sp, #68]	; 0x44
        HAL_GPIO_Init(LPUART1_TX_GPIO_Port, &GPIO_InitStruct);
 800216e:	a911      	add	r1, sp, #68	; 0x44
 8002170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002174:	f001 fa7a 	bl	800366c <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = LPUART1_RX_Pin;
 8002178:	9611      	str	r6, [sp, #68]	; 0x44
        HAL_GPIO_Init(LPUART1_RX_GPIO_Port, &GPIO_InitStruct);
 800217a:	a911      	add	r1, sp, #68	; 0x44
 800217c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002180:	f001 fa74 	bl	800366c <HAL_GPIO_Init>
        HAL_NVIC_SetPriority(LPUART1_IRQn, 2, 0);
 8002184:	4622      	mov	r2, r4
 8002186:	4629      	mov	r1, r5
 8002188:	2026      	movs	r0, #38	; 0x26
 800218a:	f001 f875 	bl	8003278 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800218e:	2026      	movs	r0, #38	; 0x26
 8002190:	f001 f8a6 	bl	80032e0 <HAL_NVIC_EnableIRQ>
}
 8002194:	e70c      	b.n	8001fb0 <HAL_UART_MspInit+0x34>
            Error_Handler();
 8002196:	f000 f905 	bl	80023a4 <Error_Handler>
 800219a:	e7d4      	b.n	8002146 <HAL_UART_MspInit+0x1ca>
 800219c:	40013800 	.word	0x40013800
 80021a0:	40004400 	.word	0x40004400
 80021a4:	40008000 	.word	0x40008000
 80021a8:	48000400 	.word	0x48000400
 80021ac:	200020d4 	.word	0x200020d4
 80021b0:	4002001c 	.word	0x4002001c
 80021b4:	20002134 	.word	0x20002134
 80021b8:	40020008 	.word	0x40020008
 80021bc:	000c0004 	.word	0x000c0004
 80021c0:	20002194 	.word	0x20002194
 80021c4:	40020044 	.word	0x40020044

080021c8 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80021c8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80021cc:	4905      	ldr	r1, [pc, #20]	; (80021e4 <__NVIC_SystemReset+0x1c>)
 80021ce:	68ca      	ldr	r2, [r1, #12]
 80021d0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80021d4:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <__NVIC_SystemReset+0x20>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60cb      	str	r3, [r1, #12]
 80021da:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80021de:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80021e0:	e7fd      	b.n	80021de <__NVIC_SystemReset+0x16>
 80021e2:	bf00      	nop
 80021e4:	e000ed00 	.word	0xe000ed00
 80021e8:	05fa0004 	.word	0x05fa0004

080021ec <MX_Breakpoint>:
void EXTI15_10_IRQHandler(void);
void GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin);

// For panic breakpoint
void MX_Breakpoint()
{
 80021ec:	b508      	push	{r3, lr}
    if (MX_DBG_Active()) {
 80021ee:	f7ff faf1 	bl	80017d4 <MX_DBG_Active>
 80021f2:	b100      	cbz	r0, 80021f6 <MX_Breakpoint+0xa>
        asm ("BKPT 0");
 80021f4:	be00      	bkpt	0x0000
    }
}
 80021f6:	bd08      	pop	{r3, pc}

080021f8 <NMI_Handler>:

// Cortex core interrupt handlers
void NMI_Handler(void)
{
 80021f8:	b508      	push	{r3, lr}
    MX_Breakpoint();
 80021fa:	f7ff fff7 	bl	80021ec <MX_Breakpoint>
    NVIC_SystemReset();
 80021fe:	f7ff ffe3 	bl	80021c8 <__NVIC_SystemReset>

08002202 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
 8002202:	b508      	push	{r3, lr}
    MX_Breakpoint();
 8002204:	f7ff fff2 	bl	80021ec <MX_Breakpoint>
    NVIC_SystemReset();
 8002208:	f7ff ffde 	bl	80021c8 <__NVIC_SystemReset>

0800220c <MemManage_Handler>:
}
void MemManage_Handler(void)
{
 800220c:	b508      	push	{r3, lr}
    MX_Breakpoint();
 800220e:	f7ff ffed 	bl	80021ec <MX_Breakpoint>
    NVIC_SystemReset();
 8002212:	f7ff ffd9 	bl	80021c8 <__NVIC_SystemReset>

08002216 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
 8002216:	b508      	push	{r3, lr}
    MX_Breakpoint();
 8002218:	f7ff ffe8 	bl	80021ec <MX_Breakpoint>
    NVIC_SystemReset();
 800221c:	f7ff ffd4 	bl	80021c8 <__NVIC_SystemReset>

08002220 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
 8002220:	b508      	push	{r3, lr}
    MX_Breakpoint();
 8002222:	f7ff ffe3 	bl	80021ec <MX_Breakpoint>
}
 8002226:	bd08      	pop	{r3, pc}

08002228 <SVC_Handler>:
void SVC_Handler(void)
{
}
 8002228:	4770      	bx	lr

0800222a <DebugMon_Handler>:
void DebugMon_Handler(void)
{
}
 800222a:	4770      	bx	lr

0800222c <PendSV_Handler>:
void PendSV_Handler(void)
{
}
 800222c:	4770      	bx	lr

0800222e <SysTick_Handler>:
void SysTick_Handler(void)
{
}
 800222e:	4770      	bx	lr

08002230 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:
// Peripheral interrupt handlers
// please refer to the startup file (startup_stm32wlxx.s)

// This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8002230:	b508      	push	{r3, lr}
    HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8002232:	4802      	ldr	r0, [pc, #8]	; (800223c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8002234:	f002 ffe8 	bl	8005208 <HAL_RTCEx_SSRUIRQHandler>
}
 8002238:	bd08      	pop	{r3, pc}
 800223a:	bf00      	nop
 800223c:	200024a8 	.word	0x200024a8

08002240 <DMA2_Channel1_IRQHandler>:

// DMA Handlers
void SPI1_RX_DMA_IRQHandler(void)
{
 8002240:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002242:	4802      	ldr	r0, [pc, #8]	; (800224c <DMA2_Channel1_IRQHandler+0xc>)
 8002244:	f001 f988 	bl	8003558 <HAL_DMA_IRQHandler>
}
 8002248:	bd08      	pop	{r3, pc}
 800224a:	bf00      	nop
 800224c:	200023e8 	.word	0x200023e8

08002250 <DMA2_Channel2_IRQHandler>:
void SPI1_TX_DMA_IRQHandler(void)
{
 8002250:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002252:	4802      	ldr	r0, [pc, #8]	; (800225c <DMA2_Channel2_IRQHandler+0xc>)
 8002254:	f001 f980 	bl	8003558 <HAL_DMA_IRQHandler>
}
 8002258:	bd08      	pop	{r3, pc}
 800225a:	bf00      	nop
 800225c:	20002448 	.word	0x20002448

08002260 <DMA1_Channel5_IRQHandler>:
void I2C2_RX_DMA_IRQHandler(void)
{
 8002260:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002262:	4802      	ldr	r0, [pc, #8]	; (800226c <DMA1_Channel5_IRQHandler+0xc>)
 8002264:	f001 f978 	bl	8003558 <HAL_DMA_IRQHandler>
}
 8002268:	bd08      	pop	{r3, pc}
 800226a:	bf00      	nop
 800226c:	20002014 	.word	0x20002014

08002270 <DMA1_Channel6_IRQHandler>:
void I2C2_TX_DMA_IRQHandler(void)
{
 8002270:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002272:	4802      	ldr	r0, [pc, #8]	; (800227c <DMA1_Channel6_IRQHandler+0xc>)
 8002274:	f001 f970 	bl	8003558 <HAL_DMA_IRQHandler>
}
 8002278:	bd08      	pop	{r3, pc}
 800227a:	bf00      	nop
 800227c:	20002074 	.word	0x20002074

08002280 <DMA1_Channel1_IRQHandler>:
void USART1_RX_DMA_IRQHandler(void)
{
 8002280:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002282:	4802      	ldr	r0, [pc, #8]	; (800228c <DMA1_Channel1_IRQHandler+0xc>)
 8002284:	f001 f968 	bl	8003558 <HAL_DMA_IRQHandler>
}
 8002288:	bd08      	pop	{r3, pc}
 800228a:	bf00      	nop
 800228c:	20002134 	.word	0x20002134

08002290 <DMA1_Channel2_IRQHandler>:
void USART1_TX_DMA_IRQHandler(void)
{
 8002290:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002292:	4802      	ldr	r0, [pc, #8]	; (800229c <DMA1_Channel2_IRQHandler+0xc>)
 8002294:	f001 f960 	bl	8003558 <HAL_DMA_IRQHandler>
}
 8002298:	bd08      	pop	{r3, pc}
 800229a:	bf00      	nop
 800229c:	200020d4 	.word	0x200020d4

080022a0 <DMA1_Channel4_IRQHandler>:
{
    HAL_DMA_IRQHandler(&hdma_usart2_rx);
}
#endif
void USART2_TX_DMA_IRQHandler(void)
{
 80022a0:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80022a2:	4802      	ldr	r0, [pc, #8]	; (80022ac <DMA1_Channel4_IRQHandler+0xc>)
 80022a4:	f001 f958 	bl	8003558 <HAL_DMA_IRQHandler>
}
 80022a8:	bd08      	pop	{r3, pc}
 80022aa:	bf00      	nop
 80022ac:	20002194 	.word	0x20002194

080022b0 <I2C2_EV_IRQHandler>:

// I2C2 Event Interrupt
void I2C2_EV_IRQHandler(void)
{
 80022b0:	b508      	push	{r3, lr}
    HAL_I2C_EV_IRQHandler(&hi2c2);
 80022b2:	4802      	ldr	r0, [pc, #8]	; (80022bc <I2C2_EV_IRQHandler+0xc>)
 80022b4:	f001 fb04 	bl	80038c0 <HAL_I2C_EV_IRQHandler>
}
 80022b8:	bd08      	pop	{r3, pc}
 80022ba:	bf00      	nop
 80022bc:	20001f00 	.word	0x20001f00

080022c0 <I2C2_ER_IRQHandler>:

// I2C2 Error Interrupt
void I2C2_ER_IRQHandler(void)
{
 80022c0:	b508      	push	{r3, lr}
    HAL_I2C_ER_IRQHandler(&hi2c2);
 80022c2:	4802      	ldr	r0, [pc, #8]	; (80022cc <I2C2_ER_IRQHandler+0xc>)
 80022c4:	f001 fdc7 	bl	8003e56 <HAL_I2C_ER_IRQHandler>
}
 80022c8:	bd08      	pop	{r3, pc}
 80022ca:	bf00      	nop
 80022cc:	20001f00 	.word	0x20001f00

080022d0 <SPI1_IRQHandler>:

// SPI1 Interrupt
void SPI1_IRQHandler(void)
{
 80022d0:	b508      	push	{r3, lr}
    HAL_SPI_IRQHandler(&hspi1);
 80022d2:	4802      	ldr	r0, [pc, #8]	; (80022dc <SPI1_IRQHandler+0xc>)
 80022d4:	f002 ffbc 	bl	8005250 <HAL_SPI_IRQHandler>
}
 80022d8:	bd08      	pop	{r3, pc}
 80022da:	bf00      	nop
 80022dc:	200022bc 	.word	0x200022bc

080022e0 <USART1_IRQHandler>:

// USART1 Interrupt
void USART1_IRQHandler(void)
{
 80022e0:	b508      	push	{r3, lr}
    HAL_UART_IRQHandler(&huart1);
 80022e2:	4802      	ldr	r0, [pc, #8]	; (80022ec <USART1_IRQHandler+0xc>)
 80022e4:	f004 f82c 	bl	8006340 <HAL_UART_IRQHandler>
}
 80022e8:	bd08      	pop	{r3, pc}
 80022ea:	bf00      	nop
 80022ec:	200021f4 	.word	0x200021f4

080022f0 <USART2_IRQHandler>:

// USART2 Interrupt
void USART2_IRQHandler(void)
{
 80022f0:	b508      	push	{r3, lr}
    HAL_UART_IRQHandler(&huart2);
 80022f2:	4802      	ldr	r0, [pc, #8]	; (80022fc <USART2_IRQHandler+0xc>)
 80022f4:	f004 f824 	bl	8006340 <HAL_UART_IRQHandler>
}
 80022f8:	bd08      	pop	{r3, pc}
 80022fa:	bf00      	nop
 80022fc:	20002320 	.word	0x20002320

08002300 <LPUART1_IRQHandler>:

// LPUART1 Interrupt
void LPUART1_IRQHandler(void)
{
 8002300:	b508      	push	{r3, lr}
    HAL_UART_IRQHandler(&hlpuart1);
 8002302:	4802      	ldr	r0, [pc, #8]	; (800230c <LPUART1_IRQHandler+0xc>)
 8002304:	f004 f81c 	bl	8006340 <HAL_UART_IRQHandler>
}
 8002308:	bd08      	pop	{r3, pc}
 800230a:	bf00      	nop
 800230c:	20001f4c 	.word	0x20001f4c

08002310 <HAL_GPIO_EXTI_Callback>:

// Method called when an external interrupt happens
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002310:	b508      	push	{r3, lr}
    MX_AppISR(GPIO_Pin);
 8002312:	f7fe ffbd 	bl	8001290 <MX_AppISR>
}
 8002316:	bd08      	pop	{r3, pc}

08002318 <GPIO_EXTI_IRQHandler>:

void GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002318:	b508      	push	{r3, lr}
    if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) {
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <GPIO_EXTI_IRQHandler+0x1c>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	4203      	tst	r3, r0
 8002320:	d100      	bne.n	8002324 <GPIO_EXTI_IRQHandler+0xc>
        uint16_t GPIO_Line = GPIO_Pin & EXTI->PR1;
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
        HAL_GPIO_EXTI_Callback(GPIO_Line);
    }
}
 8002322:	bd08      	pop	{r3, pc}
        uint16_t GPIO_Line = GPIO_Pin & EXTI->PR1;
 8002324:	4b03      	ldr	r3, [pc, #12]	; (8002334 <GPIO_EXTI_IRQHandler+0x1c>)
 8002326:	68da      	ldr	r2, [r3, #12]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002328:	60d8      	str	r0, [r3, #12]
        HAL_GPIO_EXTI_Callback(GPIO_Line);
 800232a:	4010      	ands	r0, r2
 800232c:	f7ff fff0 	bl	8002310 <HAL_GPIO_EXTI_Callback>
}
 8002330:	e7f7      	b.n	8002322 <GPIO_EXTI_IRQHandler+0xa>
 8002332:	bf00      	nop
 8002334:	58000800 	.word	0x58000800

08002338 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler( void )
{
 8002338:	b508      	push	{r3, lr}
    GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800233a:	2001      	movs	r0, #1
 800233c:	f7ff ffec 	bl	8002318 <GPIO_EXTI_IRQHandler>
}
 8002340:	bd08      	pop	{r3, pc}

08002342 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler( void )
{
 8002342:	b508      	push	{r3, lr}
    GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002344:	2002      	movs	r0, #2
 8002346:	f7ff ffe7 	bl	8002318 <GPIO_EXTI_IRQHandler>
}
 800234a:	bd08      	pop	{r3, pc}

0800234c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler( void )
{
 800234c:	b508      	push	{r3, lr}
    GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800234e:	2004      	movs	r0, #4
 8002350:	f7ff ffe2 	bl	8002318 <GPIO_EXTI_IRQHandler>
}
 8002354:	bd08      	pop	{r3, pc}

08002356 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler( void )
{
 8002356:	b508      	push	{r3, lr}
    GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002358:	2008      	movs	r0, #8
 800235a:	f7ff ffdd 	bl	8002318 <GPIO_EXTI_IRQHandler>
}
 800235e:	bd08      	pop	{r3, pc}

08002360 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler( void )
{
 8002360:	b508      	push	{r3, lr}
    GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002362:	2010      	movs	r0, #16
 8002364:	f7ff ffd8 	bl	8002318 <GPIO_EXTI_IRQHandler>
}
 8002368:	bd08      	pop	{r3, pc}

0800236a <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler( void )
{
 800236a:	b508      	push	{r3, lr}
    GPIO_EXTI_IRQHandler(GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5);
 800236c:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 8002370:	f7ff ffd2 	bl	8002318 <GPIO_EXTI_IRQHandler>
}
 8002374:	bd08      	pop	{r3, pc}

08002376 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler( void )
{
 8002376:	b508      	push	{r3, lr}
    GPIO_EXTI_IRQHandler(GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10);
 8002378:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 800237c:	f7ff ffcc 	bl	8002318 <GPIO_EXTI_IRQHandler>
}
 8002380:	bd08      	pop	{r3, pc}
	...

08002384 <RTC_Alarm_IRQHandler>:

// RTC Alarms (A and B) Interrupt.
void RTC_Alarm_IRQHandler(void)
{
 8002384:	b508      	push	{r3, lr}
    HAL_RTC_AlarmIRQHandler(&hrtc);
 8002386:	4802      	ldr	r0, [pc, #8]	; (8002390 <RTC_Alarm_IRQHandler+0xc>)
 8002388:	f002 fd52 	bl	8004e30 <HAL_RTC_AlarmIRQHandler>
}
 800238c:	bd08      	pop	{r3, pc}
 800238e:	bf00      	nop
 8002390:	200024a8 	.word	0x200024a8

08002394 <SUBGHZ_Radio_IRQHandler>:

// SubGHZ Radio Interrupt
void SUBGHZ_Radio_IRQHandler(void)
{
 8002394:	b508      	push	{r3, lr}
    HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002396:	4802      	ldr	r0, [pc, #8]	; (80023a0 <SUBGHZ_Radio_IRQHandler+0xc>)
 8002398:	f003 fa80 	bl	800589c <HAL_SUBGHZ_IRQHandler>
}
 800239c:	bd08      	pop	{r3, pc}
 800239e:	bf00      	nop
 80023a0:	200024e0 	.word	0x200024e0

080023a4 <Error_Handler>:

// Error handling
void Error_Handler(void)
{
 80023a4:	b508      	push	{r3, lr}
    MX_Breakpoint();
 80023a6:	f7ff ff21 	bl	80021ec <MX_Breakpoint>
    NVIC_SystemReset();
 80023aa:	f7ff ff0d 	bl	80021c8 <__NVIC_SystemReset>
	...

080023b0 <MX_SUBGHZ_Init>:
// Handle
SUBGHZ_HandleTypeDef hsubghz;

// SUBGHZ init function
void MX_SUBGHZ_Init(void)
{
 80023b0:	b508      	push	{r3, lr}
    hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <MX_SUBGHZ_Init+0x18>)
 80023b4:	2308      	movs	r3, #8
 80023b6:	6003      	str	r3, [r0, #0]
    if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK) {
 80023b8:	f002 fff8 	bl	80053ac <HAL_SUBGHZ_Init>
 80023bc:	b900      	cbnz	r0, 80023c0 <MX_SUBGHZ_Init+0x10>
        Error_Handler();
    }
}
 80023be:	bd08      	pop	{r3, pc}
        Error_Handler();
 80023c0:	f7ff fff0 	bl	80023a4 <Error_Handler>
}
 80023c4:	e7fb      	b.n	80023be <MX_SUBGHZ_Init+0xe>
 80023c6:	bf00      	nop
 80023c8:	200024e0 	.word	0x200024e0

080023cc <HAL_SUBGHZ_MspInit>:

// MSP Init
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80023cc:	b500      	push	{lr}
 80023ce:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80023d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80023dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80023e4:	9b01      	ldr	r3, [sp, #4]

    // SUBGHZ clock enable
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    // SUBGHZ interrupt Init
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	4611      	mov	r1, r2
 80023ea:	2032      	movs	r0, #50	; 0x32
 80023ec:	f000 ff44 	bl	8003278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80023f0:	2032      	movs	r0, #50	; 0x32
 80023f2:	f000 ff75 	bl	80032e0 <HAL_NVIC_EnableIRQ>
}
 80023f6:	b003      	add	sp, #12
 80023f8:	f85d fb04 	ldr.w	pc, [sp], #4

080023fc <SystemApp_Init>:
// Maximum battery level
#define LORAWAN_MAX_BAT   254

// Init SystemApp subsystem
void SystemApp_Init(void)
{
 80023fc:	b508      	push	{r3, lr}

    // Initialize the temperature and Battery measurement services
    SYS_InitMeasurement();
 80023fe:	f7ff f96d 	bl	80016dc <SYS_InitMeasurement>

    // Initialize the Sensors
    EnvSensors_Init();
 8002402:	f000 f897 	bl	8002534 <EnvSensors_Init>

}
 8002406:	bd08      	pop	{r3, pc}

08002408 <GetBatteryLevel>:

// get battery voltage
uint8_t GetBatteryLevel(void)
{
 8002408:	b508      	push	{r3, lr}
    uint8_t batteryLevel = 0;
    uint16_t batteryLevelmV;

    batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 800240a:	f7ff f96f 	bl	80016ec <SYS_GetBatteryLevel>

    // Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged)
    if (batteryLevelmV > VDD_BAT) {
 800240e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002412:	4298      	cmp	r0, r3
 8002414:	d80d      	bhi.n	8002432 <GetBatteryLevel+0x2a>
        batteryLevel = LORAWAN_MAX_BAT;
    } else if (batteryLevelmV < VDD_MIN) {
 8002416:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 800241a:	d30c      	bcc.n	8002436 <GetBatteryLevel+0x2e>
        batteryLevel = 0;
    } else {
        batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 800241c:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 8002420:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 8002424:	0040      	lsls	r0, r0, #1
 8002426:	4b05      	ldr	r3, [pc, #20]	; (800243c <GetBatteryLevel+0x34>)
 8002428:	fba3 3000 	umull	r3, r0, r3, r0
 800242c:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8002430:	e000      	b.n	8002434 <GetBatteryLevel+0x2c>
        batteryLevel = LORAWAN_MAX_BAT;
 8002432:	20fe      	movs	r0, #254	; 0xfe
    }

    return batteryLevel;  // 1 (very low) to 254 (fully charged)
}
 8002434:	bd08      	pop	{r3, pc}
        batteryLevel = 0;
 8002436:	2000      	movs	r0, #0
 8002438:	e7fc      	b.n	8002434 <GetBatteryLevel+0x2c>
 800243a:	bf00      	nop
 800243c:	1b4e81b5 	.word	0x1b4e81b5

08002440 <GetTemperatureLevel>:

// get temp
uint16_t GetTemperatureLevel(void)
{
 8002440:	b508      	push	{r3, lr}
    uint16_t temperatureLevel = 0;
    temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8002442:	f7ff f975 	bl	8001730 <SYS_GetTemperatureLevel>
 8002446:	4603      	mov	r3, r0
 8002448:	2800      	cmp	r0, #0
 800244a:	db02      	blt.n	8002452 <GetTemperatureLevel+0x12>
    return temperatureLevel;
}
 800244c:	f3c3 200f 	ubfx	r0, r3, #8, #16
 8002450:	bd08      	pop	{r3, pc}
    temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8002452:	f100 03ff 	add.w	r3, r0, #255	; 0xff
 8002456:	e7f9      	b.n	800244c <GetTemperatureLevel+0xc>

08002458 <GetUniqueId>:

//
void GetUniqueId(uint8_t *id)
{
 8002458:	b538      	push	{r3, r4, r5, lr}
 800245a:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 800245c:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <GetUniqueId+0x60>)
 800245e:	681b      	ldr	r3, [r3, #0]
    uint32_t val = 0;
    val = LL_FLASH_GetUDN();
    if (val == 0xFFFFFFFF) { // Normally this should not happen
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002464:	d011      	beq.n	800248a <GetUniqueId+0x32>
        id[3] = (ID_2_val) >> 24;
        id[2] = (ID_2_val) >> 16;
        id[1] = (ID_2_val) >> 8;
        id[0] = (ID_2_val);
    } else { // Typical use case
        id[7] = val & 0xFF;
 8002466:	71c3      	strb	r3, [r0, #7]
        id[6] = (val >> 8) & 0xFF;
 8002468:	0a1a      	lsrs	r2, r3, #8
 800246a:	7182      	strb	r2, [r0, #6]
        id[5] = (val >> 16) & 0xFF;
 800246c:	0c1a      	lsrs	r2, r3, #16
 800246e:	7142      	strb	r2, [r0, #5]
        id[4] = (val >> 24) & 0xFF;
 8002470:	0e1b      	lsrs	r3, r3, #24
 8002472:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <GetUniqueId+0x64>)
 8002476:	681a      	ldr	r2, [r3, #0]
        val = LL_FLASH_GetDeviceID();
        id[3] = val & 0xFF;
 8002478:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	0a1a      	lsrs	r2, r3, #8
        val = LL_FLASH_GetSTCompanyID();
        id[2] = val & 0xFF;
 800247e:	7082      	strb	r2, [r0, #2]
        id[1] = (val >> 8) & 0xFF;
 8002480:	0c1a      	lsrs	r2, r3, #16
 8002482:	7042      	strb	r2, [r0, #1]
        id[0] = (val >> 16) & 0xFF;
 8002484:	0e1b      	lsrs	r3, r3, #24
 8002486:	7003      	strb	r3, [r0, #0]
    }

}
 8002488:	bd38      	pop	{r3, r4, r5, pc}
        uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 800248a:	f000 fa1f 	bl	80028cc <HAL_GetUIDw0>
 800248e:	4605      	mov	r5, r0
 8002490:	f000 fa28 	bl	80028e4 <HAL_GetUIDw2>
 8002494:	4405      	add	r5, r0
        uint32_t ID_2_val = HAL_GetUIDw1();
 8002496:	f000 fa1f 	bl	80028d8 <HAL_GetUIDw1>
        id[7] = (ID_1_3_val) >> 24;
 800249a:	0e2b      	lsrs	r3, r5, #24
 800249c:	71e3      	strb	r3, [r4, #7]
        id[6] = (ID_1_3_val) >> 16;
 800249e:	0c2b      	lsrs	r3, r5, #16
 80024a0:	71a3      	strb	r3, [r4, #6]
        id[5] = (ID_1_3_val) >> 8;
 80024a2:	0a2b      	lsrs	r3, r5, #8
 80024a4:	7163      	strb	r3, [r4, #5]
        id[4] = (ID_1_3_val);
 80024a6:	7125      	strb	r5, [r4, #4]
        id[3] = (ID_2_val) >> 24;
 80024a8:	0e03      	lsrs	r3, r0, #24
 80024aa:	70e3      	strb	r3, [r4, #3]
        id[2] = (ID_2_val) >> 16;
 80024ac:	0c03      	lsrs	r3, r0, #16
 80024ae:	70a3      	strb	r3, [r4, #2]
        id[1] = (ID_2_val) >> 8;
 80024b0:	0a03      	lsrs	r3, r0, #8
 80024b2:	7063      	strb	r3, [r4, #1]
        id[0] = (ID_2_val);
 80024b4:	7020      	strb	r0, [r4, #0]
 80024b6:	e7e7      	b.n	8002488 <GetUniqueId+0x30>
 80024b8:	1fff7580 	.word	0x1fff7580
 80024bc:	1fff7584 	.word	0x1fff7584

080024c0 <GetDevAddr>:
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80024c0:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <GetDevAddr+0x24>)
 80024c2:	6818      	ldr	r0, [r3, #0]
uint32_t GetDevAddr(void)
{
    uint32_t val = 0;

    val = LL_FLASH_GetUDN();
    if (val == 0xFFFFFFFF) {
 80024c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80024c8:	d000      	beq.n	80024cc <GetDevAddr+0xc>
        val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
    }

    return val;

}
 80024ca:	4770      	bx	lr
{
 80024cc:	b510      	push	{r4, lr}
        val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80024ce:	f000 f9fd 	bl	80028cc <HAL_GetUIDw0>
 80024d2:	4604      	mov	r4, r0
 80024d4:	f000 fa00 	bl	80028d8 <HAL_GetUIDw1>
 80024d8:	4044      	eors	r4, r0
 80024da:	f000 fa03 	bl	80028e4 <HAL_GetUIDw2>
 80024de:	4060      	eors	r0, r4
}
 80024e0:	bd10      	pop	{r4, pc}
 80024e2:	bf00      	nop
 80024e4:	1fff7580 	.word	0x1fff7580

080024e8 <HAL_InitTick>:
// HAL overrides for tick handling
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
    // Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC)
    return HAL_OK;
}
 80024e8:	2000      	movs	r0, #0
 80024ea:	4770      	bx	lr

080024ec <HAL_GetTick>:
uint32_t HAL_GetTick(void)
{
 80024ec:	b508      	push	{r3, lr}
    // TIMER_IF can be based on other counter the SysTick e.g. RTC
    return TIMER_IF_GetTimerValue();
 80024ee:	f000 f83f 	bl	8002570 <TIMER_IF_GetTimerValue>
}
 80024f2:	bd08      	pop	{r3, pc}

080024f4 <HAL_Delay>:
void HAL_Delay(__IO uint32_t Delay)
{
 80024f4:	b500      	push	{lr}
 80024f6:	b083      	sub	sp, #12
 80024f8:	9001      	str	r0, [sp, #4]
    // TIMER_IF can be based on other counter the SysTick e.g. RTC
    TIMER_IF_DelayMs(Delay);
 80024fa:	9801      	ldr	r0, [sp, #4]
 80024fc:	f000 f916 	bl	800272c <TIMER_IF_DelayMs>
}
 8002500:	b003      	add	sp, #12
 8002502:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002508 <EnvSensors_Read>:
{
    float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
    float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
    float PRESSURE_Value = PRESSURE_DEFAULT_VAL;

    sensor_data->humidity    = HUMIDITY_Value;
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <EnvSensors_Read+0x18>)
 800250a:	6083      	str	r3, [r0, #8]
    sensor_data->temperature = TEMPERATURE_Value;
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <EnvSensors_Read+0x1c>)
 800250e:	6043      	str	r3, [r0, #4]
    sensor_data->pressure    = PRESSURE_Value;
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <EnvSensors_Read+0x20>)
 8002512:	6003      	str	r3, [r0, #0]

    sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <EnvSensors_Read+0x24>)
 8002516:	60c3      	str	r3, [r0, #12]
    sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <EnvSensors_Read+0x28>)
 800251a:	6103      	str	r3, [r0, #16]

    return 0;

}
 800251c:	2000      	movs	r0, #0
 800251e:	4770      	bx	lr
 8002520:	42480000 	.word	0x42480000
 8002524:	41900000 	.word	0x41900000
 8002528:	447a0000 	.word	0x447a0000
 800252c:	003e090d 	.word	0x003e090d
 8002530:	000503ab 	.word	0x000503ab

08002534 <EnvSensors_Init>:

int32_t  EnvSensors_Init(void)
{
    return 0;
}
 8002534:	2000      	movs	r0, #0
 8002536:	4770      	bx	lr

08002538 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002538:	4b02      	ldr	r3, [pc, #8]	; (8002544 <TIMER_IF_SetTimerContext+0xc>)
 800253a:	6898      	ldr	r0, [r3, #8]

// Get rtc timer Value in rtc tick
// Return val the rtc timer value (upcounting)
static inline uint32_t GetTimerTicks(void)
{
    return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 800253c:	43c0      	mvns	r0, r0
    RtcTimerContext = GetTimerTicks();
 800253e:	4b02      	ldr	r3, [pc, #8]	; (8002548 <TIMER_IF_SetTimerContext+0x10>)
 8002540:	6018      	str	r0, [r3, #0]
}
 8002542:	4770      	bx	lr
 8002544:	40002800 	.word	0x40002800
 8002548:	2000053c 	.word	0x2000053c

0800254c <TIMER_IF_GetTimerContext>:
}
 800254c:	4b01      	ldr	r3, [pc, #4]	; (8002554 <TIMER_IF_GetTimerContext+0x8>)
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	2000053c 	.word	0x2000053c

08002558 <TIMER_IF_GetTimerElapsedTime>:
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <TIMER_IF_GetTimerElapsedTime+0x10>)
 800255a:	689b      	ldr	r3, [r3, #8]
    return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 800255c:	43db      	mvns	r3, r3
    ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800255e:	4a03      	ldr	r2, [pc, #12]	; (800256c <TIMER_IF_GetTimerElapsedTime+0x14>)
 8002560:	6810      	ldr	r0, [r2, #0]
}
 8002562:	1a18      	subs	r0, r3, r0
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40002800 	.word	0x40002800
 800256c:	2000053c 	.word	0x2000053c

08002570 <TIMER_IF_GetTimerValue>:
    if (RTC_Initialized == true) {
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <TIMER_IF_GetTimerValue+0x14>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	b11b      	cbz	r3, 800257e <TIMER_IF_GetTimerValue+0xe>
 8002576:	4b04      	ldr	r3, [pc, #16]	; (8002588 <TIMER_IF_GetTimerValue+0x18>)
 8002578:	6898      	ldr	r0, [r3, #8]
    return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 800257a:	43c0      	mvns	r0, r0
 800257c:	4770      	bx	lr
    uint32_t ret = 0;
 800257e:	2000      	movs	r0, #0
}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000538 	.word	0x20000538
 8002588:	40002800 	.word	0x40002800

0800258c <TIMER_IF_GetMinimumTimeout>:
}
 800258c:	2003      	movs	r0, #3
 800258e:	4770      	bx	lr

08002590 <TIMER_IF_Convert_ms2Tick>:
{
 8002590:	b508      	push	{r3, lr}
 8002592:	4601      	mov	r1, r0
    ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002594:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002598:	2300      	movs	r3, #0
 800259a:	0280      	lsls	r0, r0, #10
 800259c:	0d89      	lsrs	r1, r1, #22
 800259e:	f7fe fadd 	bl	8000b5c <__aeabi_uldivmod>
}
 80025a2:	bd08      	pop	{r3, pc}

080025a4 <TIMER_IF_Convert_Tick2ms>:
{
 80025a4:	b410      	push	{r4}
    ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80025a6:	0142      	lsls	r2, r0, #5
 80025a8:	0ec3      	lsrs	r3, r0, #27
 80025aa:	1a12      	subs	r2, r2, r0
 80025ac:	f163 0300 	sbc.w	r3, r3, #0
 80025b0:	0099      	lsls	r1, r3, #2
 80025b2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80025b6:	0094      	lsls	r4, r2, #2
 80025b8:	1822      	adds	r2, r4, r0
 80025ba:	f141 0300 	adc.w	r3, r1, #0
 80025be:	00d8      	lsls	r0, r3, #3
 80025c0:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 80025c4:	00d1      	lsls	r1, r2, #3
 80025c6:	0a8a      	lsrs	r2, r1, #10
}
 80025c8:	ea42 5080 	orr.w	r0, r2, r0, lsl #22
 80025cc:	bc10      	pop	{r4}
 80025ce:	4770      	bx	lr

080025d0 <TIMER_IF_StopTimer>:
{
 80025d0:	b510      	push	{r4, lr}
    __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80025d2:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <TIMER_IF_StopTimer+0x20>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80025d8:	4c06      	ldr	r4, [pc, #24]	; (80025f4 <TIMER_IF_StopTimer+0x24>)
 80025da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025de:	4620      	mov	r0, r4
 80025e0:	f002 fbe6 	bl	8004db0 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295
 80025e8:	6323      	str	r3, [r4, #48]	; 0x30
}
 80025ea:	2000      	movs	r0, #0
 80025ec:	bd10      	pop	{r4, pc}
 80025ee:	bf00      	nop
 80025f0:	40002800 	.word	0x40002800
 80025f4:	200024a8 	.word	0x200024a8

080025f8 <TIMER_IF_BkUp_Write_MSBticks>:
{
 80025f8:	b508      	push	{r3, lr}
 80025fa:	4602      	mov	r2, r0
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80025fc:	2102      	movs	r1, #2
 80025fe:	4802      	ldr	r0, [pc, #8]	; (8002608 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8002600:	f002 fe17 	bl	8005232 <HAL_RTCEx_BKUPWrite>
}
 8002604:	bd08      	pop	{r3, pc}
 8002606:	bf00      	nop
 8002608:	200024a8 	.word	0x200024a8

0800260c <TIMER_IF_Init>:
{
 800260c:	b538      	push	{r3, r4, r5, lr}
    if (RTC_Initialized == false) {
 800260e:	4b0f      	ldr	r3, [pc, #60]	; (800264c <TIMER_IF_Init+0x40>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	b10b      	cbz	r3, 8002618 <TIMER_IF_Init+0xc>
}
 8002614:	2000      	movs	r0, #0
 8002616:	bd38      	pop	{r3, r4, r5, pc}
        hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002618:	4c0d      	ldr	r4, [pc, #52]	; (8002650 <TIMER_IF_Init+0x44>)
 800261a:	f04f 35ff 	mov.w	r5, #4294967295
 800261e:	6325      	str	r5, [r4, #48]	; 0x30
        MX_RTC_Init();
 8002620:	f7ff fc0a 	bl	8001e38 <MX_RTC_Init>
        TIMER_IF_StopTimer();
 8002624:	f7ff ffd4 	bl	80025d0 <TIMER_IF_StopTimer>
        HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800262c:	4620      	mov	r0, r4
 800262e:	f002 fbbf 	bl	8004db0 <HAL_RTC_DeactivateAlarm>
        hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002632:	6325      	str	r5, [r4, #48]	; 0x30
        HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002634:	4620      	mov	r0, r4
 8002636:	f002 fd9b 	bl	8005170 <HAL_RTCEx_EnableBypassShadow>
        TIMER_IF_BkUp_Write_MSBticks(0);
 800263a:	2000      	movs	r0, #0
 800263c:	f7ff ffdc 	bl	80025f8 <TIMER_IF_BkUp_Write_MSBticks>
        TIMER_IF_SetTimerContext();
 8002640:	f7ff ff7a 	bl	8002538 <TIMER_IF_SetTimerContext>
        RTC_Initialized = true;
 8002644:	4b01      	ldr	r3, [pc, #4]	; (800264c <TIMER_IF_Init+0x40>)
 8002646:	2201      	movs	r2, #1
 8002648:	701a      	strb	r2, [r3, #0]
 800264a:	e7e3      	b.n	8002614 <TIMER_IF_Init+0x8>
 800264c:	20000538 	.word	0x20000538
 8002650:	200024a8 	.word	0x200024a8

08002654 <TIMER_IF_BkUp_Write_Seconds>:
{
 8002654:	b508      	push	{r3, lr}
 8002656:	4602      	mov	r2, r0
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002658:	2100      	movs	r1, #0
 800265a:	4802      	ldr	r0, [pc, #8]	; (8002664 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 800265c:	f002 fde9 	bl	8005232 <HAL_RTCEx_BKUPWrite>
}
 8002660:	bd08      	pop	{r3, pc}
 8002662:	bf00      	nop
 8002664:	200024a8 	.word	0x200024a8

08002668 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8002668:	b508      	push	{r3, lr}
 800266a:	4602      	mov	r2, r0
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 800266c:	2101      	movs	r1, #1
 800266e:	4802      	ldr	r0, [pc, #8]	; (8002678 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8002670:	f002 fddf 	bl	8005232 <HAL_RTCEx_BKUPWrite>
}
 8002674:	bd08      	pop	{r3, pc}
 8002676:	bf00      	nop
 8002678:	200024a8 	.word	0x200024a8

0800267c <TIMER_IF_StartTimer>:
{
 800267c:	b510      	push	{r4, lr}
 800267e:	b08c      	sub	sp, #48	; 0x30
 8002680:	4604      	mov	r4, r0
    RTC_AlarmTypeDef sAlarm = {0};
 8002682:	222c      	movs	r2, #44	; 0x2c
 8002684:	2100      	movs	r1, #0
 8002686:	a801      	add	r0, sp, #4
 8002688:	f014 fef2 	bl	8017470 <memset>
    TIMER_IF_StopTimer();
 800268c:	f7ff ffa0 	bl	80025d0 <TIMER_IF_StopTimer>
    timeout += RtcTimerContext;
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <TIMER_IF_StartTimer+0x48>)
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	4404      	add	r4, r0
    sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002696:	2300      	movs	r3, #0
 8002698:	9308      	str	r3, [sp, #32]
    sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800269a:	43e4      	mvns	r4, r4
 800269c:	9402      	str	r4, [sp, #8]
    sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800269e:	9306      	str	r3, [sp, #24]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80026a0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80026a4:	9307      	str	r3, [sp, #28]
    sAlarm.Alarm = RTC_ALARM_A;
 80026a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026aa:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 80026ac:	2201      	movs	r2, #1
 80026ae:	a901      	add	r1, sp, #4
 80026b0:	4805      	ldr	r0, [pc, #20]	; (80026c8 <TIMER_IF_StartTimer+0x4c>)
 80026b2:	f002 fca1 	bl	8004ff8 <HAL_RTC_SetAlarm_IT>
 80026b6:	b910      	cbnz	r0, 80026be <TIMER_IF_StartTimer+0x42>
}
 80026b8:	2000      	movs	r0, #0
 80026ba:	b00c      	add	sp, #48	; 0x30
 80026bc:	bd10      	pop	{r4, pc}
        Error_Handler();
 80026be:	f7ff fe71 	bl	80023a4 <Error_Handler>
 80026c2:	e7f9      	b.n	80026b8 <TIMER_IF_StartTimer+0x3c>
 80026c4:	2000053c 	.word	0x2000053c
 80026c8:	200024a8 	.word	0x200024a8

080026cc <TIMER_IF_BkUp_Read_MSBticks>:
{
 80026cc:	b508      	push	{r3, lr}
    MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80026ce:	2102      	movs	r1, #2
 80026d0:	4801      	ldr	r0, [pc, #4]	; (80026d8 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 80026d2:	f002 fdb5 	bl	8005240 <HAL_RTCEx_BKUPRead>
}
 80026d6:	bd08      	pop	{r3, pc}
 80026d8:	200024a8 	.word	0x200024a8

080026dc <TIMER_IF_GetTime>:
{
 80026dc:	b538      	push	{r3, r4, r5, lr}
 80026de:	4605      	mov	r5, r0
 80026e0:	4b09      	ldr	r3, [pc, #36]	; (8002708 <TIMER_IF_GetTime+0x2c>)
 80026e2:	689c      	ldr	r4, [r3, #8]
    return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80026e4:	43e4      	mvns	r4, r4
    uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80026e6:	f7ff fff1 	bl	80026cc <TIMER_IF_BkUp_Read_MSBticks>
    ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80026ea:	2200      	movs	r2, #0
 80026ec:	1912      	adds	r2, r2, r4
 80026ee:	f140 0300 	adc.w	r3, r0, #0
    seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80026f2:	0a94      	lsrs	r4, r2, #10
 80026f4:	ea44 5483 	orr.w	r4, r4, r3, lsl #22
    *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80026f8:	f3c2 0009 	ubfx	r0, r2, #0, #10
 80026fc:	f7ff ff52 	bl	80025a4 <TIMER_IF_Convert_Tick2ms>
 8002700:	8028      	strh	r0, [r5, #0]
}
 8002702:	4620      	mov	r0, r4
 8002704:	bd38      	pop	{r3, r4, r5, pc}
 8002706:	bf00      	nop
 8002708:	40002800 	.word	0x40002800

0800270c <TIMER_IF_BkUp_Read_Seconds>:
{
 800270c:	b508      	push	{r3, lr}
    ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800270e:	2100      	movs	r1, #0
 8002710:	4801      	ldr	r0, [pc, #4]	; (8002718 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8002712:	f002 fd95 	bl	8005240 <HAL_RTCEx_BKUPRead>
}
 8002716:	bd08      	pop	{r3, pc}
 8002718:	200024a8 	.word	0x200024a8

0800271c <TIMER_IF_BkUp_Read_SubSeconds>:
{
 800271c:	b508      	push	{r3, lr}
    ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800271e:	2101      	movs	r1, #1
 8002720:	4801      	ldr	r0, [pc, #4]	; (8002728 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8002722:	f002 fd8d 	bl	8005240 <HAL_RTCEx_BKUPRead>
}
 8002726:	bd08      	pop	{r3, pc}
 8002728:	200024a8 	.word	0x200024a8

0800272c <TIMER_IF_DelayMs>:
{
 800272c:	b508      	push	{r3, lr}
    uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800272e:	f7ff ff2f 	bl	8002590 <TIMER_IF_Convert_ms2Tick>
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <TIMER_IF_DelayMs+0x20>)
 8002734:	689a      	ldr	r2, [r3, #8]
    return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8002736:	43d2      	mvns	r2, r2
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <TIMER_IF_DelayMs+0x20>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	43db      	mvns	r3, r3
    while (((GetTimerTicks() - timeout)) < delayTicks) {
 800273e:	1a9b      	subs	r3, r3, r2
 8002740:	4283      	cmp	r3, r0
 8002742:	d201      	bcs.n	8002748 <TIMER_IF_DelayMs+0x1c>
        __NOP();
 8002744:	bf00      	nop
 8002746:	e7f7      	b.n	8002738 <TIMER_IF_DelayMs+0xc>
}
 8002748:	bd08      	pop	{r3, pc}
 800274a:	bf00      	nop
 800274c:	40002800 	.word	0x40002800

08002750 <HAL_RTC_AlarmAEventCallback>:
{
 8002750:	b508      	push	{r3, lr}
    UTIL_TIMER_IRQ_MAP_PROCESS();
 8002752:	f014 fcb7 	bl	80170c4 <UTIL_TIMER_IRQ_Handler>
}
 8002756:	bd08      	pop	{r3, pc}

08002758 <HAL_RTCEx_SSRUEventCallback>:
{
 8002758:	b508      	push	{r3, lr}
    uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800275a:	f7ff ffb7 	bl	80026cc <TIMER_IF_BkUp_Read_MSBticks>
    TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 800275e:	3001      	adds	r0, #1
 8002760:	f7ff ff4a 	bl	80025f8 <TIMER_IF_BkUp_Write_MSBticks>
}
 8002764:	bd08      	pop	{r3, pc}

08002766 <vcom_DeInit>:
    return UTIL_ADV_TRACE_OK;
}

// DeInit virtual comms
UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002766:	b508      	push	{r3, lr}
    MX_DBG_Init();
 8002768:	f7ff f8d4 	bl	8001914 <MX_DBG_Init>
    return UTIL_ADV_TRACE_OK;
}
 800276c:	2000      	movs	r0, #0
 800276e:	bd08      	pop	{r3, pc}

08002770 <vcom_Init>:
{
 8002770:	b510      	push	{r4, lr}
 8002772:	4604      	mov	r4, r0
    MX_DBG_Init();
 8002774:	f7ff f8ce 	bl	8001914 <MX_DBG_Init>
    MX_DBG_TxCpltCallback(cb);
 8002778:	4620      	mov	r0, r4
 800277a:	f7ff f81d 	bl	80017b8 <MX_DBG_TxCpltCallback>
}
 800277e:	2000      	movs	r0, #0
 8002780:	bd10      	pop	{r4, pc}

08002782 <vcom_Trace_DMA>:
    MX_DBG((const char *)p_data, (size_t)size, 0);
}

// Trace with DMA
UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002782:	b508      	push	{r3, lr}
    MX_DBG((const char *)p_data, (size_t)size, 0);
 8002784:	2200      	movs	r2, #0
 8002786:	f7ff f82d 	bl	80017e4 <MX_DBG>
    return UTIL_ADV_TRACE_OK;
}
 800278a:	2000      	movs	r0, #0
 800278c:	bd08      	pop	{r3, pc}

0800278e <vcom_ReceiveInit>:

// Receive
UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 800278e:	b508      	push	{r3, lr}
    MX_DBG_RxCallback(RxCb);
 8002790:	f7ff f81a 	bl	80017c8 <MX_DBG_RxCallback>
    return UTIL_ADV_TRACE_OK;
}
 8002794:	2000      	movs	r0, #0
 8002796:	bd08      	pop	{r3, pc}

08002798 <tiny_snprintf_like>:
    UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
}

// UTIL_ADV_TRACE_VSNPRINTF wrapper
static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002798:	b40c      	push	{r2, r3}
 800279a:	b500      	push	{lr}
 800279c:	b083      	sub	sp, #12
 800279e:	ab04      	add	r3, sp, #16
 80027a0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list vaArgs;
    va_start(vaArgs, strFormat);
 80027a4:	9301      	str	r3, [sp, #4]
    UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80027a6:	f014 fd6b 	bl	8017280 <tiny_vsnprintf_like>
    va_end(vaArgs);
}
 80027aa:	b003      	add	sp, #12
 80027ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80027b0:	b002      	add	sp, #8
 80027b2:	4770      	bx	lr

080027b4 <TimestampNow>:
{
 80027b4:	b530      	push	{r4, r5, lr}
 80027b6:	b085      	sub	sp, #20
 80027b8:	4604      	mov	r4, r0
 80027ba:	460d      	mov	r5, r1
    SysTime_t curtime = SysTimeGet();
 80027bc:	a802      	add	r0, sp, #8
 80027be:	f014 fad5 	bl	8016d6c <SysTimeGet>
    tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80027c2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	9b02      	ldr	r3, [sp, #8]
 80027ca:	4a05      	ldr	r2, [pc, #20]	; (80027e0 <TimestampNow+0x2c>)
 80027cc:	2110      	movs	r1, #16
 80027ce:	4620      	mov	r0, r4
 80027d0:	f7ff ffe2 	bl	8002798 <tiny_snprintf_like>
    *size = strlen((char *)buff);
 80027d4:	4620      	mov	r0, r4
 80027d6:	f7fd fccf 	bl	8000178 <strlen>
 80027da:	8028      	strh	r0, [r5, #0]
}
 80027dc:	b005      	add	sp, #20
 80027de:	bd30      	pop	{r4, r5, pc}
 80027e0:	08017994 	.word	0x08017994

080027e4 <MX_UTIL_Init>:
{
 80027e4:	b508      	push	{r3, lr}
    UTIL_TIMER_Init();
 80027e6:	f014 fb41 	bl	8016e6c <UTIL_TIMER_Init>
    UTIL_ADV_TRACE_Init();
 80027ea:	f013 fffb 	bl	80167e4 <UTIL_ADV_TRACE_Init>
    UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80027ee:	4806      	ldr	r0, [pc, #24]	; (8002808 <MX_UTIL_Init+0x24>)
 80027f0:	f014 f812 	bl	8016818 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
    UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80027f4:	2002      	movs	r0, #2
 80027f6:	f014 f815 	bl	8016824 <UTIL_ADV_TRACE_SetVerboseLevel>
    UTIL_LPM_Init();
 80027fa:	f014 f921 	bl	8016a40 <UTIL_LPM_Init>
    UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80027fe:	2101      	movs	r1, #1
 8002800:	4608      	mov	r0, r1
 8002802:	f014 f93d 	bl	8016a80 <UTIL_LPM_SetOffMode>
}
 8002806:	bd08      	pop	{r3, pc}
 8002808:	080027b5 	.word	0x080027b5

0800280c <UTIL_SEQ_Idle>:
{
 800280c:	b508      	push	{r3, lr}
    UTIL_LPM_EnterLowPower();
 800280e:	f014 f94d 	bl	8016aac <UTIL_LPM_EnterLowPower>
}
 8002812:	bd08      	pop	{r3, pc}

08002814 <UTIL_ADV_TRACE_PreSendHook>:
{
 8002814:	b508      	push	{r3, lr}
    UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002816:	2101      	movs	r1, #1
 8002818:	2002      	movs	r0, #2
 800281a:	f014 f91b 	bl	8016a54 <UTIL_LPM_SetStopMode>
}
 800281e:	bd08      	pop	{r3, pc}

08002820 <UTIL_ADV_TRACE_PostSendHook>:
{
 8002820:	b508      	push	{r3, lr}
    UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002822:	2100      	movs	r1, #0
 8002824:	2002      	movs	r0, #2
 8002826:	f014 f915 	bl	8016a54 <UTIL_LPM_SetStopMode>
}
 800282a:	bd08      	pop	{r3, pc}

0800282c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800282c:	480d      	ldr	r0, [pc, #52]	; (8002864 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800282e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002830:	f000 f825 	bl	800287e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002834:	480c      	ldr	r0, [pc, #48]	; (8002868 <LoopForever+0x6>)
  ldr r1, =_edata
 8002836:	490d      	ldr	r1, [pc, #52]	; (800286c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002838:	4a0d      	ldr	r2, [pc, #52]	; (8002870 <LoopForever+0xe>)
  movs r3, #0
 800283a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800283c:	e002      	b.n	8002844 <LoopCopyDataInit>

0800283e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800283e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002842:	3304      	adds	r3, #4

08002844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002848:	d3f9      	bcc.n	800283e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800284a:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <LoopForever+0x12>)
  ldr r4, =_ebss
 800284c:	4c0a      	ldr	r4, [pc, #40]	; (8002878 <LoopForever+0x16>)
  movs r3, #0
 800284e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002850:	e001      	b.n	8002856 <LoopFillZerobss>

08002852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002854:	3204      	adds	r2, #4

08002856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002858:	d3fb      	bcc.n	8002852 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800285a:	f014 fdd7 	bl	801740c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800285e:	f7ff f95b 	bl	8001b18 <main>

08002862 <LoopForever>:

LoopForever:
    b LoopForever
 8002862:	e7fe      	b.n	8002862 <LoopForever>
  ldr   r0, =_estack
 8002864:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800286c:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8002870:	080185ac 	.word	0x080185ac
  ldr r2, =_sbss
 8002874:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002878:	20002588 	.word	0x20002588

0800287c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800287c:	e7fe      	b.n	800287c <ADC_IRQHandler>

0800287e <SystemInit>:

    // FPU settings
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800287e:	4770      	bx	lr

08002880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002880:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002882:	2003      	movs	r0, #3
 8002884:	f000 fce6 	bl	8003254 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002888:	f001 fcb0 	bl	80041ec <HAL_RCC_GetHCLKFreq>
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <HAL_Init+0x28>)
 800288e:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002890:	200f      	movs	r0, #15
 8002892:	f7ff fe29 	bl	80024e8 <HAL_InitTick>
 8002896:	b110      	cbz	r0, 800289e <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002898:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 800289a:	4620      	mov	r0, r4
 800289c:	bd10      	pop	{r4, pc}
 800289e:	4604      	mov	r4, r0
    HAL_MspInit();
 80028a0:	f7ff fb6a 	bl	8001f78 <HAL_MspInit>
 80028a4:	e7f9      	b.n	800289a <HAL_Init+0x1a>
 80028a6:	bf00      	nop
 80028a8:	20000050 	.word	0x20000050

080028ac <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80028ac:	4a02      	ldr	r2, [pc, #8]	; (80028b8 <HAL_SuspendTick+0xc>)
 80028ae:	6813      	ldr	r3, [r2, #0]
 80028b0:	f023 0302 	bic.w	r3, r3, #2
 80028b4:	6013      	str	r3, [r2, #0]
}
 80028b6:	4770      	bx	lr
 80028b8:	e000e010 	.word	0xe000e010

080028bc <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80028bc:	4a02      	ldr	r2, [pc, #8]	; (80028c8 <HAL_ResumeTick+0xc>)
 80028be:	6813      	ldr	r3, [r2, #0]
 80028c0:	f043 0302 	orr.w	r3, r3, #2
 80028c4:	6013      	str	r3, [r2, #0]
}
 80028c6:	4770      	bx	lr
 80028c8:	e000e010 	.word	0xe000e010

080028cc <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 80028cc:	4b01      	ldr	r3, [pc, #4]	; (80028d4 <HAL_GetUIDw0+0x8>)
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	1fff7590 	.word	0x1fff7590

080028d8 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 80028d8:	4b01      	ldr	r3, [pc, #4]	; (80028e0 <HAL_GetUIDw1+0x8>)
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	1fff7594 	.word	0x1fff7594

080028e4 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 80028e4:	4b01      	ldr	r3, [pc, #4]	; (80028ec <HAL_GetUIDw2+0x8>)
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	1fff7598 	.word	0x1fff7598

080028f0 <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80028f0:	4a02      	ldr	r2, [pc, #8]	; (80028fc <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 80028f2:	6853      	ldr	r3, [r2, #4]
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 80028fa:	4770      	bx	lr
 80028fc:	e0042000 	.word	0xe0042000

08002900 <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002900:	4a02      	ldr	r2, [pc, #8]	; (800290c <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8002902:	6853      	ldr	r3, [r2, #4]
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 800290a:	4770      	bx	lr
 800290c:	e0042000 	.word	0xe0042000

08002910 <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002910:	4a02      	ldr	r2, [pc, #8]	; (800291c <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8002912:	6853      	ldr	r3, [r2, #4]
 8002914:	f043 0302 	orr.w	r3, r3, #2
 8002918:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 800291a:	4770      	bx	lr
 800291c:	e0042000 	.word	0xe0042000

08002920 <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002920:	4a02      	ldr	r2, [pc, #8]	; (800292c <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8002922:	6853      	ldr	r3, [r2, #4]
 8002924:	f023 0302 	bic.w	r3, r3, #2
 8002928:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 800292a:	4770      	bx	lr
 800292c:	e0042000 	.word	0xe0042000

08002930 <HAL_DBGMCU_EnableDBGStandbyMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002930:	4a02      	ldr	r2, [pc, #8]	; (800293c <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 8002932:	6853      	ldr	r3, [r2, #4]
 8002934:	f043 0304 	orr.w	r3, r3, #4
 8002938:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 800293a:	4770      	bx	lr
 800293c:	e0042000 	.word	0xe0042000

08002940 <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002940:	4a02      	ldr	r2, [pc, #8]	; (800294c <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8002942:	6853      	ldr	r3, [r2, #4]
 8002944:	f023 0304 	bic.w	r3, r3, #4
 8002948:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 800294a:	4770      	bx	lr
 800294c:	e0042000 	.word	0xe0042000

08002950 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002952:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002954:	2300      	movs	r3, #0
 8002956:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002958:	2800      	cmp	r0, #0
 800295a:	f000 8121 	beq.w	8002ba0 <HAL_ADC_Init+0x250>
 800295e:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002960:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002962:	b1bb      	cbz	r3, 8002994 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002964:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002966:	6893      	ldr	r3, [r2, #8]
 8002968:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800296c:	d11f      	bne.n	80029ae <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 800296e:	6893      	ldr	r3, [r2, #8]
 8002970:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002974:	f023 0317 	bic.w	r3, r3, #23
 8002978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297c:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800297e:	4b89      	ldr	r3, [pc, #548]	; (8002ba4 <HAL_ADC_Init+0x254>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	099b      	lsrs	r3, r3, #6
 8002984:	4a88      	ldr	r2, [pc, #544]	; (8002ba8 <HAL_ADC_Init+0x258>)
 8002986:	fba2 2303 	umull	r2, r3, r2, r3
 800298a:	099b      	lsrs	r3, r3, #6
 800298c:	3301      	adds	r3, #1
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002992:	e009      	b.n	80029a8 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8002994:	f7fe fe46 	bl	8001624 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002998:	2300      	movs	r3, #0
 800299a:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800299c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80029a0:	e7e0      	b.n	8002964 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 80029a2:	9b01      	ldr	r3, [sp, #4]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80029a8:	9b01      	ldr	r3, [sp, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f9      	bne.n	80029a2 <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029ae:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029b0:	6893      	ldr	r3, [r2, #8]
 80029b2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80029b6:	d109      	bne.n	80029cc <HAL_ADC_Init+0x7c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80029ba:	f043 0310 	orr.w	r3, r3, #16
 80029be:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80029c8:	2001      	movs	r0, #1
 80029ca:	e000      	b.n	80029ce <HAL_ADC_Init+0x7e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029cc:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029ce:	6893      	ldr	r3, [r2, #8]
 80029d0:	f013 0304 	ands.w	r3, r3, #4
 80029d4:	d000      	beq.n	80029d8 <HAL_ADC_Init+0x88>
 80029d6:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029d8:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80029da:	f011 0f10 	tst.w	r1, #16
 80029de:	f040 80d8 	bne.w	8002b92 <HAL_ADC_Init+0x242>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f040 80d5 	bne.w	8002b92 <HAL_ADC_Init+0x242>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029e8:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80029ea:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80029ee:	f041 0102 	orr.w	r1, r1, #2
 80029f2:	65a1      	str	r1, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029f4:	6891      	ldr	r1, [r2, #8]
 80029f6:	f011 0f01 	tst.w	r1, #1
 80029fa:	d131      	bne.n	8002a60 <HAL_ADC_Init+0x110>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80029fc:	68d1      	ldr	r1, [r2, #12]
 80029fe:	f021 0118 	bic.w	r1, r1, #24
 8002a02:	68a5      	ldr	r5, [r4, #8]
 8002a04:	4329      	orrs	r1, r5
 8002a06:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002a08:	6862      	ldr	r2, [r4, #4]
 8002a0a:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002a0e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002a10:	4315      	orrs	r5, r2
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a12:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8002a16:	2901      	cmp	r1, #1
 8002a18:	d018      	beq.n	8002a4c <HAL_ADC_Init+0xfc>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002a1a:	6821      	ldr	r1, [r4, #0]
 8002a1c:	690e      	ldr	r6, [r1, #16]
 8002a1e:	4a63      	ldr	r2, [pc, #396]	; (8002bac <HAL_ADC_Init+0x25c>)
 8002a20:	4032      	ands	r2, r6
 8002a22:	432a      	orrs	r2, r5
 8002a24:	610a      	str	r2, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002a26:	6862      	ldr	r2, [r4, #4]
 8002a28:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 8002a2c:	d019      	beq.n	8002a62 <HAL_ADC_Init+0x112>
 8002a2e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002a32:	d016      	beq.n	8002a62 <HAL_ADC_Init+0x112>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002a34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002a38:	d013      	beq.n	8002a62 <HAL_ADC_Init+0x112>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002a3a:	4e5d      	ldr	r6, [pc, #372]	; (8002bb0 <HAL_ADC_Init+0x260>)
 8002a3c:	6831      	ldr	r1, [r6, #0]
 8002a3e:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 8002a42:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 8002a46:	430a      	orrs	r2, r1
 8002a48:	6032      	str	r2, [r6, #0]
 8002a4a:	e00a      	b.n	8002a62 <HAL_ADC_Init+0x112>
                     hadc->Init.Oversampling.Ratio         |
 8002a4c:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002a4e:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.RightBitShift |
 8002a50:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002a52:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.TriggeredMode
 8002a54:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002a56:	430a      	orrs	r2, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002a58:	4315      	orrs	r5, r2
 8002a5a:	f045 0501 	orr.w	r5, r5, #1
 8002a5e:	e7dc      	b.n	8002a1a <HAL_ADC_Init+0xca>
  uint32_t tmpCFGR2 = 0UL;
 8002a60:	461d      	mov	r5, r3
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002a62:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002a64:	7e62      	ldrb	r2, [r4, #25]
 8002a66:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002a68:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002a6c:	7ea6      	ldrb	r6, [r4, #26]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002a6e:	ea42 3246 	orr.w	r2, r2, r6, lsl #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002a72:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002a74:	b109      	cbz	r1, 8002a7a <HAL_ADC_Init+0x12a>
 8002a76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002a7a:	430a      	orrs	r2, r1
                 hadc->Init.DataAlign                                           |
 8002a7c:	68e1      	ldr	r1, [r4, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002a7e:	430a      	orrs	r2, r1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002a80:	6921      	ldr	r1, [r4, #16]
 8002a82:	2900      	cmp	r1, #0
 8002a84:	db47      	blt.n	8002b16 <HAL_ADC_Init+0x1c6>
 8002a86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 8002a8a:	430a      	orrs	r2, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a8c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002a90:	ea42 0241 	orr.w	r2, r2, r1, lsl #1

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a94:	f894 1020 	ldrb.w	r1, [r4, #32]
 8002a98:	2901      	cmp	r1, #1
 8002a9a:	d03f      	beq.n	8002b1c <HAL_ADC_Init+0x1cc>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002a9e:	b121      	cbz	r1, 8002aaa <HAL_ADC_Init+0x15a>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002aa0:	f401 71e0 	and.w	r1, r1, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 8002aa4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002aa6:	4331      	orrs	r1, r6
 8002aa8:	430a      	orrs	r2, r1
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002aaa:	6826      	ldr	r6, [r4, #0]
 8002aac:	68f1      	ldr	r1, [r6, #12]
 8002aae:	f421 31fe 	bic.w	r1, r1, #130048	; 0x1fc00
 8002ab2:	f421 71f3 	bic.w	r1, r1, #486	; 0x1e6
 8002ab6:	4311      	orrs	r1, r2
 8002ab8:	60f1      	str	r1, [r6, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8002aba:	6826      	ldr	r6, [r4, #0]
 8002abc:	6937      	ldr	r7, [r6, #16]
 8002abe:	493d      	ldr	r1, [pc, #244]	; (8002bb4 <HAL_ADC_Init+0x264>)
 8002ac0:	4039      	ands	r1, r7
 8002ac2:	430d      	orrs	r5, r1
 8002ac4:	6135      	str	r5, [r6, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002ac6:	6826      	ldr	r6, [r4, #0]
 8002ac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 8002aca:	6975      	ldr	r5, [r6, #20]
 8002acc:	f025 0507 	bic.w	r5, r5, #7
 8002ad0:	4329      	orrs	r1, r5
 8002ad2:	6171      	str	r1, [r6, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002ad4:	6825      	ldr	r5, [r4, #0]
 8002ad6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002ad8:	6969      	ldr	r1, [r5, #20]
 8002ada:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8002ade:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
 8002ae2:	6169      	str	r1, [r5, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002ae4:	6921      	ldr	r1, [r4, #16]
 8002ae6:	bb31      	cbnz	r1, 8002b36 <HAL_ADC_Init+0x1e6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002ae8:	6821      	ldr	r1, [r4, #0]
 8002aea:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002aec:	f063 030f 	orn	r3, r3, #15
 8002af0:	628b      	str	r3, [r1, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002af2:	6823      	ldr	r3, [r4, #0]
 8002af4:	68d9      	ldr	r1, [r3, #12]
 8002af6:	4b30      	ldr	r3, [pc, #192]	; (8002bb8 <HAL_ADC_Init+0x268>)
 8002af8:	400b      	ands	r3, r1
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d040      	beq.n	8002b80 <HAL_ADC_Init+0x230>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002afe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b00:	f023 0312 	bic.w	r3, r3, #18
 8002b04:	f043 0310 	orr.w	r3, r3, #16
 8002b08:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b0a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002b12:	2001      	movs	r0, #1
 8002b14:	e042      	b.n	8002b9c <HAL_ADC_Init+0x24c>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002b16:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002b1a:	e7b6      	b.n	8002a8a <HAL_ADC_Init+0x13a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b1c:	b916      	cbnz	r6, 8002b24 <HAL_ADC_Init+0x1d4>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002b1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b22:	e7bb      	b.n	8002a9c <HAL_ADC_Init+0x14c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b24:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002b26:	f041 0120 	orr.w	r1, r1, #32
 8002b2a:	65a1      	str	r1, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b2c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002b2e:	f041 0101 	orr.w	r1, r1, #1
 8002b32:	65e1      	str	r1, [r4, #92]	; 0x5c
 8002b34:	e7b2      	b.n	8002a9c <HAL_ADC_Init+0x14c>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b36:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002b3a:	d1da      	bne.n	8002af2 <HAL_ADC_Init+0x1a2>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002b3c:	2b07      	cmp	r3, #7
 8002b3e:	d808      	bhi.n	8002b52 <HAL_ADC_Init+0x202>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002b40:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002b42:	009d      	lsls	r5, r3, #2
 8002b44:	40e9      	lsrs	r1, r5
 8002b46:	f001 010f 	and.w	r1, r1, #15
 8002b4a:	290f      	cmp	r1, #15
 8002b4c:	d001      	beq.n	8002b52 <HAL_ADC_Init+0x202>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002b4e:	3301      	adds	r3, #1
 8002b50:	e7f4      	b.n	8002b3c <HAL_ADC_Init+0x1ec>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d00e      	beq.n	8002b74 <HAL_ADC_Init+0x224>
        MODIFY_REG(hadc->Instance->CHSELR,
 8002b56:	6825      	ldr	r5, [r4, #0]
 8002b58:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002b5a:	69e3      	ldr	r3, [r4, #28]
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	f003 031c 	and.w	r3, r3, #28
 8002b64:	f06f 010f 	mvn.w	r1, #15
 8002b68:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002b6e:	430b      	orrs	r3, r1
 8002b70:	62ab      	str	r3, [r5, #40]	; 0x28
 8002b72:	e7be      	b.n	8002af2 <HAL_ADC_Init+0x1a2>
        SET_BIT(hadc->Instance->CHSELR,
 8002b74:	6821      	ldr	r1, [r4, #0]
 8002b76:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002b78:	f063 030f 	orn	r3, r3, #15
 8002b7c:	628b      	str	r3, [r1, #40]	; 0x28
 8002b7e:	e7b8      	b.n	8002af2 <HAL_ADC_Init+0x1a2>
      ADC_CLEAR_ERRORCODE(hadc);
 8002b80:	2300      	movs	r3, #0
 8002b82:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8002b84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b86:	f023 0303 	bic.w	r3, r3, #3
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	65a3      	str	r3, [r4, #88]	; 0x58
 8002b90:	e004      	b.n	8002b9c <HAL_ADC_Init+0x24c>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b94:	f043 0310 	orr.w	r3, r3, #16
 8002b98:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b9a:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8002b9c:	b003      	add	sp, #12
 8002b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	e7fb      	b.n	8002b9c <HAL_ADC_Init+0x24c>
 8002ba4:	20000050 	.word	0x20000050
 8002ba8:	053e2d63 	.word	0x053e2d63
 8002bac:	1ffffc02 	.word	0x1ffffc02
 8002bb0:	40012708 	.word	0x40012708
 8002bb4:	dffffc02 	.word	0xdffffc02
 8002bb8:	833fffe7 	.word	0x833fffe7

08002bbc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002bc2:	6946      	ldr	r6, [r0, #20]
 8002bc4:	2e08      	cmp	r6, #8
 8002bc6:	d005      	beq.n	8002bd4 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002bc8:	6803      	ldr	r3, [r0, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f013 0f01 	tst.w	r3, #1
 8002bd0:	d11e      	bne.n	8002c10 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002bd2:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002bd4:	f7ff fc8a 	bl	80024ec <HAL_GetTick>
 8002bd8:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002bda:	6823      	ldr	r3, [r4, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	4232      	tst	r2, r6
 8002be0:	d11c      	bne.n	8002c1c <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002be2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002be6:	d0f8      	beq.n	8002bda <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002be8:	f7ff fc80 	bl	80024ec <HAL_GetTick>
 8002bec:	1bc3      	subs	r3, r0, r7
 8002bee:	42ab      	cmp	r3, r5
 8002bf0:	d801      	bhi.n	8002bf6 <HAL_ADC_PollForConversion+0x3a>
 8002bf2:	2d00      	cmp	r5, #0
 8002bf4:	d1f1      	bne.n	8002bda <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002bf6:	6823      	ldr	r3, [r4, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4233      	tst	r3, r6
 8002bfc:	d1ed      	bne.n	8002bda <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002bfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c00:	f043 0304 	orr.w	r3, r3, #4
 8002c04:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002c06:	2300      	movs	r3, #0
 8002c08:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 8002c0c:	2003      	movs	r0, #3
 8002c0e:	e028      	b.n	8002c62 <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c10:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002c12:	f043 0320 	orr.w	r3, r3, #32
 8002c16:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8002c18:	2001      	movs	r0, #1
 8002c1a:	e022      	b.n	8002c62 <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c1c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c22:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002c2a:	d115      	bne.n	8002c58 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002c2c:	7ea2      	ldrb	r2, [r4, #26]
 8002c2e:	b99a      	cbnz	r2, 8002c58 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	f012 0f08 	tst.w	r2, #8
 8002c36:	d00f      	beq.n	8002c58 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	f012 0f04 	tst.w	r2, #4
 8002c3e:	d111      	bne.n	8002c64 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	f022 020c 	bic.w	r2, r2, #12
 8002c46:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002c48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c4e:	f023 0301 	bic.w	r3, r3, #1
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002c58:	7e20      	ldrb	r0, [r4, #24]
 8002c5a:	b960      	cbnz	r0, 8002c76 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c5c:	6823      	ldr	r3, [r4, #0]
 8002c5e:	220c      	movs	r2, #12
 8002c60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c66:	f043 0320 	orr.w	r3, r3, #32
 8002c6a:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c6c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002c74:	e7f0      	b.n	8002c58 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8002c76:	2000      	movs	r0, #0
 8002c78:	e7f3      	b.n	8002c62 <HAL_ADC_PollForConversion+0xa6>

08002c7a <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002c7a:	6803      	ldr	r3, [r0, #0]
 8002c7c:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8002c7e:	4770      	bx	lr

08002c80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002c80:	b470      	push	{r4, r5, r6}
 8002c82:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c84:	2200      	movs	r2, #0
 8002c86:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c88:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002c8a:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8002c8e:	2a01      	cmp	r2, #1
 8002c90:	f000 80ee 	beq.w	8002e70 <HAL_ADC_ConfigChannel+0x1f0>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2201      	movs	r2, #1
 8002c98:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c9c:	6802      	ldr	r2, [r0, #0]
 8002c9e:	6890      	ldr	r0, [r2, #8]
 8002ca0:	f010 0f04 	tst.w	r0, #4
 8002ca4:	d00a      	beq.n	8002cbc <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ca8:	f042 0220 	orr.w	r2, r2, #32
 8002cac:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002cae:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 8002cb6:	b003      	add	sp, #12
 8002cb8:	bc70      	pop	{r4, r5, r6}
 8002cba:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8002cbc:	6848      	ldr	r0, [r1, #4]
 8002cbe:	2802      	cmp	r0, #2
 8002cc0:	f000 8097 	beq.w	8002df2 <HAL_ADC_ConfigChannel+0x172>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002cc4:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002cc8:	d029      	beq.n	8002d1e <HAL_ADC_ConfigChannel+0x9e>
 8002cca:	4d6a      	ldr	r5, [pc, #424]	; (8002e74 <HAL_ADC_ConfigChannel+0x1f4>)
 8002ccc:	42ac      	cmp	r4, r5
 8002cce:	d026      	beq.n	8002d1e <HAL_ADC_ConfigChannel+0x9e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002cd0:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8002cd2:	f000 001f 	and.w	r0, r0, #31
 8002cd6:	250f      	movs	r5, #15
 8002cd8:	4085      	lsls	r5, r0
 8002cda:	ea24 0505 	bic.w	r5, r4, r5
 8002cde:	680c      	ldr	r4, [r1, #0]
 8002ce0:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8002ce4:	2e00      	cmp	r6, #0
 8002ce6:	d133      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0xd0>
 8002ce8:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8002cec:	fa04 f000 	lsl.w	r0, r4, r0
 8002cf0:	4328      	orrs	r0, r5
 8002cf2:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002cf4:	684c      	ldr	r4, [r1, #4]
 8002cf6:	08a0      	lsrs	r0, r4, #2
 8002cf8:	3001      	adds	r0, #1
 8002cfa:	69dd      	ldr	r5, [r3, #28]
 8002cfc:	42a8      	cmp	r0, r5
 8002cfe:	d814      	bhi.n	8002d2a <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002d00:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8002d02:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002d04:	f004 041f 	and.w	r4, r4, #31
 8002d08:	260f      	movs	r6, #15
 8002d0a:	40a6      	lsls	r6, r4
 8002d0c:	ea20 0006 	bic.w	r0, r0, r6
 8002d10:	f3c5 6583 	ubfx	r5, r5, #26, #4
 8002d14:	fa05 f404 	lsl.w	r4, r5, r4
 8002d18:	4304      	orrs	r4, r0
 8002d1a:	6294      	str	r4, [r2, #40]	; 0x28
}
 8002d1c:	e005      	b.n	8002d2a <HAL_ADC_ConfigChannel+0xaa>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002d1e:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002d20:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002d22:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8002d26:	4320      	orrs	r0, r4
 8002d28:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d2a:	681d      	ldr	r5, [r3, #0]
 8002d2c:	680e      	ldr	r6, [r1, #0]
 8002d2e:	6888      	ldr	r0, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8002d30:	696c      	ldr	r4, [r5, #20]
 8002d32:	ea24 2406 	bic.w	r4, r4, r6, lsl #8
 8002d36:	ea00 2206 	and.w	r2, r0, r6, lsl #8
 8002d3a:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8002d3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d42:	4322      	orrs	r2, r4
 8002d44:	616a      	str	r2, [r5, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d46:	680a      	ldr	r2, [r1, #0]
 8002d48:	2a00      	cmp	r2, #0
 8002d4a:	db09      	blt.n	8002d60 <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	e7af      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x30>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8002d54:	b114      	cbz	r4, 8002d5c <HAL_ADC_ConfigChannel+0xdc>
  return __builtin_clz(value);
 8002d56:	fab4 f484 	clz	r4, r4
 8002d5a:	e7c7      	b.n	8002cec <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8002d5c:	2420      	movs	r4, #32
 8002d5e:	e7c5      	b.n	8002cec <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002d60:	4945      	ldr	r1, [pc, #276]	; (8002e78 <HAL_ADC_ConfigChannel+0x1f8>)
 8002d62:	6808      	ldr	r0, [r1, #0]
 8002d64:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d68:	4c44      	ldr	r4, [pc, #272]	; (8002e7c <HAL_ADC_ConfigChannel+0x1fc>)
 8002d6a:	42a2      	cmp	r2, r4
 8002d6c:	d007      	beq.n	8002d7e <HAL_ADC_ConfigChannel+0xfe>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d6e:	4c44      	ldr	r4, [pc, #272]	; (8002e80 <HAL_ADC_ConfigChannel+0x200>)
 8002d70:	42a2      	cmp	r2, r4
 8002d72:	d024      	beq.n	8002dbe <HAL_ADC_ConfigChannel+0x13e>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002d74:	4c43      	ldr	r4, [pc, #268]	; (8002e84 <HAL_ADC_ConfigChannel+0x204>)
 8002d76:	42a2      	cmp	r2, r4
 8002d78:	d02e      	beq.n	8002dd8 <HAL_ADC_ConfigChannel+0x158>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	e798      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d7e:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8002d82:	d1f4      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0xee>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d84:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d88:	483b      	ldr	r0, [pc, #236]	; (8002e78 <HAL_ADC_ConfigChannel+0x1f8>)
 8002d8a:	6802      	ldr	r2, [r0, #0]
 8002d8c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002d90:	4311      	orrs	r1, r2
 8002d92:	6001      	str	r1, [r0, #0]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d94:	4a3c      	ldr	r2, [pc, #240]	; (8002e88 <HAL_ADC_ConfigChannel+0x208>)
 8002d96:	6812      	ldr	r2, [r2, #0]
 8002d98:	0992      	lsrs	r2, r2, #6
 8002d9a:	493c      	ldr	r1, [pc, #240]	; (8002e8c <HAL_ADC_ConfigChannel+0x20c>)
 8002d9c:	fba1 1202 	umull	r1, r2, r1, r2
 8002da0:	0992      	lsrs	r2, r2, #6
 8002da2:	3201      	adds	r2, #1
 8002da4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002da8:	0092      	lsls	r2, r2, #2
 8002daa:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002dac:	e002      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x134>
            wait_loop_index--;
 8002dae:	9a01      	ldr	r2, [sp, #4]
 8002db0:	3a01      	subs	r2, #1
 8002db2:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002db4:	9a01      	ldr	r2, [sp, #4]
 8002db6:	2a00      	cmp	r2, #0
 8002db8:	d1f9      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x12e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dba:	2000      	movs	r0, #0
 8002dbc:	e778      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002dbe:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8002dc2:	d1d7      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0xf4>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dc4:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8002dc8:	482b      	ldr	r0, [pc, #172]	; (8002e78 <HAL_ADC_ConfigChannel+0x1f8>)
 8002dca:	6802      	ldr	r2, [r0, #0]
 8002dcc:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002dd0:	4311      	orrs	r1, r2
 8002dd2:	6001      	str	r1, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd4:	2000      	movs	r0, #0
}
 8002dd6:	e76b      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002dd8:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8002ddc:	d146      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x1ec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dde:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002de2:	4825      	ldr	r0, [pc, #148]	; (8002e78 <HAL_ADC_ConfigChannel+0x1f8>)
 8002de4:	6801      	ldr	r1, [r0, #0]
 8002de6:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002dea:	430a      	orrs	r2, r1
 8002dec:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dee:	2000      	movs	r0, #0
}
 8002df0:	e75e      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002df2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002df6:	d002      	beq.n	8002dfe <HAL_ADC_ConfigChannel+0x17e>
 8002df8:	481e      	ldr	r0, [pc, #120]	; (8002e74 <HAL_ADC_ConfigChannel+0x1f4>)
 8002dfa:	4284      	cmp	r4, r0
 8002dfc:	d106      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x18c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002dfe:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002e00:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002e02:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8002e06:	ea20 0004 	bic.w	r0, r0, r4
 8002e0a:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e0c:	680a      	ldr	r2, [r1, #0]
 8002e0e:	2a00      	cmp	r2, #0
 8002e10:	db01      	blt.n	8002e16 <HAL_ADC_ConfigChannel+0x196>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e12:	2000      	movs	r0, #0
 8002e14:	e74c      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e16:	4918      	ldr	r1, [pc, #96]	; (8002e78 <HAL_ADC_ConfigChannel+0x1f8>)
 8002e18:	6809      	ldr	r1, [r1, #0]
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e1a:	4818      	ldr	r0, [pc, #96]	; (8002e7c <HAL_ADC_ConfigChannel+0x1fc>)
 8002e1c:	4282      	cmp	r2, r0
 8002e1e:	d007      	beq.n	8002e30 <HAL_ADC_ConfigChannel+0x1b0>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e20:	4817      	ldr	r0, [pc, #92]	; (8002e80 <HAL_ADC_ConfigChannel+0x200>)
 8002e22:	4282      	cmp	r2, r0
 8002e24:	d00e      	beq.n	8002e44 <HAL_ADC_ConfigChannel+0x1c4>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e26:	4817      	ldr	r0, [pc, #92]	; (8002e84 <HAL_ADC_ConfigChannel+0x204>)
 8002e28:	4282      	cmp	r2, r0
 8002e2a:	d015      	beq.n	8002e58 <HAL_ADC_ConfigChannel+0x1d8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	e73f      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e30:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e34:	4810      	ldr	r0, [pc, #64]	; (8002e78 <HAL_ADC_ConfigChannel+0x1f8>)
 8002e36:	6802      	ldr	r2, [r0, #0]
 8002e38:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002e3c:	4311      	orrs	r1, r2
 8002e3e:	6001      	str	r1, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e40:	2000      	movs	r0, #0
}
 8002e42:	e735      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e44:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e48:	480b      	ldr	r0, [pc, #44]	; (8002e78 <HAL_ADC_ConfigChannel+0x1f8>)
 8002e4a:	6801      	ldr	r1, [r0, #0]
 8002e4c:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002e50:	430a      	orrs	r2, r1
 8002e52:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e54:	2000      	movs	r0, #0
}
 8002e56:	e72b      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e58:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e5c:	4806      	ldr	r0, [pc, #24]	; (8002e78 <HAL_ADC_ConfigChannel+0x1f8>)
 8002e5e:	6801      	ldr	r1, [r0, #0]
 8002e60:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002e64:	430a      	orrs	r2, r1
 8002e66:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e68:	2000      	movs	r0, #0
}
 8002e6a:	e721      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x30>
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	e71f      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8002e70:	2002      	movs	r0, #2
 8002e72:	e720      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x36>
 8002e74:	80000004 	.word	0x80000004
 8002e78:	40012708 	.word	0x40012708
 8002e7c:	b0001000 	.word	0xb0001000
 8002e80:	b8004000 	.word	0xb8004000
 8002e84:	b4002000 	.word	0xb4002000
 8002e88:	20000050 	.word	0x20000050
 8002e8c:	053e2d63 	.word	0x053e2d63

08002e90 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002e90:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e92:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	f012 0f04 	tst.w	r2, #4
 8002e9a:	d02a      	beq.n	8002ef2 <ADC_ConversionStop+0x62>
 8002e9c:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	f012 0f02 	tst.w	r2, #2
 8002ea4:	d107      	bne.n	8002eb6 <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002eac:	f022 0217 	bic.w	r2, r2, #23
 8002eb0:	f042 0210 	orr.w	r2, r2, #16
 8002eb4:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002eb6:	f7ff fb19 	bl	80024ec <HAL_GetTick>
 8002eba:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002ebc:	6823      	ldr	r3, [r4, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f013 0f04 	tst.w	r3, #4
 8002ec4:	d013      	beq.n	8002eee <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002ec6:	f7ff fb11 	bl	80024ec <HAL_GetTick>
 8002eca:	1b43      	subs	r3, r0, r5
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d9f5      	bls.n	8002ebc <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f013 0f04 	tst.w	r3, #4
 8002ed8:	d0f0      	beq.n	8002ebc <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002edc:	f043 0310 	orr.w	r3, r3, #16
 8002ee0:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ee2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8002eea:	2001      	movs	r0, #1
 8002eec:	e002      	b.n	8002ef4 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002eee:	2000      	movs	r0, #0
 8002ef0:	e000      	b.n	8002ef4 <ADC_ConversionStop+0x64>
 8002ef2:	2000      	movs	r0, #0
}
 8002ef4:	bd38      	pop	{r3, r4, r5, pc}
	...

08002ef8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ef8:	b530      	push	{r4, r5, lr}
 8002efa:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f00:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	f012 0f01 	tst.w	r2, #1
 8002f08:	d159      	bne.n	8002fbe <ADC_Enable+0xc6>
 8002f0a:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002f0c:	6899      	ldr	r1, [r3, #8]
 8002f0e:	4a2d      	ldr	r2, [pc, #180]	; (8002fc4 <ADC_Enable+0xcc>)
 8002f10:	4211      	tst	r1, r2
 8002f12:	d11b      	bne.n	8002f4c <ADC_Enable+0x54>
  MODIFY_REG(ADCx->CR,
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f1a:	f022 0217 	bic.w	r2, r2, #23
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f24:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <ADC_Enable+0xd0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f28:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8002f2c:	d018      	beq.n	8002f60 <ADC_Enable+0x68>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f2e:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <ADC_Enable+0xd4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	099b      	lsrs	r3, r3, #6
 8002f34:	4a26      	ldr	r2, [pc, #152]	; (8002fd0 <ADC_Enable+0xd8>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	099b      	lsrs	r3, r3, #6
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002f40:	9b01      	ldr	r3, [sp, #4]
 8002f42:	b16b      	cbz	r3, 8002f60 <ADC_Enable+0x68>
      {
        wait_loop_index--;
 8002f44:	9b01      	ldr	r3, [sp, #4]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	9301      	str	r3, [sp, #4]
 8002f4a:	e7f9      	b.n	8002f40 <ADC_Enable+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f4c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002f4e:	f043 0310 	orr.w	r3, r3, #16
 8002f52:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f54:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	e02f      	b.n	8002fc0 <ADC_Enable+0xc8>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002f60:	7e63      	ldrb	r3, [r4, #25]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <ADC_Enable+0x72>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f66:	2000      	movs	r0, #0
 8002f68:	e02a      	b.n	8002fc0 <ADC_Enable+0xc8>
      tickstart = HAL_GetTick();
 8002f6a:	f7ff fabf 	bl	80024ec <HAL_GetTick>
 8002f6e:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	f012 0f01 	tst.w	r2, #1
 8002f78:	d11f      	bne.n	8002fba <ADC_Enable+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	f012 0f01 	tst.w	r2, #1
 8002f80:	d107      	bne.n	8002f92 <ADC_Enable+0x9a>
  MODIFY_REG(ADCx->CR,
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f88:	f022 0217 	bic.w	r2, r2, #23
 8002f8c:	f042 0201 	orr.w	r2, r2, #1
 8002f90:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f92:	f7ff faab 	bl	80024ec <HAL_GetTick>
 8002f96:	1b40      	subs	r0, r0, r5
 8002f98:	2802      	cmp	r0, #2
 8002f9a:	d9e9      	bls.n	8002f70 <ADC_Enable+0x78>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f9c:	6823      	ldr	r3, [r4, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f013 0f01 	tst.w	r3, #1
 8002fa4:	d1e4      	bne.n	8002f70 <ADC_Enable+0x78>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002fa8:	f043 0310 	orr.w	r3, r3, #16
 8002fac:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fae:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	e002      	b.n	8002fc0 <ADC_Enable+0xc8>
  return HAL_OK;
 8002fba:	2000      	movs	r0, #0
 8002fbc:	e000      	b.n	8002fc0 <ADC_Enable+0xc8>
 8002fbe:	2000      	movs	r0, #0
}
 8002fc0:	b003      	add	sp, #12
 8002fc2:	bd30      	pop	{r4, r5, pc}
 8002fc4:	80000017 	.word	0x80000017
 8002fc8:	40012708 	.word	0x40012708
 8002fcc:	20000050 	.word	0x20000050
 8002fd0:	053e2d63 	.word	0x053e2d63

08002fd4 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fd4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f013 0f04 	tst.w	r3, #4
 8002fdc:	d128      	bne.n	8003030 <HAL_ADC_Start+0x5c>
{
 8002fde:	b510      	push	{r4, lr}
 8002fe0:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8002fe2:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d024      	beq.n	8003034 <HAL_ADC_Start+0x60>
 8002fea:	2301      	movs	r3, #1
 8002fec:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8002ff0:	f7ff ff82 	bl	8002ef8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002ff4:	b9c0      	cbnz	r0, 8003028 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8002ff6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ff8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ffc:	f023 0301 	bic.w	r3, r3, #1
 8003000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003004:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8003006:	2300      	movs	r3, #0
 8003008:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800300a:	6822      	ldr	r2, [r4, #0]
 800300c:	211c      	movs	r1, #28
 800300e:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8003010:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003014:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003016:	6893      	ldr	r3, [r2, #8]
 8003018:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800301c:	f023 0317 	bic.w	r3, r3, #23
 8003020:	f043 0304 	orr.w	r3, r3, #4
 8003024:	6093      	str	r3, [r2, #8]
}
 8003026:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8003028:	2300      	movs	r3, #0
 800302a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800302e:	e7fa      	b.n	8003026 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8003030:	2002      	movs	r0, #2
}
 8003032:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8003034:	2002      	movs	r0, #2
 8003036:	e7f6      	b.n	8003026 <HAL_ADC_Start+0x52>

08003038 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003038:	b538      	push	{r3, r4, r5, lr}
 800303a:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800303c:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800303e:	6893      	ldr	r3, [r2, #8]
 8003040:	f013 0302 	ands.w	r3, r3, #2
 8003044:	d000      	beq.n	8003048 <ADC_Disable+0x10>
 8003046:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003048:	6891      	ldr	r1, [r2, #8]
 800304a:	f011 0f01 	tst.w	r1, #1
 800304e:	d039      	beq.n	80030c4 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8003050:	2b00      	cmp	r3, #0
 8003052:	d139      	bne.n	80030c8 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003054:	6893      	ldr	r3, [r2, #8]
 8003056:	f003 0305 	and.w	r3, r3, #5
 800305a:	2b01      	cmp	r3, #1
 800305c:	d009      	beq.n	8003072 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800305e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003060:	f043 0310 	orr.w	r3, r3, #16
 8003064:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003066:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 800306e:	2001      	movs	r0, #1
 8003070:	e029      	b.n	80030c6 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 8003072:	6893      	ldr	r3, [r2, #8]
 8003074:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003078:	f023 0317 	bic.w	r3, r3, #23
 800307c:	f043 0302 	orr.w	r3, r3, #2
 8003080:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003082:	6823      	ldr	r3, [r4, #0]
 8003084:	2203      	movs	r2, #3
 8003086:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003088:	f7ff fa30 	bl	80024ec <HAL_GetTick>
 800308c:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800308e:	6823      	ldr	r3, [r4, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f013 0f01 	tst.w	r3, #1
 8003096:	d013      	beq.n	80030c0 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003098:	f7ff fa28 	bl	80024ec <HAL_GetTick>
 800309c:	1b40      	subs	r0, r0, r5
 800309e:	2802      	cmp	r0, #2
 80030a0:	d9f5      	bls.n	800308e <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030a2:	6823      	ldr	r3, [r4, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f013 0f01 	tst.w	r3, #1
 80030aa:	d0f0      	beq.n	800308e <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030ae:	f043 0310 	orr.w	r3, r3, #16
 80030b2:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 80030bc:	2001      	movs	r0, #1
 80030be:	e002      	b.n	80030c6 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030c0:	2000      	movs	r0, #0
 80030c2:	e000      	b.n	80030c6 <ADC_Disable+0x8e>
 80030c4:	2000      	movs	r0, #0
}
 80030c6:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80030c8:	2000      	movs	r0, #0
 80030ca:	e7fc      	b.n	80030c6 <ADC_Disable+0x8e>

080030cc <HAL_ADC_DeInit>:
{
 80030cc:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 80030ce:	2800      	cmp	r0, #0
 80030d0:	d04a      	beq.n	8003168 <HAL_ADC_DeInit+0x9c>
 80030d2:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80030d4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80030d6:	f043 0302 	orr.w	r3, r3, #2
 80030da:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 80030dc:	f7ff fed8 	bl	8002e90 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80030e0:	4606      	mov	r6, r0
 80030e2:	2800      	cmp	r0, #0
 80030e4:	d031      	beq.n	800314a <HAL_ADC_DeInit+0x7e>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80030e6:	6822      	ldr	r2, [r4, #0]
 80030e8:	6853      	ldr	r3, [r2, #4]
 80030ea:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80030ee:	f023 0303 	bic.w	r3, r3, #3
 80030f2:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80030f4:	6823      	ldr	r3, [r4, #0]
 80030f6:	f240 329f 	movw	r2, #927	; 0x39f
 80030fa:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80030fc:	6822      	ldr	r2, [r4, #0]
 80030fe:	68d1      	ldr	r1, [r2, #12]
 8003100:	4b1a      	ldr	r3, [pc, #104]	; (800316c <HAL_ADC_DeInit+0xa0>)
 8003102:	400b      	ands	r3, r1
 8003104:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003106:	6822      	ldr	r2, [r4, #0]
 8003108:	6913      	ldr	r3, [r2, #16]
 800310a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800310e:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003110:	6822      	ldr	r2, [r4, #0]
 8003112:	6953      	ldr	r3, [r2, #20]
 8003114:	f023 0307 	bic.w	r3, r3, #7
 8003118:	6153      	str	r3, [r2, #20]
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 800311a:	6822      	ldr	r2, [r4, #0]
 800311c:	6a13      	ldr	r3, [r2, #32]
 800311e:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8003122:	6213      	str	r3, [r2, #32]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003128:	2500      	movs	r5, #0
 800312a:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800312c:	4a10      	ldr	r2, [pc, #64]	; (8003170 <HAL_ADC_DeInit+0xa4>)
 800312e:	6813      	ldr	r3, [r2, #0]
 8003130:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003134:	6013      	str	r3, [r2, #0]
  HAL_ADC_MspDeInit(hadc);
 8003136:	4620      	mov	r0, r4
 8003138:	f7fe fa8a 	bl	8001650 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800313c:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 800313e:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8003140:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8003142:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8003146:	4630      	mov	r0, r6
 8003148:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800314a:	4620      	mov	r0, r4
 800314c:	f7ff ff74 	bl	8003038 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003150:	4606      	mov	r6, r0
 8003152:	b908      	cbnz	r0, 8003158 <HAL_ADC_DeInit+0x8c>
      hadc->State = HAL_ADC_STATE_READY;
 8003154:	2301      	movs	r3, #1
 8003156:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003158:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800315a:	6893      	ldr	r3, [r2, #8]
 800315c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003160:	f023 0317 	bic.w	r3, r3, #23
 8003164:	6093      	str	r3, [r2, #8]
}
 8003166:	e7be      	b.n	80030e6 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8003168:	2601      	movs	r6, #1
 800316a:	e7ec      	b.n	8003146 <HAL_ADC_DeInit+0x7a>
 800316c:	833e0200 	.word	0x833e0200
 8003170:	40012708 	.word	0x40012708

08003174 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003174:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003178:	2b01      	cmp	r3, #1
 800317a:	d019      	beq.n	80031b0 <HAL_ADC_Stop+0x3c>
{
 800317c:	b510      	push	{r4, lr}
 800317e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003180:	2301      	movs	r3, #1
 8003182:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003186:	f7ff fe83 	bl	8002e90 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800318a:	b118      	cbz	r0, 8003194 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 800318c:	2300      	movs	r3, #0
 800318e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8003192:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003194:	4620      	mov	r0, r4
 8003196:	f7ff ff4f 	bl	8003038 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800319a:	2800      	cmp	r0, #0
 800319c:	d1f6      	bne.n	800318c <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800319e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80031a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031a4:	f023 0301 	bic.w	r3, r3, #1
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	65a3      	str	r3, [r4, #88]	; 0x58
 80031ae:	e7ed      	b.n	800318c <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 80031b0:	2002      	movs	r0, #2
}
 80031b2:	4770      	bx	lr

080031b4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80031b4:	b530      	push	{r4, r5, lr}
 80031b6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	9301      	str	r3, [sp, #4]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80031bc:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d045      	beq.n	8003250 <HAL_ADCEx_Calibration_Start+0x9c>
 80031c4:	4604      	mov	r4, r0
 80031c6:	2301      	movs	r3, #1
 80031c8:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80031cc:	f7ff ff34 	bl	8003038 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031d0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	f012 0f01 	tst.w	r2, #1
 80031d8:	d008      	beq.n	80031ec <HAL_ADCEx_Calibration_Start+0x38>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80031dc:	f043 0310 	orr.w	r3, r3, #16
 80031e0:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80031e2:	2300      	movs	r3, #0
 80031e4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 80031e8:	b003      	add	sp, #12
 80031ea:	bd30      	pop	{r4, r5, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80031ec:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80031ee:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 80031f2:	f042 0202 	orr.w	r2, r2, #2
 80031f6:	65a2      	str	r2, [r4, #88]	; 0x58
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80031f8:	68dd      	ldr	r5, [r3, #12]
 80031fa:	f005 0503 	and.w	r5, r5, #3
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	f022 0203 	bic.w	r2, r2, #3
 8003204:	60da      	str	r2, [r3, #12]
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8003206:	6821      	ldr	r1, [r4, #0]
 8003208:	688b      	ldr	r3, [r1, #8]
 800320a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800320e:	608b      	str	r3, [r1, #8]
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003210:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003212:	6899      	ldr	r1, [r3, #8]
 8003214:	2900      	cmp	r1, #0
 8003216:	db09      	blt.n	800322c <HAL_ADCEx_Calibration_Start+0x78>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	432a      	orrs	r2, r5
 800321c:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800321e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003220:	f023 0303 	bic.w	r3, r3, #3
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	65a3      	str	r3, [r4, #88]	; 0x58
 800322a:	e7da      	b.n	80031e2 <HAL_ADCEx_Calibration_Start+0x2e>
      wait_loop_index++;
 800322c:	9b01      	ldr	r3, [sp, #4]
 800322e:	3301      	adds	r3, #1
 8003230:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003232:	9b01      	ldr	r3, [sp, #4]
 8003234:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003238:	d3ea      	bcc.n	8003210 <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 800323a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800323c:	f023 0312 	bic.w	r3, r3, #18
 8003240:	f043 0310 	orr.w	r3, r3, #16
 8003244:	65a3      	str	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hadc);
 8003246:	2300      	movs	r3, #0
 8003248:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 800324c:	2001      	movs	r0, #1
 800324e:	e7cb      	b.n	80031e8 <HAL_ADCEx_Calibration_Start+0x34>
  __HAL_LOCK(hadc);
 8003250:	2002      	movs	r0, #2
 8003252:	e7c9      	b.n	80031e8 <HAL_ADCEx_Calibration_Start+0x34>

08003254 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003254:	4a07      	ldr	r2, [pc, #28]	; (8003274 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003256:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003258:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800325c:	041b      	lsls	r3, r3, #16
 800325e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003260:	0200      	lsls	r0, r0, #8
 8003262:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003266:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800326c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003270:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003272:	4770      	bx	lr
 8003274:	e000ed00 	.word	0xe000ed00

08003278 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003278:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800327a:	4b17      	ldr	r3, [pc, #92]	; (80032d8 <HAL_NVIC_SetPriority+0x60>)
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003282:	f1c3 0407 	rsb	r4, r3, #7
 8003286:	2c04      	cmp	r4, #4
 8003288:	bf28      	it	cs
 800328a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800328c:	1d1d      	adds	r5, r3, #4
 800328e:	2d06      	cmp	r5, #6
 8003290:	d918      	bls.n	80032c4 <HAL_NVIC_SetPriority+0x4c>
 8003292:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003294:	f04f 35ff 	mov.w	r5, #4294967295
 8003298:	fa05 f404 	lsl.w	r4, r5, r4
 800329c:	ea21 0104 	bic.w	r1, r1, r4
 80032a0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a2:	fa05 f303 	lsl.w	r3, r5, r3
 80032a6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032aa:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80032ac:	2800      	cmp	r0, #0
 80032ae:	db0b      	blt.n	80032c8 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b0:	0109      	lsls	r1, r1, #4
 80032b2:	b2c9      	uxtb	r1, r1
 80032b4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80032b8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80032bc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80032c0:	bc30      	pop	{r4, r5}
 80032c2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032c4:	2300      	movs	r3, #0
 80032c6:	e7e5      	b.n	8003294 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c8:	f000 000f 	and.w	r0, r0, #15
 80032cc:	0109      	lsls	r1, r1, #4
 80032ce:	b2c9      	uxtb	r1, r1
 80032d0:	4b02      	ldr	r3, [pc, #8]	; (80032dc <HAL_NVIC_SetPriority+0x64>)
 80032d2:	5419      	strb	r1, [r3, r0]
 80032d4:	e7f4      	b.n	80032c0 <HAL_NVIC_SetPriority+0x48>
 80032d6:	bf00      	nop
 80032d8:	e000ed00 	.word	0xe000ed00
 80032dc:	e000ed14 	.word	0xe000ed14

080032e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80032e0:	2800      	cmp	r0, #0
 80032e2:	db07      	blt.n	80032f4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032e4:	f000 021f 	and.w	r2, r0, #31
 80032e8:	0940      	lsrs	r0, r0, #5
 80032ea:	2301      	movs	r3, #1
 80032ec:	4093      	lsls	r3, r2
 80032ee:	4a02      	ldr	r2, [pc, #8]	; (80032f8 <HAL_NVIC_EnableIRQ+0x18>)
 80032f0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	e000e100 	.word	0xe000e100

080032fc <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80032fc:	6803      	ldr	r3, [r0, #0]
 80032fe:	4a14      	ldr	r2, [pc, #80]	; (8003350 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d816      	bhi.n	8003332 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003304:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003306:	f022 0203 	bic.w	r2, r2, #3
 800330a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800330e:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8003312:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003314:	b2db      	uxtb	r3, r3
 8003316:	3b08      	subs	r3, #8
 8003318:	4a0e      	ldr	r2, [pc, #56]	; (8003354 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003320:	4a0d      	ldr	r2, [pc, #52]	; (8003358 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8003322:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003324:	f003 031f 	and.w	r3, r3, #31
 8003328:	2201      	movs	r2, #1
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	6503      	str	r3, [r0, #80]	; 0x50
}
 8003330:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003332:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003334:	f022 0103 	bic.w	r1, r2, #3
 8003338:	4a08      	ldr	r2, [pc, #32]	; (800335c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 800333a:	440a      	add	r2, r1
 800333c:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800333e:	b2db      	uxtb	r3, r3
 8003340:	3b08      	subs	r3, #8
 8003342:	4a04      	ldr	r2, [pc, #16]	; (8003354 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003344:	fba2 2303 	umull	r2, r3, r2, r3
 8003348:	091b      	lsrs	r3, r3, #4
 800334a:	3307      	adds	r3, #7
 800334c:	e7e8      	b.n	8003320 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 800334e:	bf00      	nop
 8003350:	40020407 	.word	0x40020407
 8003354:	cccccccd 	.word	0xcccccccd
 8003358:	40020880 	.word	0x40020880
 800335c:	4002081c 	.word	0x4002081c

08003360 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003360:	6843      	ldr	r3, [r0, #4]
 8003362:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003366:	4a07      	ldr	r2, [pc, #28]	; (8003384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8003368:	441a      	add	r2, r3
 800336a:	0092      	lsls	r2, r2, #2
 800336c:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800336e:	4a06      	ldr	r2, [pc, #24]	; (8003388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8003370:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003372:	3b01      	subs	r3, #1
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	2201      	movs	r2, #1
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	1000823f 	.word	0x1000823f
 8003388:	40020940 	.word	0x40020940

0800338c <HAL_DMA_Init>:
  if (hdma == NULL)
 800338c:	2800      	cmp	r0, #0
 800338e:	d060      	beq.n	8003452 <HAL_DMA_Init+0xc6>
{
 8003390:	b510      	push	{r4, lr}
 8003392:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003394:	6802      	ldr	r2, [r0, #0]
 8003396:	4b30      	ldr	r3, [pc, #192]	; (8003458 <HAL_DMA_Init+0xcc>)
 8003398:	429a      	cmp	r2, r3
 800339a:	d842      	bhi.n	8003422 <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800339c:	4b2f      	ldr	r3, [pc, #188]	; (800345c <HAL_DMA_Init+0xd0>)
 800339e:	4413      	add	r3, r2
 80033a0:	492f      	ldr	r1, [pc, #188]	; (8003460 <HAL_DMA_Init+0xd4>)
 80033a2:	fba1 1303 	umull	r1, r3, r1, r3
 80033a6:	091b      	lsrs	r3, r3, #4
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80033ac:	4b2d      	ldr	r3, [pc, #180]	; (8003464 <HAL_DMA_Init+0xd8>)
 80033ae:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80033b0:	2302      	movs	r3, #2
 80033b2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80033b6:	6813      	ldr	r3, [r2, #0]
 80033b8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80033bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c0:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80033c2:	6821      	ldr	r1, [r4, #0]
 80033c4:	680a      	ldr	r2, [r1, #0]
 80033c6:	68a3      	ldr	r3, [r4, #8]
 80033c8:	68e0      	ldr	r0, [r4, #12]
 80033ca:	4303      	orrs	r3, r0
 80033cc:	6920      	ldr	r0, [r4, #16]
 80033ce:	4303      	orrs	r3, r0
 80033d0:	6960      	ldr	r0, [r4, #20]
 80033d2:	4303      	orrs	r3, r0
 80033d4:	69a0      	ldr	r0, [r4, #24]
 80033d6:	4303      	orrs	r3, r0
 80033d8:	69e0      	ldr	r0, [r4, #28]
 80033da:	4303      	orrs	r3, r0
 80033dc:	6a20      	ldr	r0, [r4, #32]
 80033de:	4303      	orrs	r3, r0
 80033e0:	4313      	orrs	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033e4:	4620      	mov	r0, r4
 80033e6:	f7ff ff89 	bl	80032fc <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80033ea:	68a3      	ldr	r3, [r4, #8]
 80033ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033f0:	d022      	beq.n	8003438 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80033f2:	6863      	ldr	r3, [r4, #4]
 80033f4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80033f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033fa:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80033fe:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003400:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003402:	6863      	ldr	r3, [r4, #4]
 8003404:	3b01      	subs	r3, #1
 8003406:	2b03      	cmp	r3, #3
 8003408:	d919      	bls.n	800343e <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800340e:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003410:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003412:	2000      	movs	r0, #0
 8003414:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8003416:	2301      	movs	r3, #1
 8003418:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800341c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8003420:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003422:	4b11      	ldr	r3, [pc, #68]	; (8003468 <HAL_DMA_Init+0xdc>)
 8003424:	4413      	add	r3, r2
 8003426:	490e      	ldr	r1, [pc, #56]	; (8003460 <HAL_DMA_Init+0xd4>)
 8003428:	fba1 1303 	umull	r1, r3, r1, r3
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003432:	4b0e      	ldr	r3, [pc, #56]	; (800346c <HAL_DMA_Init+0xe0>)
 8003434:	6403      	str	r3, [r0, #64]	; 0x40
 8003436:	e7bb      	b.n	80033b0 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003438:	2300      	movs	r3, #0
 800343a:	6063      	str	r3, [r4, #4]
 800343c:	e7d9      	b.n	80033f2 <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800343e:	4620      	mov	r0, r4
 8003440:	f7ff ff8e 	bl	8003360 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003444:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800344a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800344c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800344e:	605a      	str	r2, [r3, #4]
 8003450:	e7df      	b.n	8003412 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8003452:	2001      	movs	r0, #1
}
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40020407 	.word	0x40020407
 800345c:	bffdfff8 	.word	0xbffdfff8
 8003460:	cccccccd 	.word	0xcccccccd
 8003464:	40020000 	.word	0x40020000
 8003468:	bffdfbf8 	.word	0xbffdfbf8
 800346c:	40020400 	.word	0x40020400

08003470 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8003470:	4603      	mov	r3, r0
 8003472:	2800      	cmp	r0, #0
 8003474:	d034      	beq.n	80034e0 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003476:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	2a02      	cmp	r2, #2
 800347e:	d006      	beq.n	800348e <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003480:	2204      	movs	r2, #4
 8003482:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003484:	2200      	movs	r2, #0
 8003486:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 800348a:	2001      	movs	r0, #1
 800348c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800348e:	6801      	ldr	r1, [r0, #0]
 8003490:	680a      	ldr	r2, [r1, #0]
 8003492:	f022 020e 	bic.w	r2, r2, #14
 8003496:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003498:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800349a:	680a      	ldr	r2, [r1, #0]
 800349c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034a0:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80034a2:	6801      	ldr	r1, [r0, #0]
 80034a4:	680a      	ldr	r2, [r1, #0]
 80034a6:	f022 0201 	bic.w	r2, r2, #1
 80034aa:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80034ae:	f002 011c 	and.w	r1, r2, #28
 80034b2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80034b4:	2201      	movs	r2, #1
 80034b6:	408a      	lsls	r2, r1
 80034b8:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034bc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80034be:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80034c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034c2:	b132      	cbz	r2, 80034d2 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034c4:	6811      	ldr	r1, [r2, #0]
 80034c6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80034ca:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034ce:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80034d0:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80034d8:	2000      	movs	r0, #0
 80034da:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 80034de:	4770      	bx	lr
    return HAL_ERROR;
 80034e0:	2001      	movs	r0, #1
}
 80034e2:	4770      	bx	lr

080034e4 <HAL_DMA_Abort_IT>:
{
 80034e4:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80034e6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d003      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034f0:	2304      	movs	r3, #4
 80034f2:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80034f4:	2001      	movs	r0, #1
}
 80034f6:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034f8:	6802      	ldr	r2, [r0, #0]
 80034fa:	6813      	ldr	r3, [r2, #0]
 80034fc:	f023 030e 	bic.w	r3, r3, #14
 8003500:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003502:	6802      	ldr	r2, [r0, #0]
 8003504:	6813      	ldr	r3, [r2, #0]
 8003506:	f023 0301 	bic.w	r3, r3, #1
 800350a:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800350c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800350e:	6813      	ldr	r3, [r2, #0]
 8003510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003514:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003516:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003518:	f003 021c 	and.w	r2, r3, #28
 800351c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800351e:	2301      	movs	r3, #1
 8003520:	4093      	lsls	r3, r2
 8003522:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003524:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003526:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003528:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800352a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800352c:	b133      	cbz	r3, 800353c <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003534:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003536:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003538:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800353a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800353c:	2301      	movs	r3, #1
 800353e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003542:	2300      	movs	r3, #0
 8003544:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8003548:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800354a:	b113      	cbz	r3, 8003552 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 800354c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800354e:	2000      	movs	r0, #0
 8003550:	e7d1      	b.n	80034f6 <HAL_DMA_Abort_IT+0x12>
 8003552:	2000      	movs	r0, #0
 8003554:	e7cf      	b.n	80034f6 <HAL_DMA_Abort_IT+0x12>
	...

08003558 <HAL_DMA_IRQHandler>:
{
 8003558:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800355a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800355c:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800355e:	6804      	ldr	r4, [r0, #0]
 8003560:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003562:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003564:	f003 031c 	and.w	r3, r3, #28
 8003568:	2204      	movs	r2, #4
 800356a:	409a      	lsls	r2, r3
 800356c:	420a      	tst	r2, r1
 800356e:	d015      	beq.n	800359c <HAL_DMA_IRQHandler+0x44>
 8003570:	f015 0f04 	tst.w	r5, #4
 8003574:	d012      	beq.n	800359c <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003576:	6823      	ldr	r3, [r4, #0]
 8003578:	f013 0f20 	tst.w	r3, #32
 800357c:	d103      	bne.n	8003586 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	f023 0304 	bic.w	r3, r3, #4
 8003584:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003586:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003588:	f003 021c 	and.w	r2, r3, #28
 800358c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800358e:	2304      	movs	r3, #4
 8003590:	4093      	lsls	r3, r2
 8003592:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003594:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003596:	b103      	cbz	r3, 800359a <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8003598:	4798      	blx	r3
}
 800359a:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800359c:	2202      	movs	r2, #2
 800359e:	409a      	lsls	r2, r3
 80035a0:	420a      	tst	r2, r1
 80035a2:	d028      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x9e>
 80035a4:	f015 0f02 	tst.w	r5, #2
 80035a8:	d025      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035aa:	6823      	ldr	r3, [r4, #0]
 80035ac:	f013 0f20 	tst.w	r3, #32
 80035b0:	d106      	bne.n	80035c0 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035b2:	6823      	ldr	r3, [r4, #0]
 80035b4:	f023 030a 	bic.w	r3, r3, #10
 80035b8:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80035ba:	2301      	movs	r3, #1
 80035bc:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80035c0:	6802      	ldr	r2, [r0, #0]
 80035c2:	4b1c      	ldr	r3, [pc, #112]	; (8003634 <HAL_DMA_IRQHandler+0xdc>)
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d90e      	bls.n	80035e6 <HAL_DMA_IRQHandler+0x8e>
 80035c8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80035ca:	f003 021c 	and.w	r2, r3, #28
 80035ce:	2302      	movs	r3, #2
 80035d0:	4093      	lsls	r3, r2
 80035d2:	4a19      	ldr	r2, [pc, #100]	; (8003638 <HAL_DMA_IRQHandler+0xe0>)
 80035d4:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 80035d6:	2300      	movs	r3, #0
 80035d8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 80035dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0db      	beq.n	800359a <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 80035e2:	4798      	blx	r3
 80035e4:	e7d9      	b.n	800359a <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80035e6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80035e8:	f003 021c 	and.w	r2, r3, #28
 80035ec:	2302      	movs	r3, #2
 80035ee:	4093      	lsls	r3, r2
 80035f0:	4a12      	ldr	r2, [pc, #72]	; (800363c <HAL_DMA_IRQHandler+0xe4>)
 80035f2:	6053      	str	r3, [r2, #4]
 80035f4:	e7ef      	b.n	80035d6 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80035f6:	2208      	movs	r2, #8
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	420b      	tst	r3, r1
 80035fe:	d0cc      	beq.n	800359a <HAL_DMA_IRQHandler+0x42>
 8003600:	f015 0f08 	tst.w	r5, #8
 8003604:	d0c9      	beq.n	800359a <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003606:	6823      	ldr	r3, [r4, #0]
 8003608:	f023 030e 	bic.w	r3, r3, #14
 800360c:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800360e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003610:	f003 031c 	and.w	r3, r3, #28
 8003614:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003616:	2201      	movs	r2, #1
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800361e:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003620:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003624:	2300      	movs	r3, #0
 8003626:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 800362a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0b4      	beq.n	800359a <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8003630:	4798      	blx	r3
  return;
 8003632:	e7b2      	b.n	800359a <HAL_DMA_IRQHandler+0x42>
 8003634:	40020080 	.word	0x40020080
 8003638:	40020400 	.word	0x40020400
 800363c:	40020000 	.word	0x40020000

08003640 <HAL_DMA_GetState>:
  return hdma->State;
 8003640:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 8003644:	4770      	bx	lr

08003646 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8003646:	b178      	cbz	r0, 8003668 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8003648:	6803      	ldr	r3, [r0, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 800364c:	f011 0f10 	tst.w	r1, #16
 8003650:	d004      	beq.n	800365c <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003652:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003656:	d004      	beq.n	8003662 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003658:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 800365c:	601a      	str	r2, [r3, #0]
  return status;
 800365e:	2000      	movs	r0, #0
 8003660:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003662:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003666:	e7f9      	b.n	800365c <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8003668:	2001      	movs	r0, #1
}
 800366a:	4770      	bx	lr

0800366c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800366c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t position = 0x00u;
 800366e:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003670:	e05f      	b.n	8003732 <HAL_GPIO_Init+0xc6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003672:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003674:	005f      	lsls	r7, r3, #1
 8003676:	2503      	movs	r5, #3
 8003678:	40bd      	lsls	r5, r7
 800367a:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800367e:	68cd      	ldr	r5, [r1, #12]
 8003680:	40bd      	lsls	r5, r7
 8003682:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8003684:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003686:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003688:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800368c:	684d      	ldr	r5, [r1, #4]
 800368e:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8003692:	409c      	lsls	r4, r3
 8003694:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8003696:	6044      	str	r4, [r0, #4]
 8003698:	e059      	b.n	800374e <HAL_GPIO_Init+0xe2>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800369a:	08dd      	lsrs	r5, r3, #3
 800369c:	3508      	adds	r5, #8
 800369e:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036a2:	f003 0407 	and.w	r4, r3, #7
 80036a6:	00a6      	lsls	r6, r4, #2
 80036a8:	240f      	movs	r4, #15
 80036aa:	40b4      	lsls	r4, r6
 80036ac:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036b0:	690c      	ldr	r4, [r1, #16]
 80036b2:	40b4      	lsls	r4, r6
 80036b4:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 80036b6:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80036ba:	e05c      	b.n	8003776 <HAL_GPIO_Init+0x10a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036bc:	2402      	movs	r4, #2
 80036be:	e000      	b.n	80036c2 <HAL_GPIO_Init+0x56>
 80036c0:	2400      	movs	r4, #0
 80036c2:	40b4      	lsls	r4, r6
 80036c4:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036c6:	3502      	adds	r5, #2
 80036c8:	4e41      	ldr	r6, [pc, #260]	; (80037d0 <HAL_GPIO_Init+0x164>)
 80036ca:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80036ce:	4c41      	ldr	r4, [pc, #260]	; (80037d4 <HAL_GPIO_Init+0x168>)
 80036d0:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80036d4:	43d4      	mvns	r4, r2
 80036d6:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036da:	684f      	ldr	r7, [r1, #4]
 80036dc:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80036e0:	d001      	beq.n	80036e6 <HAL_GPIO_Init+0x7a>
        {
          temp |= iocurrent;
 80036e2:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80036e6:	4d3b      	ldr	r5, [pc, #236]	; (80037d4 <HAL_GPIO_Init+0x168>)
 80036e8:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80036ec:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80036f0:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036f4:	684f      	ldr	r7, [r1, #4]
 80036f6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80036fa:	d001      	beq.n	8003700 <HAL_GPIO_Init+0x94>
        {
          temp |= iocurrent;
 80036fc:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003700:	4d34      	ldr	r5, [pc, #208]	; (80037d4 <HAL_GPIO_Init+0x168>)
 8003702:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003706:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8003708:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800370c:	684f      	ldr	r7, [r1, #4]
 800370e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003712:	d001      	beq.n	8003718 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8003714:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003718:	4d2e      	ldr	r5, [pc, #184]	; (80037d4 <HAL_GPIO_Init+0x168>)
 800371a:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 800371c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800371e:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003720:	684e      	ldr	r6, [r1, #4]
 8003722:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8003726:	d001      	beq.n	800372c <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8003728:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 800372c:	4a29      	ldr	r2, [pc, #164]	; (80037d4 <HAL_GPIO_Init+0x168>)
 800372e:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 8003730:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003732:	680a      	ldr	r2, [r1, #0]
 8003734:	fa32 f403 	lsrs.w	r4, r2, r3
 8003738:	d048      	beq.n	80037cc <HAL_GPIO_Init+0x160>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800373a:	2401      	movs	r4, #1
 800373c:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 800373e:	4022      	ands	r2, r4
 8003740:	d0f6      	beq.n	8003730 <HAL_GPIO_Init+0xc4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003742:	684d      	ldr	r5, [r1, #4]
 8003744:	f005 0503 	and.w	r5, r5, #3
 8003748:	3d01      	subs	r5, #1
 800374a:	2d01      	cmp	r5, #1
 800374c:	d991      	bls.n	8003672 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800374e:	684c      	ldr	r4, [r1, #4]
 8003750:	f004 0403 	and.w	r4, r4, #3
 8003754:	2c03      	cmp	r4, #3
 8003756:	d009      	beq.n	800376c <HAL_GPIO_Init+0x100>
        temp = GPIOx->PUPDR;
 8003758:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800375a:	005e      	lsls	r6, r3, #1
 800375c:	2403      	movs	r4, #3
 800375e:	40b4      	lsls	r4, r6
 8003760:	ea25 0504 	bic.w	r5, r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003764:	688c      	ldr	r4, [r1, #8]
 8003766:	40b4      	lsls	r4, r6
 8003768:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800376a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800376c:	684c      	ldr	r4, [r1, #4]
 800376e:	f004 0403 	and.w	r4, r4, #3
 8003772:	2c02      	cmp	r4, #2
 8003774:	d091      	beq.n	800369a <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8003776:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003778:	005e      	lsls	r6, r3, #1
 800377a:	2403      	movs	r4, #3
 800377c:	40b4      	lsls	r4, r6
 800377e:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003782:	684c      	ldr	r4, [r1, #4]
 8003784:	f004 0403 	and.w	r4, r4, #3
 8003788:	40b4      	lsls	r4, r6
 800378a:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 800378c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800378e:	684c      	ldr	r4, [r1, #4]
 8003790:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8003794:	d0cc      	beq.n	8003730 <HAL_GPIO_Init+0xc4>
        temp = SYSCFG->EXTICR[position >> 2u];
 8003796:	089d      	lsrs	r5, r3, #2
 8003798:	1cae      	adds	r6, r5, #2
 800379a:	4c0d      	ldr	r4, [pc, #52]	; (80037d0 <HAL_GPIO_Init+0x164>)
 800379c:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80037a0:	f003 0403 	and.w	r4, r3, #3
 80037a4:	00a6      	lsls	r6, r4, #2
 80037a6:	2407      	movs	r4, #7
 80037a8:	40b4      	lsls	r4, r6
 80037aa:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037ae:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80037b2:	d085      	beq.n	80036c0 <HAL_GPIO_Init+0x54>
 80037b4:	4c08      	ldr	r4, [pc, #32]	; (80037d8 <HAL_GPIO_Init+0x16c>)
 80037b6:	42a0      	cmp	r0, r4
 80037b8:	d006      	beq.n	80037c8 <HAL_GPIO_Init+0x15c>
 80037ba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80037be:	42a0      	cmp	r0, r4
 80037c0:	f43f af7c 	beq.w	80036bc <HAL_GPIO_Init+0x50>
 80037c4:	2407      	movs	r4, #7
 80037c6:	e77c      	b.n	80036c2 <HAL_GPIO_Init+0x56>
 80037c8:	2401      	movs	r4, #1
 80037ca:	e77a      	b.n	80036c2 <HAL_GPIO_Init+0x56>
  }
}
 80037cc:	bcf0      	pop	{r4, r5, r6, r7}
 80037ce:	4770      	bx	lr
 80037d0:	40010000 	.word	0x40010000
 80037d4:	58000800 	.word	0x58000800
 80037d8:	48000400 	.word	0x48000400

080037dc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80037dc:	6903      	ldr	r3, [r0, #16]
 80037de:	4219      	tst	r1, r3
 80037e0:	d001      	beq.n	80037e6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80037e2:	2001      	movs	r0, #1
 80037e4:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037e6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80037e8:	4770      	bx	lr

080037ea <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037ea:	b10a      	cbz	r2, 80037f0 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037ec:	6181      	str	r1, [r0, #24]
 80037ee:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037f0:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80037f2:	4770      	bx	lr

080037f4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037f4:	6803      	ldr	r3, [r0, #0]
 80037f6:	699a      	ldr	r2, [r3, #24]
 80037f8:	f012 0f02 	tst.w	r2, #2
 80037fc:	d001      	beq.n	8003802 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037fe:	2200      	movs	r2, #0
 8003800:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003802:	6803      	ldr	r3, [r0, #0]
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	f012 0f01 	tst.w	r2, #1
 800380a:	d103      	bne.n	8003814 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	f042 0201 	orr.w	r2, r2, #1
 8003812:	619a      	str	r2, [r3, #24]
  }
}
 8003814:	4770      	bx	lr

08003816 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003816:	f011 0f01 	tst.w	r1, #1
 800381a:	d009      	beq.n	8003830 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800381c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003820:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003824:	2b28      	cmp	r3, #40	; 0x28
 8003826:	d001      	beq.n	800382c <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003828:	23f2      	movs	r3, #242	; 0xf2
 800382a:	e002      	b.n	8003832 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800382c:	2342      	movs	r3, #66	; 0x42
 800382e:	e000      	b.n	8003832 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8003830:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003832:	f011 0f02 	tst.w	r1, #2
 8003836:	d028      	beq.n	800388a <I2C_Disable_IRQ+0x74>
{
 8003838:	b410      	push	{r4}
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800383a:	f043 0444 	orr.w	r4, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800383e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003842:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8003846:	2a28      	cmp	r2, #40	; 0x28
 8003848:	d011      	beq.n	800386e <I2C_Disable_IRQ+0x58>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800384a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800384e:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8003852:	d10e      	bne.n	8003872 <I2C_Disable_IRQ+0x5c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003854:	2910      	cmp	r1, #16
 8003856:	d00f      	beq.n	8003878 <I2C_Disable_IRQ+0x62>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003858:	2920      	cmp	r1, #32
 800385a:	d010      	beq.n	800387e <I2C_Disable_IRQ+0x68>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800385c:	2940      	cmp	r1, #64	; 0x40
 800385e:	d011      	beq.n	8003884 <I2C_Disable_IRQ+0x6e>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003860:	6801      	ldr	r1, [r0, #0]
 8003862:	680a      	ldr	r2, [r1, #0]
 8003864:	ea22 0303 	bic.w	r3, r2, r3
 8003868:	600b      	str	r3, [r1, #0]
}
 800386a:	bc10      	pop	{r4}
 800386c:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800386e:	4623      	mov	r3, r4
 8003870:	e7ed      	b.n	800384e <I2C_Disable_IRQ+0x38>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003872:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003876:	e7ed      	b.n	8003854 <I2C_Disable_IRQ+0x3e>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003878:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800387c:	e7ec      	b.n	8003858 <I2C_Disable_IRQ+0x42>
    tmpisr |= I2C_IT_STOPI;
 800387e:	f043 0320 	orr.w	r3, r3, #32
 8003882:	e7eb      	b.n	800385c <I2C_Disable_IRQ+0x46>
    tmpisr |= I2C_IT_TCI;
 8003884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003888:	e7ea      	b.n	8003860 <I2C_Disable_IRQ+0x4a>
  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800388a:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 800388e:	d10b      	bne.n	80038a8 <I2C_Disable_IRQ+0x92>
  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003890:	2910      	cmp	r1, #16
 8003892:	d00c      	beq.n	80038ae <I2C_Disable_IRQ+0x98>
  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003894:	2920      	cmp	r1, #32
 8003896:	d00d      	beq.n	80038b4 <I2C_Disable_IRQ+0x9e>
  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003898:	2940      	cmp	r1, #64	; 0x40
 800389a:	d00e      	beq.n	80038ba <I2C_Disable_IRQ+0xa4>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800389c:	6801      	ldr	r1, [r0, #0]
 800389e:	680a      	ldr	r2, [r1, #0]
 80038a0:	ea22 0303 	bic.w	r3, r2, r3
 80038a4:	600b      	str	r3, [r1, #0]
 80038a6:	4770      	bx	lr
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80038a8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80038ac:	e7f0      	b.n	8003890 <I2C_Disable_IRQ+0x7a>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80038ae:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80038b2:	e7ef      	b.n	8003894 <I2C_Disable_IRQ+0x7e>
    tmpisr |= I2C_IT_STOPI;
 80038b4:	f043 0320 	orr.w	r3, r3, #32
 80038b8:	e7ee      	b.n	8003898 <I2C_Disable_IRQ+0x82>
    tmpisr |= I2C_IT_TCI;
 80038ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038be:	e7ed      	b.n	800389c <I2C_Disable_IRQ+0x86>

080038c0 <HAL_I2C_EV_IRQHandler>:
{
 80038c0:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80038c2:	6803      	ldr	r3, [r0, #0]
 80038c4:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80038c6:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 80038c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80038ca:	b103      	cbz	r3, 80038ce <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 80038cc:	4798      	blx	r3
}
 80038ce:	bd08      	pop	{r3, pc}

080038d0 <HAL_I2C_SlaveTxCpltCallback>:
}
 80038d0:	4770      	bx	lr

080038d2 <HAL_I2C_SlaveRxCpltCallback>:
}
 80038d2:	4770      	bx	lr

080038d4 <I2C_ITSlaveSeqCplt>:
{
 80038d4:	b510      	push	{r4, lr}
 80038d6:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80038d8:	6803      	ldr	r3, [r0, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038dc:	2100      	movs	r1, #0
 80038de:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80038e2:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80038e6:	d00e      	beq.n	8003906 <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038ee:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80038f0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b29      	cmp	r3, #41	; 0x29
 80038f8:	d00d      	beq.n	8003916 <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80038fa:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b2a      	cmp	r3, #42	; 0x2a
 8003902:	d018      	beq.n	8003936 <I2C_ITSlaveSeqCplt+0x62>
}
 8003904:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003906:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800390a:	d0f1      	beq.n	80038f0 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	e7ec      	b.n	80038f0 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003916:	2328      	movs	r3, #40	; 0x28
 8003918:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800391c:	2321      	movs	r3, #33	; 0x21
 800391e:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003920:	2101      	movs	r1, #1
 8003922:	4620      	mov	r0, r4
 8003924:	f7ff ff77 	bl	8003816 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003928:	2300      	movs	r3, #0
 800392a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800392e:	4620      	mov	r0, r4
 8003930:	f7ff ffce 	bl	80038d0 <HAL_I2C_SlaveTxCpltCallback>
 8003934:	e7e6      	b.n	8003904 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003936:	2328      	movs	r3, #40	; 0x28
 8003938:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800393c:	2322      	movs	r3, #34	; 0x22
 800393e:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003940:	2102      	movs	r1, #2
 8003942:	4620      	mov	r0, r4
 8003944:	f7ff ff67 	bl	8003816 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003948:	2300      	movs	r3, #0
 800394a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800394e:	4620      	mov	r0, r4
 8003950:	f7ff ffbf 	bl	80038d2 <HAL_I2C_SlaveRxCpltCallback>
}
 8003954:	e7d6      	b.n	8003904 <I2C_ITSlaveSeqCplt+0x30>

08003956 <HAL_I2C_AddrCallback>:
}
 8003956:	4770      	bx	lr

08003958 <I2C_ITAddrCplt>:
{
 8003958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395a:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800395c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003960:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003964:	2b28      	cmp	r3, #40	; 0x28
 8003966:	d006      	beq.n	8003976 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003968:	6803      	ldr	r3, [r0, #0]
 800396a:	2208      	movs	r2, #8
 800396c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800396e:	2300      	movs	r3, #0
 8003970:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8003974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8003976:	6803      	ldr	r3, [r0, #0]
 8003978:	699e      	ldr	r6, [r3, #24]
 800397a:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800397e:	699a      	ldr	r2, [r3, #24]
 8003980:	0c12      	lsrs	r2, r2, #16
 8003982:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800398c:	68df      	ldr	r7, [r3, #12]
 800398e:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003992:	68c1      	ldr	r1, [r0, #12]
 8003994:	2902      	cmp	r1, #2
 8003996:	d122      	bne.n	80039de <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003998:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 800399c:	f015 0f06 	tst.w	r5, #6
 80039a0:	d110      	bne.n	80039c4 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 80039a2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80039a4:	3101      	adds	r1, #1
 80039a6:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80039a8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80039aa:	2902      	cmp	r1, #2
 80039ac:	d1e2      	bne.n	8003974 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 80039ae:	2100      	movs	r1, #0
 80039b0:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80039b2:	2008      	movs	r0, #8
 80039b4:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 80039b6:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80039ba:	4631      	mov	r1, r6
 80039bc:	4620      	mov	r0, r4
 80039be:	f7ff ffca 	bl	8003956 <HAL_I2C_AddrCallback>
 80039c2:	e7d7      	b.n	8003974 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80039c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039c8:	f7ff ff25 	bl	8003816 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80039cc:	2300      	movs	r3, #0
 80039ce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80039d2:	463a      	mov	r2, r7
 80039d4:	4631      	mov	r1, r6
 80039d6:	4620      	mov	r0, r4
 80039d8:	f7ff ffbd 	bl	8003956 <HAL_I2C_AddrCallback>
 80039dc:	e7ca      	b.n	8003974 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80039de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039e2:	f7ff ff18 	bl	8003816 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80039e6:	2300      	movs	r3, #0
 80039e8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80039ec:	462a      	mov	r2, r5
 80039ee:	4631      	mov	r1, r6
 80039f0:	4620      	mov	r0, r4
 80039f2:	f7ff ffb0 	bl	8003956 <HAL_I2C_AddrCallback>
 80039f6:	e7bd      	b.n	8003974 <I2C_ITAddrCplt+0x1c>

080039f8 <HAL_I2C_ListenCpltCallback>:
}
 80039f8:	4770      	bx	lr
	...

080039fc <I2C_ITListenCplt>:
{
 80039fc:	b510      	push	{r4, lr}
 80039fe:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a00:	4b17      	ldr	r3, [pc, #92]	; (8003a60 <I2C_ITListenCplt+0x64>)
 8003a02:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a04:	2300      	movs	r3, #0
 8003a06:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a0e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003a12:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003a14:	f011 0f04 	tst.w	r1, #4
 8003a18:	d013      	beq.n	8003a42 <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a1a:	6803      	ldr	r3, [r0, #0]
 8003a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a1e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003a20:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a22:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003a24:	3301      	adds	r3, #1
 8003a26:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8003a28:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8003a2a:	b153      	cbz	r3, 8003a42 <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8003a30:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a3a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a3c:	f043 0304 	orr.w	r3, r3, #4
 8003a40:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003a42:	f248 0103 	movw	r1, #32771	; 0x8003
 8003a46:	4620      	mov	r0, r4
 8003a48:	f7ff fee5 	bl	8003816 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a4c:	6823      	ldr	r3, [r4, #0]
 8003a4e:	2210      	movs	r2, #16
 8003a50:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8003a52:	2300      	movs	r3, #0
 8003a54:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f7ff ffcd 	bl	80039f8 <HAL_I2C_ListenCpltCallback>
}
 8003a5e:	bd10      	pop	{r4, pc}
 8003a60:	ffff0000 	.word	0xffff0000

08003a64 <HAL_I2C_ErrorCallback>:
}
 8003a64:	4770      	bx	lr

08003a66 <HAL_I2C_AbortCpltCallback>:
}
 8003a66:	4770      	bx	lr

08003a68 <I2C_TreatErrorCallback>:
{
 8003a68:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a6a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b60      	cmp	r3, #96	; 0x60
 8003a72:	d006      	beq.n	8003a82 <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a74:	2300      	movs	r3, #0
 8003a76:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a78:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003a7c:	f7ff fff2 	bl	8003a64 <HAL_I2C_ErrorCallback>
}
 8003a80:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8003a82:	2320      	movs	r3, #32
 8003a84:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a8c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a90:	f7ff ffe9 	bl	8003a66 <HAL_I2C_AbortCpltCallback>
 8003a94:	e7f4      	b.n	8003a80 <I2C_TreatErrorCallback+0x18>
	...

08003a98 <I2C_ITError>:
{
 8003a98:	b510      	push	{r4, lr}
 8003a9a:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003a9c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003aa0:	2000      	movs	r0, #0
 8003aa2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003aa6:	4a3b      	ldr	r2, [pc, #236]	; (8003b94 <I2C_ITError+0xfc>)
 8003aa8:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003aaa:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8003aac:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003ab2:	3b28      	subs	r3, #40	; 0x28
 8003ab4:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d819      	bhi.n	8003aee <I2C_ITError+0x56>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003aba:	2103      	movs	r1, #3
 8003abc:	4620      	mov	r0, r4
 8003abe:	f7ff feaa 	bl	8003816 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003ac2:	2328      	movs	r3, #40	; 0x28
 8003ac4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003ac8:	4b33      	ldr	r3, [pc, #204]	; (8003b98 <I2C_ITError+0x100>)
 8003aca:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8003acc:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003ace:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003ad0:	b11a      	cbz	r2, 8003ada <I2C_ITError+0x42>
 8003ad2:	2b11      	cmp	r3, #17
 8003ad4:	d01b      	beq.n	8003b0e <I2C_ITError+0x76>
 8003ad6:	2b21      	cmp	r3, #33	; 0x21
 8003ad8:	d019      	beq.n	8003b0e <I2C_ITError+0x76>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003ada:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003adc:	b11a      	cbz	r2, 8003ae6 <I2C_ITError+0x4e>
 8003ade:	2b12      	cmp	r3, #18
 8003ae0:	d036      	beq.n	8003b50 <I2C_ITError+0xb8>
 8003ae2:	2b22      	cmp	r3, #34	; 0x22
 8003ae4:	d034      	beq.n	8003b50 <I2C_ITError+0xb8>
    I2C_TreatErrorCallback(hi2c);
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	f7ff ffbe 	bl	8003a68 <I2C_TreatErrorCallback>
}
 8003aec:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003aee:	f248 0103 	movw	r1, #32771	; 0x8003
 8003af2:	4620      	mov	r0, r4
 8003af4:	f7ff fe8f 	bl	8003816 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003af8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b60      	cmp	r3, #96	; 0x60
 8003b00:	d002      	beq.n	8003b08 <I2C_ITError+0x70>
      hi2c->State         = HAL_I2C_STATE_READY;
 8003b02:	2320      	movs	r3, #32
 8003b04:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	6363      	str	r3, [r4, #52]	; 0x34
 8003b0c:	e7de      	b.n	8003acc <I2C_ITError+0x34>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8003b16:	d003      	beq.n	8003b20 <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b1e:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b20:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003b22:	f7ff fd8d 	bl	8003640 <HAL_DMA_GetState>
 8003b26:	2801      	cmp	r0, #1
 8003b28:	d00e      	beq.n	8003b48 <I2C_ITError+0xb0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b2c:	4a1b      	ldr	r2, [pc, #108]	; (8003b9c <I2C_ITError+0x104>)
 8003b2e:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8003b30:	2300      	movs	r3, #0
 8003b32:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b36:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003b38:	f7ff fcd4 	bl	80034e4 <HAL_DMA_Abort_IT>
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	d0d5      	beq.n	8003aec <I2C_ITError+0x54>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b40:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003b42:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003b44:	4798      	blx	r3
 8003b46:	e7d1      	b.n	8003aec <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8003b48:	4620      	mov	r0, r4
 8003b4a:	f7ff ff8d 	bl	8003a68 <I2C_TreatErrorCallback>
 8003b4e:	e7cd      	b.n	8003aec <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003b58:	d003      	beq.n	8003b62 <I2C_ITError+0xca>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b60:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b62:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003b64:	f7ff fd6c 	bl	8003640 <HAL_DMA_GetState>
 8003b68:	2801      	cmp	r0, #1
 8003b6a:	d00e      	beq.n	8003b8a <I2C_ITError+0xf2>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b6e:	4a0b      	ldr	r2, [pc, #44]	; (8003b9c <I2C_ITError+0x104>)
 8003b70:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8003b72:	2300      	movs	r3, #0
 8003b74:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b78:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003b7a:	f7ff fcb3 	bl	80034e4 <HAL_DMA_Abort_IT>
 8003b7e:	2800      	cmp	r0, #0
 8003b80:	d0b4      	beq.n	8003aec <I2C_ITError+0x54>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b82:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003b84:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003b86:	4798      	blx	r3
 8003b88:	e7b0      	b.n	8003aec <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	f7ff ff6c 	bl	8003a68 <I2C_TreatErrorCallback>
 8003b90:	e7ac      	b.n	8003aec <I2C_ITError+0x54>
 8003b92:	bf00      	nop
 8003b94:	ffff0000 	.word	0xffff0000
 8003b98:	08003d09 	.word	0x08003d09
 8003b9c:	08003ec1 	.word	0x08003ec1

08003ba0 <I2C_ITSlaveCplt>:
{
 8003ba0:	b570      	push	{r4, r5, r6, lr}
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003ba6:	6802      	ldr	r2, [r0, #0]
 8003ba8:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003baa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003bae:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bb0:	2120      	movs	r1, #32
 8003bb2:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003bb4:	2b21      	cmp	r3, #33	; 0x21
 8003bb6:	d00d      	beq.n	8003bd4 <I2C_ITSlaveCplt+0x34>
 8003bb8:	2b29      	cmp	r3, #41	; 0x29
 8003bba:	d00b      	beq.n	8003bd4 <I2C_ITSlaveCplt+0x34>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003bbc:	2b22      	cmp	r3, #34	; 0x22
 8003bbe:	d001      	beq.n	8003bc4 <I2C_ITSlaveCplt+0x24>
 8003bc0:	2b2a      	cmp	r3, #42	; 0x2a
 8003bc2:	d10e      	bne.n	8003be2 <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003bc4:	f248 0102 	movw	r1, #32770	; 0x8002
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f7ff fe24 	bl	8003816 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003bce:	2322      	movs	r3, #34	; 0x22
 8003bd0:	6323      	str	r3, [r4, #48]	; 0x30
 8003bd2:	e006      	b.n	8003be2 <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003bd4:	f248 0101 	movw	r1, #32769	; 0x8001
 8003bd8:	4620      	mov	r0, r4
 8003bda:	f7ff fe1c 	bl	8003816 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003bde:	2321      	movs	r3, #33	; 0x21
 8003be0:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003be2:	6822      	ldr	r2, [r4, #0]
 8003be4:	6853      	ldr	r3, [r2, #4]
 8003be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bea:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8003bec:	6822      	ldr	r2, [r4, #0]
 8003bee:	6853      	ldr	r3, [r2, #4]
 8003bf0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003bf4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003bf8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003bfc:	f023 0301 	bic.w	r3, r3, #1
 8003c00:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8003c02:	4620      	mov	r0, r4
 8003c04:	f7ff fdf6 	bl	80037f4 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003c08:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8003c0c:	d040      	beq.n	8003c90 <I2C_ITSlaveCplt+0xf0>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c0e:	6822      	ldr	r2, [r4, #0]
 8003c10:	6813      	ldr	r3, [r2, #0]
 8003c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c16:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8003c18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c1a:	b11b      	cbz	r3, 8003c24 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003c24:	f015 0f04 	tst.w	r5, #4
 8003c28:	d011      	beq.n	8003c4e <I2C_ITSlaveCplt+0xae>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003c2a:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c34:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c38:	3301      	adds	r3, #1
 8003c3a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8003c3c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003c3e:	b133      	cbz	r3, 8003c4e <I2C_ITSlaveCplt+0xae>
      hi2c->XferSize--;
 8003c40:	3b01      	subs	r3, #1
 8003c42:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003c44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8003c4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	b11b      	cbz	r3, 8003c5c <I2C_ITSlaveCplt+0xbc>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c54:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c56:	f043 0304 	orr.w	r3, r3, #4
 8003c5a:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003c62:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c66:	bb1b      	cbnz	r3, 8003cb0 <I2C_ITSlaveCplt+0x110>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003c68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c6a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c6e:	d12d      	bne.n	8003ccc <I2C_ITSlaveCplt+0x12c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c70:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b22      	cmp	r3, #34	; 0x22
 8003c78:	d038      	beq.n	8003cec <I2C_ITSlaveCplt+0x14c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003c7a:	2320      	movs	r3, #32
 8003c7c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c80:	2300      	movs	r3, #0
 8003c82:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003c84:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c88:	4620      	mov	r0, r4
 8003c8a:	f7ff fe21 	bl	80038d0 <HAL_I2C_SlaveTxCpltCallback>
}
 8003c8e:	e02c      	b.n	8003cea <I2C_ITSlaveCplt+0x14a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003c90:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8003c94:	d0c6      	beq.n	8003c24 <I2C_ITSlaveCplt+0x84>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c96:	6822      	ldr	r2, [r4, #0]
 8003c98:	6813      	ldr	r3, [r2, #0]
 8003c9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c9e:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8003ca0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0be      	beq.n	8003c24 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003cae:	e7b9      	b.n	8003c24 <I2C_ITSlaveCplt+0x84>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003cb0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	f7ff fef0 	bl	8003a98 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003cb8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b28      	cmp	r3, #40	; 0x28
 8003cc0:	d113      	bne.n	8003cea <I2C_ITSlaveCplt+0x14a>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	f7ff fe99 	bl	80039fc <I2C_ITListenCplt>
 8003cca:	e00e      	b.n	8003cea <I2C_ITSlaveCplt+0x14a>
    I2C_ITSlaveSeqCplt(hi2c);
 8003ccc:	4620      	mov	r0, r4
 8003cce:	f7ff fe01 	bl	80038d4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cd2:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <I2C_ITSlaveCplt+0x164>)
 8003cd4:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003cd6:	2320      	movs	r3, #32
 8003cd8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003ce0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	f7ff fe87 	bl	80039f8 <HAL_I2C_ListenCpltCallback>
}
 8003cea:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8003cec:	2320      	movs	r3, #32
 8003cee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003cf6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	f7ff fde9 	bl	80038d2 <HAL_I2C_SlaveRxCpltCallback>
 8003d00:	e7f3      	b.n	8003cea <I2C_ITSlaveCplt+0x14a>
 8003d02:	bf00      	nop
 8003d04:	ffff0000 	.word	0xffff0000

08003d08 <I2C_Slave_ISR_IT>:
{
 8003d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8003d0a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8003d0c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	f000 809e 	beq.w	8003e52 <I2C_Slave_ISR_IT+0x14a>
 8003d16:	4604      	mov	r4, r0
 8003d18:	460d      	mov	r5, r1
 8003d1a:	4616      	mov	r6, r2
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003d22:	f011 0f20 	tst.w	r1, #32
 8003d26:	d002      	beq.n	8003d2e <I2C_Slave_ISR_IT+0x26>
 8003d28:	f012 0f20 	tst.w	r2, #32
 8003d2c:	d119      	bne.n	8003d62 <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003d2e:	f015 0f10 	tst.w	r5, #16
 8003d32:	d03e      	beq.n	8003db2 <I2C_Slave_ISR_IT+0xaa>
 8003d34:	f016 0f10 	tst.w	r6, #16
 8003d38:	d03b      	beq.n	8003db2 <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 8003d3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	bb43      	cbnz	r3, 8003d92 <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003d40:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b28      	cmp	r3, #40	; 0x28
 8003d48:	d00e      	beq.n	8003d68 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003d4a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b29      	cmp	r3, #41	; 0x29
 8003d52:	d011      	beq.n	8003d78 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	2210      	movs	r2, #16
 8003d58:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8003d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003d62:	f7ff ff1d 	bl	8003ba0 <I2C_ITSlaveCplt>
 8003d66:	e7e2      	b.n	8003d2e <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003d68:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8003d6c:	d1ed      	bne.n	8003d4a <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003d6e:	4629      	mov	r1, r5
 8003d70:	4620      	mov	r0, r4
 8003d72:	f7ff fe43 	bl	80039fc <I2C_ITListenCplt>
 8003d76:	e7f0      	b.n	8003d5a <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003d78:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8003d7c:	d0ea      	beq.n	8003d54 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	2210      	movs	r2, #16
 8003d82:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8003d84:	4620      	mov	r0, r4
 8003d86:	f7ff fd35 	bl	80037f4 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f7ff fda2 	bl	80038d4 <I2C_ITSlaveSeqCplt>
 8003d90:	e7e3      	b.n	8003d5a <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	2210      	movs	r2, #16
 8003d96:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d98:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d9a:	f043 0304 	orr.w	r3, r3, #4
 8003d9e:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003da0:	b117      	cbz	r7, 8003da8 <I2C_Slave_ISR_IT+0xa0>
 8003da2:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8003da6:	d1d8      	bne.n	8003d5a <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003da8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003daa:	4620      	mov	r0, r4
 8003dac:	f7ff fe74 	bl	8003a98 <I2C_ITError>
 8003db0:	e7d3      	b.n	8003d5a <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003db2:	f015 0f04 	tst.w	r5, #4
 8003db6:	d01f      	beq.n	8003df8 <I2C_Slave_ISR_IT+0xf0>
 8003db8:	f016 0f04 	tst.w	r6, #4
 8003dbc:	d01c      	beq.n	8003df8 <I2C_Slave_ISR_IT+0xf0>
    if (hi2c->XferCount > 0U)
 8003dbe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	b173      	cbz	r3, 8003de2 <I2C_Slave_ISR_IT+0xda>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003dca:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003dcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003dce:	3301      	adds	r3, #1
 8003dd0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003dd2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003dd8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8003de2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1b7      	bne.n	8003d5a <I2C_Slave_ISR_IT+0x52>
 8003dea:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8003dee:	d0b4      	beq.n	8003d5a <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 8003df0:	4620      	mov	r0, r4
 8003df2:	f7ff fd6f 	bl	80038d4 <I2C_ITSlaveSeqCplt>
 8003df6:	e7b0      	b.n	8003d5a <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003df8:	f015 0f08 	tst.w	r5, #8
 8003dfc:	d002      	beq.n	8003e04 <I2C_Slave_ISR_IT+0xfc>
 8003dfe:	f016 0f08 	tst.w	r6, #8
 8003e02:	d118      	bne.n	8003e36 <I2C_Slave_ISR_IT+0x12e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003e04:	f015 0f02 	tst.w	r5, #2
 8003e08:	d0a7      	beq.n	8003d5a <I2C_Slave_ISR_IT+0x52>
 8003e0a:	f016 0f02 	tst.w	r6, #2
 8003e0e:	d0a4      	beq.n	8003d5a <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 8003e10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	b1a3      	cbz	r3, 8003e40 <I2C_Slave_ISR_IT+0x138>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003e18:	6823      	ldr	r3, [r4, #0]
 8003e1a:	7812      	ldrb	r2, [r2, #0]
 8003e1c:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e20:	3301      	adds	r3, #1
 8003e22:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003e24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003e2e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003e30:	3b01      	subs	r3, #1
 8003e32:	8523      	strh	r3, [r4, #40]	; 0x28
 8003e34:	e791      	b.n	8003d5a <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003e36:	4629      	mov	r1, r5
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f7ff fd8d 	bl	8003958 <I2C_ITAddrCplt>
 8003e3e:	e78c      	b.n	8003d5a <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003e40:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8003e44:	d001      	beq.n	8003e4a <I2C_Slave_ISR_IT+0x142>
 8003e46:	2f00      	cmp	r7, #0
 8003e48:	d187      	bne.n	8003d5a <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f7ff fd42 	bl	80038d4 <I2C_ITSlaveSeqCplt>
 8003e50:	e783      	b.n	8003d5a <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8003e52:	2002      	movs	r0, #2
 8003e54:	e784      	b.n	8003d60 <I2C_Slave_ISR_IT+0x58>

08003e56 <HAL_I2C_ER_IRQHandler>:
{
 8003e56:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003e58:	6802      	ldr	r2, [r0, #0]
 8003e5a:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003e5c:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003e5e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003e62:	d009      	beq.n	8003e78 <HAL_I2C_ER_IRQHandler+0x22>
 8003e64:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003e68:	d006      	beq.n	8003e78 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003e6a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003e6c:	f044 0401 	orr.w	r4, r4, #1
 8003e70:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e72:	f44f 7480 	mov.w	r4, #256	; 0x100
 8003e76:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003e78:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003e7c:	d00a      	beq.n	8003e94 <HAL_I2C_ER_IRQHandler+0x3e>
 8003e7e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003e82:	d007      	beq.n	8003e94 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003e84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003e86:	f042 0208 	orr.w	r2, r2, #8
 8003e8a:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e8c:	6802      	ldr	r2, [r0, #0]
 8003e8e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003e92:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003e94:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003e98:	d00a      	beq.n	8003eb0 <HAL_I2C_ER_IRQHandler+0x5a>
 8003e9a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003e9e:	d007      	beq.n	8003eb0 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003ea0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003ea2:	f043 0302 	orr.w	r3, r3, #2
 8003ea6:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ea8:	6803      	ldr	r3, [r0, #0]
 8003eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eae:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8003eb0:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003eb2:	f011 0f0b 	tst.w	r1, #11
 8003eb6:	d100      	bne.n	8003eba <HAL_I2C_ER_IRQHandler+0x64>
}
 8003eb8:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 8003eba:	f7ff fded 	bl	8003a98 <I2C_ITError>
}
 8003ebe:	e7fb      	b.n	8003eb8 <HAL_I2C_ER_IRQHandler+0x62>

08003ec0 <I2C_DMAAbort>:
{
 8003ec0:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003ec2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->hdmatx != NULL)
 8003ec4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003ec6:	b10b      	cbz	r3, 8003ecc <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003ec8:	2200      	movs	r2, #0
 8003eca:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 8003ecc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003ece:	b10b      	cbz	r3, 8003ed4 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 8003ed4:	f7ff fdc8 	bl	8003a68 <I2C_TreatErrorCallback>
}
 8003ed8:	bd08      	pop	{r3, pc}
	...

08003edc <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003edc:	4a02      	ldr	r2, [pc, #8]	; (8003ee8 <HAL_PWR_EnableBkUpAccess+0xc>)
 8003ede:	6813      	ldr	r3, [r2, #0]
 8003ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee4:	6013      	str	r3, [r2, #0]
}
 8003ee6:	4770      	bx	lr
 8003ee8:	58000400 	.word	0x58000400

08003eec <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003eec:	b510      	push	{r4, lr}
 8003eee:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003ef0:	b9a0      	cbnz	r0, 8003f1c <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8003ef2:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <HAL_PWR_EnterSLEEPMode+0x44>)
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003efa:	d10a      	bne.n	8003f12 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003efc:	4a0d      	ldr	r2, [pc, #52]	; (8003f34 <HAL_PWR_EnterSLEEPMode+0x48>)
 8003efe:	6913      	ldr	r3, [r2, #16]
 8003f00:	f023 0304 	bic.w	r3, r3, #4
 8003f04:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003f06:	2c01      	cmp	r4, #1
 8003f08:	d010      	beq.n	8003f2c <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003f0a:	bf40      	sev
    __WFE();
 8003f0c:	bf20      	wfe
    __WFE();
 8003f0e:	bf20      	wfe
  }
}
 8003f10:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8003f12:	f000 f821 	bl	8003f58 <HAL_PWREx_DisableLowPowerRunMode>
 8003f16:	2800      	cmp	r0, #0
 8003f18:	d0f0      	beq.n	8003efc <HAL_PWR_EnterSLEEPMode+0x10>
 8003f1a:	e7f9      	b.n	8003f10 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8003f1c:	4b04      	ldr	r3, [pc, #16]	; (8003f30 <HAL_PWR_EnterSLEEPMode+0x44>)
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003f24:	d1ea      	bne.n	8003efc <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8003f26:	f000 f80f 	bl	8003f48 <HAL_PWREx_EnableLowPowerRunMode>
 8003f2a:	e7e7      	b.n	8003efc <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8003f2c:	bf30      	wfi
 8003f2e:	e7ef      	b.n	8003f10 <HAL_PWR_EnterSLEEPMode+0x24>
 8003f30:	58000400 	.word	0x58000400
 8003f34:	e000ed00 	.word	0xe000ed00

08003f38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8003f38:	4b02      	ldr	r3, [pc, #8]	; (8003f44 <HAL_PWREx_GetVoltageRange+0xc>)
 8003f3a:	6818      	ldr	r0, [r3, #0]
}
 8003f3c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	58000400 	.word	0x58000400

08003f48 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8003f48:	4a02      	ldr	r2, [pc, #8]	; (8003f54 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8003f4a:	6813      	ldr	r3, [r2, #0]
 8003f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f50:	6013      	str	r3, [r2, #0]
}
 8003f52:	4770      	bx	lr
 8003f54:	58000400 	.word	0x58000400

08003f58 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8003f58:	4a0f      	ldr	r2, [pc, #60]	; (8003f98 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8003f5a:	6813      	ldr	r3, [r2, #0]
 8003f5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f60:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8003f62:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	2332      	movs	r3, #50	; 0x32
 8003f68:	fb03 f302 	mul.w	r3, r3, r2
 8003f6c:	4a0c      	ldr	r2, [pc, #48]	; (8003fa0 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8003f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f72:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003f74:	4a08      	ldr	r2, [pc, #32]	; (8003f98 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8003f76:	6952      	ldr	r2, [r2, #20]
 8003f78:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003f7c:	d002      	beq.n	8003f84 <HAL_PWREx_DisableLowPowerRunMode+0x2c>
 8003f7e:	b10b      	cbz	r3, 8003f84 <HAL_PWREx_DisableLowPowerRunMode+0x2c>
  {
    wait_loop_index--;
 8003f80:	3b01      	subs	r3, #1
 8003f82:	e7f7      	b.n	8003f74 <HAL_PWREx_DisableLowPowerRunMode+0x1c>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8003f84:	4b04      	ldr	r3, [pc, #16]	; (8003f98 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003f8c:	d101      	bne.n	8003f92 <HAL_PWREx_DisableLowPowerRunMode+0x3a>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8003f8e:	2000      	movs	r0, #0
 8003f90:	4770      	bx	lr
    return HAL_TIMEOUT;
 8003f92:	2003      	movs	r0, #3
}
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	58000400 	.word	0x58000400
 8003f9c:	20000050 	.word	0x20000050
 8003fa0:	431bde83 	.word	0x431bde83

08003fa4 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8003fa4:	4a0c      	ldr	r2, [pc, #48]	; (8003fd8 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8003fa6:	6813      	ldr	r3, [r2, #0]
 8003fa8:	f023 0307 	bic.w	r3, r3, #7
 8003fac:	f043 0302 	orr.w	r3, r3, #2
 8003fb0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003fb2:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8003fb4:	6913      	ldr	r3, [r2, #16]
 8003fb6:	f043 0304 	orr.w	r3, r3, #4
 8003fba:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8003fbc:	2801      	cmp	r0, #1
 8003fbe:	d008      	beq.n	8003fd2 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003fc0:	bf40      	sev
    __WFE();
 8003fc2:	bf20      	wfe
    __WFE();
 8003fc4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003fc6:	4a05      	ldr	r2, [pc, #20]	; (8003fdc <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8003fc8:	6913      	ldr	r3, [r2, #16]
 8003fca:	f023 0304 	bic.w	r3, r3, #4
 8003fce:	6113      	str	r3, [r2, #16]
}
 8003fd0:	4770      	bx	lr
    __WFI();
 8003fd2:	bf30      	wfi
 8003fd4:	e7f7      	b.n	8003fc6 <HAL_PWREx_EnterSTOP2Mode+0x22>
 8003fd6:	bf00      	nop
 8003fd8:	58000400 	.word	0x58000400
 8003fdc:	e000ed00 	.word	0xe000ed00

08003fe0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003fe0:	b570      	push	{r4, r5, r6, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	460e      	mov	r6, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003fe8:	4b29      	ldr	r3, [pc, #164]	; (8004090 <RCC_SetFlashLatency+0xb0>)
 8003fea:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003fee:	9006      	str	r0, [sp, #24]
 8003ff0:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003ff4:	68d9      	ldr	r1, [r3, #12]
 8003ff6:	6898      	ldr	r0, [r3, #8]
 8003ff8:	9004      	str	r0, [sp, #16]
 8003ffa:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003ffe:	ad01      	add	r5, sp, #4
 8004000:	3310      	adds	r3, #16
 8004002:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004006:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800400a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800400e:	d01b      	beq.n	8004048 <RCC_SetFlashLatency+0x68>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004010:	2300      	movs	r3, #0
 8004012:	2b02      	cmp	r3, #2
 8004014:	d822      	bhi.n	800405c <RCC_SetFlashLatency+0x7c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004016:	aa08      	add	r2, sp, #32
 8004018:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800401c:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8004020:	42a2      	cmp	r2, r4
 8004022:	d215      	bcs.n	8004050 <RCC_SetFlashLatency+0x70>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004024:	3301      	adds	r3, #1
 8004026:	e7f4      	b.n	8004012 <RCC_SetFlashLatency+0x32>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004028:	3301      	adds	r3, #1
 800402a:	2b02      	cmp	r3, #2
 800402c:	d80e      	bhi.n	800404c <RCC_SetFlashLatency+0x6c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800402e:	aa08      	add	r2, sp, #32
 8004030:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004034:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8004038:	42a2      	cmp	r2, r4
 800403a:	d3f5      	bcc.n	8004028 <RCC_SetFlashLatency+0x48>
        latency = FLASH_LATENCY_RANGE[index];
 800403c:	aa08      	add	r2, sp, #32
 800403e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004042:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8004046:	e00a      	b.n	800405e <RCC_SetFlashLatency+0x7e>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004048:	2300      	movs	r3, #0
 800404a:	e7ee      	b.n	800402a <RCC_SetFlashLatency+0x4a>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800404c:	2500      	movs	r5, #0
 800404e:	e006      	b.n	800405e <RCC_SetFlashLatency+0x7e>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004050:	aa08      	add	r2, sp, #32
 8004052:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004056:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800405a:	e000      	b.n	800405e <RCC_SetFlashLatency+0x7e>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800405c:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800405e:	4a0d      	ldr	r2, [pc, #52]	; (8004094 <RCC_SetFlashLatency+0xb4>)
 8004060:	6813      	ldr	r3, [r2, #0]
 8004062:	f023 0307 	bic.w	r3, r3, #7
 8004066:	432b      	orrs	r3, r5
 8004068:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800406a:	f7fe fa3f 	bl	80024ec <HAL_GetTick>
 800406e:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004070:	4b08      	ldr	r3, [pc, #32]	; (8004094 <RCC_SetFlashLatency+0xb4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	42ab      	cmp	r3, r5
 800407a:	d006      	beq.n	800408a <RCC_SetFlashLatency+0xaa>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800407c:	f7fe fa36 	bl	80024ec <HAL_GetTick>
 8004080:	1b00      	subs	r0, r0, r4
 8004082:	2802      	cmp	r0, #2
 8004084:	d9f4      	bls.n	8004070 <RCC_SetFlashLatency+0x90>
    {
      return HAL_TIMEOUT;
 8004086:	2003      	movs	r0, #3
 8004088:	e000      	b.n	800408c <RCC_SetFlashLatency+0xac>
    }
  }
  return HAL_OK;
 800408a:	2000      	movs	r0, #0
}
 800408c:	b008      	add	sp, #32
 800408e:	bd70      	pop	{r4, r5, r6, pc}
 8004090:	08017598 	.word	0x08017598
 8004094:	58004000 	.word	0x58004000

08004098 <RCC_SetFlashLatencyFromMSIRange>:
{
 8004098:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800409a:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800409e:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 80040a0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80040a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	4a08      	ldr	r2, [pc, #32]	; (80040d4 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 80040b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80040b6:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80040ba:	f7ff ff3d 	bl	8003f38 <HAL_PWREx_GetVoltageRange>
 80040be:	4601      	mov	r1, r0
 80040c0:	4805      	ldr	r0, [pc, #20]	; (80040d8 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80040c2:	fba0 3004 	umull	r3, r0, r0, r4
 80040c6:	0c80      	lsrs	r0, r0, #18
 80040c8:	f7ff ff8a 	bl	8003fe0 <RCC_SetFlashLatency>
}
 80040cc:	bd10      	pop	{r4, pc}
 80040ce:	bf00      	nop
 80040d0:	08017a00 	.word	0x08017a00
 80040d4:	080179a0 	.word	0x080179a0
 80040d8:	431bde83 	.word	0x431bde83

080040dc <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80040dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e0:	689a      	ldr	r2, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80040e8:	f012 020c 	ands.w	r2, r2, #12
 80040ec:	d00a      	beq.n	8004104 <HAL_RCC_GetSysClockFreq+0x28>
 80040ee:	2a0c      	cmp	r2, #12
 80040f0:	d006      	beq.n	8004100 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040f2:	2a04      	cmp	r2, #4
 80040f4:	d047      	beq.n	8004186 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040f6:	2a08      	cmp	r2, #8
 80040f8:	d03b      	beq.n	8004172 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 80040fa:	2100      	movs	r1, #0
  uint32_t sysclockfreq = 0U;
 80040fc:	4608      	mov	r0, r1
 80040fe:	e026      	b.n	800414e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004100:	2b01      	cmp	r3, #1
 8004102:	d1f6      	bne.n	80040f2 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f013 0308 	ands.w	r3, r3, #8
 800410e:	d00d      	beq.n	800412c <HAL_RCC_GetSysClockFreq+0x50>
 8004110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f013 0308 	ands.w	r3, r3, #8
 800411a:	d124      	bne.n	8004166 <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800411c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004120:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004124:	492e      	ldr	r1, [pc, #184]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004126:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800412a:	e00e      	b.n	800414a <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800412c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004130:	6809      	ldr	r1, [r1, #0]
 8004132:	f011 0f08 	tst.w	r1, #8
 8004136:	d112      	bne.n	800415e <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004140:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004144:	4926      	ldr	r1, [pc, #152]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004146:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800414a:	b1d2      	cbz	r2, 8004182 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 800414c:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800414e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004158:	2b0c      	cmp	r3, #12
 800415a:	d01a      	beq.n	8004192 <HAL_RCC_GetSysClockFreq+0xb6>
}
 800415c:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800415e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004162:	6809      	ldr	r1, [r1, #0]
 8004164:	e7ee      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0x68>
 8004166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800416a:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800416c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004170:	e7d8      	b.n	8004124 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004176:	6819      	ldr	r1, [r3, #0]
 8004178:	f411 1180 	ands.w	r1, r1, #1048576	; 0x100000
 800417c:	d106      	bne.n	800418c <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 800417e:	4819      	ldr	r0, [pc, #100]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004180:	e7e5      	b.n	800414e <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8004182:	4608      	mov	r0, r1
 8004184:	e7e3      	b.n	800414e <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8004186:	2100      	movs	r1, #0
    sysclockfreq = HSI_VALUE;
 8004188:	4817      	ldr	r0, [pc, #92]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800418a:	e7e0      	b.n	800414e <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 800418c:	2100      	movs	r1, #0
      sysclockfreq = HSE_VALUE / 2U;
 800418e:	4816      	ldr	r0, [pc, #88]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004190:	e7dd      	b.n	800414e <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800419c:	2b02      	cmp	r3, #2
 800419e:	d009      	beq.n	80041b4 <HAL_RCC_GetSysClockFreq+0xd8>
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d108      	bne.n	80041b6 <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80041a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80041ae:	d115      	bne.n	80041dc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80041b0:	490c      	ldr	r1, [pc, #48]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80041b2:	e000      	b.n	80041b6 <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 80041b4:	490c      	ldr	r1, [pc, #48]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80041b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041ba:	68d0      	ldr	r0, [r2, #12]
 80041bc:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80041c0:	fb00 f001 	mul.w	r0, r0, r1
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80041c4:	68d3      	ldr	r3, [r2, #12]
 80041c6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80041ca:	3301      	adds	r3, #1
 80041cc:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80041d0:	68d3      	ldr	r3, [r2, #12]
 80041d2:	0f5b      	lsrs	r3, r3, #29
 80041d4:	3301      	adds	r3, #1
 80041d6:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80041da:	e7bf      	b.n	800415c <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 80041dc:	4902      	ldr	r1, [pc, #8]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80041de:	e7ea      	b.n	80041b6 <HAL_RCC_GetSysClockFreq+0xda>
 80041e0:	08017a00 	.word	0x08017a00
 80041e4:	01e84800 	.word	0x01e84800
 80041e8:	00f42400 	.word	0x00f42400

080041ec <HAL_RCC_GetHCLKFreq>:
{
 80041ec:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80041ee:	f7ff ff75 	bl	80040dc <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80041f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80041fc:	4a02      	ldr	r2, [pc, #8]	; (8004208 <HAL_RCC_GetHCLKFreq+0x1c>)
 80041fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004202:	fbb0 f0f3 	udiv	r0, r0, r3
 8004206:	bd08      	pop	{r3, pc}
 8004208:	080179a0 	.word	0x080179a0

0800420c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800420c:	2800      	cmp	r0, #0
 800420e:	f000 8318 	beq.w	8004842 <HAL_RCC_OscConfig+0x636>
{
 8004212:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004214:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800421a:	689d      	ldr	r5, [r3, #8]
 800421c:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004220:	68de      	ldr	r6, [r3, #12]
 8004222:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004226:	6803      	ldr	r3, [r0, #0]
 8004228:	f013 0f20 	tst.w	r3, #32
 800422c:	f000 808f 	beq.w	800434e <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004230:	b1ed      	cbz	r5, 800426e <HAL_RCC_OscConfig+0x62>
 8004232:	2d0c      	cmp	r5, #12
 8004234:	d019      	beq.n	800426a <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004236:	6a23      	ldr	r3, [r4, #32]
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 80bc 	beq.w	80043b6 <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800423e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004242:	6813      	ldr	r3, [r2, #0]
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800424a:	f7fe f94f 	bl	80024ec <HAL_GetTick>
 800424e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f013 0f02 	tst.w	r3, #2
 800425a:	d165      	bne.n	8004328 <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800425c:	f7fe f946 	bl	80024ec <HAL_GetTick>
 8004260:	1bc0      	subs	r0, r0, r7
 8004262:	2802      	cmp	r0, #2
 8004264:	d9f4      	bls.n	8004250 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8004266:	2003      	movs	r0, #3
 8004268:	e2f8      	b.n	800485c <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800426a:	2e01      	cmp	r6, #1
 800426c:	d1e3      	bne.n	8004236 <HAL_RCC_OscConfig+0x2a>
 800426e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f013 0f02 	tst.w	r3, #2
 8004278:	d003      	beq.n	8004282 <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800427a:	6a23      	ldr	r3, [r4, #32]
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 82e2 	beq.w	8004846 <HAL_RCC_OscConfig+0x63a>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004282:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f013 0f08 	tst.w	r3, #8
 800428e:	d029      	beq.n	80042e4 <HAL_RCC_OscConfig+0xd8>
 8004290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800429a:	4298      	cmp	r0, r3
 800429c:	d92a      	bls.n	80042f4 <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800429e:	f7ff fefb 	bl	8004098 <RCC_SetFlashLatencyFromMSIRange>
 80042a2:	2800      	cmp	r0, #0
 80042a4:	f040 82d1 	bne.w	800484a <HAL_RCC_OscConfig+0x63e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	f042 0208 	orr.w	r2, r2, #8
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80042ba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80042bc:	430a      	orrs	r2, r1
 80042be:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80042c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80042cc:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80042ce:	f7ff ff8d 	bl	80041ec <HAL_RCC_GetHCLKFreq>
 80042d2:	4bbc      	ldr	r3, [pc, #752]	; (80045c4 <HAL_RCC_OscConfig+0x3b8>)
 80042d4:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80042d6:	4bbc      	ldr	r3, [pc, #752]	; (80045c8 <HAL_RCC_OscConfig+0x3bc>)
 80042d8:	6818      	ldr	r0, [r3, #0]
 80042da:	f7fe f905 	bl	80024e8 <HAL_InitTick>
        if (status != HAL_OK)
 80042de:	2800      	cmp	r0, #0
 80042e0:	d035      	beq.n	800434e <HAL_RCC_OscConfig+0x142>
 80042e2:	e2bb      	b.n	800485c <HAL_RCC_OscConfig+0x650>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ec:	091b      	lsrs	r3, r3, #4
 80042ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042f2:	e7d2      	b.n	800429a <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	f042 0208 	orr.w	r2, r2, #8
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004306:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004308:	430a      	orrs	r2, r1
 800430a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800430c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004314:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004318:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800431a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800431c:	f7ff febc 	bl	8004098 <RCC_SetFlashLatencyFromMSIRange>
 8004320:	2800      	cmp	r0, #0
 8004322:	d0d4      	beq.n	80042ce <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 8004324:	2001      	movs	r0, #1
 8004326:	e299      	b.n	800485c <HAL_RCC_OscConfig+0x650>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	f042 0208 	orr.w	r2, r2, #8
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800433a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800433c:	430a      	orrs	r2, r1
 800433e:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004340:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004348:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800434c:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	f013 0f01 	tst.w	r3, #1
 8004354:	d051      	beq.n	80043fa <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004356:	2d08      	cmp	r5, #8
 8004358:	d045      	beq.n	80043e6 <HAL_RCC_OscConfig+0x1da>
 800435a:	2d0c      	cmp	r5, #12
 800435c:	d041      	beq.n	80043e2 <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800435e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004362:	6813      	ldr	r3, [r2, #0]
 8004364:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004368:	68a1      	ldr	r1, [r4, #8]
 800436a:	430b      	orrs	r3, r1
 800436c:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800436e:	6863      	ldr	r3, [r4, #4]
 8004370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004374:	d063      	beq.n	800443e <HAL_RCC_OscConfig+0x232>
 8004376:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800437a:	d065      	beq.n	8004448 <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800437c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004386:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800438e:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004390:	6863      	ldr	r3, [r4, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d063      	beq.n	800445e <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 8004396:	f7fe f8a9 	bl	80024ec <HAL_GetTick>
 800439a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800439c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80043a6:	d128      	bne.n	80043fa <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a8:	f7fe f8a0 	bl	80024ec <HAL_GetTick>
 80043ac:	1bc0      	subs	r0, r0, r7
 80043ae:	2864      	cmp	r0, #100	; 0x64
 80043b0:	d9f4      	bls.n	800439c <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 80043b2:	2003      	movs	r0, #3
 80043b4:	e252      	b.n	800485c <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80043b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043ba:	6813      	ldr	r3, [r2, #0]
 80043bc:	f023 0301 	bic.w	r3, r3, #1
 80043c0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80043c2:	f7fe f893 	bl	80024ec <HAL_GetTick>
 80043c6:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80043c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f013 0f02 	tst.w	r3, #2
 80043d2:	d0bc      	beq.n	800434e <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043d4:	f7fe f88a 	bl	80024ec <HAL_GetTick>
 80043d8:	1bc0      	subs	r0, r0, r7
 80043da:	2802      	cmp	r0, #2
 80043dc:	d9f4      	bls.n	80043c8 <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 80043de:	2003      	movs	r0, #3
 80043e0:	e23c      	b.n	800485c <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043e2:	2e03      	cmp	r6, #3
 80043e4:	d1bb      	bne.n	800435e <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80043e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80043f0:	d003      	beq.n	80043fa <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f2:	6863      	ldr	r3, [r4, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 822a 	beq.w	800484e <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	f013 0f02 	tst.w	r3, #2
 8004400:	d052      	beq.n	80044a8 <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004402:	2d04      	cmp	r5, #4
 8004404:	d03d      	beq.n	8004482 <HAL_RCC_OscConfig+0x276>
 8004406:	2d0c      	cmp	r5, #12
 8004408:	d039      	beq.n	800447e <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800440a:	6923      	ldr	r3, [r4, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 8091 	beq.w	8004534 <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004412:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004416:	6813      	ldr	r3, [r2, #0]
 8004418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800441c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800441e:	f7fe f865 	bl	80024ec <HAL_GetTick>
 8004422:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800442e:	d177      	bne.n	8004520 <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004430:	f7fe f85c 	bl	80024ec <HAL_GetTick>
 8004434:	1b80      	subs	r0, r0, r6
 8004436:	2802      	cmp	r0, #2
 8004438:	d9f4      	bls.n	8004424 <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 800443a:	2003      	movs	r0, #3
 800443c:	e20e      	b.n	800485c <HAL_RCC_OscConfig+0x650>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800443e:	6813      	ldr	r3, [r2, #0]
 8004440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004444:	6013      	str	r3, [r2, #0]
}
 8004446:	e7a3      	b.n	8004390 <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004452:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800445a:	601a      	str	r2, [r3, #0]
}
 800445c:	e798      	b.n	8004390 <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 800445e:	f7fe f845 	bl	80024ec <HAL_GetTick>
 8004462:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800446e:	d0c4      	beq.n	80043fa <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004470:	f7fe f83c 	bl	80024ec <HAL_GetTick>
 8004474:	1bc0      	subs	r0, r0, r7
 8004476:	2864      	cmp	r0, #100	; 0x64
 8004478:	d9f4      	bls.n	8004464 <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 800447a:	2003      	movs	r0, #3
 800447c:	e1ee      	b.n	800485c <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800447e:	2e02      	cmp	r6, #2
 8004480:	d1c3      	bne.n	800440a <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800448c:	d003      	beq.n	8004496 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800448e:	6923      	ldr	r3, [r4, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 81de 	beq.w	8004852 <HAL_RCC_OscConfig+0x646>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004496:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004498:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800449c:	6853      	ldr	r3, [r2, #4]
 800449e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80044a2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80044a6:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	f013 0f08 	tst.w	r3, #8
 80044ae:	f000 808d 	beq.w	80045cc <HAL_RCC_OscConfig+0x3c0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044b2:	69a3      	ldr	r3, [r4, #24]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d06c      	beq.n	8004592 <HAL_RCC_OscConfig+0x386>
      uint32_t csr_temp = RCC->CSR;
 80044b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80044c0:	69e1      	ldr	r1, [r4, #28]
 80044c2:	f003 0210 	and.w	r2, r3, #16
 80044c6:	4291      	cmp	r1, r2
 80044c8:	d011      	beq.n	80044ee <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80044ca:	f003 0203 	and.w	r2, r3, #3
 80044ce:	2a02      	cmp	r2, #2
 80044d0:	f000 81c1 	beq.w	8004856 <HAL_RCC_OscConfig+0x64a>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80044d4:	f013 0f01 	tst.w	r3, #1
 80044d8:	d142      	bne.n	8004560 <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80044da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044de:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80044e2:	f023 0310 	bic.w	r3, r3, #16
 80044e6:	69e1      	ldr	r1, [r4, #28]
 80044e8:	430b      	orrs	r3, r1
 80044ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80044ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044f2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80044f6:	f043 0301 	orr.w	r3, r3, #1
 80044fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80044fe:	f7fd fff5 	bl	80024ec <HAL_GetTick>
 8004502:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800450c:	f013 0f02 	tst.w	r3, #2
 8004510:	d15c      	bne.n	80045cc <HAL_RCC_OscConfig+0x3c0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004512:	f7fd ffeb 	bl	80024ec <HAL_GetTick>
 8004516:	1b80      	subs	r0, r0, r6
 8004518:	2811      	cmp	r0, #17
 800451a:	d9f3      	bls.n	8004504 <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 800451c:	2003      	movs	r0, #3
 800451e:	e19d      	b.n	800485c <HAL_RCC_OscConfig+0x650>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004520:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004522:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004526:	6853      	ldr	r3, [r2, #4]
 8004528:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800452c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004530:	6053      	str	r3, [r2, #4]
}
 8004532:	e7b9      	b.n	80044a8 <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004534:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004538:	6813      	ldr	r3, [r2, #0]
 800453a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800453e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004540:	f7fd ffd4 	bl	80024ec <HAL_GetTick>
 8004544:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004550:	d0aa      	beq.n	80044a8 <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004552:	f7fd ffcb 	bl	80024ec <HAL_GetTick>
 8004556:	1b80      	subs	r0, r0, r6
 8004558:	2802      	cmp	r0, #2
 800455a:	d9f4      	bls.n	8004546 <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 800455c:	2003      	movs	r0, #3
 800455e:	e17d      	b.n	800485c <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004560:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004564:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004568:	f023 0301 	bic.w	r3, r3, #1
 800456c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8004570:	f7fd ffbc 	bl	80024ec <HAL_GetTick>
 8004574:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800457a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800457e:	f013 0f02 	tst.w	r3, #2
 8004582:	d0aa      	beq.n	80044da <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004584:	f7fd ffb2 	bl	80024ec <HAL_GetTick>
 8004588:	1b80      	subs	r0, r0, r6
 800458a:	2811      	cmp	r0, #17
 800458c:	d9f3      	bls.n	8004576 <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 800458e:	2003      	movs	r0, #3
 8004590:	e164      	b.n	800485c <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004592:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004596:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800459a:	f023 0301 	bic.w	r3, r3, #1
 800459e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80045a2:	f7fd ffa3 	bl	80024ec <HAL_GetTick>
 80045a6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80045a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045b0:	f013 0f02 	tst.w	r3, #2
 80045b4:	d00a      	beq.n	80045cc <HAL_RCC_OscConfig+0x3c0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b6:	f7fd ff99 	bl	80024ec <HAL_GetTick>
 80045ba:	1b80      	subs	r0, r0, r6
 80045bc:	2811      	cmp	r0, #17
 80045be:	d9f3      	bls.n	80045a8 <HAL_RCC_OscConfig+0x39c>
          return HAL_TIMEOUT;
 80045c0:	2003      	movs	r0, #3
 80045c2:	e14b      	b.n	800485c <HAL_RCC_OscConfig+0x650>
 80045c4:	20000050 	.word	0x20000050
 80045c8:	20000054 	.word	0x20000054
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	f013 0f04 	tst.w	r3, #4
 80045d2:	f000 80b1 	beq.w	8004738 <HAL_RCC_OscConfig+0x52c>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80045d6:	4ba9      	ldr	r3, [pc, #676]	; (800487c <HAL_RCC_OscConfig+0x670>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f413 7f80 	tst.w	r3, #256	; 0x100
 80045de:	d110      	bne.n	8004602 <HAL_RCC_OscConfig+0x3f6>
      HAL_PWR_EnableBkUpAccess();
 80045e0:	f7ff fc7c 	bl	8003edc <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80045e4:	f7fd ff82 	bl	80024ec <HAL_GetTick>
 80045e8:	4606      	mov	r6, r0
 80045ea:	4ba4      	ldr	r3, [pc, #656]	; (800487c <HAL_RCC_OscConfig+0x670>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f413 7f80 	tst.w	r3, #256	; 0x100
 80045f2:	d106      	bne.n	8004602 <HAL_RCC_OscConfig+0x3f6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f4:	f7fd ff7a 	bl	80024ec <HAL_GetTick>
 80045f8:	1b80      	subs	r0, r0, r6
 80045fa:	2802      	cmp	r0, #2
 80045fc:	d9f5      	bls.n	80045ea <HAL_RCC_OscConfig+0x3de>
          return HAL_TIMEOUT;
 80045fe:	2003      	movs	r0, #3
 8004600:	e12c      	b.n	800485c <HAL_RCC_OscConfig+0x650>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004602:	68e3      	ldr	r3, [r4, #12]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d061      	beq.n	80046cc <HAL_RCC_OscConfig+0x4c0>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004608:	2b85      	cmp	r3, #133	; 0x85
 800460a:	d001      	beq.n	8004610 <HAL_RCC_OscConfig+0x404>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800460c:	2b05      	cmp	r3, #5
 800460e:	d107      	bne.n	8004620 <HAL_RCC_OscConfig+0x414>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004610:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004614:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004618:	f043 0304 	orr.w	r3, r3, #4
 800461c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8004620:	f7fd ff64 	bl	80024ec <HAL_GetTick>
 8004624:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004626:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800462a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800462e:	f043 0301 	orr.w	r3, r3, #1
 8004632:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463e:	f013 0f02 	tst.w	r3, #2
 8004642:	d108      	bne.n	8004656 <HAL_RCC_OscConfig+0x44a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004644:	f7fd ff52 	bl	80024ec <HAL_GetTick>
 8004648:	1b80      	subs	r0, r0, r6
 800464a:	f241 3388 	movw	r3, #5000	; 0x1388
 800464e:	4298      	cmp	r0, r3
 8004650:	d9f1      	bls.n	8004636 <HAL_RCC_OscConfig+0x42a>
          return HAL_TIMEOUT;
 8004652:	2003      	movs	r0, #3
 8004654:	e102      	b.n	800485c <HAL_RCC_OscConfig+0x650>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004656:	68e3      	ldr	r3, [r4, #12]
 8004658:	2b81      	cmp	r3, #129	; 0x81
 800465a:	d001      	beq.n	8004660 <HAL_RCC_OscConfig+0x454>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800465c:	2b85      	cmp	r3, #133	; 0x85
 800465e:	d11a      	bne.n	8004696 <HAL_RCC_OscConfig+0x48a>
        tickstart = HAL_GetTick();
 8004660:	f7fd ff44 	bl	80024ec <HAL_GetTick>
 8004664:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004666:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800466a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800466e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800467a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004682:	d159      	bne.n	8004738 <HAL_RCC_OscConfig+0x52c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004684:	f7fd ff32 	bl	80024ec <HAL_GetTick>
 8004688:	1b80      	subs	r0, r0, r6
 800468a:	f241 3388 	movw	r3, #5000	; 0x1388
 800468e:	4298      	cmp	r0, r3
 8004690:	d9f1      	bls.n	8004676 <HAL_RCC_OscConfig+0x46a>
            return HAL_TIMEOUT;
 8004692:	2003      	movs	r0, #3
 8004694:	e0e2      	b.n	800485c <HAL_RCC_OscConfig+0x650>
        tickstart = HAL_GetTick();
 8004696:	f7fd ff29 	bl	80024ec <HAL_GetTick>
 800469a:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800469c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046a0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80046a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80046ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80046b8:	d03e      	beq.n	8004738 <HAL_RCC_OscConfig+0x52c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ba:	f7fd ff17 	bl	80024ec <HAL_GetTick>
 80046be:	1b80      	subs	r0, r0, r6
 80046c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80046c4:	4298      	cmp	r0, r3
 80046c6:	d9f1      	bls.n	80046ac <HAL_RCC_OscConfig+0x4a0>
            return HAL_TIMEOUT;
 80046c8:	2003      	movs	r0, #3
 80046ca:	e0c7      	b.n	800485c <HAL_RCC_OscConfig+0x650>
      tickstart = HAL_GetTick();
 80046cc:	f7fd ff0e 	bl	80024ec <HAL_GetTick>
 80046d0:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80046d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046d6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80046da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80046e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ea:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80046ee:	d008      	beq.n	8004702 <HAL_RCC_OscConfig+0x4f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f0:	f7fd fefc 	bl	80024ec <HAL_GetTick>
 80046f4:	1b80      	subs	r0, r0, r6
 80046f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80046fa:	4298      	cmp	r0, r3
 80046fc:	d9f1      	bls.n	80046e2 <HAL_RCC_OscConfig+0x4d6>
          return HAL_TIMEOUT;
 80046fe:	2003      	movs	r0, #3
 8004700:	e0ac      	b.n	800485c <HAL_RCC_OscConfig+0x650>
      tickstart = HAL_GetTick();
 8004702:	f7fd fef3 	bl	80024ec <HAL_GetTick>
 8004706:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004708:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800470c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004710:	f023 0301 	bic.w	r3, r3, #1
 8004714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800471c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004720:	f013 0f02 	tst.w	r3, #2
 8004724:	d008      	beq.n	8004738 <HAL_RCC_OscConfig+0x52c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004726:	f7fd fee1 	bl	80024ec <HAL_GetTick>
 800472a:	1b80      	subs	r0, r0, r6
 800472c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004730:	4298      	cmp	r0, r3
 8004732:	d9f1      	bls.n	8004718 <HAL_RCC_OscConfig+0x50c>
          return HAL_TIMEOUT;
 8004734:	2003      	movs	r0, #3
 8004736:	e091      	b.n	800485c <HAL_RCC_OscConfig+0x650>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004738:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 808d 	beq.w	800485a <HAL_RCC_OscConfig+0x64e>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004740:	2d0c      	cmp	r5, #12
 8004742:	d062      	beq.n	800480a <HAL_RCC_OscConfig+0x5fe>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004744:	2b02      	cmp	r3, #2
 8004746:	d01f      	beq.n	8004788 <HAL_RCC_OscConfig+0x57c>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004752:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	f022 0203 	bic.w	r2, r2, #3
 800475a:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8004762:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004766:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8004768:	f7fd fec0 	bl	80024ec <HAL_GetTick>
 800476c:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800476e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004778:	d073      	beq.n	8004862 <HAL_RCC_OscConfig+0x656>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800477a:	f7fd feb7 	bl	80024ec <HAL_GetTick>
 800477e:	1b00      	subs	r0, r0, r4
 8004780:	280a      	cmp	r0, #10
 8004782:	d9f4      	bls.n	800476e <HAL_RCC_OscConfig+0x562>
            return HAL_TIMEOUT;
 8004784:	2003      	movs	r0, #3
 8004786:	e069      	b.n	800485c <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004788:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800478c:	6813      	ldr	r3, [r2, #0]
 800478e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004792:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004794:	f7fd feaa 	bl	80024ec <HAL_GetTick>
 8004798:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800479a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80047a4:	d12a      	bne.n	80047fc <HAL_RCC_OscConfig+0x5f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047aa:	68d3      	ldr	r3, [r2, #12]
 80047ac:	4934      	ldr	r1, [pc, #208]	; (8004880 <HAL_RCC_OscConfig+0x674>)
 80047ae:	4019      	ands	r1, r3
 80047b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80047b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80047b4:	4303      	orrs	r3, r0
 80047b6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80047b8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80047bc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80047be:	4303      	orrs	r3, r0
 80047c0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80047c2:	4303      	orrs	r3, r0
 80047c4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80047c6:	4303      	orrs	r3, r0
 80047c8:	430b      	orrs	r3, r1
 80047ca:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80047cc:	6813      	ldr	r3, [r2, #0]
 80047ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047d2:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047d4:	68d3      	ldr	r3, [r2, #12]
 80047d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047da:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80047dc:	f7fd fe86 	bl	80024ec <HAL_GetTick>
 80047e0:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80047e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80047ec:	d137      	bne.n	800485e <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ee:	f7fd fe7d 	bl	80024ec <HAL_GetTick>
 80047f2:	1b00      	subs	r0, r0, r4
 80047f4:	280a      	cmp	r0, #10
 80047f6:	d9f4      	bls.n	80047e2 <HAL_RCC_OscConfig+0x5d6>
            return HAL_TIMEOUT;
 80047f8:	2003      	movs	r0, #3
 80047fa:	e02f      	b.n	800485c <HAL_RCC_OscConfig+0x650>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047fc:	f7fd fe76 	bl	80024ec <HAL_GetTick>
 8004800:	1b40      	subs	r0, r0, r5
 8004802:	280a      	cmp	r0, #10
 8004804:	d9c9      	bls.n	800479a <HAL_RCC_OscConfig+0x58e>
            return HAL_TIMEOUT;
 8004806:	2003      	movs	r0, #3
 8004808:	e028      	b.n	800485c <HAL_RCC_OscConfig+0x650>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800480a:	2b01      	cmp	r3, #1
 800480c:	d02b      	beq.n	8004866 <HAL_RCC_OscConfig+0x65a>
        pll_config = RCC->PLLCFGR;
 800480e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004812:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004814:	f003 0103 	and.w	r1, r3, #3
 8004818:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800481a:	4291      	cmp	r1, r2
 800481c:	d125      	bne.n	800486a <HAL_RCC_OscConfig+0x65e>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800481e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004822:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004824:	428a      	cmp	r2, r1
 8004826:	d122      	bne.n	800486e <HAL_RCC_OscConfig+0x662>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004828:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800482c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800482e:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004832:	d11e      	bne.n	8004872 <HAL_RCC_OscConfig+0x666>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004834:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8004838:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800483a:	4293      	cmp	r3, r2
 800483c:	d11b      	bne.n	8004876 <HAL_RCC_OscConfig+0x66a>
  return HAL_OK;
 800483e:	2000      	movs	r0, #0
 8004840:	e00c      	b.n	800485c <HAL_RCC_OscConfig+0x650>
    return HAL_ERROR;
 8004842:	2001      	movs	r0, #1
}
 8004844:	4770      	bx	lr
        return HAL_ERROR;
 8004846:	2001      	movs	r0, #1
 8004848:	e008      	b.n	800485c <HAL_RCC_OscConfig+0x650>
            return HAL_ERROR;
 800484a:	2001      	movs	r0, #1
 800484c:	e006      	b.n	800485c <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 800484e:	2001      	movs	r0, #1
 8004850:	e004      	b.n	800485c <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 8004852:	2001      	movs	r0, #1
 8004854:	e002      	b.n	800485c <HAL_RCC_OscConfig+0x650>
          return HAL_ERROR;
 8004856:	2001      	movs	r0, #1
 8004858:	e000      	b.n	800485c <HAL_RCC_OscConfig+0x650>
  return HAL_OK;
 800485a:	2000      	movs	r0, #0
}
 800485c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 800485e:	2000      	movs	r0, #0
 8004860:	e7fc      	b.n	800485c <HAL_RCC_OscConfig+0x650>
 8004862:	2000      	movs	r0, #0
 8004864:	e7fa      	b.n	800485c <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 8004866:	2001      	movs	r0, #1
 8004868:	e7f8      	b.n	800485c <HAL_RCC_OscConfig+0x650>
          return HAL_ERROR;
 800486a:	2001      	movs	r0, #1
 800486c:	e7f6      	b.n	800485c <HAL_RCC_OscConfig+0x650>
 800486e:	2001      	movs	r0, #1
 8004870:	e7f4      	b.n	800485c <HAL_RCC_OscConfig+0x650>
 8004872:	2001      	movs	r0, #1
 8004874:	e7f2      	b.n	800485c <HAL_RCC_OscConfig+0x650>
 8004876:	2001      	movs	r0, #1
 8004878:	e7f0      	b.n	800485c <HAL_RCC_OscConfig+0x650>
 800487a:	bf00      	nop
 800487c:	58000400 	.word	0x58000400
 8004880:	11c1808c 	.word	0x11c1808c

08004884 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004884:	2800      	cmp	r0, #0
 8004886:	f000 8127 	beq.w	8004ad8 <HAL_RCC_ClockConfig+0x254>
{
 800488a:	b570      	push	{r4, r5, r6, lr}
 800488c:	460c      	mov	r4, r1
 800488e:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004890:	4b93      	ldr	r3, [pc, #588]	; (8004ae0 <HAL_RCC_ClockConfig+0x25c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	428b      	cmp	r3, r1
 800489a:	d32d      	bcc.n	80048f8 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800489c:	682b      	ldr	r3, [r5, #0]
 800489e:	f013 0f02 	tst.w	r3, #2
 80048a2:	d13f      	bne.n	8004924 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80048a4:	682b      	ldr	r3, [r5, #0]
 80048a6:	f013 0f20 	tst.w	r3, #32
 80048aa:	d153      	bne.n	8004954 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80048ac:	682b      	ldr	r3, [r5, #0]
 80048ae:	f013 0f40 	tst.w	r3, #64	; 0x40
 80048b2:	d16a      	bne.n	800498a <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b4:	682b      	ldr	r3, [r5, #0]
 80048b6:	f013 0f04 	tst.w	r3, #4
 80048ba:	f040 8083 	bne.w	80049c4 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048be:	682b      	ldr	r3, [r5, #0]
 80048c0:	f013 0f08 	tst.w	r3, #8
 80048c4:	f040 8097 	bne.w	80049f6 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048c8:	682b      	ldr	r3, [r5, #0]
 80048ca:	f013 0f01 	tst.w	r3, #1
 80048ce:	f000 80de 	beq.w	8004a8e <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048d2:	686b      	ldr	r3, [r5, #4]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	f000 80a8 	beq.w	8004a2a <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048da:	2b03      	cmp	r3, #3
 80048dc:	f000 80ad 	beq.w	8004a3a <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f040 80b2 	bne.w	8004a4a <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80048e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048ea:	6812      	ldr	r2, [r2, #0]
 80048ec:	f012 0f02 	tst.w	r2, #2
 80048f0:	f040 80b1 	bne.w	8004a56 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80048f4:	2001      	movs	r0, #1
 80048f6:	e0ee      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f8:	4a79      	ldr	r2, [pc, #484]	; (8004ae0 <HAL_RCC_ClockConfig+0x25c>)
 80048fa:	6813      	ldr	r3, [r2, #0]
 80048fc:	f023 0307 	bic.w	r3, r3, #7
 8004900:	430b      	orrs	r3, r1
 8004902:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004904:	f7fd fdf2 	bl	80024ec <HAL_GetTick>
 8004908:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800490a:	4b75      	ldr	r3, [pc, #468]	; (8004ae0 <HAL_RCC_ClockConfig+0x25c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	42a3      	cmp	r3, r4
 8004914:	d0c2      	beq.n	800489c <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004916:	f7fd fde9 	bl	80024ec <HAL_GetTick>
 800491a:	1b80      	subs	r0, r0, r6
 800491c:	2802      	cmp	r0, #2
 800491e:	d9f4      	bls.n	800490a <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8004920:	2003      	movs	r0, #3
 8004922:	e0d8      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004924:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004926:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800492a:	688a      	ldr	r2, [r1, #8]
 800492c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004930:	4313      	orrs	r3, r2
 8004932:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004934:	f7fd fdda 	bl	80024ec <HAL_GetTick>
 8004938:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800493a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004944:	d1ae      	bne.n	80048a4 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004946:	f7fd fdd1 	bl	80024ec <HAL_GetTick>
 800494a:	1b80      	subs	r0, r0, r6
 800494c:	2802      	cmp	r0, #2
 800494e:	d9f4      	bls.n	800493a <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8004950:	2003      	movs	r0, #3
 8004952:	e0c0      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004954:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004956:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800495a:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 800495e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8004968:	f7fd fdc0 	bl	80024ec <HAL_GetTick>
 800496c:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800496e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004972:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004976:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800497a:	d197      	bne.n	80048ac <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800497c:	f7fd fdb6 	bl	80024ec <HAL_GetTick>
 8004980:	1b80      	subs	r0, r0, r6
 8004982:	2802      	cmp	r0, #2
 8004984:	d9f3      	bls.n	800496e <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8004986:	2003      	movs	r0, #3
 8004988:	e0a5      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800498a:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800498c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004990:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8004994:	f023 030f 	bic.w	r3, r3, #15
 8004998:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 800499c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 80049a0:	f7fd fda4 	bl	80024ec <HAL_GetTick>
 80049a4:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80049a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049ae:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80049b2:	f47f af7f 	bne.w	80048b4 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049b6:	f7fd fd99 	bl	80024ec <HAL_GetTick>
 80049ba:	1b80      	subs	r0, r0, r6
 80049bc:	2802      	cmp	r0, #2
 80049be:	d9f2      	bls.n	80049a6 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 80049c0:	2003      	movs	r0, #3
 80049c2:	e088      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80049c4:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80049c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ca:	688a      	ldr	r2, [r1, #8]
 80049cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049d0:	4313      	orrs	r3, r2
 80049d2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80049d4:	f7fd fd8a 	bl	80024ec <HAL_GetTick>
 80049d8:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80049da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80049e4:	f47f af6b 	bne.w	80048be <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049e8:	f7fd fd80 	bl	80024ec <HAL_GetTick>
 80049ec:	1b80      	subs	r0, r0, r6
 80049ee:	2802      	cmp	r0, #2
 80049f0:	d9f3      	bls.n	80049da <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 80049f2:	2003      	movs	r0, #3
 80049f4:	e06f      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80049f6:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80049f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049fc:	6893      	ldr	r3, [r2, #8]
 80049fe:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004a02:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004a06:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004a08:	f7fd fd70 	bl	80024ec <HAL_GetTick>
 8004a0c:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004a18:	f47f af56 	bne.w	80048c8 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a1c:	f7fd fd66 	bl	80024ec <HAL_GetTick>
 8004a20:	1b80      	subs	r0, r0, r6
 8004a22:	2802      	cmp	r0, #2
 8004a24:	d9f3      	bls.n	8004a0e <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8004a26:	2003      	movs	r0, #3
 8004a28:	e055      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004a2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a2e:	6812      	ldr	r2, [r2, #0]
 8004a30:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004a34:	d10f      	bne.n	8004a56 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004a36:	2001      	movs	r0, #1
 8004a38:	e04d      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004a3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a3e:	6812      	ldr	r2, [r2, #0]
 8004a40:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004a44:	d107      	bne.n	8004a56 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004a46:	2001      	movs	r0, #1
 8004a48:	e045      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004a4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a4e:	6812      	ldr	r2, [r2, #0]
 8004a50:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004a54:	d042      	beq.n	8004adc <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004a56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a5a:	688a      	ldr	r2, [r1, #8]
 8004a5c:	f022 0203 	bic.w	r2, r2, #3
 8004a60:	4313      	orrs	r3, r2
 8004a62:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004a64:	f7fd fd42 	bl	80024ec <HAL_GetTick>
 8004a68:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a74:	686a      	ldr	r2, [r5, #4]
 8004a76:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004a7a:	d008      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a7c:	f7fd fd36 	bl	80024ec <HAL_GetTick>
 8004a80:	1b80      	subs	r0, r0, r6
 8004a82:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a86:	4298      	cmp	r0, r3
 8004a88:	d9ef      	bls.n	8004a6a <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8004a8a:	2003      	movs	r0, #3
 8004a8c:	e023      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a8e:	4b14      	ldr	r3, [pc, #80]	; (8004ae0 <HAL_RCC_ClockConfig+0x25c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	42a3      	cmp	r3, r4
 8004a98:	d915      	bls.n	8004ac6 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9a:	4a11      	ldr	r2, [pc, #68]	; (8004ae0 <HAL_RCC_ClockConfig+0x25c>)
 8004a9c:	6813      	ldr	r3, [r2, #0]
 8004a9e:	f023 0307 	bic.w	r3, r3, #7
 8004aa2:	4323      	orrs	r3, r4
 8004aa4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004aa6:	f7fd fd21 	bl	80024ec <HAL_GetTick>
 8004aaa:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aac:	4b0c      	ldr	r3, [pc, #48]	; (8004ae0 <HAL_RCC_ClockConfig+0x25c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	42a3      	cmp	r3, r4
 8004ab6:	d006      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ab8:	f7fd fd18 	bl	80024ec <HAL_GetTick>
 8004abc:	1b40      	subs	r0, r0, r5
 8004abe:	2802      	cmp	r0, #2
 8004ac0:	d9f4      	bls.n	8004aac <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8004ac2:	2003      	movs	r0, #3
 8004ac4:	e007      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004ac6:	f7ff fb91 	bl	80041ec <HAL_RCC_GetHCLKFreq>
 8004aca:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <HAL_RCC_ClockConfig+0x260>)
 8004acc:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8004ace:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <HAL_RCC_ClockConfig+0x264>)
 8004ad0:	6818      	ldr	r0, [r3, #0]
 8004ad2:	f7fd fd09 	bl	80024e8 <HAL_InitTick>
}
 8004ad6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004ad8:	2001      	movs	r0, #1
}
 8004ada:	4770      	bx	lr
        return HAL_ERROR;
 8004adc:	2001      	movs	r0, #1
 8004ade:	e7fa      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x252>
 8004ae0:	58004000 	.word	0x58004000
 8004ae4:	20000050 	.word	0x20000050
 8004ae8:	20000054 	.word	0x20000054

08004aec <HAL_RCC_GetPCLK1Freq>:
{
 8004aec:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004aee:	f7ff fb7d 	bl	80041ec <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004afc:	4a02      	ldr	r2, [pc, #8]	; (8004b08 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004b02:	40d8      	lsrs	r0, r3
 8004b04:	bd08      	pop	{r3, pc}
 8004b06:	bf00      	nop
 8004b08:	080179e0 	.word	0x080179e0

08004b0c <HAL_RCC_GetPCLK2Freq>:
{
 8004b0c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004b0e:	f7ff fb6d 	bl	80041ec <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004b1c:	4a02      	ldr	r2, [pc, #8]	; (8004b28 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004b22:	40d8      	lsrs	r0, r3
 8004b24:	bd08      	pop	{r3, pc}
 8004b26:	bf00      	nop
 8004b28:	080179e0 	.word	0x080179e0

08004b2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b2c:	b570      	push	{r4, r5, r6, lr}
 8004b2e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b30:	6803      	ldr	r3, [r0, #0]
 8004b32:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004b36:	f040 80d6 	bne.w	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004b3a:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	f013 0f01 	tst.w	r3, #1
 8004b42:	d00a      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b44:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004b46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b4a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004b4e:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004b52:	b292      	uxth	r2, r2
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	f013 0f02 	tst.w	r3, #2
 8004b60:	d00a      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b62:	68a2      	ldr	r2, [r4, #8]
 8004b64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b68:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004b6c:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004b70:	b292      	uxth	r2, r2
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	f013 0f20 	tst.w	r3, #32
 8004b7e:	d009      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b80:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004b82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b86:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b8a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004b9a:	d00c      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b9c:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004b9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ba2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004ba6:	0c02      	lsrs	r2, r0, #16
 8004ba8:	0412      	lsls	r2, r2, #16
 8004baa:	ea23 0302 	bic.w	r3, r3, r2
 8004bae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004bbc:	d00c      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004bbe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004bc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bc4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004bc8:	0c02      	lsrs	r2, r0, #16
 8004bca:	0412      	lsls	r2, r2, #16
 8004bcc:	ea23 0302 	bic.w	r3, r3, r2
 8004bd0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004bd8:	6823      	ldr	r3, [r4, #0]
 8004bda:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004bde:	d00c      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004be0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004be2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004be6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004bea:	0c02      	lsrs	r2, r0, #16
 8004bec:	0412      	lsls	r2, r2, #16
 8004bee:	ea23 0302 	bic.w	r3, r3, r2
 8004bf2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004c00:	d00f      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c02:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004c04:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004c08:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004c0c:	0919      	lsrs	r1, r3, #4
 8004c0e:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004c12:	ea22 0201 	bic.w	r2, r2, r1
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004c28:	d00f      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c2a:	69a3      	ldr	r3, [r4, #24]
 8004c2c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004c30:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004c34:	0919      	lsrs	r1, r3, #4
 8004c36:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004c3a:	ea22 0201 	bic.w	r2, r2, r1
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004c44:	4313      	orrs	r3, r2
 8004c46:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004c50:	d00f      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x146>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c52:	69e3      	ldr	r3, [r4, #28]
 8004c54:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004c58:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004c5c:	0919      	lsrs	r1, r3, #4
 8004c5e:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004c62:	ea22 0201 	bic.w	r2, r2, r1
 8004c66:	011b      	lsls	r3, r3, #4
 8004c68:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	f013 0f10 	tst.w	r3, #16
 8004c78:	d00d      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004c7a:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004c7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c80:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004c84:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004c8e:	68e3      	ldr	r3, [r4, #12]
 8004c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c94:	d07f      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c96:	6823      	ldr	r3, [r4, #0]
 8004c98:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004c9c:	d00f      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004ca0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ca4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004ca8:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cb2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004cb4:	b91b      	cbnz	r3, 8004cbe <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004cb6:	68cb      	ldr	r3, [r1, #12]
 8004cb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cbc:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004cc4:	d00d      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004cc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ccc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004cd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004cda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ce0:	d05e      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8004ce6:	f7ff f8f9 	bl	8003edc <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8004cea:	f7fd fbff 	bl	80024ec <HAL_GetTick>
 8004cee:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004cf0:	4b2e      	ldr	r3, [pc, #184]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004cf8:	d106      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cfa:	f7fd fbf7 	bl	80024ec <HAL_GetTick>
 8004cfe:	1b40      	subs	r0, r0, r5
 8004d00:	2802      	cmp	r0, #2
 8004d02:	d9f5      	bls.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        ret = HAL_TIMEOUT;
 8004d04:	2503      	movs	r5, #3
 8004d06:	e000      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004d08:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8004d0a:	2d00      	cmp	r5, #0
 8004d0c:	f47f af16 	bne.w	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004d1c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d024      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x240>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d26:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004d2a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004d2e:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004d32:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004d36:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004d3a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004d3e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004d42:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004d46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004d4a:	f012 0f02 	tst.w	r2, #2
 8004d4e:	d10f      	bne.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x244>
      if (ret == HAL_OK)
 8004d50:	2d00      	cmp	r5, #0
 8004d52:	f47f aef3 	bne.w	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d56:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004d58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d5c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004d60:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004d6a:	e6e7      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	e7ec      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
        tickstart = HAL_GetTick();
 8004d70:	f7fd fbbc 	bl	80024ec <HAL_GetTick>
 8004d74:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7e:	f013 0f02 	tst.w	r3, #2
 8004d82:	d1e5      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x224>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d84:	f7fd fbb2 	bl	80024ec <HAL_GetTick>
 8004d88:	1b80      	subs	r0, r0, r6
 8004d8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d8e:	4298      	cmp	r0, r3
 8004d90:	d9f1      	bls.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x24a>
            ret = HAL_TIMEOUT;
 8004d92:	2503      	movs	r5, #3
 8004d94:	e7dc      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x224>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004d96:	68cb      	ldr	r3, [r1, #12]
 8004d98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d9c:	60cb      	str	r3, [r1, #12]
 8004d9e:	e77a      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x16a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004da0:	68cb      	ldr	r3, [r1, #12]
 8004da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da6:	60cb      	str	r3, [r1, #12]
 8004da8:	e79b      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004daa:	bf00      	nop
 8004dac:	58000400 	.word	0x58000400

08004db0 <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004db0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d036      	beq.n	8004e26 <HAL_RTC_DeactivateAlarm+0x76>
 8004db8:	2301      	movs	r3, #1
 8004dba:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004dc4:	4b19      	ldr	r3, [pc, #100]	; (8004e2c <HAL_RTC_DeactivateAlarm+0x7c>)
 8004dc6:	22ca      	movs	r2, #202	; 0xca
 8004dc8:	625a      	str	r2, [r3, #36]	; 0x24
 8004dca:	2253      	movs	r2, #83	; 0x53
 8004dcc:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004dce:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004dd2:	d019      	beq.n	8004e08 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004dd4:	4b15      	ldr	r3, [pc, #84]	; (8004e2c <HAL_RTC_DeactivateAlarm+0x7c>)
 8004dd6:	699a      	ldr	r2, [r3, #24]
 8004dd8:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8004ddc:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004dde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004de0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004de4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004de6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004de8:	f022 0202 	bic.w	r2, r2, #2
 8004dec:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004dee:	2202      	movs	r2, #2
 8004df0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004df2:	4b0e      	ldr	r3, [pc, #56]	; (8004e2c <HAL_RTC_DeactivateAlarm+0x7c>)
 8004df4:	22ff      	movs	r2, #255	; 0xff
 8004df6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004dfe:	2300      	movs	r3, #0
 8004e00:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8004e04:	4618      	mov	r0, r3
 8004e06:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8004e0e:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8004e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004e16:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004e18:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004e1a:	f022 0201 	bic.w	r2, r2, #1
 8004e1e:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004e20:	2201      	movs	r2, #1
 8004e22:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e24:	e7e5      	b.n	8004df2 <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 8004e26:	2002      	movs	r0, #2
}
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	40002800 	.word	0x40002800

08004e30 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004e30:	b538      	push	{r3, r4, r5, lr}
 8004e32:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004e34:	4b0d      	ldr	r3, [pc, #52]	; (8004e6c <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004e36:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8004e38:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004e3a:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004e3c:	f015 0f01 	tst.w	r5, #1
 8004e40:	d106      	bne.n	8004e50 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8004e42:	f015 0f02 	tst.w	r5, #2
 8004e46:	d109      	bne.n	8004e5c <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8004e4e:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004e50:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004e52:	2201      	movs	r2, #1
 8004e54:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8004e56:	f7fd fc7b 	bl	8002750 <HAL_RTC_AlarmAEventCallback>
 8004e5a:	e7f2      	b.n	8004e42 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004e5c:	4b03      	ldr	r3, [pc, #12]	; (8004e6c <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004e5e:	2202      	movs	r2, #2
 8004e60:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004e62:	4620      	mov	r0, r4
 8004e64:	f000 f9e4 	bl	8005230 <HAL_RTCEx_AlarmBEventCallback>
 8004e68:	e7ee      	b.n	8004e48 <HAL_RTC_AlarmIRQHandler+0x18>
 8004e6a:	bf00      	nop
 8004e6c:	40002800 	.word	0x40002800

08004e70 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004e70:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004e72:	4a0b      	ldr	r2, [pc, #44]	; (8004ea0 <HAL_RTC_WaitForSynchro+0x30>)
 8004e74:	68d3      	ldr	r3, [r2, #12]
 8004e76:	f023 0320 	bic.w	r3, r3, #32
 8004e7a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004e7c:	f7fd fb36 	bl	80024ec <HAL_GetTick>
 8004e80:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004e82:	4b07      	ldr	r3, [pc, #28]	; (8004ea0 <HAL_RTC_WaitForSynchro+0x30>)
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f013 0f20 	tst.w	r3, #32
 8004e8a:	d107      	bne.n	8004e9c <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e8c:	f7fd fb2e 	bl	80024ec <HAL_GetTick>
 8004e90:	1b00      	subs	r0, r0, r4
 8004e92:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004e96:	d9f4      	bls.n	8004e82 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8004e98:	2003      	movs	r0, #3
 8004e9a:	e000      	b.n	8004e9e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004e9c:	2000      	movs	r0, #0
}
 8004e9e:	bd10      	pop	{r4, pc}
 8004ea0:	40002800 	.word	0x40002800

08004ea4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ea4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004ea6:	4b11      	ldr	r3, [pc, #68]	; (8004eec <RTC_EnterInitMode+0x48>)
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004eae:	d002      	beq.n	8004eb6 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8004eb0:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	bd70      	pop	{r4, r5, r6, pc}
 8004eb6:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004eb8:	4a0c      	ldr	r2, [pc, #48]	; (8004eec <RTC_EnterInitMode+0x48>)
 8004eba:	68d3      	ldr	r3, [r2, #12]
 8004ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec0:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8004ec2:	f7fd fb13 	bl	80024ec <HAL_GetTick>
 8004ec6:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8004ec8:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004eca:	4b08      	ldr	r3, [pc, #32]	; (8004eec <RTC_EnterInitMode+0x48>)
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004ed2:	d1ee      	bne.n	8004eb2 <RTC_EnterInitMode+0xe>
 8004ed4:	2c03      	cmp	r4, #3
 8004ed6:	d0ec      	beq.n	8004eb2 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004ed8:	f7fd fb08 	bl	80024ec <HAL_GetTick>
 8004edc:	1b43      	subs	r3, r0, r5
 8004ede:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ee2:	d9f2      	bls.n	8004eca <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ee4:	2403      	movs	r4, #3
 8004ee6:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 8004eea:	e7ee      	b.n	8004eca <RTC_EnterInitMode+0x26>
 8004eec:	40002800 	.word	0x40002800

08004ef0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004ef4:	4b10      	ldr	r3, [pc, #64]	; (8004f38 <RTC_ExitInitMode+0x48>)
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004efc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	f013 0f20 	tst.w	r3, #32
 8004f04:	d106      	bne.n	8004f14 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f06:	f7ff ffb3 	bl	8004e70 <HAL_RTC_WaitForSynchro>
 8004f0a:	b198      	cbz	r0, 8004f34 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f0c:	2003      	movs	r0, #3
 8004f0e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004f12:	e00f      	b.n	8004f34 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f14:	4a08      	ldr	r2, [pc, #32]	; (8004f38 <RTC_ExitInitMode+0x48>)
 8004f16:	6993      	ldr	r3, [r2, #24]
 8004f18:	f023 0320 	bic.w	r3, r3, #32
 8004f1c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f1e:	f7ff ffa7 	bl	8004e70 <HAL_RTC_WaitForSynchro>
 8004f22:	b110      	cbz	r0, 8004f2a <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f24:	2003      	movs	r0, #3
 8004f26:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f2a:	4a03      	ldr	r2, [pc, #12]	; (8004f38 <RTC_ExitInitMode+0x48>)
 8004f2c:	6993      	ldr	r3, [r2, #24]
 8004f2e:	f043 0320 	orr.w	r3, r3, #32
 8004f32:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8004f34:	bd10      	pop	{r4, pc}
 8004f36:	bf00      	nop
 8004f38:	40002800 	.word	0x40002800

08004f3c <HAL_RTC_Init>:
  if (hrtc != NULL)
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	d04a      	beq.n	8004fd6 <HAL_RTC_Init+0x9a>
{
 8004f40:	b538      	push	{r3, r4, r5, lr}
 8004f42:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004f44:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8004f48:	b19b      	cbz	r3, 8004f72 <HAL_RTC_Init+0x36>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f50:	4b22      	ldr	r3, [pc, #136]	; (8004fdc <HAL_RTC_Init+0xa0>)
 8004f52:	22ca      	movs	r2, #202	; 0xca
 8004f54:	625a      	str	r2, [r3, #36]	; 0x24
 8004f56:	2253      	movs	r2, #83	; 0x53
 8004f58:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	f7ff ffa2 	bl	8004ea4 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8004f60:	b160      	cbz	r0, 8004f7c <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f62:	4b1e      	ldr	r3, [pc, #120]	; (8004fdc <HAL_RTC_Init+0xa0>)
 8004f64:	22ff      	movs	r2, #255	; 0xff
 8004f66:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8004f68:	b910      	cbnz	r0, 8004f70 <HAL_RTC_Init+0x34>
      hrtc->State = HAL_RTC_STATE_READY;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8004f70:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8004f72:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 8004f76:	f7fc ff9d 	bl	8001eb4 <HAL_RTC_MspInit>
 8004f7a:	e7e6      	b.n	8004f4a <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004f7c:	4b17      	ldr	r3, [pc, #92]	; (8004fdc <HAL_RTC_Init+0xa0>)
 8004f7e:	699a      	ldr	r2, [r3, #24]
 8004f80:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8004f84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f88:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004f8a:	6999      	ldr	r1, [r3, #24]
 8004f8c:	6862      	ldr	r2, [r4, #4]
 8004f8e:	6920      	ldr	r0, [r4, #16]
 8004f90:	4302      	orrs	r2, r0
 8004f92:	69a0      	ldr	r0, [r4, #24]
 8004f94:	4302      	orrs	r2, r0
 8004f96:	430a      	orrs	r2, r1
 8004f98:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004f9a:	68e2      	ldr	r2, [r4, #12]
 8004f9c:	68a1      	ldr	r1, [r4, #8]
 8004f9e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004fa2:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8004faa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004fac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004fae:	4301      	orrs	r1, r0
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f7ff ff9b 	bl	8004ef0 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	d1d1      	bne.n	8004f62 <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 8004fbe:	4907      	ldr	r1, [pc, #28]	; (8004fdc <HAL_RTC_Init+0xa0>)
 8004fc0:	698b      	ldr	r3, [r1, #24]
 8004fc2:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8004fc6:	6a22      	ldr	r2, [r4, #32]
 8004fc8:	69e5      	ldr	r5, [r4, #28]
 8004fca:	432a      	orrs	r2, r5
 8004fcc:	6965      	ldr	r5, [r4, #20]
 8004fce:	432a      	orrs	r2, r5
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	618b      	str	r3, [r1, #24]
 8004fd4:	e7c5      	b.n	8004f62 <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 8004fd6:	2001      	movs	r0, #1
}
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40002800 	.word	0x40002800

08004fe0 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004fe0:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8004fe2:	2809      	cmp	r0, #9
 8004fe4:	d903      	bls.n	8004fee <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 8004fe6:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8004fe8:	380a      	subs	r0, #10
 8004fea:	b2c0      	uxtb	r0, r0
 8004fec:	e7f9      	b.n	8004fe2 <RTC_ByteToBcd2+0x2>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8004fee:	011b      	lsls	r3, r3, #4
 8004ff0:	b2db      	uxtb	r3, r3
}
 8004ff2:	4318      	orrs	r0, r3
 8004ff4:	4770      	bx	lr
	...

08004ff8 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8004ff8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	f000 80b0 	beq.w	8005162 <HAL_RTC_SetAlarm_IT+0x16a>
{
 8005002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005006:	4605      	mov	r5, r0
 8005008:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 800500a:	2301      	movs	r3, #1
 800500c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005010:	2302      	movs	r3, #2
 8005012:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8005016:	4b54      	ldr	r3, [pc, #336]	; (8005168 <HAL_RTC_SetAlarm_IT+0x170>)
 8005018:	68de      	ldr	r6, [r3, #12]
 800501a:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 800501e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8005022:	d043      	beq.n	80050ac <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8005024:	bb12      	cbnz	r2, 800506c <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	f013 0f40 	tst.w	r3, #64	; 0x40
 800502c:	d101      	bne.n	8005032 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800502e:	2300      	movs	r3, #0
 8005030:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8005032:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005036:	7820      	ldrb	r0, [r4, #0]
 8005038:	f7ff ffd2 	bl	8004fe0 <RTC_ByteToBcd2>
 800503c:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800503e:	7860      	ldrb	r0, [r4, #1]
 8005040:	f7ff ffce 	bl	8004fe0 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005044:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005048:	78a0      	ldrb	r0, [r4, #2]
 800504a:	f7ff ffc9 	bl	8004fe0 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800504e:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005050:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005052:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005056:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800505a:	f7ff ffc1 	bl	8004fe0 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800505e:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005062:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005064:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005066:	ea48 0000 	orr.w	r0, r8, r0
 800506a:	e020      	b.n	80050ae <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800506c:	6948      	ldr	r0, [r1, #20]
 800506e:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 8005072:	d009      	beq.n	8005088 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8005074:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8005078:	d006      	beq.n	8005088 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800507a:	4b3b      	ldr	r3, [pc, #236]	; (8005168 <HAL_RTC_SetAlarm_IT+0x170>)
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005082:	d101      	bne.n	8005088 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005084:	2300      	movs	r3, #0
 8005086:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005088:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800508a:	7863      	ldrb	r3, [r4, #1]
 800508c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800508e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005092:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005094:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005096:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005098:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800509c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80050a0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80050a4:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80050a6:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80050a8:	4318      	orrs	r0, r3
 80050aa:	e000      	b.n	80050ae <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 80050ac:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050ae:	4b2e      	ldr	r3, [pc, #184]	; (8005168 <HAL_RTC_SetAlarm_IT+0x170>)
 80050b0:	22ca      	movs	r2, #202	; 0xca
 80050b2:	625a      	str	r2, [r3, #36]	; 0x24
 80050b4:	2253      	movs	r2, #83	; 0x53
 80050b6:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80050b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80050ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050be:	d02a      	beq.n	8005116 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80050c0:	4b29      	ldr	r3, [pc, #164]	; (8005168 <HAL_RTC_SetAlarm_IT+0x170>)
 80050c2:	699a      	ldr	r2, [r3, #24]
 80050c4:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 80050c8:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80050ca:	2202      	movs	r2, #2
 80050cc:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80050ce:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80050d2:	d040      	beq.n	8005156 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80050d4:	4b24      	ldr	r3, [pc, #144]	; (8005168 <HAL_RTC_SetAlarm_IT+0x170>)
 80050d6:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80050d8:	69a2      	ldr	r2, [r4, #24]
 80050da:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80050dc:	6862      	ldr	r2, [r4, #4]
 80050de:	4b22      	ldr	r3, [pc, #136]	; (8005168 <HAL_RTC_SetAlarm_IT+0x170>)
 80050e0:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80050e2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80050e4:	f042 0202 	orr.w	r2, r2, #2
 80050e8:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80050ea:	699a      	ldr	r2, [r3, #24]
 80050ec:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 80050f0:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80050f2:	4a1e      	ldr	r2, [pc, #120]	; (800516c <HAL_RTC_SetAlarm_IT+0x174>)
 80050f4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80050f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005100:	4b19      	ldr	r3, [pc, #100]	; (8005168 <HAL_RTC_SetAlarm_IT+0x170>)
 8005102:	22ff      	movs	r2, #255	; 0xff
 8005104:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8005106:	2301      	movs	r3, #1
 8005108:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 800510c:	2000      	movs	r0, #0
 800510e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8005112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005116:	4b14      	ldr	r3, [pc, #80]	; (8005168 <HAL_RTC_SetAlarm_IT+0x170>)
 8005118:	699a      	ldr	r2, [r3, #24]
 800511a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800511e:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005120:	2201      	movs	r2, #1
 8005122:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8005124:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8005128:	d00f      	beq.n	800514a <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800512a:	4b0f      	ldr	r3, [pc, #60]	; (8005168 <HAL_RTC_SetAlarm_IT+0x170>)
 800512c:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800512e:	69a2      	ldr	r2, [r4, #24]
 8005130:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8005132:	6862      	ldr	r2, [r4, #4]
 8005134:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <HAL_RTC_SetAlarm_IT+0x170>)
 8005136:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005138:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005140:	699a      	ldr	r2, [r3, #24]
 8005142:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8005146:	619a      	str	r2, [r3, #24]
 8005148:	e7d3      	b.n	80050f2 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800514a:	69a3      	ldr	r3, [r4, #24]
 800514c:	69e2      	ldr	r2, [r4, #28]
 800514e:	4313      	orrs	r3, r2
 8005150:	4a05      	ldr	r2, [pc, #20]	; (8005168 <HAL_RTC_SetAlarm_IT+0x170>)
 8005152:	6453      	str	r3, [r2, #68]	; 0x44
 8005154:	e7ed      	b.n	8005132 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005156:	69a3      	ldr	r3, [r4, #24]
 8005158:	69e2      	ldr	r2, [r4, #28]
 800515a:	4313      	orrs	r3, r2
 800515c:	4a02      	ldr	r2, [pc, #8]	; (8005168 <HAL_RTC_SetAlarm_IT+0x170>)
 800515e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005160:	e7bc      	b.n	80050dc <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8005162:	2002      	movs	r0, #2
}
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40002800 	.word	0x40002800
 800516c:	58000800 	.word	0x58000800

08005170 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005170:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005174:	2b01      	cmp	r3, #1
 8005176:	d017      	beq.n	80051a8 <HAL_RTCEx_EnableBypassShadow+0x38>
 8005178:	2101      	movs	r1, #1
 800517a:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800517e:	2302      	movs	r3, #2
 8005180:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005184:	4b09      	ldr	r3, [pc, #36]	; (80051ac <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8005186:	22ca      	movs	r2, #202	; 0xca
 8005188:	625a      	str	r2, [r3, #36]	; 0x24
 800518a:	2253      	movs	r2, #83	; 0x53
 800518c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800518e:	699a      	ldr	r2, [r3, #24]
 8005190:	f042 0220 	orr.w	r2, r2, #32
 8005194:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005196:	22ff      	movs	r2, #255	; 0xff
 8005198:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800519a:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800519e:	2300      	movs	r3, #0
 80051a0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80051a4:	4618      	mov	r0, r3
 80051a6:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80051a8:	2002      	movs	r0, #2
}
 80051aa:	4770      	bx	lr
 80051ac:	40002800 	.word	0x40002800

080051b0 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80051b0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d020      	beq.n	80051fa <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 80051b8:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 80051ba:	2101      	movs	r1, #1
 80051bc:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80051c0:	2302      	movs	r3, #2
 80051c2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051c6:	4b0e      	ldr	r3, [pc, #56]	; (8005200 <HAL_RTCEx_SetSSRU_IT+0x50>)
 80051c8:	22ca      	movs	r2, #202	; 0xca
 80051ca:	625a      	str	r2, [r3, #36]	; 0x24
 80051cc:	2253      	movs	r2, #83	; 0x53
 80051ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80051d0:	699a      	ldr	r2, [r3, #24]
 80051d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051d6:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80051d8:	4c0a      	ldr	r4, [pc, #40]	; (8005204 <HAL_RTCEx_SetSSRU_IT+0x54>)
 80051da:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80051de:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80051e2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051e6:	22ff      	movs	r2, #255	; 0xff
 80051e8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80051ea:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80051ee:	2300      	movs	r3, #0
 80051f0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80051f4:	4618      	mov	r0, r3
}
 80051f6:	bc10      	pop	{r4}
 80051f8:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80051fa:	2002      	movs	r0, #2
}
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40002800 	.word	0x40002800
 8005204:	58000800 	.word	0x58000800

08005208 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005208:	b510      	push	{r4, lr}
 800520a:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800520c:	4b07      	ldr	r3, [pc, #28]	; (800522c <HAL_RTCEx_SSRUIRQHandler+0x24>)
 800520e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005210:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005214:	d103      	bne.n	800521e <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005216:	2301      	movs	r3, #1
 8005218:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800521c:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 800521e:	4b03      	ldr	r3, [pc, #12]	; (800522c <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8005220:	2240      	movs	r2, #64	; 0x40
 8005222:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8005224:	f7fd fa98 	bl	8002758 <HAL_RTCEx_SSRUEventCallback>
 8005228:	e7f5      	b.n	8005216 <HAL_RTCEx_SSRUIRQHandler+0xe>
 800522a:	bf00      	nop
 800522c:	40002800 	.word	0x40002800

08005230 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005230:	4770      	bx	lr

08005232 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8005232:	0089      	lsls	r1, r1, #2
 8005234:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005238:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800523c:	600a      	str	r2, [r1, #0]
}
 800523e:	4770      	bx	lr

08005240 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8005240:	0089      	lsls	r1, r1, #2
 8005242:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005246:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800524a:	6808      	ldr	r0, [r1, #0]
}
 800524c:	4770      	bx	lr

0800524e <HAL_SPI_ErrorCallback>:
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800524e:	4770      	bx	lr

08005250 <HAL_SPI_IRQHandler>:
{
 8005250:	b530      	push	{r4, r5, lr}
 8005252:	b085      	sub	sp, #20
 8005254:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8005256:	6802      	ldr	r2, [r0, #0]
 8005258:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800525a:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800525c:	f3c3 1080 	ubfx	r0, r3, #6, #1
 8005260:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005264:	d105      	bne.n	8005272 <HAL_SPI_IRQHandler+0x22>
 8005266:	f013 0f01 	tst.w	r3, #1
 800526a:	d002      	beq.n	8005272 <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800526c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005270:	d169      	bne.n	8005346 <HAL_SPI_IRQHandler+0xf6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005272:	f013 0f02 	tst.w	r3, #2
 8005276:	d002      	beq.n	800527e <HAL_SPI_IRQHandler+0x2e>
 8005278:	f011 0f80 	tst.w	r1, #128	; 0x80
 800527c:	d167      	bne.n	800534e <HAL_SPI_IRQHandler+0xfe>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800527e:	f3c3 1540 	ubfx	r5, r3, #5, #1
 8005282:	f013 0f20 	tst.w	r3, #32
 8005286:	d103      	bne.n	8005290 <HAL_SPI_IRQHandler+0x40>
 8005288:	b910      	cbnz	r0, 8005290 <HAL_SPI_IRQHandler+0x40>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800528a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800528e:	d061      	beq.n	8005354 <HAL_SPI_IRQHandler+0x104>
 8005290:	f011 0f20 	tst.w	r1, #32
 8005294:	d05e      	beq.n	8005354 <HAL_SPI_IRQHandler+0x104>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005296:	b178      	cbz	r0, 80052b8 <HAL_SPI_IRQHandler+0x68>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005298:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800529c:	b2c0      	uxtb	r0, r0
 800529e:	2803      	cmp	r0, #3
 80052a0:	d05a      	beq.n	8005358 <HAL_SPI_IRQHandler+0x108>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80052a2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80052a4:	f040 0004 	orr.w	r0, r0, #4
 80052a8:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052aa:	2000      	movs	r0, #0
 80052ac:	9000      	str	r0, [sp, #0]
 80052ae:	68d0      	ldr	r0, [r2, #12]
 80052b0:	9000      	str	r0, [sp, #0]
 80052b2:	6890      	ldr	r0, [r2, #8]
 80052b4:	9000      	str	r0, [sp, #0]
 80052b6:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80052b8:	b165      	cbz	r5, 80052d4 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80052ba:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80052bc:	f040 0001 	orr.w	r0, r0, #1
 80052c0:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80052c2:	2000      	movs	r0, #0
 80052c4:	9002      	str	r0, [sp, #8]
 80052c6:	6890      	ldr	r0, [r2, #8]
 80052c8:	9002      	str	r0, [sp, #8]
 80052ca:	6810      	ldr	r0, [r2, #0]
 80052cc:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80052d0:	6010      	str	r0, [r2, #0]
 80052d2:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80052d4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80052d8:	d009      	beq.n	80052ee <HAL_SPI_IRQHandler+0x9e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80052da:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80052dc:	f043 0308 	orr.w	r3, r3, #8
 80052e0:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80052e2:	2300      	movs	r3, #0
 80052e4:	9303      	str	r3, [sp, #12]
 80052e6:	6823      	ldr	r3, [r4, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	9303      	str	r3, [sp, #12]
 80052ec:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052ee:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d02f      	beq.n	8005354 <HAL_SPI_IRQHandler+0x104>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80052f4:	6822      	ldr	r2, [r4, #0]
 80052f6:	6853      	ldr	r3, [r2, #4]
 80052f8:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80052fc:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80052fe:	2301      	movs	r3, #1
 8005300:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005304:	f011 0f03 	tst.w	r1, #3
 8005308:	d02e      	beq.n	8005368 <HAL_SPI_IRQHandler+0x118>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800530a:	6822      	ldr	r2, [r4, #0]
 800530c:	6853      	ldr	r3, [r2, #4]
 800530e:	f023 0303 	bic.w	r3, r3, #3
 8005312:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8005314:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005316:	b14b      	cbz	r3, 800532c <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005318:	4a15      	ldr	r2, [pc, #84]	; (8005370 <HAL_SPI_IRQHandler+0x120>)
 800531a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800531c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800531e:	f7fe f8e1 	bl	80034e4 <HAL_DMA_Abort_IT>
 8005322:	b118      	cbz	r0, 800532c <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005324:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800532a:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800532c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800532e:	b18b      	cbz	r3, 8005354 <HAL_SPI_IRQHandler+0x104>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005330:	4a0f      	ldr	r2, [pc, #60]	; (8005370 <HAL_SPI_IRQHandler+0x120>)
 8005332:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005334:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005336:	f7fe f8d5 	bl	80034e4 <HAL_DMA_Abort_IT>
 800533a:	b158      	cbz	r0, 8005354 <HAL_SPI_IRQHandler+0x104>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800533c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800533e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005342:	6623      	str	r3, [r4, #96]	; 0x60
 8005344:	e006      	b.n	8005354 <HAL_SPI_IRQHandler+0x104>
    hspi->RxISR(hspi);
 8005346:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005348:	4620      	mov	r0, r4
 800534a:	4798      	blx	r3
    return;
 800534c:	e002      	b.n	8005354 <HAL_SPI_IRQHandler+0x104>
    hspi->TxISR(hspi);
 800534e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005350:	4620      	mov	r0, r4
 8005352:	4798      	blx	r3
}
 8005354:	b005      	add	sp, #20
 8005356:	bd30      	pop	{r4, r5, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005358:	2300      	movs	r3, #0
 800535a:	9301      	str	r3, [sp, #4]
 800535c:	68d3      	ldr	r3, [r2, #12]
 800535e:	9301      	str	r3, [sp, #4]
 8005360:	6893      	ldr	r3, [r2, #8]
 8005362:	9301      	str	r3, [sp, #4]
 8005364:	9b01      	ldr	r3, [sp, #4]
        return;
 8005366:	e7f5      	b.n	8005354 <HAL_SPI_IRQHandler+0x104>
        HAL_SPI_ErrorCallback(hspi);
 8005368:	4620      	mov	r0, r4
 800536a:	f7ff ff70 	bl	800524e <HAL_SPI_ErrorCallback>
    return;
 800536e:	e7f1      	b.n	8005354 <HAL_SPI_IRQHandler+0x104>
 8005370:	08005375 	.word	0x08005375

08005374 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005374:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005376:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800537e:	87c3      	strh	r3, [r0, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005380:	f7ff ff65 	bl	800524e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005384:	bd08      	pop	{r3, pc}
	...

08005388 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005388:	4b07      	ldr	r3, [pc, #28]	; (80053a8 <SUBGHZSPI_Init+0x20>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005390:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8005392:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 8005396:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005398:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800539c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053a4:	601a      	str	r2, [r3, #0]
}
 80053a6:	4770      	bx	lr
 80053a8:	58010000 	.word	0x58010000

080053ac <HAL_SUBGHZ_Init>:
{
 80053ac:	b530      	push	{r4, r5, lr}
 80053ae:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 80053b0:	2800      	cmp	r0, #0
 80053b2:	d04e      	beq.n	8005452 <HAL_SUBGHZ_Init+0xa6>
 80053b4:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 80053b6:	7983      	ldrb	r3, [r0, #6]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d03b      	beq.n	8005434 <HAL_SUBGHZ_Init+0x88>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80053bc:	2302      	movs	r3, #2
 80053be:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80053c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053c4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80053c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80053d0:	4b21      	ldr	r3, [pc, #132]	; (8005458 <HAL_SUBGHZ_Init+0xac>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80053d8:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80053dc:	2264      	movs	r2, #100	; 0x64
 80053de:	fb02 f303 	mul.w	r3, r2, r3
 80053e2:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 80053e4:	9b01      	ldr	r3, [sp, #4]
 80053e6:	b34b      	cbz	r3, 800543c <HAL_SUBGHZ_Init+0x90>
    count--;
 80053e8:	9b01      	ldr	r3, [sp, #4]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80053ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053f6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80053fa:	d1f3      	bne.n	80053e4 <HAL_SUBGHZ_Init+0x38>
    status = HAL_OK;
 80053fc:	2500      	movs	r5, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80053fe:	4b17      	ldr	r3, [pc, #92]	; (800545c <HAL_SUBGHZ_Init+0xb0>)
 8005400:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005404:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005408:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(EXTI->IMR2, ExtiLine);
 800540c:	4914      	ldr	r1, [pc, #80]	; (8005460 <HAL_SUBGHZ_Init+0xb4>)
 800540e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005412:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005416:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005420:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005422:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005426:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8005428:	b15d      	cbz	r5, 8005442 <HAL_SUBGHZ_Init+0x96>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 800542a:	2301      	movs	r3, #1
 800542c:	71a3      	strb	r3, [r4, #6]
}
 800542e:	4628      	mov	r0, r5
 8005430:	b003      	add	sp, #12
 8005432:	bd30      	pop	{r4, r5, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 8005434:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8005436:	f7fc ffc9 	bl	80023cc <HAL_SUBGHZ_MspInit>
 800543a:	e7bf      	b.n	80053bc <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800543c:	2501      	movs	r5, #1
 800543e:	60a5      	str	r5, [r4, #8]
      break;
 8005440:	e7dd      	b.n	80053fe <HAL_SUBGHZ_Init+0x52>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8005442:	6820      	ldr	r0, [r4, #0]
 8005444:	f7ff ffa0 	bl	8005388 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005448:	2301      	movs	r3, #1
 800544a:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800544c:	2300      	movs	r3, #0
 800544e:	60a3      	str	r3, [r4, #8]
 8005450:	e7eb      	b.n	800542a <HAL_SUBGHZ_Init+0x7e>
    return status;
 8005452:	2501      	movs	r5, #1
 8005454:	e7eb      	b.n	800542e <HAL_SUBGHZ_Init+0x82>
 8005456:	bf00      	nop
 8005458:	20000050 	.word	0x20000050
 800545c:	58000400 	.word	0x58000400
 8005460:	58000800 	.word	0x58000800

08005464 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005464:	b082      	sub	sp, #8
 8005466:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005468:	4b1a      	ldr	r3, [pc, #104]	; (80054d4 <SUBGHZSPI_Transmit+0x70>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005470:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005474:	2064      	movs	r0, #100	; 0x64
 8005476:	fb00 f303 	mul.w	r3, r0, r3
 800547a:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800547c:	9b01      	ldr	r3, [sp, #4]
 800547e:	b14b      	cbz	r3, 8005494 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005480:	9b01      	ldr	r3, [sp, #4]
 8005482:	3b01      	subs	r3, #1
 8005484:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005486:	4b14      	ldr	r3, [pc, #80]	; (80054d8 <SUBGHZSPI_Transmit+0x74>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f013 0f02 	tst.w	r3, #2
 800548e:	d0f5      	beq.n	800547c <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005490:	2000      	movs	r0, #0
 8005492:	e001      	b.n	8005498 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005494:	2001      	movs	r0, #1
 8005496:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8005498:	4b10      	ldr	r3, [pc, #64]	; (80054dc <SUBGHZSPI_Transmit+0x78>)
 800549a:	7019      	strb	r1, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800549c:	4b0d      	ldr	r3, [pc, #52]	; (80054d4 <SUBGHZSPI_Transmit+0x70>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80054a4:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80054a8:	2164      	movs	r1, #100	; 0x64
 80054aa:	fb01 f303 	mul.w	r3, r1, r3
 80054ae:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80054b0:	9b01      	ldr	r3, [sp, #4]
 80054b2:	b143      	cbz	r3, 80054c6 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80054b4:	9b01      	ldr	r3, [sp, #4]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80054ba:	4b07      	ldr	r3, [pc, #28]	; (80054d8 <SUBGHZSPI_Transmit+0x74>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f013 0f01 	tst.w	r3, #1
 80054c2:	d0f5      	beq.n	80054b0 <SUBGHZSPI_Transmit+0x4c>
 80054c4:	e001      	b.n	80054ca <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80054c6:	2001      	movs	r0, #1
 80054c8:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80054ca:	4b03      	ldr	r3, [pc, #12]	; (80054d8 <SUBGHZSPI_Transmit+0x74>)
 80054cc:	68db      	ldr	r3, [r3, #12]

  return status;
}
 80054ce:	b002      	add	sp, #8
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	20000050 	.word	0x20000050
 80054d8:	58010000 	.word	0x58010000
 80054dc:	5801000c 	.word	0x5801000c

080054e0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80054e0:	b410      	push	{r4}
 80054e2:	b083      	sub	sp, #12
 80054e4:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80054e6:	4b1c      	ldr	r3, [pc, #112]	; (8005558 <SUBGHZSPI_Receive+0x78>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80054ee:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80054f2:	2064      	movs	r0, #100	; 0x64
 80054f4:	fb00 f303 	mul.w	r3, r0, r3
 80054f8:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80054fa:	9b01      	ldr	r3, [sp, #4]
 80054fc:	b14b      	cbz	r3, 8005512 <SUBGHZSPI_Receive+0x32>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80054fe:	9b01      	ldr	r3, [sp, #4]
 8005500:	3b01      	subs	r3, #1
 8005502:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005504:	4b15      	ldr	r3, [pc, #84]	; (800555c <SUBGHZSPI_Receive+0x7c>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f013 0f02 	tst.w	r3, #2
 800550c:	d0f5      	beq.n	80054fa <SUBGHZSPI_Receive+0x1a>
  HAL_StatusTypeDef status = HAL_OK;
 800550e:	2000      	movs	r0, #0
 8005510:	e001      	b.n	8005516 <SUBGHZSPI_Receive+0x36>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005512:	2001      	movs	r0, #1
 8005514:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8005516:	4b12      	ldr	r3, [pc, #72]	; (8005560 <SUBGHZSPI_Receive+0x80>)
 8005518:	24ff      	movs	r4, #255	; 0xff
 800551a:	701c      	strb	r4, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800551c:	4b0e      	ldr	r3, [pc, #56]	; (8005558 <SUBGHZSPI_Receive+0x78>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005524:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005528:	2464      	movs	r4, #100	; 0x64
 800552a:	fb04 f303 	mul.w	r3, r4, r3
 800552e:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005530:	9b01      	ldr	r3, [sp, #4]
 8005532:	b143      	cbz	r3, 8005546 <SUBGHZSPI_Receive+0x66>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005534:	9b01      	ldr	r3, [sp, #4]
 8005536:	3b01      	subs	r3, #1
 8005538:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800553a:	4b08      	ldr	r3, [pc, #32]	; (800555c <SUBGHZSPI_Receive+0x7c>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f013 0f01 	tst.w	r3, #1
 8005542:	d0f5      	beq.n	8005530 <SUBGHZSPI_Receive+0x50>
 8005544:	e001      	b.n	800554a <SUBGHZSPI_Receive+0x6a>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005546:	2001      	movs	r0, #1
 8005548:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800554a:	4b04      	ldr	r3, [pc, #16]	; (800555c <SUBGHZSPI_Receive+0x7c>)
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	700b      	strb	r3, [r1, #0]

  return status;
}
 8005550:	b003      	add	sp, #12
 8005552:	bc10      	pop	{r4}
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	20000050 	.word	0x20000050
 800555c:	58010000 	.word	0x58010000
 8005560:	5801000c 	.word	0x5801000c

08005564 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005564:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8005566:	4b13      	ldr	r3, [pc, #76]	; (80055b4 <SUBGHZ_WaitOnBusy+0x50>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800556e:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8005572:	2264      	movs	r2, #100	; 0x64
 8005574:	fb02 f303 	mul.w	r3, r2, r3
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	e006      	b.n	800558a <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800557c:	2302      	movs	r3, #2
 800557e:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8005580:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8005582:	b002      	add	sp, #8
 8005584:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8005586:	4213      	tst	r3, r2
 8005588:	d012      	beq.n	80055b0 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800558a:	4b0b      	ldr	r3, [pc, #44]	; (80055b8 <SUBGHZ_WaitOnBusy+0x54>)
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	f013 0304 	ands.w	r3, r3, #4
 8005592:	d000      	beq.n	8005596 <SUBGHZ_WaitOnBusy+0x32>
 8005594:	2301      	movs	r3, #1
    if (count == 0U)
 8005596:	9a01      	ldr	r2, [sp, #4]
 8005598:	2a00      	cmp	r2, #0
 800559a:	d0ef      	beq.n	800557c <SUBGHZ_WaitOnBusy+0x18>
    count--;
 800559c:	9a01      	ldr	r2, [sp, #4]
 800559e:	3a01      	subs	r2, #1
 80055a0:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80055a2:	4a05      	ldr	r2, [pc, #20]	; (80055b8 <SUBGHZ_WaitOnBusy+0x54>)
 80055a4:	6952      	ldr	r2, [r2, #20]
 80055a6:	f012 0202 	ands.w	r2, r2, #2
 80055aa:	d0ec      	beq.n	8005586 <SUBGHZ_WaitOnBusy+0x22>
 80055ac:	2201      	movs	r2, #1
 80055ae:	e7ea      	b.n	8005586 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 80055b0:	2000      	movs	r0, #0
 80055b2:	e7e6      	b.n	8005582 <SUBGHZ_WaitOnBusy+0x1e>
 80055b4:	20000050 	.word	0x20000050
 80055b8:	58000400 	.word	0x58000400

080055bc <SUBGHZ_CheckDeviceReady>:
{
 80055bc:	b500      	push	{lr}
 80055be:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80055c0:	7903      	ldrb	r3, [r0, #4]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d004      	beq.n	80055d0 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80055c6:	f7ff ffcd 	bl	8005564 <SUBGHZ_WaitOnBusy>
}
 80055ca:	b003      	add	sp, #12
 80055cc:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 80055d0:	4b0d      	ldr	r3, [pc, #52]	; (8005608 <SUBGHZ_CheckDeviceReady+0x4c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80055d8:	f3c3 334f 	ubfx	r3, r3, #13, #16
 80055dc:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80055de:	4a0b      	ldr	r2, [pc, #44]	; (800560c <SUBGHZ_CheckDeviceReady+0x50>)
 80055e0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80055e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 80055ec:	9b01      	ldr	r3, [sp, #4]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 80055f2:	9b01      	ldr	r3, [sp, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1f9      	bne.n	80055ec <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80055f8:	4a04      	ldr	r2, [pc, #16]	; (800560c <SUBGHZ_CheckDeviceReady+0x50>)
 80055fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80055fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005602:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005606:	e7de      	b.n	80055c6 <SUBGHZ_CheckDeviceReady+0xa>
 8005608:	20000050 	.word	0x20000050
 800560c:	58000400 	.word	0x58000400

08005610 <HAL_SUBGHZ_WriteRegisters>:
{
 8005610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005614:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005616:	7980      	ldrb	r0, [r0, #6]
 8005618:	fa5f f880 	uxtb.w	r8, r0
 800561c:	f1b8 0f01 	cmp.w	r8, #1
 8005620:	d13e      	bne.n	80056a0 <HAL_SUBGHZ_WriteRegisters+0x90>
 8005622:	460c      	mov	r4, r1
 8005624:	4617      	mov	r7, r2
 8005626:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005628:	796b      	ldrb	r3, [r5, #5]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d03b      	beq.n	80056a6 <HAL_SUBGHZ_WriteRegisters+0x96>
 800562e:	2301      	movs	r3, #1
 8005630:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005632:	2302      	movs	r3, #2
 8005634:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005636:	4628      	mov	r0, r5
 8005638:	f7ff ffc0 	bl	80055bc <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800563c:	4a1b      	ldr	r2, [pc, #108]	; (80056ac <HAL_SUBGHZ_WriteRegisters+0x9c>)
 800563e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005642:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800564a:	210d      	movs	r1, #13
 800564c:	4628      	mov	r0, r5
 800564e:	f7ff ff09 	bl	8005464 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005652:	0a21      	lsrs	r1, r4, #8
 8005654:	4628      	mov	r0, r5
 8005656:	f7ff ff05 	bl	8005464 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800565a:	b2e1      	uxtb	r1, r4
 800565c:	4628      	mov	r0, r5
 800565e:	f7ff ff01 	bl	8005464 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005662:	2400      	movs	r4, #0
 8005664:	e005      	b.n	8005672 <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005666:	5d39      	ldrb	r1, [r7, r4]
 8005668:	4628      	mov	r0, r5
 800566a:	f7ff fefb 	bl	8005464 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800566e:	3401      	adds	r4, #1
 8005670:	b2a4      	uxth	r4, r4
 8005672:	42b4      	cmp	r4, r6
 8005674:	d3f7      	bcc.n	8005666 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005676:	4a0d      	ldr	r2, [pc, #52]	; (80056ac <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8005678:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800567c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005684:	4628      	mov	r0, r5
 8005686:	f7ff ff6d 	bl	8005564 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800568a:	68ab      	ldr	r3, [r5, #8]
 800568c:	b90b      	cbnz	r3, 8005692 <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 800568e:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005692:	2301      	movs	r3, #1
 8005694:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005696:	2300      	movs	r3, #0
 8005698:	716b      	strb	r3, [r5, #5]
}
 800569a:	4640      	mov	r0, r8
 800569c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80056a0:	f04f 0802 	mov.w	r8, #2
 80056a4:	e7f9      	b.n	800569a <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 80056a6:	f04f 0802 	mov.w	r8, #2
 80056aa:	e7f6      	b.n	800569a <HAL_SUBGHZ_WriteRegisters+0x8a>
 80056ac:	58000400 	.word	0x58000400

080056b0 <HAL_SUBGHZ_ReadRegisters>:
{
 80056b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b4:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80056b6:	7980      	ldrb	r0, [r0, #6]
 80056b8:	fa5f f880 	uxtb.w	r8, r0
 80056bc:	f1b8 0f01 	cmp.w	r8, #1
 80056c0:	d141      	bne.n	8005746 <HAL_SUBGHZ_ReadRegisters+0x96>
 80056c2:	460c      	mov	r4, r1
 80056c4:	4615      	mov	r5, r2
 80056c6:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80056c8:	7973      	ldrb	r3, [r6, #5]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d03e      	beq.n	800574c <HAL_SUBGHZ_ReadRegisters+0x9c>
 80056ce:	2301      	movs	r3, #1
 80056d0:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80056d2:	4630      	mov	r0, r6
 80056d4:	f7ff ff72 	bl	80055bc <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80056d8:	4a1e      	ldr	r2, [pc, #120]	; (8005754 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 80056da:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80056de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80056e6:	211d      	movs	r1, #29
 80056e8:	4630      	mov	r0, r6
 80056ea:	f7ff febb 	bl	8005464 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80056ee:	0a21      	lsrs	r1, r4, #8
 80056f0:	4630      	mov	r0, r6
 80056f2:	f7ff feb7 	bl	8005464 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80056f6:	b2e1      	uxtb	r1, r4
 80056f8:	4630      	mov	r0, r6
 80056fa:	f7ff feb3 	bl	8005464 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80056fe:	2100      	movs	r1, #0
 8005700:	4630      	mov	r0, r6
 8005702:	f7ff feaf 	bl	8005464 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005706:	2400      	movs	r4, #0
 8005708:	e006      	b.n	8005718 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800570a:	4629      	mov	r1, r5
 800570c:	4630      	mov	r0, r6
 800570e:	f7ff fee7 	bl	80054e0 <SUBGHZSPI_Receive>
      pData++;
 8005712:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005714:	3401      	adds	r4, #1
 8005716:	b2a4      	uxth	r4, r4
 8005718:	42bc      	cmp	r4, r7
 800571a:	d3f6      	bcc.n	800570a <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800571c:	4a0d      	ldr	r2, [pc, #52]	; (8005754 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 800571e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005726:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800572a:	4630      	mov	r0, r6
 800572c:	f7ff ff1a 	bl	8005564 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005730:	68b3      	ldr	r3, [r6, #8]
 8005732:	b90b      	cbnz	r3, 8005738 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8005734:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005738:	2301      	movs	r3, #1
 800573a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 800573c:	2300      	movs	r3, #0
 800573e:	7173      	strb	r3, [r6, #5]
}
 8005740:	4640      	mov	r0, r8
 8005742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005746:	f04f 0802 	mov.w	r8, #2
 800574a:	e7f9      	b.n	8005740 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 800574c:	f04f 0802 	mov.w	r8, #2
 8005750:	e7f6      	b.n	8005740 <HAL_SUBGHZ_ReadRegisters+0x90>
 8005752:	bf00      	nop
 8005754:	58000400 	.word	0x58000400

08005758 <HAL_SUBGHZ_ExecSetCmd>:
{
 8005758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800575c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800575e:	7980      	ldrb	r0, [r0, #6]
 8005760:	fa5f f980 	uxtb.w	r9, r0
 8005764:	f1b9 0f01 	cmp.w	r9, #1
 8005768:	d143      	bne.n	80057f2 <HAL_SUBGHZ_ExecSetCmd+0x9a>
 800576a:	4688      	mov	r8, r1
 800576c:	4617      	mov	r7, r2
 800576e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005770:	796b      	ldrb	r3, [r5, #5]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d040      	beq.n	80057f8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8005776:	2301      	movs	r3, #1
 8005778:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800577a:	4628      	mov	r0, r5
 800577c:	f7ff ff1e 	bl	80055bc <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005780:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8005784:	d005      	beq.n	8005792 <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8005786:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 800578a:	d002      	beq.n	8005792 <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800578c:	2300      	movs	r3, #0
 800578e:	712b      	strb	r3, [r5, #4]
 8005790:	e001      	b.n	8005796 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005792:	2301      	movs	r3, #1
 8005794:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005796:	4a1a      	ldr	r2, [pc, #104]	; (8005800 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8005798:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800579c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80057a4:	4641      	mov	r1, r8
 80057a6:	4628      	mov	r0, r5
 80057a8:	f7ff fe5c 	bl	8005464 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80057ac:	2400      	movs	r4, #0
 80057ae:	e005      	b.n	80057bc <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80057b0:	5d39      	ldrb	r1, [r7, r4]
 80057b2:	4628      	mov	r0, r5
 80057b4:	f7ff fe56 	bl	8005464 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80057b8:	3401      	adds	r4, #1
 80057ba:	b2a4      	uxth	r4, r4
 80057bc:	42b4      	cmp	r4, r6
 80057be:	d3f7      	bcc.n	80057b0 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80057c0:	4a0f      	ldr	r2, [pc, #60]	; (8005800 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 80057c2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80057c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 80057ce:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 80057d2:	d10a      	bne.n	80057ea <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80057d4:	68ab      	ldr	r3, [r5, #8]
 80057d6:	b90b      	cbnz	r3, 80057dc <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 80057d8:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80057dc:	2301      	movs	r3, #1
 80057de:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80057e0:	2300      	movs	r3, #0
 80057e2:	716b      	strb	r3, [r5, #5]
}
 80057e4:	4648      	mov	r0, r9
 80057e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80057ea:	4628      	mov	r0, r5
 80057ec:	f7ff feba 	bl	8005564 <SUBGHZ_WaitOnBusy>
 80057f0:	e7f0      	b.n	80057d4 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 80057f2:	f04f 0902 	mov.w	r9, #2
 80057f6:	e7f5      	b.n	80057e4 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 80057f8:	f04f 0902 	mov.w	r9, #2
 80057fc:	e7f2      	b.n	80057e4 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 80057fe:	bf00      	nop
 8005800:	58000400 	.word	0x58000400

08005804 <HAL_SUBGHZ_ExecGetCmd>:
{
 8005804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005808:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800580a:	7980      	ldrb	r0, [r0, #6]
 800580c:	fa5f f880 	uxtb.w	r8, r0
 8005810:	f1b8 0f01 	cmp.w	r8, #1
 8005814:	d139      	bne.n	800588a <HAL_SUBGHZ_ExecGetCmd+0x86>
 8005816:	460c      	mov	r4, r1
 8005818:	4615      	mov	r5, r2
 800581a:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800581c:	7973      	ldrb	r3, [r6, #5]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d036      	beq.n	8005890 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8005822:	2301      	movs	r3, #1
 8005824:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005826:	4630      	mov	r0, r6
 8005828:	f7ff fec8 	bl	80055bc <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800582c:	4a1a      	ldr	r2, [pc, #104]	; (8005898 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 800582e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005832:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800583a:	4621      	mov	r1, r4
 800583c:	4630      	mov	r0, r6
 800583e:	f7ff fe11 	bl	8005464 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005842:	2100      	movs	r1, #0
 8005844:	4630      	mov	r0, r6
 8005846:	f7ff fe0d 	bl	8005464 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800584a:	2400      	movs	r4, #0
 800584c:	e006      	b.n	800585c <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800584e:	4629      	mov	r1, r5
 8005850:	4630      	mov	r0, r6
 8005852:	f7ff fe45 	bl	80054e0 <SUBGHZSPI_Receive>
      pData++;
 8005856:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005858:	3401      	adds	r4, #1
 800585a:	b2a4      	uxth	r4, r4
 800585c:	42bc      	cmp	r4, r7
 800585e:	d3f6      	bcc.n	800584e <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005860:	4a0d      	ldr	r2, [pc, #52]	; (8005898 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8005862:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800586a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800586e:	4630      	mov	r0, r6
 8005870:	f7ff fe78 	bl	8005564 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005874:	68b3      	ldr	r3, [r6, #8]
 8005876:	b90b      	cbnz	r3, 800587c <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8005878:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800587c:	2301      	movs	r3, #1
 800587e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005880:	2300      	movs	r3, #0
 8005882:	7173      	strb	r3, [r6, #5]
}
 8005884:	4640      	mov	r0, r8
 8005886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800588a:	f04f 0802 	mov.w	r8, #2
 800588e:	e7f9      	b.n	8005884 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8005890:	f04f 0802 	mov.w	r8, #2
 8005894:	e7f6      	b.n	8005884 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8005896:	bf00      	nop
 8005898:	58000400 	.word	0x58000400

0800589c <HAL_SUBGHZ_IRQHandler>:
{
 800589c:	b530      	push	{r4, r5, lr}
 800589e:	b083      	sub	sp, #12
 80058a0:	4605      	mov	r5, r0
  uint8_t tmpisr[2] = {0};
 80058a2:	2300      	movs	r3, #0
 80058a4:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 80058a8:	2302      	movs	r3, #2
 80058aa:	aa01      	add	r2, sp, #4
 80058ac:	2112      	movs	r1, #18
 80058ae:	f7ff ffa9 	bl	8005804 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 80058b2:	f89d 4004 	ldrb.w	r4, [sp, #4]
  itsource = (itsource << 8) | tmpisr[1];
 80058b6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80058ba:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80058be:	f013 0f01 	tst.w	r3, #1
 80058c2:	d126      	bne.n	8005912 <HAL_SUBGHZ_IRQHandler+0x76>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80058c4:	f014 0f02 	tst.w	r4, #2
 80058c8:	d127      	bne.n	800591a <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80058ca:	f014 0f04 	tst.w	r4, #4
 80058ce:	d128      	bne.n	8005922 <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80058d0:	f014 0f08 	tst.w	r4, #8
 80058d4:	d129      	bne.n	800592a <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80058d6:	f014 0f10 	tst.w	r4, #16
 80058da:	d12a      	bne.n	8005932 <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80058dc:	f014 0f20 	tst.w	r4, #32
 80058e0:	d12b      	bne.n	800593a <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80058e2:	f014 0f40 	tst.w	r4, #64	; 0x40
 80058e6:	d12c      	bne.n	8005942 <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80058e8:	f014 0f80 	tst.w	r4, #128	; 0x80
 80058ec:	d006      	beq.n	80058fc <HAL_SUBGHZ_IRQHandler+0x60>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80058ee:	f414 7f80 	tst.w	r4, #256	; 0x100
 80058f2:	d02a      	beq.n	800594a <HAL_SUBGHZ_IRQHandler+0xae>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80058f4:	2101      	movs	r1, #1
 80058f6:	4628      	mov	r0, r5
 80058f8:	f010 fe64 	bl	80165c4 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80058fc:	f414 7f00 	tst.w	r4, #512	; 0x200
 8005900:	d128      	bne.n	8005954 <HAL_SUBGHZ_IRQHandler+0xb8>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8005902:	2302      	movs	r3, #2
 8005904:	aa01      	add	r2, sp, #4
 8005906:	4619      	mov	r1, r3
 8005908:	4628      	mov	r0, r5
 800590a:	f7ff ff25 	bl	8005758 <HAL_SUBGHZ_ExecSetCmd>
}
 800590e:	b003      	add	sp, #12
 8005910:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8005912:	4628      	mov	r0, r5
 8005914:	f010 fe3e 	bl	8016594 <HAL_SUBGHZ_TxCpltCallback>
 8005918:	e7d4      	b.n	80058c4 <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800591a:	4628      	mov	r0, r5
 800591c:	f010 fe42 	bl	80165a4 <HAL_SUBGHZ_RxCpltCallback>
 8005920:	e7d3      	b.n	80058ca <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8005922:	4628      	mov	r0, r5
 8005924:	f010 fe72 	bl	801660c <HAL_SUBGHZ_PreambleDetectedCallback>
 8005928:	e7d2      	b.n	80058d0 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800592a:	4628      	mov	r0, r5
 800592c:	f010 fe76 	bl	801661c <HAL_SUBGHZ_SyncWordValidCallback>
 8005930:	e7d1      	b.n	80058d6 <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8005932:	4628      	mov	r0, r5
 8005934:	f010 fe7a 	bl	801662c <HAL_SUBGHZ_HeaderValidCallback>
 8005938:	e7d0      	b.n	80058dc <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800593a:	4628      	mov	r0, r5
 800593c:	f010 fe5e 	bl	80165fc <HAL_SUBGHZ_HeaderErrorCallback>
 8005940:	e7cf      	b.n	80058e2 <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8005942:	4628      	mov	r0, r5
 8005944:	f010 fe36 	bl	80165b4 <HAL_SUBGHZ_CRCErrorCallback>
 8005948:	e7ce      	b.n	80058e8 <HAL_SUBGHZ_IRQHandler+0x4c>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800594a:	2100      	movs	r1, #0
 800594c:	4628      	mov	r0, r5
 800594e:	f010 fe39 	bl	80165c4 <HAL_SUBGHZ_CADStatusCallback>
 8005952:	e7d3      	b.n	80058fc <HAL_SUBGHZ_IRQHandler+0x60>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8005954:	4628      	mov	r0, r5
 8005956:	f010 fe47 	bl	80165e8 <HAL_SUBGHZ_RxTxTimeoutCallback>
 800595a:	e7d2      	b.n	8005902 <HAL_SUBGHZ_IRQHandler+0x66>

0800595c <HAL_SUBGHZ_WriteBuffer>:
{
 800595c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005960:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005962:	7980      	ldrb	r0, [r0, #6]
 8005964:	fa5f f880 	uxtb.w	r8, r0
 8005968:	f1b8 0f01 	cmp.w	r8, #1
 800596c:	d138      	bne.n	80059e0 <HAL_SUBGHZ_WriteBuffer+0x84>
 800596e:	460c      	mov	r4, r1
 8005970:	4617      	mov	r7, r2
 8005972:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005974:	796b      	ldrb	r3, [r5, #5]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d035      	beq.n	80059e6 <HAL_SUBGHZ_WriteBuffer+0x8a>
 800597a:	2301      	movs	r3, #1
 800597c:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800597e:	4628      	mov	r0, r5
 8005980:	f7ff fe1c 	bl	80055bc <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005984:	4a19      	ldr	r2, [pc, #100]	; (80059ec <HAL_SUBGHZ_WriteBuffer+0x90>)
 8005986:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800598a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800598e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005992:	210e      	movs	r1, #14
 8005994:	4628      	mov	r0, r5
 8005996:	f7ff fd65 	bl	8005464 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800599a:	4621      	mov	r1, r4
 800599c:	4628      	mov	r0, r5
 800599e:	f7ff fd61 	bl	8005464 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80059a2:	2400      	movs	r4, #0
 80059a4:	e005      	b.n	80059b2 <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80059a6:	5d39      	ldrb	r1, [r7, r4]
 80059a8:	4628      	mov	r0, r5
 80059aa:	f7ff fd5b 	bl	8005464 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80059ae:	3401      	adds	r4, #1
 80059b0:	b2a4      	uxth	r4, r4
 80059b2:	42b4      	cmp	r4, r6
 80059b4:	d3f7      	bcc.n	80059a6 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80059b6:	4a0d      	ldr	r2, [pc, #52]	; (80059ec <HAL_SUBGHZ_WriteBuffer+0x90>)
 80059b8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80059bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80059c4:	4628      	mov	r0, r5
 80059c6:	f7ff fdcd 	bl	8005564 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80059ca:	68ab      	ldr	r3, [r5, #8]
 80059cc:	b90b      	cbnz	r3, 80059d2 <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 80059ce:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80059d2:	2301      	movs	r3, #1
 80059d4:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80059d6:	2300      	movs	r3, #0
 80059d8:	716b      	strb	r3, [r5, #5]
}
 80059da:	4640      	mov	r0, r8
 80059dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80059e0:	f04f 0802 	mov.w	r8, #2
 80059e4:	e7f9      	b.n	80059da <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 80059e6:	f04f 0802 	mov.w	r8, #2
 80059ea:	e7f6      	b.n	80059da <HAL_SUBGHZ_WriteBuffer+0x7e>
 80059ec:	58000400 	.word	0x58000400

080059f0 <HAL_SUBGHZ_ReadBuffer>:
{
 80059f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f4:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80059f6:	7980      	ldrb	r0, [r0, #6]
 80059f8:	fa5f f880 	uxtb.w	r8, r0
 80059fc:	f1b8 0f01 	cmp.w	r8, #1
 8005a00:	d13d      	bne.n	8005a7e <HAL_SUBGHZ_ReadBuffer+0x8e>
 8005a02:	460c      	mov	r4, r1
 8005a04:	4615      	mov	r5, r2
 8005a06:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8005a08:	7973      	ldrb	r3, [r6, #5]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d03a      	beq.n	8005a84 <HAL_SUBGHZ_ReadBuffer+0x94>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005a12:	4630      	mov	r0, r6
 8005a14:	f7ff fdd2 	bl	80055bc <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005a18:	4a1c      	ldr	r2, [pc, #112]	; (8005a8c <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8005a1a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005a1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8005a26:	211e      	movs	r1, #30
 8005a28:	4630      	mov	r0, r6
 8005a2a:	f7ff fd1b 	bl	8005464 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005a2e:	4621      	mov	r1, r4
 8005a30:	4630      	mov	r0, r6
 8005a32:	f7ff fd17 	bl	8005464 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005a36:	2100      	movs	r1, #0
 8005a38:	4630      	mov	r0, r6
 8005a3a:	f7ff fd13 	bl	8005464 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005a3e:	2400      	movs	r4, #0
 8005a40:	e006      	b.n	8005a50 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005a42:	4629      	mov	r1, r5
 8005a44:	4630      	mov	r0, r6
 8005a46:	f7ff fd4b 	bl	80054e0 <SUBGHZSPI_Receive>
      pData++;
 8005a4a:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005a4c:	3401      	adds	r4, #1
 8005a4e:	b2a4      	uxth	r4, r4
 8005a50:	42bc      	cmp	r4, r7
 8005a52:	d3f6      	bcc.n	8005a42 <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005a54:	4a0d      	ldr	r2, [pc, #52]	; (8005a8c <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8005a56:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005a62:	4630      	mov	r0, r6
 8005a64:	f7ff fd7e 	bl	8005564 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005a68:	68b3      	ldr	r3, [r6, #8]
 8005a6a:	b90b      	cbnz	r3, 8005a70 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8005a6c:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005a70:	2301      	movs	r3, #1
 8005a72:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005a74:	2300      	movs	r3, #0
 8005a76:	7173      	strb	r3, [r6, #5]
}
 8005a78:	4640      	mov	r0, r8
 8005a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005a7e:	f04f 0802 	mov.w	r8, #2
 8005a82:	e7f9      	b.n	8005a78 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8005a84:	f04f 0802 	mov.w	r8, #2
 8005a88:	e7f6      	b.n	8005a78 <HAL_SUBGHZ_ReadBuffer+0x88>
 8005a8a:	bf00      	nop
 8005a8c:	58000400 	.word	0x58000400

08005a90 <HAL_UART_TxHalfCpltCallback>:
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005a90:	4770      	bx	lr

08005a92 <HAL_UART_RxCpltCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005a92:	4770      	bx	lr

08005a94 <HAL_UART_RxHalfCpltCallback>:
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005a94:	4770      	bx	lr

08005a96 <HAL_UART_ErrorCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a96:	4770      	bx	lr

08005a98 <HAL_UART_AbortCpltCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005a98:	4770      	bx	lr

08005a9a <HAL_UART_AbortTransmitCpltCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8005a9a:	4770      	bx	lr

08005a9c <HAL_UART_AbortReceiveCpltCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005a9c:	4770      	bx	lr

08005a9e <HAL_UARTEx_RxEventCallback>:
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a9e:	4770      	bx	lr

08005aa0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005aa0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa2:	e852 3f00 	ldrex	r3, [r2]
 8005aa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	e842 3100 	strex	r1, r3, [r2]
 8005aae:	2900      	cmp	r1, #0
 8005ab0:	d1f6      	bne.n	8005aa0 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ab2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	f102 0308 	add.w	r3, r2, #8
 8005ab8:	e853 3f00 	ldrex	r3, [r3]
 8005abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ac0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac4:	3208      	adds	r2, #8
 8005ac6:	e842 3100 	strex	r1, r3, [r2]
 8005aca:	2900      	cmp	r1, #0
 8005acc:	d1f1      	bne.n	8005ab2 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ace:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d006      	beq.n	8005ae2 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ad4:	2320      	movs	r3, #32
 8005ad6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ada:	2300      	movs	r3, #0
 8005adc:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ade:	6703      	str	r3, [r0, #112]	; 0x70
}
 8005ae0:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	e852 3f00 	ldrex	r3, [r2]
 8005ae8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aec:	e842 3100 	strex	r1, r3, [r2]
 8005af0:	2900      	cmp	r1, #0
 8005af2:	d1f6      	bne.n	8005ae2 <UART_EndRxTransfer+0x42>
 8005af4:	e7ee      	b.n	8005ad4 <UART_EndRxTransfer+0x34>

08005af6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005af6:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005af8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005b00:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005b04:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 8005b08:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b0a:	bd08      	pop	{r3, pc}

08005b0c <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b0c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005b10:	2b21      	cmp	r3, #33	; 0x21
 8005b12:	d000      	beq.n	8005b16 <UART_TxISR_8BIT+0xa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005b14:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8005b16:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	b993      	cbnz	r3, 8005b44 <UART_TxISR_8BIT+0x38>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005b1e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b20:	e852 3f00 	ldrex	r3, [r2]
 8005b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b28:	e842 3100 	strex	r1, r3, [r2]
 8005b2c:	2900      	cmp	r1, #0
 8005b2e:	d1f6      	bne.n	8005b1e <UART_TxISR_8BIT+0x12>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b30:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b32:	e852 3f00 	ldrex	r3, [r2]
 8005b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3a:	e842 3100 	strex	r1, r3, [r2]
 8005b3e:	2900      	cmp	r1, #0
 8005b40:	d1f6      	bne.n	8005b30 <UART_TxISR_8BIT+0x24>
 8005b42:	4770      	bx	lr
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005b44:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005b46:	781a      	ldrb	r2, [r3, #0]
 8005b48:	6803      	ldr	r3, [r0, #0]
 8005b4a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005b4c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005b4e:	3301      	adds	r3, #1
 8005b50:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8005b52:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 8005b60:	e7d8      	b.n	8005b14 <UART_TxISR_8BIT+0x8>

08005b62 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b62:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005b66:	2b21      	cmp	r3, #33	; 0x21
 8005b68:	d000      	beq.n	8005b6c <UART_TxISR_16BIT+0xa>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005b6a:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8005b6c:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	b993      	cbnz	r3, 8005b9a <UART_TxISR_16BIT+0x38>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005b74:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	e852 3f00 	ldrex	r3, [r2]
 8005b7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7e:	e842 3100 	strex	r1, r3, [r2]
 8005b82:	2900      	cmp	r1, #0
 8005b84:	d1f6      	bne.n	8005b74 <UART_TxISR_16BIT+0x12>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b86:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b88:	e852 3f00 	ldrex	r3, [r2]
 8005b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	e842 3100 	strex	r1, r3, [r2]
 8005b94:	2900      	cmp	r1, #0
 8005b96:	d1f6      	bne.n	8005b86 <UART_TxISR_16BIT+0x24>
 8005b98:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005b9a:	6d03      	ldr	r3, [r0, #80]	; 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	6802      	ldr	r2, [r0, #0]
 8005ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba4:	6293      	str	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005ba6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005ba8:	3302      	adds	r3, #2
 8005baa:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8005bac:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 8005bba:	e7d6      	b.n	8005b6a <UART_TxISR_16BIT+0x8>

08005bbc <UART_TxISR_8BIT_FIFOEN>:
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bbc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005bc0:	2b21      	cmp	r3, #33	; 0x21
 8005bc2:	d000      	beq.n	8005bc6 <UART_TxISR_8BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 8005bc4:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005bc6:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8005bca:	e017      	b.n	8005bfc <UART_TxISR_8BIT_FIFOEN+0x40>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005bcc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bce:	f102 0308 	add.w	r3, r2, #8
 8005bd2:	e853 3f00 	ldrex	r3, [r3]
 8005bd6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bda:	3208      	adds	r2, #8
 8005bdc:	e842 3100 	strex	r1, r3, [r2]
 8005be0:	2900      	cmp	r1, #0
 8005be2:	d1f3      	bne.n	8005bcc <UART_TxISR_8BIT_FIFOEN+0x10>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005be4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be6:	e852 3f00 	ldrex	r3, [r2]
 8005bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	e842 3100 	strex	r1, r3, [r2]
 8005bf2:	2900      	cmp	r1, #0
 8005bf4:	d1f6      	bne.n	8005be4 <UART_TxISR_8BIT_FIFOEN+0x28>
 8005bf6:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d0e1      	beq.n	8005bc4 <UART_TxISR_8BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 8005c00:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8005c04:	b292      	uxth	r2, r2
 8005c06:	2a00      	cmp	r2, #0
 8005c08:	d0e0      	beq.n	8005bcc <UART_TxISR_8BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005c0a:	6802      	ldr	r2, [r0, #0]
 8005c0c:	69d1      	ldr	r1, [r2, #28]
 8005c0e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005c12:	d0f1      	beq.n	8005bf8 <UART_TxISR_8BIT_FIFOEN+0x3c>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005c14:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005c16:	7809      	ldrb	r1, [r1, #0]
 8005c18:	6291      	str	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr++;
 8005c1a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8005c1c:	3201      	adds	r2, #1
 8005c1e:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8005c20:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8005c24:	b292      	uxth	r2, r2
 8005c26:	3a01      	subs	r2, #1
 8005c28:	b292      	uxth	r2, r2
 8005c2a:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
 8005c2e:	e7e3      	b.n	8005bf8 <UART_TxISR_8BIT_FIFOEN+0x3c>

08005c30 <UART_TxISR_16BIT_FIFOEN>:
{
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c30:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005c34:	2b21      	cmp	r3, #33	; 0x21
 8005c36:	d000      	beq.n	8005c3a <UART_TxISR_16BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 8005c38:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005c3a:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8005c3e:	e017      	b.n	8005c70 <UART_TxISR_16BIT_FIFOEN+0x40>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005c40:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c42:	f102 0308 	add.w	r3, r2, #8
 8005c46:	e853 3f00 	ldrex	r3, [r3]
 8005c4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4e:	3208      	adds	r2, #8
 8005c50:	e842 3100 	strex	r1, r3, [r2]
 8005c54:	2900      	cmp	r1, #0
 8005c56:	d1f3      	bne.n	8005c40 <UART_TxISR_16BIT_FIFOEN+0x10>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c58:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5a:	e852 3f00 	ldrex	r3, [r2]
 8005c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c62:	e842 3100 	strex	r1, r3, [r2]
 8005c66:	2900      	cmp	r1, #0
 8005c68:	d1f6      	bne.n	8005c58 <UART_TxISR_16BIT_FIFOEN+0x28>
 8005c6a:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d0e1      	beq.n	8005c38 <UART_TxISR_16BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 8005c74:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8005c78:	b292      	uxth	r2, r2
 8005c7a:	2a00      	cmp	r2, #0
 8005c7c:	d0e0      	beq.n	8005c40 <UART_TxISR_16BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005c7e:	6802      	ldr	r2, [r0, #0]
 8005c80:	69d1      	ldr	r1, [r2, #28]
 8005c82:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005c86:	d0f1      	beq.n	8005c6c <UART_TxISR_16BIT_FIFOEN+0x3c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8005c88:	6d01      	ldr	r1, [r0, #80]	; 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005c8a:	8809      	ldrh	r1, [r1, #0]
 8005c8c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005c90:	6291      	str	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8005c92:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8005c94:	3202      	adds	r2, #2
 8005c96:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8005c98:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8005c9c:	b292      	uxth	r2, r2
 8005c9e:	3a01      	subs	r2, #1
 8005ca0:	b292      	uxth	r2, r2
 8005ca2:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
 8005ca6:	e7e1      	b.n	8005c6c <UART_TxISR_16BIT_FIFOEN+0x3c>

08005ca8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ca8:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005caa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cac:	e852 3f00 	ldrex	r3, [r2]
 8005cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb4:	e842 3100 	strex	r1, r3, [r2]
 8005cb8:	2900      	cmp	r1, #0
 8005cba:	d1f6      	bne.n	8005caa <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cbc:	2320      	movs	r3, #32
 8005cbe:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	6743      	str	r3, [r0, #116]	; 0x74

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8005cc6:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8005cca:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ccc:	bd08      	pop	{r3, pc}

08005cce <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005cce:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8005cd0:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cd4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005cd8:	2a22      	cmp	r2, #34	; 0x22
 8005cda:	d005      	beq.n	8005ce8 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cdc:	6802      	ldr	r2, [r0, #0]
 8005cde:	6993      	ldr	r3, [r2, #24]
 8005ce0:	f043 0308 	orr.w	r3, r3, #8
 8005ce4:	6193      	str	r3, [r2, #24]
  }
}
 8005ce6:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ce8:	6802      	ldr	r2, [r0, #0]
 8005cea:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8005cf0:	400b      	ands	r3, r1
 8005cf2:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8005cf4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8005cfa:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8005d08:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1e9      	bne.n	8005ce6 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d12:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d14:	e852 3f00 	ldrex	r3, [r2]
 8005d18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1c:	e842 3100 	strex	r1, r3, [r2]
 8005d20:	2900      	cmp	r1, #0
 8005d22:	d1f6      	bne.n	8005d12 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d24:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d26:	f102 0308 	add.w	r3, r2, #8
 8005d2a:	e853 3f00 	ldrex	r3, [r3]
 8005d2e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d32:	3208      	adds	r2, #8
 8005d34:	e842 3100 	strex	r1, r3, [r2]
 8005d38:	2900      	cmp	r1, #0
 8005d3a:	d1f3      	bne.n	8005d24 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8005d3c:	2320      	movs	r3, #32
 8005d3e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8005d42:	2300      	movs	r3, #0
 8005d44:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d46:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d003      	beq.n	8005d54 <UART_RxISR_8BIT+0x86>
        huart->RxCpltCallback(huart);
 8005d4c:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8005d50:	4798      	blx	r3
 8005d52:	e7c8      	b.n	8005ce6 <UART_RxISR_8BIT+0x18>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d54:	2300      	movs	r3, #0
 8005d56:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d58:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5a:	e852 3f00 	ldrex	r3, [r2]
 8005d5e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d62:	e842 3100 	strex	r1, r3, [r2]
 8005d66:	2900      	cmp	r1, #0
 8005d68:	d1f6      	bne.n	8005d58 <UART_RxISR_8BIT+0x8a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d6a:	6803      	ldr	r3, [r0, #0]
 8005d6c:	69da      	ldr	r2, [r3, #28]
 8005d6e:	f012 0f10 	tst.w	r2, #16
 8005d72:	d001      	beq.n	8005d78 <UART_RxISR_8BIT+0xaa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d74:	2210      	movs	r2, #16
 8005d76:	621a      	str	r2, [r3, #32]
        huart->RxEventCallback(huart, huart->RxXferSize);
 8005d78:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8005d7c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005d80:	4798      	blx	r3
 8005d82:	e7b0      	b.n	8005ce6 <UART_RxISR_8BIT+0x18>

08005d84 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d84:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005d86:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d8a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005d8e:	2b22      	cmp	r3, #34	; 0x22
 8005d90:	d005      	beq.n	8005d9e <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d92:	6802      	ldr	r2, [r0, #0]
 8005d94:	6993      	ldr	r3, [r2, #24]
 8005d96:	f043 0308 	orr.w	r3, r3, #8
 8005d9a:	6193      	str	r3, [r2, #24]
  }
}
 8005d9c:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d9e:	6803      	ldr	r3, [r0, #0]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005da2:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8005da4:	4013      	ands	r3, r2
 8005da6:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8005da8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005daa:	3302      	adds	r3, #2
 8005dac:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8005dae:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8005dbc:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1ea      	bne.n	8005d9c <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dc6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc8:	e852 3f00 	ldrex	r3, [r2]
 8005dcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd0:	e842 3100 	strex	r1, r3, [r2]
 8005dd4:	2900      	cmp	r1, #0
 8005dd6:	d1f6      	bne.n	8005dc6 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dd8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dda:	f102 0308 	add.w	r3, r2, #8
 8005dde:	e853 3f00 	ldrex	r3, [r3]
 8005de2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de6:	3208      	adds	r2, #8
 8005de8:	e842 3100 	strex	r1, r3, [r2]
 8005dec:	2900      	cmp	r1, #0
 8005dee:	d1f3      	bne.n	8005dd8 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8005df0:	2320      	movs	r3, #32
 8005df2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8005df6:	2300      	movs	r3, #0
 8005df8:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dfa:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d003      	beq.n	8005e08 <UART_RxISR_16BIT+0x84>
        huart->RxCpltCallback(huart);
 8005e00:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8005e04:	4798      	blx	r3
 8005e06:	e7c9      	b.n	8005d9c <UART_RxISR_16BIT+0x18>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e0c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0e:	e852 3f00 	ldrex	r3, [r2]
 8005e12:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e16:	e842 3100 	strex	r1, r3, [r2]
 8005e1a:	2900      	cmp	r1, #0
 8005e1c:	d1f6      	bne.n	8005e0c <UART_RxISR_16BIT+0x88>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e1e:	6803      	ldr	r3, [r0, #0]
 8005e20:	69da      	ldr	r2, [r3, #28]
 8005e22:	f012 0f10 	tst.w	r2, #16
 8005e26:	d001      	beq.n	8005e2c <UART_RxISR_16BIT+0xa8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e28:	2210      	movs	r2, #16
 8005e2a:	621a      	str	r2, [r3, #32]
        huart->RxEventCallback(huart, huart->RxXferSize);
 8005e2c:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8005e30:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005e34:	4798      	blx	r3
 8005e36:	e7b1      	b.n	8005d9c <UART_RxISR_16BIT+0x18>

08005e38 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8005e3c:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005e40:	6803      	ldr	r3, [r0, #0]
 8005e42:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005e44:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005e48:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e4c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005e50:	2a22      	cmp	r2, #34	; 0x22
 8005e52:	d005      	beq.n	8005e60 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e54:	699a      	ldr	r2, [r3, #24]
 8005e56:	f042 0208 	orr.w	r2, r2, #8
 8005e5a:	619a      	str	r2, [r3, #24]
  }
}
 8005e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e60:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8005e62:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005e66:	e00e      	b.n	8005e86 <UART_RxISR_8BIT_FIFOEN+0x4e>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e68:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005e6c:	b133      	cbz	r3, 8005e7c <UART_RxISR_8BIT_FIFOEN+0x44>
          huart->ErrorCallback(huart);
 8005e6e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8005e72:	4620      	mov	r0, r4
 8005e74:	4798      	blx	r3
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e76:	2300      	movs	r3, #0
 8005e78:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 8005e7c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d046      	beq.n	8005f14 <UART_RxISR_8BIT_FIFOEN+0xdc>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005e86:	2f00      	cmp	r7, #0
 8005e88:	f000 8081 	beq.w	8005f8e <UART_RxISR_8BIT_FIFOEN+0x156>
 8005e8c:	f015 0f20 	tst.w	r5, #32
 8005e90:	d07d      	beq.n	8005f8e <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e96:	b2f3      	uxtb	r3, r6
 8005e98:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005e9a:	400b      	ands	r3, r1
 8005e9c:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8005e9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8005ea4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005eb6:	f015 0f07 	tst.w	r5, #7
 8005eba:	d0df      	beq.n	8005e7c <UART_RxISR_8BIT_FIFOEN+0x44>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ebc:	f015 0f01 	tst.w	r5, #1
 8005ec0:	d009      	beq.n	8005ed6 <UART_RxISR_8BIT_FIFOEN+0x9e>
 8005ec2:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005ec6:	d006      	beq.n	8005ed6 <UART_RxISR_8BIT_FIFOEN+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ec8:	2201      	movs	r2, #1
 8005eca:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ecc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ed6:	f015 0f02 	tst.w	r5, #2
 8005eda:	d00b      	beq.n	8005ef4 <UART_RxISR_8BIT_FIFOEN+0xbc>
 8005edc:	f018 0f01 	tst.w	r8, #1
 8005ee0:	d008      	beq.n	8005ef4 <UART_RxISR_8BIT_FIFOEN+0xbc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ee2:	6823      	ldr	r3, [r4, #0]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ee8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005eec:	f043 0304 	orr.w	r3, r3, #4
 8005ef0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ef4:	f015 0f04 	tst.w	r5, #4
 8005ef8:	d0b6      	beq.n	8005e68 <UART_RxISR_8BIT_FIFOEN+0x30>
 8005efa:	f018 0f01 	tst.w	r8, #1
 8005efe:	d0b3      	beq.n	8005e68 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	2204      	movs	r2, #4
 8005f04:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f06:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005f0a:	f043 0302 	orr.w	r3, r3, #2
 8005f0e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005f12:	e7a9      	b.n	8005e68 <UART_RxISR_8BIT_FIFOEN+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f14:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f16:	e852 3f00 	ldrex	r3, [r2]
 8005f1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1e:	e842 3100 	strex	r1, r3, [r2]
 8005f22:	2900      	cmp	r1, #0
 8005f24:	d1f6      	bne.n	8005f14 <UART_RxISR_8BIT_FIFOEN+0xdc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f26:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f28:	f102 0308 	add.w	r3, r2, #8
 8005f2c:	e853 3f00 	ldrex	r3, [r3]
 8005f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f34:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f38:	3208      	adds	r2, #8
 8005f3a:	e842 3100 	strex	r1, r3, [r2]
 8005f3e:	2900      	cmp	r1, #0
 8005f40:	d1f1      	bne.n	8005f26 <UART_RxISR_8BIT_FIFOEN+0xee>
        huart->RxState = HAL_UART_STATE_READY;
 8005f42:	2320      	movs	r3, #32
 8005f44:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f4c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d004      	beq.n	8005f5c <UART_RxISR_8BIT_FIFOEN+0x124>
          huart->RxCpltCallback(huart);
 8005f52:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8005f56:	4620      	mov	r0, r4
 8005f58:	4798      	blx	r3
 8005f5a:	e794      	b.n	8005e86 <UART_RxISR_8BIT_FIFOEN+0x4e>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f60:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	e852 3f00 	ldrex	r3, [r2]
 8005f66:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6a:	e842 3100 	strex	r1, r3, [r2]
 8005f6e:	2900      	cmp	r1, #0
 8005f70:	d1f6      	bne.n	8005f60 <UART_RxISR_8BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	69da      	ldr	r2, [r3, #28]
 8005f76:	f012 0f10 	tst.w	r2, #16
 8005f7a:	d001      	beq.n	8005f80 <UART_RxISR_8BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f7c:	2210      	movs	r2, #16
 8005f7e:	621a      	str	r2, [r3, #32]
          huart->RxEventCallback(huart, huart->RxXferSize);
 8005f80:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8005f84:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005f88:	4620      	mov	r0, r4
 8005f8a:	4798      	blx	r3
 8005f8c:	e77b      	b.n	8005e86 <UART_RxISR_8BIT_FIFOEN+0x4e>
    rxdatacount = huart->RxXferCount;
 8005f8e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005f92:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f43f af61 	beq.w	8005e5c <UART_RxISR_8BIT_FIFOEN+0x24>
 8005f9a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	f67f af5c 	bls.w	8005e5c <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005fa4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa6:	f102 0308 	add.w	r3, r2, #8
 8005faa:	e853 3f00 	ldrex	r3, [r3]
 8005fae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	3208      	adds	r2, #8
 8005fb4:	e842 3100 	strex	r1, r3, [r2]
 8005fb8:	2900      	cmp	r1, #0
 8005fba:	d1f3      	bne.n	8005fa4 <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 8005fbc:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 8005fbe:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005fc0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc2:	e852 3f00 	ldrex	r3, [r2]
 8005fc6:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fca:	e842 3100 	strex	r1, r3, [r2]
 8005fce:	2900      	cmp	r1, #0
 8005fd0:	d1f6      	bne.n	8005fc0 <UART_RxISR_8BIT_FIFOEN+0x188>
 8005fd2:	e743      	b.n	8005e5c <UART_RxISR_8BIT_FIFOEN+0x24>
 8005fd4:	08005ccf 	.word	0x08005ccf

08005fd8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005fdc:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005fe0:	6803      	ldr	r3, [r0, #0]
 8005fe2:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005fe4:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005fe8:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fec:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005ff0:	2a22      	cmp	r2, #34	; 0x22
 8005ff2:	d005      	beq.n	8006000 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ff4:	699a      	ldr	r2, [r3, #24]
 8005ff6:	f042 0208 	orr.w	r2, r2, #8
 8005ffa:	619a      	str	r2, [r3, #24]
  }
}
 8005ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006000:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8006002:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006006:	e00e      	b.n	8006026 <UART_RxISR_16BIT_FIFOEN+0x4e>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006008:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800600c:	b133      	cbz	r3, 800601c <UART_RxISR_16BIT_FIFOEN+0x44>
          huart->ErrorCallback(huart);
 800600e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8006012:	4620      	mov	r0, r4
 8006014:	4798      	blx	r3
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006016:	2300      	movs	r3, #0
 8006018:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 800601c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d044      	beq.n	80060b0 <UART_RxISR_16BIT_FIFOEN+0xd8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006026:	2f00      	cmp	r7, #0
 8006028:	d07f      	beq.n	800612a <UART_RxISR_16BIT_FIFOEN+0x152>
 800602a:	f015 0f20 	tst.w	r5, #32
 800602e:	d07c      	beq.n	800612a <UART_RxISR_16BIT_FIFOEN+0x152>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006034:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8006036:	4033      	ands	r3, r6
 8006038:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800603a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800603c:	3302      	adds	r3, #2
 800603e:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8006040:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006044:	b29b      	uxth	r3, r3
 8006046:	3b01      	subs	r3, #1
 8006048:	b29b      	uxth	r3, r3
 800604a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006052:	f015 0f07 	tst.w	r5, #7
 8006056:	d0e1      	beq.n	800601c <UART_RxISR_16BIT_FIFOEN+0x44>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006058:	f015 0f01 	tst.w	r5, #1
 800605c:	d009      	beq.n	8006072 <UART_RxISR_16BIT_FIFOEN+0x9a>
 800605e:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006062:	d006      	beq.n	8006072 <UART_RxISR_16BIT_FIFOEN+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006064:	2201      	movs	r2, #1
 8006066:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006068:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800606c:	4313      	orrs	r3, r2
 800606e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006072:	f015 0f02 	tst.w	r5, #2
 8006076:	d00b      	beq.n	8006090 <UART_RxISR_16BIT_FIFOEN+0xb8>
 8006078:	f018 0f01 	tst.w	r8, #1
 800607c:	d008      	beq.n	8006090 <UART_RxISR_16BIT_FIFOEN+0xb8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800607e:	6823      	ldr	r3, [r4, #0]
 8006080:	2202      	movs	r2, #2
 8006082:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006084:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006088:	f043 0304 	orr.w	r3, r3, #4
 800608c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006090:	f015 0f04 	tst.w	r5, #4
 8006094:	d0b8      	beq.n	8006008 <UART_RxISR_16BIT_FIFOEN+0x30>
 8006096:	f018 0f01 	tst.w	r8, #1
 800609a:	d0b5      	beq.n	8006008 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800609c:	6823      	ldr	r3, [r4, #0]
 800609e:	2204      	movs	r2, #4
 80060a0:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060a2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80060a6:	f043 0302 	orr.w	r3, r3, #2
 80060aa:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80060ae:	e7ab      	b.n	8006008 <UART_RxISR_16BIT_FIFOEN+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060b0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b2:	e852 3f00 	ldrex	r3, [r2]
 80060b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	e842 3100 	strex	r1, r3, [r2]
 80060be:	2900      	cmp	r1, #0
 80060c0:	d1f6      	bne.n	80060b0 <UART_RxISR_16BIT_FIFOEN+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060c2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c4:	f102 0308 	add.w	r3, r2, #8
 80060c8:	e853 3f00 	ldrex	r3, [r3]
 80060cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060d0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d4:	3208      	adds	r2, #8
 80060d6:	e842 3100 	strex	r1, r3, [r2]
 80060da:	2900      	cmp	r1, #0
 80060dc:	d1f1      	bne.n	80060c2 <UART_RxISR_16BIT_FIFOEN+0xea>
        huart->RxState = HAL_UART_STATE_READY;
 80060de:	2320      	movs	r3, #32
 80060e0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 80060e4:	2300      	movs	r3, #0
 80060e6:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d004      	beq.n	80060f8 <UART_RxISR_16BIT_FIFOEN+0x120>
          huart->RxCpltCallback(huart);
 80060ee:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80060f2:	4620      	mov	r0, r4
 80060f4:	4798      	blx	r3
 80060f6:	e796      	b.n	8006026 <UART_RxISR_16BIT_FIFOEN+0x4e>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060f8:	2300      	movs	r3, #0
 80060fa:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060fc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fe:	e852 3f00 	ldrex	r3, [r2]
 8006102:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006106:	e842 3100 	strex	r1, r3, [r2]
 800610a:	2900      	cmp	r1, #0
 800610c:	d1f6      	bne.n	80060fc <UART_RxISR_16BIT_FIFOEN+0x124>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	69da      	ldr	r2, [r3, #28]
 8006112:	f012 0f10 	tst.w	r2, #16
 8006116:	d001      	beq.n	800611c <UART_RxISR_16BIT_FIFOEN+0x144>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006118:	2210      	movs	r2, #16
 800611a:	621a      	str	r2, [r3, #32]
          huart->RxEventCallback(huart, huart->RxXferSize);
 800611c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8006120:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006124:	4620      	mov	r0, r4
 8006126:	4798      	blx	r3
 8006128:	e77d      	b.n	8006026 <UART_RxISR_16BIT_FIFOEN+0x4e>
    rxdatacount = huart->RxXferCount;
 800612a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800612e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006130:	2b00      	cmp	r3, #0
 8006132:	f43f af63 	beq.w	8005ffc <UART_RxISR_16BIT_FIFOEN+0x24>
 8006136:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800613a:	429a      	cmp	r2, r3
 800613c:	f67f af5e 	bls.w	8005ffc <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006140:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006142:	f102 0308 	add.w	r3, r2, #8
 8006146:	e853 3f00 	ldrex	r3, [r3]
 800614a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614e:	3208      	adds	r2, #8
 8006150:	e842 3100 	strex	r1, r3, [r2]
 8006154:	2900      	cmp	r1, #0
 8006156:	d1f3      	bne.n	8006140 <UART_RxISR_16BIT_FIFOEN+0x168>
      huart->RxISR = UART_RxISR_16BIT;
 8006158:	4b05      	ldr	r3, [pc, #20]	; (8006170 <UART_RxISR_16BIT_FIFOEN+0x198>)
 800615a:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800615c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615e:	e852 3f00 	ldrex	r3, [r2]
 8006162:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006166:	e842 3100 	strex	r1, r3, [r2]
 800616a:	2900      	cmp	r1, #0
 800616c:	d1f6      	bne.n	800615c <UART_RxISR_16BIT_FIFOEN+0x184>
 800616e:	e745      	b.n	8005ffc <UART_RxISR_16BIT_FIFOEN+0x24>
 8006170:	08005d85 	.word	0x08005d85

08006174 <HAL_UART_RegisterCallback>:
{
 8006174:	4603      	mov	r3, r0
  if (pCallback == NULL)
 8006176:	4610      	mov	r0, r2
 8006178:	b1d2      	cbz	r2, 80061b0 <HAL_UART_RegisterCallback+0x3c>
  __HAL_LOCK(huart);
 800617a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800617e:	2a01      	cmp	r2, #1
 8006180:	d078      	beq.n	8006274 <HAL_UART_RegisterCallback+0x100>
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  if (huart->gState == HAL_UART_STATE_READY)
 8006188:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800618c:	2a20      	cmp	r2, #32
 800618e:	d017      	beq.n	80061c0 <HAL_UART_RegisterCallback+0x4c>
  else if (huart->gState == HAL_UART_STATE_RESET)
 8006190:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006194:	2a00      	cmp	r2, #0
 8006196:	d162      	bne.n	800625e <HAL_UART_RegisterCallback+0xea>
    switch (CallbackID)
 8006198:	290b      	cmp	r1, #11
 800619a:	d058      	beq.n	800624e <HAL_UART_RegisterCallback+0xda>
 800619c:	290c      	cmp	r1, #12
 800619e:	d05a      	beq.n	8006256 <HAL_UART_RegisterCallback+0xe2>
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80061a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80061a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        status =  HAL_ERROR;
 80061ac:	2001      	movs	r0, #1
        break;
 80061ae:	e05d      	b.n	800626c <HAL_UART_RegisterCallback+0xf8>
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80061b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80061b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    return HAL_ERROR;
 80061bc:	2001      	movs	r0, #1
 80061be:	4770      	bx	lr
    switch (CallbackID)
 80061c0:	290c      	cmp	r1, #12
 80061c2:	d83c      	bhi.n	800623e <HAL_UART_RegisterCallback+0xca>
 80061c4:	e8df f001 	tbb	[pc, r1]
 80061c8:	130f0b07 	.word	0x130f0b07
 80061cc:	231f1b17 	.word	0x231f1b17
 80061d0:	332f2b27 	.word	0x332f2b27
 80061d4:	37          	.byte	0x37
 80061d5:	00          	.byte	0x00
        huart->TxHalfCpltCallback = pCallback;
 80061d6:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;
 80061da:	4608      	mov	r0, r1
        break;
 80061dc:	e046      	b.n	800626c <HAL_UART_RegisterCallback+0xf8>
        huart->TxCpltCallback = pCallback;
 80061de:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  HAL_StatusTypeDef status = HAL_OK;
 80061e2:	2000      	movs	r0, #0
        break;
 80061e4:	e042      	b.n	800626c <HAL_UART_RegisterCallback+0xf8>
        huart->RxHalfCpltCallback = pCallback;
 80061e6:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  HAL_StatusTypeDef status = HAL_OK;
 80061ea:	2000      	movs	r0, #0
        break;
 80061ec:	e03e      	b.n	800626c <HAL_UART_RegisterCallback+0xf8>
        huart->RxCpltCallback = pCallback;
 80061ee:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
  HAL_StatusTypeDef status = HAL_OK;
 80061f2:	2000      	movs	r0, #0
        break;
 80061f4:	e03a      	b.n	800626c <HAL_UART_RegisterCallback+0xf8>
        huart->ErrorCallback = pCallback;
 80061f6:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
  HAL_StatusTypeDef status = HAL_OK;
 80061fa:	2000      	movs	r0, #0
        break;
 80061fc:	e036      	b.n	800626c <HAL_UART_RegisterCallback+0xf8>
        huart->AbortCpltCallback = pCallback;
 80061fe:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  HAL_StatusTypeDef status = HAL_OK;
 8006202:	2000      	movs	r0, #0
        break;
 8006204:	e032      	b.n	800626c <HAL_UART_RegisterCallback+0xf8>
        huart->AbortTransmitCpltCallback = pCallback;
 8006206:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
  HAL_StatusTypeDef status = HAL_OK;
 800620a:	2000      	movs	r0, #0
        break;
 800620c:	e02e      	b.n	800626c <HAL_UART_RegisterCallback+0xf8>
        huart->AbortReceiveCpltCallback = pCallback;
 800620e:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
  HAL_StatusTypeDef status = HAL_OK;
 8006212:	2000      	movs	r0, #0
        break;
 8006214:	e02a      	b.n	800626c <HAL_UART_RegisterCallback+0xf8>
        huart->WakeupCallback = pCallback;
 8006216:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
  HAL_StatusTypeDef status = HAL_OK;
 800621a:	2000      	movs	r0, #0
        break;
 800621c:	e026      	b.n	800626c <HAL_UART_RegisterCallback+0xf8>
        huart->RxFifoFullCallback = pCallback;
 800621e:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
  HAL_StatusTypeDef status = HAL_OK;
 8006222:	2000      	movs	r0, #0
        break;
 8006224:	e022      	b.n	800626c <HAL_UART_RegisterCallback+0xf8>
        huart->TxFifoEmptyCallback = pCallback;
 8006226:	f8c3 00b8 	str.w	r0, [r3, #184]	; 0xb8
  HAL_StatusTypeDef status = HAL_OK;
 800622a:	2000      	movs	r0, #0
        break;
 800622c:	e01e      	b.n	800626c <HAL_UART_RegisterCallback+0xf8>
        huart->MspInitCallback = pCallback;
 800622e:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
  HAL_StatusTypeDef status = HAL_OK;
 8006232:	2000      	movs	r0, #0
        break;
 8006234:	e01a      	b.n	800626c <HAL_UART_RegisterCallback+0xf8>
        huart->MspDeInitCallback = pCallback;
 8006236:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  HAL_StatusTypeDef status = HAL_OK;
 800623a:	2000      	movs	r0, #0
        break;
 800623c:	e016      	b.n	800626c <HAL_UART_RegisterCallback+0xf8>
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800623e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006242:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006246:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        status =  HAL_ERROR;
 800624a:	2001      	movs	r0, #1
        break;
 800624c:	e00e      	b.n	800626c <HAL_UART_RegisterCallback+0xf8>
        huart->MspInitCallback = pCallback;
 800624e:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
  HAL_StatusTypeDef status = HAL_OK;
 8006252:	2000      	movs	r0, #0
        break;
 8006254:	e00a      	b.n	800626c <HAL_UART_RegisterCallback+0xf8>
        huart->MspDeInitCallback = pCallback;
 8006256:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  HAL_StatusTypeDef status = HAL_OK;
 800625a:	2000      	movs	r0, #0
        break;
 800625c:	e006      	b.n	800626c <HAL_UART_RegisterCallback+0xf8>
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800625e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006262:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    status =  HAL_ERROR;
 800626a:	2001      	movs	r0, #1
  __HAL_UNLOCK(huart);
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return status;
 8006272:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006274:	2002      	movs	r0, #2
}
 8006276:	4770      	bx	lr

08006278 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8006278:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800627c:	2b20      	cmp	r3, #32
 800627e:	d14f      	bne.n	8006320 <HAL_UART_Transmit_IT+0xa8>
    if ((pData == NULL) || (Size == 0U))
 8006280:	2900      	cmp	r1, #0
 8006282:	d04f      	beq.n	8006324 <HAL_UART_Transmit_IT+0xac>
 8006284:	2a00      	cmp	r2, #0
 8006286:	d04f      	beq.n	8006328 <HAL_UART_Transmit_IT+0xb0>
    __HAL_LOCK(huart);
 8006288:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800628c:	2b01      	cmp	r3, #1
 800628e:	d04d      	beq.n	800632c <HAL_UART_Transmit_IT+0xb4>
 8006290:	2301      	movs	r3, #1
 8006292:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8006296:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006298:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 800629c:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a0:	2300      	movs	r3, #0
 80062a2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062a6:	2321      	movs	r3, #33	; 0x21
 80062a8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80062ac:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80062ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062b2:	d013      	beq.n	80062dc <HAL_UART_Transmit_IT+0x64>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062b4:	6883      	ldr	r3, [r0, #8]
 80062b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ba:	d02b      	beq.n	8006314 <HAL_UART_Transmit_IT+0x9c>
        huart->TxISR = UART_TxISR_8BIT;
 80062bc:	4b1c      	ldr	r3, [pc, #112]	; (8006330 <HAL_UART_Transmit_IT+0xb8>)
 80062be:	6743      	str	r3, [r0, #116]	; 0x74
      __HAL_UNLOCK(huart);
 80062c0:	2300      	movs	r3, #0
 80062c2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80062c6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c8:	e852 3f00 	ldrex	r3, [r2]
 80062cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d0:	e842 3100 	strex	r1, r3, [r2]
 80062d4:	2900      	cmp	r1, #0
 80062d6:	d1f6      	bne.n	80062c6 <HAL_UART_Transmit_IT+0x4e>
    return HAL_OK;
 80062d8:	2000      	movs	r0, #0
 80062da:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062dc:	6883      	ldr	r3, [r0, #8]
 80062de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e2:	d011      	beq.n	8006308 <HAL_UART_Transmit_IT+0x90>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80062e4:	4b13      	ldr	r3, [pc, #76]	; (8006334 <HAL_UART_Transmit_IT+0xbc>)
 80062e6:	6743      	str	r3, [r0, #116]	; 0x74
      __HAL_UNLOCK(huart);
 80062e8:	2300      	movs	r3, #0
 80062ea:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80062ee:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	f102 0308 	add.w	r3, r2, #8
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fc:	3208      	adds	r2, #8
 80062fe:	e842 3100 	strex	r1, r3, [r2]
 8006302:	2900      	cmp	r1, #0
 8006304:	d1f3      	bne.n	80062ee <HAL_UART_Transmit_IT+0x76>
 8006306:	e7e7      	b.n	80062d8 <HAL_UART_Transmit_IT+0x60>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006308:	6903      	ldr	r3, [r0, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1ea      	bne.n	80062e4 <HAL_UART_Transmit_IT+0x6c>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800630e:	4b0a      	ldr	r3, [pc, #40]	; (8006338 <HAL_UART_Transmit_IT+0xc0>)
 8006310:	6743      	str	r3, [r0, #116]	; 0x74
 8006312:	e7e9      	b.n	80062e8 <HAL_UART_Transmit_IT+0x70>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006314:	6903      	ldr	r3, [r0, #16]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1d0      	bne.n	80062bc <HAL_UART_Transmit_IT+0x44>
        huart->TxISR = UART_TxISR_16BIT;
 800631a:	4b08      	ldr	r3, [pc, #32]	; (800633c <HAL_UART_Transmit_IT+0xc4>)
 800631c:	6743      	str	r3, [r0, #116]	; 0x74
 800631e:	e7cf      	b.n	80062c0 <HAL_UART_Transmit_IT+0x48>
    return HAL_BUSY;
 8006320:	2002      	movs	r0, #2
 8006322:	4770      	bx	lr
      return HAL_ERROR;
 8006324:	2001      	movs	r0, #1
 8006326:	4770      	bx	lr
 8006328:	2001      	movs	r0, #1
 800632a:	4770      	bx	lr
    __HAL_LOCK(huart);
 800632c:	2002      	movs	r0, #2
}
 800632e:	4770      	bx	lr
 8006330:	08005b0d 	.word	0x08005b0d
 8006334:	08005bbd 	.word	0x08005bbd
 8006338:	08005c31 	.word	0x08005c31
 800633c:	08005b63 	.word	0x08005b63

08006340 <HAL_UART_IRQHandler>:
{
 8006340:	b570      	push	{r4, r5, r6, lr}
 8006342:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006344:	6801      	ldr	r1, [r0, #0]
 8006346:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006348:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800634a:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800634c:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8006350:	401a      	ands	r2, r3
 8006352:	d108      	bne.n	8006366 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006354:	f013 0f20 	tst.w	r3, #32
 8006358:	d005      	beq.n	8006366 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800635a:	f010 0f20 	tst.w	r0, #32
 800635e:	d137      	bne.n	80063d0 <HAL_UART_IRQHandler+0x90>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006360:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8006364:	d134      	bne.n	80063d0 <HAL_UART_IRQHandler+0x90>
  if ((errorflags != 0U)
 8006366:	b12a      	cbz	r2, 8006374 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006368:	4aba      	ldr	r2, [pc, #744]	; (8006654 <HAL_UART_IRQHandler+0x314>)
 800636a:	402a      	ands	r2, r5
 800636c:	d135      	bne.n	80063da <HAL_UART_IRQHandler+0x9a>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800636e:	4eba      	ldr	r6, [pc, #744]	; (8006658 <HAL_UART_IRQHandler+0x318>)
 8006370:	4230      	tst	r0, r6
 8006372:	d132      	bne.n	80063da <HAL_UART_IRQHandler+0x9a>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006374:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006376:	2a01      	cmp	r2, #1
 8006378:	f000 80c8 	beq.w	800650c <HAL_UART_IRQHandler+0x1cc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800637c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006380:	d003      	beq.n	800638a <HAL_UART_IRQHandler+0x4a>
 8006382:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8006386:	f040 815c 	bne.w	8006642 <HAL_UART_IRQHandler+0x302>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800638a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800638e:	d007      	beq.n	80063a0 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006390:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006394:	f040 8164 	bne.w	8006660 <HAL_UART_IRQHandler+0x320>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006398:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 800639c:	f040 8160 	bne.w	8006660 <HAL_UART_IRQHandler+0x320>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80063a4:	d003      	beq.n	80063ae <HAL_UART_IRQHandler+0x6e>
 80063a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80063aa:	f040 8160 	bne.w	800666e <HAL_UART_IRQHandler+0x32e>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80063ae:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80063b2:	d003      	beq.n	80063bc <HAL_UART_IRQHandler+0x7c>
 80063b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80063b8:	f040 815d 	bne.w	8006676 <HAL_UART_IRQHandler+0x336>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80063bc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80063c0:	d00a      	beq.n	80063d8 <HAL_UART_IRQHandler+0x98>
 80063c2:	2800      	cmp	r0, #0
 80063c4:	da08      	bge.n	80063d8 <HAL_UART_IRQHandler+0x98>
    huart->RxFifoFullCallback(huart);
 80063c6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 80063ca:	4620      	mov	r0, r4
 80063cc:	4798      	blx	r3
    return;
 80063ce:	e003      	b.n	80063d8 <HAL_UART_IRQHandler+0x98>
      if (huart->RxISR != NULL)
 80063d0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80063d2:	b10b      	cbz	r3, 80063d8 <HAL_UART_IRQHandler+0x98>
        huart->RxISR(huart);
 80063d4:	4620      	mov	r0, r4
 80063d6:	4798      	blx	r3
}
 80063d8:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063da:	f013 0f01 	tst.w	r3, #1
 80063de:	d009      	beq.n	80063f4 <HAL_UART_IRQHandler+0xb4>
 80063e0:	f410 7f80 	tst.w	r0, #256	; 0x100
 80063e4:	d006      	beq.n	80063f4 <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063e6:	2601      	movs	r6, #1
 80063e8:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063ea:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80063ee:	4331      	orrs	r1, r6
 80063f0:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063f4:	f013 0f02 	tst.w	r3, #2
 80063f8:	d00b      	beq.n	8006412 <HAL_UART_IRQHandler+0xd2>
 80063fa:	f015 0f01 	tst.w	r5, #1
 80063fe:	d008      	beq.n	8006412 <HAL_UART_IRQHandler+0xd2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006400:	6821      	ldr	r1, [r4, #0]
 8006402:	2602      	movs	r6, #2
 8006404:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006406:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800640a:	f041 0104 	orr.w	r1, r1, #4
 800640e:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006412:	f013 0f04 	tst.w	r3, #4
 8006416:	d00b      	beq.n	8006430 <HAL_UART_IRQHandler+0xf0>
 8006418:	f015 0f01 	tst.w	r5, #1
 800641c:	d008      	beq.n	8006430 <HAL_UART_IRQHandler+0xf0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800641e:	6821      	ldr	r1, [r4, #0]
 8006420:	2604      	movs	r6, #4
 8006422:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006424:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006428:	f041 0102 	orr.w	r1, r1, #2
 800642c:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006430:	f013 0f08 	tst.w	r3, #8
 8006434:	d00b      	beq.n	800644e <HAL_UART_IRQHandler+0x10e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006436:	f010 0f20 	tst.w	r0, #32
 800643a:	d100      	bne.n	800643e <HAL_UART_IRQHandler+0xfe>
 800643c:	b13a      	cbz	r2, 800644e <HAL_UART_IRQHandler+0x10e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800643e:	6822      	ldr	r2, [r4, #0]
 8006440:	2108      	movs	r1, #8
 8006442:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006444:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006448:	430a      	orrs	r2, r1
 800644a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800644e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006452:	d00c      	beq.n	800646e <HAL_UART_IRQHandler+0x12e>
 8006454:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8006458:	d009      	beq.n	800646e <HAL_UART_IRQHandler+0x12e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800645a:	6822      	ldr	r2, [r4, #0]
 800645c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006460:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006462:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006466:	f042 0220 	orr.w	r2, r2, #32
 800646a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800646e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006472:	2a00      	cmp	r2, #0
 8006474:	d0b0      	beq.n	80063d8 <HAL_UART_IRQHandler+0x98>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006476:	f013 0f20 	tst.w	r3, #32
 800647a:	d009      	beq.n	8006490 <HAL_UART_IRQHandler+0x150>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800647c:	f010 0f20 	tst.w	r0, #32
 8006480:	d102      	bne.n	8006488 <HAL_UART_IRQHandler+0x148>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006482:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8006486:	d003      	beq.n	8006490 <HAL_UART_IRQHandler+0x150>
        if (huart->RxISR != NULL)
 8006488:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800648a:	b10b      	cbz	r3, 8006490 <HAL_UART_IRQHandler+0x150>
          huart->RxISR(huart);
 800648c:	4620      	mov	r0, r4
 800648e:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8006490:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f013 0f40 	tst.w	r3, #64	; 0x40
 800649c:	d102      	bne.n	80064a4 <HAL_UART_IRQHandler+0x164>
 800649e:	f012 0f28 	tst.w	r2, #40	; 0x28
 80064a2:	d02b      	beq.n	80064fc <HAL_UART_IRQHandler+0x1bc>
        UART_EndRxTransfer(huart);
 80064a4:	4620      	mov	r0, r4
 80064a6:	f7ff fafb 	bl	8005aa0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064aa:	6823      	ldr	r3, [r4, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f013 0f40 	tst.w	r3, #64	; 0x40
 80064b2:	d01e      	beq.n	80064f2 <HAL_UART_IRQHandler+0x1b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064b4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b6:	f102 0308 	add.w	r3, r2, #8
 80064ba:	e853 3f00 	ldrex	r3, [r3]
 80064be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	3208      	adds	r2, #8
 80064c4:	e842 3100 	strex	r1, r3, [r2]
 80064c8:	2900      	cmp	r1, #0
 80064ca:	d1f3      	bne.n	80064b4 <HAL_UART_IRQHandler+0x174>
          if (huart->hdmarx != NULL)
 80064cc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80064ce:	b15b      	cbz	r3, 80064e8 <HAL_UART_IRQHandler+0x1a8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064d0:	4a62      	ldr	r2, [pc, #392]	; (800665c <HAL_UART_IRQHandler+0x31c>)
 80064d2:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064d4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80064d6:	f7fd f805 	bl	80034e4 <HAL_DMA_Abort_IT>
 80064da:	2800      	cmp	r0, #0
 80064dc:	f43f af7c 	beq.w	80063d8 <HAL_UART_IRQHandler+0x98>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064e0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80064e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80064e4:	4798      	blx	r3
 80064e6:	e777      	b.n	80063d8 <HAL_UART_IRQHandler+0x98>
            huart->ErrorCallback(huart);
 80064e8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80064ec:	4620      	mov	r0, r4
 80064ee:	4798      	blx	r3
 80064f0:	e772      	b.n	80063d8 <HAL_UART_IRQHandler+0x98>
          huart->ErrorCallback(huart);
 80064f2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80064f6:	4620      	mov	r0, r4
 80064f8:	4798      	blx	r3
 80064fa:	e76d      	b.n	80063d8 <HAL_UART_IRQHandler+0x98>
        huart->ErrorCallback(huart);
 80064fc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8006500:	4620      	mov	r0, r4
 8006502:	4798      	blx	r3
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006504:	2300      	movs	r3, #0
 8006506:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 800650a:	e765      	b.n	80063d8 <HAL_UART_IRQHandler+0x98>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800650c:	f013 0f10 	tst.w	r3, #16
 8006510:	f43f af34 	beq.w	800637c <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006514:	f010 0f10 	tst.w	r0, #16
 8006518:	f43f af30 	beq.w	800637c <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800651c:	2310      	movs	r3, #16
 800651e:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006520:	6823      	ldr	r3, [r4, #0]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006528:	d050      	beq.n	80065cc <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800652a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800652c:	6813      	ldr	r3, [r2, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8006532:	2b00      	cmp	r3, #0
 8006534:	f43f af50 	beq.w	80063d8 <HAL_UART_IRQHandler+0x98>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006538:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800653c:	4299      	cmp	r1, r3
 800653e:	f67f af4b 	bls.w	80063d8 <HAL_UART_IRQHandler+0x98>
        huart->RxXferCount = nb_remaining_rx_data;
 8006542:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006546:	6813      	ldr	r3, [r2, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f013 0f20 	tst.w	r3, #32
 800654e:	d131      	bne.n	80065b4 <HAL_UART_IRQHandler+0x274>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006550:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006552:	e852 3f00 	ldrex	r3, [r2]
 8006556:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655a:	e842 3100 	strex	r1, r3, [r2]
 800655e:	2900      	cmp	r1, #0
 8006560:	d1f6      	bne.n	8006550 <HAL_UART_IRQHandler+0x210>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006562:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006564:	f102 0308 	add.w	r3, r2, #8
 8006568:	e853 3f00 	ldrex	r3, [r3]
 800656c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006570:	3208      	adds	r2, #8
 8006572:	e842 3100 	strex	r1, r3, [r2]
 8006576:	2900      	cmp	r1, #0
 8006578:	d1f3      	bne.n	8006562 <HAL_UART_IRQHandler+0x222>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800657a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	f102 0308 	add.w	r3, r2, #8
 8006580:	e853 3f00 	ldrex	r3, [r3]
 8006584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006588:	3208      	adds	r2, #8
 800658a:	e842 3100 	strex	r1, r3, [r2]
 800658e:	2900      	cmp	r1, #0
 8006590:	d1f3      	bne.n	800657a <HAL_UART_IRQHandler+0x23a>
          huart->RxState = HAL_UART_STATE_READY;
 8006592:	2320      	movs	r3, #32
 8006594:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006598:	2300      	movs	r3, #0
 800659a:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800659c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659e:	e852 3f00 	ldrex	r3, [r2]
 80065a2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a6:	e842 3100 	strex	r1, r3, [r2]
 80065aa:	2900      	cmp	r1, #0
 80065ac:	d1f6      	bne.n	800659c <HAL_UART_IRQHandler+0x25c>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065ae:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80065b0:	f7fc ff5e 	bl	8003470 <HAL_DMA_Abort>
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065b4:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
 80065b8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80065bc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	1ac9      	subs	r1, r1, r3
 80065c4:	b289      	uxth	r1, r1
 80065c6:	4620      	mov	r0, r4
 80065c8:	4790      	blx	r2
      return;
 80065ca:	e705      	b.n	80063d8 <HAL_UART_IRQHandler+0x98>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065cc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80065d0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	1ac9      	subs	r1, r1, r3
 80065d8:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 80065da:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80065de:	b29b      	uxth	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f43f aef9 	beq.w	80063d8 <HAL_UART_IRQHandler+0x98>
          &&(nb_rx_data > 0U) )
 80065e6:	2900      	cmp	r1, #0
 80065e8:	f43f aef6 	beq.w	80063d8 <HAL_UART_IRQHandler+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065ec:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ee:	e852 3f00 	ldrex	r3, [r2]
 80065f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f6:	e842 3000 	strex	r0, r3, [r2]
 80065fa:	2800      	cmp	r0, #0
 80065fc:	d1f6      	bne.n	80065ec <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065fe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	f102 0308 	add.w	r3, r2, #8
 8006604:	e853 3f00 	ldrex	r3, [r3]
 8006608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800660c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006610:	3208      	adds	r2, #8
 8006612:	e842 3000 	strex	r0, r3, [r2]
 8006616:	2800      	cmp	r0, #0
 8006618:	d1f1      	bne.n	80065fe <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 800661a:	2320      	movs	r3, #32
 800661c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006620:	2300      	movs	r3, #0
 8006622:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8006624:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006626:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006628:	e852 3f00 	ldrex	r3, [r2]
 800662c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006630:	e842 3000 	strex	r0, r3, [r2]
 8006634:	2800      	cmp	r0, #0
 8006636:	d1f6      	bne.n	8006626 <HAL_UART_IRQHandler+0x2e6>
        huart->RxEventCallback(huart, nb_rx_data);
 8006638:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800663c:	4620      	mov	r0, r4
 800663e:	4798      	blx	r3
      return;
 8006640:	e6ca      	b.n	80063d8 <HAL_UART_IRQHandler+0x98>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006642:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006646:	620b      	str	r3, [r1, #32]
    huart->WakeupCallback(huart);
 8006648:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800664c:	4620      	mov	r0, r4
 800664e:	4798      	blx	r3
    return;
 8006650:	e6c2      	b.n	80063d8 <HAL_UART_IRQHandler+0x98>
 8006652:	bf00      	nop
 8006654:	10000001 	.word	0x10000001
 8006658:	04000120 	.word	0x04000120
 800665c:	08005af7 	.word	0x08005af7
    if (huart->TxISR != NULL)
 8006660:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006662:	2b00      	cmp	r3, #0
 8006664:	f43f aeb8 	beq.w	80063d8 <HAL_UART_IRQHandler+0x98>
      huart->TxISR(huart);
 8006668:	4620      	mov	r0, r4
 800666a:	4798      	blx	r3
    return;
 800666c:	e6b4      	b.n	80063d8 <HAL_UART_IRQHandler+0x98>
    UART_EndTransmit_IT(huart);
 800666e:	4620      	mov	r0, r4
 8006670:	f7ff fb1a 	bl	8005ca8 <UART_EndTransmit_IT>
    return;
 8006674:	e6b0      	b.n	80063d8 <HAL_UART_IRQHandler+0x98>
    huart->TxFifoEmptyCallback(huart);
 8006676:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 800667a:	4620      	mov	r0, r4
 800667c:	4798      	blx	r3
    return;
 800667e:	e6ab      	b.n	80063d8 <HAL_UART_IRQHandler+0x98>

08006680 <HAL_UART_GetState>:
  temp1 = huart->gState;
 8006680:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
  temp2 = huart->RxState;
 8006684:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
}
 8006688:	4310      	orrs	r0, r2
 800668a:	4770      	bx	lr

0800668c <UART_InitCallbacksToDefault>:
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800668c:	4b12      	ldr	r3, [pc, #72]	; (80066d8 <UART_InitCallbacksToDefault+0x4c>)
 800668e:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8006692:	4b12      	ldr	r3, [pc, #72]	; (80066dc <UART_InitCallbacksToDefault+0x50>)
 8006694:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8006698:	4b11      	ldr	r3, [pc, #68]	; (80066e0 <UART_InitCallbacksToDefault+0x54>)
 800669a:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800669e:	4b11      	ldr	r3, [pc, #68]	; (80066e4 <UART_InitCallbacksToDefault+0x58>)
 80066a0:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80066a4:	4b10      	ldr	r3, [pc, #64]	; (80066e8 <UART_InitCallbacksToDefault+0x5c>)
 80066a6:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80066aa:	4b10      	ldr	r3, [pc, #64]	; (80066ec <UART_InitCallbacksToDefault+0x60>)
 80066ac:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80066b0:	4b0f      	ldr	r3, [pc, #60]	; (80066f0 <UART_InitCallbacksToDefault+0x64>)
 80066b2:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80066b6:	4b0f      	ldr	r3, [pc, #60]	; (80066f4 <UART_InitCallbacksToDefault+0x68>)
 80066b8:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80066bc:	4b0e      	ldr	r3, [pc, #56]	; (80066f8 <UART_InitCallbacksToDefault+0x6c>)
 80066be:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 80066c2:	4b0e      	ldr	r3, [pc, #56]	; (80066fc <UART_InitCallbacksToDefault+0x70>)
 80066c4:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 80066c8:	4b0d      	ldr	r3, [pc, #52]	; (8006700 <UART_InitCallbacksToDefault+0x74>)
 80066ca:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80066ce:	4b0d      	ldr	r3, [pc, #52]	; (8006704 <UART_InitCallbacksToDefault+0x78>)
 80066d0:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
}
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	08005a91 	.word	0x08005a91
 80066dc:	08001b99 	.word	0x08001b99
 80066e0:	08005a95 	.word	0x08005a95
 80066e4:	08005a93 	.word	0x08005a93
 80066e8:	08005a97 	.word	0x08005a97
 80066ec:	08005a99 	.word	0x08005a99
 80066f0:	08005a9b 	.word	0x08005a9b
 80066f4:	08005a9d 	.word	0x08005a9d
 80066f8:	08006e49 	.word	0x08006e49
 80066fc:	08006e4b 	.word	0x08006e4b
 8006700:	08006e4d 	.word	0x08006e4d
 8006704:	08005a9f 	.word	0x08005a9f

08006708 <UART_SetConfig>:
{
 8006708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800670c:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800670e:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006710:	6883      	ldr	r3, [r0, #8]
 8006712:	6902      	ldr	r2, [r0, #16]
 8006714:	4313      	orrs	r3, r2
 8006716:	6942      	ldr	r2, [r0, #20]
 8006718:	4313      	orrs	r3, r2
 800671a:	69c2      	ldr	r2, [r0, #28]
 800671c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800671e:	6808      	ldr	r0, [r1, #0]
 8006720:	4aa1      	ldr	r2, [pc, #644]	; (80069a8 <UART_SetConfig+0x2a0>)
 8006722:	4002      	ands	r2, r0
 8006724:	4313      	orrs	r3, r2
 8006726:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006728:	6822      	ldr	r2, [r4, #0]
 800672a:	6853      	ldr	r3, [r2, #4]
 800672c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006730:	68e1      	ldr	r1, [r4, #12]
 8006732:	430b      	orrs	r3, r1
 8006734:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006736:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006738:	6822      	ldr	r2, [r4, #0]
 800673a:	4b9c      	ldr	r3, [pc, #624]	; (80069ac <UART_SetConfig+0x2a4>)
 800673c:	429a      	cmp	r2, r3
 800673e:	d001      	beq.n	8006744 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 8006740:	6a23      	ldr	r3, [r4, #32]
 8006742:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006744:	6893      	ldr	r3, [r2, #8]
 8006746:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800674a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800674e:	430b      	orrs	r3, r1
 8006750:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006752:	6822      	ldr	r2, [r4, #0]
 8006754:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006756:	f023 030f 	bic.w	r3, r3, #15
 800675a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800675c:	430b      	orrs	r3, r1
 800675e:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006760:	6822      	ldr	r2, [r4, #0]
 8006762:	4b93      	ldr	r3, [pc, #588]	; (80069b0 <UART_SetConfig+0x2a8>)
 8006764:	429a      	cmp	r2, r3
 8006766:	d01c      	beq.n	80067a2 <UART_SetConfig+0x9a>
 8006768:	4b92      	ldr	r3, [pc, #584]	; (80069b4 <UART_SetConfig+0x2ac>)
 800676a:	429a      	cmp	r2, r3
 800676c:	d031      	beq.n	80067d2 <UART_SetConfig+0xca>
 800676e:	4b8f      	ldr	r3, [pc, #572]	; (80069ac <UART_SetConfig+0x2a4>)
 8006770:	429a      	cmp	r2, r3
 8006772:	d04b      	beq.n	800680c <UART_SetConfig+0x104>
 8006774:	2310      	movs	r3, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8006776:	498d      	ldr	r1, [pc, #564]	; (80069ac <UART_SetConfig+0x2a4>)
 8006778:	428a      	cmp	r2, r1
 800677a:	d068      	beq.n	800684e <UART_SetConfig+0x146>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800677c:	69e0      	ldr	r0, [r4, #28]
 800677e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006782:	f000 80a7 	beq.w	80068d4 <UART_SetConfig+0x1cc>
    switch (clocksource)
 8006786:	2b08      	cmp	r3, #8
 8006788:	f200 8122 	bhi.w	80069d0 <UART_SetConfig+0x2c8>
 800678c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006790:	00f800d5 	.word	0x00f800d5
 8006794:	012000d3 	.word	0x012000d3
 8006798:	012000fb 	.word	0x012000fb
 800679c:	01200120 	.word	0x01200120
 80067a0:	00fe      	.short	0x00fe
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80067a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067aa:	f003 0303 	and.w	r3, r3, #3
 80067ae:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80067b2:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	d809      	bhi.n	80067ce <UART_SetConfig+0xc6>
 80067ba:	e8df f003 	tbb	[pc, r3]
 80067be:	0402      	.short	0x0402
 80067c0:	063c      	.short	0x063c
 80067c2:	2301      	movs	r3, #1
 80067c4:	e7d7      	b.n	8006776 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067c6:	2304      	movs	r3, #4
 80067c8:	e7d5      	b.n	8006776 <UART_SetConfig+0x6e>
 80067ca:	2308      	movs	r3, #8
 80067cc:	e7d3      	b.n	8006776 <UART_SetConfig+0x6e>
 80067ce:	2310      	movs	r3, #16
 80067d0:	e7d1      	b.n	8006776 <UART_SetConfig+0x6e>
 80067d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067da:	f003 030c 	and.w	r3, r3, #12
 80067de:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80067e2:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80067e6:	2b0c      	cmp	r3, #12
 80067e8:	d80e      	bhi.n	8006808 <UART_SetConfig+0x100>
 80067ea:	e8df f003 	tbb	[pc, r3]
 80067ee:	0d07      	.short	0x0d07
 80067f0:	0d090d0d 	.word	0x0d090d0d
 80067f4:	0d260d0d 	.word	0x0d260d0d
 80067f8:	0d0d      	.short	0x0d0d
 80067fa:	0b          	.byte	0x0b
 80067fb:	00          	.byte	0x00
 80067fc:	2300      	movs	r3, #0
 80067fe:	e7ba      	b.n	8006776 <UART_SetConfig+0x6e>
 8006800:	2304      	movs	r3, #4
 8006802:	e7b8      	b.n	8006776 <UART_SetConfig+0x6e>
 8006804:	2308      	movs	r3, #8
 8006806:	e7b6      	b.n	8006776 <UART_SetConfig+0x6e>
 8006808:	2310      	movs	r3, #16
 800680a:	e7b4      	b.n	8006776 <UART_SetConfig+0x6e>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800680c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006814:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006818:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800681c:	d00f      	beq.n	800683e <UART_SetConfig+0x136>
 800681e:	d805      	bhi.n	800682c <UART_SetConfig+0x124>
 8006820:	b17b      	cbz	r3, 8006842 <UART_SetConfig+0x13a>
 8006822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006826:	d10e      	bne.n	8006846 <UART_SetConfig+0x13e>
 8006828:	2304      	movs	r3, #4
 800682a:	e7a4      	b.n	8006776 <UART_SetConfig+0x6e>
 800682c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006830:	d10b      	bne.n	800684a <UART_SetConfig+0x142>
 8006832:	2308      	movs	r3, #8
 8006834:	e79f      	b.n	8006776 <UART_SetConfig+0x6e>
 8006836:	2302      	movs	r3, #2
 8006838:	e79d      	b.n	8006776 <UART_SetConfig+0x6e>
 800683a:	2302      	movs	r3, #2
 800683c:	e79b      	b.n	8006776 <UART_SetConfig+0x6e>
 800683e:	2302      	movs	r3, #2
 8006840:	e799      	b.n	8006776 <UART_SetConfig+0x6e>
 8006842:	2300      	movs	r3, #0
 8006844:	e797      	b.n	8006776 <UART_SetConfig+0x6e>
 8006846:	2310      	movs	r3, #16
 8006848:	e795      	b.n	8006776 <UART_SetConfig+0x6e>
 800684a:	2310      	movs	r3, #16
 800684c:	e793      	b.n	8006776 <UART_SetConfig+0x6e>
    switch (clocksource)
 800684e:	2b08      	cmp	r3, #8
 8006850:	f200 809f 	bhi.w	8006992 <UART_SetConfig+0x28a>
 8006854:	e8df f003 	tbb	[pc, r3]
 8006858:	9d3c9d08 	.word	0x9d3c9d08
 800685c:	9d9d9d39 	.word	0x9d9d9d39
 8006860:	05          	.byte	0x05
 8006861:	00          	.byte	0x00
  if (UART_INSTANCE_LOWPOWER(huart))
 8006862:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006866:	e004      	b.n	8006872 <UART_SetConfig+0x16a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006868:	f7fe f940 	bl	8004aec <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800686c:	2800      	cmp	r0, #0
 800686e:	f000 8092 	beq.w	8006996 <UART_SetConfig+0x28e>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006872:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006874:	4b50      	ldr	r3, [pc, #320]	; (80069b8 <UART_SetConfig+0x2b0>)
 8006876:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800687a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800687e:	6865      	ldr	r5, [r4, #4]
 8006880:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8006884:	4299      	cmp	r1, r3
 8006886:	f200 8088 	bhi.w	800699a <UART_SetConfig+0x292>
 800688a:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800688e:	f200 8086 	bhi.w	800699e <UART_SetConfig+0x296>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006892:	f04f 0800 	mov.w	r8, #0
 8006896:	b292      	uxth	r2, r2
 8006898:	2300      	movs	r3, #0
 800689a:	4641      	mov	r1, r8
 800689c:	f7fa f95e 	bl	8000b5c <__aeabi_uldivmod>
 80068a0:	020f      	lsls	r7, r1, #8
 80068a2:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 80068a6:	0206      	lsls	r6, r0, #8
 80068a8:	0868      	lsrs	r0, r5, #1
 80068aa:	462a      	mov	r2, r5
 80068ac:	4643      	mov	r3, r8
 80068ae:	1830      	adds	r0, r6, r0
 80068b0:	f147 0100 	adc.w	r1, r7, #0
 80068b4:	f7fa f952 	bl	8000b5c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068b8:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80068bc:	4b3f      	ldr	r3, [pc, #252]	; (80069bc <UART_SetConfig+0x2b4>)
 80068be:	429a      	cmp	r2, r3
 80068c0:	d86f      	bhi.n	80069a2 <UART_SetConfig+0x29a>
          huart->Instance->BRR = usartdiv;
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	60d8      	str	r0, [r3, #12]
 80068c6:	4640      	mov	r0, r8
 80068c8:	e050      	b.n	800696c <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetSysClockFreq();
 80068ca:	f7fd fc07 	bl	80040dc <HAL_RCC_GetSysClockFreq>
        break;
 80068ce:	e7cd      	b.n	800686c <UART_SetConfig+0x164>
        pclk = (uint32_t) HSI_VALUE;
 80068d0:	483b      	ldr	r0, [pc, #236]	; (80069c0 <UART_SetConfig+0x2b8>)
 80068d2:	e7ce      	b.n	8006872 <UART_SetConfig+0x16a>
    switch (clocksource)
 80068d4:	2b08      	cmp	r3, #8
 80068d6:	d875      	bhi.n	80069c4 <UART_SetConfig+0x2bc>
 80068d8:	e8df f003 	tbb	[pc, r3]
 80068dc:	74052707 	.word	0x74052707
 80068e0:	7474742a 	.word	0x7474742a
 80068e4:	0b          	.byte	0x0b
 80068e5:	00          	.byte	0x00
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068e6:	4836      	ldr	r0, [pc, #216]	; (80069c0 <UART_SetConfig+0x2b8>)
 80068e8:	e003      	b.n	80068f2 <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 80068ea:	f7fe f8ff 	bl	8004aec <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80068ee:	2800      	cmp	r0, #0
 80068f0:	d06a      	beq.n	80069c8 <UART_SetConfig+0x2c0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80068f4:	4b30      	ldr	r3, [pc, #192]	; (80069b8 <UART_SetConfig+0x2b0>)
 80068f6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80068fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80068fe:	6862      	ldr	r2, [r4, #4]
 8006900:	0853      	lsrs	r3, r2, #1
 8006902:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006906:	fbb0 f0f2 	udiv	r0, r0, r2
 800690a:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800690c:	f1a0 0210 	sub.w	r2, r0, #16
 8006910:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006914:	429a      	cmp	r2, r3
 8006916:	d859      	bhi.n	80069cc <UART_SetConfig+0x2c4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006918:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800691c:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8006920:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	60d8      	str	r0, [r3, #12]
 8006926:	2000      	movs	r0, #0
 8006928:	e020      	b.n	800696c <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetPCLK2Freq();
 800692a:	f7fe f8ef 	bl	8004b0c <HAL_RCC_GetPCLK2Freq>
        break;
 800692e:	e7de      	b.n	80068ee <UART_SetConfig+0x1e6>
        pclk = HAL_RCC_GetSysClockFreq();
 8006930:	f7fd fbd4 	bl	80040dc <HAL_RCC_GetSysClockFreq>
        break;
 8006934:	e7db      	b.n	80068ee <UART_SetConfig+0x1e6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006936:	4822      	ldr	r0, [pc, #136]	; (80069c0 <UART_SetConfig+0x2b8>)
 8006938:	e003      	b.n	8006942 <UART_SetConfig+0x23a>
        pclk = HAL_RCC_GetPCLK1Freq();
 800693a:	f7fe f8d7 	bl	8004aec <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800693e:	2800      	cmp	r0, #0
 8006940:	d048      	beq.n	80069d4 <UART_SetConfig+0x2cc>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006942:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006944:	4b1c      	ldr	r3, [pc, #112]	; (80069b8 <UART_SetConfig+0x2b0>)
 8006946:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800694a:	fbb0 f0f3 	udiv	r0, r0, r3
 800694e:	6863      	ldr	r3, [r4, #4]
 8006950:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006954:	fbb0 f0f3 	udiv	r0, r0, r3
 8006958:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800695a:	f1a0 0210 	sub.w	r2, r0, #16
 800695e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006962:	429a      	cmp	r2, r3
 8006964:	d838      	bhi.n	80069d8 <UART_SetConfig+0x2d0>
        huart->Instance->BRR = usartdiv;
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	60d8      	str	r0, [r3, #12]
 800696a:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800696c:	2301      	movs	r3, #1
 800696e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006972:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8006976:	2300      	movs	r3, #0
 8006978:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800697a:	6763      	str	r3, [r4, #116]	; 0x74
}
 800697c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8006980:	f7fe f8c4 	bl	8004b0c <HAL_RCC_GetPCLK2Freq>
        break;
 8006984:	e7db      	b.n	800693e <UART_SetConfig+0x236>
        pclk = HAL_RCC_GetSysClockFreq();
 8006986:	f7fd fba9 	bl	80040dc <HAL_RCC_GetSysClockFreq>
        break;
 800698a:	e7d8      	b.n	800693e <UART_SetConfig+0x236>
        pclk = (uint32_t) LSE_VALUE;
 800698c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006990:	e7d7      	b.n	8006942 <UART_SetConfig+0x23a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8006992:	2001      	movs	r0, #1
 8006994:	e7ea      	b.n	800696c <UART_SetConfig+0x264>
 8006996:	2000      	movs	r0, #0
 8006998:	e7e8      	b.n	800696c <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 800699a:	2001      	movs	r0, #1
 800699c:	e7e6      	b.n	800696c <UART_SetConfig+0x264>
 800699e:	2001      	movs	r0, #1
 80069a0:	e7e4      	b.n	800696c <UART_SetConfig+0x264>
          ret = HAL_ERROR;
 80069a2:	2001      	movs	r0, #1
 80069a4:	e7e2      	b.n	800696c <UART_SetConfig+0x264>
 80069a6:	bf00      	nop
 80069a8:	cfff69f3 	.word	0xcfff69f3
 80069ac:	40008000 	.word	0x40008000
 80069b0:	40013800 	.word	0x40013800
 80069b4:	40004400 	.word	0x40004400
 80069b8:	08017a40 	.word	0x08017a40
 80069bc:	000ffcff 	.word	0x000ffcff
 80069c0:	00f42400 	.word	0x00f42400
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069c4:	2001      	movs	r0, #1
 80069c6:	e7d1      	b.n	800696c <UART_SetConfig+0x264>
 80069c8:	2000      	movs	r0, #0
 80069ca:	e7cf      	b.n	800696c <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 80069cc:	2001      	movs	r0, #1
 80069ce:	e7cd      	b.n	800696c <UART_SetConfig+0x264>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069d0:	2001      	movs	r0, #1
 80069d2:	e7cb      	b.n	800696c <UART_SetConfig+0x264>
 80069d4:	2000      	movs	r0, #0
 80069d6:	e7c9      	b.n	800696c <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 80069d8:	2001      	movs	r0, #1
 80069da:	e7c7      	b.n	800696c <UART_SetConfig+0x264>

080069dc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80069de:	f013 0f01 	tst.w	r3, #1
 80069e2:	d006      	beq.n	80069f2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069e4:	6802      	ldr	r2, [r0, #0]
 80069e6:	6853      	ldr	r3, [r2, #4]
 80069e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80069ec:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80069ee:	430b      	orrs	r3, r1
 80069f0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80069f4:	f013 0f02 	tst.w	r3, #2
 80069f8:	d006      	beq.n	8006a08 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069fa:	6802      	ldr	r2, [r0, #0]
 80069fc:	6853      	ldr	r3, [r2, #4]
 80069fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a02:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006a04:	430b      	orrs	r3, r1
 8006a06:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a08:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006a0a:	f013 0f04 	tst.w	r3, #4
 8006a0e:	d006      	beq.n	8006a1e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a10:	6802      	ldr	r2, [r0, #0]
 8006a12:	6853      	ldr	r3, [r2, #4]
 8006a14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a18:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006a1a:	430b      	orrs	r3, r1
 8006a1c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a1e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006a20:	f013 0f08 	tst.w	r3, #8
 8006a24:	d006      	beq.n	8006a34 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a26:	6802      	ldr	r2, [r0, #0]
 8006a28:	6853      	ldr	r3, [r2, #4]
 8006a2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a2e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006a30:	430b      	orrs	r3, r1
 8006a32:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a34:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006a36:	f013 0f10 	tst.w	r3, #16
 8006a3a:	d006      	beq.n	8006a4a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a3c:	6802      	ldr	r2, [r0, #0]
 8006a3e:	6893      	ldr	r3, [r2, #8]
 8006a40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a44:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8006a46:	430b      	orrs	r3, r1
 8006a48:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a4a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006a4c:	f013 0f20 	tst.w	r3, #32
 8006a50:	d006      	beq.n	8006a60 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a52:	6802      	ldr	r2, [r0, #0]
 8006a54:	6893      	ldr	r3, [r2, #8]
 8006a56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a5a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006a5c:	430b      	orrs	r3, r1
 8006a5e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a60:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006a62:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a66:	d00a      	beq.n	8006a7e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a68:	6802      	ldr	r2, [r0, #0]
 8006a6a:	6853      	ldr	r3, [r2, #4]
 8006a6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006a70:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006a72:	430b      	orrs	r3, r1
 8006a74:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a76:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006a78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a7c:	d00b      	beq.n	8006a96 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a7e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006a80:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006a84:	d006      	beq.n	8006a94 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a86:	6802      	ldr	r2, [r0, #0]
 8006a88:	6853      	ldr	r3, [r2, #4]
 8006a8a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006a8e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006a90:	430b      	orrs	r3, r1
 8006a92:	6053      	str	r3, [r2, #4]
}
 8006a94:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a96:	6802      	ldr	r2, [r0, #0]
 8006a98:	6853      	ldr	r3, [r2, #4]
 8006a9a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006a9e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006aa0:	430b      	orrs	r3, r1
 8006aa2:	6053      	str	r3, [r2, #4]
 8006aa4:	e7eb      	b.n	8006a7e <UART_AdvFeatureConfig+0xa2>

08006aa6 <UART_WaitOnFlagUntilTimeout>:
{
 8006aa6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aaa:	4605      	mov	r5, r0
 8006aac:	460f      	mov	r7, r1
 8006aae:	4616      	mov	r6, r2
 8006ab0:	4699      	mov	r9, r3
 8006ab2:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ab6:	682c      	ldr	r4, [r5, #0]
 8006ab8:	69e4      	ldr	r4, [r4, #28]
 8006aba:	ea37 0304 	bics.w	r3, r7, r4
 8006abe:	bf0c      	ite	eq
 8006ac0:	2401      	moveq	r4, #1
 8006ac2:	2400      	movne	r4, #0
 8006ac4:	42b4      	cmp	r4, r6
 8006ac6:	d157      	bne.n	8006b78 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 8006ac8:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006acc:	d0f3      	beq.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ace:	f7fb fd0d 	bl	80024ec <HAL_GetTick>
 8006ad2:	eba0 0009 	sub.w	r0, r0, r9
 8006ad6:	4540      	cmp	r0, r8
 8006ad8:	d82f      	bhi.n	8006b3a <UART_WaitOnFlagUntilTimeout+0x94>
 8006ada:	f1b8 0f00 	cmp.w	r8, #0
 8006ade:	d02c      	beq.n	8006b3a <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ae0:	682b      	ldr	r3, [r5, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	f012 0f04 	tst.w	r2, #4
 8006ae8:	d0e5      	beq.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006aea:	69da      	ldr	r2, [r3, #28]
 8006aec:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006af0:	d0e1      	beq.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006af2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006af6:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006af8:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afa:	e852 3f00 	ldrex	r3, [r2]
 8006afe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b02:	e842 3100 	strex	r1, r3, [r2]
 8006b06:	2900      	cmp	r1, #0
 8006b08:	d1f6      	bne.n	8006af8 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b0a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0c:	f102 0308 	add.w	r3, r2, #8
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b18:	3208      	adds	r2, #8
 8006b1a:	e842 3100 	strex	r1, r3, [r2]
 8006b1e:	2900      	cmp	r1, #0
 8006b20:	d1f3      	bne.n	8006b0a <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8006b22:	2320      	movs	r3, #32
 8006b24:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006b28:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b2c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8006b30:	2300      	movs	r3, #0
 8006b32:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8006b36:	2003      	movs	r0, #3
 8006b38:	e01f      	b.n	8006b7a <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006b3a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3c:	e852 3f00 	ldrex	r3, [r2]
 8006b40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b44:	e842 3100 	strex	r1, r3, [r2]
 8006b48:	2900      	cmp	r1, #0
 8006b4a:	d1f6      	bne.n	8006b3a <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b4c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4e:	f102 0308 	add.w	r3, r2, #8
 8006b52:	e853 3f00 	ldrex	r3, [r3]
 8006b56:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5a:	3208      	adds	r2, #8
 8006b5c:	e842 3100 	strex	r1, r3, [r2]
 8006b60:	2900      	cmp	r1, #0
 8006b62:	d1f3      	bne.n	8006b4c <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8006b64:	2320      	movs	r3, #32
 8006b66:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006b6a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8006b6e:	2300      	movs	r3, #0
 8006b70:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8006b74:	2003      	movs	r0, #3
 8006b76:	e000      	b.n	8006b7a <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8006b78:	2000      	movs	r0, #0
}
 8006b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006b7e <UART_CheckIdleState>:
{
 8006b7e:	b530      	push	{r4, r5, lr}
 8006b80:	b083      	sub	sp, #12
 8006b82:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b84:	2300      	movs	r3, #0
 8006b86:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8006b8a:	f7fb fcaf 	bl	80024ec <HAL_GetTick>
 8006b8e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f013 0f08 	tst.w	r3, #8
 8006b98:	d10f      	bne.n	8006bba <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f013 0f04 	tst.w	r3, #4
 8006ba2:	d118      	bne.n	8006bd6 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8006ba4:	2320      	movs	r3, #32
 8006ba6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006baa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bae:	2000      	movs	r0, #0
 8006bb0:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8006bb2:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006bb6:	b003      	add	sp, #12
 8006bb8:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f7ff ff6c 	bl	8006aa6 <UART_WaitOnFlagUntilTimeout>
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	d0e3      	beq.n	8006b9a <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8006bd2:	2003      	movs	r0, #3
 8006bd4:	e7ef      	b.n	8006bb6 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bd6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	462b      	mov	r3, r5
 8006bde:	2200      	movs	r2, #0
 8006be0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006be4:	4620      	mov	r0, r4
 8006be6:	f7ff ff5e 	bl	8006aa6 <UART_WaitOnFlagUntilTimeout>
 8006bea:	2800      	cmp	r0, #0
 8006bec:	d0da      	beq.n	8006ba4 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8006bee:	2003      	movs	r0, #3
 8006bf0:	e7e1      	b.n	8006bb6 <UART_CheckIdleState+0x38>
	...

08006bf4 <HAL_UART_Init>:
  if (huart == NULL)
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	d03a      	beq.n	8006c6e <HAL_UART_Init+0x7a>
{
 8006bf8:	b510      	push	{r4, lr}
 8006bfa:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006bfc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006c00:	b30b      	cbz	r3, 8006c46 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8006c02:	2324      	movs	r3, #36	; 0x24
 8006c04:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8006c08:	6822      	ldr	r2, [r4, #0]
 8006c0a:	6813      	ldr	r3, [r2, #0]
 8006c0c:	f023 0301 	bic.w	r3, r3, #1
 8006c10:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c12:	4620      	mov	r0, r4
 8006c14:	f7ff fd78 	bl	8006708 <UART_SetConfig>
 8006c18:	2801      	cmp	r0, #1
 8006c1a:	d013      	beq.n	8006c44 <HAL_UART_Init+0x50>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006c1e:	bb13      	cbnz	r3, 8006c66 <HAL_UART_Init+0x72>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c20:	6822      	ldr	r2, [r4, #0]
 8006c22:	6853      	ldr	r3, [r2, #4]
 8006c24:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006c28:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c2a:	6822      	ldr	r2, [r4, #0]
 8006c2c:	6893      	ldr	r3, [r2, #8]
 8006c2e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006c32:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006c34:	6822      	ldr	r2, [r4, #0]
 8006c36:	6813      	ldr	r3, [r2, #0]
 8006c38:	f043 0301 	orr.w	r3, r3, #1
 8006c3c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f7ff ff9d 	bl	8006b7e <UART_CheckIdleState>
}
 8006c44:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006c46:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    UART_InitCallbacksToDefault(huart);
 8006c4a:	f7ff fd1f 	bl	800668c <UART_InitCallbacksToDefault>
    if (huart->MspInitCallback == NULL)
 8006c4e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8006c52:	b123      	cbz	r3, 8006c5e <HAL_UART_Init+0x6a>
    huart->MspInitCallback(huart);
 8006c54:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8006c58:	4620      	mov	r0, r4
 8006c5a:	4798      	blx	r3
 8006c5c:	e7d1      	b.n	8006c02 <HAL_UART_Init+0xe>
      huart->MspInitCallback = HAL_UART_MspInit;
 8006c5e:	4b05      	ldr	r3, [pc, #20]	; (8006c74 <HAL_UART_Init+0x80>)
 8006c60:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 8006c64:	e7f6      	b.n	8006c54 <HAL_UART_Init+0x60>
    UART_AdvFeatureConfig(huart);
 8006c66:	4620      	mov	r0, r4
 8006c68:	f7ff feb8 	bl	80069dc <UART_AdvFeatureConfig>
 8006c6c:	e7d8      	b.n	8006c20 <HAL_UART_Init+0x2c>
    return HAL_ERROR;
 8006c6e:	2001      	movs	r0, #1
}
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	08001f7d 	.word	0x08001f7d

08006c78 <UART_Start_Receive_IT>:
{
 8006c78:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8006c7a:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006c7c:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006c80:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006c84:	2300      	movs	r3, #0
 8006c86:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8006c88:	6883      	ldr	r3, [r0, #8]
 8006c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c8e:	d006      	beq.n	8006c9e <UART_Start_Receive_IT+0x26>
 8006c90:	b9a3      	cbnz	r3, 8006cbc <UART_Start_Receive_IT+0x44>
 8006c92:	6903      	ldr	r3, [r0, #16]
 8006c94:	b973      	cbnz	r3, 8006cb4 <UART_Start_Receive_IT+0x3c>
 8006c96:	23ff      	movs	r3, #255	; 0xff
 8006c98:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006c9c:	e014      	b.n	8006cc8 <UART_Start_Receive_IT+0x50>
 8006c9e:	6903      	ldr	r3, [r0, #16]
 8006ca0:	b923      	cbnz	r3, 8006cac <UART_Start_Receive_IT+0x34>
 8006ca2:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006ca6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006caa:	e00d      	b.n	8006cc8 <UART_Start_Receive_IT+0x50>
 8006cac:	23ff      	movs	r3, #255	; 0xff
 8006cae:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006cb2:	e009      	b.n	8006cc8 <UART_Start_Receive_IT+0x50>
 8006cb4:	237f      	movs	r3, #127	; 0x7f
 8006cb6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006cba:	e005      	b.n	8006cc8 <UART_Start_Receive_IT+0x50>
 8006cbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cc0:	d02d      	beq.n	8006d1e <UART_Start_Receive_IT+0xa6>
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cce:	2322      	movs	r3, #34	; 0x22
 8006cd0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd4:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd6:	f101 0308 	add.w	r3, r1, #8
 8006cda:	e853 3f00 	ldrex	r3, [r3]
 8006cde:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce2:	3108      	adds	r1, #8
 8006ce4:	e841 3400 	strex	r4, r3, [r1]
 8006ce8:	2c00      	cmp	r4, #0
 8006cea:	d1f3      	bne.n	8006cd4 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006cec:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006cee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cf2:	d01e      	beq.n	8006d32 <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cf4:	6883      	ldr	r3, [r0, #8]
 8006cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cfa:	d043      	beq.n	8006d84 <UART_Start_Receive_IT+0x10c>
      huart->RxISR = UART_RxISR_8BIT;
 8006cfc:	4b24      	ldr	r3, [pc, #144]	; (8006d90 <UART_Start_Receive_IT+0x118>)
 8006cfe:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8006d00:	2300      	movs	r3, #0
 8006d02:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006d06:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d08:	e852 3f00 	ldrex	r3, [r2]
 8006d0c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d10:	e842 3100 	strex	r1, r3, [r2]
 8006d14:	2900      	cmp	r1, #0
 8006d16:	d1f6      	bne.n	8006d06 <UART_Start_Receive_IT+0x8e>
}
 8006d18:	2000      	movs	r0, #0
 8006d1a:	bc10      	pop	{r4}
 8006d1c:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8006d1e:	6903      	ldr	r3, [r0, #16]
 8006d20:	b91b      	cbnz	r3, 8006d2a <UART_Start_Receive_IT+0xb2>
 8006d22:	237f      	movs	r3, #127	; 0x7f
 8006d24:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006d28:	e7ce      	b.n	8006cc8 <UART_Start_Receive_IT+0x50>
 8006d2a:	233f      	movs	r3, #63	; 0x3f
 8006d2c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006d30:	e7ca      	b.n	8006cc8 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006d32:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d8dc      	bhi.n	8006cf4 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d3a:	6883      	ldr	r3, [r0, #8]
 8006d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d40:	d01a      	beq.n	8006d78 <UART_Start_Receive_IT+0x100>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006d42:	4b14      	ldr	r3, [pc, #80]	; (8006d94 <UART_Start_Receive_IT+0x11c>)
 8006d44:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8006d46:	2300      	movs	r3, #0
 8006d48:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d4c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4e:	e852 3f00 	ldrex	r3, [r2]
 8006d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d56:	e842 3100 	strex	r1, r3, [r2]
 8006d5a:	2900      	cmp	r1, #0
 8006d5c:	d1f6      	bne.n	8006d4c <UART_Start_Receive_IT+0xd4>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006d5e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	f102 0308 	add.w	r3, r2, #8
 8006d64:	e853 3f00 	ldrex	r3, [r3]
 8006d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6c:	3208      	adds	r2, #8
 8006d6e:	e842 3100 	strex	r1, r3, [r2]
 8006d72:	2900      	cmp	r1, #0
 8006d74:	d1f3      	bne.n	8006d5e <UART_Start_Receive_IT+0xe6>
 8006d76:	e7cf      	b.n	8006d18 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d78:	6903      	ldr	r3, [r0, #16]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1e1      	bne.n	8006d42 <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006d7e:	4b06      	ldr	r3, [pc, #24]	; (8006d98 <UART_Start_Receive_IT+0x120>)
 8006d80:	6703      	str	r3, [r0, #112]	; 0x70
 8006d82:	e7e0      	b.n	8006d46 <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d84:	6903      	ldr	r3, [r0, #16]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1b8      	bne.n	8006cfc <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8006d8a:	4b04      	ldr	r3, [pc, #16]	; (8006d9c <UART_Start_Receive_IT+0x124>)
 8006d8c:	6703      	str	r3, [r0, #112]	; 0x70
 8006d8e:	e7b7      	b.n	8006d00 <UART_Start_Receive_IT+0x88>
 8006d90:	08005ccf 	.word	0x08005ccf
 8006d94:	08005e39 	.word	0x08005e39
 8006d98:	08005fd9 	.word	0x08005fd9
 8006d9c:	08005d85 	.word	0x08005d85

08006da0 <HAL_UART_Receive_IT>:
{
 8006da0:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8006da2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006da6:	2b20      	cmp	r3, #32
 8006da8:	d11e      	bne.n	8006de8 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8006daa:	b1f9      	cbz	r1, 8006dec <HAL_UART_Receive_IT+0x4c>
 8006dac:	b302      	cbz	r2, 8006df0 <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 8006dae:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d01e      	beq.n	8006df4 <HAL_UART_Receive_IT+0x54>
 8006db6:	2301      	movs	r3, #1
 8006db8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006dc0:	6803      	ldr	r3, [r0, #0]
 8006dc2:	4c0d      	ldr	r4, [pc, #52]	; (8006df8 <HAL_UART_Receive_IT+0x58>)
 8006dc4:	42a3      	cmp	r3, r4
 8006dc6:	d00c      	beq.n	8006de2 <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006dce:	d008      	beq.n	8006de2 <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006dd0:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd2:	e854 3f00 	ldrex	r3, [r4]
 8006dd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dda:	e844 3500 	strex	r5, r3, [r4]
 8006dde:	2d00      	cmp	r5, #0
 8006de0:	d1f6      	bne.n	8006dd0 <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 8006de2:	f7ff ff49 	bl	8006c78 <UART_Start_Receive_IT>
 8006de6:	e000      	b.n	8006dea <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 8006de8:	2002      	movs	r0, #2
}
 8006dea:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8006dec:	2001      	movs	r0, #1
 8006dee:	e7fc      	b.n	8006dea <HAL_UART_Receive_IT+0x4a>
 8006df0:	2001      	movs	r0, #1
 8006df2:	e7fa      	b.n	8006dea <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 8006df4:	2002      	movs	r0, #2
 8006df6:	e7f8      	b.n	8006dea <HAL_UART_Receive_IT+0x4a>
 8006df8:	40008000 	.word	0x40008000

08006dfc <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006dfc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006dfe:	b92b      	cbnz	r3, 8006e0c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8006e00:	2301      	movs	r3, #1
 8006e02:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e06:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8006e0a:	4770      	bx	lr
{
 8006e0c:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e0e:	6803      	ldr	r3, [r0, #0]
 8006e10:	689a      	ldr	r2, [r3, #8]
 8006e12:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e16:	6899      	ldr	r1, [r3, #8]
 8006e18:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e1a:	4d09      	ldr	r5, [pc, #36]	; (8006e40 <UARTEx_SetNbDataToProcess+0x44>)
 8006e1c:	5c6b      	ldrb	r3, [r5, r1]
 8006e1e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e20:	4c08      	ldr	r4, [pc, #32]	; (8006e44 <UARTEx_SetNbDataToProcess+0x48>)
 8006e22:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e24:	fb93 f3f1 	sdiv	r3, r3, r1
 8006e28:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e2c:	5cab      	ldrb	r3, [r5, r2]
 8006e2e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e30:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e32:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e36:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8006e3a:	bc30      	pop	{r4, r5}
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	08017a60 	.word	0x08017a60
 8006e44:	08017a58 	.word	0x08017a58

08006e48 <HAL_UARTEx_WakeupCallback>:
}
 8006e48:	4770      	bx	lr

08006e4a <HAL_UARTEx_RxFifoFullCallback>:
}
 8006e4a:	4770      	bx	lr

08006e4c <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8006e4c:	4770      	bx	lr

08006e4e <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8006e4e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d018      	beq.n	8006e88 <HAL_UARTEx_DisableFifoMode+0x3a>
 8006e56:	2301      	movs	r3, #1
 8006e58:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006e5c:	2324      	movs	r3, #36	; 0x24
 8006e5e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e62:	6803      	ldr	r3, [r0, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006e66:	6819      	ldr	r1, [r3, #0]
 8006e68:	f021 0101 	bic.w	r1, r1, #1
 8006e6c:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e6e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e72:	2300      	movs	r3, #0
 8006e74:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e76:	6801      	ldr	r1, [r0, #0]
 8006e78:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006e80:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8006e84:	4618      	mov	r0, r3
 8006e86:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006e88:	2002      	movs	r0, #2
}
 8006e8a:	4770      	bx	lr

08006e8c <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006e8c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006e8e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d01d      	beq.n	8006ed2 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8006e96:	4604      	mov	r4, r0
 8006e98:	2301      	movs	r3, #1
 8006e9a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006e9e:	2324      	movs	r3, #36	; 0x24
 8006ea0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ea4:	6803      	ldr	r3, [r0, #0]
 8006ea6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	f022 0201 	bic.w	r2, r2, #1
 8006eae:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006eb0:	6802      	ldr	r2, [r0, #0]
 8006eb2:	6893      	ldr	r3, [r2, #8]
 8006eb4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006eb8:	4319      	orrs	r1, r3
 8006eba:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006ebc:	f7ff ff9e 	bl	8006dfc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006ec4:	2320      	movs	r3, #32
 8006ec6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006eca:	2000      	movs	r0, #0
 8006ecc:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006ed0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006ed2:	2002      	movs	r0, #2
 8006ed4:	e7fc      	b.n	8006ed0 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08006ed6 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006ed6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006ed8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d01d      	beq.n	8006f1c <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8006ee0:	4604      	mov	r4, r0
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006ee8:	2324      	movs	r3, #36	; 0x24
 8006eea:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006eee:	6803      	ldr	r3, [r0, #0]
 8006ef0:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	f022 0201 	bic.w	r2, r2, #1
 8006ef8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006efa:	6802      	ldr	r2, [r0, #0]
 8006efc:	6893      	ldr	r3, [r2, #8]
 8006efe:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8006f02:	4319      	orrs	r1, r3
 8006f04:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006f06:	f7ff ff79 	bl	8006dfc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006f0e:	2320      	movs	r3, #32
 8006f10:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006f14:	2000      	movs	r0, #0
 8006f16:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006f1a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006f1c:	2002      	movs	r0, #2
 8006f1e:	e7fc      	b.n	8006f1a <HAL_UARTEx_SetRxFifoThreshold+0x44>

08006f20 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 8006f20:	2804      	cmp	r0, #4
 8006f22:	d807      	bhi.n	8006f34 <LmHandlerPackageIsInitialized+0x14>
{
 8006f24:	b508      	push	{r3, lr}
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 8006f26:	4b05      	ldr	r3, [pc, #20]	; (8006f3c <LmHandlerPackageIsInitialized+0x1c>)
 8006f28:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	b11b      	cbz	r3, 8006f38 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8006f30:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 8006f32:	bd08      	pop	{r3, pc}
        return false;
 8006f34:	2000      	movs	r0, #0
}
 8006f36:	4770      	bx	lr
        return false;
 8006f38:	2000      	movs	r0, #0
 8006f3a:	e7fa      	b.n	8006f32 <LmHandlerPackageIsInitialized+0x12>
 8006f3c:	20000638 	.word	0x20000638

08006f40 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8006f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f42:	4605      	mov	r5, r0
 8006f44:	460f      	mov	r7, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006f46:	2400      	movs	r4, #0
 8006f48:	e018      	b.n	8006f7c <LmHandlerPackagesNotify+0x3c>
                    }
                    break;
                }
                case PACKAGE_MCPS_INDICATION:
                {
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8006f4a:	69da      	ldr	r2, [r3, #28]
 8006f4c:	b1a2      	cbz	r2, 8006f78 <LmHandlerPackagesNotify+0x38>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8006f4e:	781a      	ldrb	r2, [r3, #0]
 8006f50:	78fb      	ldrb	r3, [r7, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d005      	beq.n	8006f62 <LmHandlerPackagesNotify+0x22>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8006f56:	b97c      	cbnz	r4, 8006f78 <LmHandlerPackagesNotify+0x38>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 8006f58:	4b13      	ldr	r3, [pc, #76]	; (8006fa8 <LmHandlerPackagesNotify+0x68>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	4798      	blx	r3
 8006f60:	b150      	cbz	r0, 8006f78 <LmHandlerPackagesNotify+0x38>
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 8006f62:	4b11      	ldr	r3, [pc, #68]	; (8006fa8 <LmHandlerPackagesNotify+0x68>)
 8006f64:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	4638      	mov	r0, r7
 8006f6c:	4798      	blx	r3
 8006f6e:	e003      	b.n	8006f78 <LmHandlerPackagesNotify+0x38>
                    }
                    break;
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	b10b      	cbz	r3, 8006f78 <LmHandlerPackagesNotify+0x38>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 8006f74:	4638      	mov	r0, r7
 8006f76:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006f78:	3401      	adds	r4, #1
 8006f7a:	b264      	sxtb	r4, r4
 8006f7c:	2c04      	cmp	r4, #4
 8006f7e:	dc11      	bgt.n	8006fa4 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 8006f80:	4626      	mov	r6, r4
 8006f82:	4b09      	ldr	r3, [pc, #36]	; (8006fa8 <LmHandlerPackagesNotify+0x68>)
 8006f84:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d0f5      	beq.n	8006f78 <LmHandlerPackagesNotify+0x38>
            switch( notifyType )
 8006f8c:	2d01      	cmp	r5, #1
 8006f8e:	d0dc      	beq.n	8006f4a <LmHandlerPackagesNotify+0xa>
 8006f90:	2d02      	cmp	r5, #2
 8006f92:	d0ed      	beq.n	8006f70 <LmHandlerPackagesNotify+0x30>
 8006f94:	2d00      	cmp	r5, #0
 8006f96:	d1ef      	bne.n	8006f78 <LmHandlerPackagesNotify+0x38>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0ec      	beq.n	8006f78 <LmHandlerPackagesNotify+0x38>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 8006f9e:	4638      	mov	r0, r7
 8006fa0:	4798      	blx	r3
 8006fa2:	e7e9      	b.n	8006f78 <LmHandlerPackagesNotify+0x38>
                    break;
                }
            }
        }
    }
}
 8006fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	20000638 	.word	0x20000638

08006fac <McpsConfirm>:
{
 8006fac:	b510      	push	{r4, lr}
 8006fae:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 8006fb0:	480c      	ldr	r0, [pc, #48]	; (8006fe4 <McpsConfirm+0x38>)
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mcpsConfirm->Status;
 8006fb6:	7863      	ldrb	r3, [r4, #1]
 8006fb8:	7043      	strb	r3, [r0, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8006fba:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8006fbe:	7103      	strb	r3, [r0, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8006fc0:	68e3      	ldr	r3, [r4, #12]
 8006fc2:	6083      	str	r3, [r0, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8006fc4:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8006fc8:	7503      	strb	r3, [r0, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 8006fca:	6923      	ldr	r3, [r4, #16]
 8006fcc:	7543      	strb	r3, [r0, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8006fce:	7923      	ldrb	r3, [r4, #4]
 8006fd0:	70c3      	strb	r3, [r0, #3]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8006fd2:	4b05      	ldr	r3, [pc, #20]	; (8006fe8 <McpsConfirm+0x3c>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6a1b      	ldr	r3, [r3, #32]
 8006fd8:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8006fda:	4621      	mov	r1, r4
 8006fdc:	2000      	movs	r0, #0
 8006fde:	f7ff ffaf 	bl	8006f40 <LmHandlerPackagesNotify>
}
 8006fe2:	bd10      	pop	{r4, pc}
 8006fe4:	20000680 	.word	0x20000680
 8006fe8:	20000634 	.word	0x20000634

08006fec <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 8006fec:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006fee:	2400      	movs	r4, #0
 8006ff0:	e001      	b.n	8006ff6 <LmHandlerPackagesProcess+0xa>
 8006ff2:	3401      	adds	r4, #1
 8006ff4:	b264      	sxtb	r4, r4
 8006ff6:	2c04      	cmp	r4, #4
 8006ff8:	dc12      	bgt.n	8007020 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8006ffa:	4b0a      	ldr	r3, [pc, #40]	; (8007024 <LmHandlerPackagesProcess+0x38>)
 8006ffc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d0f6      	beq.n	8006ff2 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8007004:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0f3      	beq.n	8006ff2 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800700a:	b2e0      	uxtb	r0, r4
 800700c:	f7ff ff88 	bl	8006f20 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8007010:	2800      	cmp	r0, #0
 8007012:	d0ee      	beq.n	8006ff2 <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 8007014:	4b03      	ldr	r3, [pc, #12]	; (8007024 <LmHandlerPackagesProcess+0x38>)
 8007016:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	4798      	blx	r3
 800701e:	e7e8      	b.n	8006ff2 <LmHandlerPackagesProcess+0x6>
        }
    }
}
 8007020:	bd38      	pop	{r3, r4, r5, pc}
 8007022:	bf00      	nop
 8007024:	20000638 	.word	0x20000638

08007028 <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 8007028:	b500      	push	{lr}
 800702a:	b083      	sub	sp, #12
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800702c:	4b05      	ldr	r3, [pc, #20]	; (8007044 <DisplayClassUpdate+0x1c>)
 800702e:	5c1b      	ldrb	r3, [r3, r0]
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	4b05      	ldr	r3, [pc, #20]	; (8007048 <DisplayClassUpdate+0x20>)
 8007034:	2200      	movs	r2, #0
 8007036:	4611      	mov	r1, r2
 8007038:	2002      	movs	r0, #2
 800703a:	f00f fc47 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
}
 800703e:	b003      	add	sp, #12
 8007040:	f85d fb04 	ldr.w	pc, [sp], #4
 8007044:	08017a84 	.word	0x08017a84
 8007048:	08017a68 	.word	0x08017a68

0800704c <LmHandlerSetSystemMaxRxError>:
{
 800704c:	b500      	push	{lr}
 800704e:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8007050:	2322      	movs	r3, #34	; 0x22
 8007052:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8007056:	9002      	str	r0, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007058:	a801      	add	r0, sp, #4
 800705a:	f003 fa6b 	bl	800a534 <LoRaMacMibSetRequestConfirm>
 800705e:	b910      	cbnz	r0, 8007066 <LmHandlerSetSystemMaxRxError+0x1a>
}
 8007060:	b00b      	add	sp, #44	; 0x2c
 8007062:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8007066:	f04f 30ff 	mov.w	r0, #4294967295
 800706a:	e7f9      	b.n	8007060 <LmHandlerSetSystemMaxRxError+0x14>

0800706c <LmHandlerDeviceTimeReq>:
{
 800706c:	b500      	push	{lr}
 800706e:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 8007070:	230a      	movs	r3, #10
 8007072:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 8007076:	a801      	add	r0, sp, #4
 8007078:	f003 fcd4 	bl	800aa24 <LoRaMacMlmeRequest>
    if( status == LORAMAC_STATUS_OK )
 800707c:	b910      	cbnz	r0, 8007084 <LmHandlerDeviceTimeReq+0x18>
}
 800707e:	b007      	add	sp, #28
 8007080:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8007084:	f04f 30ff 	mov.w	r0, #4294967295
 8007088:	e7f9      	b.n	800707e <LmHandlerDeviceTimeReq+0x12>
	...

0800708c <LmHandlerConfigure>:
{
 800708c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800708e:	b095      	sub	sp, #84	; 0x54
 8007090:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8007092:	4c63      	ldr	r4, [pc, #396]	; (8007220 <LmHandlerConfigure+0x194>)
 8007094:	2210      	movs	r2, #16
 8007096:	4620      	mov	r0, r4
 8007098:	f00f fd2c 	bl	8016af4 <UTIL_MEM_cpy_8>
    loraInfo = LoraInfo_GetPtr();
 800709c:	f7fa fa92 	bl	80015c4 <LoraInfo_GetPtr>
    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 80070a0:	7822      	ldrb	r2, [r4, #0]
 80070a2:	2301      	movs	r3, #1
 80070a4:	4093      	lsls	r3, r2
 80070a6:	6841      	ldr	r1, [r0, #4]
 80070a8:	420b      	tst	r3, r1
 80070aa:	f000 80aa 	beq.w	8007202 <LmHandlerConfigure+0x176>
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 80070ae:	495d      	ldr	r1, [pc, #372]	; (8007224 <LmHandlerConfigure+0x198>)
 80070b0:	485d      	ldr	r0, [pc, #372]	; (8007228 <LmHandlerConfigure+0x19c>)
 80070b2:	f002 feef 	bl	8009e94 <LoRaMacInitialization>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	f040 80ae 	bne.w	8007218 <LmHandlerConfigure+0x18c>
    nbNvmData = NvmDataMgmtRestore( );
 80070bc:	f004 fead 	bl	800be1a <NvmDataMgmtRestore>
    if( nbNvmData > 0 )
 80070c0:	2800      	cmp	r0, #0
 80070c2:	f000 80a5 	beq.w	8007210 <LmHandlerConfigure+0x184>
        CtxRestoreDone = true;
 80070c6:	4b59      	ldr	r3, [pc, #356]	; (800722c <LmHandlerConfigure+0x1a0>)
 80070c8:	2201      	movs	r2, #1
 80070ca:	701a      	strb	r2, [r3, #0]
    mibReq.Type = MIB_DEV_EUI;
 80070cc:	2502      	movs	r5, #2
 80070ce:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    LoRaMacMibGetRequestConfirm( &mibReq );
 80070d2:	a80b      	add	r0, sp, #44	; 0x2c
 80070d4:	f003 f916 	bl	800a304 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 80070d8:	4c55      	ldr	r4, [pc, #340]	; (8007230 <LmHandlerConfigure+0x1a4>)
 80070da:	2208      	movs	r2, #8
 80070dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80070de:	4620      	mov	r0, r4
 80070e0:	f00d fa6b 	bl	80145ba <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 80070e4:	2303      	movs	r3, #3
 80070e6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    LoRaMacMibGetRequestConfirm( &mibReq );
 80070ea:	a80b      	add	r0, sp, #44	; 0x2c
 80070ec:	f003 f90a 	bl	800a304 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 80070f0:	2208      	movs	r2, #8
 80070f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80070f4:	18a0      	adds	r0, r4, r2
 80070f6:	f00d fa60 	bl	80145ba <memcpy1>
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 80070fa:	4b4e      	ldr	r3, [pc, #312]	; (8007234 <LmHandlerConfigure+0x1a8>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	4798      	blx	r3
 8007102:	6160      	str	r0, [r4, #20]
    mibReq.Type = MIB_DEV_ADDR;
 8007104:	2206      	movs	r2, #6
 8007106:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800710a:	900c      	str	r0, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 800710c:	a80b      	add	r0, sp, #44	; 0x2c
 800710e:	f003 fa11 	bl	800a534 <LoRaMacMibSetRequestConfirm>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8007112:	7823      	ldrb	r3, [r4, #0]
 8007114:	7862      	ldrb	r2, [r4, #1]
 8007116:	78a1      	ldrb	r1, [r4, #2]
 8007118:	78e0      	ldrb	r0, [r4, #3]
 800711a:	7926      	ldrb	r6, [r4, #4]
 800711c:	7967      	ldrb	r7, [r4, #5]
 800711e:	f894 c006 	ldrb.w	ip, [r4, #6]
 8007122:	f894 e007 	ldrb.w	lr, [r4, #7]
 8007126:	f8cd e01c 	str.w	lr, [sp, #28]
 800712a:	f8cd c018 	str.w	ip, [sp, #24]
 800712e:	9705      	str	r7, [sp, #20]
 8007130:	9604      	str	r6, [sp, #16]
 8007132:	9003      	str	r0, [sp, #12]
 8007134:	9102      	str	r1, [sp, #8]
 8007136:	9201      	str	r2, [sp, #4]
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	4b3f      	ldr	r3, [pc, #252]	; (8007238 <LmHandlerConfigure+0x1ac>)
 800713c:	2200      	movs	r2, #0
 800713e:	4611      	mov	r1, r2
 8007140:	4628      	mov	r0, r5
 8007142:	f00f fbc3 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8007146:	7a23      	ldrb	r3, [r4, #8]
 8007148:	7a62      	ldrb	r2, [r4, #9]
 800714a:	7aa1      	ldrb	r1, [r4, #10]
 800714c:	7ae0      	ldrb	r0, [r4, #11]
 800714e:	7b26      	ldrb	r6, [r4, #12]
 8007150:	7b67      	ldrb	r7, [r4, #13]
 8007152:	f894 c00e 	ldrb.w	ip, [r4, #14]
 8007156:	f894 e00f 	ldrb.w	lr, [r4, #15]
 800715a:	f8cd e01c 	str.w	lr, [sp, #28]
 800715e:	f8cd c018 	str.w	ip, [sp, #24]
 8007162:	9705      	str	r7, [sp, #20]
 8007164:	9604      	str	r6, [sp, #16]
 8007166:	9003      	str	r0, [sp, #12]
 8007168:	9102      	str	r1, [sp, #8]
 800716a:	9201      	str	r2, [sp, #4]
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	4b33      	ldr	r3, [pc, #204]	; (800723c <LmHandlerConfigure+0x1b0>)
 8007170:	2200      	movs	r2, #0
 8007172:	4611      	mov	r1, r2
 8007174:	4628      	mov	r0, r5
 8007176:	f00f fba9 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 800717a:	7de3      	ldrb	r3, [r4, #23]
 800717c:	7da2      	ldrb	r2, [r4, #22]
 800717e:	7d61      	ldrb	r1, [r4, #21]
 8007180:	7d20      	ldrb	r0, [r4, #20]
 8007182:	9003      	str	r0, [sp, #12]
 8007184:	9102      	str	r1, [sp, #8]
 8007186:	9201      	str	r2, [sp, #4]
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	4b2d      	ldr	r3, [pc, #180]	; (8007240 <LmHandlerConfigure+0x1b4>)
 800718c:	2200      	movs	r2, #0
 800718e:	4611      	mov	r1, r2
 8007190:	4628      	mov	r0, r5
 8007192:	f00f fb9b 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8007196:	260f      	movs	r6, #15
 8007198:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800719c:	2301      	movs	r3, #1
 800719e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 80071a2:	a80b      	add	r0, sp, #44	; 0x2c
 80071a4:	f003 f9c6 	bl	800a534 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NET_ID;
 80071a8:	2305      	movs	r3, #5
 80071aa:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 80071ae:	2400      	movs	r4, #0
 80071b0:	940c      	str	r4, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 80071b2:	a80b      	add	r0, sp, #44	; 0x2c
 80071b4:	f003 f9be 	bl	800a534 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 80071b8:	2310      	movs	r3, #16
 80071ba:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 80071be:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 80071c2:	a80b      	add	r0, sp, #44	; 0x2c
 80071c4:	f003 f9b6 	bl	800a534 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 80071c8:	2304      	movs	r3, #4
 80071ca:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 80071ce:	4d14      	ldr	r5, [pc, #80]	; (8007220 <LmHandlerConfigure+0x194>)
 80071d0:	78ab      	ldrb	r3, [r5, #2]
 80071d2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 80071d6:	a80b      	add	r0, sp, #44	; 0x2c
 80071d8:	f003 f9ac 	bl	800a534 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80071dc:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 80071e0:	a909      	add	r1, sp, #36	; 0x24
 80071e2:	7828      	ldrb	r0, [r5, #0]
 80071e4:	f004 fe27 	bl	800be36 <RegionGetPhyParam>
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 80071e8:	1b03      	subs	r3, r0, r4
 80071ea:	bf18      	it	ne
 80071ec:	2301      	movne	r3, #1
 80071ee:	716b      	strb	r3, [r5, #5]
    LmHandlerSetSystemMaxRxError( 20 );
 80071f0:	2014      	movs	r0, #20
 80071f2:	f7ff ff2b 	bl	800704c <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 80071f6:	7968      	ldrb	r0, [r5, #5]
 80071f8:	f003 fda4 	bl	800ad44 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 80071fc:	4620      	mov	r0, r4
}
 80071fe:	b015      	add	sp, #84	; 0x54
 8007200:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 8007202:	4b10      	ldr	r3, [pc, #64]	; (8007244 <LmHandlerConfigure+0x1b8>)
 8007204:	2201      	movs	r2, #1
 8007206:	2100      	movs	r1, #0
 8007208:	4608      	mov	r0, r1
 800720a:	f00f fb5f 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800720e:	e7fe      	b.n	800720e <LmHandlerConfigure+0x182>
        CtxRestoreDone = false;
 8007210:	4b06      	ldr	r3, [pc, #24]	; (800722c <LmHandlerConfigure+0x1a0>)
 8007212:	2200      	movs	r2, #0
 8007214:	701a      	strb	r2, [r3, #0]
 8007216:	e759      	b.n	80070cc <LmHandlerConfigure+0x40>
            return LORAMAC_HANDLER_ERROR;
 8007218:	f04f 30ff 	mov.w	r0, #4294967295
 800721c:	e7ef      	b.n	80071fe <LmHandlerConfigure+0x172>
 800721e:	bf00      	nop
 8007220:	2000064c 	.word	0x2000064c
 8007224:	2000065c 	.word	0x2000065c
 8007228:	20000670 	.word	0x20000670
 800722c:	20000632 	.word	0x20000632
 8007230:	20000058 	.word	0x20000058
 8007234:	20000634 	.word	0x20000634
 8007238:	08017ad4 	.word	0x08017ad4
 800723c:	08017b10 	.word	0x08017b10
 8007240:	08017b4c 	.word	0x08017b4c
 8007244:	08017a88 	.word	0x08017a88

08007248 <LmHandlerProcess>:
{
 8007248:	b508      	push	{r3, lr}
    LoRaMacProcess( );
 800724a:	f002 fdef 	bl	8009e2c <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 800724e:	f7ff fecd 	bl	8006fec <LmHandlerPackagesProcess>
    NvmDataMgmtStore( );
 8007252:	f004 fde0 	bl	800be16 <NvmDataMgmtStore>
}
 8007256:	bd08      	pop	{r3, pc}

08007258 <LmHandlerJoinStatus>:
{
 8007258:	b500      	push	{lr}
 800725a:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800725c:	2301      	movs	r3, #1
 800725e:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8007262:	a801      	add	r0, sp, #4
 8007264:	f003 f84e 	bl	800a304 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8007268:	b920      	cbnz	r0, 8007274 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800726a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800726e:	b110      	cbz	r0, 8007276 <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 8007270:	2001      	movs	r0, #1
 8007272:	e000      	b.n	8007276 <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 8007274:	2000      	movs	r0, #0
}
 8007276:	b00b      	add	sp, #44	; 0x2c
 8007278:	f85d fb04 	ldr.w	pc, [sp], #4

0800727c <LmHandlerRequestClass>:
{
 800727c:	b510      	push	{r4, lr}
 800727e:	b08a      	sub	sp, #40	; 0x28
 8007280:	4604      	mov	r4, r0
    if (LoRaMacIsBusy() == true)
 8007282:	f002 fdc1 	bl	8009e08 <LoRaMacIsBusy>
 8007286:	2800      	cmp	r0, #0
 8007288:	d13d      	bne.n	8007306 <LmHandlerRequestClass+0x8a>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800728a:	f7ff ffe5 	bl	8007258 <LmHandlerJoinStatus>
 800728e:	2801      	cmp	r0, #1
 8007290:	d13c      	bne.n	800730c <LmHandlerRequestClass+0x90>
    mibReq.Type = MIB_DEVICE_CLASS;
 8007292:	2300      	movs	r3, #0
 8007294:	f88d 3004 	strb.w	r3, [sp, #4]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007298:	a801      	add	r0, sp, #4
 800729a:	f003 f833 	bl	800a304 <LoRaMacMibGetRequestConfirm>
 800729e:	2800      	cmp	r0, #0
 80072a0:	d137      	bne.n	8007312 <LmHandlerRequestClass+0x96>
    currentClass = mibReq.Param.Class;
 80072a2:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if( currentClass != newClass )
 80072a6:	42a3      	cmp	r3, r4
 80072a8:	d036      	beq.n	8007318 <LmHandlerRequestClass+0x9c>
        switch( newClass )
 80072aa:	2c01      	cmp	r4, #1
 80072ac:	d036      	beq.n	800731c <LmHandlerRequestClass+0xa0>
 80072ae:	2c02      	cmp	r4, #2
 80072b0:	d017      	beq.n	80072e2 <LmHandlerRequestClass+0x66>
 80072b2:	b114      	cbz	r4, 80072ba <LmHandlerRequestClass+0x3e>
 80072b4:	2000      	movs	r0, #0
}
 80072b6:	b00a      	add	sp, #40	; 0x28
 80072b8:	bd10      	pop	{r4, pc}
                if( currentClass != CLASS_A )
 80072ba:	b90b      	cbnz	r3, 80072c0 <LmHandlerRequestClass+0x44>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80072bc:	2000      	movs	r0, #0
 80072be:	e7fa      	b.n	80072b6 <LmHandlerRequestClass+0x3a>
                    mibReq.Param.Class = newClass;
 80072c0:	f88d 4008 	strb.w	r4, [sp, #8]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80072c4:	a801      	add	r0, sp, #4
 80072c6:	f003 f935 	bl	800a534 <LoRaMacMibSetRequestConfirm>
 80072ca:	bb50      	cbnz	r0, 8007322 <LmHandlerRequestClass+0xa6>
                        DisplayClassUpdate(newClass);
 80072cc:	4620      	mov	r0, r4
 80072ce:	f7ff feab 	bl	8007028 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 80072d2:	4b1a      	ldr	r3, [pc, #104]	; (800733c <LmHandlerRequestClass+0xc0>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d8:	b333      	cbz	r3, 8007328 <LmHandlerRequestClass+0xac>
                            LmHandlerCallbacks->OnClassChange( newClass );
 80072da:	4620      	mov	r0, r4
 80072dc:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80072de:	2000      	movs	r0, #0
 80072e0:	e7e9      	b.n	80072b6 <LmHandlerRequestClass+0x3a>
                if( currentClass != CLASS_A )
 80072e2:	bb1b      	cbnz	r3, 800732c <LmHandlerRequestClass+0xb0>
                    mibReq.Param.Class = newClass;
 80072e4:	f88d 4008 	strb.w	r4, [sp, #8]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 80072e8:	a801      	add	r0, sp, #4
 80072ea:	f003 f923 	bl	800a534 <LoRaMacMibSetRequestConfirm>
 80072ee:	bb00      	cbnz	r0, 8007332 <LmHandlerRequestClass+0xb6>
                        DisplayClassUpdate(newClass);
 80072f0:	4620      	mov	r0, r4
 80072f2:	f7ff fe99 	bl	8007028 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 80072f6:	4b11      	ldr	r3, [pc, #68]	; (800733c <LmHandlerRequestClass+0xc0>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072fc:	b1e3      	cbz	r3, 8007338 <LmHandlerRequestClass+0xbc>
                            LmHandlerCallbacks->OnClassChange( newClass );
 80072fe:	4620      	mov	r0, r4
 8007300:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007302:	2000      	movs	r0, #0
 8007304:	e7d7      	b.n	80072b6 <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007306:	f06f 0001 	mvn.w	r0, #1
 800730a:	e7d4      	b.n	80072b6 <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800730c:	f06f 0002 	mvn.w	r0, #2
 8007310:	e7d1      	b.n	80072b6 <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_ERROR;
 8007312:	f04f 30ff 	mov.w	r0, #4294967295
 8007316:	e7ce      	b.n	80072b6 <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007318:	2000      	movs	r0, #0
 800731a:	e7cc      	b.n	80072b6 <LmHandlerRequestClass+0x3a>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800731c:	f04f 30ff 	mov.w	r0, #4294967295
 8007320:	e7c9      	b.n	80072b6 <LmHandlerRequestClass+0x3a>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8007322:	f04f 30ff 	mov.w	r0, #4294967295
 8007326:	e7c6      	b.n	80072b6 <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007328:	2000      	movs	r0, #0
 800732a:	e7c4      	b.n	80072b6 <LmHandlerRequestClass+0x3a>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800732c:	f04f 30ff 	mov.w	r0, #4294967295
 8007330:	e7c1      	b.n	80072b6 <LmHandlerRequestClass+0x3a>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8007332:	f04f 30ff 	mov.w	r0, #4294967295
 8007336:	e7be      	b.n	80072b6 <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007338:	2000      	movs	r0, #0
 800733a:	e7bc      	b.n	80072b6 <LmHandlerRequestClass+0x3a>
 800733c:	20000634 	.word	0x20000634

08007340 <LmHandlerJoin>:
{
 8007340:	b500      	push	{lr}
 8007342:	b08f      	sub	sp, #60	; 0x3c
    if ( mode == ACTIVATION_TYPE_OTAA )
 8007344:	2802      	cmp	r0, #2
 8007346:	d021      	beq.n	800738c <LmHandlerJoin+0x4c>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8007348:	4b1d      	ldr	r3, [pc, #116]	; (80073c0 <LmHandlerJoin+0x80>)
 800734a:	2201      	movs	r2, #1
 800734c:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800734e:	4a1d      	ldr	r2, [pc, #116]	; (80073c4 <LmHandlerJoin+0x84>)
 8007350:	f992 2003 	ldrsb.w	r2, [r2, #3]
 8007354:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8007356:	2200      	movs	r2, #0
 8007358:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 800735a:	4b1b      	ldr	r3, [pc, #108]	; (80073c8 <LmHandlerJoin+0x88>)
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	b32b      	cbz	r3, 80073ac <LmHandlerJoin+0x6c>
        LoRaMacStart();
 8007360:	f002 ff62 	bl	800a228 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007364:	2301      	movs	r3, #1
 8007366:	f88d 3014 	strb.w	r3, [sp, #20]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800736a:	f88d 3018 	strb.w	r3, [sp, #24]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800736e:	a805      	add	r0, sp, #20
 8007370:	f003 f8e0 	bl	800a534 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8007374:	4b15      	ldr	r3, [pc, #84]	; (80073cc <LmHandlerJoin+0x8c>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	4811      	ldr	r0, [pc, #68]	; (80073c0 <LmHandlerJoin+0x80>)
 800737c:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800737e:	4b11      	ldr	r3, [pc, #68]	; (80073c4 <LmHandlerJoin+0x84>)
 8007380:	7858      	ldrb	r0, [r3, #1]
 8007382:	f7ff ff7b 	bl	800727c <LmHandlerRequestClass>
}
 8007386:	b00f      	add	sp, #60	; 0x3c
 8007388:	f85d fb04 	ldr.w	pc, [sp], #4
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800738c:	4b0c      	ldr	r3, [pc, #48]	; (80073c0 <LmHandlerJoin+0x80>)
 800738e:	2202      	movs	r2, #2
 8007390:	709a      	strb	r2, [r3, #2]
        LoRaMacStart();
 8007392:	f002 ff49 	bl	800a228 <LoRaMacStart>
        mlmeReq.Type = MLME_JOIN;
 8007396:	2301      	movs	r3, #1
 8007398:	f88d 3000 	strb.w	r3, [sp]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800739c:	4b09      	ldr	r3, [pc, #36]	; (80073c4 <LmHandlerJoin+0x84>)
 800739e:	78db      	ldrb	r3, [r3, #3]
 80073a0:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMlmeRequest( &mlmeReq );
 80073a4:	4668      	mov	r0, sp
 80073a6:	f003 fb3d 	bl	800aa24 <LoRaMacMlmeRequest>
 80073aa:	e7ec      	b.n	8007386 <LmHandlerJoin+0x46>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80073ac:	2327      	movs	r3, #39	; 0x27
 80073ae:	f88d 3014 	strb.w	r3, [sp, #20]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80073b2:	4b07      	ldr	r3, [pc, #28]	; (80073d0 <LmHandlerJoin+0x90>)
 80073b4:	9306      	str	r3, [sp, #24]
            LoRaMacMibSetRequestConfirm(&mibReq);
 80073b6:	a805      	add	r0, sp, #20
 80073b8:	f003 f8bc 	bl	800a534 <LoRaMacMibSetRequestConfirm>
 80073bc:	e7d0      	b.n	8007360 <LmHandlerJoin+0x20>
 80073be:	bf00      	nop
 80073c0:	20000070 	.word	0x20000070
 80073c4:	2000064c 	.word	0x2000064c
 80073c8:	20000632 	.word	0x20000632
 80073cc:	20000634 	.word	0x20000634
 80073d0:	01000300 	.word	0x01000300

080073d4 <LmHandlerSend>:
{
 80073d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073d6:	b087      	sub	sp, #28
 80073d8:	4604      	mov	r4, r0
 80073da:	460e      	mov	r6, r1
 80073dc:	4615      	mov	r5, r2
 80073de:	461f      	mov	r7, r3
    if (LoRaMacIsBusy() == true)
 80073e0:	f002 fd12 	bl	8009e08 <LoRaMacIsBusy>
 80073e4:	2800      	cmp	r0, #0
 80073e6:	d16c      	bne.n	80074c2 <LmHandlerSend+0xee>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 80073e8:	f7ff ff36 	bl	8007258 <LmHandlerJoinStatus>
 80073ec:	2801      	cmp	r0, #1
 80073ee:	d13d      	bne.n	800746c <LmHandlerSend+0x98>
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 80073f0:	4b39      	ldr	r3, [pc, #228]	; (80074d8 <LmHandlerSend+0x104>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	4798      	blx	r3
 80073f8:	b138      	cbz	r0, 800740a <LmHandlerSend+0x36>
 80073fa:	7823      	ldrb	r3, [r4, #0]
 80073fc:	4a36      	ldr	r2, [pc, #216]	; (80074d8 <LmHandlerSend+0x104>)
 80073fe:	6812      	ldr	r2, [r2, #0]
 8007400:	7812      	ldrb	r2, [r2, #0]
 8007402:	4293      	cmp	r3, r2
 8007404:	d001      	beq.n	800740a <LmHandlerSend+0x36>
 8007406:	2b00      	cmp	r3, #0
 8007408:	d15e      	bne.n	80074c8 <LmHandlerSend+0xf4>
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800740a:	4b34      	ldr	r3, [pc, #208]	; (80074dc <LmHandlerSend+0x108>)
 800740c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8007410:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8007414:	4669      	mov	r1, sp
 8007416:	7860      	ldrb	r0, [r4, #1]
 8007418:	f002 ff0e 	bl	800a238 <LoRaMacQueryTxPossible>
 800741c:	b368      	cbz	r0, 800747a <LmHandlerSend+0xa6>
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800741e:	2200      	movs	r2, #0
 8007420:	4b2f      	ldr	r3, [pc, #188]	; (80074e0 <LmHandlerSend+0x10c>)
 8007422:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8007424:	f88d 2004 	strb.w	r2, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8007428:	9203      	str	r2, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800742a:	f8ad 2010 	strh.w	r2, [sp, #16]
    TxParams.AppData = *appData;
 800742e:	4a2c      	ldr	r2, [pc, #176]	; (80074e0 <LmHandlerSend+0x10c>)
 8007430:	f102 060c 	add.w	r6, r2, #12
 8007434:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007438:	e886 0003 	stmia.w	r6, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800743c:	4b27      	ldr	r3, [pc, #156]	; (80074dc <LmHandlerSend+0x108>)
 800743e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8007442:	7113      	strb	r3, [r2, #4]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8007444:	4639      	mov	r1, r7
 8007446:	a801      	add	r0, sp, #4
 8007448:	f003 fbc2 	bl	800abd0 <LoRaMacMcpsRequest>
    if (nextTxIn != NULL)
 800744c:	b10d      	cbz	r5, 8007452 <LmHandlerSend+0x7e>
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800744e:	9b05      	ldr	r3, [sp, #20]
 8007450:	602b      	str	r3, [r5, #0]
    switch (status)
 8007452:	2811      	cmp	r0, #17
 8007454:	d832      	bhi.n	80074bc <LmHandlerSend+0xe8>
 8007456:	e8df f000 	tbb	[pc, r0]
 800745a:	3a26      	.short	0x3a26
 800745c:	31313131 	.word	0x31313131
 8007460:	31312831 	.word	0x31312831
 8007464:	31312e31 	.word	0x31312e31
 8007468:	2b3a3a3a 	.word	0x2b3a3a3a
        LmHandlerJoin(JoinParams.Mode);
 800746c:	4b1d      	ldr	r3, [pc, #116]	; (80074e4 <LmHandlerSend+0x110>)
 800746e:	7898      	ldrb	r0, [r3, #2]
 8007470:	f7ff ff66 	bl	8007340 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007474:	f06f 0002 	mvn.w	r0, #2
 8007478:	e02b      	b.n	80074d2 <LmHandlerSend+0xfe>
        TxParams.MsgType = isTxConfirmed;
 800747a:	4b19      	ldr	r3, [pc, #100]	; (80074e0 <LmHandlerSend+0x10c>)
 800747c:	709e      	strb	r6, [r3, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800747e:	7823      	ldrb	r3, [r4, #0]
 8007480:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8007484:	7863      	ldrb	r3, [r4, #1]
 8007486:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800748a:	6863      	ldr	r3, [r4, #4]
 800748c:	9303      	str	r3, [sp, #12]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 800748e:	b91e      	cbnz	r6, 8007498 <LmHandlerSend+0xc4>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 8007490:	2300      	movs	r3, #0
 8007492:	f88d 3004 	strb.w	r3, [sp, #4]
 8007496:	e7ca      	b.n	800742e <LmHandlerSend+0x5a>
            mcpsReq.Type = MCPS_CONFIRMED;
 8007498:	2301      	movs	r3, #1
 800749a:	f88d 3004 	strb.w	r3, [sp, #4]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800749e:	2308      	movs	r3, #8
 80074a0:	f88d 3013 	strb.w	r3, [sp, #19]
 80074a4:	e7c3      	b.n	800742e <LmHandlerSend+0x5a>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 80074a6:	2000      	movs	r0, #0
 80074a8:	e013      	b.n	80074d2 <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80074aa:	f06f 0002 	mvn.w	r0, #2
            break;
 80074ae:	e010      	b.n	80074d2 <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 80074b0:	f06f 0004 	mvn.w	r0, #4
            break;
 80074b4:	e00d      	b.n	80074d2 <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 80074b6:	f06f 0005 	mvn.w	r0, #5
            break;
 80074ba:	e00a      	b.n	80074d2 <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80074bc:	f04f 30ff 	mov.w	r0, #4294967295
            break;
 80074c0:	e007      	b.n	80074d2 <LmHandlerSend+0xfe>
        return LORAMAC_HANDLER_BUSY_ERROR;
 80074c2:	f06f 0001 	mvn.w	r0, #1
 80074c6:	e004      	b.n	80074d2 <LmHandlerSend+0xfe>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 80074c8:	f06f 0003 	mvn.w	r0, #3
 80074cc:	e001      	b.n	80074d2 <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 80074ce:	f06f 0001 	mvn.w	r0, #1
}
 80074d2:	b007      	add	sp, #28
 80074d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074d6:	bf00      	nop
 80074d8:	20000638 	.word	0x20000638
 80074dc:	2000064c 	.word	0x2000064c
 80074e0:	20000680 	.word	0x20000680
 80074e4:	20000070 	.word	0x20000070

080074e8 <MlmeIndication>:
{
 80074e8:	b510      	push	{r4, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 80074ee:	4b17      	ldr	r3, [pc, #92]	; (800754c <MlmeIndication+0x64>)
 80074f0:	2200      	movs	r2, #0
 80074f2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 80074f4:	7842      	ldrb	r2, [r0, #1]
 80074f6:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 80074f8:	f9b1 0000 	ldrsh.w	r0, [r1]
 80074fc:	70d8      	strb	r0, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 80074fe:	f991 0002 	ldrsb.w	r0, [r1, #2]
 8007502:	7118      	strb	r0, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 8007504:	f991 1003 	ldrsb.w	r1, [r1, #3]
 8007508:	7319      	strb	r1, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800750a:	2a0e      	cmp	r2, #14
 800750c:	d005      	beq.n	800751a <MlmeIndication+0x32>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800750e:	4b10      	ldr	r3, [pc, #64]	; (8007550 <MlmeIndication+0x68>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	490d      	ldr	r1, [pc, #52]	; (800754c <MlmeIndication+0x64>)
 8007516:	2000      	movs	r0, #0
 8007518:	4798      	blx	r3
    switch( mlmeIndication->MlmeIndication )
 800751a:	7823      	ldrb	r3, [r4, #0]
 800751c:	2b07      	cmp	r3, #7
 800751e:	d001      	beq.n	8007524 <MlmeIndication+0x3c>
}
 8007520:	b002      	add	sp, #8
 8007522:	bd10      	pop	{r4, pc}
            LmHandlerAppData_t appData =
 8007524:	2300      	movs	r3, #0
 8007526:	f88d 3000 	strb.w	r3, [sp]
 800752a:	f88d 3001 	strb.w	r3, [sp, #1]
 800752e:	9301      	str	r3, [sp, #4]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 8007530:	4b08      	ldr	r3, [pc, #32]	; (8007554 <MlmeIndication+0x6c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	4798      	blx	r3
 8007538:	2800      	cmp	r0, #0
 800753a:	d1f1      	bne.n	8007520 <MlmeIndication+0x38>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 800753c:	2301      	movs	r3, #1
 800753e:	2200      	movs	r2, #0
 8007540:	4611      	mov	r1, r2
 8007542:	4668      	mov	r0, sp
 8007544:	f7ff ff46 	bl	80073d4 <LmHandlerSend>
}
 8007548:	e7ea      	b.n	8007520 <MlmeIndication+0x38>
 800754a:	bf00      	nop
 800754c:	20000080 	.word	0x20000080
 8007550:	20000634 	.word	0x20000634
 8007554:	20000638 	.word	0x20000638

08007558 <LmHandlerGetCurrentClass>:
    if (deviceClass == NULL)
 8007558:	b170      	cbz	r0, 8007578 <LmHandlerGetCurrentClass+0x20>
{
 800755a:	b510      	push	{r4, lr}
 800755c:	b08a      	sub	sp, #40	; 0x28
 800755e:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 8007560:	2300      	movs	r3, #0
 8007562:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 8007566:	a801      	add	r0, sp, #4
 8007568:	f002 fecc 	bl	800a304 <LoRaMacMibGetRequestConfirm>
 800756c:	b938      	cbnz	r0, 800757e <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 800756e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8007572:	7023      	strb	r3, [r4, #0]
}
 8007574:	b00a      	add	sp, #40	; 0x28
 8007576:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8007578:	f04f 30ff 	mov.w	r0, #4294967295
}
 800757c:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800757e:	f04f 30ff 	mov.w	r0, #4294967295
 8007582:	e7f7      	b.n	8007574 <LmHandlerGetCurrentClass+0x1c>

08007584 <McpsIndication>:
{
 8007584:	b530      	push	{r4, r5, lr}
 8007586:	b087      	sub	sp, #28
 8007588:	460b      	mov	r3, r1
    DeviceClass_t deviceClass = CLASS_A;
 800758a:	2200      	movs	r2, #0
 800758c:	f88d 200f 	strb.w	r2, [sp, #15]
    RxParams.IsMcpsIndication = 1;
 8007590:	4922      	ldr	r1, [pc, #136]	; (800761c <McpsIndication+0x98>)
 8007592:	2201      	movs	r2, #1
 8007594:	700a      	strb	r2, [r1, #0]
    RxParams.Status = mcpsIndication->Status;
 8007596:	7842      	ldrb	r2, [r0, #1]
 8007598:	704a      	strb	r2, [r1, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800759a:	bb62      	cbnz	r2, 80075f6 <McpsIndication+0x72>
 800759c:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800759e:	f990 2004 	ldrsb.w	r2, [r0, #4]
 80075a2:	708a      	strb	r2, [r1, #2]
    RxParams.Rssi = RxStatus->Rssi;
 80075a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80075a8:	70ca      	strb	r2, [r1, #3]
    RxParams.Snr = RxStatus->Snr;
 80075aa:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80075ae:	710a      	strb	r2, [r1, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 80075b0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80075b4:	730b      	strb	r3, [r1, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 80075b6:	6903      	ldr	r3, [r0, #16]
 80075b8:	608b      	str	r3, [r1, #8]
    appData.Port = mcpsIndication->Port;
 80075ba:	78c3      	ldrb	r3, [r0, #3]
 80075bc:	f88d 3010 	strb.w	r3, [sp, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 80075c0:	7b03      	ldrb	r3, [r0, #12]
 80075c2:	f88d 3011 	strb.w	r3, [sp, #17]
    appData.Buffer = mcpsIndication->Buffer;
 80075c6:	6883      	ldr	r3, [r0, #8]
 80075c8:	9305      	str	r3, [sp, #20]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 80075ca:	4d15      	ldr	r5, [pc, #84]	; (8007620 <McpsIndication+0x9c>)
 80075cc:	682b      	ldr	r3, [r5, #0]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d0:	a804      	add	r0, sp, #16
 80075d2:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 80075d4:	682b      	ldr	r3, [r5, #0]
 80075d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d8:	b113      	cbz	r3, 80075e0 <McpsIndication+0x5c>
 80075da:	7e22      	ldrb	r2, [r4, #24]
 80075dc:	b102      	cbz	r2, 80075e0 <McpsIndication+0x5c>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 80075de:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 80075e0:	4621      	mov	r1, r4
 80075e2:	2001      	movs	r0, #1
 80075e4:	f7ff fcac 	bl	8006f40 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass(&deviceClass);
 80075e8:	f10d 000f 	add.w	r0, sp, #15
 80075ec:	f7ff ffb4 	bl	8007558 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 80075f0:	7963      	ldrb	r3, [r4, #5]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d001      	beq.n	80075fa <McpsIndication+0x76>
}
 80075f6:	b007      	add	sp, #28
 80075f8:	bd30      	pop	{r4, r5, pc}
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 80075fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1f9      	bne.n	80075f6 <McpsIndication+0x72>
        LmHandlerAppData_t appData =
 8007602:	2100      	movs	r1, #0
 8007604:	f88d 1004 	strb.w	r1, [sp, #4]
 8007608:	f88d 1005 	strb.w	r1, [sp, #5]
 800760c:	9102      	str	r1, [sp, #8]
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800760e:	2301      	movs	r3, #1
 8007610:	460a      	mov	r2, r1
 8007612:	a801      	add	r0, sp, #4
 8007614:	f7ff fede 	bl	80073d4 <LmHandlerSend>
 8007618:	e7ed      	b.n	80075f6 <McpsIndication+0x72>
 800761a:	bf00      	nop
 800761c:	20000080 	.word	0x20000080
 8007620:	20000634 	.word	0x20000634

08007624 <LmHandlerGetTxDatarate>:
    if (txDatarate == NULL)
 8007624:	b180      	cbz	r0, 8007648 <LmHandlerGetTxDatarate+0x24>
{
 8007626:	b510      	push	{r4, lr}
 8007628:	b08a      	sub	sp, #40	; 0x28
 800762a:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 800762c:	231f      	movs	r3, #31
 800762e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 8007632:	a801      	add	r0, sp, #4
 8007634:	f002 fe66 	bl	800a304 <LoRaMacMibGetRequestConfirm>
 8007638:	b948      	cbnz	r0, 800764e <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 800763a:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 800763e:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8007640:	4a04      	ldr	r2, [pc, #16]	; (8007654 <LmHandlerGetTxDatarate+0x30>)
 8007642:	70d3      	strb	r3, [r2, #3]
}
 8007644:	b00a      	add	sp, #40	; 0x28
 8007646:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8007648:	f04f 30ff 	mov.w	r0, #4294967295
}
 800764c:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800764e:	f04f 30ff 	mov.w	r0, #4294967295
 8007652:	e7f7      	b.n	8007644 <LmHandlerGetTxDatarate+0x20>
 8007654:	2000064c 	.word	0x2000064c

08007658 <MlmeConfirm>:
{
 8007658:	b510      	push	{r4, lr}
 800765a:	b08a      	sub	sp, #40	; 0x28
 800765c:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 800765e:	481d      	ldr	r0, [pc, #116]	; (80076d4 <MlmeConfirm+0x7c>)
 8007660:	2300      	movs	r3, #0
 8007662:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mlmeConfirm->Status;
 8007664:	7863      	ldrb	r3, [r4, #1]
 8007666:	7043      	strb	r3, [r0, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8007668:	4b1b      	ldr	r3, [pc, #108]	; (80076d8 <MlmeConfirm+0x80>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8007670:	4621      	mov	r1, r4
 8007672:	2002      	movs	r0, #2
 8007674:	f7ff fc64 	bl	8006f40 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 8007678:	7823      	ldrb	r3, [r4, #0]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d003      	beq.n	8007686 <MlmeConfirm+0x2e>
 800767e:	2b04      	cmp	r3, #4
 8007680:	d020      	beq.n	80076c4 <MlmeConfirm+0x6c>
}
 8007682:	b00a      	add	sp, #40	; 0x28
 8007684:	bd10      	pop	{r4, pc}
            mibReq.Type = MIB_DEV_ADDR;
 8007686:	2306      	movs	r3, #6
 8007688:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800768c:	a801      	add	r0, sp, #4
 800768e:	f002 fe39 	bl	800a304 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8007692:	9a02      	ldr	r2, [sp, #8]
 8007694:	4b11      	ldr	r3, [pc, #68]	; (80076dc <MlmeConfirm+0x84>)
 8007696:	615a      	str	r2, [r3, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8007698:	4811      	ldr	r0, [pc, #68]	; (80076e0 <MlmeConfirm+0x88>)
 800769a:	f7ff ffc3 	bl	8007624 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800769e:	7863      	ldrb	r3, [r4, #1]
 80076a0:	b143      	cbz	r3, 80076b4 <MlmeConfirm+0x5c>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80076a2:	4b0f      	ldr	r3, [pc, #60]	; (80076e0 <MlmeConfirm+0x88>)
 80076a4:	22ff      	movs	r2, #255	; 0xff
 80076a6:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80076a8:	4b0b      	ldr	r3, [pc, #44]	; (80076d8 <MlmeConfirm+0x80>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	69db      	ldr	r3, [r3, #28]
 80076ae:	480c      	ldr	r0, [pc, #48]	; (80076e0 <MlmeConfirm+0x88>)
 80076b0:	4798      	blx	r3
        break;
 80076b2:	e7e6      	b.n	8007682 <MlmeConfirm+0x2a>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80076b4:	4b0a      	ldr	r3, [pc, #40]	; (80076e0 <MlmeConfirm+0x88>)
 80076b6:	2200      	movs	r2, #0
 80076b8:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 80076ba:	4b0a      	ldr	r3, [pc, #40]	; (80076e4 <MlmeConfirm+0x8c>)
 80076bc:	7858      	ldrb	r0, [r3, #1]
 80076be:	f7ff fddd 	bl	800727c <LmHandlerRequestClass>
 80076c2:	e7f1      	b.n	80076a8 <MlmeConfirm+0x50>
            RxParams.LinkCheck = true;
 80076c4:	4b08      	ldr	r3, [pc, #32]	; (80076e8 <MlmeConfirm+0x90>)
 80076c6:	2201      	movs	r2, #1
 80076c8:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 80076ca:	7a22      	ldrb	r2, [r4, #8]
 80076cc:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 80076ce:	7a62      	ldrb	r2, [r4, #9]
 80076d0:	73da      	strb	r2, [r3, #15]
}
 80076d2:	e7d6      	b.n	8007682 <MlmeConfirm+0x2a>
 80076d4:	20000680 	.word	0x20000680
 80076d8:	20000634 	.word	0x20000634
 80076dc:	20000058 	.word	0x20000058
 80076e0:	20000070 	.word	0x20000070
 80076e4:	2000064c 	.word	0x2000064c
 80076e8:	20000080 	.word	0x20000080

080076ec <LmHandlerPackageRegister>:
    switch( id )
 80076ec:	b9e0      	cbnz	r0, 8007728 <LmHandlerPackageRegister+0x3c>
{
 80076ee:	b538      	push	{r3, r4, r5, lr}
 80076f0:	460c      	mov	r4, r1
 80076f2:	4605      	mov	r5, r0
            package = LmhpCompliancePackageFactory( );
 80076f4:	f000 fa20 	bl	8007b38 <LmhpCompliancePackageFactory>
    if( package != NULL )
 80076f8:	b198      	cbz	r0, 8007722 <LmHandlerPackageRegister+0x36>
        LmHandlerPackages[id] = package;
 80076fa:	4a0d      	ldr	r2, [pc, #52]	; (8007730 <LmHandlerPackageRegister+0x44>)
 80076fc:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8007700:	4a0c      	ldr	r2, [pc, #48]	; (8007734 <LmHandlerPackageRegister+0x48>)
 8007702:	6242      	str	r2, [r0, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8007704:	4a0c      	ldr	r2, [pc, #48]	; (8007738 <LmHandlerPackageRegister+0x4c>)
 8007706:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8007708:	4a0c      	ldr	r2, [pc, #48]	; (800773c <LmHandlerPackageRegister+0x50>)
 800770a:	62c2      	str	r2, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800770c:	4a0c      	ldr	r2, [pc, #48]	; (8007740 <LmHandlerPackageRegister+0x54>)
 800770e:	6812      	ldr	r2, [r2, #0]
 8007710:	6912      	ldr	r2, [r2, #16]
 8007712:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8007714:	6843      	ldr	r3, [r0, #4]
 8007716:	22f2      	movs	r2, #242	; 0xf2
 8007718:	490a      	ldr	r1, [pc, #40]	; (8007744 <LmHandlerPackageRegister+0x58>)
 800771a:	4620      	mov	r0, r4
 800771c:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 800771e:	2000      	movs	r0, #0
}
 8007720:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_HANDLER_ERROR;
 8007722:	f04f 30ff 	mov.w	r0, #4294967295
 8007726:	e7fb      	b.n	8007720 <LmHandlerPackageRegister+0x34>
 8007728:	f04f 30ff 	mov.w	r0, #4294967295
}
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	20000638 	.word	0x20000638
 8007734:	08007341 	.word	0x08007341
 8007738:	080073d5 	.word	0x080073d5
 800773c:	0800706d 	.word	0x0800706d
 8007740:	20000634 	.word	0x20000634
 8007744:	20000540 	.word	0x20000540

08007748 <LmHandlerInit>:
{
 8007748:	b508      	push	{r3, lr}
    LmHandlerCallbacks = handlerCallbacks;
 800774a:	4b0f      	ldr	r3, [pc, #60]	; (8007788 <LmHandlerInit+0x40>)
 800774c:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800774e:	4b0f      	ldr	r3, [pc, #60]	; (800778c <LmHandlerInit+0x44>)
 8007750:	4a0f      	ldr	r2, [pc, #60]	; (8007790 <LmHandlerInit+0x48>)
 8007752:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8007754:	4a0f      	ldr	r2, [pc, #60]	; (8007794 <LmHandlerInit+0x4c>)
 8007756:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8007758:	4a0f      	ldr	r2, [pc, #60]	; (8007798 <LmHandlerInit+0x50>)
 800775a:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800775c:	4a0f      	ldr	r2, [pc, #60]	; (800779c <LmHandlerInit+0x54>)
 800775e:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8007760:	6802      	ldr	r2, [r0, #0]
 8007762:	4b0f      	ldr	r3, [pc, #60]	; (80077a0 <LmHandlerInit+0x58>)
 8007764:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 8007766:	6842      	ldr	r2, [r0, #4]
 8007768:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800776a:	6882      	ldr	r2, [r0, #8]
 800776c:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800776e:	4a0d      	ldr	r2, [pc, #52]	; (80077a4 <LmHandlerInit+0x5c>)
 8007770:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8007772:	6902      	ldr	r2, [r0, #16]
 8007774:	611a      	str	r2, [r3, #16]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8007776:	490c      	ldr	r1, [pc, #48]	; (80077a8 <LmHandlerInit+0x60>)
 8007778:	2000      	movs	r0, #0
 800777a:	f7ff ffb7 	bl	80076ec <LmHandlerPackageRegister>
 800777e:	b900      	cbnz	r0, 8007782 <LmHandlerInit+0x3a>
}
 8007780:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_ERROR;
 8007782:	f04f 30ff 	mov.w	r0, #4294967295
 8007786:	e7fb      	b.n	8007780 <LmHandlerInit+0x38>
 8007788:	20000634 	.word	0x20000634
 800778c:	20000670 	.word	0x20000670
 8007790:	08006fad 	.word	0x08006fad
 8007794:	08007585 	.word	0x08007585
 8007798:	08007659 	.word	0x08007659
 800779c:	080074e9 	.word	0x080074e9
 80077a0:	2000065c 	.word	0x2000065c
 80077a4:	0800be15 	.word	0x0800be15
 80077a8:	20000074 	.word	0x20000074

080077ac <LmhpComplianceInit>:
    return &LmhpCompliancePackage;
}

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 80077ac:	4603      	mov	r3, r0
 80077ae:	b140      	cbz	r0, 80077c2 <LmhpComplianceInit+0x16>
 80077b0:	b139      	cbz	r1, 80077c2 <LmhpComplianceInit+0x16>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 80077b2:	4807      	ldr	r0, [pc, #28]	; (80077d0 <LmhpComplianceInit+0x24>)
 80077b4:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 80077b6:	4b07      	ldr	r3, [pc, #28]	; (80077d4 <LmhpComplianceInit+0x28>)
 80077b8:	6099      	str	r1, [r3, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 80077ba:	715a      	strb	r2, [r3, #5]
        ComplianceTestState.Initialized = true;
 80077bc:	2201      	movs	r2, #1
 80077be:	701a      	strb	r2, [r3, #0]
 80077c0:	4770      	bx	lr
    }
    else
    {
        LmhpComplianceParams = NULL;
 80077c2:	2300      	movs	r3, #0
 80077c4:	4a02      	ldr	r2, [pc, #8]	; (80077d0 <LmhpComplianceInit+0x24>)
 80077c6:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 80077c8:	4a02      	ldr	r2, [pc, #8]	; (80077d4 <LmhpComplianceInit+0x28>)
 80077ca:	7013      	strb	r3, [r2, #0]
    }
}
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	200006c4 	.word	0x200006c4
 80077d4:	20000698 	.word	0x20000698

080077d8 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 80077d8:	4b01      	ldr	r3, [pc, #4]	; (80077e0 <LmhpComplianceIsInitialized+0x8>)
 80077da:	7818      	ldrb	r0, [r3, #0]
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	20000698 	.word	0x20000698

080077e4 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 80077e4:	4b02      	ldr	r3, [pc, #8]	; (80077f0 <LmhpComplianceIsRunning+0xc>)
 80077e6:	7818      	ldrb	r0, [r3, #0]
 80077e8:	b100      	cbz	r0, 80077ec <LmhpComplianceIsRunning+0x8>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 80077ea:	7858      	ldrb	r0, [r3, #1]
}
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	20000698 	.word	0x20000698

080077f4 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
    if (ComplianceTestState.Initialized == false)
 80077f4:	4b08      	ldr	r3, [pc, #32]	; (8007818 <LmhpComplianceOnMcpsConfirm+0x24>)
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	b12b      	cbz	r3, 8007806 <LmhpComplianceOnMcpsConfirm+0x12>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 80077fa:	4b07      	ldr	r3, [pc, #28]	; (8007818 <LmhpComplianceOnMcpsConfirm+0x24>)
 80077fc:	785b      	ldrb	r3, [r3, #1]
 80077fe:	b113      	cbz	r3, 8007806 <LmhpComplianceOnMcpsConfirm+0x12>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8007800:	7803      	ldrb	r3, [r0, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 8007802:	2b01      	cmp	r3, #1
 8007804:	d000      	beq.n	8007808 <LmhpComplianceOnMcpsConfirm+0x14>
        (mcpsConfirm->AckReceived != 0))
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
    }
}
 8007806:	4770      	bx	lr
        (mcpsConfirm->AckReceived != 0))
 8007808:	7903      	ldrb	r3, [r0, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0fb      	beq.n	8007806 <LmhpComplianceOnMcpsConfirm+0x12>
        ComplianceTestState.DownLinkCounter++;
 800780e:	4a02      	ldr	r2, [pc, #8]	; (8007818 <LmhpComplianceOnMcpsConfirm+0x24>)
 8007810:	8993      	ldrh	r3, [r2, #12]
 8007812:	3301      	adds	r3, #1
 8007814:	8193      	strh	r3, [r2, #12]
 8007816:	e7f6      	b.n	8007806 <LmhpComplianceOnMcpsConfirm+0x12>
 8007818:	20000698 	.word	0x20000698

0800781c <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
    if( ComplianceTestState.Initialized == false )
 800781c:	4b08      	ldr	r3, [pc, #32]	; (8007840 <LmhpComplianceOnMlmeConfirm+0x24>)
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	b12b      	cbz	r3, 800782e <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8007822:	4b07      	ldr	r3, [pc, #28]	; (8007840 <LmhpComplianceOnMlmeConfirm+0x24>)
 8007824:	785b      	ldrb	r3, [r3, #1]
 8007826:	b113      	cbz	r3, 800782e <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8007828:	7803      	ldrb	r3, [r0, #0]
 800782a:	2b04      	cmp	r3, #4
 800782c:	d000      	beq.n	8007830 <LmhpComplianceOnMlmeConfirm+0x14>
    {
        ComplianceTestState.LinkCheck = true;
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
    }
}
 800782e:	4770      	bx	lr
        ComplianceTestState.LinkCheck = true;
 8007830:	4b03      	ldr	r3, [pc, #12]	; (8007840 <LmhpComplianceOnMlmeConfirm+0x24>)
 8007832:	2201      	movs	r2, #1
 8007834:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8007836:	7a02      	ldrb	r2, [r0, #8]
 8007838:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800783a:	7a42      	ldrb	r2, [r0, #9]
 800783c:	741a      	strb	r2, [r3, #16]
 800783e:	e7f6      	b.n	800782e <LmhpComplianceOnMlmeConfirm+0x12>
 8007840:	20000698 	.word	0x20000698

08007844 <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 8007844:	4770      	bx	lr
	...

08007848 <LmhpComplianceTxProcess>:
    if( ComplianceTestState.Initialized == false )
 8007848:	4b23      	ldr	r3, [pc, #140]	; (80078d8 <LmhpComplianceTxProcess+0x90>)
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d03e      	beq.n	80078ce <LmhpComplianceTxProcess+0x86>
    if( ComplianceTestState.IsRunning == false )
 8007850:	4b21      	ldr	r3, [pc, #132]	; (80078d8 <LmhpComplianceTxProcess+0x90>)
 8007852:	785b      	ldrb	r3, [r3, #1]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d03d      	beq.n	80078d4 <LmhpComplianceTxProcess+0x8c>
{
 8007858:	b530      	push	{r4, r5, lr}
 800785a:	b083      	sub	sp, #12
    if( ComplianceTestState.LinkCheck == true )
 800785c:	4b1e      	ldr	r3, [pc, #120]	; (80078d8 <LmhpComplianceTxProcess+0x90>)
 800785e:	7b9b      	ldrb	r3, [r3, #14]
 8007860:	b313      	cbz	r3, 80078a8 <LmhpComplianceTxProcess+0x60>
        ComplianceTestState.LinkCheck = false;
 8007862:	4b1d      	ldr	r3, [pc, #116]	; (80078d8 <LmhpComplianceTxProcess+0x90>)
 8007864:	2200      	movs	r2, #0
 8007866:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 8007868:	2203      	movs	r2, #3
 800786a:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800786c:	689a      	ldr	r2, [r3, #8]
 800786e:	2105      	movs	r1, #5
 8007870:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 8007872:	7bd9      	ldrb	r1, [r3, #15]
 8007874:	7051      	strb	r1, [r2, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8007876:	7c19      	ldrb	r1, [r3, #16]
 8007878:	7091      	strb	r1, [r2, #2]
        ComplianceTestState.State = 1;
 800787a:	2201      	movs	r2, #1
 800787c:	709a      	strb	r2, [r3, #2]
    LmHandlerAppData_t appData =
 800787e:	23e0      	movs	r3, #224	; 0xe0
 8007880:	f88d 3000 	strb.w	r3, [sp]
        .BufferSize = ComplianceTestState.DataBufferSize,
 8007884:	4c14      	ldr	r4, [pc, #80]	; (80078d8 <LmhpComplianceTxProcess+0x90>)
 8007886:	79a3      	ldrb	r3, [r4, #6]
    LmHandlerAppData_t appData =
 8007888:	f88d 3001 	strb.w	r3, [sp, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800788c:	68a3      	ldr	r3, [r4, #8]
    LmHandlerAppData_t appData =
 800788e:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 8007890:	4812      	ldr	r0, [pc, #72]	; (80078dc <LmhpComplianceTxProcess+0x94>)
 8007892:	f00f fbb7 	bl	8017004 <UTIL_TIMER_Start>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 8007896:	4b12      	ldr	r3, [pc, #72]	; (80078e0 <LmhpComplianceTxProcess+0x98>)
 8007898:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800789a:	2301      	movs	r3, #1
 800789c:	2200      	movs	r2, #0
 800789e:	78e1      	ldrb	r1, [r4, #3]
 80078a0:	4668      	mov	r0, sp
 80078a2:	47a8      	blx	r5
}
 80078a4:	b003      	add	sp, #12
 80078a6:	bd30      	pop	{r4, r5, pc}
        switch( ComplianceTestState.State )
 80078a8:	4b0b      	ldr	r3, [pc, #44]	; (80078d8 <LmhpComplianceTxProcess+0x90>)
 80078aa:	789b      	ldrb	r3, [r3, #2]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d005      	beq.n	80078bc <LmhpComplianceTxProcess+0x74>
 80078b0:	2b04      	cmp	r3, #4
 80078b2:	d1e4      	bne.n	800787e <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.State = 1;
 80078b4:	4b08      	ldr	r3, [pc, #32]	; (80078d8 <LmhpComplianceTxProcess+0x90>)
 80078b6:	2201      	movs	r2, #1
 80078b8:	709a      	strb	r2, [r3, #2]
            break;
 80078ba:	e7e0      	b.n	800787e <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.DataBufferSize = 2;
 80078bc:	4b06      	ldr	r3, [pc, #24]	; (80078d8 <LmhpComplianceTxProcess+0x90>)
 80078be:	2202      	movs	r2, #2
 80078c0:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 80078c2:	899a      	ldrh	r2, [r3, #12]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	0a11      	lsrs	r1, r2, #8
 80078c8:	7019      	strb	r1, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 80078ca:	705a      	strb	r2, [r3, #1]
            break;
 80078cc:	e7d7      	b.n	800787e <LmhpComplianceTxProcess+0x36>
        return LORAMAC_HANDLER_ERROR;
 80078ce:	f04f 30ff 	mov.w	r0, #4294967295
 80078d2:	4770      	bx	lr
        return LORAMAC_HANDLER_SUCCESS;
 80078d4:	2000      	movs	r0, #0
}
 80078d6:	4770      	bx	lr
 80078d8:	20000698 	.word	0x20000698
 80078dc:	200006ac 	.word	0x200006ac
 80078e0:	20000090 	.word	0x20000090

080078e4 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 80078e4:	4b8d      	ldr	r3, [pc, #564]	; (8007b1c <LmhpComplianceOnMcpsIndication+0x238>)
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f000 8116 	beq.w	8007b1a <LmhpComplianceOnMcpsIndication+0x236>
    if( mcpsIndication->RxData == false )
 80078ee:	7b43      	ldrb	r3, [r0, #13]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 8112 	beq.w	8007b1a <LmhpComplianceOnMcpsIndication+0x236>
    if ((ComplianceTestState.IsRunning == true) &&
 80078f6:	4b89      	ldr	r3, [pc, #548]	; (8007b1c <LmhpComplianceOnMcpsIndication+0x238>)
 80078f8:	785b      	ldrb	r3, [r3, #1]
 80078fa:	b12b      	cbz	r3, 8007908 <LmhpComplianceOnMcpsIndication+0x24>
        (mcpsIndication->AckReceived == 0))
 80078fc:	7b82      	ldrb	r2, [r0, #14]
    if ((ComplianceTestState.IsRunning == true) &&
 80078fe:	b91a      	cbnz	r2, 8007908 <LmhpComplianceOnMcpsIndication+0x24>
        ComplianceTestState.DownLinkCounter++;
 8007900:	4986      	ldr	r1, [pc, #536]	; (8007b1c <LmhpComplianceOnMcpsIndication+0x238>)
 8007902:	898a      	ldrh	r2, [r1, #12]
 8007904:	3201      	adds	r2, #1
 8007906:	818a      	strh	r2, [r1, #12]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8007908:	78c2      	ldrb	r2, [r0, #3]
 800790a:	2ae0      	cmp	r2, #224	; 0xe0
 800790c:	f040 8105 	bne.w	8007b1a <LmhpComplianceOnMcpsIndication+0x236>
{
 8007910:	b510      	push	{r4, lr}
 8007912:	b08c      	sub	sp, #48	; 0x30
    if( ComplianceTestState.IsRunning == false )
 8007914:	2b00      	cmp	r3, #0
 8007916:	d140      	bne.n	800799a <LmhpComplianceOnMcpsIndication+0xb6>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8007918:	7b03      	ldrb	r3, [r0, #12]
 800791a:	2b04      	cmp	r3, #4
 800791c:	d001      	beq.n	8007922 <LmhpComplianceOnMcpsIndication+0x3e>
}
 800791e:	b00c      	add	sp, #48	; 0x30
 8007920:	bd10      	pop	{r4, pc}
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8007922:	6883      	ldr	r3, [r0, #8]
 8007924:	781a      	ldrb	r2, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8007926:	2a01      	cmp	r2, #1
 8007928:	d1f9      	bne.n	800791e <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800792a:	785a      	ldrb	r2, [r3, #1]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800792c:	2a01      	cmp	r2, #1
 800792e:	d1f6      	bne.n	800791e <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8007930:	789a      	ldrb	r2, [r3, #2]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8007932:	2a01      	cmp	r2, #1
 8007934:	d1f3      	bne.n	800791e <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 8007936:	78db      	ldrb	r3, [r3, #3]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8007938:	2b01      	cmp	r3, #1
 800793a:	d1f0      	bne.n	800791e <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 800793c:	4b77      	ldr	r3, [pc, #476]	; (8007b1c <LmhpComplianceOnMcpsIndication+0x238>)
 800793e:	2400      	movs	r4, #0
 8007940:	70dc      	strb	r4, [r3, #3]
            ComplianceTestState.Port = 224;
 8007942:	22e0      	movs	r2, #224	; 0xe0
 8007944:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 8007946:	2202      	movs	r2, #2
 8007948:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800794a:	819c      	strh	r4, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800794c:	739c      	strb	r4, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800794e:	73dc      	strb	r4, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 8007950:	741c      	strb	r4, [r3, #16]
            ComplianceTestState.IsRunning = true;
 8007952:	2201      	movs	r2, #1
 8007954:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 8007956:	709a      	strb	r2, [r3, #2]
            mibReq.Type = MIB_ADR;
 8007958:	2304      	movs	r3, #4
 800795a:	f88d 300c 	strb.w	r3, [sp, #12]
            mibReq.Param.AdrEnable = true;
 800795e:	f88d 2010 	strb.w	r2, [sp, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007962:	a803      	add	r0, sp, #12
 8007964:	f002 fde6 	bl	800a534 <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 8007968:	4620      	mov	r0, r4
 800796a:	f003 f9eb 	bl	800ad44 <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800796e:	4b6c      	ldr	r3, [pc, #432]	; (8007b20 <LmhpComplianceOnMcpsIndication+0x23c>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	b103      	cbz	r3, 8007978 <LmhpComplianceOnMcpsIndication+0x94>
                LmhpComplianceParams->StopPeripherals( );
 8007976:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8007978:	4c6a      	ldr	r4, [pc, #424]	; (8007b24 <LmhpComplianceOnMcpsIndication+0x240>)
 800797a:	2200      	movs	r2, #0
 800797c:	9200      	str	r2, [sp, #0]
 800797e:	4b6a      	ldr	r3, [pc, #424]	; (8007b28 <LmhpComplianceOnMcpsIndication+0x244>)
 8007980:	f04f 31ff 	mov.w	r1, #4294967295
 8007984:	4620      	mov	r0, r4
 8007986:	f00f fa7d 	bl	8016e84 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800798a:	f241 3188 	movw	r1, #5000	; 0x1388
 800798e:	4620      	mov	r0, r4
 8007990:	f00f fb7e 	bl	8017090 <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 8007994:	f7ff ff58 	bl	8007848 <LmhpComplianceTxProcess>
 8007998:	e7c1      	b.n	800791e <LmhpComplianceOnMcpsIndication+0x3a>
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800799a:	6882      	ldr	r2, [r0, #8]
 800799c:	7813      	ldrb	r3, [r2, #0]
 800799e:	495f      	ldr	r1, [pc, #380]	; (8007b1c <LmhpComplianceOnMcpsIndication+0x238>)
 80079a0:	708b      	strb	r3, [r1, #2]
        switch( ComplianceTestState.State )
 80079a2:	2b0a      	cmp	r3, #10
 80079a4:	d8bb      	bhi.n	800791e <LmhpComplianceOnMcpsIndication+0x3a>
 80079a6:	e8df f003 	tbb	[pc, r3]
 80079aa:	2206      	.short	0x2206
 80079ac:	47312b26 	.word	0x47312b26
 80079b0:	a49d6d4e 	.word	0xa49d6d4e
 80079b4:	ae          	.byte	0xae
 80079b5:	00          	.byte	0x00
                TimerStop( &ComplianceTxNextPacketTimer );
 80079b6:	485b      	ldr	r0, [pc, #364]	; (8007b24 <LmhpComplianceOnMcpsIndication+0x240>)
 80079b8:	f00f fac2 	bl	8016f40 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 80079bc:	4b57      	ldr	r3, [pc, #348]	; (8007b1c <LmhpComplianceOnMcpsIndication+0x238>)
 80079be:	2200      	movs	r2, #0
 80079c0:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 80079c2:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 80079c4:	2304      	movs	r3, #4
 80079c6:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80079ca:	4c55      	ldr	r4, [pc, #340]	; (8007b20 <LmhpComplianceOnMcpsIndication+0x23c>)
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80079d4:	a803      	add	r0, sp, #12
 80079d6:	f002 fdad 	bl	800a534 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	7858      	ldrb	r0, [r3, #1]
 80079de:	f003 f9b1 	bl	800ad44 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d099      	beq.n	800791e <LmhpComplianceOnMcpsIndication+0x3a>
                    LmhpComplianceParams->StartPeripherals( );
 80079ea:	4798      	blx	r3
            break;
 80079ec:	e797      	b.n	800791e <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.DataBufferSize = 2;
 80079ee:	4b4b      	ldr	r3, [pc, #300]	; (8007b1c <LmhpComplianceOnMcpsIndication+0x238>)
 80079f0:	2202      	movs	r2, #2
 80079f2:	719a      	strb	r2, [r3, #6]
            break;
 80079f4:	e793      	b.n	800791e <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = true;
 80079f6:	4b49      	ldr	r3, [pc, #292]	; (8007b1c <LmhpComplianceOnMcpsIndication+0x238>)
 80079f8:	2201      	movs	r2, #1
 80079fa:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 80079fc:	709a      	strb	r2, [r3, #2]
            break;
 80079fe:	e78e      	b.n	800791e <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 8007a00:	4b46      	ldr	r3, [pc, #280]	; (8007b1c <LmhpComplianceOnMcpsIndication+0x238>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8007a06:	2201      	movs	r2, #1
 8007a08:	709a      	strb	r2, [r3, #2]
            break;
 8007a0a:	e788      	b.n	800791e <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8007a0c:	7b01      	ldrb	r1, [r0, #12]
 8007a0e:	4b43      	ldr	r3, [pc, #268]	; (8007b1c <LmhpComplianceOnMcpsIndication+0x238>)
 8007a10:	7199      	strb	r1, [r3, #6]
            ComplianceTestState.DataBuffer[0] = 4;
 8007a12:	689c      	ldr	r4, [r3, #8]
 8007a14:	2304      	movs	r3, #4
 8007a16:	7023      	strb	r3, [r4, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e005      	b.n	8007a28 <LmhpComplianceOnMcpsIndication+0x144>
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8007a1c:	6882      	ldr	r2, [r0, #8]
 8007a1e:	5cd2      	ldrb	r2, [r2, r3]
 8007a20:	3201      	adds	r2, #1
 8007a22:	54e2      	strb	r2, [r4, r3]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8007a24:	3301      	adds	r3, #1
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	4a3c      	ldr	r2, [pc, #240]	; (8007b1c <LmhpComplianceOnMcpsIndication+0x238>)
 8007a2a:	7952      	ldrb	r2, [r2, #5]
 8007a2c:	428a      	cmp	r2, r1
 8007a2e:	bf28      	it	cs
 8007a30:	460a      	movcs	r2, r1
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d8f2      	bhi.n	8007a1c <LmhpComplianceOnMcpsIndication+0x138>
 8007a36:	e772      	b.n	800791e <LmhpComplianceOnMcpsIndication+0x3a>
                mlmeReq.Type = MLME_LINK_CHECK;
 8007a38:	2304      	movs	r3, #4
 8007a3a:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 8007a3e:	a803      	add	r0, sp, #12
 8007a40:	f002 fff0 	bl	800aa24 <LoRaMacMlmeRequest>
            break;
 8007a44:	e76b      	b.n	800791e <LmhpComplianceOnMcpsIndication+0x3a>
                TimerStop(&ComplianceTxNextPacketTimer);
 8007a46:	4837      	ldr	r0, [pc, #220]	; (8007b24 <LmhpComplianceOnMcpsIndication+0x240>)
 8007a48:	f00f fa7a 	bl	8016f40 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8007a4c:	4b33      	ldr	r3, [pc, #204]	; (8007b1c <LmhpComplianceOnMcpsIndication+0x238>)
 8007a4e:	2200      	movs	r2, #0
 8007a50:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8007a52:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 8007a54:	2304      	movs	r3, #4
 8007a56:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8007a5a:	4c31      	ldr	r4, [pc, #196]	; (8007b20 <LmhpComplianceOnMcpsIndication+0x23c>)
 8007a5c:	6823      	ldr	r3, [r4, #0]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8007a64:	a803      	add	r0, sp, #12
 8007a66:	f002 fd65 	bl	800a534 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	7858      	ldrb	r0, [r3, #1]
 8007a6e:	f003 f969 	bl	800ad44 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	b103      	cbz	r3, 8007a7a <LmhpComplianceOnMcpsIndication+0x196>
                    LmhpComplianceParams->StartPeripherals( );
 8007a78:	4798      	blx	r3
                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 8007a7a:	4b2c      	ldr	r3, [pc, #176]	; (8007b2c <LmhpComplianceOnMcpsIndication+0x248>)
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7e:	2002      	movs	r0, #2
 8007a80:	4798      	blx	r3
            break;
 8007a82:	e74c      	b.n	800791e <LmhpComplianceOnMcpsIndication+0x3a>
                if( mcpsIndication->BufferSize == 3 )
 8007a84:	7b03      	ldrb	r3, [r0, #12]
 8007a86:	2b03      	cmp	r3, #3
 8007a88:	d008      	beq.n	8007a9c <LmhpComplianceOnMcpsIndication+0x1b8>
                else if( mcpsIndication->BufferSize == 7 )
 8007a8a:	2b07      	cmp	r3, #7
 8007a8c:	d010      	beq.n	8007ab0 <LmhpComplianceOnMcpsIndication+0x1cc>
                LoRaMacMlmeRequest( &mlmeReq );
 8007a8e:	a803      	add	r0, sp, #12
 8007a90:	f002 ffc8 	bl	800aa24 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 8007a94:	4b21      	ldr	r3, [pc, #132]	; (8007b1c <LmhpComplianceOnMcpsIndication+0x238>)
 8007a96:	2201      	movs	r2, #1
 8007a98:	709a      	strb	r2, [r3, #2]
            break;
 8007a9a:	e740      	b.n	800791e <LmhpComplianceOnMcpsIndication+0x3a>
                    mlmeReq.Type = MLME_TXCW;
 8007a9c:	2305      	movs	r3, #5
 8007a9e:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8007aa2:	7851      	ldrb	r1, [r2, #1]
 8007aa4:	7893      	ldrb	r3, [r2, #2]
 8007aa6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007aaa:	f8ad 3010 	strh.w	r3, [sp, #16]
 8007aae:	e7ee      	b.n	8007a8e <LmhpComplianceOnMcpsIndication+0x1aa>
                    mlmeReq.Type = MLME_TXCW_1;
 8007ab0:	2306      	movs	r3, #6
 8007ab2:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8007ab6:	7851      	ldrb	r1, [r2, #1]
 8007ab8:	7893      	ldrb	r3, [r2, #2]
 8007aba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007abe:	f8ad 3010 	strh.w	r3, [sp, #16]
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8007ac2:	78d1      	ldrb	r1, [r2, #3]
 8007ac4:	7913      	ldrb	r3, [r2, #4]
 8007ac6:	021b      	lsls	r3, r3, #8
 8007ac8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007acc:	7952      	ldrb	r2, [r2, #5]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	2264      	movs	r2, #100	; 0x64
 8007ad2:	fb02 f303 	mul.w	r3, r2, r3
 8007ad6:	9305      	str	r3, [sp, #20]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8007ad8:	6883      	ldr	r3, [r0, #8]
 8007ada:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8007ade:	f88d 3018 	strb.w	r3, [sp, #24]
 8007ae2:	e7d4      	b.n	8007a8e <LmhpComplianceOnMcpsIndication+0x1aa>
                mlmeReq.Type = MLME_DEVICE_TIME;
 8007ae4:	230a      	movs	r3, #10
 8007ae6:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 8007aea:	a803      	add	r0, sp, #12
 8007aec:	f002 ff9a 	bl	800aa24 <LoRaMacMlmeRequest>
            break;
 8007af0:	e715      	b.n	800791e <LmhpComplianceOnMcpsIndication+0x3a>
                mibReq.Type = MIB_DEVICE_CLASS;
 8007af2:	2300      	movs	r3, #0
 8007af4:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8007af8:	7853      	ldrb	r3, [r2, #1]
 8007afa:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8007afe:	a803      	add	r0, sp, #12
 8007b00:	f002 fd18 	bl	800a534 <LoRaMacMibSetRequestConfirm>
            break;
 8007b04:	e70b      	b.n	800791e <LmhpComplianceOnMcpsIndication+0x3a>
                mlmeReq.Type = MLME_PING_SLOT_INFO;
 8007b06:	230d      	movs	r3, #13
 8007b08:	f88d 300c 	strb.w	r3, [sp, #12]
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8007b0c:	7853      	ldrb	r3, [r2, #1]
 8007b0e:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMlmeRequest( &mlmeReq );
 8007b12:	a803      	add	r0, sp, #12
 8007b14:	f002 ff86 	bl	800aa24 <LoRaMacMlmeRequest>
            break;
 8007b18:	e701      	b.n	800791e <LmhpComplianceOnMcpsIndication+0x3a>
 8007b1a:	4770      	bx	lr
 8007b1c:	20000698 	.word	0x20000698
 8007b20:	200006c4 	.word	0x200006c4
 8007b24:	200006ac 	.word	0x200006ac
 8007b28:	08007b31 	.word	0x08007b31
 8007b2c:	20000090 	.word	0x20000090

08007b30 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 8007b30:	b508      	push	{r3, lr}
    LmhpComplianceTxProcess( );
 8007b32:	f7ff fe89 	bl	8007848 <LmhpComplianceTxProcess>
}
 8007b36:	bd08      	pop	{r3, pc}

08007b38 <LmhpCompliancePackageFactory>:
}
 8007b38:	4800      	ldr	r0, [pc, #0]	; (8007b3c <LmhpCompliancePackageFactory+0x4>)
 8007b3a:	4770      	bx	lr
 8007b3c:	20000090 	.word	0x20000090

08007b40 <OnRadioRxError>:
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
 8007b40:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8007b42:	4a06      	ldr	r2, [pc, #24]	; (8007b5c <OnRadioRxError+0x1c>)
 8007b44:	7813      	ldrb	r3, [r2, #0]
 8007b46:	f043 0302 	orr.w	r3, r3, #2
 8007b4a:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007b4c:	4b04      	ldr	r3, [pc, #16]	; (8007b60 <OnRadioRxError+0x20>)
 8007b4e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007b52:	b113      	cbz	r3, 8007b5a <OnRadioRxError+0x1a>
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	b103      	cbz	r3, 8007b5a <OnRadioRxError+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007b58:	4798      	blx	r3
    }
}
 8007b5a:	bd08      	pop	{r3, pc}
 8007b5c:	200006c8 	.word	0x200006c8
 8007b60:	200006cc 	.word	0x200006cc

08007b64 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007b64:	4b07      	ldr	r3, [pc, #28]	; (8007b84 <UpdateRxSlotIdleState+0x20>)
 8007b66:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d004      	beq.n	8007b78 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8007b6e:	4b06      	ldr	r3, [pc, #24]	; (8007b88 <UpdateRxSlotIdleState+0x24>)
 8007b70:	2206      	movs	r2, #6
 8007b72:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
 8007b76:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007b78:	4b03      	ldr	r3, [pc, #12]	; (8007b88 <UpdateRxSlotIdleState+0x24>)
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	20000bd4 	.word	0x20000bd4
 8007b88:	200006cc 	.word	0x200006cc

08007b8c <LoRaMacEnableRequests>:
}


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 8007b8c:	4b01      	ldr	r3, [pc, #4]	; (8007b94 <LoRaMacEnableRequests+0x8>)
 8007b8e:	f883 0482 	strb.w	r0, [r3, #1154]	; 0x482
}
 8007b92:	4770      	bx	lr
 8007b94:	200006cc 	.word	0x200006cc

08007b98 <LoRaMacHandleIndicationEvents>:
        }
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 8007b98:	b530      	push	{r4, r5, lr}
 8007b9a:	b089      	sub	sp, #36	; 0x24
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8007b9c:	4b22      	ldr	r3, [pc, #136]	; (8007c28 <LoRaMacHandleIndicationEvents+0x90>)
 8007b9e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8007ba2:	f013 0f08 	tst.w	r3, #8
 8007ba6:	d00e      	beq.n	8007bc6 <LoRaMacHandleIndicationEvents+0x2e>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8007ba8:	481f      	ldr	r0, [pc, #124]	; (8007c28 <LoRaMacHandleIndicationEvents+0x90>)
 8007baa:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 8007bae:	f36f 03c3 	bfc	r3, #3, #1
 8007bb2:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8007bb6:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 8007bc0:	f500 608c 	add.w	r0, r0, #1120	; 0x460
 8007bc4:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8007bc6:	4b18      	ldr	r3, [pc, #96]	; (8007c28 <LoRaMacHandleIndicationEvents+0x90>)
 8007bc8:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8007bcc:	f013 0f10 	tst.w	r3, #16
 8007bd0:	d013      	beq.n	8007bfa <LoRaMacHandleIndicationEvents+0x62>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8007bd2:	2307      	movs	r3, #7
 8007bd4:	f88d 3004 	strb.w	r3, [sp, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007bd8:	2500      	movs	r5, #0
 8007bda:	f88d 5005 	strb.w	r5, [sp, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 8007bde:	4c12      	ldr	r4, [pc, #72]	; (8007c28 <LoRaMacHandleIndicationEvents+0x90>)
 8007be0:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	f204 417c 	addw	r1, r4, #1148	; 0x47c
 8007bea:	a801      	add	r0, sp, #4
 8007bec:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8007bee:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 8007bf2:	f365 1304 	bfi	r3, r5, #4, #1
 8007bf6:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007bfa:	4b0b      	ldr	r3, [pc, #44]	; (8007c28 <LoRaMacHandleIndicationEvents+0x90>)
 8007bfc:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8007c00:	f013 0f02 	tst.w	r3, #2
 8007c04:	d00e      	beq.n	8007c24 <LoRaMacHandleIndicationEvents+0x8c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8007c06:	4808      	ldr	r0, [pc, #32]	; (8007c28 <LoRaMacHandleIndicationEvents+0x90>)
 8007c08:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 8007c0c:	f36f 0341 	bfc	r3, #1, #1
 8007c10:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8007c14:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 8007c1e:	f200 401c 	addw	r0, r0, #1052	; 0x41c
 8007c22:	4798      	blx	r3
    }
}
 8007c24:	b009      	add	sp, #36	; 0x24
 8007c26:	bd30      	pop	{r4, r5, pc}
 8007c28:	200006cc 	.word	0x200006cc

08007c2c <LoRaMacCheckForRxAbort>:
}

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8007c2c:	4b05      	ldr	r3, [pc, #20]	; (8007c44 <LoRaMacCheckForRxAbort+0x18>)
 8007c2e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8007c32:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007c36:	d004      	beq.n	8007c42 <LoRaMacCheckForRxAbort+0x16>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007c38:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 8007c3c:	4a01      	ldr	r2, [pc, #4]	; (8007c44 <LoRaMacCheckForRxAbort+0x18>)
 8007c3e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8007c42:	4770      	bx	lr
 8007c44:	200006cc 	.word	0x200006cc

08007c48 <SetMlmeScheduleUplinkIndication>:
    return false;
}

static void SetMlmeScheduleUplinkIndication( void )
{
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8007c48:	4a03      	ldr	r2, [pc, #12]	; (8007c58 <SetMlmeScheduleUplinkIndication+0x10>)
 8007c4a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8007c4e:	f043 0310 	orr.w	r3, r3, #16
 8007c52:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 8007c56:	4770      	bx	lr
 8007c58:	200006cc 	.word	0x200006cc

08007c5c <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8007c5c:	4b06      	ldr	r3, [pc, #24]	; (8007c78 <CalculateBackOff+0x1c>)
 8007c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c60:	b94b      	cbnz	r3, 8007c76 <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8007c62:	4905      	ldr	r1, [pc, #20]	; (8007c78 <CalculateBackOff+0x1c>)
 8007c64:	f8b1 2102 	ldrh.w	r2, [r1, #258]	; 0x102
 8007c68:	4b04      	ldr	r3, [pc, #16]	; (8007c7c <CalculateBackOff+0x20>)
 8007c6a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8007c6e:	3a01      	subs	r2, #1
 8007c70:	fb03 f302 	mul.w	r3, r3, r2
 8007c74:	630b      	str	r3, [r1, #48]	; 0x30
    }
}
 8007c76:	4770      	bx	lr
 8007c78:	20000bd4 	.word	0x20000bd4
 8007c7c:	200006cc 	.word	0x200006cc

08007c80 <SetTxContinuousWave1>:

    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8007c80:	b510      	push	{r4, lr}
 8007c82:	4604      	mov	r4, r0
 8007c84:	4608      	mov	r0, r1
 8007c86:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8007c88:	4b06      	ldr	r3, [pc, #24]	; (8007ca4 <SetTxContinuousWave1+0x24>)
 8007c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c8c:	4622      	mov	r2, r4
 8007c8e:	b249      	sxtb	r1, r1
 8007c90:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8007c92:	4a05      	ldr	r2, [pc, #20]	; (8007ca8 <SetTxContinuousWave1+0x28>)
 8007c94:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8007c98:	f043 0302 	orr.w	r3, r3, #2
 8007c9c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	bd10      	pop	{r4, pc}
 8007ca4:	08018400 	.word	0x08018400
 8007ca8:	200006cc 	.word	0x200006cc

08007cac <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
    return &Nvm;
}
 8007cac:	4800      	ldr	r0, [pc, #0]	; (8007cb0 <GetNvmData+0x4>)
 8007cae:	4770      	bx	lr
 8007cb0:	20000bd4 	.word	0x20000bd4

08007cb4 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	b1f8      	cbz	r0, 8007cf8 <DetermineFrameType+0x44>
 8007cb8:	b301      	cbz	r1, 8007cfc <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8007cba:	7b03      	ldrb	r3, [r0, #12]
 8007cbc:	f013 030f 	ands.w	r3, r3, #15
 8007cc0:	d005      	beq.n	8007cce <DetermineFrameType+0x1a>
 8007cc2:	f890 0020 	ldrb.w	r0, [r0, #32]
 8007cc6:	b110      	cbz	r0, 8007cce <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 8007cc8:	2000      	movs	r0, #0
 8007cca:	7008      	strb	r0, [r1, #0]
 8007ccc:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8007cce:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 8007cd2:	b910      	cbnz	r0, 8007cda <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	700b      	strb	r3, [r1, #0]
 8007cd8:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8007cda:	b92b      	cbnz	r3, 8007ce8 <DetermineFrameType+0x34>
 8007cdc:	f892 0020 	ldrb.w	r0, [r2, #32]
 8007ce0:	b910      	cbnz	r0, 8007ce8 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	700b      	strb	r3, [r1, #0]
 8007ce6:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8007ce8:	b953      	cbnz	r3, 8007d00 <DetermineFrameType+0x4c>
 8007cea:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007cee:	b14a      	cbz	r2, 8007d04 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 8007cf0:	2203      	movs	r2, #3
 8007cf2:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 8007cf4:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 8007cf6:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007cf8:	2003      	movs	r0, #3
 8007cfa:	4770      	bx	lr
 8007cfc:	2003      	movs	r0, #3
 8007cfe:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 8007d00:	2017      	movs	r0, #23
 8007d02:	4770      	bx	lr
 8007d04:	2017      	movs	r0, #23
}
 8007d06:	4770      	bx	lr

08007d08 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8007d08:	4b0f      	ldr	r3, [pc, #60]	; (8007d48 <CheckRetransUnconfirmedUplink+0x40>)
 8007d0a:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8007d0e:	4b0f      	ldr	r3, [pc, #60]	; (8007d4c <CheckRetransUnconfirmedUplink+0x44>)
 8007d10:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d20f      	bcs.n	8007d38 <CheckRetransUnconfirmedUplink+0x30>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007d18:	4b0b      	ldr	r3, [pc, #44]	; (8007d48 <CheckRetransUnconfirmedUplink+0x40>)
 8007d1a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8007d1e:	f013 0f02 	tst.w	r3, #2
 8007d22:	d00b      	beq.n	8007d3c <CheckRetransUnconfirmedUplink+0x34>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8007d24:	4b09      	ldr	r3, [pc, #36]	; (8007d4c <CheckRetransUnconfirmedUplink+0x44>)
 8007d26:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007d2a:	b14b      	cbz	r3, 8007d40 <CheckRetransUnconfirmedUplink+0x38>
        {
            return true;
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8007d2c:	4b06      	ldr	r3, [pc, #24]	; (8007d48 <CheckRetransUnconfirmedUplink+0x40>)
 8007d2e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8007d32:	b13b      	cbz	r3, 8007d44 <CheckRetransUnconfirmedUplink+0x3c>
            {
                return true;
            }
        }
    }
    return false;
 8007d34:	2000      	movs	r0, #0
 8007d36:	4770      	bx	lr
        return true;
 8007d38:	2001      	movs	r0, #1
 8007d3a:	4770      	bx	lr
    return false;
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	4770      	bx	lr
            return true;
 8007d40:	2001      	movs	r0, #1
 8007d42:	4770      	bx	lr
                return true;
 8007d44:	2001      	movs	r0, #1
}
 8007d46:	4770      	bx	lr
 8007d48:	200006cc 	.word	0x200006cc
 8007d4c:	20000bd4 	.word	0x20000bd4

08007d50 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8007d50:	4b0a      	ldr	r3, [pc, #40]	; (8007d7c <CheckRetransConfirmedUplink+0x2c>)
 8007d52:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 8007d56:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d209      	bcs.n	8007d72 <CheckRetransConfirmedUplink+0x22>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007d5e:	4b07      	ldr	r3, [pc, #28]	; (8007d7c <CheckRetransConfirmedUplink+0x2c>)
 8007d60:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8007d64:	f013 0f02 	tst.w	r3, #2
 8007d68:	d005      	beq.n	8007d76 <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8007d6a:	4b04      	ldr	r3, [pc, #16]	; (8007d7c <CheckRetransConfirmedUplink+0x2c>)
 8007d6c:	f893 043c 	ldrb.w	r0, [r3, #1084]	; 0x43c
 8007d70:	4770      	bx	lr
        return true;
 8007d72:	2001      	movs	r0, #1
 8007d74:	4770      	bx	lr
        {
            return true;
        }
    }
    return false;
 8007d76:	2000      	movs	r0, #0
}
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	200006cc 	.word	0x200006cc

08007d80 <StopRetransmission>:

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8007d80:	4b11      	ldr	r3, [pc, #68]	; (8007dc8 <StopRetransmission+0x48>)
 8007d82:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8007d86:	f013 0f02 	tst.w	r3, #2
 8007d8a:	d004      	beq.n	8007d96 <StopRetransmission+0x16>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8007d8c:	4b0e      	ldr	r3, [pc, #56]	; (8007dc8 <StopRetransmission+0x48>)
 8007d8e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d907      	bls.n	8007da6 <StopRetransmission+0x26>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8007d96:	4b0d      	ldr	r3, [pc, #52]	; (8007dcc <StopRetransmission+0x4c>)
 8007d98:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8007d9c:	b11b      	cbz	r3, 8007da6 <StopRetransmission+0x26>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 8007d9e:	4a0b      	ldr	r2, [pc, #44]	; (8007dcc <StopRetransmission+0x4c>)
 8007da0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8007da2:	3301      	adds	r3, #1
 8007da4:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8007da6:	4b08      	ldr	r3, [pc, #32]	; (8007dc8 <StopRetransmission+0x48>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8007dae:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 8007db2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007db6:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8007dba:	f022 0202 	bic.w	r2, r2, #2
 8007dbe:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 8007dc2:	2001      	movs	r0, #1
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	200006cc 	.word	0x200006cc
 8007dcc:	20000bd4 	.word	0x20000bd4

08007dd0 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8007dd0:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8007dd2:	4b04      	ldr	r3, [pc, #16]	; (8007de4 <CallNvmDataChangeCallback+0x14>)
 8007dd4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007dd8:	b113      	cbz	r3, 8007de0 <CallNvmDataChangeCallback+0x10>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8007dda:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8007ddc:	b103      	cbz	r3, 8007de0 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8007dde:	4798      	blx	r3
    }
}
 8007de0:	bd08      	pop	{r3, pc}
 8007de2:	bf00      	nop
 8007de4:	200006cc 	.word	0x200006cc

08007de8 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8007de8:	4b04      	ldr	r3, [pc, #16]	; (8007dfc <IsRequestPending+0x14>)
 8007dea:	f893 0481 	ldrb.w	r0, [r3, #1153]	; 0x481
 8007dee:	f010 0005 	ands.w	r0, r0, #5
 8007df2:	d100      	bne.n	8007df6 <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 8007df4:	4770      	bx	lr
        return 1;
 8007df6:	2001      	movs	r0, #1
 8007df8:	e7fc      	b.n	8007df4 <IsRequestPending+0xc>
 8007dfa:	bf00      	nop
 8007dfc:	200006cc 	.word	0x200006cc

08007e00 <AckTimeoutRetriesProcess>:
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8007e00:	4a13      	ldr	r2, [pc, #76]	; (8007e50 <AckTimeoutRetriesProcess+0x50>)
 8007e02:	f892 3412 	ldrb.w	r3, [r2, #1042]	; 0x412
 8007e06:	f892 2411 	ldrb.w	r2, [r2, #1041]	; 0x411
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d207      	bcs.n	8007e1e <AckTimeoutRetriesProcess+0x1e>
        MacCtx.AckTimeoutRetriesCounter++;
 8007e0e:	3301      	adds	r3, #1
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	4a0f      	ldr	r2, [pc, #60]	; (8007e50 <AckTimeoutRetriesProcess+0x50>)
 8007e14:	f882 3412 	strb.w	r3, [r2, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8007e18:	f013 0f01 	tst.w	r3, #1
 8007e1c:	d100      	bne.n	8007e20 <AckTimeoutRetriesProcess+0x20>
 8007e1e:	4770      	bx	lr
{
 8007e20:	b510      	push	{r4, lr}
 8007e22:	b084      	sub	sp, #16
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8007e24:	2322      	movs	r3, #34	; 0x22
 8007e26:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007e2a:	4c0a      	ldr	r4, [pc, #40]	; (8007e54 <AckTimeoutRetriesProcess+0x54>)
 8007e2c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8007e30:	f88d 300a 	strb.w	r3, [sp, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007e34:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
 8007e38:	f88d 3009 	strb.w	r3, [sp, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007e3c:	a902      	add	r1, sp, #8
 8007e3e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8007e42:	f003 fff8 	bl	800be36 <RegionGetPhyParam>
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8007e46:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
}
 8007e4a:	b004      	add	sp, #16
 8007e4c:	bd10      	pop	{r4, pc}
 8007e4e:	bf00      	nop
 8007e50:	200006cc 	.word	0x200006cc
 8007e54:	20000bd4 	.word	0x20000bd4

08007e58 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8007e58:	b500      	push	{lr}
 8007e5a:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007e5c:	4b0c      	ldr	r3, [pc, #48]	; (8007e90 <GetMaxAppPayloadWithoutFOptsLength+0x38>)
 8007e5e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8007e62:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 8007e66:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8007e6a:	220d      	movs	r2, #13
 8007e6c:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8007e70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e74:	b113      	cbz	r3, 8007e7c <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8007e76:	230e      	movs	r3, #14
 8007e78:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007e7c:	a902      	add	r1, sp, #8
 8007e7e:	4b04      	ldr	r3, [pc, #16]	; (8007e90 <GetMaxAppPayloadWithoutFOptsLength+0x38>)
 8007e80:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8007e84:	f003 ffd7 	bl	800be36 <RegionGetPhyParam>
}
 8007e88:	b2c0      	uxtb	r0, r0
 8007e8a:	b005      	add	sp, #20
 8007e8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e90:	20000bd4 	.word	0x20000bd4

08007e94 <ValidatePayloadLength>:
{
 8007e94:	b538      	push	{r3, r4, r5, lr}
 8007e96:	4605      	mov	r5, r0
 8007e98:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8007e9a:	4608      	mov	r0, r1
 8007e9c:	f7ff ffdc 	bl	8007e58 <GetMaxAppPayloadWithoutFOptsLength>
 8007ea0:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 8007ea2:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d303      	bcc.n	8007eb0 <ValidatePayloadLength+0x1c>
 8007ea8:	2aff      	cmp	r2, #255	; 0xff
 8007eaa:	d903      	bls.n	8007eb4 <ValidatePayloadLength+0x20>
    return false;
 8007eac:	2000      	movs	r0, #0
 8007eae:	e000      	b.n	8007eb2 <ValidatePayloadLength+0x1e>
 8007eb0:	2000      	movs	r0, #0
}
 8007eb2:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 8007eb4:	2001      	movs	r0, #1
 8007eb6:	e7fc      	b.n	8007eb2 <ValidatePayloadLength+0x1e>

08007eb8 <ProcessRadioTxDone>:
{
 8007eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eba:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007ebc:	4b39      	ldr	r3, [pc, #228]	; (8007fa4 <ProcessRadioTxDone+0xec>)
 8007ebe:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d002      	beq.n	8007ecc <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 8007ec6:	4b38      	ldr	r3, [pc, #224]	; (8007fa8 <ProcessRadioTxDone+0xf0>)
 8007ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eca:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8007ecc:	4c37      	ldr	r4, [pc, #220]	; (8007fac <ProcessRadioTxDone+0xf4>)
 8007ece:	f504 7560 	add.w	r5, r4, #896	; 0x380
 8007ed2:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f00f f8da 	bl	8017090 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8007edc:	4628      	mov	r0, r5
 8007ede:	f00f f891 	bl	8017004 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8007ee2:	f504 7566 	add.w	r5, r4, #920	; 0x398
 8007ee6:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8007eea:	4628      	mov	r0, r5
 8007eec:	f00f f8d0 	bl	8017090 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	f00f f887 	bl	8017004 <UTIL_TIMER_Start>
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8007ef6:	4b2b      	ldr	r3, [pc, #172]	; (8007fa4 <ProcessRadioTxDone+0xec>)
 8007ef8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d002      	beq.n	8007f06 <ProcessRadioTxDone+0x4e>
 8007f00:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8007f04:	b1a3      	cbz	r3, 8007f30 <ProcessRadioTxDone+0x78>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8007f06:	2316      	movs	r3, #22
 8007f08:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007f0c:	a90a      	add	r1, sp, #40	; 0x28
 8007f0e:	4b25      	ldr	r3, [pc, #148]	; (8007fa4 <ProcessRadioTxDone+0xec>)
 8007f10:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8007f14:	f003 ff8f 	bl	800be36 <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8007f18:	4c24      	ldr	r4, [pc, #144]	; (8007fac <ProcessRadioTxDone+0xf4>)
 8007f1a:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8007f1e:	f504 747e 	add.w	r4, r4, #1016	; 0x3f8
 8007f22:	4401      	add	r1, r0
 8007f24:	4620      	mov	r0, r4
 8007f26:	f00f f8b3 	bl	8017090 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	f00f f86a 	bl	8017004 <UTIL_TIMER_Start>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8007f30:	4b1f      	ldr	r3, [pc, #124]	; (8007fb0 <ProcessRadioTxDone+0xf8>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4c1b      	ldr	r4, [pc, #108]	; (8007fa4 <ProcessRadioTxDone+0xec>)
 8007f36:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 8007f38:	4f1c      	ldr	r7, [pc, #112]	; (8007fac <ProcessRadioTxDone+0xf4>)
 8007f3a:	f897 2415 	ldrb.w	r2, [r7, #1045]	; 0x415
 8007f3e:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8007f42:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8007f44:	ae0c      	add	r6, sp, #48	; 0x30
 8007f46:	4630      	mov	r0, r6
 8007f48:	f00e ff30 	bl	8016dac <SysTimeGetMcuTime>
 8007f4c:	ad02      	add	r5, sp, #8
 8007f4e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8007f58:	e896 0006 	ldmia.w	r6, {r1, r2}
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	f00e fec6 	bl	8016cee <SysTimeSub>
 8007f62:	ab07      	add	r3, sp, #28
 8007f64:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007f68:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8007f6c:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8007f70:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 8007f72:	2301      	movs	r3, #1
 8007f74:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007f78:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 8007f7c:	b90b      	cbnz	r3, 8007f82 <ProcessRadioTxDone+0xca>
        txDone.Joined  = false;
 8007f7e:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8007f82:	a904      	add	r1, sp, #16
 8007f84:	4b07      	ldr	r3, [pc, #28]	; (8007fa4 <ProcessRadioTxDone+0xec>)
 8007f86:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8007f8a:	f003 ff94 	bl	800beb6 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 8007f8e:	4b07      	ldr	r3, [pc, #28]	; (8007fac <ProcessRadioTxDone+0xf4>)
 8007f90:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8007f94:	b91b      	cbnz	r3, 8007f9e <ProcessRadioTxDone+0xe6>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007f96:	4b05      	ldr	r3, [pc, #20]	; (8007fac <ProcessRadioTxDone+0xf4>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
}
 8007f9e:	b00f      	add	sp, #60	; 0x3c
 8007fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20000bd4 	.word	0x20000bd4
 8007fa8:	08018400 	.word	0x08018400
 8007fac:	200006cc 	.word	0x200006cc
 8007fb0:	200024ec 	.word	0x200024ec

08007fb4 <OnAckTimeoutTimerEvent>:
{
 8007fb4:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 8007fb6:	4c10      	ldr	r4, [pc, #64]	; (8007ff8 <OnAckTimeoutTimerEvent+0x44>)
 8007fb8:	f504 707e 	add.w	r0, r4, #1016	; 0x3f8
 8007fbc:	f00e ffc0 	bl	8016f40 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 8007fc0:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8007fc4:	b113      	cbz	r3, 8007fcc <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f884 2413 	strb.w	r2, [r4, #1043]	; 0x413
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8007fcc:	4b0b      	ldr	r3, [pc, #44]	; (8007ffc <OnAckTimeoutTimerEvent+0x48>)
 8007fce:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d007      	beq.n	8007fe6 <OnAckTimeoutTimerEvent+0x32>
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007fd6:	4b08      	ldr	r3, [pc, #32]	; (8007ff8 <OnAckTimeoutTimerEvent+0x44>)
 8007fd8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007fdc:	b113      	cbz	r3, 8007fe4 <OnAckTimeoutTimerEvent+0x30>
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	b103      	cbz	r3, 8007fe4 <OnAckTimeoutTimerEvent+0x30>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007fe2:	4798      	blx	r3
}
 8007fe4:	bd10      	pop	{r4, pc}
        MacCtx.MacFlags.Bits.MacDone = 1;
 8007fe6:	4a04      	ldr	r2, [pc, #16]	; (8007ff8 <OnAckTimeoutTimerEvent+0x44>)
 8007fe8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8007fec:	f043 0320 	orr.w	r3, r3, #32
 8007ff0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8007ff4:	e7ef      	b.n	8007fd6 <OnAckTimeoutTimerEvent+0x22>
 8007ff6:	bf00      	nop
 8007ff8:	200006cc 	.word	0x200006cc
 8007ffc:	20000bd4 	.word	0x20000bd4

08008000 <PrepareRxDoneAbort>:
{
 8008000:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8008002:	4b0c      	ldr	r3, [pc, #48]	; (8008034 <PrepareRxDoneAbort+0x34>)
 8008004:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8008008:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800800c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 8008010:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8008014:	b94b      	cbnz	r3, 800802a <PrepareRxDoneAbort+0x2a>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8008016:	4a07      	ldr	r2, [pc, #28]	; (8008034 <PrepareRxDoneAbort+0x34>)
 8008018:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800801c:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 8008020:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 8008024:	f7ff fd9e 	bl	8007b64 <UpdateRxSlotIdleState>
}
 8008028:	bd08      	pop	{r3, pc}
        OnAckTimeoutTimerEvent( NULL );
 800802a:	2000      	movs	r0, #0
 800802c:	f7ff ffc2 	bl	8007fb4 <OnAckTimeoutTimerEvent>
 8008030:	e7f1      	b.n	8008016 <PrepareRxDoneAbort+0x16>
 8008032:	bf00      	nop
 8008034:	200006cc 	.word	0x200006cc

08008038 <LoRaMacCheckForBeaconAcquisition>:
{
 8008038:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800803a:	200c      	movs	r0, #12
 800803c:	f003 f98c 	bl	800b358 <LoRaMacConfirmQueueIsCmdActive>
 8008040:	b188      	cbz	r0, 8008066 <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8008042:	4b0b      	ldr	r3, [pc, #44]	; (8008070 <LoRaMacCheckForBeaconAcquisition+0x38>)
 8008044:	f893 0481 	ldrb.w	r0, [r3, #1153]	; 0x481
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008048:	f010 0f01 	tst.w	r0, #1
 800804c:	d10d      	bne.n	800806a <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800804e:	f010 0004 	ands.w	r0, r0, #4
 8008052:	d009      	beq.n	8008068 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008054:	461a      	mov	r2, r3
 8008056:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800805a:	f023 0302 	bic.w	r3, r3, #2
 800805e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8008062:	2001      	movs	r0, #1
 8008064:	e000      	b.n	8008068 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 8008066:	2000      	movs	r0, #0
}
 8008068:	bd08      	pop	{r3, pc}
    return 0x00;
 800806a:	2000      	movs	r0, #0
 800806c:	e7fc      	b.n	8008068 <LoRaMacCheckForBeaconAcquisition+0x30>
 800806e:	bf00      	nop
 8008070:	200006cc 	.word	0x200006cc

08008074 <GetFCntDown>:
{
 8008074:	b570      	push	{r4, r5, r6, lr}
 8008076:	9c05      	ldr	r4, [sp, #20]
 8008078:	9d06      	ldr	r5, [sp, #24]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800807a:	b1fa      	cbz	r2, 80080bc <GetFCntDown+0x48>
 800807c:	4616      	mov	r6, r2
 800807e:	b1fc      	cbz	r4, 80080c0 <GetFCntDown+0x4c>
 8008080:	b305      	cbz	r5, 80080c4 <GetFCntDown+0x50>
    switch( addrID )
 8008082:	b188      	cbz	r0, 80080a8 <GetFCntDown+0x34>
 8008084:	2801      	cmp	r0, #1
 8008086:	d11f      	bne.n	80080c8 <GetFCntDown+0x54>
            if( lrWanVersion.Fields.Minor == 1 )
 8008088:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800808c:	2a01      	cmp	r2, #1
 800808e:	d002      	beq.n	8008096 <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 8008090:	2303      	movs	r3, #3
 8008092:	7023      	strb	r3, [r4, #0]
 8008094:	e00a      	b.n	80080ac <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8008096:	b121      	cbz	r1, 80080a2 <GetFCntDown+0x2e>
 8008098:	2903      	cmp	r1, #3
 800809a:	d002      	beq.n	80080a2 <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 800809c:	2301      	movs	r3, #1
 800809e:	7023      	strb	r3, [r4, #0]
 80080a0:	e004      	b.n	80080ac <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 80080a2:	2302      	movs	r3, #2
 80080a4:	7023      	strb	r3, [r4, #0]
 80080a6:	e001      	b.n	80080ac <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 80080a8:	2304      	movs	r3, #4
 80080aa:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 80080ac:	462b      	mov	r3, r5
 80080ae:	89f2      	ldrh	r2, [r6, #14]
 80080b0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80080b4:	7820      	ldrb	r0, [r4, #0]
 80080b6:	f003 fb71 	bl	800b79c <LoRaMacCryptoGetFCntDown>
}
 80080ba:	bd70      	pop	{r4, r5, r6, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 80080bc:	200a      	movs	r0, #10
 80080be:	e7fc      	b.n	80080ba <GetFCntDown+0x46>
 80080c0:	200a      	movs	r0, #10
 80080c2:	e7fa      	b.n	80080ba <GetFCntDown+0x46>
 80080c4:	200a      	movs	r0, #10
 80080c6:	e7f8      	b.n	80080ba <GetFCntDown+0x46>
    switch( addrID )
 80080c8:	2005      	movs	r0, #5
 80080ca:	e7f6      	b.n	80080ba <GetFCntDown+0x46>

080080cc <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80080cc:	2801      	cmp	r0, #1
 80080ce:	d900      	bls.n	80080d2 <RemoveMacCommands+0x6>
 80080d0:	4770      	bx	lr
{
 80080d2:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 80080d4:	2a01      	cmp	r2, #1
 80080d6:	d105      	bne.n	80080e4 <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 80080d8:	f011 0f20 	tst.w	r1, #32
 80080dc:	d004      	beq.n	80080e8 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80080de:	f002 ffd7 	bl	800b090 <LoRaMacCommandsRemoveStickyAnsCmds>
 80080e2:	e001      	b.n	80080e8 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80080e4:	f002 ffd4 	bl	800b090 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80080e8:	bd08      	pop	{r3, pc}
	...

080080ec <ProcessMacCommands>:
{
 80080ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f0:	b08f      	sub	sp, #60	; 0x3c
 80080f2:	4605      	mov	r5, r0
 80080f4:	460c      	mov	r4, r1
 80080f6:	4616      	mov	r6, r2
 80080f8:	4698      	mov	r8, r3
    uint8_t status = 0;
 80080fa:	2700      	movs	r7, #0
 80080fc:	f88d 702f 	strb.w	r7, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8008100:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
    while( macIndex < commandsSize )
 8008104:	42b4      	cmp	r4, r6
 8008106:	f080 82b8 	bcs.w	800867a <ProcessMacCommands+0x58e>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800810a:	5d28      	ldrb	r0, [r5, r4]
 800810c:	f003 f828 	bl	800b160 <LoRaMacCommandsGetCmdSize>
 8008110:	4420      	add	r0, r4
 8008112:	42b0      	cmp	r0, r6
 8008114:	f300 82b1 	bgt.w	800867a <ProcessMacCommands+0x58e>
        switch( payload[macIndex++] )
 8008118:	f104 0901 	add.w	r9, r4, #1
 800811c:	fa5f f989 	uxtb.w	r9, r9
 8008120:	5d29      	ldrb	r1, [r5, r4]
 8008122:	3902      	subs	r1, #2
 8008124:	2911      	cmp	r1, #17
 8008126:	f200 82a8 	bhi.w	800867a <ProcessMacCommands+0x58e>
 800812a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800812e:	0012      	.short	0x0012
 8008130:	00920029 	.word	0x00920029
 8008134:	00ed00a6 	.word	0x00ed00a6
 8008138:	013c0105 	.word	0x013c0105
 800813c:	01ab0155 	.word	0x01ab0155
 8008140:	02a602a6 	.word	0x02a602a6
 8008144:	02a601db 	.word	0x02a601db
 8008148:	023202a6 	.word	0x023202a6
 800814c:	02690249 	.word	0x02690249
 8008150:	0285      	.short	0x0285
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8008152:	2004      	movs	r0, #4
 8008154:	f003 f900 	bl	800b358 <LoRaMacConfirmQueueIsCmdActive>
 8008158:	b908      	cbnz	r0, 800815e <ProcessMacCommands+0x72>
        switch( payload[macIndex++] )
 800815a:	464c      	mov	r4, r9
 800815c:	e7d2      	b.n	8008104 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800815e:	2104      	movs	r1, #4
 8008160:	2000      	movs	r0, #0
 8008162:	f003 f8ad 	bl	800b2c0 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8008166:	1ca3      	adds	r3, r4, #2
 8008168:	b2db      	uxtb	r3, r3
 800816a:	f815 1009 	ldrb.w	r1, [r5, r9]
 800816e:	4ac1      	ldr	r2, [pc, #772]	; (8008474 <ProcessMacCommands+0x388>)
 8008170:	f882 1454 	strb.w	r1, [r2, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8008174:	3403      	adds	r4, #3
 8008176:	b2e4      	uxtb	r4, r4
 8008178:	5ceb      	ldrb	r3, [r5, r3]
 800817a:	f882 3455 	strb.w	r3, [r2, #1109]	; 0x455
 800817e:	e7c1      	b.n	8008104 <ProcessMacCommands+0x18>
                int8_t linkAdrDatarate = DR_0;
 8008180:	2300      	movs	r3, #0
 8008182:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 8008186:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 800818a:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 800818e:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 8008192:	b10f      	cbz	r7, 8008198 <ProcessMacCommands+0xac>
                break;
 8008194:	464c      	mov	r4, r9
 8008196:	e7b5      	b.n	8008104 <ProcessMacCommands+0x18>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8008198:	f109 33ff 	add.w	r3, r9, #4294967295
 800819c:	442b      	add	r3, r5
 800819e:	9308      	str	r3, [sp, #32]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80081a0:	eba6 0309 	sub.w	r3, r6, r9
 80081a4:	3301      	adds	r3, #1
 80081a6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80081aa:	48b3      	ldr	r0, [pc, #716]	; (8008478 <ProcessMacCommands+0x38c>)
 80081ac:	f890 30fe 	ldrb.w	r3, [r0, #254]	; 0xfe
 80081b0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80081b4:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80081b8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80081bc:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
 80081c0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80081c4:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
 80081c8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80081cc:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80081d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 80081d4:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80081d8:	9307      	str	r3, [sp, #28]
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80081da:	ab05      	add	r3, sp, #20
 80081dc:	9301      	str	r3, [sp, #4]
 80081de:	ab03      	add	r3, sp, #12
 80081e0:	9300      	str	r3, [sp, #0]
 80081e2:	f10d 030b 	add.w	r3, sp, #11
 80081e6:	f10d 020a 	add.w	r2, sp, #10
 80081ea:	a907      	add	r1, sp, #28
 80081ec:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80081f0:	f003 ffcc 	bl	800c18c <RegionLinkAdrReq>
 80081f4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                    if( ( status & 0x07 ) == 0x07 )
 80081f8:	f000 0007 	and.w	r0, r0, #7
 80081fc:	2807      	cmp	r0, #7
 80081fe:	d001      	beq.n	8008204 <ProcessMacCommands+0x118>
{
 8008200:	2400      	movs	r4, #0
 8008202:	e015      	b.n	8008230 <ProcessMacCommands+0x144>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8008204:	4b9c      	ldr	r3, [pc, #624]	; (8008478 <ProcessMacCommands+0x38c>)
 8008206:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800820a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800820e:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8008212:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8008216:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800821a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800821e:	e7ef      	b.n	8008200 <ProcessMacCommands+0x114>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8008220:	2201      	movs	r2, #1
 8008222:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 8008226:	2003      	movs	r0, #3
 8008228:	f002 fed2 	bl	800afd0 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800822c:	3401      	adds	r4, #1
 800822e:	b2e4      	uxtb	r4, r4
 8008230:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8008234:	4b91      	ldr	r3, [pc, #580]	; (800847c <ProcessMacCommands+0x390>)
 8008236:	fba3 1302 	umull	r1, r3, r3, r2
 800823a:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
 800823e:	d3ef      	bcc.n	8008220 <ProcessMacCommands+0x134>
                    macIndex += linkAdrNbBytesParsed - 1;
 8008240:	4491      	add	r9, r2
 8008242:	fa5f f989 	uxtb.w	r9, r9
 8008246:	f109 39ff 	add.w	r9, r9, #4294967295
 800824a:	fa5f f989 	uxtb.w	r9, r9
                    adrBlockFound = true;
 800824e:	2701      	movs	r7, #1
 8008250:	e7a0      	b.n	8008194 <ProcessMacCommands+0xa8>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8008252:	3402      	adds	r4, #2
 8008254:	b2e4      	uxtb	r4, r4
 8008256:	f815 3009 	ldrb.w	r3, [r5, r9]
 800825a:	f003 030f 	and.w	r3, r3, #15
 800825e:	4986      	ldr	r1, [pc, #536]	; (8008478 <ProcessMacCommands+0x38c>)
 8008260:	f881 30ff 	strb.w	r3, [r1, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8008264:	2201      	movs	r2, #1
 8008266:	fa02 f303 	lsl.w	r3, r2, r3
 800826a:	f8a1 3102 	strh.w	r3, [r1, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800826e:	2200      	movs	r2, #0
 8008270:	a90b      	add	r1, sp, #44	; 0x2c
 8008272:	2004      	movs	r0, #4
 8008274:	f002 feac 	bl	800afd0 <LoRaMacCommandsAddCmd>
                break;
 8008278:	e744      	b.n	8008104 <ProcessMacCommands+0x18>
                status = 0x07;
 800827a:	2307      	movs	r3, #7
 800827c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8008280:	f815 3009 	ldrb.w	r3, [r5, r9]
 8008284:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008288:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800828c:	f915 3009 	ldrsb.w	r3, [r5, r9]
 8008290:	f003 030f 	and.w	r3, r3, #15
 8008294:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 8008298:	1ca3      	adds	r3, r4, #2
 800829a:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800829c:	1ce1      	adds	r1, r4, #3
 800829e:	b2c9      	uxtb	r1, r1
 80082a0:	5ceb      	ldrb	r3, [r5, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80082a2:	1d22      	adds	r2, r4, #4
 80082a4:	b2d2      	uxtb	r2, r2
 80082a6:	5c69      	ldrb	r1, [r5, r1]
 80082a8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80082ac:	3405      	adds	r4, #5
 80082ae:	b2e4      	uxtb	r4, r4
 80082b0:	5caa      	ldrb	r2, [r5, r2]
 80082b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                rxParamSetupReq.Frequency *= 100;
 80082b6:	2264      	movs	r2, #100	; 0x64
 80082b8:	fb02 f303 	mul.w	r3, r2, r3
 80082bc:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80082be:	a907      	add	r1, sp, #28
 80082c0:	4b6d      	ldr	r3, [pc, #436]	; (8008478 <ProcessMacCommands+0x38c>)
 80082c2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80082c6:	f003 ffa9 	bl	800c21c <RegionRxParamSetupReq>
 80082ca:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 80082ce:	f000 0307 	and.w	r3, r0, #7
 80082d2:	2b07      	cmp	r3, #7
 80082d4:	d009      	beq.n	80082ea <ProcessMacCommands+0x1fe>
                macCmdPayload[0] = status;
 80082d6:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80082da:	2201      	movs	r2, #1
 80082dc:	a90b      	add	r1, sp, #44	; 0x2c
 80082de:	2005      	movs	r0, #5
 80082e0:	f002 fe76 	bl	800afd0 <LoRaMacCommandsAddCmd>
                SetMlmeScheduleUplinkIndication( );
 80082e4:	f7ff fcb0 	bl	8007c48 <SetMlmeScheduleUplinkIndication>
                break;
 80082e8:	e70c      	b.n	8008104 <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80082ea:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80082ee:	4b62      	ldr	r3, [pc, #392]	; (8008478 <ProcessMacCommands+0x38c>)
 80082f0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80082f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80082f8:	9a08      	ldr	r2, [sp, #32]
 80082fa:	665a      	str	r2, [r3, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80082fc:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80082fe:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8008302:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8008306:	e7e6      	b.n	80082d6 <ProcessMacCommands+0x1ea>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8008308:	4b5a      	ldr	r3, [pc, #360]	; (8008474 <ProcessMacCommands+0x388>)
 800830a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800830e:	b17b      	cbz	r3, 8008330 <ProcessMacCommands+0x244>
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	b17b      	cbz	r3, 8008334 <ProcessMacCommands+0x248>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8008314:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 8008316:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800831a:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 800831e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8008322:	2202      	movs	r2, #2
 8008324:	a90b      	add	r1, sp, #44	; 0x2c
 8008326:	2006      	movs	r0, #6
 8008328:	f002 fe52 	bl	800afd0 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 800832c:	464c      	mov	r4, r9
                break;
 800832e:	e6e9      	b.n	8008104 <ProcessMacCommands+0x18>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8008330:	20ff      	movs	r0, #255	; 0xff
 8008332:	e7f0      	b.n	8008316 <ProcessMacCommands+0x22a>
 8008334:	20ff      	movs	r0, #255	; 0xff
 8008336:	e7ee      	b.n	8008316 <ProcessMacCommands+0x22a>
                status = 0x03;
 8008338:	2303      	movs	r3, #3
 800833a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 800833e:	1ca3      	adds	r3, r4, #2
 8008340:	b2db      	uxtb	r3, r3
 8008342:	f915 2009 	ldrsb.w	r2, [r5, r9]
 8008346:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 800834a:	aa07      	add	r2, sp, #28
 800834c:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800834e:	1ce2      	adds	r2, r4, #3
 8008350:	b2d2      	uxtb	r2, r2
 8008352:	5ceb      	ldrb	r3, [r5, r3]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008354:	1d21      	adds	r1, r4, #4
 8008356:	b2c9      	uxtb	r1, r1
 8008358:	5caa      	ldrb	r2, [r5, r2]
 800835a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800835e:	1d62      	adds	r2, r4, #5
 8008360:	b2d2      	uxtb	r2, r2
 8008362:	5c69      	ldrb	r1, [r5, r1]
 8008364:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                chParam.Frequency *= 100;
 8008368:	2164      	movs	r1, #100	; 0x64
 800836a:	fb01 f303 	mul.w	r3, r1, r3
 800836e:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 8008370:	2300      	movs	r3, #0
 8008372:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 8008374:	3406      	adds	r4, #6
 8008376:	b2e4      	uxtb	r4, r4
 8008378:	56ab      	ldrsb	r3, [r5, r2]
 800837a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800837e:	a905      	add	r1, sp, #20
 8008380:	4b3d      	ldr	r3, [pc, #244]	; (8008478 <ProcessMacCommands+0x38c>)
 8008382:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008386:	f003 ff79 	bl	800c27c <RegionNewChannelReq>
 800838a:	b2c3      	uxtb	r3, r0
 800838c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 8008390:	2800      	cmp	r0, #0
 8008392:	f6ff aeb7 	blt.w	8008104 <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 8008396:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800839a:	2201      	movs	r2, #1
 800839c:	a90b      	add	r1, sp, #44	; 0x2c
 800839e:	2007      	movs	r0, #7
 80083a0:	f002 fe16 	bl	800afd0 <LoRaMacCommandsAddCmd>
                break;
 80083a4:	e6ae      	b.n	8008104 <ProcessMacCommands+0x18>
                uint8_t delay = payload[macIndex++] & 0x0F;
 80083a6:	3402      	adds	r4, #2
 80083a8:	b2e4      	uxtb	r4, r4
 80083aa:	f815 3009 	ldrb.w	r3, [r5, r9]
                if( delay == 0 )
 80083ae:	f013 020f 	ands.w	r2, r3, #15
 80083b2:	d100      	bne.n	80083b6 <ProcessMacCommands+0x2ca>
                    delay++;
 80083b4:	3201      	adds	r2, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80083b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80083ba:	fb03 f302 	mul.w	r3, r3, r2
 80083be:	4a2e      	ldr	r2, [pc, #184]	; (8008478 <ProcessMacCommands+0x38c>)
 80083c0:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80083c2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80083c6:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80083c8:	2200      	movs	r2, #0
 80083ca:	a90b      	add	r1, sp, #44	; 0x2c
 80083cc:	2008      	movs	r0, #8
 80083ce:	f002 fdff 	bl	800afd0 <LoRaMacCommandsAddCmd>
                SetMlmeScheduleUplinkIndication( );
 80083d2:	f7ff fc39 	bl	8007c48 <SetMlmeScheduleUplinkIndication>
                break;
 80083d6:	e695      	b.n	8008104 <ProcessMacCommands+0x18>
                uint8_t eirpDwellTime = payload[macIndex++];
 80083d8:	3402      	adds	r4, #2
 80083da:	b2e4      	uxtb	r4, r4
 80083dc:	f815 3009 	ldrb.w	r3, [r5, r9]
                txParamSetupReq.UplinkDwellTime = 0;
 80083e0:	2200      	movs	r2, #0
 80083e2:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 80083e6:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80083ea:	f013 0f20 	tst.w	r3, #32
 80083ee:	d002      	beq.n	80083f6 <ProcessMacCommands+0x30a>
                    txParamSetupReq.DownlinkDwellTime = 1;
 80083f0:	2201      	movs	r2, #1
 80083f2:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80083f6:	f013 0f10 	tst.w	r3, #16
 80083fa:	d002      	beq.n	8008402 <ProcessMacCommands+0x316>
                    txParamSetupReq.UplinkDwellTime = 1;
 80083fc:	2201      	movs	r2, #1
 80083fe:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8008402:	f003 030f 	and.w	r3, r3, #15
 8008406:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800840a:	a903      	add	r1, sp, #12
 800840c:	4b1a      	ldr	r3, [pc, #104]	; (8008478 <ProcessMacCommands+0x38c>)
 800840e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008412:	f003 ff63 	bl	800c2dc <RegionTxParamSetupReq>
 8008416:	f1b0 3fff 	cmp.w	r0, #4294967295
 800841a:	f43f ae73 	beq.w	8008104 <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800841e:	f89d a00c 	ldrb.w	sl, [sp, #12]
 8008422:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8008478 <ProcessMacCommands+0x38c>
 8008426:	f889 a074 	strb.w	sl, [r9, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800842a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800842e:	f889 3075 	strb.w	r3, [r9, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8008432:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8008436:	4a12      	ldr	r2, [pc, #72]	; (8008480 <ProcessMacCommands+0x394>)
 8008438:	5cd0      	ldrb	r0, [r2, r3]
 800843a:	f7f8 f9c7 	bl	80007cc <__aeabi_ui2f>
 800843e:	f8c9 0078 	str.w	r0, [r9, #120]	; 0x78
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8008442:	2302      	movs	r3, #2
 8008444:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008448:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800844c:	a907      	add	r1, sp, #28
 800844e:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
 8008452:	f003 fcf0 	bl	800be36 <RegionGetPhyParam>
 8008456:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8008458:	b240      	sxtb	r0, r0
 800845a:	f999 3039 	ldrsb.w	r3, [r9, #57]	; 0x39
 800845e:	4298      	cmp	r0, r3
 8008460:	bfb8      	it	lt
 8008462:	4618      	movlt	r0, r3
 8008464:	f889 0039 	strb.w	r0, [r9, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8008468:	2200      	movs	r2, #0
 800846a:	a90b      	add	r1, sp, #44	; 0x2c
 800846c:	2009      	movs	r0, #9
 800846e:	f002 fdaf 	bl	800afd0 <LoRaMacCommandsAddCmd>
                break;
 8008472:	e647      	b.n	8008104 <ProcessMacCommands+0x18>
 8008474:	200006cc 	.word	0x200006cc
 8008478:	20000bd4 	.word	0x20000bd4
 800847c:	cccccccd 	.word	0xcccccccd
 8008480:	08017bb4 	.word	0x08017bb4
                status = 0x03;
 8008484:	2303      	movs	r3, #3
 8008486:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 800848a:	1ca3      	adds	r3, r4, #2
 800848c:	b2db      	uxtb	r3, r3
 800848e:	f815 2009 	ldrb.w	r2, [r5, r9]
 8008492:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8008496:	1ce1      	adds	r1, r4, #3
 8008498:	b2c9      	uxtb	r1, r1
 800849a:	5ceb      	ldrb	r3, [r5, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800849c:	1d22      	adds	r2, r4, #4
 800849e:	b2d2      	uxtb	r2, r2
 80084a0:	5c69      	ldrb	r1, [r5, r1]
 80084a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80084a6:	3405      	adds	r4, #5
 80084a8:	b2e4      	uxtb	r4, r4
 80084aa:	5caa      	ldrb	r2, [r5, r2]
 80084ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                dlChannelReq.Rx1Frequency *= 100;
 80084b0:	2264      	movs	r2, #100	; 0x64
 80084b2:	fb02 f303 	mul.w	r3, r2, r3
 80084b6:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80084b8:	a907      	add	r1, sp, #28
 80084ba:	4b71      	ldr	r3, [pc, #452]	; (8008680 <ProcessMacCommands+0x594>)
 80084bc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80084c0:	f003 ff3c 	bl	800c33c <RegionDlChannelReq>
 80084c4:	b2c3      	uxtb	r3, r0
 80084c6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 80084ca:	2800      	cmp	r0, #0
 80084cc:	f6ff ae1a 	blt.w	8008104 <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 80084d0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80084d4:	2201      	movs	r2, #1
 80084d6:	a90b      	add	r1, sp, #44	; 0x2c
 80084d8:	200a      	movs	r0, #10
 80084da:	f002 fd79 	bl	800afd0 <LoRaMacCommandsAddCmd>
                    SetMlmeScheduleUplinkIndication( );
 80084de:	f7ff fbb3 	bl	8007c48 <SetMlmeScheduleUplinkIndication>
                break;
 80084e2:	e60f      	b.n	8008104 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80084e4:	200a      	movs	r0, #10
 80084e6:	f002 ff37 	bl	800b358 <LoRaMacConfirmQueueIsCmdActive>
 80084ea:	b908      	cbnz	r0, 80084f0 <ProcessMacCommands+0x404>
        switch( payload[macIndex++] )
 80084ec:	464c      	mov	r4, r9
 80084ee:	e609      	b.n	8008104 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80084f0:	210a      	movs	r1, #10
 80084f2:	2000      	movs	r0, #0
 80084f4:	f002 fee4 	bl	800b2c0 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 80084f8:	2300      	movs	r3, #0
 80084fa:	f8ad 3012 	strh.w	r3, [sp, #18]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80084fe:	1ca1      	adds	r1, r4, #2
 8008500:	b2c9      	uxtb	r1, r1
 8008502:	f815 3009 	ldrb.w	r3, [r5, r9]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8008506:	1ce2      	adds	r2, r4, #3
 8008508:	b2d2      	uxtb	r2, r2
 800850a:	5c69      	ldrb	r1, [r5, r1]
 800850c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8008510:	1d21      	adds	r1, r4, #4
 8008512:	b2c9      	uxtb	r1, r1
 8008514:	5caa      	ldrb	r2, [r5, r2]
 8008516:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800851a:	1d62      	adds	r2, r4, #5
 800851c:	b2d2      	uxtb	r2, r2
 800851e:	5c69      	ldrb	r1, [r5, r1]
 8008520:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008524:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8008526:	3406      	adds	r4, #6
 8008528:	b2e4      	uxtb	r4, r4
 800852a:	5ca9      	ldrb	r1, [r5, r2]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800852c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008530:	fb02 f201 	mul.w	r2, r2, r1
 8008534:	0a12      	lsrs	r2, r2, #8
 8008536:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 800853a:	f10d 0914 	add.w	r9, sp, #20
 800853e:	9904      	ldr	r1, [sp, #16]
 8008540:	4618      	mov	r0, r3
 8008542:	e889 0003 	stmia.w	r9, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8008546:	4a4f      	ldr	r2, [pc, #316]	; (8008684 <ProcessMacCommands+0x598>)
 8008548:	441a      	add	r2, r3
 800854a:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 800854c:	f10d 0b1c 	add.w	fp, sp, #28
 8008550:	4658      	mov	r0, fp
 8008552:	f00e fc0b 	bl	8016d6c <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8008556:	f8df a130 	ldr.w	sl, [pc, #304]	; 8008688 <ProcessMacCommands+0x59c>
 800855a:	f8da 333c 	ldr.w	r3, [sl, #828]	; 0x33c
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	f8da 3338 	ldr.w	r3, [sl, #824]	; 0x338
 8008564:	e899 0006 	ldmia.w	r9, {r1, r2}
 8008568:	a80c      	add	r0, sp, #48	; 0x30
 800856a:	f00e fbc0 	bl	8016cee <SysTimeSub>
 800856e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008574:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8008578:	4648      	mov	r0, r9
 800857a:	f00e fb9b 	bl	8016cb4 <SysTimeAdd>
                    SysTimeSet( sysTime );
 800857e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8008582:	f00e fbd1 	bl	8016d28 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8008586:	f002 fc8c 	bl	800aea2 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800858a:	2301      	movs	r3, #1
 800858c:	f88a 3434 	strb.w	r3, [sl, #1076]	; 0x434
 8008590:	e5b8      	b.n	8008104 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8008592:	200d      	movs	r0, #13
 8008594:	f002 fee0 	bl	800b358 <LoRaMacConfirmQueueIsCmdActive>
 8008598:	b908      	cbnz	r0, 800859e <ProcessMacCommands+0x4b2>
        switch( payload[macIndex++] )
 800859a:	464c      	mov	r4, r9
 800859c:	e5b2      	b.n	8008104 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800859e:	210d      	movs	r1, #13
 80085a0:	2000      	movs	r0, #0
 80085a2:	f002 fe8d 	bl	800b2c0 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80085a6:	4b38      	ldr	r3, [pc, #224]	; (8008688 <ProcessMacCommands+0x59c>)
 80085a8:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 80085ac:	3b04      	subs	r3, #4
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d801      	bhi.n	80085b8 <ProcessMacCommands+0x4cc>
        switch( payload[macIndex++] )
 80085b4:	464c      	mov	r4, r9
 80085b6:	e5a5      	b.n	8008104 <ProcessMacCommands+0x18>
                        LoRaMacClassBPingSlotInfoAns( );
 80085b8:	f002 fc6f 	bl	800ae9a <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 80085bc:	464c      	mov	r4, r9
 80085be:	e5a1      	b.n	8008104 <ProcessMacCommands+0x18>
                frequency = ( uint32_t )payload[macIndex++];
 80085c0:	1ca2      	adds	r2, r4, #2
 80085c2:	b2d2      	uxtb	r2, r2
 80085c4:	f815 3009 	ldrb.w	r3, [r5, r9]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80085c8:	1ce1      	adds	r1, r4, #3
 80085ca:	b2c9      	uxtb	r1, r1
 80085cc:	5caa      	ldrb	r2, [r5, r2]
 80085ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80085d2:	1d22      	adds	r2, r4, #4
 80085d4:	b2d2      	uxtb	r2, r2
 80085d6:	5c69      	ldrb	r1, [r5, r1]
 80085d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 80085dc:	3405      	adds	r4, #5
 80085de:	b2e4      	uxtb	r4, r4
 80085e0:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80085e2:	2164      	movs	r1, #100	; 0x64
 80085e4:	fb01 f103 	mul.w	r1, r1, r3
 80085e8:	f000 000f 	and.w	r0, r0, #15
 80085ec:	f002 fc56 	bl	800ae9c <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 80085f0:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 80085f4:	2201      	movs	r2, #1
 80085f6:	a90b      	add	r1, sp, #44	; 0x2c
 80085f8:	2011      	movs	r0, #17
 80085fa:	f002 fce9 	bl	800afd0 <LoRaMacCommandsAddCmd>
                break;
 80085fe:	e581      	b.n	8008104 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8008600:	200e      	movs	r0, #14
 8008602:	f002 fea9 	bl	800b358 <LoRaMacConfirmQueueIsCmdActive>
 8008606:	b908      	cbnz	r0, 800860c <ProcessMacCommands+0x520>
        switch( payload[macIndex++] )
 8008608:	464c      	mov	r4, r9
 800860a:	e57b      	b.n	8008104 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800860c:	210e      	movs	r1, #14
 800860e:	2000      	movs	r0, #0
 8008610:	f002 fe56 	bl	800b2c0 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8008614:	1ca2      	adds	r2, r4, #2
 8008616:	b2d2      	uxtb	r2, r2
 8008618:	f815 0009 	ldrb.w	r0, [r5, r9]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800861c:	1ce3      	adds	r3, r4, #3
 800861e:	b2db      	uxtb	r3, r3
 8008620:	f815 c002 	ldrb.w	ip, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 8008624:	3404      	adds	r4, #4
 8008626:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8008628:	4a18      	ldr	r2, [pc, #96]	; (800868c <ProcessMacCommands+0x5a0>)
 800862a:	6812      	ldr	r2, [r2, #0]
 800862c:	5ce9      	ldrb	r1, [r5, r3]
 800862e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8008632:	f002 fc35 	bl	800aea0 <LoRaMacClassBBeaconTimingAns>
 8008636:	e565      	b.n	8008104 <ProcessMacCommands+0x18>
                    frequency = ( uint32_t )payload[macIndex++];
 8008638:	1ca1      	adds	r1, r4, #2
 800863a:	b2c9      	uxtb	r1, r1
 800863c:	f815 3009 	ldrb.w	r3, [r5, r9]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008640:	1ce2      	adds	r2, r4, #3
 8008642:	b2d2      	uxtb	r2, r2
 8008644:	5c68      	ldrb	r0, [r5, r1]
 8008646:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800864a:	3404      	adds	r4, #4
 800864c:	b2e4      	uxtb	r4, r4
 800864e:	5ca8      	ldrb	r0, [r5, r2]
 8008650:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8008654:	2064      	movs	r0, #100	; 0x64
 8008656:	fb00 f003 	mul.w	r0, r0, r3
 800865a:	f002 fc23 	bl	800aea4 <LoRaMacClassBBeaconFreqReq>
 800865e:	b140      	cbz	r0, 8008672 <ProcessMacCommands+0x586>
                        macCmdPayload[0] = 1;
 8008660:	2301      	movs	r3, #1
 8008662:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8008666:	2201      	movs	r2, #1
 8008668:	a90b      	add	r1, sp, #44	; 0x2c
 800866a:	2013      	movs	r0, #19
 800866c:	f002 fcb0 	bl	800afd0 <LoRaMacCommandsAddCmd>
                break;
 8008670:	e548      	b.n	8008104 <ProcessMacCommands+0x18>
                        macCmdPayload[0] = 0;
 8008672:	2300      	movs	r3, #0
 8008674:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8008678:	e7f5      	b.n	8008666 <ProcessMacCommands+0x57a>
}
 800867a:	b00f      	add	sp, #60	; 0x3c
 800867c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008680:	20000bd4 	.word	0x20000bd4
 8008684:	12d53d80 	.word	0x12d53d80
 8008688:	200006cc 	.word	0x200006cc
 800868c:	200024f0 	.word	0x200024f0

08008690 <ProcessRadioRxDone>:
{
 8008690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008694:	b0a3      	sub	sp, #140	; 0x8c
    uint8_t *payload = RxDoneParams.Payload;
 8008696:	4bbd      	ldr	r3, [pc, #756]	; (800898c <ProcessRadioRxDone+0x2fc>)
 8008698:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 800869a:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 800869c:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 80086a0:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 80086a4:	2300      	movs	r3, #0
 80086a6:	9306      	str	r3, [sp, #24]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80086a8:	4ab9      	ldr	r2, [pc, #740]	; (8008990 <ProcessRadioRxDone+0x300>)
 80086aa:	f8d2 80cc 	ldr.w	r8, [r2, #204]	; 0xcc
    MacCtx.McpsConfirm.AckReceived = false;
 80086ae:	4cb9      	ldr	r4, [pc, #740]	; (8008994 <ProcessRadioRxDone+0x304>)
 80086b0:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 80086b4:	f8a4 947c 	strh.w	r9, [r4, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 80086b8:	f884 747e 	strb.w	r7, [r4, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 80086bc:	f894 2480 	ldrb.w	r2, [r4, #1152]	; 0x480
 80086c0:	f884 247f 	strb.w	r2, [r4, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 80086c4:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 80086c8:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 80086cc:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 80086d0:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 80086d4:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 80086d8:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 80086dc:	f884 342a 	strb.w	r3, [r4, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 80086e0:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80086e4:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 80086e8:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80086ec:	f884 3434 	strb.w	r3, [r4, #1076]	; 0x434
    Radio.Sleep( );
 80086f0:	4ba9      	ldr	r3, [pc, #676]	; (8008998 <ProcessRadioRxDone+0x308>)
 80086f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f4:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 80086f6:	f504 7066 	add.w	r0, r4, #920	; 0x398
 80086fa:	f00e fc21 	bl	8016f40 <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 80086fe:	4629      	mov	r1, r5
 8008700:	4630      	mov	r0, r6
 8008702:	f002 fbb7 	bl	800ae74 <LoRaMacClassBRxBeacon>
 8008706:	b998      	cbnz	r0, 8008730 <ProcessRadioRxDone+0xa0>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008708:	4ba1      	ldr	r3, [pc, #644]	; (8008990 <ProcessRadioRxDone+0x300>)
 800870a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800870e:	2b01      	cmp	r3, #1
 8008710:	d013      	beq.n	800873a <ProcessRadioRxDone+0xaa>
    macHdr.Value = payload[pktHeaderLen++];
 8008712:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 8008714:	0963      	lsrs	r3, r4, #5
 8008716:	3b01      	subs	r3, #1
 8008718:	2b06      	cmp	r3, #6
 800871a:	f200 827c 	bhi.w	8008c16 <ProcessRadioRxDone+0x586>
 800871e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008722:	0029      	.short	0x0029
 8008724:	00a7027a 	.word	0x00a7027a
 8008728:	00a3027a 	.word	0x00a3027a
 800872c:	0254027a 	.word	0x0254027a
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8008730:	f8a4 9472 	strh.w	r9, [r4, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8008734:	f884 7474 	strb.w	r7, [r4, #1140]	; 0x474
        return;
 8008738:	e282      	b.n	8008c40 <ProcessRadioRxDone+0x5b0>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800873a:	f002 fb9f 	bl	800ae7c <LoRaMacClassBIsPingExpected>
 800873e:	b150      	cbz	r0, 8008756 <ProcessRadioRxDone+0xc6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008740:	2000      	movs	r0, #0
 8008742:	f002 fb90 	bl	800ae66 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008746:	2000      	movs	r0, #0
 8008748:	f002 fb92 	bl	800ae70 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800874c:	4b91      	ldr	r3, [pc, #580]	; (8008994 <ProcessRadioRxDone+0x304>)
 800874e:	2204      	movs	r2, #4
 8008750:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 8008754:	e7dd      	b.n	8008712 <ProcessRadioRxDone+0x82>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008756:	f002 fb93 	bl	800ae80 <LoRaMacClassBIsMulticastExpected>
 800875a:	2800      	cmp	r0, #0
 800875c:	d0d9      	beq.n	8008712 <ProcessRadioRxDone+0x82>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800875e:	2000      	movs	r0, #0
 8008760:	f002 fb82 	bl	800ae68 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008764:	2000      	movs	r0, #0
 8008766:	f002 fb84 	bl	800ae72 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800876a:	4b8a      	ldr	r3, [pc, #552]	; (8008994 <ProcessRadioRxDone+0x304>)
 800876c:	2205      	movs	r2, #5
 800876e:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 8008772:	e7ce      	b.n	8008712 <ProcessRadioRxDone+0x82>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8008774:	2d10      	cmp	r5, #16
 8008776:	d95a      	bls.n	800882e <ProcessRadioRxDone+0x19e>
            macMsgJoinAccept.Buffer = payload;
 8008778:	9607      	str	r6, [sp, #28]
            macMsgJoinAccept.BufSize = size;
 800877a:	b2ed      	uxtb	r5, r5
 800877c:	f88d 5020 	strb.w	r5, [sp, #32]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8008780:	4b83      	ldr	r3, [pc, #524]	; (8008990 <ProcessRadioRxDone+0x300>)
 8008782:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8008786:	2b00      	cmp	r3, #0
 8008788:	d158      	bne.n	800883c <ProcessRadioRxDone+0x1ac>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800878a:	f00b fee5 	bl	8014558 <SecureElementGetJoinEui>
 800878e:	4601      	mov	r1, r0
 8008790:	aa07      	add	r2, sp, #28
 8008792:	20ff      	movs	r0, #255	; 0xff
 8008794:	f003 f976 	bl	800ba84 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8008798:	2800      	cmp	r0, #0
 800879a:	d15b      	bne.n	8008854 <ProcessRadioRxDone+0x1c4>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800879c:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80087a0:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 80087a4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80087a8:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
 80087ac:	4b78      	ldr	r3, [pc, #480]	; (8008990 <ProcessRadioRxDone+0x300>)
 80087ae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80087b2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 80087b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087b8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80087bc:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 80087c0:	f3c2 1102 	ubfx	r1, r2, #4, #3
 80087c4:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80087c8:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80087cc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80087d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 80087d4:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80087d8:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 80087da:	b90a      	cbnz	r2, 80087e0 <ProcessRadioRxDone+0x150>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 80087dc:	2201      	movs	r2, #1
 80087de:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 80087e0:	4c6b      	ldr	r4, [pc, #428]	; (8008990 <ProcessRadioRxDone+0x300>)
 80087e2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80087e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80087e8:	fb03 f302 	mul.w	r3, r3, r2
 80087ec:	6523      	str	r3, [r4, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80087ee:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80087f2:	6563      	str	r3, [r4, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 80087f4:	2300      	movs	r3, #0
 80087f6:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
                applyCFList.Payload = macMsgJoinAccept.CFList;
 80087fa:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 80087fe:	9320      	str	r3, [sp, #128]	; 0x80
                applyCFList.Size = size - 17;
 8008800:	3d11      	subs	r5, #17
 8008802:	f88d 5084 	strb.w	r5, [sp, #132]	; 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8008806:	a920      	add	r1, sp, #128	; 0x80
 8008808:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800880c:	f003 fbd9 	bl	800bfc2 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8008810:	2302      	movs	r3, #2
 8008812:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008816:	2001      	movs	r0, #1
 8008818:	f002 fd9e 	bl	800b358 <LoRaMacConfirmQueueIsCmdActive>
 800881c:	b9a8      	cbnz	r0, 800884a <ProcessRadioRxDone+0x1ba>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800881e:	4a5d      	ldr	r2, [pc, #372]	; (8008994 <ProcessRadioRxDone+0x304>)
 8008820:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008824:	f043 0308 	orr.w	r3, r3, #8
 8008828:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800882c:	e1e7      	b.n	8008bfe <ProcessRadioRxDone+0x56e>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800882e:	4b59      	ldr	r3, [pc, #356]	; (8008994 <ProcessRadioRxDone+0x304>)
 8008830:	2201      	movs	r2, #1
 8008832:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8008836:	f7ff fbe3 	bl	8008000 <PrepareRxDoneAbort>
                return;
 800883a:	e201      	b.n	8008c40 <ProcessRadioRxDone+0x5b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800883c:	4b55      	ldr	r3, [pc, #340]	; (8008994 <ProcessRadioRxDone+0x304>)
 800883e:	2201      	movs	r2, #1
 8008840:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8008844:	f7ff fbdc 	bl	8008000 <PrepareRxDoneAbort>
                return;
 8008848:	e1fa      	b.n	8008c40 <ProcessRadioRxDone+0x5b0>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800884a:	2101      	movs	r1, #1
 800884c:	2000      	movs	r0, #0
 800884e:	f002 fd37 	bl	800b2c0 <LoRaMacConfirmQueueSetStatus>
 8008852:	e7e4      	b.n	800881e <ProcessRadioRxDone+0x18e>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008854:	2001      	movs	r0, #1
 8008856:	f002 fd7f 	bl	800b358 <LoRaMacConfirmQueueIsCmdActive>
 800885a:	2800      	cmp	r0, #0
 800885c:	d0df      	beq.n	800881e <ProcessRadioRxDone+0x18e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800885e:	2101      	movs	r1, #1
 8008860:	2007      	movs	r0, #7
 8008862:	f002 fd2d 	bl	800b2c0 <LoRaMacConfirmQueueSetStatus>
 8008866:	e7da      	b.n	800881e <ProcessRadioRxDone+0x18e>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008868:	4b4a      	ldr	r3, [pc, #296]	; (8008994 <ProcessRadioRxDone+0x304>)
 800886a:	2201      	movs	r2, #1
 800886c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008870:	4b47      	ldr	r3, [pc, #284]	; (8008990 <ProcessRadioRxDone+0x300>)
 8008872:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8008876:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800887a:	4a46      	ldr	r2, [pc, #280]	; (8008994 <ProcessRadioRxDone+0x304>)
 800887c:	f992 2420 	ldrsb.w	r2, [r2, #1056]	; 0x420
 8008880:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8008884:	220d      	movs	r2, #13
 8008886:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800888a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800888e:	b113      	cbz	r3, 8008896 <ProcessRadioRxDone+0x206>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8008890:	230e      	movs	r3, #14
 8008892:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008896:	a91e      	add	r1, sp, #120	; 0x78
 8008898:	4b3d      	ldr	r3, [pc, #244]	; (8008990 <ProcessRadioRxDone+0x300>)
 800889a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800889e:	f003 faca 	bl	800be36 <RegionGetPhyParam>
 80088a2:	901d      	str	r0, [sp, #116]	; 0x74
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 80088a4:	f1a5 030d 	sub.w	r3, r5, #13
 80088a8:	b21b      	sxth	r3, r3
 80088aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80088ae:	b200      	sxth	r0, r0
 80088b0:	4283      	cmp	r3, r0
 80088b2:	dc01      	bgt.n	80088b8 <ProcessRadioRxDone+0x228>
 80088b4:	2d0b      	cmp	r5, #11
 80088b6:	d806      	bhi.n	80088c6 <ProcessRadioRxDone+0x236>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80088b8:	4b36      	ldr	r3, [pc, #216]	; (8008994 <ProcessRadioRxDone+0x304>)
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 80088c0:	f7ff fb9e 	bl	8008000 <PrepareRxDoneAbort>
                return;
 80088c4:	e1bc      	b.n	8008c40 <ProcessRadioRxDone+0x5b0>
            macMsgData.Buffer = payload;
 80088c6:	9611      	str	r6, [sp, #68]	; 0x44
            macMsgData.BufSize = size;
 80088c8:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
            macMsgData.FRMPayload = MacCtx.RxPayload;
 80088cc:	4b33      	ldr	r3, [pc, #204]	; (800899c <ProcessRadioRxDone+0x30c>)
 80088ce:	931a      	str	r3, [sp, #104]	; 0x68
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 80088d0:	23ff      	movs	r3, #255	; 0xff
 80088d2:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 80088d6:	a811      	add	r0, sp, #68	; 0x44
 80088d8:	f003 f998 	bl	800bc0c <LoRaMacParserData>
 80088dc:	2800      	cmp	r0, #0
 80088de:	d146      	bne.n	800896e <ProcessRadioRxDone+0x2de>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 80088e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80088e2:	4b2c      	ldr	r3, [pc, #176]	; (8008994 <ProcessRadioRxDone+0x304>)
 80088e4:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 80088e8:	f10d 0116 	add.w	r1, sp, #22
 80088ec:	a811      	add	r0, sp, #68	; 0x44
 80088ee:	f7ff f9e1 	bl	8007cb4 <DetermineFrameType>
 80088f2:	4605      	mov	r5, r0
 80088f4:	2800      	cmp	r0, #0
 80088f6:	d141      	bne.n	800897c <ProcessRadioRxDone+0x2ec>
            downLinkCounter = 0;
 80088f8:	2300      	movs	r3, #0
 80088fa:	9306      	str	r3, [sp, #24]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d04e      	beq.n	80089a0 <ProcessRadioRxDone+0x310>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8008902:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8008904:	2d01      	cmp	r5, #1
 8008906:	d108      	bne.n	800891a <ProcessRadioRxDone+0x28a>
 8008908:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800890c:	2b03      	cmp	r3, #3
 800890e:	d174      	bne.n	80089fa <ProcessRadioRxDone+0x36a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8008910:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8008914:	f013 0f60 	tst.w	r3, #96	; 0x60
 8008918:	d16f      	bne.n	80089fa <ProcessRadioRxDone+0x36a>
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800891a:	2315      	movs	r3, #21
 800891c:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008920:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8008990 <ProcessRadioRxDone+0x300>
 8008924:	a91e      	add	r1, sp, #120	; 0x78
 8008926:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
 800892a:	f003 fa84 	bl	800be36 <RegionGetPhyParam>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800892e:	ab06      	add	r3, sp, #24
 8008930:	9302      	str	r3, [sp, #8]
 8008932:	f10d 0317 	add.w	r3, sp, #23
 8008936:	9301      	str	r3, [sp, #4]
 8008938:	b280      	uxth	r0, r0
 800893a:	9000      	str	r0, [sp, #0]
 800893c:	f8d9 310c 	ldr.w	r3, [r9, #268]	; 0x10c
 8008940:	aa11      	add	r2, sp, #68	; 0x44
 8008942:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8008946:	4630      	mov	r0, r6
 8008948:	f7ff fb94 	bl	8008074 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800894c:	2800      	cmp	r0, #0
 800894e:	d075      	beq.n	8008a3c <ProcessRadioRxDone+0x3ac>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8008950:	2807      	cmp	r0, #7
 8008952:	d059      	beq.n	8008a08 <ProcessRadioRxDone+0x378>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8008954:	2808      	cmp	r0, #8
 8008956:	d06c      	beq.n	8008a32 <ProcessRadioRxDone+0x3a2>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008958:	4b0e      	ldr	r3, [pc, #56]	; (8008994 <ProcessRadioRxDone+0x304>)
 800895a:	2201      	movs	r2, #1
 800895c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008960:	4b0c      	ldr	r3, [pc, #48]	; (8008994 <ProcessRadioRxDone+0x304>)
 8008962:	9a06      	ldr	r2, [sp, #24]
 8008964:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 8008968:	f7ff fb4a 	bl	8008000 <PrepareRxDoneAbort>
                return;
 800896c:	e168      	b.n	8008c40 <ProcessRadioRxDone+0x5b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800896e:	4b09      	ldr	r3, [pc, #36]	; (8008994 <ProcessRadioRxDone+0x304>)
 8008970:	2201      	movs	r2, #1
 8008972:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8008976:	f7ff fb43 	bl	8008000 <PrepareRxDoneAbort>
                return;
 800897a:	e161      	b.n	8008c40 <ProcessRadioRxDone+0x5b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800897c:	4b05      	ldr	r3, [pc, #20]	; (8008994 <ProcessRadioRxDone+0x304>)
 800897e:	2201      	movs	r2, #1
 8008980:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8008984:	f7ff fb3c 	bl	8008000 <PrepareRxDoneAbort>
                return;
 8008988:	e15a      	b.n	8008c40 <ProcessRadioRxDone+0x5b0>
 800898a:	bf00      	nop
 800898c:	200024f0 	.word	0x200024f0
 8008990:	20000bd4 	.word	0x20000bd4
 8008994:	200006cc 	.word	0x200006cc
 8008998:	08018400 	.word	0x08018400
 800899c:	20000904 	.word	0x20000904
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80089a0:	4618      	mov	r0, r3
 80089a2:	49ab      	ldr	r1, [pc, #684]	; (8008c50 <ProcessRadioRxDone+0x5c0>)
 80089a4:	222c      	movs	r2, #44	; 0x2c
 80089a6:	fb02 1203 	mla	r2, r2, r3, r1
 80089aa:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 80089ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80089b0:	428a      	cmp	r2, r1
 80089b2:	d002      	beq.n	80089ba <ProcessRadioRxDone+0x32a>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80089b4:	3301      	adds	r3, #1
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	e7a1      	b.n	80088fe <ProcessRadioRxDone+0x26e>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 80089ba:	4ea5      	ldr	r6, [pc, #660]	; (8008c50 <ProcessRadioRxDone+0x5c0>)
 80089bc:	212c      	movs	r1, #44	; 0x2c
 80089be:	fb01 6103 	mla	r1, r1, r3, r6
 80089c2:	f891 10d2 	ldrb.w	r1, [r1, #210]	; 0xd2
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80089c6:	2900      	cmp	r1, #0
 80089c8:	d0f4      	beq.n	80089b4 <ProcessRadioRxDone+0x324>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 80089ca:	4633      	mov	r3, r6
 80089cc:	212c      	movs	r1, #44	; 0x2c
 80089ce:	fb01 6000 	mla	r0, r1, r0, r6
 80089d2:	f890 60d3 	ldrb.w	r6, [r0, #211]	; 0xd3
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 80089d6:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
 80089da:	6809      	ldr	r1, [r1, #0]
 80089dc:	9106      	str	r1, [sp, #24]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80089de:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d002      	beq.n	80089ec <ProcessRadioRxDone+0x35c>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 80089e6:	4690      	mov	r8, r2
                    multicast = 1;
 80089e8:	2501      	movs	r5, #1
 80089ea:	e78b      	b.n	8008904 <ProcessRadioRxDone+0x274>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80089ec:	4b99      	ldr	r3, [pc, #612]	; (8008c54 <ProcessRadioRxDone+0x5c4>)
 80089ee:	2103      	movs	r1, #3
 80089f0:	f883 147f 	strb.w	r1, [r3, #1151]	; 0x47f
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 80089f4:	4690      	mov	r8, r2
                    multicast = 1;
 80089f6:	2501      	movs	r5, #1
 80089f8:	e784      	b.n	8008904 <ProcessRadioRxDone+0x274>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80089fa:	4b96      	ldr	r3, [pc, #600]	; (8008c54 <ProcessRadioRxDone+0x5c4>)
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8008a02:	f7ff fafd 	bl	8008000 <PrepareRxDoneAbort>
                return;
 8008a06:	e11b      	b.n	8008c40 <ProcessRadioRxDone+0x5b0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8008a08:	4b92      	ldr	r3, [pc, #584]	; (8008c54 <ProcessRadioRxDone+0x5c4>)
 8008a0a:	2208      	movs	r2, #8
 8008a0c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 8008a10:	f899 310e 	ldrb.w	r3, [r9, #270]	; 0x10e
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1a3      	bne.n	8008960 <ProcessRadioRxDone+0x2d0>
 8008a18:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8008a1c:	2ca0      	cmp	r4, #160	; 0xa0
 8008a1e:	d19f      	bne.n	8008960 <ProcessRadioRxDone+0x2d0>
 8008a20:	f8d9 2034 	ldr.w	r2, [r9, #52]	; 0x34
 8008a24:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d19a      	bne.n	8008960 <ProcessRadioRxDone+0x2d0>
                        Nvm.MacGroup1.SrvAckRequested = true;
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f889 203a 	strb.w	r2, [r9, #58]	; 0x3a
 8008a30:	e796      	b.n	8008960 <ProcessRadioRxDone+0x2d0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8008a32:	4b88      	ldr	r3, [pc, #544]	; (8008c54 <ProcessRadioRxDone+0x5c4>)
 8008a34:	220a      	movs	r2, #10
 8008a36:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8008a3a:	e791      	b.n	8008960 <ProcessRadioRxDone+0x2d0>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8008a3c:	ab11      	add	r3, sp, #68	; 0x44
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	9b06      	ldr	r3, [sp, #24]
 8008a42:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8008a46:	4641      	mov	r1, r8
 8008a48:	4630      	mov	r0, r6
 8008a4a:	f002 ff6f 	bl	800b92c <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d13a      	bne.n	8008ac8 <ProcessRadioRxDone+0x438>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008a52:	4b80      	ldr	r3, [pc, #512]	; (8008c54 <ProcessRadioRxDone+0x5c4>)
 8008a54:	2100      	movs	r1, #0
 8008a56:	f883 141d 	strb.w	r1, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 8008a5a:	f883 541e 	strb.w	r5, [r3, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8008a5e:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8008a62:	f3c2 1000 	ubfx	r0, r2, #4, #1
 8008a66:	f883 0421 	strb.w	r0, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 8008a6a:	f8c3 1424 	str.w	r1, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 8008a6e:	f883 1428 	strb.w	r1, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008a72:	9806      	ldr	r0, [sp, #24]
 8008a74:	f8c3 042c 	str.w	r0, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008a78:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8008a7c:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008a80:	f883 1439 	strb.w	r1, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008a84:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8008a88:	f893 047f 	ldrb.w	r0, [r3, #1151]	; 0x47f
 8008a8c:	2801      	cmp	r0, #1
 8008a8e:	d929      	bls.n	8008ae4 <ProcessRadioRxDone+0x454>
            if( multicast == 1 )
 8008a90:	2d01      	cmp	r5, #1
 8008a92:	d02a      	beq.n	8008aea <ProcessRadioRxDone+0x45a>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8008a94:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8008a98:	2ca0      	cmp	r4, #160	; 0xa0
 8008a9a:	d02b      	beq.n	8008af4 <ProcessRadioRxDone+0x464>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	4a6c      	ldr	r2, [pc, #432]	; (8008c50 <ProcessRadioRxDone+0x5c0>)
 8008aa0:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008aa4:	4a6b      	ldr	r2, [pc, #428]	; (8008c54 <ProcessRadioRxDone+0x5c4>)
 8008aa6:	f882 341c 	strb.w	r3, [r2, #1052]	; 0x41c
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8008aaa:	4b6a      	ldr	r3, [pc, #424]	; (8008c54 <ProcessRadioRxDone+0x5c4>)
 8008aac:	f893 2438 	ldrb.w	r2, [r3, #1080]	; 0x438
 8008ab0:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8008ab4:	f7ff fb0a 	bl	80080cc <RemoveMacCommands>
            switch( fType )
 8008ab8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8008abc:	2b03      	cmp	r3, #3
 8008abe:	d87d      	bhi.n	8008bbc <ProcessRadioRxDone+0x52c>
 8008ac0:	e8df f003 	tbb	[pc, r3]
 8008ac4:	6c5c4a27 	.word	0x6c5c4a27
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8008ac8:	2802      	cmp	r0, #2
 8008aca:	d006      	beq.n	8008ada <ProcessRadioRxDone+0x44a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8008acc:	4b61      	ldr	r3, [pc, #388]	; (8008c54 <ProcessRadioRxDone+0x5c4>)
 8008ace:	220c      	movs	r2, #12
 8008ad0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8008ad4:	f7ff fa94 	bl	8008000 <PrepareRxDoneAbort>
                return;
 8008ad8:	e0b2      	b.n	8008c40 <ProcessRadioRxDone+0x5b0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8008ada:	4b5e      	ldr	r3, [pc, #376]	; (8008c54 <ProcessRadioRxDone+0x5c4>)
 8008adc:	220b      	movs	r2, #11
 8008ade:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8008ae2:	e7f7      	b.n	8008ad4 <ProcessRadioRxDone+0x444>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8008ae4:	4b5a      	ldr	r3, [pc, #360]	; (8008c50 <ProcessRadioRxDone+0x5c0>)
 8008ae6:	6299      	str	r1, [r3, #40]	; 0x28
 8008ae8:	e7d2      	b.n	8008a90 <ProcessRadioRxDone+0x400>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8008aea:	4b5a      	ldr	r3, [pc, #360]	; (8008c54 <ProcessRadioRxDone+0x5c4>)
 8008aec:	2202      	movs	r2, #2
 8008aee:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8008af2:	e7da      	b.n	8008aaa <ProcessRadioRxDone+0x41a>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8008af4:	4b56      	ldr	r3, [pc, #344]	; (8008c50 <ProcessRadioRxDone+0x5c0>)
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8008afc:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8008b00:	b913      	cbnz	r3, 8008b08 <ProcessRadioRxDone+0x478>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8008b02:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008b04:	4b52      	ldr	r3, [pc, #328]	; (8008c50 <ProcessRadioRxDone+0x5c0>)
 8008b06:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008b08:	4b52      	ldr	r3, [pc, #328]	; (8008c54 <ProcessRadioRxDone+0x5c4>)
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8008b10:	e7cb      	b.n	8008aaa <ProcessRadioRxDone+0x41a>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8008b12:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8008b16:	4c4f      	ldr	r4, [pc, #316]	; (8008c54 <ProcessRadioRxDone+0x5c4>)
 8008b18:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	463b      	mov	r3, r7
 8008b20:	f002 020f 	and.w	r2, r2, #15
 8008b24:	2100      	movs	r1, #0
 8008b26:	a815      	add	r0, sp, #84	; 0x54
 8008b28:	f7ff fae0 	bl	80080ec <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008b2c:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8008b30:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8008b34:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008b36:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8008b3a:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8008b3e:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8008b42:	2301      	movs	r3, #1
 8008b44:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008b48:	4a42      	ldr	r2, [pc, #264]	; (8008c54 <ProcessRadioRxDone+0x5c4>)
 8008b4a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008b4e:	f043 0302 	orr.w	r3, r3, #2
 8008b52:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8008b56:	e052      	b.n	8008bfe <ProcessRadioRxDone+0x56e>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8008b58:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8008b5c:	4c3d      	ldr	r4, [pc, #244]	; (8008c54 <ProcessRadioRxDone+0x5c4>)
 8008b5e:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8008b62:	9300      	str	r3, [sp, #0]
 8008b64:	463b      	mov	r3, r7
 8008b66:	f002 020f 	and.w	r2, r2, #15
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	a815      	add	r0, sp, #84	; 0x54
 8008b6e:	f7ff fabd 	bl	80080ec <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008b72:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8008b76:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    break;
 8008b7a:	e7e5      	b.n	8008b48 <ProcessRadioRxDone+0x4b8>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8008b7c:	4c35      	ldr	r4, [pc, #212]	; (8008c54 <ProcessRadioRxDone+0x5c4>)
 8008b7e:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	463b      	mov	r3, r7
 8008b86:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	981a      	ldr	r0, [sp, #104]	; 0x68
 8008b8e:	f7ff faad 	bl	80080ec <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008b92:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8008b96:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    break;
 8008b9a:	e7d5      	b.n	8008b48 <ProcessRadioRxDone+0x4b8>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008b9c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8008ba0:	4b2c      	ldr	r3, [pc, #176]	; (8008c54 <ProcessRadioRxDone+0x5c4>)
 8008ba2:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8008ba6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008ba8:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8008bac:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8008bb0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 8008bba:	e7c5      	b.n	8008b48 <ProcessRadioRxDone+0x4b8>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008bbc:	4b25      	ldr	r3, [pc, #148]	; (8008c54 <ProcessRadioRxDone+0x5c4>)
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 8008bc4:	f7ff fa1c 	bl	8008000 <PrepareRxDoneAbort>
                    break;
 8008bc8:	e7be      	b.n	8008b48 <ProcessRadioRxDone+0x4b8>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8008bca:	1e6a      	subs	r2, r5, #1
 8008bcc:	4c21      	ldr	r4, [pc, #132]	; (8008c54 <ProcessRadioRxDone+0x5c4>)
 8008bce:	f504 770e 	add.w	r7, r4, #568	; 0x238
 8008bd2:	b292      	uxth	r2, r2
 8008bd4:	1c71      	adds	r1, r6, #1
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	f00b fcef 	bl	80145ba <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008be2:	2300      	movs	r3, #0
 8008be4:	f884 341d 	strb.w	r3, [r4, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8008be8:	f8c4 7424 	str.w	r7, [r4, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8008bec:	3d01      	subs	r5, #1
 8008bee:	f884 5428 	strb.w	r5, [r4, #1064]	; 0x428
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008bf2:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 8008bf6:	f043 0302 	orr.w	r3, r3, #2
 8008bfa:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
    if( MacCtx.NodeAckRequested == true )
 8008bfe:	4b15      	ldr	r3, [pc, #84]	; (8008c54 <ProcessRadioRxDone+0x5c4>)
 8008c00:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8008c04:	b173      	cbz	r3, 8008c24 <ProcessRadioRxDone+0x594>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8008c06:	4b13      	ldr	r3, [pc, #76]	; (8008c54 <ProcessRadioRxDone+0x5c4>)
 8008c08:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8008c0c:	b17b      	cbz	r3, 8008c2e <ProcessRadioRxDone+0x59e>
            OnAckTimeoutTimerEvent( NULL );
 8008c0e:	2000      	movs	r0, #0
 8008c10:	f7ff f9d0 	bl	8007fb4 <OnAckTimeoutTimerEvent>
 8008c14:	e00b      	b.n	8008c2e <ProcessRadioRxDone+0x59e>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008c16:	4b0f      	ldr	r3, [pc, #60]	; (8008c54 <ProcessRadioRxDone+0x5c4>)
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 8008c1e:	f7ff f9ef 	bl	8008000 <PrepareRxDoneAbort>
            break;
 8008c22:	e7ec      	b.n	8008bfe <ProcessRadioRxDone+0x56e>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8008c24:	4b0a      	ldr	r3, [pc, #40]	; (8008c50 <ProcessRadioRxDone+0x5c0>)
 8008c26:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d00b      	beq.n	8008c46 <ProcessRadioRxDone+0x5b6>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008c2e:	4a09      	ldr	r2, [pc, #36]	; (8008c54 <ProcessRadioRxDone+0x5c4>)
 8008c30:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008c34:	f043 0320 	orr.w	r3, r3, #32
 8008c38:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 8008c3c:	f7fe ff92 	bl	8007b64 <UpdateRxSlotIdleState>
}
 8008c40:	b023      	add	sp, #140	; 0x8c
 8008c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            OnAckTimeoutTimerEvent( NULL );
 8008c46:	2000      	movs	r0, #0
 8008c48:	f7ff f9b4 	bl	8007fb4 <OnAckTimeoutTimerEvent>
 8008c4c:	e7ef      	b.n	8008c2e <ProcessRadioRxDone+0x59e>
 8008c4e:	bf00      	nop
 8008c50:	20000bd4 	.word	0x20000bd4
 8008c54:	200006cc 	.word	0x200006cc

08008c58 <ProcessRadioTxTimeout>:
{
 8008c58:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008c5a:	4b0f      	ldr	r3, [pc, #60]	; (8008c98 <ProcessRadioTxTimeout+0x40>)
 8008c5c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d002      	beq.n	8008c6a <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 8008c64:	4b0d      	ldr	r3, [pc, #52]	; (8008c9c <ProcessRadioTxTimeout+0x44>)
 8008c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c68:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8008c6a:	f7fe ff7b 	bl	8007b64 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8008c6e:	4c0c      	ldr	r4, [pc, #48]	; (8008ca0 <ProcessRadioTxTimeout+0x48>)
 8008c70:	2002      	movs	r0, #2
 8008c72:	f884 0439 	strb.w	r0, [r4, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8008c76:	f002 fb51 	bl	800b31c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8008c7a:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8008c7e:	b113      	cbz	r3, 8008c86 <ProcessRadioTxTimeout+0x2e>
        MacCtx.AckTimeoutRetry = true;
 8008c80:	2201      	movs	r2, #1
 8008c82:	f884 2413 	strb.w	r2, [r4, #1043]	; 0x413
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008c86:	4a06      	ldr	r2, [pc, #24]	; (8008ca0 <ProcessRadioTxTimeout+0x48>)
 8008c88:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008c8c:	f043 0320 	orr.w	r3, r3, #32
 8008c90:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 8008c94:	bd10      	pop	{r4, pc}
 8008c96:	bf00      	nop
 8008c98:	20000bd4 	.word	0x20000bd4
 8008c9c:	08018400 	.word	0x08018400
 8008ca0:	200006cc 	.word	0x200006cc

08008ca4 <CheckForClassBCollision>:
{
 8008ca4:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008ca6:	f002 f8e7 	bl	800ae78 <LoRaMacClassBIsBeaconExpected>
 8008caa:	b978      	cbnz	r0, 8008ccc <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008cac:	4b09      	ldr	r3, [pc, #36]	; (8008cd4 <CheckForClassBCollision+0x30>)
 8008cae:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d001      	beq.n	8008cba <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 8008cb6:	2000      	movs	r0, #0
}
 8008cb8:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008cba:	f002 f8df 	bl	800ae7c <LoRaMacClassBIsPingExpected>
 8008cbe:	b938      	cbnz	r0, 8008cd0 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008cc0:	f002 f8de 	bl	800ae80 <LoRaMacClassBIsMulticastExpected>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	d0f7      	beq.n	8008cb8 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8008cc8:	200f      	movs	r0, #15
 8008cca:	e7f5      	b.n	8008cb8 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8008ccc:	200e      	movs	r0, #14
 8008cce:	e7f3      	b.n	8008cb8 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8008cd0:	200f      	movs	r0, #15
 8008cd2:	e7f1      	b.n	8008cb8 <CheckForClassBCollision+0x14>
 8008cd4:	20000bd4 	.word	0x20000bd4

08008cd8 <HandleRadioRxErrorTimeout>:
{
 8008cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cda:	4605      	mov	r5, r0
 8008cdc:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008cde:	4b37      	ldr	r3, [pc, #220]	; (8008dbc <HandleRadioRxErrorTimeout+0xe4>)
 8008ce0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d002      	beq.n	8008cee <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 8008ce8:	4b35      	ldr	r3, [pc, #212]	; (8008dc0 <HandleRadioRxErrorTimeout+0xe8>)
 8008cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cec:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008cee:	f002 f8c3 	bl	800ae78 <LoRaMacClassBIsBeaconExpected>
 8008cf2:	4606      	mov	r6, r0
 8008cf4:	bb00      	cbnz	r0, 8008d38 <HandleRadioRxErrorTimeout+0x60>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008cf6:	4b31      	ldr	r3, [pc, #196]	; (8008dbc <HandleRadioRxErrorTimeout+0xe4>)
 8008cf8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d022      	beq.n	8008d46 <HandleRadioRxErrorTimeout+0x6e>
    if( classBRx == false )
 8008d00:	b9be      	cbnz	r6, 8008d32 <HandleRadioRxErrorTimeout+0x5a>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008d02:	4b30      	ldr	r3, [pc, #192]	; (8008dc4 <HandleRadioRxErrorTimeout+0xec>)
 8008d04:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d13f      	bne.n	8008d8c <HandleRadioRxErrorTimeout+0xb4>
            if( MacCtx.NodeAckRequested == true )
 8008d0c:	4b2d      	ldr	r3, [pc, #180]	; (8008dc4 <HandleRadioRxErrorTimeout+0xec>)
 8008d0e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8008d12:	b113      	cbz	r3, 8008d1a <HandleRadioRxErrorTimeout+0x42>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8008d14:	4b2b      	ldr	r3, [pc, #172]	; (8008dc4 <HandleRadioRxErrorTimeout+0xec>)
 8008d16:	f883 5439 	strb.w	r5, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	f002 fafe 	bl	800b31c <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8008d20:	4b26      	ldr	r3, [pc, #152]	; (8008dbc <HandleRadioRxErrorTimeout+0xe4>)
 8008d22:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008d24:	f00e f8d6 	bl	8016ed4 <UTIL_TIMER_GetElapsedTime>
 8008d28:	4b26      	ldr	r3, [pc, #152]	; (8008dc4 <HandleRadioRxErrorTimeout+0xec>)
 8008d2a:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8008d2e:	4298      	cmp	r0, r3
 8008d30:	d220      	bcs.n	8008d74 <HandleRadioRxErrorTimeout+0x9c>
    UpdateRxSlotIdleState( );
 8008d32:	f7fe ff17 	bl	8007b64 <UpdateRxSlotIdleState>
}
 8008d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8008d38:	2002      	movs	r0, #2
 8008d3a:	f002 f893 	bl	800ae64 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8008d3e:	2000      	movs	r0, #0
 8008d40:	f002 f895 	bl	800ae6e <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8008d44:	e7d7      	b.n	8008cf6 <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008d46:	f002 f899 	bl	800ae7c <LoRaMacClassBIsPingExpected>
 8008d4a:	4607      	mov	r7, r0
 8008d4c:	b950      	cbnz	r0, 8008d64 <HandleRadioRxErrorTimeout+0x8c>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008d4e:	f002 f897 	bl	800ae80 <LoRaMacClassBIsMulticastExpected>
 8008d52:	2800      	cmp	r0, #0
 8008d54:	d0d4      	beq.n	8008d00 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008d56:	2000      	movs	r0, #0
 8008d58:	f002 f886 	bl	800ae68 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	f002 f888 	bl	800ae72 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 8008d62:	e7e6      	b.n	8008d32 <HandleRadioRxErrorTimeout+0x5a>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008d64:	2000      	movs	r0, #0
 8008d66:	f002 f87e 	bl	800ae66 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008d6a:	2000      	movs	r0, #0
 8008d6c:	f002 f880 	bl	800ae70 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8008d70:	463e      	mov	r6, r7
 8008d72:	e7ec      	b.n	8008d4e <HandleRadioRxErrorTimeout+0x76>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8008d74:	4c13      	ldr	r4, [pc, #76]	; (8008dc4 <HandleRadioRxErrorTimeout+0xec>)
 8008d76:	f504 7066 	add.w	r0, r4, #920	; 0x398
 8008d7a:	f00e f8e1 	bl	8016f40 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8008d7e:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 8008d82:	f043 0320 	orr.w	r3, r3, #32
 8008d86:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
 8008d8a:	e7d2      	b.n	8008d32 <HandleRadioRxErrorTimeout+0x5a>
            if( MacCtx.NodeAckRequested == true )
 8008d8c:	4b0d      	ldr	r3, [pc, #52]	; (8008dc4 <HandleRadioRxErrorTimeout+0xec>)
 8008d8e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8008d92:	b113      	cbz	r3, 8008d9a <HandleRadioRxErrorTimeout+0xc2>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8008d94:	4b0b      	ldr	r3, [pc, #44]	; (8008dc4 <HandleRadioRxErrorTimeout+0xec>)
 8008d96:	f883 4439 	strb.w	r4, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f002 fabe 	bl	800b31c <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008da0:	4b06      	ldr	r3, [pc, #24]	; (8008dbc <HandleRadioRxErrorTimeout+0xe4>)
 8008da2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d0c3      	beq.n	8008d32 <HandleRadioRxErrorTimeout+0x5a>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8008daa:	4a06      	ldr	r2, [pc, #24]	; (8008dc4 <HandleRadioRxErrorTimeout+0xec>)
 8008dac:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008db0:	f043 0320 	orr.w	r3, r3, #32
 8008db4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8008db8:	e7bb      	b.n	8008d32 <HandleRadioRxErrorTimeout+0x5a>
 8008dba:	bf00      	nop
 8008dbc:	20000bd4 	.word	0x20000bd4
 8008dc0:	08018400 	.word	0x08018400
 8008dc4:	200006cc 	.word	0x200006cc

08008dc8 <ProcessRadioRxError>:
{
 8008dc8:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8008dca:	2106      	movs	r1, #6
 8008dcc:	2005      	movs	r0, #5
 8008dce:	f7ff ff83 	bl	8008cd8 <HandleRadioRxErrorTimeout>
}
 8008dd2:	bd08      	pop	{r3, pc}

08008dd4 <ProcessRadioRxTimeout>:
{
 8008dd4:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8008dd6:	2104      	movs	r1, #4
 8008dd8:	2003      	movs	r0, #3
 8008dda:	f7ff ff7d 	bl	8008cd8 <HandleRadioRxErrorTimeout>
}
 8008dde:	bd08      	pop	{r3, pc}

08008de0 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008de0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008de4:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 8008de6:	4a14      	ldr	r2, [pc, #80]	; (8008e38 <LoRaMacHandleIrqEvents+0x58>)
 8008de8:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 8008dea:	2000      	movs	r0, #0
 8008dec:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dee:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 8008df2:	b303      	cbz	r3, 8008e36 <LoRaMacHandleIrqEvents+0x56>
{
 8008df4:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 8008df6:	b2dc      	uxtb	r4, r3
 8008df8:	f013 0f10 	tst.w	r3, #16
 8008dfc:	d10c      	bne.n	8008e18 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 8008dfe:	f014 0f08 	tst.w	r4, #8
 8008e02:	d10c      	bne.n	8008e1e <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 8008e04:	f014 0f04 	tst.w	r4, #4
 8008e08:	d10c      	bne.n	8008e24 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 8008e0a:	f014 0f02 	tst.w	r4, #2
 8008e0e:	d10c      	bne.n	8008e2a <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 8008e10:	f014 0f01 	tst.w	r4, #1
 8008e14:	d10c      	bne.n	8008e30 <LoRaMacHandleIrqEvents+0x50>
}
 8008e16:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 8008e18:	f7ff f84e 	bl	8007eb8 <ProcessRadioTxDone>
 8008e1c:	e7ef      	b.n	8008dfe <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 8008e1e:	f7ff fc37 	bl	8008690 <ProcessRadioRxDone>
 8008e22:	e7ef      	b.n	8008e04 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 8008e24:	f7ff ff18 	bl	8008c58 <ProcessRadioTxTimeout>
 8008e28:	e7ef      	b.n	8008e0a <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 8008e2a:	f7ff ffcd 	bl	8008dc8 <ProcessRadioRxError>
 8008e2e:	e7ef      	b.n	8008e10 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 8008e30:	f7ff ffd0 	bl	8008dd4 <ProcessRadioRxTimeout>
}
 8008e34:	e7ef      	b.n	8008e16 <LoRaMacHandleIrqEvents+0x36>
 8008e36:	4770      	bx	lr
 8008e38:	200006c8 	.word	0x200006c8

08008e3c <LoRaMacHandleMlmeRequest>:
{
 8008e3c:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008e3e:	4b16      	ldr	r3, [pc, #88]	; (8008e98 <LoRaMacHandleMlmeRequest+0x5c>)
 8008e40:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8008e44:	f013 0f04 	tst.w	r3, #4
 8008e48:	d100      	bne.n	8008e4c <LoRaMacHandleMlmeRequest+0x10>
}
 8008e4a:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008e4c:	2001      	movs	r0, #1
 8008e4e:	f002 fa83 	bl	800b358 <LoRaMacConfirmQueueIsCmdActive>
 8008e52:	b178      	cbz	r0, 8008e74 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8008e54:	2001      	movs	r0, #1
 8008e56:	f002 fa49 	bl	800b2ec <LoRaMacConfirmQueueGetStatus>
 8008e5a:	b918      	cbnz	r0, 8008e64 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 8008e5c:	4b0e      	ldr	r3, [pc, #56]	; (8008e98 <LoRaMacHandleMlmeRequest+0x5c>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008e64:	4a0c      	ldr	r2, [pc, #48]	; (8008e98 <LoRaMacHandleMlmeRequest+0x5c>)
 8008e66:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8008e6a:	f023 0302 	bic.w	r3, r3, #2
 8008e6e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 8008e72:	e7ea      	b.n	8008e4a <LoRaMacHandleMlmeRequest+0xe>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8008e74:	2005      	movs	r0, #5
 8008e76:	f002 fa6f 	bl	800b358 <LoRaMacConfirmQueueIsCmdActive>
 8008e7a:	b138      	cbz	r0, 8008e8c <LoRaMacHandleMlmeRequest+0x50>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008e7c:	4a06      	ldr	r2, [pc, #24]	; (8008e98 <LoRaMacHandleMlmeRequest+0x5c>)
 8008e7e:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8008e82:	f023 0302 	bic.w	r3, r3, #2
 8008e86:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8008e8a:	e7de      	b.n	8008e4a <LoRaMacHandleMlmeRequest+0xe>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8008e8c:	2006      	movs	r0, #6
 8008e8e:	f002 fa63 	bl	800b358 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8008e92:	2800      	cmp	r0, #0
 8008e94:	d0d9      	beq.n	8008e4a <LoRaMacHandleMlmeRequest+0xe>
 8008e96:	e7f1      	b.n	8008e7c <LoRaMacHandleMlmeRequest+0x40>
 8008e98:	200006cc 	.word	0x200006cc

08008e9c <AckTimeoutRetriesFinalize>:
    if( MacCtx.McpsConfirm.AckReceived == false )
 8008e9c:	4b14      	ldr	r3, [pc, #80]	; (8008ef0 <AckTimeoutRetriesFinalize+0x54>)
 8008e9e:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8008ea2:	b12b      	cbz	r3, 8008eb0 <AckTimeoutRetriesFinalize+0x14>
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8008ea4:	4b12      	ldr	r3, [pc, #72]	; (8008ef0 <AckTimeoutRetriesFinalize+0x54>)
 8008ea6:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8008eaa:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 8008eae:	4770      	bx	lr
{
 8008eb0:	b500      	push	{lr}
 8008eb2:	b085      	sub	sp, #20
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8008eb4:	2302      	movs	r3, #2
 8008eb6:	f88d 300c 	strb.w	r3, [sp, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8008eba:	4b0e      	ldr	r3, [pc, #56]	; (8008ef4 <AckTimeoutRetriesFinalize+0x58>)
 8008ebc:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 8008ec0:	9201      	str	r2, [sp, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8008ec2:	f503 721f 	add.w	r2, r3, #636	; 0x27c
 8008ec6:	9202      	str	r2, [sp, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8008ec8:	a901      	add	r1, sp, #4
 8008eca:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008ece:	f003 f820 	bl	800bf12 <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 8008ed2:	4b07      	ldr	r3, [pc, #28]	; (8008ef0 <AckTimeoutRetriesFinalize+0x54>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 8008eda:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8008ede:	4b04      	ldr	r3, [pc, #16]	; (8008ef0 <AckTimeoutRetriesFinalize+0x54>)
 8008ee0:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8008ee4:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 8008ee8:	b005      	add	sp, #20
 8008eea:	f85d fb04 	ldr.w	pc, [sp], #4
 8008eee:	bf00      	nop
 8008ef0:	200006cc 	.word	0x200006cc
 8008ef4:	20000bd4 	.word	0x20000bd4

08008ef8 <SerializeTxFrame>:
{
 8008ef8:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 8008efa:	4b0f      	ldr	r3, [pc, #60]	; (8008f38 <SerializeTxFrame+0x40>)
 8008efc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008f00:	b11b      	cbz	r3, 8008f0a <SerializeTxFrame+0x12>
 8008f02:	2b04      	cmp	r3, #4
 8008f04:	d00a      	beq.n	8008f1c <SerializeTxFrame+0x24>
 8008f06:	2003      	movs	r0, #3
}
 8008f08:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8008f0a:	480c      	ldr	r0, [pc, #48]	; (8008f3c <SerializeTxFrame+0x44>)
 8008f0c:	f002 fedd 	bl	800bcca <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8008f10:	b968      	cbnz	r0, 8008f2e <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8008f12:	4b09      	ldr	r3, [pc, #36]	; (8008f38 <SerializeTxFrame+0x40>)
 8008f14:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8008f18:	801a      	strh	r2, [r3, #0]
            break;
 8008f1a:	e7f5      	b.n	8008f08 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8008f1c:	4807      	ldr	r0, [pc, #28]	; (8008f3c <SerializeTxFrame+0x44>)
 8008f1e:	f002 ff0a 	bl	800bd36 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8008f22:	b930      	cbnz	r0, 8008f32 <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8008f24:	4b04      	ldr	r3, [pc, #16]	; (8008f38 <SerializeTxFrame+0x40>)
 8008f26:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8008f2a:	801a      	strh	r2, [r3, #0]
            break;
 8008f2c:	e7ec      	b.n	8008f08 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8008f2e:	2011      	movs	r0, #17
 8008f30:	e7ea      	b.n	8008f08 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8008f32:	2011      	movs	r0, #17
 8008f34:	e7e8      	b.n	8008f08 <SerializeTxFrame+0x10>
 8008f36:	bf00      	nop
 8008f38:	200006cc 	.word	0x200006cc
 8008f3c:	200007d4 	.word	0x200007d4

08008f40 <ComputeRxWindowParameters>:
{
 8008f40:	b570      	push	{r4, r5, r6, lr}
 8008f42:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008f44:	4c1d      	ldr	r4, [pc, #116]	; (8008fbc <ComputeRxWindowParameters+0x7c>)
 8008f46:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8008f4a:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
 8008f4e:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 8008f52:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 8008f56:	4630      	mov	r0, r6
 8008f58:	f003 faac 	bl	800c4b4 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008f5c:	4d18      	ldr	r5, [pc, #96]	; (8008fc0 <ComputeRxWindowParameters+0x80>)
 8008f5e:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008f66:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8008f6a:	b241      	sxtb	r1, r0
 8008f6c:	4630      	mov	r0, r6
 8008f6e:	f003 f886 	bl	800c07e <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008f72:	f505 7373 	add.w	r3, r5, #972	; 0x3cc
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008f7a:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8008f7e:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 8008f82:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8008f86:	f003 f87a 	bl	800c07e <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008f8a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008f8c:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 8008f90:	440b      	add	r3, r1
 8008f92:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008f96:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008f98:	f8d5 23d8 	ldr.w	r2, [r5, #984]	; 0x3d8
 8008f9c:	4413      	add	r3, r2
 8008f9e:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008fa2:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 8008fa6:	b93b      	cbnz	r3, 8008fb8 <ComputeRxWindowParameters+0x78>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008fa8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008faa:	4419      	add	r1, r3
 8008fac:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008fb0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008fb2:	440a      	add	r2, r1
 8008fb4:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 8008fb8:	b002      	add	sp, #8
 8008fba:	bd70      	pop	{r4, r5, r6, pc}
 8008fbc:	20000bd4 	.word	0x20000bd4
 8008fc0:	200006cc 	.word	0x200006cc

08008fc4 <VerifyTxFrame>:
{
 8008fc4:	b510      	push	{r4, lr}
 8008fc6:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8008fcc:	4b0d      	ldr	r3, [pc, #52]	; (8009004 <VerifyTxFrame+0x40>)
 8008fce:	f893 4110 	ldrb.w	r4, [r3, #272]	; 0x110
 8008fd2:	b914      	cbnz	r4, 8008fda <VerifyTxFrame+0x16>
}
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	b002      	add	sp, #8
 8008fd8:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8008fda:	a801      	add	r0, sp, #4
 8008fdc:	f002 f86c 	bl	800b0b8 <LoRaMacCommandsGetSizeSerializedCmds>
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	b968      	cbnz	r0, 8009000 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8008fe4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008fe8:	4b06      	ldr	r3, [pc, #24]	; (8009004 <VerifyTxFrame+0x40>)
 8008fea:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 8008fee:	4b06      	ldr	r3, [pc, #24]	; (8009008 <VerifyTxFrame+0x44>)
 8008ff0:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 8008ff4:	f7fe ff4e 	bl	8007e94 <ValidatePayloadLength>
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	d1eb      	bne.n	8008fd4 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8008ffc:	2408      	movs	r4, #8
 8008ffe:	e7e9      	b.n	8008fd4 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009000:	2413      	movs	r4, #19
 8009002:	e7e7      	b.n	8008fd4 <VerifyTxFrame+0x10>
 8009004:	20000bd4 	.word	0x20000bd4
 8009008:	200006cc 	.word	0x200006cc

0800900c <SecureFrame>:
{
 800900c:	b530      	push	{r4, r5, lr}
 800900e:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 8009010:	2300      	movs	r3, #0
 8009012:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 8009014:	4b1a      	ldr	r3, [pc, #104]	; (8009080 <SecureFrame+0x74>)
 8009016:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800901a:	b133      	cbz	r3, 800902a <SecureFrame+0x1e>
 800901c:	4605      	mov	r5, r0
 800901e:	460c      	mov	r4, r1
 8009020:	2b04      	cmp	r3, #4
 8009022:	d00b      	beq.n	800903c <SecureFrame+0x30>
 8009024:	2003      	movs	r0, #3
}
 8009026:	b003      	add	sp, #12
 8009028:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800902a:	4816      	ldr	r0, [pc, #88]	; (8009084 <SecureFrame+0x78>)
 800902c:	f002 fc0e 	bl	800b84c <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8009030:	bb00      	cbnz	r0, 8009074 <SecureFrame+0x68>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8009032:	4b13      	ldr	r3, [pc, #76]	; (8009080 <SecureFrame+0x74>)
 8009034:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8009038:	801a      	strh	r2, [r3, #0]
            break;
 800903a:	e7f4      	b.n	8009026 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800903c:	a801      	add	r0, sp, #4
 800903e:	f002 fba1 	bl	800b784 <LoRaMacCryptoGetFCntUp>
 8009042:	b9c8      	cbnz	r0, 8009078 <SecureFrame+0x6c>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8009044:	4b0e      	ldr	r3, [pc, #56]	; (8009080 <SecureFrame+0x74>)
 8009046:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800904a:	b923      	cbnz	r3, 8009056 <SecureFrame+0x4a>
 800904c:	4b0c      	ldr	r3, [pc, #48]	; (8009080 <SecureFrame+0x74>)
 800904e:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8009052:	2b01      	cmp	r3, #1
 8009054:	d902      	bls.n	800905c <SecureFrame+0x50>
                fCntUp -= 1;
 8009056:	9b01      	ldr	r3, [sp, #4]
 8009058:	3b01      	subs	r3, #1
 800905a:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800905c:	4b09      	ldr	r3, [pc, #36]	; (8009084 <SecureFrame+0x78>)
 800905e:	4622      	mov	r2, r4
 8009060:	4629      	mov	r1, r5
 8009062:	9801      	ldr	r0, [sp, #4]
 8009064:	f002 fc1e 	bl	800b8a4 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8009068:	b940      	cbnz	r0, 800907c <SecureFrame+0x70>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800906a:	4b05      	ldr	r3, [pc, #20]	; (8009080 <SecureFrame+0x74>)
 800906c:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8009070:	801a      	strh	r2, [r3, #0]
            break;
 8009072:	e7d8      	b.n	8009026 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8009074:	2011      	movs	r0, #17
 8009076:	e7d6      	b.n	8009026 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8009078:	2012      	movs	r0, #18
 800907a:	e7d4      	b.n	8009026 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800907c:	2011      	movs	r0, #17
 800907e:	e7d2      	b.n	8009026 <SecureFrame+0x1a>
 8009080:	200006cc 	.word	0x200006cc
 8009084:	200007d4 	.word	0x200007d4

08009088 <SendFrameOnChannel>:
{
 8009088:	b570      	push	{r4, r5, r6, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800908e:	2300      	movs	r3, #0
 8009090:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 8009094:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009098:	4d33      	ldr	r5, [pc, #204]	; (8009168 <SendFrameOnChannel+0xe0>)
 800909a:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 800909e:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80090a2:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 80090a6:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80090aa:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80090ac:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80090ae:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80090b0:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80090b2:	4c2e      	ldr	r4, [pc, #184]	; (800916c <SendFrameOnChannel+0xe4>)
 80090b4:	8823      	ldrh	r3, [r4, #0]
 80090b6:	f8ad 3014 	strh.w	r3, [sp, #20]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80090ba:	f504 6383 	add.w	r3, r4, #1048	; 0x418
 80090be:	f10d 0207 	add.w	r2, sp, #7
 80090c2:	a902      	add	r1, sp, #8
 80090c4:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 80090c8:	f003 f835 	bl	800c136 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	f884 3439 	strb.w	r3, [r4, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80090d2:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 80090d6:	f884 343a 	strb.w	r3, [r4, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 80090da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80090de:	f884 343b 	strb.w	r3, [r4, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 80090e2:	f8c4 6448 	str.w	r6, [r4, #1096]	; 0x448
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80090e6:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
 80090ea:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80090ee:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80090f2:	f001 fec7 	bl	800ae84 <LoRaMacClassBIsBeaconModeActive>
 80090f6:	bb58      	cbnz	r0, 8009150 <SendFrameOnChannel+0xc8>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80090f8:	4b1b      	ldr	r3, [pc, #108]	; (8009168 <SendFrameOnChannel+0xe0>)
 80090fa:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d02e      	beq.n	8009160 <SendFrameOnChannel+0xd8>
    LoRaMacClassBHaltBeaconing( );
 8009102:	f001 fec2 	bl	800ae8a <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8009106:	4b18      	ldr	r3, [pc, #96]	; (8009168 <SendFrameOnChannel+0xe0>)
 8009108:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800910c:	4b17      	ldr	r3, [pc, #92]	; (800916c <SendFrameOnChannel+0xe4>)
 800910e:	f893 1415 	ldrb.w	r1, [r3, #1045]	; 0x415
 8009112:	b2c0      	uxtb	r0, r0
 8009114:	f7ff ff7a 	bl	800900c <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 8009118:	4604      	mov	r4, r0
 800911a:	b9b0      	cbnz	r0, 800914a <SendFrameOnChannel+0xc2>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800911c:	4b13      	ldr	r3, [pc, #76]	; (800916c <SendFrameOnChannel+0xe4>)
 800911e:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8009122:	f042 0202 	orr.w	r2, r2, #2
 8009126:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 800912a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800912e:	b92b      	cbnz	r3, 800913c <SendFrameOnChannel+0xb4>
        MacCtx.ChannelsNbTransCounter++;
 8009130:	4a0e      	ldr	r2, [pc, #56]	; (800916c <SendFrameOnChannel+0xe4>)
 8009132:	f892 3410 	ldrb.w	r3, [r2, #1040]	; 0x410
 8009136:	3301      	adds	r3, #1
 8009138:	f882 3410 	strb.w	r3, [r2, #1040]	; 0x410
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800913c:	4b0c      	ldr	r3, [pc, #48]	; (8009170 <SendFrameOnChannel+0xe8>)
 800913e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009140:	480a      	ldr	r0, [pc, #40]	; (800916c <SendFrameOnChannel+0xe4>)
 8009142:	f830 1b02 	ldrh.w	r1, [r0], #2
 8009146:	b2c9      	uxtb	r1, r1
 8009148:	4798      	blx	r3
}
 800914a:	4620      	mov	r0, r4
 800914c:	b006      	add	sp, #24
 800914e:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8009150:	f8d4 0418 	ldr.w	r0, [r4, #1048]	; 0x418
 8009154:	f001 fea8 	bl	800aea8 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 8009158:	2800      	cmp	r0, #0
 800915a:	d0cd      	beq.n	80090f8 <SendFrameOnChannel+0x70>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800915c:	2410      	movs	r4, #16
 800915e:	e7f4      	b.n	800914a <SendFrameOnChannel+0xc2>
        LoRaMacClassBStopRxSlots( );
 8009160:	f001 fea4 	bl	800aeac <LoRaMacClassBStopRxSlots>
 8009164:	e7cd      	b.n	8009102 <SendFrameOnChannel+0x7a>
 8009166:	bf00      	nop
 8009168:	20000bd4 	.word	0x20000bd4
 800916c:	200006cc 	.word	0x200006cc
 8009170:	08018400 	.word	0x08018400

08009174 <ScheduleTx>:
{
 8009174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009178:	b08c      	sub	sp, #48	; 0x30
 800917a:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800917c:	f7ff fd92 	bl	8008ca4 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 8009180:	4604      	mov	r4, r0
 8009182:	b118      	cbz	r0, 800918c <ScheduleTx+0x18>
}
 8009184:	4620      	mov	r0, r4
 8009186:	b00c      	add	sp, #48	; 0x30
 8009188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800918c:	f7fe fd66 	bl	8007c5c <CalculateBackOff>
    status = SerializeTxFrame( );
 8009190:	f7ff feb2 	bl	8008ef8 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 8009194:	4604      	mov	r4, r0
 8009196:	2800      	cmp	r0, #0
 8009198:	d1f4      	bne.n	8009184 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800919a:	4e36      	ldr	r6, [pc, #216]	; (8009274 <ScheduleTx+0x100>)
 800919c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800919e:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80091a0:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 80091a4:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80091a8:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
 80091ac:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80091b0:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80091b4:	4640      	mov	r0, r8
 80091b6:	f00d fdf9 	bl	8016dac <SysTimeGetMcuTime>
 80091ba:	af02      	add	r7, sp, #8
 80091bc:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 80091c0:	9300      	str	r3, [sp, #0]
 80091c2:	f8d6 3104 	ldr.w	r3, [r6, #260]	; 0x104
 80091c6:	e898 0006 	ldmia.w	r8, {r1, r2}
 80091ca:	4638      	mov	r0, r7
 80091cc:	f00d fd8f 	bl	8016cee <SysTimeSub>
 80091d0:	ab07      	add	r3, sp, #28
 80091d2:	e897 0003 	ldmia.w	r7, {r0, r1}
 80091d6:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80091da:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80091dc:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 80091de:	2300      	movs	r3, #0
 80091e0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 80091e4:	2301      	movs	r3, #1
 80091e6:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80091ea:	4b23      	ldr	r3, [pc, #140]	; (8009278 <ScheduleTx+0x104>)
 80091ec:	881b      	ldrh	r3, [r3, #0]
 80091ee:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80091f2:	f896 3110 	ldrb.w	r3, [r6, #272]	; 0x110
 80091f6:	b92b      	cbnz	r3, 8009204 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 80091f8:	2301      	movs	r3, #1
 80091fa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 80091fe:	2300      	movs	r3, #0
 8009200:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8009204:	4a1c      	ldr	r2, [pc, #112]	; (8009278 <ScheduleTx+0x104>)
 8009206:	481b      	ldr	r0, [pc, #108]	; (8009274 <ScheduleTx+0x100>)
 8009208:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	f202 4384 	addw	r3, r2, #1156	; 0x484
 8009212:	f202 4215 	addw	r2, r2, #1045	; 0x415
 8009216:	a904      	add	r1, sp, #16
 8009218:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800921c:	f003 f8e8 	bl	800c3f0 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 8009220:	b1b0      	cbz	r0, 8009250 <ScheduleTx+0xdc>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8009222:	280b      	cmp	r0, #11
 8009224:	d122      	bne.n	800926c <ScheduleTx+0xf8>
 8009226:	b31d      	cbz	r5, 8009270 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 8009228:	4b13      	ldr	r3, [pc, #76]	; (8009278 <ScheduleTx+0x104>)
 800922a:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
 800922e:	2900      	cmp	r1, #0
 8009230:	d0a8      	beq.n	8009184 <ScheduleTx+0x10>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8009232:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8009236:	f042 0220 	orr.w	r2, r2, #32
 800923a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800923e:	f503 755a 	add.w	r5, r3, #872	; 0x368
 8009242:	4628      	mov	r0, r5
 8009244:	f00d ff24 	bl	8017090 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8009248:	4628      	mov	r0, r5
 800924a:	f00d fedb 	bl	8017004 <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 800924e:	e799      	b.n	8009184 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 8009250:	f7ff fe76 	bl	8008f40 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 8009254:	f7ff feb6 	bl	8008fc4 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 8009258:	4604      	mov	r4, r0
 800925a:	2800      	cmp	r0, #0
 800925c:	d192      	bne.n	8009184 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800925e:	4b06      	ldr	r3, [pc, #24]	; (8009278 <ScheduleTx+0x104>)
 8009260:	f893 0415 	ldrb.w	r0, [r3, #1045]	; 0x415
 8009264:	f7ff ff10 	bl	8009088 <SendFrameOnChannel>
 8009268:	4604      	mov	r4, r0
 800926a:	e78b      	b.n	8009184 <ScheduleTx+0x10>
            return status;
 800926c:	4604      	mov	r4, r0
 800926e:	e789      	b.n	8009184 <ScheduleTx+0x10>
 8009270:	4604      	mov	r4, r0
 8009272:	e787      	b.n	8009184 <ScheduleTx+0x10>
 8009274:	20000bd4 	.word	0x20000bd4
 8009278:	200006cc 	.word	0x200006cc

0800927c <OnTxDelayedTimerEvent>:
{
 800927c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800927e:	4c11      	ldr	r4, [pc, #68]	; (80092c4 <OnTxDelayedTimerEvent+0x48>)
 8009280:	f504 705a 	add.w	r0, r4, #872	; 0x368
 8009284:	f00d fe5c 	bl	8016f40 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009288:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800928c:	f023 0320 	bic.w	r3, r3, #32
 8009290:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    switch( ScheduleTx( true ) )
 8009294:	2001      	movs	r0, #1
 8009296:	f7ff ff6d 	bl	8009174 <ScheduleTx>
 800929a:	b108      	cbz	r0, 80092a0 <OnTxDelayedTimerEvent+0x24>
 800929c:	280b      	cmp	r0, #11
 800929e:	d100      	bne.n	80092a2 <OnTxDelayedTimerEvent+0x26>
}
 80092a0:	bd10      	pop	{r4, pc}
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80092a2:	4b09      	ldr	r3, [pc, #36]	; (80092c8 <OnTxDelayedTimerEvent+0x4c>)
 80092a4:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80092a8:	f884 243a 	strb.w	r2, [r4, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80092ac:	f894 2412 	ldrb.w	r2, [r4, #1042]	; 0x412
 80092b0:	f884 243d 	strb.w	r2, [r4, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80092b4:	2009      	movs	r0, #9
 80092b6:	f884 0439 	strb.w	r0, [r4, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 80092ba:	f002 f82f 	bl	800b31c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 80092be:	f7fe fd5f 	bl	8007d80 <StopRetransmission>
}
 80092c2:	e7ed      	b.n	80092a0 <OnTxDelayedTimerEvent+0x24>
 80092c4:	200006cc 	.word	0x200006cc
 80092c8:	20000bd4 	.word	0x20000bd4

080092cc <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80092cc:	4b23      	ldr	r3, [pc, #140]	; (800935c <LoRaMacHandleMcpsRequest+0x90>)
 80092ce:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80092d2:	f013 0f01 	tst.w	r3, #1
 80092d6:	d040      	beq.n	800935a <LoRaMacHandleMcpsRequest+0x8e>
{
 80092d8:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80092da:	4b20      	ldr	r3, [pc, #128]	; (800935c <LoRaMacHandleMcpsRequest+0x90>)
 80092dc:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 80092e0:	b12b      	cbz	r3, 80092ee <LoRaMacHandleMcpsRequest+0x22>
 80092e2:	2b03      	cmp	r3, #3
 80092e4:	d003      	beq.n	80092ee <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d007      	beq.n	80092fa <LoRaMacHandleMcpsRequest+0x2e>
        bool waitForRetransmission = false;
 80092ea:	2400      	movs	r4, #0
 80092ec:	e003      	b.n	80092f6 <LoRaMacHandleMcpsRequest+0x2a>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 80092ee:	f7fe fd0b 	bl	8007d08 <CheckRetransUnconfirmedUplink>
 80092f2:	4604      	mov	r4, r0
        if( stopRetransmission == true )
 80092f4:	b9a4      	cbnz	r4, 8009320 <LoRaMacHandleMcpsRequest+0x54>
        else if( waitForRetransmission == false )
 80092f6:	b31c      	cbz	r4, 8009340 <LoRaMacHandleMcpsRequest+0x74>
}
 80092f8:	bd10      	pop	{r4, pc}
            if( MacCtx.AckTimeoutRetry == true )
 80092fa:	4b18      	ldr	r3, [pc, #96]	; (800935c <LoRaMacHandleMcpsRequest+0x90>)
 80092fc:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 8009300:	b1e3      	cbz	r3, 800933c <LoRaMacHandleMcpsRequest+0x70>
                stopRetransmission = CheckRetransConfirmedUplink( );
 8009302:	f7fe fd25 	bl	8007d50 <CheckRetransConfirmedUplink>
 8009306:	4604      	mov	r4, r0
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8009308:	4b15      	ldr	r3, [pc, #84]	; (8009360 <LoRaMacHandleMcpsRequest+0x94>)
 800930a:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1f0      	bne.n	80092f4 <LoRaMacHandleMcpsRequest+0x28>
                    if( stopRetransmission == false )
 8009312:	b910      	cbnz	r0, 800931a <LoRaMacHandleMcpsRequest+0x4e>
                        AckTimeoutRetriesProcess( );
 8009314:	f7fe fd74 	bl	8007e00 <AckTimeoutRetriesProcess>
 8009318:	e7ec      	b.n	80092f4 <LoRaMacHandleMcpsRequest+0x28>
                        AckTimeoutRetriesFinalize( );
 800931a:	f7ff fdbf 	bl	8008e9c <AckTimeoutRetriesFinalize>
 800931e:	e7e9      	b.n	80092f4 <LoRaMacHandleMcpsRequest+0x28>
            TimerStop( &MacCtx.TxDelayedTimer );
 8009320:	4c0e      	ldr	r4, [pc, #56]	; (800935c <LoRaMacHandleMcpsRequest+0x90>)
 8009322:	f504 705a 	add.w	r0, r4, #872	; 0x368
 8009326:	f00d fe0b 	bl	8016f40 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800932a:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800932e:	f023 0320 	bic.w	r3, r3, #32
 8009332:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 8009336:	f7fe fd23 	bl	8007d80 <StopRetransmission>
 800933a:	e7dd      	b.n	80092f8 <LoRaMacHandleMcpsRequest+0x2c>
                waitForRetransmission = true;
 800933c:	2401      	movs	r4, #1
 800933e:	e7da      	b.n	80092f6 <LoRaMacHandleMcpsRequest+0x2a>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8009340:	4b06      	ldr	r3, [pc, #24]	; (800935c <LoRaMacHandleMcpsRequest+0x90>)
 8009342:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8009346:	f36f 1245 	bfc	r2, #5, #1
 800934a:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800934e:	2000      	movs	r0, #0
 8009350:	f883 0413 	strb.w	r0, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 8009354:	f7ff ff92 	bl	800927c <OnTxDelayedTimerEvent>
}
 8009358:	e7ce      	b.n	80092f8 <LoRaMacHandleMcpsRequest+0x2c>
 800935a:	4770      	bx	lr
 800935c:	200006cc 	.word	0x200006cc
 8009360:	20000bd4 	.word	0x20000bd4

08009364 <LoRaMacHandleRequestEvents>:
{
 8009364:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 8009366:	4b22      	ldr	r3, [pc, #136]	; (80093f0 <LoRaMacHandleRequestEvents+0x8c>)
 8009368:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800936c:	bb7b      	cbnz	r3, 80093ce <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800936e:	4b20      	ldr	r3, [pc, #128]	; (80093f0 <LoRaMacHandleRequestEvents+0x8c>)
 8009370:	f893 4481 	ldrb.w	r4, [r3, #1153]	; 0x481
 8009374:	f014 0501 	ands.w	r5, r4, #1
 8009378:	d005      	beq.n	8009386 <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800937a:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800937e:	f36f 0200 	bfc	r2, #0, #1
 8009382:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009386:	4b1a      	ldr	r3, [pc, #104]	; (80093f0 <LoRaMacHandleRequestEvents+0x8c>)
 8009388:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800938c:	f013 0f04 	tst.w	r3, #4
 8009390:	d006      	beq.n	80093a0 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009392:	4b17      	ldr	r3, [pc, #92]	; (80093f0 <LoRaMacHandleRequestEvents+0x8c>)
 8009394:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8009398:	f36f 0282 	bfc	r2, #2, #1
 800939c:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80093a0:	2001      	movs	r0, #1
 80093a2:	f7fe fbf3 	bl	8007b8c <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 80093a6:	b135      	cbz	r5, 80093b6 <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 80093a8:	4811      	ldr	r0, [pc, #68]	; (80093f0 <LoRaMacHandleRequestEvents+0x8c>)
 80093aa:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f500 6087 	add.w	r0, r0, #1080	; 0x438
 80093b4:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 80093b6:	f014 0f04 	tst.w	r4, #4
 80093ba:	d109      	bne.n	80093d0 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 80093bc:	f001 fd66 	bl	800ae8c <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 80093c0:	4b0b      	ldr	r3, [pc, #44]	; (80093f0 <LoRaMacHandleRequestEvents+0x8c>)
 80093c2:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 80093c6:	f36f 1245 	bfc	r2, #5, #1
 80093ca:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
}
 80093ce:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 80093d0:	4808      	ldr	r0, [pc, #32]	; (80093f4 <LoRaMacHandleRequestEvents+0x90>)
 80093d2:	f001 ffcd 	bl	800b370 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 80093d6:	f001 fffd 	bl	800b3d4 <LoRaMacConfirmQueueGetCnt>
 80093da:	2800      	cmp	r0, #0
 80093dc:	d0ee      	beq.n	80093bc <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80093de:	4a04      	ldr	r2, [pc, #16]	; (80093f0 <LoRaMacHandleRequestEvents+0x8c>)
 80093e0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80093e4:	f043 0304 	orr.w	r3, r3, #4
 80093e8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 80093ec:	e7e6      	b.n	80093bc <LoRaMacHandleRequestEvents+0x58>
 80093ee:	bf00      	nop
 80093f0:	200006cc 	.word	0x200006cc
 80093f4:	20000b18 	.word	0x20000b18

080093f8 <LoRaMacHandleScheduleUplinkEvent>:
    if( MacCtx.MacState == LORAMAC_IDLE )
 80093f8:	4b0a      	ldr	r3, [pc, #40]	; (8009424 <LoRaMacHandleScheduleUplinkEvent+0x2c>)
 80093fa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80093fe:	b103      	cbz	r3, 8009402 <LoRaMacHandleScheduleUplinkEvent+0xa>
 8009400:	4770      	bx	lr
{
 8009402:	b500      	push	{lr}
 8009404:	b083      	sub	sp, #12
        bool isStickyMacCommandPending = false;
 8009406:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800940a:	f10d 0007 	add.w	r0, sp, #7
 800940e:	f001 fe91 	bl	800b134 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8009412:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009416:	b913      	cbnz	r3, 800941e <LoRaMacHandleScheduleUplinkEvent+0x26>
}
 8009418:	b003      	add	sp, #12
 800941a:	f85d fb04 	ldr.w	pc, [sp], #4
            SetMlmeScheduleUplinkIndication( );
 800941e:	f7fe fc13 	bl	8007c48 <SetMlmeScheduleUplinkIndication>
}
 8009422:	e7f9      	b.n	8009418 <LoRaMacHandleScheduleUplinkEvent+0x20>
 8009424:	200006cc 	.word	0x200006cc

08009428 <LoRaMacHandleNvm>:
{
 8009428:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800942a:	4b30      	ldr	r3, [pc, #192]	; (80094ec <LoRaMacHandleNvm+0xc4>)
 800942c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009430:	b103      	cbz	r3, 8009434 <LoRaMacHandleNvm+0xc>
}
 8009432:	bd38      	pop	{r3, r4, r5, pc}
 8009434:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8009436:	2124      	movs	r1, #36	; 0x24
 8009438:	f00b f8de 	bl	80145f8 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800943c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800943e:	4283      	cmp	r3, r0
 8009440:	d052      	beq.n	80094e8 <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 8009442:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8009444:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8009446:	2114      	movs	r1, #20
 8009448:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800944c:	f00b f8d4 	bl	80145f8 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 8009450:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009452:	4283      	cmp	r3, r0
 8009454:	d002      	beq.n	800945c <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 8009456:	63e0      	str	r0, [r4, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8009458:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800945c:	21d4      	movs	r1, #212	; 0xd4
 800945e:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8009462:	f00b f8c9 	bl	80145f8 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 8009466:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800946a:	4283      	cmp	r3, r0
 800946c:	d003      	beq.n	8009476 <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 800946e:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8009472:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8009476:	21bc      	movs	r1, #188	; 0xbc
 8009478:	f504 708c 	add.w	r0, r4, #280	; 0x118
 800947c:	f00b f8bc 	bl	80145f8 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 8009480:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 8009484:	4283      	cmp	r3, r0
 8009486:	d003      	beq.n	8009490 <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 8009488:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800948c:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8009490:	21a0      	movs	r1, #160	; 0xa0
 8009492:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
 8009496:	f00b f8af 	bl	80145f8 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800949a:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
 800949e:	4283      	cmp	r3, r0
 80094a0:	d003      	beq.n	80094aa <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 80094a2:	f8c4 0278 	str.w	r0, [r4, #632]	; 0x278
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 80094a6:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 80094aa:	f44f 6193 	mov.w	r1, #1176	; 0x498
 80094ae:	f504 701f 	add.w	r0, r4, #636	; 0x27c
 80094b2:	f00b f8a1 	bl	80145f8 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 80094b6:	f8d4 3714 	ldr.w	r3, [r4, #1812]	; 0x714
 80094ba:	4283      	cmp	r3, r0
 80094bc:	d003      	beq.n	80094c6 <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 80094be:	f8c4 0714 	str.w	r0, [r4, #1812]	; 0x714
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 80094c2:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 80094c6:	2114      	movs	r1, #20
 80094c8:	f504 60e3 	add.w	r0, r4, #1816	; 0x718
 80094cc:	f00b f894 	bl	80145f8 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 80094d0:	f8d4 372c 	ldr.w	r3, [r4, #1836]	; 0x72c
 80094d4:	4283      	cmp	r3, r0
 80094d6:	d003      	beq.n	80094e0 <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 80094d8:	f8c4 072c 	str.w	r0, [r4, #1836]	; 0x72c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 80094dc:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 80094e0:	4628      	mov	r0, r5
 80094e2:	f7fe fc75 	bl	8007dd0 <CallNvmDataChangeCallback>
 80094e6:	e7a4      	b.n	8009432 <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 80094e8:	2500      	movs	r5, #0
 80094ea:	e7ac      	b.n	8009446 <LoRaMacHandleNvm+0x1e>
 80094ec:	200006cc 	.word	0x200006cc

080094f0 <RestoreNvmData>:
    if( nvm == NULL )
 80094f0:	2800      	cmp	r0, #0
 80094f2:	d07a      	beq.n	80095ea <RestoreNvmData+0xfa>
{
 80094f4:	b570      	push	{r4, r5, r6, lr}
 80094f6:	4604      	mov	r4, r0
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80094f8:	4b3d      	ldr	r3, [pc, #244]	; (80095f0 <RestoreNvmData+0x100>)
 80094fa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d001      	beq.n	8009506 <RestoreNvmData+0x16>
        return LORAMAC_STATUS_BUSY;
 8009502:	2001      	movs	r0, #1
}
 8009504:	bd70      	pop	{r4, r5, r6, pc}
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 8009506:	2124      	movs	r1, #36	; 0x24
 8009508:	f00b f876 	bl	80145f8 <Crc32>
    if( crc == nvm->Crypto.Crc32 )
 800950c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800950e:	4283      	cmp	r3, r0
 8009510:	d032      	beq.n	8009578 <RestoreNvmData+0x88>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 8009512:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8009516:	2114      	movs	r1, #20
 8009518:	4628      	mov	r0, r5
 800951a:	f00b f86d 	bl	80145f8 <Crc32>
    if( crc == nvm->MacGroup1.Crc32 )
 800951e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009520:	4283      	cmp	r3, r0
 8009522:	d02f      	beq.n	8009584 <RestoreNvmData+0x94>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 8009524:	f104 0540 	add.w	r5, r4, #64	; 0x40
 8009528:	21d4      	movs	r1, #212	; 0xd4
 800952a:	4628      	mov	r0, r5
 800952c:	f00b f864 	bl	80145f8 <Crc32>
    if( crc == nvm->MacGroup2.Crc32 )
 8009530:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8009534:	4283      	cmp	r3, r0
 8009536:	d02b      	beq.n	8009590 <RestoreNvmData+0xa0>
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 8009538:	f504 758c 	add.w	r5, r4, #280	; 0x118
 800953c:	21bc      	movs	r1, #188	; 0xbc
 800953e:	4628      	mov	r0, r5
 8009540:	f00b f85a 	bl	80145f8 <Crc32>
    if( crc == nvm->SecureElement.Crc32 )
 8009544:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 8009548:	4283      	cmp	r3, r0
 800954a:	d03b      	beq.n	80095c4 <RestoreNvmData+0xd4>
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 800954c:	f504 75ec 	add.w	r5, r4, #472	; 0x1d8
 8009550:	21a0      	movs	r1, #160	; 0xa0
 8009552:	4628      	mov	r0, r5
 8009554:	f00b f850 	bl	80145f8 <Crc32>
    if( crc == nvm->RegionGroup1.Crc32 )
 8009558:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
 800955c:	4283      	cmp	r3, r0
 800955e:	d037      	beq.n	80095d0 <RestoreNvmData+0xe0>
    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 8009560:	f504 65e3 	add.w	r5, r4, #1816	; 0x718
 8009564:	2114      	movs	r1, #20
 8009566:	4628      	mov	r0, r5
 8009568:	f00b f846 	bl	80145f8 <Crc32>
    if( crc == nvm->ClassB.Crc32 )
 800956c:	f8d4 372c 	ldr.w	r3, [r4, #1836]	; 0x72c
 8009570:	4283      	cmp	r3, r0
 8009572:	d033      	beq.n	80095dc <RestoreNvmData+0xec>
    return LORAMAC_STATUS_OK;
 8009574:	2000      	movs	r0, #0
 8009576:	e7c5      	b.n	8009504 <RestoreNvmData+0x14>
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 8009578:	2228      	movs	r2, #40	; 0x28
 800957a:	4621      	mov	r1, r4
 800957c:	481d      	ldr	r0, [pc, #116]	; (80095f4 <RestoreNvmData+0x104>)
 800957e:	f00b f81c 	bl	80145ba <memcpy1>
 8009582:	e7c6      	b.n	8009512 <RestoreNvmData+0x22>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 8009584:	2218      	movs	r2, #24
 8009586:	4629      	mov	r1, r5
 8009588:	481b      	ldr	r0, [pc, #108]	; (80095f8 <RestoreNvmData+0x108>)
 800958a:	f00b f816 	bl	80145ba <memcpy1>
 800958e:	e7c9      	b.n	8009524 <RestoreNvmData+0x34>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 8009590:	4e18      	ldr	r6, [pc, #96]	; (80095f4 <RestoreNvmData+0x104>)
 8009592:	22d8      	movs	r2, #216	; 0xd8
 8009594:	4629      	mov	r1, r5
 8009596:	f106 0040 	add.w	r0, r6, #64	; 0x40
 800959a:	f00b f80e 	bl	80145ba <memcpy1>
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800959e:	4b14      	ldr	r3, [pc, #80]	; (80095f0 <RestoreNvmData+0x100>)
 80095a0:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 80095a4:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80095a8:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
 80095aa:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80095ae:	f896 2075 	ldrb.w	r2, [r6, #117]	; 0x75
 80095b2:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80095bc:	2202      	movs	r2, #2
 80095be:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
 80095c2:	e7b9      	b.n	8009538 <RestoreNvmData+0x48>
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 80095c4:	22c0      	movs	r2, #192	; 0xc0
 80095c6:	4629      	mov	r1, r5
 80095c8:	480c      	ldr	r0, [pc, #48]	; (80095fc <RestoreNvmData+0x10c>)
 80095ca:	f00a fff6 	bl	80145ba <memcpy1>
 80095ce:	e7bd      	b.n	800954c <RestoreNvmData+0x5c>
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 80095d0:	22a4      	movs	r2, #164	; 0xa4
 80095d2:	4629      	mov	r1, r5
 80095d4:	480a      	ldr	r0, [pc, #40]	; (8009600 <RestoreNvmData+0x110>)
 80095d6:	f00a fff0 	bl	80145ba <memcpy1>
 80095da:	e7c1      	b.n	8009560 <RestoreNvmData+0x70>
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 80095dc:	2218      	movs	r2, #24
 80095de:	4629      	mov	r1, r5
 80095e0:	4808      	ldr	r0, [pc, #32]	; (8009604 <RestoreNvmData+0x114>)
 80095e2:	f00a ffea 	bl	80145ba <memcpy1>
    return LORAMAC_STATUS_OK;
 80095e6:	2000      	movs	r0, #0
 80095e8:	e78c      	b.n	8009504 <RestoreNvmData+0x14>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80095ea:	2003      	movs	r0, #3
}
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	200006cc 	.word	0x200006cc
 80095f4:	20000bd4 	.word	0x20000bd4
 80095f8:	20000bfc 	.word	0x20000bfc
 80095fc:	20000cec 	.word	0x20000cec
 8009600:	20000dac 	.word	0x20000dac
 8009604:	200012ec 	.word	0x200012ec

08009608 <OpenContinuousRxCWindow>:
{
 8009608:	b570      	push	{r4, r5, r6, lr}
 800960a:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800960c:	4c12      	ldr	r4, [pc, #72]	; (8009658 <OpenContinuousRxCWindow+0x50>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800960e:	4d13      	ldr	r5, [pc, #76]	; (800965c <OpenContinuousRxCWindow+0x54>)
 8009610:	f505 7678 	add.w	r6, r5, #992	; 0x3e0
 8009614:	9600      	str	r6, [sp, #0]
 8009616:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009618:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800961c:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 8009620:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009624:	f002 fd2b 	bl	800c07e <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009628:	2302      	movs	r3, #2
 800962a:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800962e:	2301      	movs	r3, #1
 8009630:	f885 33f2 	strb.w	r3, [r5, #1010]	; 0x3f2
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009634:	f505 6284 	add.w	r2, r5, #1056	; 0x420
 8009638:	4631      	mov	r1, r6
 800963a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800963e:	f002 fd50 	bl	800c0e2 <RegionRxConfig>
 8009642:	b138      	cbz	r0, 8009654 <OpenContinuousRxCWindow+0x4c>
        Radio.Rx( 0 ); // Continuous mode
 8009644:	4b06      	ldr	r3, [pc, #24]	; (8009660 <OpenContinuousRxCWindow+0x58>)
 8009646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009648:	2000      	movs	r0, #0
 800964a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800964c:	f895 23f3 	ldrb.w	r2, [r5, #1011]	; 0x3f3
 8009650:	f885 2480 	strb.w	r2, [r5, #1152]	; 0x480
}
 8009654:	b002      	add	sp, #8
 8009656:	bd70      	pop	{r4, r5, r6, pc}
 8009658:	20000bd4 	.word	0x20000bd4
 800965c:	200006cc 	.word	0x200006cc
 8009660:	08018400 	.word	0x08018400

08009664 <RxWindowSetup>:
{
 8009664:	b510      	push	{r4, lr}
 8009666:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 8009668:	f00d fc6a 	bl	8016f40 <UTIL_TIMER_Stop>
    Radio.Standby( );
 800966c:	4b0a      	ldr	r3, [pc, #40]	; (8009698 <RxWindowSetup+0x34>)
 800966e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009670:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009672:	4a0a      	ldr	r2, [pc, #40]	; (800969c <RxWindowSetup+0x38>)
 8009674:	4621      	mov	r1, r4
 8009676:	4b0a      	ldr	r3, [pc, #40]	; (80096a0 <RxWindowSetup+0x3c>)
 8009678:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800967c:	f002 fd31 	bl	800c0e2 <RegionRxConfig>
 8009680:	b140      	cbz	r0, 8009694 <RxWindowSetup+0x30>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8009682:	4b05      	ldr	r3, [pc, #20]	; (8009698 <RxWindowSetup+0x34>)
 8009684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009686:	4a06      	ldr	r2, [pc, #24]	; (80096a0 <RxWindowSetup+0x3c>)
 8009688:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800968a:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800968c:	7ce2      	ldrb	r2, [r4, #19]
 800968e:	4b05      	ldr	r3, [pc, #20]	; (80096a4 <RxWindowSetup+0x40>)
 8009690:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 8009694:	bd10      	pop	{r4, pc}
 8009696:	bf00      	nop
 8009698:	08018400 	.word	0x08018400
 800969c:	20000aec 	.word	0x20000aec
 80096a0:	20000bd4 	.word	0x20000bd4
 80096a4:	200006cc 	.word	0x200006cc

080096a8 <OnRxWindow2TimerEvent>:
{
 80096a8:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80096aa:	4b11      	ldr	r3, [pc, #68]	; (80096f0 <OnRxWindow2TimerEvent+0x48>)
 80096ac:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 80096b0:	b903      	cbnz	r3, 80096b4 <OnRxWindow2TimerEvent+0xc>
}
 80096b2:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80096b4:	480e      	ldr	r0, [pc, #56]	; (80096f0 <OnRxWindow2TimerEvent+0x48>)
 80096b6:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415
 80096ba:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80096be:	4b0d      	ldr	r3, [pc, #52]	; (80096f4 <OnRxWindow2TimerEvent+0x4c>)
 80096c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80096c2:	f8c0 23d0 	str.w	r2, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80096c6:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80096ca:	f880 23dc 	strb.w	r2, [r0, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80096ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096d2:	f880 33dd 	strb.w	r3, [r0, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 80096d6:	2300      	movs	r3, #0
 80096d8:	f880 33de 	strb.w	r3, [r0, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80096dc:	2301      	movs	r3, #1
 80096de:	f880 33df 	strb.w	r3, [r0, #991]	; 0x3df
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80096e2:	f500 7173 	add.w	r1, r0, #972	; 0x3cc
 80096e6:	f500 7066 	add.w	r0, r0, #920	; 0x398
 80096ea:	f7ff ffbb 	bl	8009664 <RxWindowSetup>
 80096ee:	e7e0      	b.n	80096b2 <OnRxWindow2TimerEvent+0xa>
 80096f0:	200006cc 	.word	0x200006cc
 80096f4:	20000bd4 	.word	0x20000bd4

080096f8 <OnRxWindow1TimerEvent>:
{
 80096f8:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80096fa:	480f      	ldr	r0, [pc, #60]	; (8009738 <OnRxWindow1TimerEvent+0x40>)
 80096fc:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415
 8009700:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8009704:	4b0d      	ldr	r3, [pc, #52]	; (800973c <OnRxWindow1TimerEvent+0x44>)
 8009706:	f993 2061 	ldrsb.w	r2, [r3, #97]	; 0x61
 800970a:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800970e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8009712:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8009716:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800971a:	f880 33c9 	strb.w	r3, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800971e:	2300      	movs	r3, #0
 8009720:	f880 33ca 	strb.w	r3, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8009724:	f880 33cb 	strb.w	r3, [r0, #971]	; 0x3cb
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8009728:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 800972c:	f500 7060 	add.w	r0, r0, #896	; 0x380
 8009730:	f7ff ff98 	bl	8009664 <RxWindowSetup>
}
 8009734:	bd08      	pop	{r3, pc}
 8009736:	bf00      	nop
 8009738:	200006cc 	.word	0x200006cc
 800973c:	20000bd4 	.word	0x20000bd4

08009740 <OnRadioRxTimeout>:
{
 8009740:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8009742:	4a09      	ldr	r2, [pc, #36]	; (8009768 <OnRadioRxTimeout+0x28>)
 8009744:	7813      	ldrb	r3, [r2, #0]
 8009746:	f043 0301 	orr.w	r3, r3, #1
 800974a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800974c:	4b07      	ldr	r3, [pc, #28]	; (800976c <OnRadioRxTimeout+0x2c>)
 800974e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009752:	b113      	cbz	r3, 800975a <OnRadioRxTimeout+0x1a>
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	b103      	cbz	r3, 800975a <OnRadioRxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009758:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800975a:	4b05      	ldr	r3, [pc, #20]	; (8009770 <OnRadioRxTimeout+0x30>)
 800975c:	2201      	movs	r2, #1
 800975e:	2100      	movs	r1, #0
 8009760:	2002      	movs	r0, #2
 8009762:	f00d f8b3 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
}
 8009766:	bd08      	pop	{r3, pc}
 8009768:	200006c8 	.word	0x200006c8
 800976c:	200006cc 	.word	0x200006cc
 8009770:	08017b74 	.word	0x08017b74

08009774 <OnRadioTxTimeout>:
{
 8009774:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8009776:	4a09      	ldr	r2, [pc, #36]	; (800979c <OnRadioTxTimeout+0x28>)
 8009778:	7813      	ldrb	r3, [r2, #0]
 800977a:	f043 0304 	orr.w	r3, r3, #4
 800977e:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009780:	4b07      	ldr	r3, [pc, #28]	; (80097a0 <OnRadioTxTimeout+0x2c>)
 8009782:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009786:	b113      	cbz	r3, 800978e <OnRadioTxTimeout+0x1a>
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	b103      	cbz	r3, 800978e <OnRadioTxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800978c:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800978e:	4b05      	ldr	r3, [pc, #20]	; (80097a4 <OnRadioTxTimeout+0x30>)
 8009790:	2201      	movs	r2, #1
 8009792:	2100      	movs	r1, #0
 8009794:	2002      	movs	r0, #2
 8009796:	f00d f899 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
}
 800979a:	bd08      	pop	{r3, pc}
 800979c:	200006c8 	.word	0x200006c8
 80097a0:	200006cc 	.word	0x200006cc
 80097a4:	08017b84 	.word	0x08017b84

080097a8 <OnRadioRxDone>:
{
 80097a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ac:	4680      	mov	r8, r0
 80097ae:	460f      	mov	r7, r1
 80097b0:	4616      	mov	r6, r2
 80097b2:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80097b4:	f00d fb84 	bl	8016ec0 <UTIL_TIMER_GetCurrentTime>
 80097b8:	4c0d      	ldr	r4, [pc, #52]	; (80097f0 <OnRadioRxDone+0x48>)
 80097ba:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 80097bc:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 80097c0:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 80097c2:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 80097c4:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 80097c6:	4a0b      	ldr	r2, [pc, #44]	; (80097f4 <OnRadioRxDone+0x4c>)
 80097c8:	7813      	ldrb	r3, [r2, #0]
 80097ca:	f043 0308 	orr.w	r3, r3, #8
 80097ce:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80097d0:	4b09      	ldr	r3, [pc, #36]	; (80097f8 <OnRadioRxDone+0x50>)
 80097d2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80097d6:	b113      	cbz	r3, 80097de <OnRadioRxDone+0x36>
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	b103      	cbz	r3, 80097de <OnRadioRxDone+0x36>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80097dc:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 80097de:	4b07      	ldr	r3, [pc, #28]	; (80097fc <OnRadioRxDone+0x54>)
 80097e0:	2201      	movs	r2, #1
 80097e2:	2100      	movs	r1, #0
 80097e4:	2002      	movs	r0, #2
 80097e6:	f00d f871 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
}
 80097ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097ee:	bf00      	nop
 80097f0:	200024f0 	.word	0x200024f0
 80097f4:	200006c8 	.word	0x200006c8
 80097f8:	200006cc 	.word	0x200006cc
 80097fc:	08017b94 	.word	0x08017b94

08009800 <OnRadioTxDone>:
{
 8009800:	b530      	push	{r4, r5, lr}
 8009802:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8009804:	f00d fb5c 	bl	8016ec0 <UTIL_TIMER_GetCurrentTime>
 8009808:	4b0f      	ldr	r3, [pc, #60]	; (8009848 <OnRadioTxDone+0x48>)
 800980a:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800980c:	4d0f      	ldr	r5, [pc, #60]	; (800984c <OnRadioTxDone+0x4c>)
 800980e:	466c      	mov	r4, sp
 8009810:	4620      	mov	r0, r4
 8009812:	f00d faab 	bl	8016d6c <SysTimeGet>
 8009816:	f505 734e 	add.w	r3, r5, #824	; 0x338
 800981a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800981e:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8009822:	4a0b      	ldr	r2, [pc, #44]	; (8009850 <OnRadioTxDone+0x50>)
 8009824:	7813      	ldrb	r3, [r2, #0]
 8009826:	f043 0310 	orr.w	r3, r3, #16
 800982a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800982c:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 8009830:	b113      	cbz	r3, 8009838 <OnRadioTxDone+0x38>
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	b103      	cbz	r3, 8009838 <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009836:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8009838:	4b06      	ldr	r3, [pc, #24]	; (8009854 <OnRadioTxDone+0x54>)
 800983a:	2201      	movs	r2, #1
 800983c:	2100      	movs	r1, #0
 800983e:	2002      	movs	r0, #2
 8009840:	f00d f844 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
}
 8009844:	b003      	add	sp, #12
 8009846:	bd30      	pop	{r4, r5, pc}
 8009848:	200024ec 	.word	0x200024ec
 800984c:	200006cc 	.word	0x200006cc
 8009850:	200006c8 	.word	0x200006c8
 8009854:	08017ba4 	.word	0x08017ba4

08009858 <ResetMacParameters>:
{
 8009858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800985c:	b08e      	sub	sp, #56	; 0x38
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800985e:	4c4d      	ldr	r4, [pc, #308]	; (8009994 <ResetMacParameters+0x13c>)
 8009860:	2600      	movs	r6, #0
 8009862:	f884 6110 	strb.w	r6, [r4, #272]	; 0x110
    Nvm.MacGroup1.AdrAckCounter = 0;
 8009866:	62a6      	str	r6, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 8009868:	4d4b      	ldr	r5, [pc, #300]	; (8009998 <ResetMacParameters+0x140>)
 800986a:	f885 6410 	strb.w	r6, [r5, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 800986e:	f04f 0801 	mov.w	r8, #1
 8009872:	f885 8411 	strb.w	r8, [r5, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 8009876:	f885 8412 	strb.w	r8, [r5, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 800987a:	f885 6413 	strb.w	r6, [r5, #1043]	; 0x413
    Nvm.MacGroup2.MaxDCycle = 0;
 800987e:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8009882:	f8a4 8102 	strh.w	r8, [r4, #258]	; 0x102
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8009886:	f994 30c4 	ldrsb.w	r3, [r4, #196]	; 0xc4
 800988a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800988e:	f994 30c5 	ldrsb.w	r3, [r4, #197]	; 0xc5
 8009892:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8009896:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 800989a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800989e:	f104 0364 	add.w	r3, r4, #100	; 0x64
 80098a2:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80098a6:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 80098aa:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80098ae:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 80098b2:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 80098b6:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 80098ba:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80098be:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 80098c2:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 80098c6:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
 80098ca:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 80098ce:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 80098d2:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80098d4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80098d8:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.NodeAckRequested = false;
 80098da:	f885 6414 	strb.w	r6, [r5, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 80098de:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80098e2:	f88d 800c 	strb.w	r8, [sp, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80098e6:	f504 73ec 	add.w	r3, r4, #472	; 0x1d8
 80098ea:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80098ec:	f504 731f 	add.w	r3, r4, #636	; 0x27c
 80098f0:	9302      	str	r3, [sp, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80098f2:	a901      	add	r1, sp, #4
 80098f4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80098f8:	f002 fb0b 	bl	800bf12 <RegionInitDefaults>
    MacCtx.Channel = 0;
 80098fc:	f885 6415 	strb.w	r6, [r5, #1045]	; 0x415
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009900:	f885 63cc 	strb.w	r6, [r5, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8009904:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009906:	f8c5 33d0 	str.w	r3, [r5, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800990a:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800990e:	f885 33dc 	strb.w	r3, [r5, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8009912:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8009916:	f885 33dd 	strb.w	r3, [r5, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800991a:	f885 63de 	strb.w	r6, [r5, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800991e:	f885 83df 	strb.w	r8, [r5, #991]	; 0x3df
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8009922:	f505 7478 	add.w	r4, r5, #992	; 0x3e0
 8009926:	f505 7773 	add.w	r7, r5, #972	; 0x3cc
 800992a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800992c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009932:	f885 83f2 	strb.w	r8, [r5, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009936:	2302      	movs	r3, #2
 8009938:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    classBCallbacks.GetTemperatureLevel = NULL;
 800993c:	960c      	str	r6, [sp, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800993e:	960d      	str	r6, [sp, #52]	; 0x34
    if( MacCtx.MacCallbacks != NULL )
 8009940:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 8009944:	b11b      	cbz	r3, 800994e <ResetMacParameters+0xf6>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8009946:	685a      	ldr	r2, [r3, #4]
 8009948:	920c      	str	r2, [sp, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800994a:	691b      	ldr	r3, [r3, #16]
 800994c:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800994e:	4b12      	ldr	r3, [pc, #72]	; (8009998 <ResetMacParameters+0x140>)
 8009950:	f503 628c 	add.w	r2, r3, #1120	; 0x460
 8009954:	9204      	str	r2, [sp, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8009956:	f203 421c 	addw	r2, r3, #1052	; 0x41c
 800995a:	9205      	str	r2, [sp, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800995c:	f203 424c 	addw	r2, r3, #1100	; 0x44c
 8009960:	9206      	str	r2, [sp, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8009962:	f203 4381 	addw	r3, r3, #1153	; 0x481
 8009966:	9307      	str	r3, [sp, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8009968:	4a0a      	ldr	r2, [pc, #40]	; (8009994 <ResetMacParameters+0x13c>)
 800996a:	f102 03cc 	add.w	r3, r2, #204	; 0xcc
 800996e:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8009970:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8009974:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8009976:	f102 0344 	add.w	r3, r2, #68	; 0x44
 800997a:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800997c:	f102 03d0 	add.w	r3, r2, #208	; 0xd0
 8009980:	930b      	str	r3, [sp, #44]	; 0x2c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8009982:	f502 62e3 	add.w	r2, r2, #1816	; 0x718
 8009986:	a90c      	add	r1, sp, #48	; 0x30
 8009988:	a804      	add	r0, sp, #16
 800998a:	f001 fa6a 	bl	800ae62 <LoRaMacClassBInit>
}
 800998e:	b00e      	add	sp, #56	; 0x38
 8009990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009994:	20000bd4 	.word	0x20000bd4
 8009998:	200006cc 	.word	0x200006cc

0800999c <SwitchClass>:
{
 800999c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999e:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 80099a0:	4b3d      	ldr	r3, [pc, #244]	; (8009a98 <SwitchClass+0xfc>)
 80099a2:	f893 50fc 	ldrb.w	r5, [r3, #252]	; 0xfc
 80099a6:	2d01      	cmp	r5, #1
 80099a8:	d062      	beq.n	8009a70 <SwitchClass+0xd4>
 80099aa:	2d02      	cmp	r5, #2
 80099ac:	d068      	beq.n	8009a80 <SwitchClass+0xe4>
 80099ae:	b10d      	cbz	r5, 80099b4 <SwitchClass+0x18>
 80099b0:	2003      	movs	r0, #3
}
 80099b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_A )
 80099b4:	b928      	cbnz	r0, 80099c2 <SwitchClass+0x26>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80099b6:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80099ba:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80099bc:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80099be:	e882 0003 	stmia.w	r2, {r0, r1}
            if( deviceClass == CLASS_B )
 80099c2:	2c01      	cmp	r4, #1
 80099c4:	d01f      	beq.n	8009a06 <SwitchClass+0x6a>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80099c6:	2003      	movs	r0, #3
            if( deviceClass == CLASS_C )
 80099c8:	2c02      	cmp	r4, #2
 80099ca:	d1f2      	bne.n	80099b2 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80099cc:	4b32      	ldr	r3, [pc, #200]	; (8009a98 <SwitchClass+0xfc>)
 80099ce:	f883 40fc 	strb.w	r4, [r3, #252]	; 0xfc
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80099d2:	4f32      	ldr	r7, [pc, #200]	; (8009a9c <SwitchClass+0x100>)
 80099d4:	f507 7478 	add.w	r4, r7, #992	; 0x3e0
 80099d8:	f507 7673 	add.w	r6, r7, #972	; 0x3cc
 80099dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80099de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80099e0:	6833      	ldr	r3, [r6, #0]
 80099e2:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80099e4:	2302      	movs	r3, #2
 80099e6:	f887 33f3 	strb.w	r3, [r7, #1011]	; 0x3f3
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80099ea:	2300      	movs	r3, #0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	dd13      	ble.n	8009a18 <SwitchClass+0x7c>
                MacCtx.NodeAckRequested = false;
 80099f0:	4b2a      	ldr	r3, [pc, #168]	; (8009a9c <SwitchClass+0x100>)
 80099f2:	2200      	movs	r2, #0
 80099f4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                Radio.Sleep( );
 80099f8:	4b29      	ldr	r3, [pc, #164]	; (8009aa0 <SwitchClass+0x104>)
 80099fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fc:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 80099fe:	f7ff fe03 	bl	8009608 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 8009a02:	4628      	mov	r0, r5
 8009a04:	e7d5      	b.n	80099b2 <SwitchClass+0x16>
                status = LoRaMacClassBSwitchClass( deviceClass );
 8009a06:	4620      	mov	r0, r4
 8009a08:	f001 fa41 	bl	800ae8e <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	d1db      	bne.n	80099c8 <SwitchClass+0x2c>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8009a10:	4b21      	ldr	r3, [pc, #132]	; (8009a98 <SwitchClass+0xfc>)
 8009a12:	f883 40fc 	strb.w	r4, [r3, #252]	; 0xfc
 8009a16:	e7d7      	b.n	80099c8 <SwitchClass+0x2c>
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8009a18:	4618      	mov	r0, r3
 8009a1a:	491f      	ldr	r1, [pc, #124]	; (8009a98 <SwitchClass+0xfc>)
 8009a1c:	222c      	movs	r2, #44	; 0x2c
 8009a1e:	fb02 1203 	mla	r2, r2, r3, r1
 8009a22:	f892 20d2 	ldrb.w	r2, [r2, #210]	; 0xd2
 8009a26:	b912      	cbnz	r2, 8009a2e <SwitchClass+0x92>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009a28:	3301      	adds	r3, #1
 8009a2a:	b25b      	sxtb	r3, r3
 8009a2c:	e7de      	b.n	80099ec <SwitchClass+0x50>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8009a2e:	460a      	mov	r2, r1
 8009a30:	232c      	movs	r3, #44	; 0x2c
 8009a32:	fb03 1000 	mla	r0, r3, r0, r1
 8009a36:	f8d0 10e8 	ldr.w	r1, [r0, #232]	; 0xe8
 8009a3a:	66d1      	str	r1, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8009a3c:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
 8009a40:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009a44:	4b15      	ldr	r3, [pc, #84]	; (8009a9c <SwitchClass+0x100>)
 8009a46:	f893 0415 	ldrb.w	r0, [r3, #1045]	; 0x415
 8009a4a:	f883 03e0 	strb.w	r0, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8009a4e:	f8c3 13e4 	str.w	r1, [r3, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009a52:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
 8009a56:	f883 13f0 	strb.w	r1, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8009a5a:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 8009a5e:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8009a62:	2203      	movs	r2, #3
 8009a64:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8009a68:	2201      	movs	r2, #1
 8009a6a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 8009a6e:	e7bf      	b.n	80099f0 <SwitchClass+0x54>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8009a70:	f001 fa0d 	bl	800ae8e <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 8009a74:	2800      	cmp	r0, #0
 8009a76:	d19c      	bne.n	80099b2 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009a78:	4b07      	ldr	r3, [pc, #28]	; (8009a98 <SwitchClass+0xfc>)
 8009a7a:	f883 40fc 	strb.w	r4, [r3, #252]	; 0xfc
 8009a7e:	e798      	b.n	80099b2 <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 8009a80:	b938      	cbnz	r0, 8009a92 <SwitchClass+0xf6>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009a82:	4b05      	ldr	r3, [pc, #20]	; (8009a98 <SwitchClass+0xfc>)
 8009a84:	f883 00fc 	strb.w	r0, [r3, #252]	; 0xfc
                Radio.Sleep( );
 8009a88:	4b05      	ldr	r3, [pc, #20]	; (8009aa0 <SwitchClass+0x104>)
 8009a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8c:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8009a8e:	4620      	mov	r0, r4
 8009a90:	e78f      	b.n	80099b2 <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009a92:	2003      	movs	r0, #3
 8009a94:	e78d      	b.n	80099b2 <SwitchClass+0x16>
 8009a96:	bf00      	nop
 8009a98:	20000bd4 	.word	0x20000bd4
 8009a9c:	200006cc 	.word	0x200006cc
 8009aa0:	08018400 	.word	0x08018400

08009aa4 <SendReJoinReq>:
{
 8009aa4:	b570      	push	{r4, r5, r6, lr}
    switch( joinReqType )
 8009aa6:	28ff      	cmp	r0, #255	; 0xff
 8009aa8:	d003      	beq.n	8009ab2 <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 8009aaa:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 8009aac:	f7ff fb62 	bl	8009174 <ScheduleTx>
}
 8009ab0:	bd70      	pop	{r4, r5, r6, pc}
 8009ab2:	f04f 0600 	mov.w	r6, #0
            SwitchClass( CLASS_A );
 8009ab6:	2000      	movs	r0, #0
 8009ab8:	f7ff ff70 	bl	800999c <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8009abc:	4d0f      	ldr	r5, [pc, #60]	; (8009afc <SendReJoinReq+0x58>)
 8009abe:	2400      	movs	r4, #0
 8009ac0:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8009ac4:	1cab      	adds	r3, r5, #2
 8009ac6:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009aca:	23ff      	movs	r3, #255	; 0xff
 8009acc:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8009ad0:	f364 1647 	bfi	r6, r4, #5, #3
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8009ad4:	f885 610d 	strb.w	r6, [r5, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8009ad8:	f00a fd3e 	bl	8014558 <SecureElementGetJoinEui>
 8009adc:	4601      	mov	r1, r0
 8009ade:	2208      	movs	r2, #8
 8009ae0:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 8009ae4:	f00a fd69 	bl	80145ba <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8009ae8:	f00a fd20 	bl	801452c <SecureElementGetDevEui>
 8009aec:	4601      	mov	r1, r0
 8009aee:	2208      	movs	r2, #8
 8009af0:	f505 708b 	add.w	r0, r5, #278	; 0x116
 8009af4:	f00a fd61 	bl	80145ba <memcpy1>
            allowDelayedTx = false;
 8009af8:	4620      	mov	r0, r4
            break;
 8009afa:	e7d7      	b.n	8009aac <SendReJoinReq+0x8>
 8009afc:	200006cc 	.word	0x200006cc

08009b00 <SetTxContinuousWave>:
{
 8009b00:	b510      	push	{r4, lr}
 8009b02:	b084      	sub	sp, #16
    continuousWave.Channel = MacCtx.Channel;
 8009b04:	4c10      	ldr	r4, [pc, #64]	; (8009b48 <SetTxContinuousWave+0x48>)
 8009b06:	f894 3415 	ldrb.w	r3, [r4, #1045]	; 0x415
 8009b0a:	f88d 3000 	strb.w	r3, [sp]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009b0e:	4b0f      	ldr	r3, [pc, #60]	; (8009b4c <SetTxContinuousWave+0x4c>)
 8009b10:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8009b14:	f88d 2001 	strb.w	r2, [sp, #1]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009b18:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8009b1c:	f88d 2002 	strb.w	r2, [sp, #2]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8009b20:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8009b22:	9201      	str	r2, [sp, #4]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8009b24:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009b26:	9202      	str	r2, [sp, #8]
    continuousWave.Timeout = timeout;
 8009b28:	f8ad 000c 	strh.w	r0, [sp, #12]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8009b2c:	4669      	mov	r1, sp
 8009b2e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009b32:	f002 fc91 	bl	800c458 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009b36:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8009b3a:	f043 0302 	orr.w	r3, r3, #2
 8009b3e:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
}
 8009b42:	2000      	movs	r0, #0
 8009b44:	b004      	add	sp, #16
 8009b46:	bd10      	pop	{r4, pc}
 8009b48:	200006cc 	.word	0x200006cc
 8009b4c:	20000bd4 	.word	0x20000bd4

08009b50 <PrepareFrame>:
{
 8009b50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b54:	b083      	sub	sp, #12
 8009b56:	4605      	mov	r5, r0
 8009b58:	460e      	mov	r6, r1
 8009b5a:	4617      	mov	r7, r2
 8009b5c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 8009b60:	4959      	ldr	r1, [pc, #356]	; (8009cc8 <PrepareFrame+0x178>)
 8009b62:	2200      	movs	r2, #0
 8009b64:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 8009b66:	f881 2414 	strb.w	r2, [r1, #1044]	; 0x414
    uint32_t fCntUp = 0;
 8009b6a:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 8009b6c:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 8009b6e:	4698      	mov	r8, r3
 8009b70:	b1cb      	cbz	r3, 8009ba6 <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8009b72:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8009cc8 <PrepareFrame+0x178>
 8009b76:	4622      	mov	r2, r4
 8009b78:	4641      	mov	r1, r8
 8009b7a:	f509 709c 	add.w	r0, r9, #312	; 0x138
 8009b7e:	f00a fd1c 	bl	80145ba <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8009b82:	b2e0      	uxtb	r0, r4
 8009b84:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8009b88:	782b      	ldrb	r3, [r5, #0]
 8009b8a:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 8009b8e:	782b      	ldrb	r3, [r5, #0]
 8009b90:	095b      	lsrs	r3, r3, #5
 8009b92:	2b04      	cmp	r3, #4
 8009b94:	d009      	beq.n	8009baa <PrepareFrame+0x5a>
 8009b96:	2b07      	cmp	r3, #7
 8009b98:	d078      	beq.n	8009c8c <PrepareFrame+0x13c>
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	d009      	beq.n	8009bb2 <PrepareFrame+0x62>
 8009b9e:	2002      	movs	r0, #2
}
 8009ba0:	b003      	add	sp, #12
 8009ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 8009ba6:	4614      	mov	r4, r2
 8009ba8:	e7e3      	b.n	8009b72 <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 8009baa:	4b47      	ldr	r3, [pc, #284]	; (8009cc8 <PrepareFrame+0x178>)
 8009bac:	2201      	movs	r2, #1
 8009bae:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8009bb2:	4b45      	ldr	r3, [pc, #276]	; (8009cc8 <PrepareFrame+0x178>)
 8009bb4:	2204      	movs	r2, #4
 8009bb6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8009bba:	1c9a      	adds	r2, r3, #2
 8009bbc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009bc0:	22ff      	movs	r2, #255	; 0xff
 8009bc2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8009bc6:	782a      	ldrb	r2, [r5, #0]
 8009bc8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8009bcc:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8009bd0:	4a3e      	ldr	r2, [pc, #248]	; (8009ccc <PrepareFrame+0x17c>)
 8009bd2:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 8009bd6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8009bda:	7832      	ldrb	r2, [r6, #0]
 8009bdc:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8009be0:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8009be4:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8009be8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8009bec:	a801      	add	r0, sp, #4
 8009bee:	f001 fdc9 	bl	800b784 <LoRaMacCryptoGetFCntUp>
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	d15b      	bne.n	8009cae <PrepareFrame+0x15e>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8009bf6:	9a01      	ldr	r2, [sp, #4]
 8009bf8:	4b33      	ldr	r3, [pc, #204]	; (8009cc8 <PrepareFrame+0x178>)
 8009bfa:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbRetries = 0;
 8009bfe:	2100      	movs	r1, #0
 8009c00:	f883 143d 	strb.w	r1, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 8009c04:	f883 143c 	strb.w	r1, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8009c08:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009c0c:	4668      	mov	r0, sp
 8009c0e:	f001 fa53 	bl	800b0b8 <LoRaMacCommandsGetSizeSerializedCmds>
 8009c12:	2800      	cmp	r0, #0
 8009c14:	d14d      	bne.n	8009cb2 <PrepareFrame+0x162>
            if( macCmdsSize > 0 )
 8009c16:	9b00      	ldr	r3, [sp, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d0c1      	beq.n	8009ba0 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8009c1c:	4b2b      	ldr	r3, [pc, #172]	; (8009ccc <PrepareFrame+0x17c>)
 8009c1e:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 8009c22:	f7fe f919 	bl	8007e58 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8009c26:	4b28      	ldr	r3, [pc, #160]	; (8009cc8 <PrepareFrame+0x178>)
 8009c28:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8009c2c:	b113      	cbz	r3, 8009c34 <PrepareFrame+0xe4>
 8009c2e:	9a00      	ldr	r2, [sp, #0]
 8009c30:	2a0f      	cmp	r2, #15
 8009c32:	d915      	bls.n	8009c60 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8009c34:	b113      	cbz	r3, 8009c3c <PrepareFrame+0xec>
 8009c36:	9b00      	ldr	r3, [sp, #0]
 8009c38:	2b0f      	cmp	r3, #15
 8009c3a:	d820      	bhi.n	8009c7e <PrepareFrame+0x12e>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8009c3c:	4a24      	ldr	r2, [pc, #144]	; (8009cd0 <PrepareFrame+0x180>)
 8009c3e:	4669      	mov	r1, sp
 8009c40:	f001 fa46 	bl	800b0d0 <LoRaMacCommandsSerializeCmds>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	d13a      	bne.n	8009cbe <PrepareFrame+0x16e>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8009c48:	4b1f      	ldr	r3, [pc, #124]	; (8009cc8 <PrepareFrame+0x178>)
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8009c50:	f503 6291 	add.w	r2, r3, #1160	; 0x488
 8009c54:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8009c58:	9a00      	ldr	r2, [sp, #0]
 8009c5a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8009c5e:	e79f      	b.n	8009ba0 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8009c60:	4a1c      	ldr	r2, [pc, #112]	; (8009cd4 <PrepareFrame+0x184>)
 8009c62:	4669      	mov	r1, sp
 8009c64:	200f      	movs	r0, #15
 8009c66:	f001 fa33 	bl	800b0d0 <LoRaMacCommandsSerializeCmds>
 8009c6a:	bb20      	cbnz	r0, 8009cb6 <PrepareFrame+0x166>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8009c6c:	7833      	ldrb	r3, [r6, #0]
 8009c6e:	9a00      	ldr	r2, [sp, #0]
 8009c70:	f362 0303 	bfi	r3, r2, #0, #4
 8009c74:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8009c76:	4a14      	ldr	r2, [pc, #80]	; (8009cc8 <PrepareFrame+0x178>)
 8009c78:	f882 3114 	strb.w	r3, [r2, #276]	; 0x114
 8009c7c:	e790      	b.n	8009ba0 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8009c7e:	4a14      	ldr	r2, [pc, #80]	; (8009cd0 <PrepareFrame+0x180>)
 8009c80:	4669      	mov	r1, sp
 8009c82:	f001 fa25 	bl	800b0d0 <LoRaMacCommandsSerializeCmds>
 8009c86:	b1c0      	cbz	r0, 8009cba <PrepareFrame+0x16a>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009c88:	2013      	movs	r0, #19
 8009c8a:	e789      	b.n	8009ba0 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8009c8c:	f1b8 0f00 	cmp.w	r8, #0
 8009c90:	d017      	beq.n	8009cc2 <PrepareFrame+0x172>
 8009c92:	2800      	cmp	r0, #0
 8009c94:	d084      	beq.n	8009ba0 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8009c96:	4c0c      	ldr	r4, [pc, #48]	; (8009cc8 <PrepareFrame+0x178>)
 8009c98:	b282      	uxth	r2, r0
 8009c9a:	4641      	mov	r1, r8
 8009c9c:	1ce0      	adds	r0, r4, #3
 8009c9e:	f00a fc8c 	bl	80145ba <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8009ca2:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 8009caa:	2000      	movs	r0, #0
 8009cac:	e778      	b.n	8009ba0 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8009cae:	2012      	movs	r0, #18
 8009cb0:	e776      	b.n	8009ba0 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009cb2:	2013      	movs	r0, #19
 8009cb4:	e774      	b.n	8009ba0 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009cb6:	2013      	movs	r0, #19
 8009cb8:	e772      	b.n	8009ba0 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8009cba:	200a      	movs	r0, #10
 8009cbc:	e770      	b.n	8009ba0 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009cbe:	2013      	movs	r0, #19
 8009cc0:	e76e      	b.n	8009ba0 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 8009cc2:	2000      	movs	r0, #0
 8009cc4:	e76c      	b.n	8009ba0 <PrepareFrame+0x50>
 8009cc6:	bf00      	nop
 8009cc8:	200006cc 	.word	0x200006cc
 8009ccc:	20000bd4 	.word	0x20000bd4
 8009cd0:	20000b54 	.word	0x20000b54
 8009cd4:	200007e4 	.word	0x200007e4

08009cd8 <Send>:
{
 8009cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cdc:	b08a      	sub	sp, #40	; 0x28
 8009cde:	4617      	mov	r7, r2
 8009ce0:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009ce2:	4c47      	ldr	r4, [pc, #284]	; (8009e00 <Send+0x128>)
 8009ce4:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8009ce8:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009cec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009cee:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009cf0:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f000 8081 	beq.w	8009dfc <Send+0x124>
 8009cfa:	4605      	mov	r5, r0
 8009cfc:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8009cfe:	f894 30ff 	ldrb.w	r3, [r4, #255]	; 0xff
 8009d02:	b90b      	cbnz	r3, 8009d08 <Send+0x30>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8009d04:	2100      	movs	r1, #0
 8009d06:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 8009d08:	2100      	movs	r1, #0
    fCtrl.Bits.FOptsLen      = 0;
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	f361 0303 	bfi	r3, r1, #0, #4
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8009d10:	483b      	ldr	r0, [pc, #236]	; (8009e00 <Send+0x128>)
 8009d12:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
 8009d16:	f361 13c7 	bfi	r3, r1, #7, #1
 8009d1a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009d1e:	f890 30fc 	ldrb.w	r3, [r0, #252]	; 0xfc
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d057      	beq.n	8009dd6 <Send+0xfe>
        fCtrl.Bits.FPending      = 0;
 8009d26:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009d2a:	f36f 1304 	bfc	r3, #4, #1
 8009d2e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8009d32:	4b33      	ldr	r3, [pc, #204]	; (8009e00 <Send+0x128>)
 8009d34:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009d38:	b12b      	cbz	r3, 8009d46 <Send+0x6e>
        fCtrl.Bits.Ack = 1;
 8009d3a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009d3e:	f043 0320 	orr.w	r3, r3, #32
 8009d42:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.Version = Nvm.MacGroup2.Version;
 8009d46:	4c2e      	ldr	r4, [pc, #184]	; (8009e00 <Send+0x128>)
 8009d48:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8009d4c:	9303      	str	r3, [sp, #12]
    adrNext.UpdateChanMask = true;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	f88d 3010 	strb.w	r3, [sp, #16]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8009d54:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009d58:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8009d5a:	4b2a      	ldr	r3, [pc, #168]	; (8009e04 <Send+0x12c>)
 8009d5c:	f8b3 23f4 	ldrh.w	r2, [r3, #1012]	; 0x3f4
 8009d60:	f8ad 2018 	strh.w	r2, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8009d64:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8009d68:	f8ad 301a 	strh.w	r3, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009d6c:	f88d a01c 	strb.w	sl, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009d70:	f88d 901d 	strb.w	r9, [sp, #29]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009d74:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8009d78:	f88d 301e 	strb.w	r3, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 8009d7c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8009d80:	f88d 301f 	strb.w	r3, [sp, #31]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009d84:	ab08      	add	r3, sp, #32
 8009d86:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8009d8a:	f104 0139 	add.w	r1, r4, #57	; 0x39
 8009d8e:	a803      	add	r0, sp, #12
 8009d90:	f001 f85f 	bl	800ae52 <LoRaMacAdrCalcNext>
 8009d94:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009d98:	f360 1386 	bfi	r3, r0, #6, #1
 8009d9c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8009da0:	f8cd 8000 	str.w	r8, [sp]
 8009da4:	463b      	mov	r3, r7
 8009da6:	4632      	mov	r2, r6
 8009da8:	a909      	add	r1, sp, #36	; 0x24
 8009daa:	4628      	mov	r0, r5
 8009dac:	f7ff fed0 	bl	8009b50 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8009db0:	4604      	mov	r4, r0
 8009db2:	b108      	cbz	r0, 8009db8 <Send+0xe0>
 8009db4:	280a      	cmp	r0, #10
 8009db6:	d104      	bne.n	8009dc2 <Send+0xea>
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8009db8:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8009dbc:	f7ff f9da 	bl	8009174 <ScheduleTx>
 8009dc0:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 8009dc2:	b17c      	cbz	r4, 8009de4 <Send+0x10c>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8009dc4:	4b0e      	ldr	r3, [pc, #56]	; (8009e00 <Send+0x128>)
 8009dc6:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8009dca:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 8009dce:	4620      	mov	r0, r4
 8009dd0:	b00a      	add	sp, #40	; 0x28
 8009dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 8009dd6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009dda:	f043 0310 	orr.w	r3, r3, #16
 8009dde:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8009de2:	e7a6      	b.n	8009d32 <Send+0x5a>
        Nvm.MacGroup1.SrvAckRequested = false;
 8009de4:	4b06      	ldr	r3, [pc, #24]	; (8009e00 <Send+0x128>)
 8009de6:	2200      	movs	r2, #0
 8009de8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8009dec:	9a08      	ldr	r2, [sp, #32]
 8009dee:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8009df0:	f001 f936 	bl	800b060 <LoRaMacCommandsRemoveNoneStickyCmds>
 8009df4:	2800      	cmp	r0, #0
 8009df6:	d0ea      	beq.n	8009dce <Send+0xf6>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009df8:	2413      	movs	r4, #19
 8009dfa:	e7e8      	b.n	8009dce <Send+0xf6>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8009dfc:	2407      	movs	r4, #7
 8009dfe:	e7e6      	b.n	8009dce <Send+0xf6>
 8009e00:	20000bd4 	.word	0x20000bd4
 8009e04:	200006cc 	.word	0x200006cc

08009e08 <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009e08:	4b07      	ldr	r3, [pc, #28]	; (8009e28 <LoRaMacIsBusy+0x20>)
 8009e0a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009e0e:	b933      	cbnz	r3, 8009e1e <LoRaMacIsBusy+0x16>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8009e10:	4b05      	ldr	r3, [pc, #20]	; (8009e28 <LoRaMacIsBusy+0x20>)
 8009e12:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d003      	beq.n	8009e22 <LoRaMacIsBusy+0x1a>
    return true;
 8009e1a:	2001      	movs	r0, #1
 8009e1c:	4770      	bx	lr
 8009e1e:	2001      	movs	r0, #1
 8009e20:	4770      	bx	lr
        return false;
 8009e22:	2000      	movs	r0, #0
}
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	200006cc 	.word	0x200006cc

08009e2c <LoRaMacProcess>:
{
 8009e2c:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 8009e2e:	f7fe ffd7 	bl	8008de0 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8009e32:	f001 f83c 	bl	800aeae <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8009e36:	4b15      	ldr	r3, [pc, #84]	; (8009e8c <LoRaMacProcess+0x60>)
 8009e38:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8009e3c:	f013 0f20 	tst.w	r3, #32
 8009e40:	d107      	bne.n	8009e52 <LoRaMacProcess+0x26>
    LoRaMacHandleIndicationEvents( );
 8009e42:	f7fd fea9 	bl	8007b98 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8009e46:	4b11      	ldr	r3, [pc, #68]	; (8009e8c <LoRaMacProcess+0x60>)
 8009e48:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	d01a      	beq.n	8009e86 <LoRaMacProcess+0x5a>
}
 8009e50:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8009e52:	2000      	movs	r0, #0
 8009e54:	f7fd fe9a 	bl	8007b8c <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8009e58:	f7fd fee8 	bl	8007c2c <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 8009e5c:	f7fd ffc4 	bl	8007de8 <IsRequestPending>
 8009e60:	b110      	cbz	r0, 8009e68 <LoRaMacProcess+0x3c>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8009e62:	f7fe f8e9 	bl	8008038 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 8009e66:	b918      	cbnz	r0, 8009e70 <LoRaMacProcess+0x44>
            LoRaMacHandleMlmeRequest( );
 8009e68:	f7fe ffe8 	bl	8008e3c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8009e6c:	f7ff fa2e 	bl	80092cc <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 8009e70:	f7ff fa78 	bl	8009364 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 8009e74:	f7ff fac0 	bl	80093f8 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 8009e78:	4805      	ldr	r0, [pc, #20]	; (8009e90 <LoRaMacProcess+0x64>)
 8009e7a:	f7ff fad5 	bl	8009428 <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8009e7e:	2001      	movs	r0, #1
 8009e80:	f7fd fe84 	bl	8007b8c <LoRaMacEnableRequests>
 8009e84:	e7dd      	b.n	8009e42 <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 8009e86:	f7ff fbbf 	bl	8009608 <OpenContinuousRxCWindow>
}
 8009e8a:	e7e1      	b.n	8009e50 <LoRaMacProcess+0x24>
 8009e8c:	200006cc 	.word	0x200006cc
 8009e90:	20000bd4 	.word	0x20000bd4

08009e94 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8009e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e98:	b08b      	sub	sp, #44	; 0x2c
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	f000 8190 	beq.w	800a1c0 <LoRaMacInitialization+0x32c>
 8009ea0:	460e      	mov	r6, r1
 8009ea2:	4691      	mov	r9, r2
 8009ea4:	4680      	mov	r8, r0
 8009ea6:	2900      	cmp	r1, #0
 8009ea8:	f000 818c 	beq.w	800a1c4 <LoRaMacInitialization+0x330>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8009eac:	6803      	ldr	r3, [r0, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	f000 818a 	beq.w	800a1c8 <LoRaMacInitialization+0x334>
        ( primitives->MacMcpsIndication == NULL ) ||
 8009eb4:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f000 8188 	beq.w	800a1cc <LoRaMacInitialization+0x338>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8009ebc:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f000 8186 	beq.w	800a1d0 <LoRaMacInitialization+0x33c>
        ( primitives->MacMlmeIndication == NULL ) )
 8009ec4:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	f000 8184 	beq.w	800a1d4 <LoRaMacInitialization+0x340>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8009ecc:	4610      	mov	r0, r2
 8009ece:	f001 ffa6 	bl	800be1e <RegionIsActive>
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	f000 8180 	beq.w	800a1d8 <LoRaMacInitialization+0x344>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8009ed8:	4640      	mov	r0, r8
 8009eda:	f001 f9a3 	bl	800b224 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8009ede:	4cc5      	ldr	r4, [pc, #788]	; (800a1f4 <LoRaMacInitialization+0x360>)
 8009ee0:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	f00a fb7d 	bl	80145e6 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8009eec:	4dc2      	ldr	r5, [pc, #776]	; (800a1f8 <LoRaMacInitialization+0x364>)
 8009eee:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	f00a fb76 	bl	80145e6 <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8009efa:	f04f 0a01 	mov.w	sl, #1
 8009efe:	f885 a412 	strb.w	sl, [r5, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8009f02:	f885 a411 	strb.w	sl, [r5, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 8009f06:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8009f0a:	2700      	movs	r7, #0
 8009f0c:	f884 70fc 	strb.w	r7, [r4, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8009f10:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8009f14:	4bb9      	ldr	r3, [pc, #740]	; (800a1fc <LoRaMacInitialization+0x368>)
 8009f16:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8009f1a:	230f      	movs	r3, #15
 8009f1c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009f20:	a908      	add	r1, sp, #32
 8009f22:	4648      	mov	r0, r9
 8009f24:	f001 ff87 	bl	800be36 <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8009f28:	1bc0      	subs	r0, r0, r7
 8009f2a:	bf18      	it	ne
 8009f2c:	2001      	movne	r0, #1
 8009f2e:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8009f32:	f04f 0b0a 	mov.w	fp, #10
 8009f36:	f88d b020 	strb.w	fp, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009f3a:	a908      	add	r1, sp, #32
 8009f3c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009f40:	f001 ff79 	bl	800be36 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8009f44:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 8009f48:	f04f 0906 	mov.w	r9, #6
 8009f4c:	f88d 9020 	strb.w	r9, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009f50:	a908      	add	r1, sp, #32
 8009f52:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009f56:	f001 ff6e 	bl	800be36 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8009f5a:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8009f5e:	2310      	movs	r3, #16
 8009f60:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009f64:	a908      	add	r1, sp, #32
 8009f66:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009f6a:	f001 ff64 	bl	800be36 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8009f6e:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8009f72:	2311      	movs	r3, #17
 8009f74:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009f78:	a908      	add	r1, sp, #32
 8009f7a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009f7e:	f001 ff5a 	bl	800be36 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8009f82:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8009f86:	2312      	movs	r3, #18
 8009f88:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009f8c:	a908      	add	r1, sp, #32
 8009f8e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009f92:	f001 ff50 	bl	800be36 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8009f96:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8009f9a:	2313      	movs	r3, #19
 8009f9c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009fa0:	a908      	add	r1, sp, #32
 8009fa2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009fa6:	f001 ff46 	bl	800be36 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8009faa:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8009fae:	2314      	movs	r3, #20
 8009fb0:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009fb4:	a908      	add	r1, sp, #32
 8009fb6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009fba:	f001 ff3c 	bl	800be36 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8009fbe:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8009fc2:	2317      	movs	r3, #23
 8009fc4:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009fc8:	a908      	add	r1, sp, #32
 8009fca:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009fce:	f001 ff32 	bl	800be36 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8009fd2:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8009fd6:	2318      	movs	r3, #24
 8009fd8:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009fdc:	a908      	add	r1, sp, #32
 8009fde:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009fe2:	f001 ff28 	bl	800be36 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8009fe6:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8009fea:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8009fee:	2319      	movs	r3, #25
 8009ff0:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009ff4:	a908      	add	r1, sp, #32
 8009ff6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009ffa:	f001 ff1c 	bl	800be36 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8009ffe:	b2c0      	uxtb	r0, r0
 800a000:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800a004:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800a008:	231e      	movs	r3, #30
 800a00a:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a00e:	a908      	add	r1, sp, #32
 800a010:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a014:	f001 ff0f 	bl	800be36 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800a018:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800a01c:	231f      	movs	r3, #31
 800a01e:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a022:	a908      	add	r1, sp, #32
 800a024:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a028:	f001 ff05 	bl	800be36 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800a02c:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800a030:	2320      	movs	r3, #32
 800a032:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a036:	eb0d 0103 	add.w	r1, sp, r3
 800a03a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a03e:	f001 fefa 	bl	800be36 <RegionGetPhyParam>
 800a042:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800a044:	9b07      	ldr	r3, [sp, #28]
 800a046:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800a04a:	2321      	movs	r3, #33	; 0x21
 800a04c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a050:	a908      	add	r1, sp, #32
 800a052:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a056:	f001 feee 	bl	800be36 <RegionGetPhyParam>
 800a05a:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800a05c:	9b07      	ldr	r3, [sp, #28]
 800a05e:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800a062:	230b      	movs	r3, #11
 800a064:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a068:	a908      	add	r1, sp, #32
 800a06a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a06e:	f001 fee2 	bl	800be36 <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;
 800a072:	f8a5 03f4 	strh.w	r0, [r5, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800a076:	230c      	movs	r3, #12
 800a078:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a07c:	a908      	add	r1, sp, #32
 800a07e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a082:	f001 fed8 	bl	800be36 <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;
 800a086:	f8a5 03f6 	strh.w	r0, [r5, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800a08a:	f884 a0a0 	strb.w	sl, [r4, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800a08e:	f8c4 b084 	str.w	fp, [r4, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800a092:	f884 9088 	strb.w	r9, [r4, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800a096:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800a09a:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800a09e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a0a2:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800a0a4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a0a8:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800a0aa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a0ae:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800a0b0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a0b4:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800a0b6:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800a0ba:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800a0bc:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800a0c0:	f88d 7018 	strb.w	r7, [sp, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800a0c4:	f504 73ec 	add.w	r3, r4, #472	; 0x1d8
 800a0c8:	9304      	str	r3, [sp, #16]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800a0ca:	f504 731f 	add.w	r3, r4, #636	; 0x27c
 800a0ce:	9305      	str	r3, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800a0d0:	a904      	add	r1, sp, #16
 800a0d2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a0d6:	f001 ff1c 	bl	800bf12 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 800a0da:	f8c5 6348 	str.w	r6, [r5, #840]	; 0x348
    ResetMacParameters( );
 800a0de:	f7ff fbbb 	bl	8009858 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800a0e2:	f884 a0fd 	strb.w	sl, [r4, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 800a0e6:	f8c5 8344 	str.w	r8, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800a0ea:	f885 7481 	strb.w	r7, [r5, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 800a0ee:	f8c5 a340 	str.w	sl, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800a0f2:	62e7      	str	r7, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800a0f4:	6327      	str	r7, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800a0f6:	9700      	str	r7, [sp, #0]
 800a0f8:	4b41      	ldr	r3, [pc, #260]	; (800a200 <LoRaMacInitialization+0x36c>)
 800a0fa:	463a      	mov	r2, r7
 800a0fc:	f04f 31ff 	mov.w	r1, #4294967295
 800a100:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800a104:	f00c febe 	bl	8016e84 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800a108:	9700      	str	r7, [sp, #0]
 800a10a:	4b3e      	ldr	r3, [pc, #248]	; (800a204 <LoRaMacInitialization+0x370>)
 800a10c:	463a      	mov	r2, r7
 800a10e:	f04f 31ff 	mov.w	r1, #4294967295
 800a112:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800a116:	f00c feb5 	bl	8016e84 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800a11a:	9700      	str	r7, [sp, #0]
 800a11c:	4b3a      	ldr	r3, [pc, #232]	; (800a208 <LoRaMacInitialization+0x374>)
 800a11e:	463a      	mov	r2, r7
 800a120:	f04f 31ff 	mov.w	r1, #4294967295
 800a124:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800a128:	f00c feac 	bl	8016e84 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800a12c:	9700      	str	r7, [sp, #0]
 800a12e:	4b37      	ldr	r3, [pc, #220]	; (800a20c <LoRaMacInitialization+0x378>)
 800a130:	463a      	mov	r2, r7
 800a132:	f04f 31ff 	mov.w	r1, #4294967295
 800a136:	f505 707e 	add.w	r0, r5, #1016	; 0x3f8
 800a13a:	f00c fea3 	bl	8016e84 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800a13e:	af02      	add	r7, sp, #8
 800a140:	4638      	mov	r0, r7
 800a142:	f00c fe33 	bl	8016dac <SysTimeGetMcuTime>
 800a146:	f504 7382 	add.w	r3, r4, #260	; 0x104
 800a14a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a14e:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800a152:	4b2f      	ldr	r3, [pc, #188]	; (800a210 <LoRaMacInitialization+0x37c>)
 800a154:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800a158:	4b2e      	ldr	r3, [pc, #184]	; (800a214 <LoRaMacInitialization+0x380>)
 800a15a:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800a15e:	4b2e      	ldr	r3, [pc, #184]	; (800a218 <LoRaMacInitialization+0x384>)
 800a160:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800a164:	4b2d      	ldr	r3, [pc, #180]	; (800a21c <LoRaMacInitialization+0x388>)
 800a166:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800a16a:	4b2d      	ldr	r3, [pc, #180]	; (800a220 <LoRaMacInitialization+0x38c>)
 800a16c:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800a170:	4b2c      	ldr	r3, [pc, #176]	; (800a224 <LoRaMacInitialization+0x390>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 800a178:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 800a17a:	68b1      	ldr	r1, [r6, #8]
 800a17c:	f504 708c 	add.w	r0, r4, #280	; 0x118
 800a180:	f00a f834 	bl	80141ec <SecureElementInit>
 800a184:	bb68      	cbnz	r0, 800a1e2 <LoRaMacInitialization+0x34e>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800a186:	4620      	mov	r0, r4
 800a188:	f001 fadc 	bl	800b744 <LoRaMacCryptoInit>
 800a18c:	bb58      	cbnz	r0, 800a1e6 <LoRaMacInitialization+0x352>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800a18e:	f000 ff11 	bl	800afb4 <LoRaMacCommandsInit>
 800a192:	bb50      	cbnz	r0, 800a1ea <LoRaMacInitialization+0x356>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800a194:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a198:	f001 fb3c 	bl	800b814 <LoRaMacCryptoSetMulticastReference>
 800a19c:	4604      	mov	r4, r0
 800a19e:	bb30      	cbnz	r0, 800a1ee <LoRaMacInitialization+0x35a>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800a1a0:	4d20      	ldr	r5, [pc, #128]	; (800a224 <LoRaMacInitialization+0x390>)
 800a1a2:	696b      	ldr	r3, [r5, #20]
 800a1a4:	4798      	blx	r3
 800a1a6:	f00a f9f5 	bl	8014594 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800a1aa:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800a1ac:	4a11      	ldr	r2, [pc, #68]	; (800a1f4 <LoRaMacInitialization+0x360>)
 800a1ae:	f892 00fd 	ldrb.w	r0, [r2, #253]	; 0xfd
 800a1b2:	4798      	blx	r3
    Radio.Sleep( );
 800a1b4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a1b6:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a1b8:	4650      	mov	r0, sl
 800a1ba:	f7fd fce7 	bl	8007b8c <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800a1be:	e00c      	b.n	800a1da <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a1c0:	2403      	movs	r4, #3
 800a1c2:	e00a      	b.n	800a1da <LoRaMacInitialization+0x346>
 800a1c4:	2403      	movs	r4, #3
 800a1c6:	e008      	b.n	800a1da <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a1c8:	2403      	movs	r4, #3
 800a1ca:	e006      	b.n	800a1da <LoRaMacInitialization+0x346>
 800a1cc:	2403      	movs	r4, #3
 800a1ce:	e004      	b.n	800a1da <LoRaMacInitialization+0x346>
 800a1d0:	2403      	movs	r4, #3
 800a1d2:	e002      	b.n	800a1da <LoRaMacInitialization+0x346>
 800a1d4:	2403      	movs	r4, #3
 800a1d6:	e000      	b.n	800a1da <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800a1d8:	2409      	movs	r4, #9
}
 800a1da:	4620      	mov	r0, r4
 800a1dc:	b00b      	add	sp, #44	; 0x2c
 800a1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a1e2:	2411      	movs	r4, #17
 800a1e4:	e7f9      	b.n	800a1da <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a1e6:	2411      	movs	r4, #17
 800a1e8:	e7f7      	b.n	800a1da <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a1ea:	2413      	movs	r4, #19
 800a1ec:	e7f5      	b.n	800a1da <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a1ee:	2411      	movs	r4, #17
 800a1f0:	e7f3      	b.n	800a1da <LoRaMacInitialization+0x346>
 800a1f2:	bf00      	nop
 800a1f4:	20000bd4 	.word	0x20000bd4
 800a1f8:	200006cc 	.word	0x200006cc
 800a1fc:	01000300 	.word	0x01000300
 800a200:	0800927d 	.word	0x0800927d
 800a204:	080096f9 	.word	0x080096f9
 800a208:	080096a9 	.word	0x080096a9
 800a20c:	08007fb5 	.word	0x08007fb5
 800a210:	08009801 	.word	0x08009801
 800a214:	080097a9 	.word	0x080097a9
 800a218:	08007b41 	.word	0x08007b41
 800a21c:	08009775 	.word	0x08009775
 800a220:	08009741 	.word	0x08009741
 800a224:	08018400 	.word	0x08018400

0800a228 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800a228:	2000      	movs	r0, #0
 800a22a:	4b02      	ldr	r3, [pc, #8]	; (800a234 <LoRaMacStart+0xc>)
 800a22c:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
}
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	200006cc 	.word	0x200006cc

0800a238 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800a238:	b530      	push	{r4, r5, lr}
 800a23a:	b089      	sub	sp, #36	; 0x24
 800a23c:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a23e:	4b2f      	ldr	r3, [pc, #188]	; (800a2fc <LoRaMacQueryTxPossible+0xc4>)
 800a240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a242:	9202      	str	r2, [sp, #8]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a244:	f993 00c5 	ldrsb.w	r0, [r3, #197]	; 0xc5
 800a248:	f88d 0007 	strb.w	r0, [sp, #7]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a24c:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 800a250:	f88d 3006 	strb.w	r3, [sp, #6]
    size_t macCmdsSize = 0;
 800a254:	2300      	movs	r3, #0
 800a256:	9300      	str	r3, [sp, #0]

    if( txInfo == NULL )
 800a258:	2900      	cmp	r1, #0
 800a25a:	d048      	beq.n	800a2ee <LoRaMacQueryTxPossible+0xb6>
 800a25c:	460d      	mov	r5, r1
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 800a25e:	4b27      	ldr	r3, [pc, #156]	; (800a2fc <LoRaMacQueryTxPossible+0xc4>)
 800a260:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800a264:	9103      	str	r1, [sp, #12]
    adrNext.UpdateChanMask = false;
 800a266:	2100      	movs	r1, #0
 800a268:	f88d 1010 	strb.w	r1, [sp, #16]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800a26c:	f893 10fe 	ldrb.w	r1, [r3, #254]	; 0xfe
 800a270:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a274:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800a276:	4a22      	ldr	r2, [pc, #136]	; (800a300 <LoRaMacQueryTxPossible+0xc8>)
 800a278:	f8b2 13f4 	ldrh.w	r1, [r2, #1012]	; 0x3f4
 800a27c:	f8ad 1018 	strh.w	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800a280:	f8b2 23f6 	ldrh.w	r2, [r2, #1014]	; 0x3f6
 800a284:	f8ad 201a 	strh.w	r2, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a288:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800a28c:	f88d 201c 	strb.w	r2, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a290:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 800a294:	f88d 201d 	strb.w	r2, [sp, #29]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a298:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800a29c:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 800a2a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a2a4:	f88d 301f 	strb.w	r3, [sp, #31]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800a2a8:	ab02      	add	r3, sp, #8
 800a2aa:	f10d 0206 	add.w	r2, sp, #6
 800a2ae:	f10d 0107 	add.w	r1, sp, #7
 800a2b2:	a803      	add	r0, sp, #12
 800a2b4:	f000 fdcd 	bl	800ae52 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800a2b8:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800a2bc:	f7fd fdcc 	bl	8007e58 <GetMaxAppPayloadWithoutFOptsLength>
 800a2c0:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a2c2:	4668      	mov	r0, sp
 800a2c4:	f000 fef8 	bl	800b0b8 <LoRaMacCommandsGetSizeSerializedCmds>
 800a2c8:	b998      	cbnz	r0, 800a2f2 <LoRaMacQueryTxPossible+0xba>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800a2ca:	9b00      	ldr	r3, [sp, #0]
 800a2cc:	2b0f      	cmp	r3, #15
 800a2ce:	d80a      	bhi.n	800a2e6 <LoRaMacQueryTxPossible+0xae>
 800a2d0:	786a      	ldrb	r2, [r5, #1]
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d807      	bhi.n	800a2e6 <LoRaMacQueryTxPossible+0xae>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800a2d6:	1ad3      	subs	r3, r2, r3
 800a2d8:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800a2da:	9b00      	ldr	r3, [sp, #0]
 800a2dc:	441c      	add	r4, r3
 800a2de:	42a2      	cmp	r2, r4
 800a2e0:	d309      	bcc.n	800a2f6 <LoRaMacQueryTxPossible+0xbe>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800a2e2:	b009      	add	sp, #36	; 0x24
 800a2e4:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800a2ea:	2008      	movs	r0, #8
 800a2ec:	e7f9      	b.n	800a2e2 <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a2ee:	2003      	movs	r0, #3
 800a2f0:	e7f7      	b.n	800a2e2 <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a2f2:	2013      	movs	r0, #19
 800a2f4:	e7f5      	b.n	800a2e2 <LoRaMacQueryTxPossible+0xaa>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800a2f6:	2008      	movs	r0, #8
 800a2f8:	e7f3      	b.n	800a2e2 <LoRaMacQueryTxPossible+0xaa>
 800a2fa:	bf00      	nop
 800a2fc:	20000bd4 	.word	0x20000bd4
 800a300:	200006cc 	.word	0x200006cc

0800a304 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800a304:	2800      	cmp	r0, #0
 800a306:	f000 8109 	beq.w	800a51c <LoRaMacMibGetRequestConfirm+0x218>
{
 800a30a:	b510      	push	{r4, lr}
 800a30c:	b084      	sub	sp, #16
 800a30e:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800a310:	7800      	ldrb	r0, [r0, #0]
 800a312:	2828      	cmp	r0, #40	; 0x28
 800a314:	f200 80fe 	bhi.w	800a514 <LoRaMacMibGetRequestConfirm+0x210>
 800a318:	e8df f010 	tbh	[pc, r0, lsl #1]
 800a31c:	002f0029 	.word	0x002f0029
 800a320:	003a0035 	.word	0x003a0035
 800a324:	0045003f 	.word	0x0045003f
 800a328:	00fc004b 	.word	0x00fc004b
 800a32c:	00fc00fc 	.word	0x00fc00fc
 800a330:	00fc00fc 	.word	0x00fc00fc
 800a334:	00fc00fc 	.word	0x00fc00fc
 800a338:	005100fc 	.word	0x005100fc
 800a33c:	005d0057 	.word	0x005d0057
 800a340:	00710069 	.word	0x00710069
 800a344:	00810079 	.word	0x00810079
 800a348:	00890095 	.word	0x00890095
 800a34c:	00a700a1 	.word	0x00a700a1
 800a350:	00b100ac 	.word	0x00b100ac
 800a354:	00bb00b6 	.word	0x00bb00b6
 800a358:	00c600c0 	.word	0x00c600c0
 800a35c:	00cc00d2 	.word	0x00cc00d2
 800a360:	00dd00d8 	.word	0x00dd00d8
 800a364:	00ed00e3 	.word	0x00ed00e3
 800a368:	00fc00e8 	.word	0x00fc00e8
 800a36c:	00f3      	.short	0x00f3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800a36e:	4b6c      	ldr	r3, [pc, #432]	; (800a520 <LoRaMacMibGetRequestConfirm+0x21c>)
 800a370:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800a374:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800a376:	b004      	add	sp, #16
 800a378:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a37a:	4b69      	ldr	r3, [pc, #420]	; (800a520 <LoRaMacMibGetRequestConfirm+0x21c>)
 800a37c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800a380:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a382:	2000      	movs	r0, #0
            break;
 800a384:	e7f7      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800a386:	f00a f8d1 	bl	801452c <SecureElementGetDevEui>
 800a38a:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a38c:	2000      	movs	r0, #0
            break;
 800a38e:	e7f2      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800a390:	f00a f8e2 	bl	8014558 <SecureElementGetJoinEui>
 800a394:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a396:	2000      	movs	r0, #0
            break;
 800a398:	e7ed      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800a39a:	4b61      	ldr	r3, [pc, #388]	; (800a520 <LoRaMacMibGetRequestConfirm+0x21c>)
 800a39c:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800a3a0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a3a2:	2000      	movs	r0, #0
            break;
 800a3a4:	e7e7      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800a3a6:	4b5e      	ldr	r3, [pc, #376]	; (800a520 <LoRaMacMibGetRequestConfirm+0x21c>)
 800a3a8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800a3ac:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a3ae:	2000      	movs	r0, #0
            break;
 800a3b0:	e7e1      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 800a3b2:	4b5b      	ldr	r3, [pc, #364]	; (800a520 <LoRaMacMibGetRequestConfirm+0x21c>)
 800a3b4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800a3b8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a3ba:	2000      	movs	r0, #0
            break;
 800a3bc:	e7db      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800a3be:	4b58      	ldr	r3, [pc, #352]	; (800a520 <LoRaMacMibGetRequestConfirm+0x21c>)
 800a3c0:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 800a3c4:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a3c6:	2000      	movs	r0, #0
            break;
 800a3c8:	e7d5      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800a3ca:	4b55      	ldr	r3, [pc, #340]	; (800a520 <LoRaMacMibGetRequestConfirm+0x21c>)
 800a3cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a3d0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a3d2:	2000      	movs	r0, #0
            break;
 800a3d4:	e7cf      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS;
 800a3d6:	231d      	movs	r3, #29
 800a3d8:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a3dc:	a902      	add	r1, sp, #8
 800a3de:	4b50      	ldr	r3, [pc, #320]	; (800a520 <LoRaMacMibGetRequestConfirm+0x21c>)
 800a3e0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a3e4:	f001 fd27 	bl	800be36 <RegionGetPhyParam>
            mibGet->Param.ChannelList = phyParam.Channels;
 800a3e8:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a3ea:	2000      	movs	r0, #0
            break;
 800a3ec:	e7c3      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800a3ee:	3404      	adds	r4, #4
 800a3f0:	4b4c      	ldr	r3, [pc, #304]	; (800a524 <LoRaMacMibGetRequestConfirm+0x220>)
 800a3f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a3f6:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a3fa:	2000      	movs	r0, #0
            break;
 800a3fc:	e7bb      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800a3fe:	3404      	adds	r4, #4
 800a400:	4b49      	ldr	r3, [pc, #292]	; (800a528 <LoRaMacMibGetRequestConfirm+0x224>)
 800a402:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a406:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a40a:	2000      	movs	r0, #0
            break;
 800a40c:	e7b3      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800a40e:	3404      	adds	r4, #4
 800a410:	4b46      	ldr	r3, [pc, #280]	; (800a52c <LoRaMacMibGetRequestConfirm+0x228>)
 800a412:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a416:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a41a:	2000      	movs	r0, #0
            break;
 800a41c:	e7ab      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800a41e:	3404      	adds	r4, #4
 800a420:	4b43      	ldr	r3, [pc, #268]	; (800a530 <LoRaMacMibGetRequestConfirm+0x22c>)
 800a422:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a426:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a42a:	2000      	movs	r0, #0
            break;
 800a42c:	e7a3      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800a42e:	231b      	movs	r3, #27
 800a430:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a434:	a902      	add	r1, sp, #8
 800a436:	4b3a      	ldr	r3, [pc, #232]	; (800a520 <LoRaMacMibGetRequestConfirm+0x21c>)
 800a438:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a43c:	f001 fcfb 	bl	800be36 <RegionGetPhyParam>
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800a440:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a442:	2000      	movs	r0, #0
            break;
 800a444:	e797      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800a446:	231a      	movs	r3, #26
 800a448:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a44c:	a902      	add	r1, sp, #8
 800a44e:	4b34      	ldr	r3, [pc, #208]	; (800a520 <LoRaMacMibGetRequestConfirm+0x21c>)
 800a450:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a454:	f001 fcef 	bl	800be36 <RegionGetPhyParam>
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800a458:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a45a:	2000      	movs	r0, #0
            break;
 800a45c:	e78b      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800a45e:	4b30      	ldr	r3, [pc, #192]	; (800a520 <LoRaMacMibGetRequestConfirm+0x21c>)
 800a460:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a464:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a466:	2000      	movs	r0, #0
            break;
 800a468:	e785      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800a46a:	4b2d      	ldr	r3, [pc, #180]	; (800a520 <LoRaMacMibGetRequestConfirm+0x21c>)
 800a46c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a46e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a470:	2000      	movs	r0, #0
            break;
 800a472:	e780      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800a474:	4b2a      	ldr	r3, [pc, #168]	; (800a520 <LoRaMacMibGetRequestConfirm+0x21c>)
 800a476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a478:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a47a:	2000      	movs	r0, #0
            break;
 800a47c:	e77b      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800a47e:	4b28      	ldr	r3, [pc, #160]	; (800a520 <LoRaMacMibGetRequestConfirm+0x21c>)
 800a480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a482:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a484:	2000      	movs	r0, #0
            break;
 800a486:	e776      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800a488:	4b25      	ldr	r3, [pc, #148]	; (800a520 <LoRaMacMibGetRequestConfirm+0x21c>)
 800a48a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a48c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a48e:	2000      	movs	r0, #0
            break;
 800a490:	e771      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800a492:	4b23      	ldr	r3, [pc, #140]	; (800a520 <LoRaMacMibGetRequestConfirm+0x21c>)
 800a494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a496:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a498:	2000      	movs	r0, #0
            break;
 800a49a:	e76c      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a49c:	4b20      	ldr	r3, [pc, #128]	; (800a520 <LoRaMacMibGetRequestConfirm+0x21c>)
 800a49e:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 800a4a2:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a4a4:	2000      	movs	r0, #0
            break;
 800a4a6:	e766      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800a4a8:	4b1d      	ldr	r3, [pc, #116]	; (800a520 <LoRaMacMibGetRequestConfirm+0x21c>)
 800a4aa:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800a4ae:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a4b0:	2000      	movs	r0, #0
            break;
 800a4b2:	e760      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a4b4:	4b1a      	ldr	r3, [pc, #104]	; (800a520 <LoRaMacMibGetRequestConfirm+0x21c>)
 800a4b6:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 800a4ba:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a4bc:	2000      	movs	r0, #0
            break;
 800a4be:	e75a      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a4c0:	4b17      	ldr	r3, [pc, #92]	; (800a520 <LoRaMacMibGetRequestConfirm+0x21c>)
 800a4c2:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800a4c6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a4c8:	2000      	movs	r0, #0
            break;
 800a4ca:	e754      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800a4cc:	4b14      	ldr	r3, [pc, #80]	; (800a520 <LoRaMacMibGetRequestConfirm+0x21c>)
 800a4ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4d0:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a4d2:	2000      	movs	r0, #0
            break;
 800a4d4:	e74f      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800a4d6:	4b12      	ldr	r3, [pc, #72]	; (800a520 <LoRaMacMibGetRequestConfirm+0x21c>)
 800a4d8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a4dc:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a4de:	2000      	movs	r0, #0
            break;
 800a4e0:	e749      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800a4e2:	4b0f      	ldr	r3, [pc, #60]	; (800a520 <LoRaMacMibGetRequestConfirm+0x21c>)
 800a4e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4e6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a4e8:	2000      	movs	r0, #0
            break;
 800a4ea:	e744      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Contexts = GetNvmData( );
 800a4ec:	f7fd fbde 	bl	8007cac <GetNvmData>
 800a4f0:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a4f2:	2000      	movs	r0, #0
            break;
 800a4f4:	e73f      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800a4f6:	4b0a      	ldr	r3, [pc, #40]	; (800a520 <LoRaMacMibGetRequestConfirm+0x21c>)
 800a4f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a4fc:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a4fe:	2000      	movs	r0, #0
            break;
 800a500:	e739      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800a502:	4b07      	ldr	r3, [pc, #28]	; (800a520 <LoRaMacMibGetRequestConfirm+0x21c>)
 800a504:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a508:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800a50a:	f001 ffff 	bl	800c50c <RegionGetVersion>
 800a50e:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a510:	2000      	movs	r0, #0
            break;
 800a512:	e730      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800a514:	4620      	mov	r0, r4
 800a516:	f000 fcbc 	bl	800ae92 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800a51a:	e72c      	b.n	800a376 <LoRaMacMibGetRequestConfirm+0x72>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a51c:	2003      	movs	r0, #3
}
 800a51e:	4770      	bx	lr
 800a520:	20000bd4 	.word	0x20000bd4
 800a524:	20000c38 	.word	0x20000c38
 800a528:	20000c78 	.word	0x20000c78
 800a52c:	20000c40 	.word	0x20000c40
 800a530:	20000c80 	.word	0x20000c80

0800a534 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800a534:	b530      	push	{r4, r5, lr}
 800a536:	b085      	sub	sp, #20
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800a538:	2800      	cmp	r0, #0
 800a53a:	f000 8240 	beq.w	800a9be <LoRaMacMibSetRequestConfirm+0x48a>
 800a53e:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800a540:	4bb1      	ldr	r3, [pc, #708]	; (800a808 <LoRaMacMibSetRequestConfirm+0x2d4>)
 800a542:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a546:	f013 0f02 	tst.w	r3, #2
 800a54a:	f040 823a 	bne.w	800a9c2 <LoRaMacMibSetRequestConfirm+0x48e>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800a54e:	7804      	ldrb	r4, [r0, #0]
 800a550:	2c27      	cmp	r4, #39	; 0x27
 800a552:	f200 8230 	bhi.w	800a9b6 <LoRaMacMibSetRequestConfirm+0x482>
 800a556:	e8df f014 	tbh	[pc, r4, lsl #1]
 800a55a:	0028      	.short	0x0028
 800a55c:	0036002d 	.word	0x0036002d
 800a560:	0047003f 	.word	0x0047003f
 800a564:	0053004d 	.word	0x0053004d
 800a568:	00660059 	.word	0x00660059
 800a56c:	00800073 	.word	0x00800073
 800a570:	009a008d 	.word	0x009a008d
 800a574:	00b400a7 	.word	0x00b400a7
 800a578:	00cc00c1 	.word	0x00cc00c1
 800a57c:	00d2022e 	.word	0x00d2022e
 800a580:	011000f7 	.word	0x011000f7
 800a584:	0173013d 	.word	0x0173013d
 800a588:	01830163 	.word	0x01830163
 800a58c:	0193018e 	.word	0x0193018e
 800a590:	019d0198 	.word	0x019d0198
 800a594:	01a701a2 	.word	0x01a701a2
 800a598:	01e901bc 	.word	0x01e901bc
 800a59c:	01fd01d5 	.word	0x01fd01d5
 800a5a0:	020c0204 	.word	0x020c0204
 800a5a4:	02170211 	.word	0x02170211
 800a5a8:	021e      	.short	0x021e
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800a5aa:	7900      	ldrb	r0, [r0, #4]
 800a5ac:	f7ff f9f6 	bl	800999c <SwitchClass>
 800a5b0:	4604      	mov	r4, r0
            break;
 800a5b2:	e207      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800a5b4:	7903      	ldrb	r3, [r0, #4]
 800a5b6:	2b02      	cmp	r3, #2
 800a5b8:	f000 8207 	beq.w	800a9ca <LoRaMacMibSetRequestConfirm+0x496>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800a5bc:	4a93      	ldr	r2, [pc, #588]	; (800a80c <LoRaMacMibSetRequestConfirm+0x2d8>)
 800a5be:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a5c2:	2400      	movs	r4, #0
 800a5c4:	e1fe      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800a5c6:	6840      	ldr	r0, [r0, #4]
 800a5c8:	f009 ffa2 	bl	8014510 <SecureElementSetDevEui>
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	f000 81f8 	beq.w	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a5d4:	2403      	movs	r4, #3
 800a5d6:	e1f5      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800a5d8:	6840      	ldr	r0, [r0, #4]
 800a5da:	f009 ffad 	bl	8014538 <SecureElementSetJoinEui>
 800a5de:	2800      	cmp	r0, #0
 800a5e0:	f040 81f0 	bne.w	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a5e4:	4604      	mov	r4, r0
 800a5e6:	e1ed      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800a5e8:	7902      	ldrb	r2, [r0, #4]
 800a5ea:	4b88      	ldr	r3, [pc, #544]	; (800a80c <LoRaMacMibSetRequestConfirm+0x2d8>)
 800a5ec:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a5f0:	2400      	movs	r4, #0
            break;
 800a5f2:	e1e7      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800a5f4:	6842      	ldr	r2, [r0, #4]
 800a5f6:	4b85      	ldr	r3, [pc, #532]	; (800a80c <LoRaMacMibSetRequestConfirm+0x2d8>)
 800a5f8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a5fc:	2400      	movs	r4, #0
            break;
 800a5fe:	e1e1      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800a600:	6842      	ldr	r2, [r0, #4]
 800a602:	4b82      	ldr	r3, [pc, #520]	; (800a80c <LoRaMacMibSetRequestConfirm+0x2d8>)
 800a604:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a608:	2400      	movs	r4, #0
            break;
 800a60a:	e1db      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800a60c:	6841      	ldr	r1, [r0, #4]
 800a60e:	2900      	cmp	r1, #0
 800a610:	f000 81dd 	beq.w	800a9ce <LoRaMacMibSetRequestConfirm+0x49a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800a614:	2000      	movs	r0, #0
 800a616:	f001 fa19 	bl	800ba4c <LoRaMacCryptoSetKey>
 800a61a:	4604      	mov	r4, r0
 800a61c:	2800      	cmp	r0, #0
 800a61e:	f000 81d1 	beq.w	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a622:	2411      	movs	r4, #17
 800a624:	e1ce      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800a626:	6841      	ldr	r1, [r0, #4]
 800a628:	2900      	cmp	r1, #0
 800a62a:	f000 81d2 	beq.w	800a9d2 <LoRaMacMibSetRequestConfirm+0x49e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800a62e:	2001      	movs	r0, #1
 800a630:	f001 fa0c 	bl	800ba4c <LoRaMacCryptoSetKey>
 800a634:	4604      	mov	r4, r0
 800a636:	2800      	cmp	r0, #0
 800a638:	f000 81c4 	beq.w	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a63c:	2411      	movs	r4, #17
 800a63e:	e1c1      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800a640:	6841      	ldr	r1, [r0, #4]
 800a642:	2900      	cmp	r1, #0
 800a644:	f000 81c7 	beq.w	800a9d6 <LoRaMacMibSetRequestConfirm+0x4a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800a648:	2002      	movs	r0, #2
 800a64a:	f001 f9ff 	bl	800ba4c <LoRaMacCryptoSetKey>
 800a64e:	4604      	mov	r4, r0
 800a650:	2800      	cmp	r0, #0
 800a652:	f000 81b7 	beq.w	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a656:	2411      	movs	r4, #17
 800a658:	e1b4      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
            break;
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800a65a:	6841      	ldr	r1, [r0, #4]
 800a65c:	2900      	cmp	r1, #0
 800a65e:	f000 81bc 	beq.w	800a9da <LoRaMacMibSetRequestConfirm+0x4a6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800a662:	2003      	movs	r0, #3
 800a664:	f001 f9f2 	bl	800ba4c <LoRaMacCryptoSetKey>
 800a668:	4604      	mov	r4, r0
 800a66a:	2800      	cmp	r0, #0
 800a66c:	f000 81aa 	beq.w	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a670:	2411      	movs	r4, #17
 800a672:	e1a7      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800a674:	6841      	ldr	r1, [r0, #4]
 800a676:	2900      	cmp	r1, #0
 800a678:	f000 81b1 	beq.w	800a9de <LoRaMacMibSetRequestConfirm+0x4aa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800a67c:	207f      	movs	r0, #127	; 0x7f
 800a67e:	f001 f9e5 	bl	800ba4c <LoRaMacCryptoSetKey>
 800a682:	4604      	mov	r4, r0
 800a684:	2800      	cmp	r0, #0
 800a686:	f000 819d 	beq.w	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a68a:	2411      	movs	r4, #17
 800a68c:	e19a      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
            break;
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800a68e:	6841      	ldr	r1, [r0, #4]
 800a690:	2900      	cmp	r1, #0
 800a692:	f000 81a6 	beq.w	800a9e2 <LoRaMacMibSetRequestConfirm+0x4ae>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800a696:	2080      	movs	r0, #128	; 0x80
 800a698:	f001 f9d8 	bl	800ba4c <LoRaMacCryptoSetKey>
 800a69c:	4604      	mov	r4, r0
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	f000 8190 	beq.w	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a6a4:	2411      	movs	r4, #17
 800a6a6:	e18d      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800a6a8:	6841      	ldr	r1, [r0, #4]
 800a6aa:	2900      	cmp	r1, #0
 800a6ac:	f000 819b 	beq.w	800a9e6 <LoRaMacMibSetRequestConfirm+0x4b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800a6b0:	2081      	movs	r0, #129	; 0x81
 800a6b2:	f001 f9cb 	bl	800ba4c <LoRaMacCryptoSetKey>
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	f000 8183 	beq.w	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a6be:	2411      	movs	r4, #17
 800a6c0:	e180      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800a6c2:	6841      	ldr	r1, [r0, #4]
 800a6c4:	2900      	cmp	r1, #0
 800a6c6:	f000 8190 	beq.w	800a9ea <LoRaMacMibSetRequestConfirm+0x4b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800a6ca:	2082      	movs	r0, #130	; 0x82
 800a6cc:	f001 f9be 	bl	800ba4c <LoRaMacCryptoSetKey>
 800a6d0:	4604      	mov	r4, r0
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	f000 8176 	beq.w	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a6d8:	2411      	movs	r4, #17
 800a6da:	e173      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800a6dc:	7900      	ldrb	r0, [r0, #4]
 800a6de:	4b4b      	ldr	r3, [pc, #300]	; (800a80c <LoRaMacMibSetRequestConfirm+0x2d8>)
 800a6e0:	f883 00fd 	strb.w	r0, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800a6e4:	4c4a      	ldr	r4, [pc, #296]	; (800a810 <LoRaMacMibSetRequestConfirm+0x2dc>)
 800a6e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a6e8:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 800a6ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a6ec:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6ee:	2400      	movs	r4, #0
            /* ST_WORKAROUND_END */
            break;
 800a6f0:	e168      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800a6f2:	7902      	ldrb	r2, [r0, #4]
 800a6f4:	4b45      	ldr	r3, [pc, #276]	; (800a80c <LoRaMacMibSetRequestConfirm+0x2d8>)
 800a6f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6fa:	2400      	movs	r4, #0
            break;
 800a6fc:	e162      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800a6fe:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800a702:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a706:	4b41      	ldr	r3, [pc, #260]	; (800a80c <LoRaMacMibSetRequestConfirm+0x2d8>)
 800a708:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800a70c:	f88d 2005 	strb.w	r2, [sp, #5]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800a710:	2207      	movs	r2, #7
 800a712:	a901      	add	r1, sp, #4
 800a714:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a718:	f001 fc29 	bl	800bf6e <RegionVerify>
 800a71c:	b908      	cbnz	r0, 800a722 <LoRaMacMibSetRequestConfirm+0x1ee>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a71e:	2403      	movs	r4, #3
 800a720:	e150      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
            }
            else
            {
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800a722:	686b      	ldr	r3, [r5, #4]
 800a724:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800a726:	2200      	movs	r2, #0
 800a728:	a901      	add	r1, sp, #4
 800a72a:	4b38      	ldr	r3, [pc, #224]	; (800a80c <LoRaMacMibSetRequestConfirm+0x2d8>)
 800a72c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a730:	f001 fc1d 	bl	800bf6e <RegionVerify>
 800a734:	2800      	cmp	r0, #0
 800a736:	f000 815a 	beq.w	800a9ee <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
                }
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800a73a:	4b36      	ldr	r3, [pc, #216]	; (800a814 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800a73c:	68a9      	ldr	r1, [r5, #8]
 800a73e:	6868      	ldr	r0, [r5, #4]
 800a740:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a744:	2400      	movs	r4, #0
 800a746:	e13d      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
            /* ST_WORKAROUND_END */
            break;
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800a748:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800a74c:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a750:	4b2e      	ldr	r3, [pc, #184]	; (800a80c <LoRaMacMibSetRequestConfirm+0x2d8>)
 800a752:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800a756:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800a75a:	2207      	movs	r2, #7
 800a75c:	a901      	add	r1, sp, #4
 800a75e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a762:	f001 fc04 	bl	800bf6e <RegionVerify>
 800a766:	2800      	cmp	r0, #0
 800a768:	f000 8143 	beq.w	800a9f2 <LoRaMacMibSetRequestConfirm+0x4be>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800a76c:	4b2a      	ldr	r3, [pc, #168]	; (800a818 <LoRaMacMibSetRequestConfirm+0x2e4>)
 800a76e:	68a9      	ldr	r1, [r5, #8]
 800a770:	6868      	ldr	r0, [r5, #4]
 800a772:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a776:	2400      	movs	r4, #0
 800a778:	e124      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800a77a:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800a77e:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a782:	4b22      	ldr	r3, [pc, #136]	; (800a80c <LoRaMacMibSetRequestConfirm+0x2d8>)
 800a784:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800a788:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800a78c:	2207      	movs	r2, #7
 800a78e:	a901      	add	r1, sp, #4
 800a790:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a794:	f001 fbeb 	bl	800bf6e <RegionVerify>
 800a798:	2800      	cmp	r0, #0
 800a79a:	f000 812c 	beq.w	800a9f6 <LoRaMacMibSetRequestConfirm+0x4c2>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800a79e:	4b1b      	ldr	r3, [pc, #108]	; (800a80c <LoRaMacMibSetRequestConfirm+0x2d8>)
 800a7a0:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800a7a4:	68a9      	ldr	r1, [r5, #8]
 800a7a6:	6868      	ldr	r0, [r5, #4]
 800a7a8:	e882 0003 	stmia.w	r2, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800a7ac:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800a7b0:	2b02      	cmp	r3, #2
 800a7b2:	d001      	beq.n	800a7b8 <LoRaMacMibSetRequestConfirm+0x284>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7b4:	2400      	movs	r4, #0
 800a7b6:	e105      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800a7b8:	f1a2 036c 	sub.w	r3, r2, #108	; 0x6c
 800a7bc:	f893 4110 	ldrb.w	r4, [r3, #272]	; 0x110
 800a7c0:	2c00      	cmp	r4, #0
 800a7c2:	f000 80ff 	beq.w	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800a7c6:	4b12      	ldr	r3, [pc, #72]	; (800a810 <LoRaMacMibSetRequestConfirm+0x2dc>)
 800a7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ca:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 800a7cc:	f7fe ff1c 	bl	8009608 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7d0:	2400      	movs	r4, #0
 800a7d2:	e0f7      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800a7d4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800a7d8:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a7dc:	4b0b      	ldr	r3, [pc, #44]	; (800a80c <LoRaMacMibSetRequestConfirm+0x2d8>)
 800a7de:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800a7e2:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800a7e6:	2207      	movs	r2, #7
 800a7e8:	a901      	add	r1, sp, #4
 800a7ea:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a7ee:	f001 fbbe 	bl	800bf6e <RegionVerify>
 800a7f2:	2800      	cmp	r0, #0
 800a7f4:	f000 8101 	beq.w	800a9fa <LoRaMacMibSetRequestConfirm+0x4c6>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800a7f8:	4b08      	ldr	r3, [pc, #32]	; (800a81c <LoRaMacMibSetRequestConfirm+0x2e8>)
 800a7fa:	68a9      	ldr	r1, [r5, #8]
 800a7fc:	6868      	ldr	r0, [r5, #4]
 800a7fe:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a802:	2400      	movs	r4, #0
 800a804:	e0de      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
 800a806:	bf00      	nop
 800a808:	200006cc 	.word	0x200006cc
 800a80c:	20000bd4 	.word	0x20000bd4
 800a810:	08018400 	.word	0x08018400
 800a814:	20000c38 	.word	0x20000c38
 800a818:	20000c78 	.word	0x20000c78
 800a81c:	20000c80 	.word	0x20000c80
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800a820:	6843      	ldr	r3, [r0, #4]
 800a822:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800a824:	2301      	movs	r3, #1
 800a826:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800a82a:	a902      	add	r1, sp, #8
 800a82c:	4b7c      	ldr	r3, [pc, #496]	; (800aa20 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a82e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a832:	f001 fbf4 	bl	800c01e <RegionChanMaskSet>
 800a836:	2800      	cmp	r0, #0
 800a838:	f000 80e1 	beq.w	800a9fe <LoRaMacMibSetRequestConfirm+0x4ca>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a83c:	2400      	movs	r4, #0
 800a83e:	e0c1      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800a840:	6843      	ldr	r3, [r0, #4]
 800a842:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800a844:	2300      	movs	r3, #0
 800a846:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800a84a:	a902      	add	r1, sp, #8
 800a84c:	4b74      	ldr	r3, [pc, #464]	; (800aa20 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a84e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a852:	f001 fbe4 	bl	800c01e <RegionChanMaskSet>
 800a856:	2800      	cmp	r0, #0
 800a858:	f000 80d3 	beq.w	800aa02 <LoRaMacMibSetRequestConfirm+0x4ce>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a85c:	2400      	movs	r4, #0
 800a85e:	e0b1      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800a860:	7902      	ldrb	r2, [r0, #4]
 800a862:	1e53      	subs	r3, r2, #1
 800a864:	b2db      	uxtb	r3, r3
 800a866:	2b0e      	cmp	r3, #14
 800a868:	f200 80cd 	bhi.w	800aa06 <LoRaMacMibSetRequestConfirm+0x4d2>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800a86c:	4b6c      	ldr	r3, [pc, #432]	; (800aa20 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a86e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a872:	2400      	movs	r4, #0
 800a874:	e0a6      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800a876:	6842      	ldr	r2, [r0, #4]
 800a878:	4b69      	ldr	r3, [pc, #420]	; (800aa20 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a87a:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a87c:	2400      	movs	r4, #0
            break;
 800a87e:	e0a1      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800a880:	6842      	ldr	r2, [r0, #4]
 800a882:	4b67      	ldr	r3, [pc, #412]	; (800aa20 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a884:	651a      	str	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a886:	2400      	movs	r4, #0
            break;
 800a888:	e09c      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800a88a:	6842      	ldr	r2, [r0, #4]
 800a88c:	4b64      	ldr	r3, [pc, #400]	; (800aa20 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a88e:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a890:	2400      	movs	r4, #0
            break;
 800a892:	e097      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800a894:	6842      	ldr	r2, [r0, #4]
 800a896:	4b62      	ldr	r3, [pc, #392]	; (800aa20 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a898:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a89a:	2400      	movs	r4, #0
            break;
 800a89c:	e092      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800a89e:	6842      	ldr	r2, [r0, #4]
 800a8a0:	4b5f      	ldr	r3, [pc, #380]	; (800aa20 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a8a2:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a8a4:	2400      	movs	r4, #0
            break;
 800a8a6:	e08d      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800a8a8:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800a8ac:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800a8b0:	2206      	movs	r2, #6
 800a8b2:	a901      	add	r1, sp, #4
 800a8b4:	4b5a      	ldr	r3, [pc, #360]	; (800aa20 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a8b6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a8ba:	f001 fb58 	bl	800bf6e <RegionVerify>
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	f000 80a3 	beq.w	800aa0a <LoRaMacMibSetRequestConfirm+0x4d6>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800a8c4:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800a8c8:	4b55      	ldr	r3, [pc, #340]	; (800aa20 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a8ca:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a8ce:	2400      	movs	r4, #0
 800a8d0:	e078      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800a8d2:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800a8d6:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a8da:	4b51      	ldr	r3, [pc, #324]	; (800aa20 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a8dc:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800a8e0:	f88d 2006 	strb.w	r2, [sp, #6]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800a8e4:	2205      	movs	r2, #5
 800a8e6:	a901      	add	r1, sp, #4
 800a8e8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a8ec:	f001 fb3f 	bl	800bf6e <RegionVerify>
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	f000 808c 	beq.w	800aa0e <LoRaMacMibSetRequestConfirm+0x4da>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800a8f6:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800a8fa:	4b49      	ldr	r3, [pc, #292]	; (800aa20 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a8fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a900:	2400      	movs	r4, #0
 800a902:	e05f      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800a904:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800a908:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800a90c:	220a      	movs	r2, #10
 800a90e:	a901      	add	r1, sp, #4
 800a910:	4b43      	ldr	r3, [pc, #268]	; (800aa20 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a912:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a916:	f001 fb2a 	bl	800bf6e <RegionVerify>
 800a91a:	2800      	cmp	r0, #0
 800a91c:	d079      	beq.n	800aa12 <LoRaMacMibSetRequestConfirm+0x4de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800a91e:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800a922:	4b3f      	ldr	r3, [pc, #252]	; (800aa20 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a924:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a928:	2400      	movs	r4, #0
 800a92a:	e04b      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800a92c:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800a930:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800a934:	2209      	movs	r2, #9
 800a936:	a901      	add	r1, sp, #4
 800a938:	4b39      	ldr	r3, [pc, #228]	; (800aa20 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a93a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a93e:	f001 fb16 	bl	800bf6e <RegionVerify>
 800a942:	2800      	cmp	r0, #0
 800a944:	d067      	beq.n	800aa16 <LoRaMacMibSetRequestConfirm+0x4e2>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800a946:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800a94a:	4b35      	ldr	r3, [pc, #212]	; (800aa20 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a94c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a950:	2400      	movs	r4, #0
 800a952:	e037      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800a954:	6842      	ldr	r2, [r0, #4]
 800a956:	4b32      	ldr	r3, [pc, #200]	; (800aa20 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800a95c:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a95e:	2400      	movs	r4, #0
            break;
 800a960:	e030      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800a962:	7902      	ldrb	r2, [r0, #4]
 800a964:	4b2e      	ldr	r3, [pc, #184]	; (800aa20 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a966:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 800a96a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a96e:	2400      	movs	r4, #0
            break;
 800a970:	e028      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800a972:	6842      	ldr	r2, [r0, #4]
 800a974:	4b2a      	ldr	r3, [pc, #168]	; (800aa20 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a976:	67da      	str	r2, [r3, #124]	; 0x7c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a978:	2400      	movs	r4, #0
            break;
 800a97a:	e023      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800a97c:	6842      	ldr	r2, [r0, #4]
 800a97e:	4b28      	ldr	r3, [pc, #160]	; (800aa20 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a980:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a984:	2400      	movs	r4, #0
            break;
 800a986:	e01d      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 800a988:	6840      	ldr	r0, [r0, #4]
 800a98a:	2800      	cmp	r0, #0
 800a98c:	d045      	beq.n	800aa1a <LoRaMacMibSetRequestConfirm+0x4e6>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 800a98e:	f7fe fdaf 	bl	80094f0 <RestoreNvmData>
 800a992:	4604      	mov	r4, r0
 800a994:	e016      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800a996:	7983      	ldrb	r3, [r0, #6]
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d901      	bls.n	800a9a0 <LoRaMacMibSetRequestConfirm+0x46c>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a99c:	2403      	movs	r4, #3
 800a99e:	e011      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800a9a0:	6842      	ldr	r2, [r0, #4]
 800a9a2:	4b1f      	ldr	r3, [pc, #124]	; (800aa20 <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a9a4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800a9a8:	6840      	ldr	r0, [r0, #4]
 800a9aa:	f000 fee3 	bl	800b774 <LoRaMacCryptoSetLrWanVersion>
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	b140      	cbz	r0, 800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a9b2:	2411      	movs	r4, #17
 800a9b4:	e006      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800a9b6:	f000 fa6e 	bl	800ae96 <LoRaMacMibClassBSetRequestConfirm>
 800a9ba:	4604      	mov	r4, r0
            break;
 800a9bc:	e002      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a9be:	2403      	movs	r4, #3
 800a9c0:	e000      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
        return LORAMAC_STATUS_BUSY;
 800a9c2:	2401      	movs	r4, #1
        }
    }
    return status;
}
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	b005      	add	sp, #20
 800a9c8:	bd30      	pop	{r4, r5, pc}
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a9ca:	2403      	movs	r4, #3
 800a9cc:	e7fa      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a9ce:	2403      	movs	r4, #3
 800a9d0:	e7f8      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a9d2:	2403      	movs	r4, #3
 800a9d4:	e7f6      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a9d6:	2403      	movs	r4, #3
 800a9d8:	e7f4      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a9da:	2403      	movs	r4, #3
 800a9dc:	e7f2      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a9de:	2403      	movs	r4, #3
 800a9e0:	e7f0      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a9e2:	2403      	movs	r4, #3
 800a9e4:	e7ee      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a9e6:	2403      	movs	r4, #3
 800a9e8:	e7ec      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a9ea:	2403      	movs	r4, #3
 800a9ec:	e7ea      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a9ee:	2403      	movs	r4, #3
 800a9f0:	e7e8      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a9f2:	2403      	movs	r4, #3
 800a9f4:	e7e6      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a9f6:	2403      	movs	r4, #3
 800a9f8:	e7e4      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a9fa:	2403      	movs	r4, #3
 800a9fc:	e7e2      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a9fe:	2403      	movs	r4, #3
 800aa00:	e7e0      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aa02:	2403      	movs	r4, #3
 800aa04:	e7de      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aa06:	2403      	movs	r4, #3
 800aa08:	e7dc      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aa0a:	2403      	movs	r4, #3
 800aa0c:	e7da      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aa0e:	2403      	movs	r4, #3
 800aa10:	e7d8      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aa12:	2403      	movs	r4, #3
 800aa14:	e7d6      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aa16:	2403      	movs	r4, #3
 800aa18:	e7d4      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aa1a:	2403      	movs	r4, #3
 800aa1c:	e7d2      	b.n	800a9c4 <LoRaMacMibSetRequestConfirm+0x490>
 800aa1e:	bf00      	nop
 800aa20:	20000bd4 	.word	0x20000bd4

0800aa24 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800aa24:	b570      	push	{r4, r5, r6, lr}
 800aa26:	b082      	sub	sp, #8
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800aa28:	2300      	movs	r3, #0
 800aa2a:	f8ad 3000 	strh.w	r3, [sp]

    if( mlmeRequest == NULL )
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	f000 80c5 	beq.w	800abbe <LoRaMacMlmeRequest+0x19a>
 800aa34:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 800aa36:	f7ff f9e7 	bl	8009e08 <LoRaMacIsBusy>
 800aa3a:	b118      	cbz	r0, 800aa44 <LoRaMacMlmeRequest+0x20>
    {
        return LORAMAC_STATUS_BUSY;
 800aa3c:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800aa3e:	4620      	mov	r0, r4
 800aa40:	b002      	add	sp, #8
 800aa42:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800aa44:	f000 fccc 	bl	800b3e0 <LoRaMacConfirmQueueIsFull>
 800aa48:	b108      	cbz	r0, 800aa4e <LoRaMacMlmeRequest+0x2a>
        return LORAMAC_STATUS_BUSY;
 800aa4a:	2401      	movs	r4, #1
 800aa4c:	e7f7      	b.n	800aa3e <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800aa4e:	f000 fcc1 	bl	800b3d4 <LoRaMacConfirmQueueGetCnt>
 800aa52:	b1f8      	cbz	r0, 800aa94 <LoRaMacMlmeRequest+0x70>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800aa54:	4b5b      	ldr	r3, [pc, #364]	; (800abc4 <LoRaMacMlmeRequest+0x1a0>)
 800aa56:	2101      	movs	r1, #1
 800aa58:	f883 144d 	strb.w	r1, [r3, #1101]	; 0x44d
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800aa5c:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800aa60:	f042 0204 	orr.w	r2, r2, #4
 800aa64:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 800aa68:	782b      	ldrb	r3, [r5, #0]
 800aa6a:	f88d 3004 	strb.w	r3, [sp, #4]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800aa6e:	f88d 1005 	strb.w	r1, [sp, #5]
    queueElement.RestrictCommonReadyToHandle = false;
 800aa72:	2200      	movs	r2, #0
 800aa74:	f88d 2007 	strb.w	r2, [sp, #7]
    switch( mlmeRequest->Type )
 800aa78:	461c      	mov	r4, r3
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	2b0d      	cmp	r3, #13
 800aa7e:	f200 8084 	bhi.w	800ab8a <LoRaMacMlmeRequest+0x166>
 800aa82:	e8df f003 	tbb	[pc, r3]
 800aa86:	820d      	.short	0x820d
 800aa88:	423d3382 	.word	0x423d3382
 800aa8c:	4b828282 	.word	0x4b828282
 800aa90:	6a547382 	.word	0x6a547382
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800aa94:	2214      	movs	r2, #20
 800aa96:	2100      	movs	r1, #0
 800aa98:	484b      	ldr	r0, [pc, #300]	; (800abc8 <LoRaMacMlmeRequest+0x1a4>)
 800aa9a:	f009 fda4 	bl	80145e6 <memset1>
 800aa9e:	e7d9      	b.n	800aa54 <LoRaMacMlmeRequest+0x30>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800aaa0:	4b48      	ldr	r3, [pc, #288]	; (800abc4 <LoRaMacMlmeRequest+0x1a0>)
 800aaa2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800aaa6:	f013 0f20 	tst.w	r3, #32
 800aaaa:	d1c8      	bne.n	800aa3e <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 800aaac:	f7fe fed4 	bl	8009858 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800aab0:	4c46      	ldr	r4, [pc, #280]	; (800abcc <LoRaMacMlmeRequest+0x1a8>)
 800aab2:	2200      	movs	r2, #0
 800aab4:	f995 1004 	ldrsb.w	r1, [r5, #4]
 800aab8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800aabc:	f001 fc6e 	bl	800c39c <RegionAlternateDr>
 800aac0:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800aac4:	2307      	movs	r3, #7
 800aac6:	f88d 3005 	strb.w	r3, [sp, #5]
            status = SendReJoinReq( JOIN_REQ );
 800aaca:	20ff      	movs	r0, #255	; 0xff
 800aacc:	f7fe ffea 	bl	8009aa4 <SendReJoinReq>
            if( status != LORAMAC_STATUS_OK )
 800aad0:	4604      	mov	r4, r0
 800aad2:	2800      	cmp	r0, #0
 800aad4:	d05a      	beq.n	800ab8c <LoRaMacMlmeRequest+0x168>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800aad6:	4e3d      	ldr	r6, [pc, #244]	; (800abcc <LoRaMacMlmeRequest+0x1a8>)
 800aad8:	2201      	movs	r2, #1
 800aada:	f995 1004 	ldrsb.w	r1, [r5, #4]
 800aade:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800aae2:	f001 fc5b 	bl	800c39c <RegionAlternateDr>
 800aae6:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800aaea:	e04f      	b.n	800ab8c <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800aaec:	2200      	movs	r2, #0
 800aaee:	4669      	mov	r1, sp
 800aaf0:	2002      	movs	r0, #2
 800aaf2:	f000 fa6d 	bl	800afd0 <LoRaMacCommandsAddCmd>
 800aaf6:	4604      	mov	r4, r0
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	d047      	beq.n	800ab8c <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800aafc:	2413      	movs	r4, #19
 800aafe:	e045      	b.n	800ab8c <LoRaMacMlmeRequest+0x168>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800ab00:	88a8      	ldrh	r0, [r5, #4]
 800ab02:	f7fe fffd 	bl	8009b00 <SetTxContinuousWave>
 800ab06:	4604      	mov	r4, r0
            break;
 800ab08:	e040      	b.n	800ab8c <LoRaMacMlmeRequest+0x168>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800ab0a:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800ab0e:	b2d2      	uxtb	r2, r2
 800ab10:	68a9      	ldr	r1, [r5, #8]
 800ab12:	88a8      	ldrh	r0, [r5, #4]
 800ab14:	f7fd f8b4 	bl	8007c80 <SetTxContinuousWave1>
 800ab18:	4604      	mov	r4, r0
            break;
 800ab1a:	e037      	b.n	800ab8c <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	4669      	mov	r1, sp
 800ab20:	200d      	movs	r0, #13
 800ab22:	f000 fa55 	bl	800afd0 <LoRaMacCommandsAddCmd>
 800ab26:	4604      	mov	r4, r0
 800ab28:	b380      	cbz	r0, 800ab8c <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ab2a:	2413      	movs	r4, #19
 800ab2c:	e02e      	b.n	800ab8c <LoRaMacMlmeRequest+0x168>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800ab2e:	4b27      	ldr	r3, [pc, #156]	; (800abcc <LoRaMacMlmeRequest+0x1a8>)
 800ab30:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800ab34:	b10b      	cbz	r3, 800ab3a <LoRaMacMlmeRequest+0x116>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ab36:	2402      	movs	r4, #2
 800ab38:	e028      	b.n	800ab8c <LoRaMacMlmeRequest+0x168>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800ab3a:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800ab3c:	f004 0007 	and.w	r0, r4, #7
 800ab40:	f000 f9a2 	bl	800ae88 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800ab44:	f88d 4000 	strb.w	r4, [sp]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800ab48:	2201      	movs	r2, #1
 800ab4a:	4669      	mov	r1, sp
 800ab4c:	2010      	movs	r0, #16
 800ab4e:	f000 fa3f 	bl	800afd0 <LoRaMacCommandsAddCmd>
 800ab52:	4604      	mov	r4, r0
 800ab54:	b1d0      	cbz	r0, 800ab8c <LoRaMacMlmeRequest+0x168>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ab56:	2413      	movs	r4, #19
 800ab58:	e018      	b.n	800ab8c <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	4669      	mov	r1, sp
 800ab5e:	2012      	movs	r0, #18
 800ab60:	f000 fa36 	bl	800afd0 <LoRaMacCommandsAddCmd>
 800ab64:	4604      	mov	r4, r0
 800ab66:	b188      	cbz	r0, 800ab8c <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ab68:	2413      	movs	r4, #19
 800ab6a:	e00f      	b.n	800ab8c <LoRaMacMlmeRequest+0x168>
            queueElement.RestrictCommonReadyToHandle = true;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	f88d 3007 	strb.w	r3, [sp, #7]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800ab72:	f000 f97a 	bl	800ae6a <LoRaMacClassBIsAcquisitionInProgress>
 800ab76:	b108      	cbz	r0, 800ab7c <LoRaMacMlmeRequest+0x158>
                status = LORAMAC_STATUS_BUSY;
 800ab78:	2401      	movs	r4, #1
 800ab7a:	e007      	b.n	800ab8c <LoRaMacMlmeRequest+0x168>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800ab7c:	f000 f972 	bl	800ae64 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800ab80:	2000      	movs	r0, #0
 800ab82:	f000 f974 	bl	800ae6e <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800ab86:	2400      	movs	r4, #0
 800ab88:	e000      	b.n	800ab8c <LoRaMacMlmeRequest+0x168>
    switch( mlmeRequest->Type )
 800ab8a:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800ab8c:	4b0d      	ldr	r3, [pc, #52]	; (800abc4 <LoRaMacMlmeRequest+0x1a0>)
 800ab8e:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800ab92:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800ab94:	b17c      	cbz	r4, 800abb6 <LoRaMacMlmeRequest+0x192>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800ab96:	f000 fc1d 	bl	800b3d4 <LoRaMacConfirmQueueGetCnt>
 800ab9a:	2800      	cmp	r0, #0
 800ab9c:	f47f af4f 	bne.w	800aa3e <LoRaMacMlmeRequest+0x1a>
            MacCtx.NodeAckRequested = false;
 800aba0:	4b08      	ldr	r3, [pc, #32]	; (800abc4 <LoRaMacMlmeRequest+0x1a0>)
 800aba2:	2100      	movs	r1, #0
 800aba4:	f883 1414 	strb.w	r1, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800aba8:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800abac:	f361 0282 	bfi	r2, r1, #2, #1
 800abb0:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 800abb4:	e743      	b.n	800aa3e <LoRaMacMlmeRequest+0x1a>
        LoRaMacConfirmQueueAdd( &queueElement );
 800abb6:	a801      	add	r0, sp, #4
 800abb8:	f000 fb48 	bl	800b24c <LoRaMacConfirmQueueAdd>
 800abbc:	e73f      	b.n	800aa3e <LoRaMacMlmeRequest+0x1a>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800abbe:	2403      	movs	r4, #3
 800abc0:	e73d      	b.n	800aa3e <LoRaMacMlmeRequest+0x1a>
 800abc2:	bf00      	nop
 800abc4:	200006cc 	.word	0x200006cc
 800abc8:	20000b18 	.word	0x20000b18
 800abcc:	20000bd4 	.word	0x20000bd4

0800abd0 <LoRaMacMcpsRequest>:
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800abd0:	2800      	cmp	r0, #0
 800abd2:	f000 80af 	beq.w	800ad34 <LoRaMacMcpsRequest+0x164>
{
 800abd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abda:	b088      	sub	sp, #32
 800abdc:	460d      	mov	r5, r1
 800abde:	f04f 0800 	mov.w	r8, #0
 800abe2:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 800abe4:	f7ff f910 	bl	8009e08 <LoRaMacIsBusy>
 800abe8:	4606      	mov	r6, r0
 800abea:	b118      	cbz	r0, 800abf4 <LoRaMacMcpsRequest+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 800abec:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800abee:	b008      	add	sp, #32
 800abf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    macHdr.Value = 0;
 800abf4:	4641      	mov	r1, r8
 800abf6:	f88d 8010 	strb.w	r8, [sp, #16]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800abfa:	4f50      	ldr	r7, [pc, #320]	; (800ad3c <LoRaMacMcpsRequest+0x16c>)
 800abfc:	2214      	movs	r2, #20
 800abfe:	f507 6087 	add.w	r0, r7, #1080	; 0x438
 800ac02:	f009 fcf0 	bl	80145e6 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ac06:	2301      	movs	r3, #1
 800ac08:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
    MacCtx.AckTimeoutRetriesCounter = 1;
 800ac0c:	f887 3412 	strb.w	r3, [r7, #1042]	; 0x412
    switch( mcpsRequest->Type )
 800ac10:	7823      	ldrb	r3, [r4, #0]
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d058      	beq.n	800acc8 <LoRaMacMcpsRequest+0xf8>
 800ac16:	2b03      	cmp	r3, #3
 800ac18:	d06e      	beq.n	800acf8 <LoRaMacMcpsRequest+0x128>
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d041      	beq.n	800aca2 <LoRaMacMcpsRequest+0xd2>
 800ac1e:	2700      	movs	r7, #0
 800ac20:	46ba      	mov	sl, r7
 800ac22:	46b9      	mov	r9, r7
    getPhy.Attribute = PHY_MIN_TX_DR;
 800ac24:	2302      	movs	r3, #2
 800ac26:	f88d 3018 	strb.w	r3, [sp, #24]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ac2a:	4b45      	ldr	r3, [pc, #276]	; (800ad40 <LoRaMacMcpsRequest+0x170>)
 800ac2c:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800ac30:	f88d 201a 	strb.w	r2, [sp, #26]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ac34:	a906      	add	r1, sp, #24
 800ac36:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ac3a:	f001 f8fc 	bl	800be36 <RegionGetPhyParam>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800ac3e:	b240      	sxtb	r0, r0
 800ac40:	42b8      	cmp	r0, r7
 800ac42:	bfb8      	it	lt
 800ac44:	4638      	movlt	r0, r7
    if( readyToSend == true )
 800ac46:	2e00      	cmp	r6, #0
 800ac48:	d06e      	beq.n	800ad28 <LoRaMacMcpsRequest+0x158>
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 800ac4a:	4b3d      	ldr	r3, [pc, #244]	; (800ad40 <LoRaMacMcpsRequest+0x170>)
 800ac4c:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800ac50:	b99b      	cbnz	r3, 800ac7a <LoRaMacMcpsRequest+0xaa>
            verify.DatarateParams.Datarate = datarate;
 800ac52:	f88d 000c 	strb.w	r0, [sp, #12]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ac56:	4b3a      	ldr	r3, [pc, #232]	; (800ad40 <LoRaMacMcpsRequest+0x170>)
 800ac58:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800ac5c:	f88d 200e 	strb.w	r2, [sp, #14]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800ac60:	2205      	movs	r2, #5
 800ac62:	a903      	add	r1, sp, #12
 800ac64:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ac68:	f001 f981 	bl	800bf6e <RegionVerify>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	d063      	beq.n	800ad38 <LoRaMacMcpsRequest+0x168>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ac70:	f99d 200c 	ldrsb.w	r2, [sp, #12]
 800ac74:	4b32      	ldr	r3, [pc, #200]	; (800ad40 <LoRaMacMcpsRequest+0x170>)
 800ac76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800ac7a:	9500      	str	r5, [sp, #0]
 800ac7c:	4643      	mov	r3, r8
 800ac7e:	4652      	mov	r2, sl
 800ac80:	4649      	mov	r1, r9
 800ac82:	a804      	add	r0, sp, #16
 800ac84:	f7ff f828 	bl	8009cd8 <Send>
        if( status == LORAMAC_STATUS_OK )
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	d148      	bne.n	800ad1e <LoRaMacMcpsRequest+0x14e>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800ac8c:	7822      	ldrb	r2, [r4, #0]
 800ac8e:	4b2b      	ldr	r3, [pc, #172]	; (800ad3c <LoRaMacMcpsRequest+0x16c>)
 800ac90:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800ac94:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800ac98:	f042 0201 	orr.w	r2, r2, #1
 800ac9c:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 800aca0:	e043      	b.n	800ad2a <LoRaMacMcpsRequest+0x15a>
            MacCtx.AckTimeoutRetries = 1;
 800aca2:	2601      	movs	r6, #1
 800aca4:	f887 6411 	strb.w	r6, [r7, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800aca8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800acac:	2202      	movs	r2, #2
 800acae:	f362 1347 	bfi	r3, r2, #5, #3
 800acb2:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800acb6:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800acba:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800acbe:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800acc2:	f994 700e 	ldrsb.w	r7, [r4, #14]
            break;
 800acc6:	e7ad      	b.n	800ac24 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800acc8:	7be3      	ldrb	r3, [r4, #15]
 800acca:	2b08      	cmp	r3, #8
 800accc:	bf28      	it	cs
 800acce:	2308      	movcs	r3, #8
 800acd0:	4a1a      	ldr	r2, [pc, #104]	; (800ad3c <LoRaMacMcpsRequest+0x16c>)
 800acd2:	f882 3411 	strb.w	r3, [r2, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800acd6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800acda:	2204      	movs	r2, #4
 800acdc:	f362 1347 	bfi	r3, r2, #5, #3
 800ace0:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800ace4:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800ace8:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800acec:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800acf0:	f994 700e 	ldrsb.w	r7, [r4, #14]
            readyToSend = true;
 800acf4:	2601      	movs	r6, #1
            break;
 800acf6:	e795      	b.n	800ac24 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = 1;
 800acf8:	2601      	movs	r6, #1
 800acfa:	4b10      	ldr	r3, [pc, #64]	; (800ad3c <LoRaMacMcpsRequest+0x16c>)
 800acfc:	f883 6411 	strb.w	r6, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800ad00:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ad04:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800ad08:	f88d 3010 	strb.w	r3, [sp, #16]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800ad0c:	f8d4 a004 	ldr.w	sl, [r4, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800ad10:	f8b4 8008 	ldrh.w	r8, [r4, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800ad14:	f994 700a 	ldrsb.w	r7, [r4, #10]
    uint8_t fPort = 0;
 800ad18:	f04f 0900 	mov.w	r9, #0
            break;
 800ad1c:	e782      	b.n	800ac24 <LoRaMacMcpsRequest+0x54>
            MacCtx.NodeAckRequested = false;
 800ad1e:	4b07      	ldr	r3, [pc, #28]	; (800ad3c <LoRaMacMcpsRequest+0x16c>)
 800ad20:	2200      	movs	r2, #0
 800ad22:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800ad26:	e000      	b.n	800ad2a <LoRaMacMcpsRequest+0x15a>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ad28:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800ad2a:	4b04      	ldr	r3, [pc, #16]	; (800ad3c <LoRaMacMcpsRequest+0x16c>)
 800ad2c:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800ad30:	6123      	str	r3, [r4, #16]
    return status;
 800ad32:	e75c      	b.n	800abee <LoRaMacMcpsRequest+0x1e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ad34:	2003      	movs	r0, #3
}
 800ad36:	4770      	bx	lr
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800ad38:	2003      	movs	r0, #3
 800ad3a:	e758      	b.n	800abee <LoRaMacMcpsRequest+0x1e>
 800ad3c:	200006cc 	.word	0x200006cc
 800ad40:	20000bd4 	.word	0x20000bd4

0800ad44 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800ad44:	b510      	push	{r4, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800ad4a:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800ad4e:	220f      	movs	r2, #15
 800ad50:	a901      	add	r1, sp, #4
 800ad52:	4b05      	ldr	r3, [pc, #20]	; (800ad68 <LoRaMacTestSetDutyCycleOn+0x24>)
 800ad54:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ad58:	f001 f909 	bl	800bf6e <RegionVerify>
 800ad5c:	b110      	cbz	r0, 800ad64 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800ad5e:	4b02      	ldr	r3, [pc, #8]	; (800ad68 <LoRaMacTestSetDutyCycleOn+0x24>)
 800ad60:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
    }
}
 800ad64:	b002      	add	sp, #8
 800ad66:	bd10      	pop	{r4, pc}
 800ad68:	20000bd4 	.word	0x20000bd4

0800ad6c <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800ad6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad70:	b089      	sub	sp, #36	; 0x24
 800ad72:	460f      	mov	r7, r1
 800ad74:	4616      	mov	r6, r2
 800ad76:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800ad78:	f990 9010 	ldrsb.w	r9, [r0, #16]
    int8_t txPower = adrNext->TxPower;
 800ad7c:	f990 a011 	ldrsb.w	sl, [r0, #17]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800ad80:	6883      	ldr	r3, [r0, #8]
 800ad82:	602b      	str	r3, [r5, #0]

    if( adrNext->AdrEnabled == true )
 800ad84:	f890 8005 	ldrb.w	r8, [r0, #5]
 800ad88:	f1b8 0f00 	cmp.w	r8, #0
 800ad8c:	d107      	bne.n	800ad9e <CalcNextV10X+0x32>
                }
            }
        }
    }

    *drOut = datarate;
 800ad8e:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800ad92:	f886 a000 	strb.w	sl, [r6]
    return adrAckReq;
}
 800ad96:	4640      	mov	r0, r8
 800ad98:	b009      	add	sp, #36	; 0x24
 800ad9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad9e:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800ada0:	2302      	movs	r3, #2
 800ada2:	f88d 3018 	strb.w	r3, [sp, #24]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800ada6:	7c83      	ldrb	r3, [r0, #18]
 800ada8:	f88d 301a 	strb.w	r3, [sp, #26]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800adac:	a906      	add	r1, sp, #24
 800adae:	7cc0      	ldrb	r0, [r0, #19]
 800adb0:	f001 f841 	bl	800be36 <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 800adb4:	fa4f fb80 	sxtb.w	fp, r0
        datarate = MAX( datarate, minTxDatarate );
 800adb8:	464a      	mov	r2, r9
 800adba:	45d9      	cmp	r9, fp
 800adbc:	bfb8      	it	lt
 800adbe:	465a      	movlt	r2, fp
 800adc0:	9201      	str	r2, [sp, #4]
        if( datarate == minTxDatarate )
 800adc2:	45d9      	cmp	r9, fp
 800adc4:	dc04      	bgt.n	800add0 <CalcNextV10X+0x64>
            *adrAckCounter = 0;
 800adc6:	2300      	movs	r3, #0
 800adc8:	602b      	str	r3, [r5, #0]
        datarate = MAX( datarate, minTxDatarate );
 800adca:	4691      	mov	r9, r2
            adrAckReq = false;
 800adcc:	4698      	mov	r8, r3
 800adce:	e7de      	b.n	800ad8e <CalcNextV10X+0x22>
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800add0:	68a2      	ldr	r2, [r4, #8]
 800add2:	89a3      	ldrh	r3, [r4, #12]
 800add4:	429a      	cmp	r2, r3
 800add6:	d201      	bcs.n	800addc <CalcNextV10X+0x70>
                adrAckReq = false;
 800add8:	f04f 0800 	mov.w	r8, #0
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800addc:	89e1      	ldrh	r1, [r4, #14]
 800adde:	440b      	add	r3, r1
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d202      	bcs.n	800adea <CalcNextV10X+0x7e>
        datarate = MAX( datarate, minTxDatarate );
 800ade4:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ade8:	e7d1      	b.n	800ad8e <CalcNextV10X+0x22>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800adea:	2308      	movs	r3, #8
 800adec:	f88d 3018 	strb.w	r3, [sp, #24]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800adf0:	a906      	add	r1, sp, #24
 800adf2:	7ce0      	ldrb	r0, [r4, #19]
 800adf4:	f001 f81f 	bl	800be36 <RegionGetPhyParam>
                txPower = phyParam.Value;
 800adf8:	fa4f fa80 	sxtb.w	sl, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800adfc:	68a1      	ldr	r1, [r4, #8]
 800adfe:	89e2      	ldrh	r2, [r4, #14]
 800ae00:	fbb1 f3f2 	udiv	r3, r1, r2
 800ae04:	fb02 1313 	mls	r3, r2, r3, r1
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d002      	beq.n	800ae12 <CalcNextV10X+0xa6>
        datarate = MAX( datarate, minTxDatarate );
 800ae0c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ae10:	e7bd      	b.n	800ad8e <CalcNextV10X+0x22>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800ae12:	2322      	movs	r3, #34	; 0x22
 800ae14:	f88d 3018 	strb.w	r3, [sp, #24]
                    getPhy.Datarate = datarate;
 800ae18:	9b01      	ldr	r3, [sp, #4]
 800ae1a:	f88d 3019 	strb.w	r3, [sp, #25]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800ae1e:	7ca3      	ldrb	r3, [r4, #18]
 800ae20:	f88d 301a 	strb.w	r3, [sp, #26]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800ae24:	a906      	add	r1, sp, #24
 800ae26:	7ce0      	ldrb	r0, [r4, #19]
 800ae28:	f001 f805 	bl	800be36 <RegionGetPhyParam>
                    datarate = phyParam.Value;
 800ae2c:	fa4f f980 	sxtb.w	r9, r0
                    if( datarate == minTxDatarate )
 800ae30:	45cb      	cmp	fp, r9
 800ae32:	d1ac      	bne.n	800ad8e <CalcNextV10X+0x22>
                        if( adrNext->UpdateChanMask == true )
 800ae34:	f894 8004 	ldrb.w	r8, [r4, #4]
 800ae38:	f1b8 0f00 	cmp.w	r8, #0
 800ae3c:	d0a7      	beq.n	800ad8e <CalcNextV10X+0x22>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800ae3e:	2302      	movs	r3, #2
 800ae40:	f88d 3010 	strb.w	r3, [sp, #16]
                            RegionInitDefaults( adrNext->Region, &params );
 800ae44:	a902      	add	r1, sp, #8
 800ae46:	7ce0      	ldrb	r0, [r4, #19]
 800ae48:	f001 f863 	bl	800bf12 <RegionInitDefaults>
                        adrAckReq = false;
 800ae4c:	f04f 0800 	mov.w	r8, #0
 800ae50:	e79d      	b.n	800ad8e <CalcNextV10X+0x22>

0800ae52 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800ae52:	b510      	push	{r4, lr}
    if( adrNext->Version.Fields.Minor == 0 )
 800ae54:	7884      	ldrb	r4, [r0, #2]
 800ae56:	b10c      	cbz	r4, 800ae5c <LoRaMacAdrCalcNext+0xa>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800ae58:	2000      	movs	r0, #0
}
 800ae5a:	bd10      	pop	{r4, pc}
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800ae5c:	f7ff ff86 	bl	800ad6c <CalcNextV10X>
 800ae60:	e7fb      	b.n	800ae5a <LoRaMacAdrCalcNext+0x8>

0800ae62 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ae62:	4770      	bx	lr

0800ae64 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ae64:	4770      	bx	lr

0800ae66 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ae66:	4770      	bx	lr

0800ae68 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ae68:	4770      	bx	lr

0800ae6a <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ae6a:	2000      	movs	r0, #0
 800ae6c:	4770      	bx	lr

0800ae6e <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ae6e:	4770      	bx	lr

0800ae70 <LoRaMacClassBPingSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ae70:	4770      	bx	lr

0800ae72 <LoRaMacClassBMulticastSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ae72:	4770      	bx	lr

0800ae74 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ae74:	2000      	movs	r0, #0
 800ae76:	4770      	bx	lr

0800ae78 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ae78:	2000      	movs	r0, #0
 800ae7a:	4770      	bx	lr

0800ae7c <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ae7c:	2000      	movs	r0, #0
 800ae7e:	4770      	bx	lr

0800ae80 <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ae80:	2000      	movs	r0, #0
 800ae82:	4770      	bx	lr

0800ae84 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ae84:	2000      	movs	r0, #0
 800ae86:	4770      	bx	lr

0800ae88 <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ae88:	4770      	bx	lr

0800ae8a <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ae8a:	4770      	bx	lr

0800ae8c <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ae8c:	4770      	bx	lr

0800ae8e <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ae8e:	2002      	movs	r0, #2
 800ae90:	4770      	bx	lr

0800ae92 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ae92:	2002      	movs	r0, #2
 800ae94:	4770      	bx	lr

0800ae96 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ae96:	2002      	movs	r0, #2
 800ae98:	4770      	bx	lr

0800ae9a <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ae9a:	4770      	bx	lr

0800ae9c <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ae9c:	2000      	movs	r0, #0
 800ae9e:	4770      	bx	lr

0800aea0 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800aea0:	4770      	bx	lr

0800aea2 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800aea2:	4770      	bx	lr

0800aea4 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800aea4:	2000      	movs	r0, #0
 800aea6:	4770      	bx	lr

0800aea8 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800aea8:	2000      	movs	r0, #0
 800aeaa:	4770      	bx	lr

0800aeac <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800aeac:	4770      	bx	lr

0800aeae <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800aeae:	4770      	bx	lr

0800aeb0 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	2b0f      	cmp	r3, #15
 800aeb4:	d804      	bhi.n	800aec0 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800aeb6:	5cc2      	ldrb	r2, [r0, r3]
 800aeb8:	b922      	cbnz	r2, 800aec4 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800aeba:	3301      	adds	r3, #1
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	e7f8      	b.n	800aeb2 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800aec0:	2001      	movs	r0, #1
 800aec2:	4770      	bx	lr
            return false;
 800aec4:	2000      	movs	r0, #0
}
 800aec6:	4770      	bx	lr

0800aec8 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800aec8:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800aeca:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800aecc:	0125      	lsls	r5, r4, #4
 800aece:	f105 0308 	add.w	r3, r5, #8
 800aed2:	4d06      	ldr	r5, [pc, #24]	; (800aeec <MallocNewMacCommandSlot+0x24>)
 800aed4:	441d      	add	r5, r3
 800aed6:	4628      	mov	r0, r5
 800aed8:	f7ff ffea 	bl	800aeb0 <IsSlotFree>
 800aedc:	b920      	cbnz	r0, 800aee8 <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 800aede:	3401      	adds	r4, #1
 800aee0:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800aee2:	2c0f      	cmp	r4, #15
 800aee4:	d1f2      	bne.n	800aecc <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800aee6:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800aee8:	4628      	mov	r0, r5
 800aeea:	bd38      	pop	{r3, r4, r5, pc}
 800aeec:	20001304 	.word	0x20001304

0800aef0 <LinkedListInit>:
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800aef0:	b120      	cbz	r0, 800aefc <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800aef2:	2200      	movs	r2, #0
 800aef4:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800aef6:	6042      	str	r2, [r0, #4]

    return true;
 800aef8:	2001      	movs	r0, #1
 800aefa:	4770      	bx	lr
        return false;
 800aefc:	2000      	movs	r0, #0
}
 800aefe:	4770      	bx	lr

0800af00 <LinkedListAdd>:
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800af00:	4603      	mov	r3, r0
 800af02:	b160      	cbz	r0, 800af1e <LinkedListAdd+0x1e>
 800af04:	b169      	cbz	r1, 800af22 <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800af06:	6802      	ldr	r2, [r0, #0]
 800af08:	b13a      	cbz	r2, 800af1a <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800af0a:	685a      	ldr	r2, [r3, #4]
 800af0c:	b102      	cbz	r2, 800af10 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800af0e:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800af10:	2200      	movs	r2, #0
 800af12:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800af14:	6059      	str	r1, [r3, #4]

    return true;
 800af16:	2001      	movs	r0, #1
 800af18:	4770      	bx	lr
        list->First = element;
 800af1a:	6001      	str	r1, [r0, #0]
 800af1c:	e7f5      	b.n	800af0a <LinkedListAdd+0xa>
        return false;
 800af1e:	2000      	movs	r0, #0
 800af20:	4770      	bx	lr
 800af22:	2000      	movs	r0, #0
}
 800af24:	4770      	bx	lr

0800af26 <LinkedListGetPrevious>:
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800af26:	b160      	cbz	r0, 800af42 <LinkedListGetPrevious+0x1c>
 800af28:	b161      	cbz	r1, 800af44 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800af2a:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800af2c:	4281      	cmp	r1, r0
 800af2e:	d102      	bne.n	800af36 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800af30:	2000      	movs	r0, #0
    }

    return curElement;
}
 800af32:	4770      	bx	lr
            curElement = curElement->Next;
 800af34:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800af36:	2800      	cmp	r0, #0
 800af38:	d0fb      	beq.n	800af32 <LinkedListGetPrevious+0xc>
 800af3a:	6803      	ldr	r3, [r0, #0]
 800af3c:	428b      	cmp	r3, r1
 800af3e:	d1f9      	bne.n	800af34 <LinkedListGetPrevious+0xe>
 800af40:	4770      	bx	lr
 800af42:	4770      	bx	lr
        return NULL;
 800af44:	4608      	mov	r0, r1
 800af46:	4770      	bx	lr

0800af48 <LinkedListRemove>:
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800af48:	b1b8      	cbz	r0, 800af7a <LinkedListRemove+0x32>
{
 800af4a:	b538      	push	{r3, r4, r5, lr}
 800af4c:	460c      	mov	r4, r1
 800af4e:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800af50:	b1a9      	cbz	r1, 800af7e <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800af52:	f7ff ffe8 	bl	800af26 <LinkedListGetPrevious>

    if( list->First == element )
 800af56:	682b      	ldr	r3, [r5, #0]
 800af58:	42a3      	cmp	r3, r4
 800af5a:	d009      	beq.n	800af70 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800af5c:	686b      	ldr	r3, [r5, #4]
 800af5e:	42a3      	cmp	r3, r4
 800af60:	d009      	beq.n	800af76 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800af62:	b108      	cbz	r0, 800af68 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800af64:	6823      	ldr	r3, [r4, #0]
 800af66:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800af68:	2300      	movs	r3, #0
 800af6a:	6023      	str	r3, [r4, #0]

    return true;
 800af6c:	2001      	movs	r0, #1
}
 800af6e:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800af70:	6823      	ldr	r3, [r4, #0]
 800af72:	602b      	str	r3, [r5, #0]
 800af74:	e7f2      	b.n	800af5c <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800af76:	6068      	str	r0, [r5, #4]
 800af78:	e7f3      	b.n	800af62 <LinkedListRemove+0x1a>
        return false;
 800af7a:	2000      	movs	r0, #0
}
 800af7c:	4770      	bx	lr
        return false;
 800af7e:	2000      	movs	r0, #0
 800af80:	e7f5      	b.n	800af6e <LinkedListRemove+0x26>

0800af82 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800af82:	2805      	cmp	r0, #5
 800af84:	d006      	beq.n	800af94 <IsSticky+0x12>
 800af86:	d307      	bcc.n	800af98 <IsSticky+0x16>
 800af88:	3808      	subs	r0, #8
 800af8a:	b2c0      	uxtb	r0, r0
 800af8c:	2802      	cmp	r0, #2
 800af8e:	d905      	bls.n	800af9c <IsSticky+0x1a>
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
        default:
            return false;
 800af90:	2000      	movs	r0, #0
 800af92:	4770      	bx	lr
    switch( cid )
 800af94:	2001      	movs	r0, #1
 800af96:	4770      	bx	lr
            return false;
 800af98:	2000      	movs	r0, #0
 800af9a:	4770      	bx	lr
    switch( cid )
 800af9c:	2001      	movs	r0, #1
    }
}
 800af9e:	4770      	bx	lr

0800afa0 <FreeMacCommandSlot>:
    if( slot == NULL )
 800afa0:	b130      	cbz	r0, 800afb0 <FreeMacCommandSlot+0x10>
{
 800afa2:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800afa4:	2210      	movs	r2, #16
 800afa6:	2100      	movs	r1, #0
 800afa8:	f009 fb1d 	bl	80145e6 <memset1>
    return true;
 800afac:	2001      	movs	r0, #1
}
 800afae:	bd08      	pop	{r3, pc}
        return false;
 800afb0:	2000      	movs	r0, #0
}
 800afb2:	4770      	bx	lr

0800afb4 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800afb4:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800afb6:	4c05      	ldr	r4, [pc, #20]	; (800afcc <LoRaMacCommandsInit+0x18>)
 800afb8:	22fc      	movs	r2, #252	; 0xfc
 800afba:	2100      	movs	r1, #0
 800afbc:	4620      	mov	r0, r4
 800afbe:	f009 fb12 	bl	80145e6 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800afc2:	4620      	mov	r0, r4
 800afc4:	f7ff ff94 	bl	800aef0 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800afc8:	2000      	movs	r0, #0
 800afca:	bd10      	pop	{r4, pc}
 800afcc:	20001304 	.word	0x20001304

0800afd0 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800afd0:	b301      	cbz	r1, 800b014 <LoRaMacCommandsAddCmd+0x44>
{
 800afd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afd4:	4605      	mov	r5, r0
 800afd6:	4614      	mov	r4, r2
 800afd8:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800afda:	f7ff ff75 	bl	800aec8 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800afde:	4606      	mov	r6, r0
 800afe0:	b1d0      	cbz	r0, 800b018 <LoRaMacCommandsAddCmd+0x48>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800afe2:	4601      	mov	r1, r0
 800afe4:	480e      	ldr	r0, [pc, #56]	; (800b020 <LoRaMacCommandsAddCmd+0x50>)
 800afe6:	f7ff ff8b 	bl	800af00 <LinkedListAdd>
 800afea:	b1b8      	cbz	r0, 800b01c <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800afec:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800afee:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800aff0:	b2a2      	uxth	r2, r4
 800aff2:	4639      	mov	r1, r7
 800aff4:	1d70      	adds	r0, r6, #5
 800aff6:	f009 fae0 	bl	80145ba <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800affa:	4628      	mov	r0, r5
 800affc:	f7ff ffc1 	bl	800af82 <IsSticky>
 800b000:	7330      	strb	r0, [r6, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800b002:	4b07      	ldr	r3, [pc, #28]	; (800b020 <LoRaMacCommandsAddCmd+0x50>)
 800b004:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800b008:	4414      	add	r4, r2
 800b00a:	3401      	adds	r4, #1
 800b00c:	f8c3 40f8 	str.w	r4, [r3, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 800b010:	2000      	movs	r0, #0
}
 800b012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b014:	2001      	movs	r0, #1
}
 800b016:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800b018:	2002      	movs	r0, #2
 800b01a:	e7fa      	b.n	800b012 <LoRaMacCommandsAddCmd+0x42>
        return LORAMAC_COMMANDS_ERROR;
 800b01c:	2005      	movs	r0, #5
 800b01e:	e7f8      	b.n	800b012 <LoRaMacCommandsAddCmd+0x42>
 800b020:	20001304 	.word	0x20001304

0800b024 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800b024:	b1a0      	cbz	r0, 800b050 <LoRaMacCommandsRemoveCmd+0x2c>
{
 800b026:	b510      	push	{r4, lr}
 800b028:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800b02a:	4601      	mov	r1, r0
 800b02c:	480b      	ldr	r0, [pc, #44]	; (800b05c <LoRaMacCommandsRemoveCmd+0x38>)
 800b02e:	f7ff ff8b 	bl	800af48 <LinkedListRemove>
 800b032:	b178      	cbz	r0, 800b054 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800b034:	68a1      	ldr	r1, [r4, #8]
 800b036:	4a09      	ldr	r2, [pc, #36]	; (800b05c <LoRaMacCommandsRemoveCmd+0x38>)
 800b038:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 800b03c:	1a5b      	subs	r3, r3, r1
 800b03e:	3b01      	subs	r3, #1
 800b040:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800b044:	4620      	mov	r0, r4
 800b046:	f7ff ffab 	bl	800afa0 <FreeMacCommandSlot>
 800b04a:	b128      	cbz	r0, 800b058 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800b04c:	2000      	movs	r0, #0
}
 800b04e:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b050:	2001      	movs	r0, #1
}
 800b052:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800b054:	2003      	movs	r0, #3
 800b056:	e7fa      	b.n	800b04e <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800b058:	2005      	movs	r0, #5
 800b05a:	e7f8      	b.n	800b04e <LoRaMacCommandsRemoveCmd+0x2a>
 800b05c:	20001304 	.word	0x20001304

0800b060 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800b060:	4b0a      	ldr	r3, [pc, #40]	; (800b08c <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800b062:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b064:	b120      	cbz	r0, 800b070 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800b066:	7b03      	ldrb	r3, [r0, #12]
 800b068:	b11b      	cbz	r3, 800b072 <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800b06a:	6800      	ldr	r0, [r0, #0]
 800b06c:	e7fa      	b.n	800b064 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b06e:	bd10      	pop	{r4, pc}
 800b070:	4770      	bx	lr
{
 800b072:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800b074:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800b076:	f7ff ffd5 	bl	800b024 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800b07a:	4620      	mov	r0, r4
    while( curElement != NULL )
 800b07c:	2800      	cmp	r0, #0
 800b07e:	d0f6      	beq.n	800b06e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800b080:	7b03      	ldrb	r3, [r0, #12]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d0f6      	beq.n	800b074 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800b086:	6800      	ldr	r0, [r0, #0]
 800b088:	e7f8      	b.n	800b07c <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800b08a:	bf00      	nop
 800b08c:	20001304 	.word	0x20001304

0800b090 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800b090:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800b092:	4b08      	ldr	r3, [pc, #32]	; (800b0b4 <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800b094:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b096:	e003      	b.n	800b0a0 <LoRaMacCommandsRemoveStickyAnsCmds+0x10>
    {
        nexElement = curElement->Next;
        if( IsSticky( curElement->CID ) == true )
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800b098:	4620      	mov	r0, r4
 800b09a:	f7ff ffc3 	bl	800b024 <LoRaMacCommandsRemoveCmd>
{
 800b09e:	462c      	mov	r4, r5
    while( curElement != NULL )
 800b0a0:	b134      	cbz	r4, 800b0b0 <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
        nexElement = curElement->Next;
 800b0a2:	6825      	ldr	r5, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 800b0a4:	7920      	ldrb	r0, [r4, #4]
 800b0a6:	f7ff ff6c 	bl	800af82 <IsSticky>
 800b0aa:	2800      	cmp	r0, #0
 800b0ac:	d0f7      	beq.n	800b09e <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
 800b0ae:	e7f3      	b.n	800b098 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b0b0:	2000      	movs	r0, #0
 800b0b2:	bd38      	pop	{r3, r4, r5, pc}
 800b0b4:	20001304 	.word	0x20001304

0800b0b8 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800b0b8:	b128      	cbz	r0, 800b0c6 <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800b0ba:	4a04      	ldr	r2, [pc, #16]	; (800b0cc <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800b0bc:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 800b0c0:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800b0c2:	2000      	movs	r0, #0
 800b0c4:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b0c6:	2001      	movs	r0, #1
}
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop
 800b0cc:	20001304 	.word	0x20001304

0800b0d0 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800b0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800b0d4:	4b16      	ldr	r3, [pc, #88]	; (800b130 <LoRaMacCommandsSerializeCmds+0x60>)
 800b0d6:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800b0d8:	b32a      	cbz	r2, 800b126 <LoRaMacCommandsSerializeCmds+0x56>
 800b0da:	4607      	mov	r7, r0
 800b0dc:	4688      	mov	r8, r1
 800b0de:	4616      	mov	r6, r2
 800b0e0:	b319      	cbz	r1, 800b12a <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800b0e2:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800b0e4:	b194      	cbz	r4, 800b10c <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800b0e6:	1a7a      	subs	r2, r7, r1
 800b0e8:	68a3      	ldr	r3, [r4, #8]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d30d      	bcc.n	800b10c <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800b0f0:	1c4d      	adds	r5, r1, #1
 800b0f2:	b2ed      	uxtb	r5, r5
 800b0f4:	7923      	ldrb	r3, [r4, #4]
 800b0f6:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800b0f8:	8922      	ldrh	r2, [r4, #8]
 800b0fa:	1d61      	adds	r1, r4, #5
 800b0fc:	1970      	adds	r0, r6, r5
 800b0fe:	f009 fa5c 	bl	80145ba <memcpy1>
            itr += curElement->PayloadSize;
 800b102:	68a3      	ldr	r3, [r4, #8]
 800b104:	441d      	add	r5, r3
 800b106:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800b108:	6824      	ldr	r4, [r4, #0]
 800b10a:	e7eb      	b.n	800b0e4 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800b10c:	b12c      	cbz	r4, 800b11a <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800b10e:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800b110:	4620      	mov	r0, r4
 800b112:	f7ff ff87 	bl	800b024 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800b116:	462c      	mov	r4, r5
 800b118:	e7f8      	b.n	800b10c <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800b11a:	4640      	mov	r0, r8
 800b11c:	f7ff ffcc 	bl	800b0b8 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800b120:	2000      	movs	r0, #0
}
 800b122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b126:	2001      	movs	r0, #1
 800b128:	e7fb      	b.n	800b122 <LoRaMacCommandsSerializeCmds+0x52>
 800b12a:	2001      	movs	r0, #1
 800b12c:	e7f9      	b.n	800b122 <LoRaMacCommandsSerializeCmds+0x52>
 800b12e:	bf00      	nop
 800b130:	20001304 	.word	0x20001304

0800b134 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 800b134:	4601      	mov	r1, r0
 800b136:	b170      	cbz	r0, 800b156 <LoRaMacCommandsStickyCmdsPending+0x22>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800b138:	4b08      	ldr	r3, [pc, #32]	; (800b15c <LoRaMacCommandsStickyCmdsPending+0x28>)
 800b13a:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 800b13c:	2200      	movs	r2, #0
 800b13e:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b140:	b13b      	cbz	r3, 800b152 <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 800b142:	7b1a      	ldrb	r2, [r3, #12]
 800b144:	b90a      	cbnz	r2, 800b14a <LoRaMacCommandsStickyCmdsPending+0x16>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	e7fa      	b.n	800b140 <LoRaMacCommandsStickyCmdsPending+0xc>
            *cmdsPending = true;
 800b14a:	2301      	movs	r3, #1
 800b14c:	700b      	strb	r3, [r1, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800b14e:	2000      	movs	r0, #0
 800b150:	4770      	bx	lr
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800b152:	2000      	movs	r0, #0
 800b154:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b156:	2001      	movs	r0, #1
}
 800b158:	4770      	bx	lr
 800b15a:	bf00      	nop
 800b15c:	20001304 	.word	0x20001304

0800b160 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800b160:	1e83      	subs	r3, r0, #2
 800b162:	2b11      	cmp	r3, #17
 800b164:	d80a      	bhi.n	800b17c <LoRaMacCommandsGetCmdSize+0x1c>
 800b166:	e8df f003 	tbb	[pc, r3]
 800b16a:	0b23      	.short	0x0b23
 800b16c:	110f240d 	.word	0x110f240d
 800b170:	09171513 	.word	0x09171513
 800b174:	09091909 	.word	0x09091909
 800b178:	211f1d1b 	.word	0x211f1d1b
            break;
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800b17c:	2000      	movs	r0, #0
 800b17e:	4770      	bx	lr
            cidSize = 5;
 800b180:	2005      	movs	r0, #5
            break;
 800b182:	4770      	bx	lr
            cidSize = 2;
 800b184:	2002      	movs	r0, #2
            break;
 800b186:	4770      	bx	lr
            cidSize = 1;
 800b188:	2001      	movs	r0, #1
            break;
 800b18a:	4770      	bx	lr
            cidSize = 6;
 800b18c:	2006      	movs	r0, #6
            break;
 800b18e:	4770      	bx	lr
            cidSize = 2;
 800b190:	2002      	movs	r0, #2
            break;
 800b192:	4770      	bx	lr
            cidSize = 2;
 800b194:	2002      	movs	r0, #2
            break;
 800b196:	4770      	bx	lr
            cidSize = 5;
 800b198:	2005      	movs	r0, #5
            break;
 800b19a:	4770      	bx	lr
            cidSize = 6;
 800b19c:	2006      	movs	r0, #6
            break;
 800b19e:	4770      	bx	lr
            cidSize = 1;
 800b1a0:	2001      	movs	r0, #1
            break;
 800b1a2:	4770      	bx	lr
            cidSize = 5;
 800b1a4:	2005      	movs	r0, #5
            break;
 800b1a6:	4770      	bx	lr
            cidSize = 4;
 800b1a8:	2004      	movs	r0, #4
            break;
 800b1aa:	4770      	bx	lr
            cidSize = 4;
 800b1ac:	2004      	movs	r0, #4
            break;
 800b1ae:	4770      	bx	lr
            cidSize = 3;
 800b1b0:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800b1b2:	4770      	bx	lr

0800b1b4 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b1b4:	4b03      	ldr	r3, [pc, #12]	; (800b1c4 <IncreaseBufferPointer+0x10>)
 800b1b6:	4298      	cmp	r0, r3
 800b1b8:	d001      	beq.n	800b1be <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800b1ba:	3004      	adds	r0, #4
 800b1bc:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b1be:	4802      	ldr	r0, [pc, #8]	; (800b1c8 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800b1c0:	4770      	bx	lr
 800b1c2:	bf00      	nop
 800b1c4:	2000141c 	.word	0x2000141c
 800b1c8:	2000140c 	.word	0x2000140c

0800b1cc <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800b1cc:	b108      	cbz	r0, 800b1d2 <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	4770      	bx	lr
        return true;
 800b1d2:	2001      	movs	r0, #1
}
 800b1d4:	4770      	bx	lr

0800b1d6 <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800b1d6:	2804      	cmp	r0, #4
 800b1d8:	d801      	bhi.n	800b1de <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800b1da:	2000      	movs	r0, #0
 800b1dc:	4770      	bx	lr
        return true;
 800b1de:	2001      	movs	r0, #1
}
 800b1e0:	4770      	bx	lr
	...

0800b1e4 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800b1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e6:	4606      	mov	r6, r0
 800b1e8:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b1ea:	4b0d      	ldr	r3, [pc, #52]	; (800b220 <GetElement+0x3c>)
 800b1ec:	f893 7020 	ldrb.w	r7, [r3, #32]
 800b1f0:	4638      	mov	r0, r7
 800b1f2:	f7ff ffeb 	bl	800b1cc <IsListEmpty>
 800b1f6:	b970      	cbnz	r0, 800b216 <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800b1f8:	2500      	movs	r5, #0
 800b1fa:	42af      	cmp	r7, r5
 800b1fc:	d909      	bls.n	800b212 <GetElement+0x2e>
    {
        if( element->Request == request )
 800b1fe:	7823      	ldrb	r3, [r4, #0]
 800b200:	42b3      	cmp	r3, r6
 800b202:	d00a      	beq.n	800b21a <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800b204:	4620      	mov	r0, r4
 800b206:	f7ff ffd5 	bl	800b1b4 <IncreaseBufferPointer>
 800b20a:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800b20c:	3501      	adds	r5, #1
 800b20e:	b2ed      	uxtb	r5, r5
 800b210:	e7f3      	b.n	800b1fa <GetElement+0x16>
    }

    return NULL;
 800b212:	2000      	movs	r0, #0
}
 800b214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800b216:	2000      	movs	r0, #0
 800b218:	e7fc      	b.n	800b214 <GetElement+0x30>
            return element;
 800b21a:	4620      	mov	r0, r4
 800b21c:	e7fa      	b.n	800b214 <GetElement+0x30>
 800b21e:	bf00      	nop
 800b220:	20001400 	.word	0x20001400

0800b224 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800b224:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800b226:	4c08      	ldr	r4, [pc, #32]	; (800b248 <LoRaMacConfirmQueueInit+0x24>)
 800b228:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800b22a:	2300      	movs	r3, #0
 800b22c:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b230:	f104 000c 	add.w	r0, r4, #12
 800b234:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b236:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800b238:	2214      	movs	r2, #20
 800b23a:	21ff      	movs	r1, #255	; 0xff
 800b23c:	f009 f9d3 	bl	80145e6 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b240:	2301      	movs	r3, #1
 800b242:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800b246:	bd10      	pop	{r4, pc}
 800b248:	20001400 	.word	0x20001400

0800b24c <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800b24c:	b538      	push	{r3, r4, r5, lr}
 800b24e:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b250:	4b0f      	ldr	r3, [pc, #60]	; (800b290 <LoRaMacConfirmQueueAdd+0x44>)
 800b252:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b256:	f7ff ffbe 	bl	800b1d6 <IsListFull>
 800b25a:	b9b8      	cbnz	r0, 800b28c <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800b25c:	4c0c      	ldr	r4, [pc, #48]	; (800b290 <LoRaMacConfirmQueueAdd+0x44>)
 800b25e:	68a3      	ldr	r3, [r4, #8]
 800b260:	782a      	ldrb	r2, [r5, #0]
 800b262:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800b264:	68a3      	ldr	r3, [r4, #8]
 800b266:	786a      	ldrb	r2, [r5, #1]
 800b268:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800b26a:	68a3      	ldr	r3, [r4, #8]
 800b26c:	78ea      	ldrb	r2, [r5, #3]
 800b26e:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800b270:	68a3      	ldr	r3, [r4, #8]
 800b272:	2200      	movs	r2, #0
 800b274:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800b276:	f894 3020 	ldrb.w	r3, [r4, #32]
 800b27a:	3301      	adds	r3, #1
 800b27c:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800b280:	68a0      	ldr	r0, [r4, #8]
 800b282:	f7ff ff97 	bl	800b1b4 <IncreaseBufferPointer>
 800b286:	60a0      	str	r0, [r4, #8]

    return true;
 800b288:	2001      	movs	r0, #1
}
 800b28a:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800b28c:	2000      	movs	r0, #0
 800b28e:	e7fc      	b.n	800b28a <LoRaMacConfirmQueueAdd+0x3e>
 800b290:	20001400 	.word	0x20001400

0800b294 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800b294:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b296:	4b09      	ldr	r3, [pc, #36]	; (800b2bc <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800b298:	f893 4020 	ldrb.w	r4, [r3, #32]
 800b29c:	4620      	mov	r0, r4
 800b29e:	f7ff ff95 	bl	800b1cc <IsListEmpty>
 800b2a2:	b948      	cbnz	r0, 800b2b8 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800b2a4:	4d05      	ldr	r5, [pc, #20]	; (800b2bc <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800b2a6:	3c01      	subs	r4, #1
 800b2a8:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800b2ac:	6868      	ldr	r0, [r5, #4]
 800b2ae:	f7ff ff81 	bl	800b1b4 <IncreaseBufferPointer>
 800b2b2:	6068      	str	r0, [r5, #4]

    return true;
 800b2b4:	2001      	movs	r0, #1
}
 800b2b6:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800b2b8:	2000      	movs	r0, #0
 800b2ba:	e7fc      	b.n	800b2b6 <LoRaMacConfirmQueueRemoveFirst+0x22>
 800b2bc:	20001400 	.word	0x20001400

0800b2c0 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800b2c0:	b538      	push	{r3, r4, r5, lr}
 800b2c2:	4605      	mov	r5, r0
 800b2c4:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b2c6:	4b08      	ldr	r3, [pc, #32]	; (800b2e8 <LoRaMacConfirmQueueSetStatus+0x28>)
 800b2c8:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b2cc:	f7ff ff7e 	bl	800b1cc <IsListEmpty>
 800b2d0:	b948      	cbnz	r0, 800b2e6 <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800b2d2:	4b05      	ldr	r3, [pc, #20]	; (800b2e8 <LoRaMacConfirmQueueSetStatus+0x28>)
 800b2d4:	689a      	ldr	r2, [r3, #8]
 800b2d6:	6859      	ldr	r1, [r3, #4]
 800b2d8:	4620      	mov	r0, r4
 800b2da:	f7ff ff83 	bl	800b1e4 <GetElement>
        if( element != NULL )
 800b2de:	b110      	cbz	r0, 800b2e6 <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800b2e0:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800b2e6:	bd38      	pop	{r3, r4, r5, pc}
 800b2e8:	20001400 	.word	0x20001400

0800b2ec <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800b2ec:	b510      	push	{r4, lr}
 800b2ee:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b2f0:	4b09      	ldr	r3, [pc, #36]	; (800b318 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800b2f2:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b2f6:	f7ff ff69 	bl	800b1cc <IsListEmpty>
 800b2fa:	b940      	cbnz	r0, 800b30e <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800b2fc:	4b06      	ldr	r3, [pc, #24]	; (800b318 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800b2fe:	689a      	ldr	r2, [r3, #8]
 800b300:	6859      	ldr	r1, [r3, #4]
 800b302:	4620      	mov	r0, r4
 800b304:	f7ff ff6e 	bl	800b1e4 <GetElement>
        if( element != NULL )
 800b308:	b118      	cbz	r0, 800b312 <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800b30a:	7840      	ldrb	r0, [r0, #1]
 800b30c:	e000      	b.n	800b310 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b30e:	2001      	movs	r0, #1
}
 800b310:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b312:	2001      	movs	r0, #1
 800b314:	e7fc      	b.n	800b310 <LoRaMacConfirmQueueGetStatus+0x24>
 800b316:	bf00      	nop
 800b318:	20001400 	.word	0x20001400

0800b31c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800b31c:	b538      	push	{r3, r4, r5, lr}
 800b31e:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800b320:	4b0c      	ldr	r3, [pc, #48]	; (800b354 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800b322:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800b324:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b328:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b32c:	f7ff ff4e 	bl	800b1cc <IsListEmpty>
 800b330:	b150      	cbz	r0, 800b348 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800b332:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800b334:	2301      	movs	r3, #1
 800b336:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800b338:	4620      	mov	r0, r4
 800b33a:	f7ff ff3b 	bl	800b1b4 <IncreaseBufferPointer>
 800b33e:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800b340:	4b04      	ldr	r3, [pc, #16]	; (800b354 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	4283      	cmp	r3, r0
 800b346:	d0f4      	beq.n	800b332 <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800b348:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800b34a:	78e3      	ldrb	r3, [r4, #3]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d1f3      	bne.n	800b338 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800b350:	e7f0      	b.n	800b334 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800b352:	bf00      	nop
 800b354:	20001400 	.word	0x20001400

0800b358 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800b358:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800b35a:	4b04      	ldr	r3, [pc, #16]	; (800b36c <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800b35c:	689a      	ldr	r2, [r3, #8]
 800b35e:	6859      	ldr	r1, [r3, #4]
 800b360:	f7ff ff40 	bl	800b1e4 <GetElement>
 800b364:	b100      	cbz	r0, 800b368 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800b366:	2001      	movs	r0, #1
    }
    return false;
}
 800b368:	bd08      	pop	{r3, pc}
 800b36a:	bf00      	nop
 800b36c:	20001400 	.word	0x20001400

0800b370 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800b370:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b372:	b083      	sub	sp, #12
 800b374:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800b376:	4b16      	ldr	r3, [pc, #88]	; (800b3d0 <LoRaMacConfirmQueueHandleCb+0x60>)
 800b378:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800b37c:	2400      	movs	r4, #0
 800b37e:	e00d      	b.n	800b39c <LoRaMacConfirmQueueHandleCb+0x2c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800b380:	781a      	ldrb	r2, [r3, #0]
 800b382:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800b386:	785a      	ldrb	r2, [r3, #1]
 800b388:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800b38c:	78db      	ldrb	r3, [r3, #3]
 800b38e:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800b392:	f7ff ff7f 	bl	800b294 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800b396:	b1a5      	cbz	r5, 800b3c2 <LoRaMacConfirmQueueHandleCb+0x52>
    for( uint8_t i = 0; i < nbElements; i++ )
 800b398:	3401      	adds	r4, #1
 800b39a:	b2e4      	uxtb	r4, r4
 800b39c:	42bc      	cmp	r4, r7
 800b39e:	d214      	bcs.n	800b3ca <LoRaMacConfirmQueueHandleCb+0x5a>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800b3a0:	4b0b      	ldr	r3, [pc, #44]	; (800b3d0 <LoRaMacConfirmQueueHandleCb+0x60>)
 800b3a2:	685a      	ldr	r2, [r3, #4]
 800b3a4:	7812      	ldrb	r2, [r2, #0]
 800b3a6:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800b3a8:	685a      	ldr	r2, [r3, #4]
 800b3aa:	7852      	ldrb	r2, [r2, #1]
 800b3ac:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800b3b2:	2d00      	cmp	r5, #0
 800b3b4:	d0e4      	beq.n	800b380 <LoRaMacConfirmQueueHandleCb+0x10>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800b3b6:	4b06      	ldr	r3, [pc, #24]	; (800b3d0 <LoRaMacConfirmQueueHandleCb+0x60>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	4630      	mov	r0, r6
 800b3be:	4798      	blx	r3
 800b3c0:	e7e7      	b.n	800b392 <LoRaMacConfirmQueueHandleCb+0x22>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800b3c2:	a801      	add	r0, sp, #4
 800b3c4:	f7ff ff42 	bl	800b24c <LoRaMacConfirmQueueAdd>
 800b3c8:	e7e6      	b.n	800b398 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 800b3ca:	b003      	add	sp, #12
 800b3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20001400 	.word	0x20001400

0800b3d4 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800b3d4:	4b01      	ldr	r3, [pc, #4]	; (800b3dc <LoRaMacConfirmQueueGetCnt+0x8>)
 800b3d6:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b3da:	4770      	bx	lr
 800b3dc:	20001400 	.word	0x20001400

0800b3e0 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800b3e0:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b3e2:	4b03      	ldr	r3, [pc, #12]	; (800b3f0 <LoRaMacConfirmQueueIsFull+0x10>)
 800b3e4:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b3e8:	f7ff fef5 	bl	800b1d6 <IsListFull>
    }
    else
    {
        return false;
    }
}
 800b3ec:	bd08      	pop	{r3, pc}
 800b3ee:	bf00      	nop
 800b3f0:	20001400 	.word	0x20001400

0800b3f4 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800b3f4:	b430      	push	{r4, r5}
 800b3f6:	9c02      	ldr	r4, [sp, #8]
 800b3f8:	9903      	ldr	r1, [sp, #12]
 800b3fa:	9a04      	ldr	r2, [sp, #16]
    if( b0 == 0 )
 800b3fc:	b1d2      	cbz	r2, 800b434 <PrepareB0+0x40>
 800b3fe:	4605      	mov	r5, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800b400:	2049      	movs	r0, #73	; 0x49
 800b402:	7010      	strb	r0, [r2, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 800b404:	2000      	movs	r0, #0
 800b406:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800b408:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800b40a:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800b40c:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800b40e:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800b410:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800b412:	0a23      	lsrs	r3, r4, #8
 800b414:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800b416:	0c23      	lsrs	r3, r4, #16
 800b418:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800b41a:	0e24      	lsrs	r4, r4, #24
 800b41c:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800b41e:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800b420:	0a0b      	lsrs	r3, r1, #8
 800b422:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800b424:	0c0b      	lsrs	r3, r1, #16
 800b426:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800b428:	0e09      	lsrs	r1, r1, #24
 800b42a:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800b42c:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800b42e:	73d5      	strb	r5, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800b430:	bc30      	pop	{r4, r5}
 800b432:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b434:	200a      	movs	r0, #10
 800b436:	e7fb      	b.n	800b430 <PrepareB0+0x3c>

0800b438 <GetKeyAddrItem>:
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800b438:	2300      	movs	r3, #0
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	d813      	bhi.n	800b466 <GetKeyAddrItem+0x2e>
{
 800b43e:	b410      	push	{r4}
    {
        if( KeyAddrList[i].AddrID == addrID )
 800b440:	461c      	mov	r4, r3
 800b442:	4a0a      	ldr	r2, [pc, #40]	; (800b46c <GetKeyAddrItem+0x34>)
 800b444:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800b448:	4282      	cmp	r2, r0
 800b44a:	d006      	beq.n	800b45a <GetKeyAddrItem+0x22>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800b44c:	3301      	adds	r3, #1
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	2b01      	cmp	r3, #1
 800b452:	d9f5      	bls.n	800b440 <GetKeyAddrItem+0x8>
        {
            *item = &( KeyAddrList[i] );
            return LORAMAC_CRYPTO_SUCCESS;
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800b454:	200c      	movs	r0, #12
}
 800b456:	bc10      	pop	{r4}
 800b458:	4770      	bx	lr
            *item = &( KeyAddrList[i] );
 800b45a:	4b04      	ldr	r3, [pc, #16]	; (800b46c <GetKeyAddrItem+0x34>)
 800b45c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b460:	600c      	str	r4, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800b462:	2000      	movs	r0, #0
 800b464:	e7f7      	b.n	800b456 <GetKeyAddrItem+0x1e>
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800b466:	200c      	movs	r0, #12
}
 800b468:	4770      	bx	lr
 800b46a:	bf00      	nop
 800b46c:	200000c4 	.word	0x200000c4

0800b470 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800b470:	460b      	mov	r3, r1
 800b472:	2900      	cmp	r1, #0
 800b474:	d024      	beq.n	800b4c0 <GetLastFcntDown+0x50>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800b476:	3801      	subs	r0, #1
 800b478:	2803      	cmp	r0, #3
 800b47a:	d823      	bhi.n	800b4c4 <GetLastFcntDown+0x54>
 800b47c:	e8df f000 	tbb	[pc, r0]
 800b480:	1a120a02 	.word	0x1a120a02
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800b484:	4a10      	ldr	r2, [pc, #64]	; (800b4c8 <GetLastFcntDown+0x58>)
 800b486:	6812      	ldr	r2, [r2, #0]
 800b488:	6911      	ldr	r1, [r2, #16]
 800b48a:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800b48c:	6913      	ldr	r3, [r2, #16]
 800b48e:	6213      	str	r3, [r2, #32]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800b490:	2000      	movs	r0, #0
            break;
 800b492:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800b494:	4a0c      	ldr	r2, [pc, #48]	; (800b4c8 <GetLastFcntDown+0x58>)
 800b496:	6812      	ldr	r2, [r2, #0]
 800b498:	6951      	ldr	r1, [r2, #20]
 800b49a:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800b49c:	6953      	ldr	r3, [r2, #20]
 800b49e:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800b4a0:	2000      	movs	r0, #0
            break;
 800b4a2:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800b4a4:	4a08      	ldr	r2, [pc, #32]	; (800b4c8 <GetLastFcntDown+0x58>)
 800b4a6:	6812      	ldr	r2, [r2, #0]
 800b4a8:	6991      	ldr	r1, [r2, #24]
 800b4aa:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800b4ac:	6993      	ldr	r3, [r2, #24]
 800b4ae:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800b4b0:	2000      	movs	r0, #0
            break;
 800b4b2:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800b4b4:	4a04      	ldr	r2, [pc, #16]	; (800b4c8 <GetLastFcntDown+0x58>)
 800b4b6:	6812      	ldr	r2, [r2, #0]
 800b4b8:	69d2      	ldr	r2, [r2, #28]
 800b4ba:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800b4bc:	2000      	movs	r0, #0
            break;
 800b4be:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b4c0:	200a      	movs	r0, #10
 800b4c2:	4770      	bx	lr
    if( lastDown == NULL )
 800b4c4:	2005      	movs	r0, #5
}
 800b4c6:	4770      	bx	lr
 800b4c8:	20001424 	.word	0x20001424

0800b4cc <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800b4cc:	b510      	push	{r4, lr}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800b4d6:	a901      	add	r1, sp, #4
 800b4d8:	f7ff ffca 	bl	800b470 <GetLastFcntDown>
 800b4dc:	b948      	cbnz	r0, 800b4f2 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800b4de:	9b01      	ldr	r3, [sp, #4]
 800b4e0:	42a3      	cmp	r3, r4
 800b4e2:	d309      	bcc.n	800b4f8 <CheckFCntDown+0x2c>
 800b4e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4e8:	d001      	beq.n	800b4ee <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800b4ea:	2000      	movs	r0, #0
 800b4ec:	e002      	b.n	800b4f4 <CheckFCntDown+0x28>
        return true;
 800b4ee:	2001      	movs	r0, #1
 800b4f0:	e000      	b.n	800b4f4 <CheckFCntDown+0x28>
        return false;
 800b4f2:	2000      	movs	r0, #0
    }
}
 800b4f4:	b002      	add	sp, #8
 800b4f6:	bd10      	pop	{r4, pc}
        return true;
 800b4f8:	2001      	movs	r0, #1
 800b4fa:	e7fb      	b.n	800b4f4 <CheckFCntDown+0x28>

0800b4fc <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800b4fc:	3801      	subs	r0, #1
 800b4fe:	2803      	cmp	r0, #3
 800b500:	d812      	bhi.n	800b528 <UpdateFCntDown+0x2c>
 800b502:	e8df f000 	tbb	[pc, r0]
 800b506:	0602      	.short	0x0602
 800b508:	0e0a      	.short	0x0e0a
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800b50a:	4b08      	ldr	r3, [pc, #32]	; (800b52c <UpdateFCntDown+0x30>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	6119      	str	r1, [r3, #16]
            break;
 800b510:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800b512:	4b06      	ldr	r3, [pc, #24]	; (800b52c <UpdateFCntDown+0x30>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	6159      	str	r1, [r3, #20]
            break;
 800b518:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800b51a:	4b04      	ldr	r3, [pc, #16]	; (800b52c <UpdateFCntDown+0x30>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	6199      	str	r1, [r3, #24]
            break;
 800b520:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800b522:	4b02      	ldr	r3, [pc, #8]	; (800b52c <UpdateFCntDown+0x30>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	20001424 	.word	0x20001424

0800b530 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800b530:	4b0a      	ldr	r3, [pc, #40]	; (800b55c <ResetFCnts+0x2c>)
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	2300      	movs	r3, #0
 800b536:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800b538:	f04f 31ff 	mov.w	r1, #4294967295
 800b53c:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800b53e:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800b540:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800b542:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b544:	2b00      	cmp	r3, #0
 800b546:	dd00      	ble.n	800b54a <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
    }
}
 800b548:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800b54a:	1d99      	adds	r1, r3, #6
 800b54c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800b550:	f04f 30ff 	mov.w	r0, #4294967295
 800b554:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b556:	3301      	adds	r3, #1
 800b558:	e7f4      	b.n	800b544 <ResetFCnts+0x14>
 800b55a:	bf00      	nop
 800b55c:	20001424 	.word	0x20001424

0800b560 <ComputeCmacB0>:
{
 800b560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b564:	b088      	sub	sp, #32
 800b566:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800b568:	b1f0      	cbz	r0, 800b5a8 <ComputeCmacB0+0x48>
 800b56a:	460c      	mov	r4, r1
 800b56c:	4615      	mov	r5, r2
 800b56e:	461a      	mov	r2, r3
 800b570:	4680      	mov	r8, r0
 800b572:	b1de      	cbz	r6, 800b5ac <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800b574:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b578:	d81a      	bhi.n	800b5b0 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800b57a:	af04      	add	r7, sp, #16
 800b57c:	9702      	str	r7, [sp, #8]
 800b57e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b580:	9301      	str	r3, [sp, #4]
 800b582:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b584:	9300      	str	r3, [sp, #0]
 800b586:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800b58a:	4629      	mov	r1, r5
 800b58c:	4620      	mov	r0, r4
 800b58e:	f7ff ff31 	bl	800b3f4 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800b592:	9600      	str	r6, [sp, #0]
 800b594:	462b      	mov	r3, r5
 800b596:	4622      	mov	r2, r4
 800b598:	4641      	mov	r1, r8
 800b59a:	4638      	mov	r0, r7
 800b59c:	f008 feaa 	bl	80142f4 <SecureElementComputeAesCmac>
 800b5a0:	b940      	cbnz	r0, 800b5b4 <ComputeCmacB0+0x54>
}
 800b5a2:	b008      	add	sp, #32
 800b5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b5a8:	200a      	movs	r0, #10
 800b5aa:	e7fa      	b.n	800b5a2 <ComputeCmacB0+0x42>
 800b5ac:	200a      	movs	r0, #10
 800b5ae:	e7f8      	b.n	800b5a2 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800b5b0:	200e      	movs	r0, #14
 800b5b2:	e7f6      	b.n	800b5a2 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b5b4:	200f      	movs	r0, #15
 800b5b6:	e7f4      	b.n	800b5a2 <ComputeCmacB0+0x42>

0800b5b8 <DeriveSessionKey10x>:
{
 800b5b8:	b510      	push	{r4, lr}
 800b5ba:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800b5bc:	2400      	movs	r4, #0
 800b5be:	9402      	str	r4, [sp, #8]
 800b5c0:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800b5c2:	2802      	cmp	r0, #2
 800b5c4:	d003      	beq.n	800b5ce <DeriveSessionKey10x+0x16>
 800b5c6:	2803      	cmp	r0, #3
 800b5c8:	d025      	beq.n	800b616 <DeriveSessionKey10x+0x5e>
 800b5ca:	200b      	movs	r0, #11
 800b5cc:	e021      	b.n	800b612 <DeriveSessionKey10x+0x5a>
            compBase[0] = 0x01;
 800b5ce:	2401      	movs	r4, #1
 800b5d0:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800b5d4:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800b5d8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800b5dc:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800b5e0:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800b5e4:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800b5e8:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800b5ec:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800b5f0:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800b5f4:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800b5f8:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800b5fc:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800b600:	0a1b      	lsrs	r3, r3, #8
 800b602:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800b606:	4602      	mov	r2, r0
 800b608:	2101      	movs	r1, #1
 800b60a:	4668      	mov	r0, sp
 800b60c:	f008 ff0e 	bl	801442c <SecureElementDeriveAndStoreKey>
 800b610:	b928      	cbnz	r0, 800b61e <DeriveSessionKey10x+0x66>
}
 800b612:	b004      	add	sp, #16
 800b614:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800b616:	2402      	movs	r4, #2
 800b618:	f88d 4000 	strb.w	r4, [sp]
            break;
 800b61c:	e7da      	b.n	800b5d4 <DeriveSessionKey10x+0x1c>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b61e:	200f      	movs	r0, #15
 800b620:	e7f7      	b.n	800b612 <DeriveSessionKey10x+0x5a>

0800b622 <PayloadEncrypt>:
{
 800b622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b626:	b088      	sub	sp, #32
 800b628:	4690      	mov	r8, r2
 800b62a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800b62c:	2800      	cmp	r0, #0
 800b62e:	d050      	beq.n	800b6d2 <PayloadEncrypt+0xb0>
 800b630:	460d      	mov	r5, r1
 800b632:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800b634:	2600      	movs	r6, #0
 800b636:	9604      	str	r6, [sp, #16]
 800b638:	9605      	str	r6, [sp, #20]
 800b63a:	9606      	str	r6, [sp, #24]
 800b63c:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800b63e:	9600      	str	r6, [sp, #0]
 800b640:	9601      	str	r6, [sp, #4]
 800b642:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800b644:	2701      	movs	r7, #1
 800b646:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800b64a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800b64e:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800b652:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800b656:	0a19      	lsrs	r1, r3, #8
 800b658:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800b65c:	0c19      	lsrs	r1, r3, #16
 800b65e:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800b662:	0e1b      	lsrs	r3, r3, #24
 800b664:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800b668:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800b66c:	0a13      	lsrs	r3, r2, #8
 800b66e:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800b672:	0c13      	lsrs	r3, r2, #16
 800b674:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800b678:	0e12      	lsrs	r2, r2, #24
 800b67a:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800b67e:	e013      	b.n	800b6a8 <PayloadEncrypt+0x86>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800b680:	18f2      	adds	r2, r6, r3
 800b682:	5ca0      	ldrb	r0, [r4, r2]
 800b684:	a908      	add	r1, sp, #32
 800b686:	4419      	add	r1, r3
 800b688:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800b68c:	4048      	eors	r0, r1
 800b68e:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800b690:	3301      	adds	r3, #1
 800b692:	b2db      	uxtb	r3, r3
 800b694:	462a      	mov	r2, r5
 800b696:	2d10      	cmp	r5, #16
 800b698:	bfa8      	it	ge
 800b69a:	2210      	movge	r2, #16
 800b69c:	4293      	cmp	r3, r2
 800b69e:	dbef      	blt.n	800b680 <PayloadEncrypt+0x5e>
        size -= 16;
 800b6a0:	3d10      	subs	r5, #16
 800b6a2:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800b6a4:	3610      	adds	r6, #16
 800b6a6:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800b6a8:	2d00      	cmp	r5, #0
 800b6aa:	dd0e      	ble.n	800b6ca <PayloadEncrypt+0xa8>
        aBlock[15] = ctr & 0xFF;
 800b6ac:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800b6b0:	3701      	adds	r7, #1
 800b6b2:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800b6b4:	ab04      	add	r3, sp, #16
 800b6b6:	4642      	mov	r2, r8
 800b6b8:	2110      	movs	r1, #16
 800b6ba:	4668      	mov	r0, sp
 800b6bc:	f008 fe3c 	bl	8014338 <SecureElementAesEncrypt>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2800      	cmp	r0, #0
 800b6c4:	d0e6      	beq.n	800b694 <PayloadEncrypt+0x72>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b6c6:	200f      	movs	r0, #15
 800b6c8:	e000      	b.n	800b6cc <PayloadEncrypt+0xaa>
    return LORAMAC_CRYPTO_SUCCESS;
 800b6ca:	2000      	movs	r0, #0
}
 800b6cc:	b008      	add	sp, #32
 800b6ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b6d2:	200a      	movs	r0, #10
 800b6d4:	e7fa      	b.n	800b6cc <PayloadEncrypt+0xaa>

0800b6d6 <VerifyCmacB0>:
    if( msg == 0 )
 800b6d6:	b370      	cbz	r0, 800b736 <VerifyCmacB0+0x60>
{
 800b6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6dc:	b0c8      	sub	sp, #288	; 0x120
 800b6de:	460c      	mov	r4, r1
 800b6e0:	4615      	mov	r5, r2
 800b6e2:	461e      	mov	r6, r3
 800b6e4:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800b6e6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b6ea:	d826      	bhi.n	800b73a <VerifyCmacB0+0x64>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800b6ec:	af04      	add	r7, sp, #16
 800b6ee:	f44f 7288 	mov.w	r2, #272	; 0x110
 800b6f2:	2100      	movs	r1, #0
 800b6f4:	4638      	mov	r0, r7
 800b6f6:	f008 ff76 	bl	80145e6 <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800b6fa:	9702      	str	r7, [sp, #8]
 800b6fc:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800b6fe:	9301      	str	r3, [sp, #4]
 800b700:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800b702:	9300      	str	r3, [sp, #0]
 800b704:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800b708:	4632      	mov	r2, r6
 800b70a:	4629      	mov	r1, r5
 800b70c:	4620      	mov	r0, r4
 800b70e:	f7ff fe71 	bl	800b3f4 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800b712:	4622      	mov	r2, r4
 800b714:	4641      	mov	r1, r8
 800b716:	a808      	add	r0, sp, #32
 800b718:	f008 ff4f 	bl	80145ba <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800b71c:	f104 0110 	add.w	r1, r4, #16
 800b720:	462b      	mov	r3, r5
 800b722:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800b724:	b289      	uxth	r1, r1
 800b726:	4638      	mov	r0, r7
 800b728:	f008 fdf0 	bl	801430c <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800b72c:	b130      	cbz	r0, 800b73c <VerifyCmacB0+0x66>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800b72e:	2801      	cmp	r0, #1
 800b730:	d004      	beq.n	800b73c <VerifyCmacB0+0x66>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b732:	200f      	movs	r0, #15
 800b734:	e002      	b.n	800b73c <VerifyCmacB0+0x66>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b736:	200a      	movs	r0, #10
}
 800b738:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800b73a:	200e      	movs	r0, #14
}
 800b73c:	b048      	add	sp, #288	; 0x120
 800b73e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800b744 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800b744:	b188      	cbz	r0, 800b76a <LoRaMacCryptoInit+0x26>
{
 800b746:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800b748:	4c09      	ldr	r4, [pc, #36]	; (800b770 <LoRaMacCryptoInit+0x2c>)
 800b74a:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800b74c:	2228      	movs	r2, #40	; 0x28
 800b74e:	2100      	movs	r1, #0
 800b750:	f008 ff49 	bl	80145e6 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800b754:	6823      	ldr	r3, [r4, #0]
 800b756:	2201      	movs	r2, #1
 800b758:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800b75a:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800b75c:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800b75e:	2400      	movs	r4, #0
 800b760:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800b762:	f7ff fee5 	bl	800b530 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800b766:	4620      	mov	r0, r4
}
 800b768:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800b76a:	2009      	movs	r0, #9
}
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop
 800b770:	20001424 	.word	0x20001424

0800b774 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800b774:	4b02      	ldr	r3, [pc, #8]	; (800b780 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800b77a:	2000      	movs	r0, #0
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop
 800b780:	20001424 	.word	0x20001424

0800b784 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800b784:	b130      	cbz	r0, 800b794 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800b786:	4b04      	ldr	r3, [pc, #16]	; (800b798 <LoRaMacCryptoGetFCntUp+0x14>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	68db      	ldr	r3, [r3, #12]
 800b78c:	3301      	adds	r3, #1
 800b78e:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800b790:	2000      	movs	r0, #0
 800b792:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b794:	200a      	movs	r0, #10
}
 800b796:	4770      	bx	lr
 800b798:	20001424 	.word	0x20001424

0800b79c <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 800b79c:	b570      	push	{r4, r5, r6, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	4615      	mov	r5, r2
    uint32_t lastDown = 0;
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	9201      	str	r2, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800b7a6:	b373      	cbz	r3, 800b806 <LoRaMacCryptoGetFCntDown+0x6a>
 800b7a8:	460c      	mov	r4, r1
 800b7aa:	461e      	mov	r6, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800b7ac:	a901      	add	r1, sp, #4
 800b7ae:	f7ff fe5f 	bl	800b470 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800b7b2:	b9c8      	cbnz	r0, 800b7e8 <LoRaMacCryptoGetFCntDown+0x4c>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800b7b4:	9b01      	ldr	r3, [sp, #4]
 800b7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ba:	d017      	beq.n	800b7ec <LoRaMacCryptoGetFCntDown+0x50>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800b7bc:	b29a      	uxth	r2, r3
 800b7be:	1aaa      	subs	r2, r5, r2

        if( fCntDiff > 0 )
 800b7c0:	2a00      	cmp	r2, #0
 800b7c2:	dd15      	ble.n	800b7f0 <LoRaMacCryptoGetFCntDown+0x54>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800b7c4:	4413      	add	r3, r2
 800b7c6:	6033      	str	r3, [r6, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800b7c8:	4b11      	ldr	r3, [pc, #68]	; (800b810 <LoRaMacCryptoGetFCntDown+0x74>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	789b      	ldrb	r3, [r3, #2]
 800b7ce:	b95b      	cbnz	r3, 800b7e8 <LoRaMacCryptoGetFCntDown+0x4c>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800b7d0:	6830      	ldr	r0, [r6, #0]
 800b7d2:	9a01      	ldr	r2, [sp, #4]
 800b7d4:	1a80      	subs	r0, r0, r2
 800b7d6:	eb60 0100 	sbc.w	r1, r0, r0
 800b7da:	b2a4      	uxth	r4, r4
 800b7dc:	2500      	movs	r5, #0
 800b7de:	42a0      	cmp	r0, r4
 800b7e0:	eb71 0205 	sbcs.w	r2, r1, r5
 800b7e4:	da11      	bge.n	800b80a <LoRaMacCryptoGetFCntDown+0x6e>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800b7e6:	4618      	mov	r0, r3
}
 800b7e8:	b002      	add	sp, #8
 800b7ea:	bd70      	pop	{r4, r5, r6, pc}
        *currentDown = frameFcnt;
 800b7ec:	6035      	str	r5, [r6, #0]
 800b7ee:	e7eb      	b.n	800b7c8 <LoRaMacCryptoGetFCntDown+0x2c>
        else if( fCntDiff == 0 )
 800b7f0:	b132      	cbz	r2, 800b800 <LoRaMacCryptoGetFCntDown+0x64>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800b7f2:	0c1b      	lsrs	r3, r3, #16
 800b7f4:	041b      	lsls	r3, r3, #16
 800b7f6:	442b      	add	r3, r5
 800b7f8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b7fc:	6033      	str	r3, [r6, #0]
 800b7fe:	e7e3      	b.n	800b7c8 <LoRaMacCryptoGetFCntDown+0x2c>
            *currentDown = lastDown;
 800b800:	6033      	str	r3, [r6, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800b802:	2007      	movs	r0, #7
 800b804:	e7f0      	b.n	800b7e8 <LoRaMacCryptoGetFCntDown+0x4c>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b806:	200a      	movs	r0, #10
 800b808:	e7ee      	b.n	800b7e8 <LoRaMacCryptoGetFCntDown+0x4c>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800b80a:	2008      	movs	r0, #8
 800b80c:	e7ec      	b.n	800b7e8 <LoRaMacCryptoGetFCntDown+0x4c>
 800b80e:	bf00      	nop
 800b810:	20001424 	.word	0x20001424

0800b814 <LoRaMacCryptoSetMulticastReference>:
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800b814:	b908      	cbnz	r0, 800b81a <LoRaMacCryptoSetMulticastReference+0x6>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b816:	200a      	movs	r0, #10
 800b818:	4770      	bx	lr
 800b81a:	4601      	mov	r1, r0
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b81c:	2300      	movs	r3, #0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	dd01      	ble.n	800b826 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800b822:	2000      	movs	r0, #0
}
 800b824:	4770      	bx	lr
{
 800b826:	b410      	push	{r4}
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800b828:	4a07      	ldr	r2, [pc, #28]	; (800b848 <LoRaMacCryptoSetMulticastReference+0x34>)
 800b82a:	6812      	ldr	r2, [r2, #0]
 800b82c:	202c      	movs	r0, #44	; 0x2c
 800b82e:	fb00 1003 	mla	r0, r0, r3, r1
 800b832:	1d9c      	adds	r4, r3, #6
 800b834:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800b838:	3204      	adds	r2, #4
 800b83a:	6202      	str	r2, [r0, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b83c:	3301      	adds	r3, #1
 800b83e:	2b00      	cmp	r3, #0
 800b840:	ddf2      	ble.n	800b828 <LoRaMacCryptoSetMulticastReference+0x14>
    return LORAMAC_CRYPTO_SUCCESS;
 800b842:	2000      	movs	r0, #0
}
 800b844:	bc10      	pop	{r4}
 800b846:	4770      	bx	lr
 800b848:	20001424 	.word	0x20001424

0800b84c <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800b84c:	b300      	cbz	r0, 800b890 <LoRaMacCryptoPrepareJoinRequest+0x44>
{
 800b84e:	b510      	push	{r4, lr}
 800b850:	b084      	sub	sp, #16
 800b852:	4604      	mov	r4, r0
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 800b854:	2300      	movs	r3, #0
 800b856:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800b858:	a803      	add	r0, sp, #12
 800b85a:	f008 fe4b 	bl	80144f4 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 800b85e:	4b10      	ldr	r3, [pc, #64]	; (800b8a0 <LoRaMacCryptoPrepareJoinRequest+0x54>)
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b866:	8093      	strh	r3, [r2, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800b868:	82e3      	strh	r3, [r4, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800b86a:	4620      	mov	r0, r4
 800b86c:	f000 fa2d 	bl	800bcca <LoRaMacSerializerJoinRequest>
 800b870:	b980      	cbnz	r0, 800b894 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800b872:	4623      	mov	r3, r4
 800b874:	f853 1b18 	ldr.w	r1, [r3], #24
 800b878:	9300      	str	r3, [sp, #0]
 800b87a:	2301      	movs	r3, #1
 800b87c:	2213      	movs	r2, #19
 800b87e:	f008 fd39 	bl	80142f4 <SecureElementComputeAesCmac>
 800b882:	b950      	cbnz	r0, 800b89a <LoRaMacCryptoPrepareJoinRequest+0x4e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800b884:	4620      	mov	r0, r4
 800b886:	f000 fa20 	bl	800bcca <LoRaMacSerializerJoinRequest>
 800b88a:	b120      	cbz	r0, 800b896 <LoRaMacCryptoPrepareJoinRequest+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800b88c:	2011      	movs	r0, #17
 800b88e:	e002      	b.n	800b896 <LoRaMacCryptoPrepareJoinRequest+0x4a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b890:	200a      	movs	r0, #10
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800b892:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800b894:	2011      	movs	r0, #17
}
 800b896:	b004      	add	sp, #16
 800b898:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b89a:	200f      	movs	r0, #15
 800b89c:	e7fb      	b.n	800b896 <LoRaMacCryptoPrepareJoinRequest+0x4a>
 800b89e:	bf00      	nop
 800b8a0:	20001424 	.word	0x20001424

0800b8a4 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d036      	beq.n	800b916 <LoRaMacCryptoSecureMessage+0x72>
{
 800b8a8:	b530      	push	{r4, r5, lr}
 800b8aa:	b085      	sub	sp, #20
 800b8ac:	4604      	mov	r4, r0
 800b8ae:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800b8b0:	4b1d      	ldr	r3, [pc, #116]	; (800b928 <LoRaMacCryptoSecureMessage+0x84>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	4283      	cmp	r3, r0
 800b8b8:	d82f      	bhi.n	800b91a <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800b8ba:	f895 2020 	ldrb.w	r2, [r5, #32]
 800b8be:	b342      	cbz	r2, 800b912 <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800b8c0:	2203      	movs	r2, #3
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800b8c2:	42a3      	cmp	r3, r4
 800b8c4:	d209      	bcs.n	800b8da <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800b8c6:	9401      	str	r4, [sp, #4]
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	9300      	str	r3, [sp, #0]
 800b8cc:	68ab      	ldr	r3, [r5, #8]
 800b8ce:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800b8d2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b8d4:	f7ff fea5 	bl	800b622 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800b8d8:	bb10      	cbnz	r0, 800b920 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800b8da:	4628      	mov	r0, r5
 800b8dc:	f000 fa2b 	bl	800bd36 <LoRaMacSerializerData>
 800b8e0:	b9e8      	cbnz	r0, 800b91e <LoRaMacCryptoSecureMessage+0x7a>
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800b8e2:	7929      	ldrb	r1, [r5, #4]
 800b8e4:	3904      	subs	r1, #4
 800b8e6:	462b      	mov	r3, r5
 800b8e8:	f853 0b2c 	ldr.w	r0, [r3], #44
 800b8ec:	9303      	str	r3, [sp, #12]
 800b8ee:	9402      	str	r4, [sp, #8]
 800b8f0:	68ab      	ldr	r3, [r5, #8]
 800b8f2:	9301      	str	r3, [sp, #4]
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	9300      	str	r3, [sp, #0]
 800b8f8:	2202      	movs	r2, #2
 800b8fa:	b289      	uxth	r1, r1
 800b8fc:	f7ff fe30 	bl	800b560 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800b900:	b970      	cbnz	r0, 800b920 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800b902:	4628      	mov	r0, r5
 800b904:	f000 fa17 	bl	800bd36 <LoRaMacSerializerData>
 800b908:	b960      	cbnz	r0, 800b924 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800b90a:	4b07      	ldr	r3, [pc, #28]	; (800b928 <LoRaMacCryptoSecureMessage+0x84>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800b910:	e006      	b.n	800b920 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800b912:	2202      	movs	r2, #2
 800b914:	e7d5      	b.n	800b8c2 <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b916:	200a      	movs	r0, #10
}
 800b918:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800b91a:	2006      	movs	r0, #6
 800b91c:	e000      	b.n	800b920 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800b91e:	2011      	movs	r0, #17
}
 800b920:	b005      	add	sp, #20
 800b922:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800b924:	2011      	movs	r0, #17
 800b926:	e7fb      	b.n	800b920 <LoRaMacCryptoSecureMessage+0x7c>
 800b928:	20001424 	.word	0x20001424

0800b92c <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800b92c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b930:	b087      	sub	sp, #28
 800b932:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800b934:	2e00      	cmp	r6, #0
 800b936:	d049      	beq.n	800b9cc <LoRaMacCryptoUnsecureMessage+0xa0>
 800b938:	4605      	mov	r5, r0
 800b93a:	4688      	mov	r8, r1
 800b93c:	4617      	mov	r7, r2
 800b93e:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800b940:	4619      	mov	r1, r3
 800b942:	4610      	mov	r0, r2
 800b944:	f7ff fdc2 	bl	800b4cc <CheckFCntDown>
 800b948:	2800      	cmp	r0, #0
 800b94a:	d041      	beq.n	800b9d0 <LoRaMacCryptoUnsecureMessage+0xa4>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800b94c:	4630      	mov	r0, r6
 800b94e:	f000 f95d 	bl	800bc0c <LoRaMacParserData>
 800b952:	2800      	cmp	r0, #0
 800b954:	d141      	bne.n	800b9da <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800b956:	a905      	add	r1, sp, #20
 800b958:	4628      	mov	r0, r5
 800b95a:	f7ff fd6d 	bl	800b438 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800b95e:	4605      	mov	r5, r0
 800b960:	2800      	cmp	r0, #0
 800b962:	d136      	bne.n	800b9d2 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800b964:	9b05      	ldr	r3, [sp, #20]
 800b966:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800b96a:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800b96c:	68b3      	ldr	r3, [r6, #8]
 800b96e:	4543      	cmp	r3, r8
 800b970:	d135      	bne.n	800b9de <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800b972:	7b33      	ldrb	r3, [r6, #12]
 800b974:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800b978:	491a      	ldr	r1, [pc, #104]	; (800b9e4 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800b97a:	6809      	ldr	r1, [r1, #0]
 800b97c:	7889      	ldrb	r1, [r1, #2]
 800b97e:	b901      	cbnz	r1, 800b982 <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800b980:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800b982:	7931      	ldrb	r1, [r6, #4]
 800b984:	3904      	subs	r1, #4
 800b986:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800b988:	9003      	str	r0, [sp, #12]
 800b98a:	9402      	str	r4, [sp, #8]
 800b98c:	f8cd 8004 	str.w	r8, [sp, #4]
 800b990:	2001      	movs	r0, #1
 800b992:	9000      	str	r0, [sp, #0]
 800b994:	b289      	uxth	r1, r1
 800b996:	6830      	ldr	r0, [r6, #0]
 800b998:	f7ff fe9d 	bl	800b6d6 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800b99c:	4605      	mov	r5, r0
 800b99e:	b9c0      	cbnz	r0, 800b9d2 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800b9a0:	f896 3020 	ldrb.w	r3, [r6, #32]
 800b9a4:	b90b      	cbnz	r3, 800b9aa <LoRaMacCryptoUnsecureMessage+0x7e>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 800b9a6:	f04f 0902 	mov.w	r9, #2
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800b9aa:	9401      	str	r4, [sp, #4]
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	4643      	mov	r3, r8
 800b9b2:	464a      	mov	r2, r9
 800b9b4:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800b9b8:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800b9ba:	f7ff fe32 	bl	800b622 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800b9be:	4605      	mov	r5, r0
 800b9c0:	b938      	cbnz	r0, 800b9d2 <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 800b9c2:	4621      	mov	r1, r4
 800b9c4:	4638      	mov	r0, r7
 800b9c6:	f7ff fd99 	bl	800b4fc <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800b9ca:	e002      	b.n	800b9d2 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b9cc:	250a      	movs	r5, #10
 800b9ce:	e000      	b.n	800b9d2 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800b9d0:	2506      	movs	r5, #6
}
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	b007      	add	sp, #28
 800b9d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800b9da:	2510      	movs	r5, #16
 800b9dc:	e7f9      	b.n	800b9d2 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800b9de:	2502      	movs	r5, #2
 800b9e0:	e7f7      	b.n	800b9d2 <LoRaMacCryptoUnsecureMessage+0xa6>
 800b9e2:	bf00      	nop
 800b9e4:	20001424 	.word	0x20001424

0800b9e8 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 800b9e8:	b9a9      	cbnz	r1, 800ba16 <LoRaMacCryptoDeriveMcRootKey+0x2e>
{
 800b9ea:	b510      	push	{r4, lr}
 800b9ec:	b084      	sub	sp, #16
 800b9ee:	460c      	mov	r4, r1
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	9300      	str	r3, [sp, #0]
 800b9f4:	9301      	str	r3, [sp, #4]
 800b9f6:	9302      	str	r3, [sp, #8]
 800b9f8:	9303      	str	r3, [sp, #12]

    if( versionMinor == 1 )
 800b9fa:	2801      	cmp	r0, #1
 800b9fc:	d007      	beq.n	800ba0e <LoRaMacCryptoDeriveMcRootKey+0x26>
    {
        compBase[0] = 0x20;
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800b9fe:	2204      	movs	r2, #4
 800ba00:	4621      	mov	r1, r4
 800ba02:	4668      	mov	r0, sp
 800ba04:	f008 fd12 	bl	801442c <SecureElementDeriveAndStoreKey>
 800ba08:	b938      	cbnz	r0, 800ba1a <LoRaMacCryptoDeriveMcRootKey+0x32>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800ba0a:	b004      	add	sp, #16
 800ba0c:	bd10      	pop	{r4, pc}
        compBase[0] = 0x20;
 800ba0e:	2320      	movs	r3, #32
 800ba10:	f88d 3000 	strb.w	r3, [sp]
 800ba14:	e7f3      	b.n	800b9fe <LoRaMacCryptoDeriveMcRootKey+0x16>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800ba16:	200b      	movs	r0, #11
}
 800ba18:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ba1a:	200f      	movs	r0, #15
 800ba1c:	e7f5      	b.n	800ba0a <LoRaMacCryptoDeriveMcRootKey+0x22>

0800ba1e <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 800ba1e:	2804      	cmp	r0, #4
 800ba20:	d001      	beq.n	800ba26 <LoRaMacCryptoDeriveMcKEKey+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800ba22:	200b      	movs	r0, #11
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800ba24:	4770      	bx	lr
{
 800ba26:	b500      	push	{lr}
 800ba28:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	9300      	str	r3, [sp, #0]
 800ba2e:	9301      	str	r3, [sp, #4]
 800ba30:	9302      	str	r3, [sp, #8]
 800ba32:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800ba34:	227f      	movs	r2, #127	; 0x7f
 800ba36:	4601      	mov	r1, r0
 800ba38:	4668      	mov	r0, sp
 800ba3a:	f008 fcf7 	bl	801442c <SecureElementDeriveAndStoreKey>
 800ba3e:	b910      	cbnz	r0, 800ba46 <LoRaMacCryptoDeriveMcKEKey+0x28>
}
 800ba40:	b005      	add	sp, #20
 800ba42:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ba46:	200f      	movs	r0, #15
 800ba48:	e7fa      	b.n	800ba40 <LoRaMacCryptoDeriveMcKEKey+0x22>
	...

0800ba4c <LoRaMacCryptoSetKey>:
{
 800ba4c:	b510      	push	{r4, lr}
 800ba4e:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800ba50:	f008 fcaa 	bl	80143a8 <SecureElementSetKey>
 800ba54:	b978      	cbnz	r0, 800ba76 <LoRaMacCryptoSetKey+0x2a>
    if( keyID == APP_KEY )
 800ba56:	b104      	cbz	r4, 800ba5a <LoRaMacCryptoSetKey+0xe>
}
 800ba58:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800ba5a:	4b09      	ldr	r3, [pc, #36]	; (800ba80 <LoRaMacCryptoSetKey+0x34>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4621      	mov	r1, r4
 800ba60:	7898      	ldrb	r0, [r3, #2]
 800ba62:	f7ff ffc1 	bl	800b9e8 <LoRaMacCryptoDeriveMcRootKey>
 800ba66:	b940      	cbnz	r0, 800ba7a <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800ba68:	2004      	movs	r0, #4
 800ba6a:	f7ff ffd8 	bl	800ba1e <LoRaMacCryptoDeriveMcKEKey>
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	d0f2      	beq.n	800ba58 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ba72:	200f      	movs	r0, #15
 800ba74:	e7f0      	b.n	800ba58 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ba76:	200f      	movs	r0, #15
 800ba78:	e7ee      	b.n	800ba58 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ba7a:	200f      	movs	r0, #15
 800ba7c:	e7ec      	b.n	800ba58 <LoRaMacCryptoSetKey+0xc>
 800ba7e:	bf00      	nop
 800ba80:	20001424 	.word	0x20001424

0800ba84 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800ba84:	2a00      	cmp	r2, #0
 800ba86:	d064      	beq.n	800bb52 <LoRaMacCryptoHandleJoinAccept+0xce>
{
 800ba88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba8a:	b08f      	sub	sp, #60	; 0x3c
 800ba8c:	4607      	mov	r7, r0
 800ba8e:	460d      	mov	r5, r1
 800ba90:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800ba92:	2900      	cmp	r1, #0
 800ba94:	d05f      	beq.n	800bb56 <LoRaMacCryptoHandleJoinAccept+0xd2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800ba96:	2600      	movs	r6, #0
 800ba98:	9605      	str	r6, [sp, #20]
 800ba9a:	221d      	movs	r2, #29
 800ba9c:	4631      	mov	r1, r6
 800ba9e:	a806      	add	r0, sp, #24
 800baa0:	f00b fce6 	bl	8017470 <memset>
    uint8_t versionMinor         = 0;
 800baa4:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800baa8:	4b2f      	ldr	r3, [pc, #188]	; (800bb68 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800baae:	f10d 0313 	add.w	r3, sp, #19
 800bab2:	9302      	str	r3, [sp, #8]
 800bab4:	ab05      	add	r3, sp, #20
 800bab6:	9301      	str	r3, [sp, #4]
 800bab8:	7923      	ldrb	r3, [r4, #4]
 800baba:	9300      	str	r3, [sp, #0]
 800babc:	6823      	ldr	r3, [r4, #0]
 800babe:	4632      	mov	r2, r6
 800bac0:	4629      	mov	r1, r5
 800bac2:	4638      	mov	r0, r7
 800bac4:	f008 fcd2 	bl	801446c <SecureElementProcessJoinAccept>
 800bac8:	2800      	cmp	r0, #0
 800baca:	d146      	bne.n	800bb5a <LoRaMacCryptoHandleJoinAccept+0xd6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800bacc:	7922      	ldrb	r2, [r4, #4]
 800bace:	a905      	add	r1, sp, #20
 800bad0:	6820      	ldr	r0, [r4, #0]
 800bad2:	f008 fd72 	bl	80145ba <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800bad6:	4620      	mov	r0, r4
 800bad8:	f000 f848 	bl	800bb6c <LoRaMacParserJoinAccept>
 800badc:	2800      	cmp	r0, #0
 800bade:	d13f      	bne.n	800bb60 <LoRaMacCryptoHandleJoinAccept+0xdc>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800bae0:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800bae2:	79e3      	ldrb	r3, [r4, #7]
 800bae4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800bae8:	7a23      	ldrb	r3, [r4, #8]
 800baea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800baee:	4b1e      	ldr	r3, [pc, #120]	; (800bb68 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	689a      	ldr	r2, [r3, #8]
 800baf4:	42aa      	cmp	r2, r5
 800baf6:	d035      	beq.n	800bb64 <LoRaMacCryptoHandleJoinAccept+0xe0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800baf8:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800bafa:	2100      	movs	r1, #0
 800bafc:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800bb00:	f7ff ff72 	bl	800b9e8 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bb04:	bb50      	cbnz	r0, 800bb5c <LoRaMacCryptoHandleJoinAccept+0xd8>
    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 800bb06:	2004      	movs	r0, #4
 800bb08:	f7ff ff89 	bl	800ba1e <LoRaMacCryptoDeriveMcKEKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bb0c:	bb30      	cbnz	r0, 800bb5c <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 800bb0e:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800bb10:	7aa2      	ldrb	r2, [r4, #10]
 800bb12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800bb16:	7ae4      	ldrb	r4, [r4, #11]
 800bb18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800bb1c:	4633      	mov	r3, r6
 800bb1e:	4622      	mov	r2, r4
 800bb20:	4629      	mov	r1, r5
 800bb22:	2003      	movs	r0, #3
 800bb24:	f7ff fd48 	bl	800b5b8 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bb28:	b9c0      	cbnz	r0, 800bb5c <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800bb2a:	4633      	mov	r3, r6
 800bb2c:	4622      	mov	r2, r4
 800bb2e:	4629      	mov	r1, r5
 800bb30:	2002      	movs	r0, #2
 800bb32:	f7ff fd41 	bl	800b5b8 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bb36:	b988      	cbnz	r0, 800bb5c <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800bb38:	4b0b      	ldr	r3, [pc, #44]	; (800bb68 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800bb40:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800bb42:	2200      	movs	r2, #0
 800bb44:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800bb46:	f04f 32ff 	mov.w	r2, #4294967295
 800bb4a:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800bb4c:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800bb4e:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800bb50:	e004      	b.n	800bb5c <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bb52:	200a      	movs	r0, #10
}
 800bb54:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bb56:	200a      	movs	r0, #10
 800bb58:	e000      	b.n	800bb5c <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bb5a:	200f      	movs	r0, #15
}
 800bb5c:	b00f      	add	sp, #60	; 0x3c
 800bb5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800bb60:	2010      	movs	r0, #16
 800bb62:	e7fb      	b.n	800bb5c <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800bb64:	2003      	movs	r0, #3
 800bb66:	e7f9      	b.n	800bb5c <LoRaMacCryptoHandleJoinAccept+0xd8>
 800bb68:	20001424 	.word	0x20001424

0800bb6c <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	d047      	beq.n	800bc00 <LoRaMacParserJoinAccept+0x94>
{
 800bb70:	b538      	push	{r3, r4, r5, lr}
 800bb72:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bb74:	6801      	ldr	r1, [r0, #0]
 800bb76:	2900      	cmp	r1, #0
 800bb78:	d044      	beq.n	800bc04 <LoRaMacParserJoinAccept+0x98>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800bb7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb7e:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800bb80:	2203      	movs	r2, #3
 800bb82:	3006      	adds	r0, #6
 800bb84:	f008 fd19 	bl	80145ba <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800bb88:	4620      	mov	r0, r4
 800bb8a:	f850 1b09 	ldr.w	r1, [r0], #9
 800bb8e:	2203      	movs	r2, #3
 800bb90:	3104      	adds	r1, #4
 800bb92:	f008 fd12 	bl	80145ba <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800bb96:	6821      	ldr	r1, [r4, #0]
 800bb98:	79cb      	ldrb	r3, [r1, #7]
 800bb9a:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800bb9c:	7a0a      	ldrb	r2, [r1, #8]
 800bb9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bba2:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800bba4:	7a4a      	ldrb	r2, [r1, #9]
 800bba6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbaa:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800bbac:	7a8a      	ldrb	r2, [r1, #10]
 800bbae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bbb2:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800bbb4:	7acb      	ldrb	r3, [r1, #11]
 800bbb6:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800bbb8:	7b0b      	ldrb	r3, [r1, #12]
 800bbba:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800bbbc:	7923      	ldrb	r3, [r4, #4]
 800bbbe:	2b21      	cmp	r3, #33	; 0x21
 800bbc0:	d016      	beq.n	800bbf0 <LoRaMacParserJoinAccept+0x84>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800bbc2:	2b11      	cmp	r3, #17
 800bbc4:	dc20      	bgt.n	800bc08 <LoRaMacParserJoinAccept+0x9c>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800bbc6:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800bbc8:	6821      	ldr	r1, [r4, #0]
 800bbca:	1c55      	adds	r5, r2, #1
 800bbcc:	5c8b      	ldrb	r3, [r1, r2]
 800bbce:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800bbd0:	1c90      	adds	r0, r2, #2
 800bbd2:	5d4d      	ldrb	r5, [r1, r5]
 800bbd4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800bbd8:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800bbda:	3203      	adds	r2, #3
 800bbdc:	5c08      	ldrb	r0, [r1, r0]
 800bbde:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bbe2:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800bbe4:	5c8a      	ldrb	r2, [r1, r2]
 800bbe6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bbea:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800bbec:	2000      	movs	r0, #0
}
 800bbee:	bd38      	pop	{r3, r4, r5, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800bbf0:	2210      	movs	r2, #16
 800bbf2:	310d      	adds	r1, #13
 800bbf4:	f104 0012 	add.w	r0, r4, #18
 800bbf8:	f008 fcdf 	bl	80145ba <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800bbfc:	221d      	movs	r2, #29
 800bbfe:	e7e3      	b.n	800bbc8 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800bc00:	2002      	movs	r0, #2
}
 800bc02:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800bc04:	2002      	movs	r0, #2
 800bc06:	e7f2      	b.n	800bbee <LoRaMacParserJoinAccept+0x82>
        return LORAMAC_PARSER_FAIL;
 800bc08:	2001      	movs	r0, #1
 800bc0a:	e7f0      	b.n	800bbee <LoRaMacParserJoinAccept+0x82>

0800bc0c <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	d058      	beq.n	800bcc2 <LoRaMacParserData+0xb6>
{
 800bc10:	b510      	push	{r4, lr}
 800bc12:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bc14:	6801      	ldr	r1, [r0, #0]
 800bc16:	2900      	cmp	r1, #0
 800bc18:	d055      	beq.n	800bcc6 <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800bc1a:	780b      	ldrb	r3, [r1, #0]
 800bc1c:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800bc1e:	784b      	ldrb	r3, [r1, #1]
 800bc20:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800bc22:	788a      	ldrb	r2, [r1, #2]
 800bc24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bc28:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800bc2a:	78ca      	ldrb	r2, [r1, #3]
 800bc2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc30:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800bc32:	790a      	ldrb	r2, [r1, #4]
 800bc34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bc38:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800bc3a:	794b      	ldrb	r3, [r1, #5]
 800bc3c:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800bc3e:	798b      	ldrb	r3, [r1, #6]
 800bc40:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800bc42:	79ca      	ldrb	r2, [r1, #7]
 800bc44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bc48:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800bc4a:	7b02      	ldrb	r2, [r0, #12]
 800bc4c:	f002 020f 	and.w	r2, r2, #15
 800bc50:	3108      	adds	r1, #8
 800bc52:	3010      	adds	r0, #16
 800bc54:	f008 fcb1 	bl	80145ba <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800bc58:	7b23      	ldrb	r3, [r4, #12]
 800bc5a:	f003 030f 	and.w	r3, r3, #15
 800bc5e:	f103 0008 	add.w	r0, r3, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800bc62:	2200      	movs	r2, #0
 800bc64:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800bc68:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800bc6c:	7922      	ldrb	r2, [r4, #4]
 800bc6e:	1a11      	subs	r1, r2, r0
 800bc70:	2904      	cmp	r1, #4
 800bc72:	dc16      	bgt.n	800bca2 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800bc74:	6822      	ldr	r2, [r4, #0]
 800bc76:	7923      	ldrb	r3, [r4, #4]
 800bc78:	441a      	add	r2, r3
 800bc7a:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800bc7e:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800bc80:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800bc84:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800bc88:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800bc8a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800bc8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800bc92:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800bc94:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800bc98:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bc9c:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800bc9e:	2000      	movs	r0, #0
}
 800bca0:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800bca2:	6821      	ldr	r1, [r4, #0]
 800bca4:	3309      	adds	r3, #9
 800bca6:	5c08      	ldrb	r0, [r1, r0]
 800bca8:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800bcac:	1ad2      	subs	r2, r2, r3
 800bcae:	b2d2      	uxtb	r2, r2
 800bcb0:	3a04      	subs	r2, #4
 800bcb2:	b2d2      	uxtb	r2, r2
 800bcb4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800bcb8:	4419      	add	r1, r3
 800bcba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bcbc:	f008 fc7d 	bl	80145ba <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800bcc0:	e7d8      	b.n	800bc74 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800bcc2:	2002      	movs	r0, #2
}
 800bcc4:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800bcc6:	2002      	movs	r0, #2
 800bcc8:	e7ea      	b.n	800bca0 <LoRaMacParserData+0x94>

0800bcca <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bcca:	b370      	cbz	r0, 800bd2a <LoRaMacSerializerJoinRequest+0x60>
{
 800bccc:	b510      	push	{r4, lr}
 800bcce:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bcd0:	6803      	ldr	r3, [r0, #0]
 800bcd2:	b363      	cbz	r3, 800bd2e <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800bcd4:	7902      	ldrb	r2, [r0, #4]
 800bcd6:	2a16      	cmp	r2, #22
 800bcd8:	d92b      	bls.n	800bd32 <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800bcda:	7942      	ldrb	r2, [r0, #5]
 800bcdc:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800bcde:	4601      	mov	r1, r0
 800bce0:	f851 0b06 	ldr.w	r0, [r1], #6
 800bce4:	2208      	movs	r2, #8
 800bce6:	3001      	adds	r0, #1
 800bce8:	f008 fc71 	bl	80145ce <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800bcec:	4621      	mov	r1, r4
 800bcee:	f851 0b0e 	ldr.w	r0, [r1], #14
 800bcf2:	2208      	movs	r2, #8
 800bcf4:	3009      	adds	r0, #9
 800bcf6:	f008 fc6a 	bl	80145ce <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800bcfa:	8ae2      	ldrh	r2, [r4, #22]
 800bcfc:	6823      	ldr	r3, [r4, #0]
 800bcfe:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800bd00:	8ae3      	ldrh	r3, [r4, #22]
 800bd02:	6822      	ldr	r2, [r4, #0]
 800bd04:	0a1b      	lsrs	r3, r3, #8
 800bd06:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800bd08:	69a2      	ldr	r2, [r4, #24]
 800bd0a:	6823      	ldr	r3, [r4, #0]
 800bd0c:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800bd0e:	69a3      	ldr	r3, [r4, #24]
 800bd10:	0a1b      	lsrs	r3, r3, #8
 800bd12:	6822      	ldr	r2, [r4, #0]
 800bd14:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800bd16:	8b62      	ldrh	r2, [r4, #26]
 800bd18:	6823      	ldr	r3, [r4, #0]
 800bd1a:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800bd1c:	7ee2      	ldrb	r2, [r4, #27]
 800bd1e:	6823      	ldr	r3, [r4, #0]
 800bd20:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800bd22:	2317      	movs	r3, #23
 800bd24:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800bd26:	2000      	movs	r0, #0
}
 800bd28:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800bd2a:	2001      	movs	r0, #1
}
 800bd2c:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800bd2e:	2001      	movs	r0, #1
 800bd30:	e7fa      	b.n	800bd28 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800bd32:	2002      	movs	r0, #2
 800bd34:	e7f8      	b.n	800bd28 <LoRaMacSerializerJoinRequest+0x5e>

0800bd36 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bd36:	2800      	cmp	r0, #0
 800bd38:	d066      	beq.n	800be08 <LoRaMacSerializerData+0xd2>
{
 800bd3a:	b538      	push	{r3, r4, r5, lr}
 800bd3c:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bd3e:	6801      	ldr	r1, [r0, #0]
 800bd40:	2900      	cmp	r1, #0
 800bd42:	d063      	beq.n	800be0c <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800bd44:	7b02      	ldrb	r2, [r0, #12]
 800bd46:	f002 020f 	and.w	r2, r2, #15
 800bd4a:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800bd4e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800bd52:	b10b      	cbz	r3, 800bd58 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800bd54:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800bd58:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800bd5a:	3304      	adds	r3, #4
 800bd5c:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800bd5e:	7922      	ldrb	r2, [r4, #4]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d355      	bcc.n	800be10 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800bd64:	7963      	ldrb	r3, [r4, #5]
 800bd66:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800bd68:	68a2      	ldr	r2, [r4, #8]
 800bd6a:	6823      	ldr	r3, [r4, #0]
 800bd6c:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800bd6e:	68a3      	ldr	r3, [r4, #8]
 800bd70:	0a1b      	lsrs	r3, r3, #8
 800bd72:	6822      	ldr	r2, [r4, #0]
 800bd74:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800bd76:	8962      	ldrh	r2, [r4, #10]
 800bd78:	6823      	ldr	r3, [r4, #0]
 800bd7a:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800bd7c:	7ae2      	ldrb	r2, [r4, #11]
 800bd7e:	6823      	ldr	r3, [r4, #0]
 800bd80:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800bd82:	6823      	ldr	r3, [r4, #0]
 800bd84:	7b22      	ldrb	r2, [r4, #12]
 800bd86:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800bd88:	89e2      	ldrh	r2, [r4, #14]
 800bd8a:	6823      	ldr	r3, [r4, #0]
 800bd8c:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800bd8e:	89e3      	ldrh	r3, [r4, #14]
 800bd90:	6822      	ldr	r2, [r4, #0]
 800bd92:	0a1b      	lsrs	r3, r3, #8
 800bd94:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800bd96:	4621      	mov	r1, r4
 800bd98:	f851 0b10 	ldr.w	r0, [r1], #16
 800bd9c:	7b22      	ldrb	r2, [r4, #12]
 800bd9e:	f002 020f 	and.w	r2, r2, #15
 800bda2:	3008      	adds	r0, #8
 800bda4:	f008 fc09 	bl	80145ba <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800bda8:	7b23      	ldrb	r3, [r4, #12]
 800bdaa:	f003 030f 	and.w	r3, r3, #15
 800bdae:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800bdb2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800bdb6:	b12a      	cbz	r2, 800bdc4 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800bdb8:	6822      	ldr	r2, [r4, #0]
 800bdba:	f894 1020 	ldrb.w	r1, [r4, #32]
 800bdbe:	5551      	strb	r1, [r2, r5]
 800bdc0:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800bdc4:	6820      	ldr	r0, [r4, #0]
 800bdc6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800bdca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bdcc:	4428      	add	r0, r5
 800bdce:	f008 fbf4 	bl	80145ba <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800bdd2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800bdd6:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800bdd8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800bdda:	6821      	ldr	r1, [r4, #0]
 800bddc:	1c5a      	adds	r2, r3, #1
 800bdde:	b292      	uxth	r2, r2
 800bde0:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800bde2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bde4:	0a08      	lsrs	r0, r1, #8
 800bde6:	6825      	ldr	r5, [r4, #0]
 800bde8:	1c99      	adds	r1, r3, #2
 800bdea:	b289      	uxth	r1, r1
 800bdec:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800bdee:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800bdf0:	6820      	ldr	r0, [r4, #0]
 800bdf2:	1cda      	adds	r2, r3, #3
 800bdf4:	b292      	uxth	r2, r2
 800bdf6:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800bdf8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800bdfc:	6821      	ldr	r1, [r4, #0]
 800bdfe:	3304      	adds	r3, #4
 800be00:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800be02:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800be04:	2000      	movs	r0, #0
}
 800be06:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800be08:	2001      	movs	r0, #1
}
 800be0a:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800be0c:	2001      	movs	r0, #1
 800be0e:	e7fa      	b.n	800be06 <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800be10:	2002      	movs	r0, #2
 800be12:	e7f8      	b.n	800be06 <LoRaMacSerializerData+0xd0>

0800be14 <NvmDataMgmtEvent>:
void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800be14:	4770      	bx	lr

0800be16 <NvmDataMgmtStore>:
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
#endif
}
 800be16:	2000      	movs	r0, #0
 800be18:	4770      	bx	lr

0800be1a <NvmDataMgmtRestore>:
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
}
 800be1a:	2000      	movs	r0, #0
 800be1c:	4770      	bx	lr

0800be1e <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800be1e:	2805      	cmp	r0, #5
 800be20:	d905      	bls.n	800be2e <RegionIsActive+0x10>
 800be22:	3807      	subs	r0, #7
 800be24:	b2c0      	uxtb	r0, r0
 800be26:	2802      	cmp	r0, #2
 800be28:	d903      	bls.n	800be32 <RegionIsActive+0x14>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800be2a:	2000      	movs	r0, #0
 800be2c:	4770      	bx	lr
    switch( region )
 800be2e:	2001      	movs	r0, #1
 800be30:	4770      	bx	lr
 800be32:	2001      	movs	r0, #1
        }
    }
}
 800be34:	4770      	bx	lr

0800be36 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800be36:	b500      	push	{lr}
 800be38:	b083      	sub	sp, #12
    PhyParam_t phyParam = { 0 };
 800be3a:	2300      	movs	r3, #0
 800be3c:	9300      	str	r3, [sp, #0]
    switch( region )
 800be3e:	2809      	cmp	r0, #9
 800be40:	d836      	bhi.n	800beb0 <RegionGetPhyParam+0x7a>
 800be42:	e8df f000 	tbb	[pc, r0]
 800be46:	0d05      	.short	0x0d05
 800be48:	211c1712 	.word	0x211c1712
 800be4c:	302b2635 	.word	0x302b2635
    {
        AS923_GET_PHY_PARAM( );
 800be50:	4608      	mov	r0, r1
 800be52:	f000 fba5 	bl	800c5a0 <RegionAS923GetPhyParam>
 800be56:	9001      	str	r0, [sp, #4]
        default:
        {
            return phyParam;
        }
    }
}
 800be58:	9801      	ldr	r0, [sp, #4]
 800be5a:	b003      	add	sp, #12
 800be5c:	f85d fb04 	ldr.w	pc, [sp], #4
        AU915_GET_PHY_PARAM( );
 800be60:	4608      	mov	r0, r1
 800be62:	f001 f9e1 	bl	800d228 <RegionAU915GetPhyParam>
 800be66:	9001      	str	r0, [sp, #4]
 800be68:	e7f6      	b.n	800be58 <RegionGetPhyParam+0x22>
        CN470_GET_PHY_PARAM( );
 800be6a:	4608      	mov	r0, r1
 800be6c:	f002 f8b6 	bl	800dfdc <RegionCN470GetPhyParam>
 800be70:	9001      	str	r0, [sp, #4]
 800be72:	e7f1      	b.n	800be58 <RegionGetPhyParam+0x22>
        CN779_GET_PHY_PARAM( );
 800be74:	4608      	mov	r0, r1
 800be76:	f002 fd65 	bl	800e944 <RegionCN779GetPhyParam>
 800be7a:	9001      	str	r0, [sp, #4]
 800be7c:	e7ec      	b.n	800be58 <RegionGetPhyParam+0x22>
        EU433_GET_PHY_PARAM( );
 800be7e:	4608      	mov	r0, r1
 800be80:	f003 ff06 	bl	800fc90 <RegionEU433GetPhyParam>
 800be84:	9001      	str	r0, [sp, #4]
 800be86:	e7e7      	b.n	800be58 <RegionGetPhyParam+0x22>
        EU868_GET_PHY_PARAM( );
 800be88:	4608      	mov	r0, r1
 800be8a:	f004 fd13 	bl	80108b4 <RegionEU868GetPhyParam>
 800be8e:	9001      	str	r0, [sp, #4]
 800be90:	e7e2      	b.n	800be58 <RegionGetPhyParam+0x22>
        IN865_GET_PHY_PARAM( );
 800be92:	4608      	mov	r0, r1
 800be94:	f005 fb0c 	bl	80114b0 <RegionIN865GetPhyParam>
 800be98:	9001      	str	r0, [sp, #4]
 800be9a:	e7dd      	b.n	800be58 <RegionGetPhyParam+0x22>
        US915_GET_PHY_PARAM( );
 800be9c:	4608      	mov	r0, r1
 800be9e:	f006 fedb 	bl	8012c58 <RegionUS915GetPhyParam>
 800bea2:	9001      	str	r0, [sp, #4]
 800bea4:	e7d8      	b.n	800be58 <RegionGetPhyParam+0x22>
        RU864_GET_PHY_PARAM( );
 800bea6:	4608      	mov	r0, r1
 800bea8:	f006 f8ea 	bl	8012080 <RegionRU864GetPhyParam>
 800beac:	9001      	str	r0, [sp, #4]
 800beae:	e7d3      	b.n	800be58 <RegionGetPhyParam+0x22>
            return phyParam;
 800beb0:	9b00      	ldr	r3, [sp, #0]
 800beb2:	9301      	str	r3, [sp, #4]
 800beb4:	e7d0      	b.n	800be58 <RegionGetPhyParam+0x22>

0800beb6 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800beb6:	b508      	push	{r3, lr}
    switch( region )
 800beb8:	2809      	cmp	r0, #9
 800beba:	d809      	bhi.n	800bed0 <RegionSetBandTxDone+0x1a>
 800bebc:	e8df f000 	tbb	[pc, r0]
 800bec0:	110d0905 	.word	0x110d0905
 800bec4:	1d081915 	.word	0x1d081915
 800bec8:	2521      	.short	0x2521
    {
        AS923_SET_BAND_TX_DONE( );
 800beca:	4608      	mov	r0, r1
 800becc:	f000 fc76 	bl	800c7bc <RegionAS923SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800bed0:	bd08      	pop	{r3, pc}
        AU915_SET_BAND_TX_DONE( );
 800bed2:	4608      	mov	r0, r1
 800bed4:	f001 fac6 	bl	800d464 <RegionAU915SetBandTxDone>
 800bed8:	e7fa      	b.n	800bed0 <RegionSetBandTxDone+0x1a>
        CN470_SET_BAND_TX_DONE( );
 800beda:	4608      	mov	r0, r1
 800bedc:	f002 f952 	bl	800e184 <RegionCN470SetBandTxDone>
 800bee0:	e7f6      	b.n	800bed0 <RegionSetBandTxDone+0x1a>
        CN779_SET_BAND_TX_DONE( );
 800bee2:	4608      	mov	r0, r1
 800bee4:	f002 fdf4 	bl	800ead0 <RegionCN779SetBandTxDone>
 800bee8:	e7f2      	b.n	800bed0 <RegionSetBandTxDone+0x1a>
        EU433_SET_BAND_TX_DONE( );
 800beea:	4608      	mov	r0, r1
 800beec:	f003 ff94 	bl	800fe18 <RegionEU433SetBandTxDone>
 800bef0:	e7ee      	b.n	800bed0 <RegionSetBandTxDone+0x1a>
        EU868_SET_BAND_TX_DONE( );
 800bef2:	4608      	mov	r0, r1
 800bef4:	f004 fda2 	bl	8010a3c <RegionEU868SetBandTxDone>
 800bef8:	e7ea      	b.n	800bed0 <RegionSetBandTxDone+0x1a>
        IN865_SET_BAND_TX_DONE( );
 800befa:	4608      	mov	r0, r1
 800befc:	f005 fb9c 	bl	8011638 <RegionIN865SetBandTxDone>
 800bf00:	e7e6      	b.n	800bed0 <RegionSetBandTxDone+0x1a>
        US915_SET_BAND_TX_DONE( );
 800bf02:	4608      	mov	r0, r1
 800bf04:	f006 ff82 	bl	8012e0c <RegionUS915SetBandTxDone>
 800bf08:	e7e2      	b.n	800bed0 <RegionSetBandTxDone+0x1a>
        RU864_SET_BAND_TX_DONE( );
 800bf0a:	4608      	mov	r0, r1
 800bf0c:	f006 f97e 	bl	801220c <RegionRU864SetBandTxDone>
 800bf10:	e7de      	b.n	800bed0 <RegionSetBandTxDone+0x1a>

0800bf12 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800bf12:	b508      	push	{r3, lr}
    switch( region )
 800bf14:	2809      	cmp	r0, #9
 800bf16:	d809      	bhi.n	800bf2c <RegionInitDefaults+0x1a>
 800bf18:	e8df f000 	tbb	[pc, r0]
 800bf1c:	110d0905 	.word	0x110d0905
 800bf20:	1d081915 	.word	0x1d081915
 800bf24:	2521      	.short	0x2521
    {
        AS923_INIT_DEFAULTS( );
 800bf26:	4608      	mov	r0, r1
 800bf28:	f000 fc66 	bl	800c7f8 <RegionAS923InitDefaults>
        default:
        {
            break;
        }
    }
}
 800bf2c:	bd08      	pop	{r3, pc}
        AU915_INIT_DEFAULTS( );
 800bf2e:	4608      	mov	r0, r1
 800bf30:	f001 fab6 	bl	800d4a0 <RegionAU915InitDefaults>
 800bf34:	e7fa      	b.n	800bf2c <RegionInitDefaults+0x1a>
        CN470_INIT_DEFAULTS( );
 800bf36:	4608      	mov	r0, r1
 800bf38:	f002 f942 	bl	800e1c0 <RegionCN470InitDefaults>
 800bf3c:	e7f6      	b.n	800bf2c <RegionInitDefaults+0x1a>
        CN779_INIT_DEFAULTS( );
 800bf3e:	4608      	mov	r0, r1
 800bf40:	f002 fde4 	bl	800eb0c <RegionCN779InitDefaults>
 800bf44:	e7f2      	b.n	800bf2c <RegionInitDefaults+0x1a>
        EU433_INIT_DEFAULTS( );
 800bf46:	4608      	mov	r0, r1
 800bf48:	f003 ff84 	bl	800fe54 <RegionEU433InitDefaults>
 800bf4c:	e7ee      	b.n	800bf2c <RegionInitDefaults+0x1a>
        EU868_INIT_DEFAULTS( );
 800bf4e:	4608      	mov	r0, r1
 800bf50:	f004 fd92 	bl	8010a78 <RegionEU868InitDefaults>
 800bf54:	e7ea      	b.n	800bf2c <RegionInitDefaults+0x1a>
        IN865_INIT_DEFAULTS( );
 800bf56:	4608      	mov	r0, r1
 800bf58:	f005 fb8c 	bl	8011674 <RegionIN865InitDefaults>
 800bf5c:	e7e6      	b.n	800bf2c <RegionInitDefaults+0x1a>
        US915_INIT_DEFAULTS( );
 800bf5e:	4608      	mov	r0, r1
 800bf60:	f006 ff72 	bl	8012e48 <RegionUS915InitDefaults>
 800bf64:	e7e2      	b.n	800bf2c <RegionInitDefaults+0x1a>
        RU864_INIT_DEFAULTS( );
 800bf66:	4608      	mov	r0, r1
 800bf68:	f006 f96e 	bl	8012248 <RegionRU864InitDefaults>
}
 800bf6c:	e7de      	b.n	800bf2c <RegionInitDefaults+0x1a>

0800bf6e <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800bf6e:	b508      	push	{r3, lr}
 800bf70:	4603      	mov	r3, r0
 800bf72:	4608      	mov	r0, r1
 800bf74:	4611      	mov	r1, r2
    switch( region )
 800bf76:	2b09      	cmp	r3, #9
 800bf78:	d821      	bhi.n	800bfbe <RegionVerify+0x50>
 800bf7a:	e8df f003 	tbb	[pc, r3]
 800bf7e:	0805      	.short	0x0805
 800bf80:	14110e0b 	.word	0x14110e0b
 800bf84:	1d1a1720 	.word	0x1d1a1720
    {
        AS923_VERIFY( );
 800bf88:	f000 fc9a 	bl	800c8c0 <RegionAS923Verify>
        default:
        {
            return false;
        }
    }
}
 800bf8c:	bd08      	pop	{r3, pc}
        AU915_VERIFY( );
 800bf8e:	f001 fb2d 	bl	800d5ec <RegionAU915Verify>
 800bf92:	e7fb      	b.n	800bf8c <RegionVerify+0x1e>
        CN470_VERIFY( );
 800bf94:	f002 f978 	bl	800e288 <RegionCN470Verify>
 800bf98:	e7f8      	b.n	800bf8c <RegionVerify+0x1e>
        CN779_VERIFY( );
 800bf9a:	f002 fe19 	bl	800ebd0 <RegionCN779Verify>
 800bf9e:	e7f5      	b.n	800bf8c <RegionVerify+0x1e>
        EU433_VERIFY( );
 800bfa0:	f003 ffba 	bl	800ff18 <RegionEU433Verify>
 800bfa4:	e7f2      	b.n	800bf8c <RegionVerify+0x1e>
        EU868_VERIFY( );
 800bfa6:	f004 fdd3 	bl	8010b50 <RegionEU868Verify>
 800bfaa:	e7ef      	b.n	800bf8c <RegionVerify+0x1e>
        IN865_VERIFY( );
 800bfac:	f005 fbc4 	bl	8011738 <RegionIN865Verify>
 800bfb0:	e7ec      	b.n	800bf8c <RegionVerify+0x1e>
        US915_VERIFY( );
 800bfb2:	f006 ffef 	bl	8012f94 <RegionUS915Verify>
 800bfb6:	e7e9      	b.n	800bf8c <RegionVerify+0x1e>
        RU864_VERIFY( );
 800bfb8:	f006 f9a0 	bl	80122fc <RegionRU864Verify>
 800bfbc:	e7e6      	b.n	800bf8c <RegionVerify+0x1e>
{
 800bfbe:	2000      	movs	r0, #0
 800bfc0:	e7e4      	b.n	800bf8c <RegionVerify+0x1e>

0800bfc2 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800bfc2:	b508      	push	{r3, lr}
    switch( region )
 800bfc4:	2809      	cmp	r0, #9
 800bfc6:	d809      	bhi.n	800bfdc <RegionApplyCFList+0x1a>
 800bfc8:	e8df f000 	tbb	[pc, r0]
 800bfcc:	110d0905 	.word	0x110d0905
 800bfd0:	1d081915 	.word	0x1d081915
 800bfd4:	2521      	.short	0x2521
    {
        AS923_APPLY_CF_LIST( );
 800bfd6:	4608      	mov	r0, r1
 800bfd8:	f001 f82c 	bl	800d034 <RegionAS923ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800bfdc:	bd08      	pop	{r3, pc}
        AU915_APPLY_CF_LIST( );
 800bfde:	4608      	mov	r0, r1
 800bfe0:	f001 fb4c 	bl	800d67c <RegionAU915ApplyCFList>
 800bfe4:	e7fa      	b.n	800bfdc <RegionApplyCFList+0x1a>
        CN470_APPLY_CF_LIST( );
 800bfe6:	4608      	mov	r0, r1
 800bfe8:	f002 f97e 	bl	800e2e8 <RegionCN470ApplyCFList>
 800bfec:	e7f6      	b.n	800bfdc <RegionApplyCFList+0x1a>
        CN779_APPLY_CF_LIST( );
 800bfee:	4608      	mov	r0, r1
 800bff0:	f003 f994 	bl	800f31c <RegionCN779ApplyCFList>
 800bff4:	e7f2      	b.n	800bfdc <RegionApplyCFList+0x1a>
        EU433_APPLY_CF_LIST( );
 800bff6:	4608      	mov	r0, r1
 800bff8:	f004 fb34 	bl	8010664 <RegionEU433ApplyCFList>
 800bffc:	e7ee      	b.n	800bfdc <RegionApplyCFList+0x1a>
        EU868_APPLY_CF_LIST( );
 800bffe:	4608      	mov	r0, r1
 800c000:	f005 f96e 	bl	80112e0 <RegionEU868ApplyCFList>
 800c004:	e7ea      	b.n	800bfdc <RegionApplyCFList+0x1a>
        IN865_APPLY_CF_LIST( );
 800c006:	4608      	mov	r0, r1
 800c008:	f005 ff4c 	bl	8011ea4 <RegionIN865ApplyCFList>
 800c00c:	e7e6      	b.n	800bfdc <RegionApplyCFList+0x1a>
        US915_APPLY_CF_LIST( );
 800c00e:	4608      	mov	r0, r1
 800c010:	f006 fff0 	bl	8012ff4 <RegionUS915ApplyCFList>
 800c014:	e7e2      	b.n	800bfdc <RegionApplyCFList+0x1a>
        RU864_APPLY_CF_LIST( );
 800c016:	4608      	mov	r0, r1
 800c018:	f006 fd12 	bl	8012a40 <RegionRU864ApplyCFList>
}
 800c01c:	e7de      	b.n	800bfdc <RegionApplyCFList+0x1a>

0800c01e <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800c01e:	b508      	push	{r3, lr}
    switch( region )
 800c020:	2809      	cmp	r0, #9
 800c022:	d82a      	bhi.n	800c07a <RegionChanMaskSet+0x5c>
 800c024:	e8df f000 	tbb	[pc, r0]
 800c028:	110d0905 	.word	0x110d0905
 800c02c:	1d291915 	.word	0x1d291915
 800c030:	2521      	.short	0x2521
    {
        AS923_CHAN_MASK_SET( );
 800c032:	4608      	mov	r0, r1
 800c034:	f000 fc96 	bl	800c964 <RegionAS923ChanMaskSet>
        default:
        {
            return false;
        }
    }
}
 800c038:	bd08      	pop	{r3, pc}
        AU915_CHAN_MASK_SET( );
 800c03a:	4608      	mov	r0, r1
 800c03c:	f001 fb5c 	bl	800d6f8 <RegionAU915ChanMaskSet>
 800c040:	e7fa      	b.n	800c038 <RegionChanMaskSet+0x1a>
        CN470_CHAN_MASK_SET( );
 800c042:	4608      	mov	r0, r1
 800c044:	f002 f978 	bl	800e338 <RegionCN470ChanMaskSet>
 800c048:	e7f6      	b.n	800c038 <RegionChanMaskSet+0x1a>
        CN779_CHAN_MASK_SET( );
 800c04a:	4608      	mov	r0, r1
 800c04c:	f002 fdfe 	bl	800ec4c <RegionCN779ChanMaskSet>
 800c050:	e7f2      	b.n	800c038 <RegionChanMaskSet+0x1a>
        EU433_CHAN_MASK_SET( );
 800c052:	4608      	mov	r0, r1
 800c054:	f003 ff9e 	bl	800ff94 <RegionEU433ChanMaskSet>
 800c058:	e7ee      	b.n	800c038 <RegionChanMaskSet+0x1a>
        EU868_CHAN_MASK_SET( );
 800c05a:	4608      	mov	r0, r1
 800c05c:	f004 fdbe 	bl	8010bdc <RegionEU868ChanMaskSet>
 800c060:	e7ea      	b.n	800c038 <RegionChanMaskSet+0x1a>
        IN865_CHAN_MASK_SET( );
 800c062:	4608      	mov	r0, r1
 800c064:	f005 fbaa 	bl	80117bc <RegionIN865ChanMaskSet>
 800c068:	e7e6      	b.n	800c038 <RegionChanMaskSet+0x1a>
        US915_CHAN_MASK_SET( );
 800c06a:	4608      	mov	r0, r1
 800c06c:	f007 f800 	bl	8013070 <RegionUS915ChanMaskSet>
 800c070:	e7e2      	b.n	800c038 <RegionChanMaskSet+0x1a>
        RU864_CHAN_MASK_SET( );
 800c072:	4608      	mov	r0, r1
 800c074:	f006 f980 	bl	8012378 <RegionRU864ChanMaskSet>
 800c078:	e7de      	b.n	800c038 <RegionChanMaskSet+0x1a>
{
 800c07a:	2000      	movs	r0, #0
 800c07c:	e7dc      	b.n	800c038 <RegionChanMaskSet+0x1a>

0800c07e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800c07e:	b510      	push	{r4, lr}
 800c080:	4604      	mov	r4, r0
 800c082:	4608      	mov	r0, r1
 800c084:	4611      	mov	r1, r2
 800c086:	461a      	mov	r2, r3
    switch( region )
 800c088:	2c09      	cmp	r4, #9
 800c08a:	d809      	bhi.n	800c0a0 <RegionComputeRxWindowParameters+0x22>
 800c08c:	e8df f004 	tbb	[pc, r4]
 800c090:	110d0905 	.word	0x110d0905
 800c094:	1d081915 	.word	0x1d081915
 800c098:	2521      	.short	0x2521
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c09a:	9b02      	ldr	r3, [sp, #8]
 800c09c:	f000 fc80 	bl	800c9a0 <RegionAS923ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800c0a0:	bd10      	pop	{r4, pc}
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c0a2:	9b02      	ldr	r3, [sp, #8]
 800c0a4:	f001 fb62 	bl	800d76c <RegionAU915ComputeRxWindowParameters>
 800c0a8:	e7fa      	b.n	800c0a0 <RegionComputeRxWindowParameters+0x22>
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c0aa:	9b02      	ldr	r3, [sp, #8]
 800c0ac:	f002 f962 	bl	800e374 <RegionCN470ComputeRxWindowParameters>
 800c0b0:	e7f6      	b.n	800c0a0 <RegionComputeRxWindowParameters+0x22>
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c0b2:	9b02      	ldr	r3, [sp, #8]
 800c0b4:	f002 fde8 	bl	800ec88 <RegionCN779ComputeRxWindowParameters>
 800c0b8:	e7f2      	b.n	800c0a0 <RegionComputeRxWindowParameters+0x22>
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c0ba:	9b02      	ldr	r3, [sp, #8]
 800c0bc:	f003 ff88 	bl	800ffd0 <RegionEU433ComputeRxWindowParameters>
 800c0c0:	e7ee      	b.n	800c0a0 <RegionComputeRxWindowParameters+0x22>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c0c2:	9b02      	ldr	r3, [sp, #8]
 800c0c4:	f004 fda8 	bl	8010c18 <RegionEU868ComputeRxWindowParameters>
 800c0c8:	e7ea      	b.n	800c0a0 <RegionComputeRxWindowParameters+0x22>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c0ca:	9b02      	ldr	r3, [sp, #8]
 800c0cc:	f005 fb94 	bl	80117f8 <RegionIN865ComputeRxWindowParameters>
 800c0d0:	e7e6      	b.n	800c0a0 <RegionComputeRxWindowParameters+0x22>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c0d2:	9b02      	ldr	r3, [sp, #8]
 800c0d4:	f007 f810 	bl	80130f8 <RegionUS915ComputeRxWindowParameters>
 800c0d8:	e7e2      	b.n	800c0a0 <RegionComputeRxWindowParameters+0x22>
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c0da:	9b02      	ldr	r3, [sp, #8]
 800c0dc:	f006 f96a 	bl	80123b4 <RegionRU864ComputeRxWindowParameters>
}
 800c0e0:	e7de      	b.n	800c0a0 <RegionComputeRxWindowParameters+0x22>

0800c0e2 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800c0e2:	b508      	push	{r3, lr}
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	4608      	mov	r0, r1
 800c0e8:	4611      	mov	r1, r2
    switch( region )
 800c0ea:	2b09      	cmp	r3, #9
 800c0ec:	d821      	bhi.n	800c132 <RegionRxConfig+0x50>
 800c0ee:	e8df f003 	tbb	[pc, r3]
 800c0f2:	0805      	.short	0x0805
 800c0f4:	14110e0b 	.word	0x14110e0b
 800c0f8:	1d1a1720 	.word	0x1d1a1720
    {
        AS923_RX_CONFIG( );
 800c0fc:	f000 fc86 	bl	800ca0c <RegionAS923RxConfig>
        default:
        {
            return false;
        }
    }
}
 800c100:	bd08      	pop	{r3, pc}
        AU915_RX_CONFIG( );
 800c102:	f001 fb61 	bl	800d7c8 <RegionAU915RxConfig>
 800c106:	e7fb      	b.n	800c100 <RegionRxConfig+0x1e>
        CN470_RX_CONFIG( );
 800c108:	f002 f962 	bl	800e3d0 <RegionCN470RxConfig>
 800c10c:	e7f8      	b.n	800c100 <RegionRxConfig+0x1e>
        CN779_RX_CONFIG( );
 800c10e:	f002 fdf1 	bl	800ecf4 <RegionCN779RxConfig>
 800c112:	e7f5      	b.n	800c100 <RegionRxConfig+0x1e>
        EU433_RX_CONFIG( );
 800c114:	f003 ff92 	bl	801003c <RegionEU433RxConfig>
 800c118:	e7f2      	b.n	800c100 <RegionRxConfig+0x1e>
        EU868_RX_CONFIG( );
 800c11a:	f004 fdb3 	bl	8010c84 <RegionEU868RxConfig>
 800c11e:	e7ef      	b.n	800c100 <RegionRxConfig+0x1e>
        IN865_RX_CONFIG( );
 800c120:	f005 fba0 	bl	8011864 <RegionIN865RxConfig>
 800c124:	e7ec      	b.n	800c100 <RegionRxConfig+0x1e>
        US915_RX_CONFIG( );
 800c126:	f007 f815 	bl	8013154 <RegionUS915RxConfig>
 800c12a:	e7e9      	b.n	800c100 <RegionRxConfig+0x1e>
        RU864_RX_CONFIG( );
 800c12c:	f006 f978 	bl	8012420 <RegionRU864RxConfig>
 800c130:	e7e6      	b.n	800c100 <RegionRxConfig+0x1e>
{
 800c132:	2000      	movs	r0, #0
 800c134:	e7e4      	b.n	800c100 <RegionRxConfig+0x1e>

0800c136 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800c136:	b510      	push	{r4, lr}
 800c138:	4604      	mov	r4, r0
 800c13a:	4608      	mov	r0, r1
 800c13c:	4611      	mov	r1, r2
 800c13e:	461a      	mov	r2, r3
    switch( region )
 800c140:	2c09      	cmp	r4, #9
 800c142:	d821      	bhi.n	800c188 <RegionTxConfig+0x52>
 800c144:	e8df f004 	tbb	[pc, r4]
 800c148:	0e0b0805 	.word	0x0e0b0805
 800c14c:	17201411 	.word	0x17201411
 800c150:	1d1a      	.short	0x1d1a
    {
        AS923_TX_CONFIG( );
 800c152:	f000 fcdf 	bl	800cb14 <RegionAS923TxConfig>
        default:
        {
            return false;
        }
    }
}
 800c156:	bd10      	pop	{r4, pc}
        AU915_TX_CONFIG( );
 800c158:	f001 fb90 	bl	800d87c <RegionAU915TxConfig>
 800c15c:	e7fb      	b.n	800c156 <RegionTxConfig+0x20>
        CN470_TX_CONFIG( );
 800c15e:	f002 f999 	bl	800e494 <RegionCN470TxConfig>
 800c162:	e7f8      	b.n	800c156 <RegionTxConfig+0x20>
        CN779_TX_CONFIG( );
 800c164:	f002 fe4a 	bl	800edfc <RegionCN779TxConfig>
 800c168:	e7f5      	b.n	800c156 <RegionTxConfig+0x20>
        EU433_TX_CONFIG( );
 800c16a:	f003 ffeb 	bl	8010144 <RegionEU433TxConfig>
 800c16e:	e7f2      	b.n	800c156 <RegionTxConfig+0x20>
        EU868_TX_CONFIG( );
 800c170:	f004 fe0c 	bl	8010d8c <RegionEU868TxConfig>
 800c174:	e7ef      	b.n	800c156 <RegionTxConfig+0x20>
        IN865_TX_CONFIG( );
 800c176:	f005 fbf9 	bl	801196c <RegionIN865TxConfig>
 800c17a:	e7ec      	b.n	800c156 <RegionTxConfig+0x20>
        US915_TX_CONFIG( );
 800c17c:	f007 f844 	bl	8013208 <RegionUS915TxConfig>
 800c180:	e7e9      	b.n	800c156 <RegionTxConfig+0x20>
        RU864_TX_CONFIG( );
 800c182:	f006 f9d1 	bl	8012528 <RegionRU864TxConfig>
 800c186:	e7e6      	b.n	800c156 <RegionTxConfig+0x20>
{
 800c188:	2000      	movs	r0, #0
 800c18a:	e7e4      	b.n	800c156 <RegionTxConfig+0x20>

0800c18c <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800c18c:	b510      	push	{r4, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	4604      	mov	r4, r0
 800c192:	4608      	mov	r0, r1
 800c194:	4611      	mov	r1, r2
 800c196:	461a      	mov	r2, r3
    switch( region )
 800c198:	2c09      	cmp	r4, #9
 800c19a:	d83d      	bhi.n	800c218 <RegionLinkAdrReq+0x8c>
 800c19c:	e8df f004 	tbb	[pc, r4]
 800c1a0:	18120c05 	.word	0x18120c05
 800c1a4:	2a3c241e 	.word	0x2a3c241e
 800c1a8:	3630      	.short	0x3630
    {
        AS923_LINK_ADR_REQ( );
 800c1aa:	9b05      	ldr	r3, [sp, #20]
 800c1ac:	9300      	str	r3, [sp, #0]
 800c1ae:	9b04      	ldr	r3, [sp, #16]
 800c1b0:	f000 fd48 	bl	800cc44 <RegionAS923LinkAdrReq>
        default:
        {
            return 0;
        }
    }
}
 800c1b4:	b002      	add	sp, #8
 800c1b6:	bd10      	pop	{r4, pc}
        AU915_LINK_ADR_REQ( );
 800c1b8:	9b05      	ldr	r3, [sp, #20]
 800c1ba:	9300      	str	r3, [sp, #0]
 800c1bc:	9b04      	ldr	r3, [sp, #16]
 800c1be:	f001 fbd3 	bl	800d968 <RegionAU915LinkAdrReq>
 800c1c2:	e7f7      	b.n	800c1b4 <RegionLinkAdrReq+0x28>
        CN470_LINK_ADR_REQ( );
 800c1c4:	9b05      	ldr	r3, [sp, #20]
 800c1c6:	9300      	str	r3, [sp, #0]
 800c1c8:	9b04      	ldr	r3, [sp, #16]
 800c1ca:	f002 f9d9 	bl	800e580 <RegionCN470LinkAdrReq>
 800c1ce:	e7f1      	b.n	800c1b4 <RegionLinkAdrReq+0x28>
        CN779_LINK_ADR_REQ( );
 800c1d0:	9b05      	ldr	r3, [sp, #20]
 800c1d2:	9300      	str	r3, [sp, #0]
 800c1d4:	9b04      	ldr	r3, [sp, #16]
 800c1d6:	f002 fea9 	bl	800ef2c <RegionCN779LinkAdrReq>
 800c1da:	e7eb      	b.n	800c1b4 <RegionLinkAdrReq+0x28>
        EU433_LINK_ADR_REQ( );
 800c1dc:	9b05      	ldr	r3, [sp, #20]
 800c1de:	9300      	str	r3, [sp, #0]
 800c1e0:	9b04      	ldr	r3, [sp, #16]
 800c1e2:	f004 f847 	bl	8010274 <RegionEU433LinkAdrReq>
 800c1e6:	e7e5      	b.n	800c1b4 <RegionLinkAdrReq+0x28>
        EU868_LINK_ADR_REQ( );
 800c1e8:	9b05      	ldr	r3, [sp, #20]
 800c1ea:	9300      	str	r3, [sp, #0]
 800c1ec:	9b04      	ldr	r3, [sp, #16]
 800c1ee:	f004 fe65 	bl	8010ebc <RegionEU868LinkAdrReq>
 800c1f2:	e7df      	b.n	800c1b4 <RegionLinkAdrReq+0x28>
        IN865_LINK_ADR_REQ( );
 800c1f4:	9b05      	ldr	r3, [sp, #20]
 800c1f6:	9300      	str	r3, [sp, #0]
 800c1f8:	9b04      	ldr	r3, [sp, #16]
 800c1fa:	f005 fc4f 	bl	8011a9c <RegionIN865LinkAdrReq>
 800c1fe:	e7d9      	b.n	800c1b4 <RegionLinkAdrReq+0x28>
        US915_LINK_ADR_REQ( );
 800c200:	9b05      	ldr	r3, [sp, #20]
 800c202:	9300      	str	r3, [sp, #0]
 800c204:	9b04      	ldr	r3, [sp, #16]
 800c206:	f007 f879 	bl	80132fc <RegionUS915LinkAdrReq>
 800c20a:	e7d3      	b.n	800c1b4 <RegionLinkAdrReq+0x28>
        RU864_LINK_ADR_REQ( );
 800c20c:	9b05      	ldr	r3, [sp, #20]
 800c20e:	9300      	str	r3, [sp, #0]
 800c210:	9b04      	ldr	r3, [sp, #16]
 800c212:	f006 fa21 	bl	8012658 <RegionRU864LinkAdrReq>
 800c216:	e7cd      	b.n	800c1b4 <RegionLinkAdrReq+0x28>
{
 800c218:	2000      	movs	r0, #0
 800c21a:	e7cb      	b.n	800c1b4 <RegionLinkAdrReq+0x28>

0800c21c <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800c21c:	b508      	push	{r3, lr}
    switch( region )
 800c21e:	2809      	cmp	r0, #9
 800c220:	d82a      	bhi.n	800c278 <RegionRxParamSetupReq+0x5c>
 800c222:	e8df f000 	tbb	[pc, r0]
 800c226:	0905      	.short	0x0905
 800c228:	1915110d 	.word	0x1915110d
 800c22c:	25211d29 	.word	0x25211d29
    {
        AS923_RX_PARAM_SETUP_REQ( );
 800c230:	4608      	mov	r0, r1
 800c232:	f000 fdcb 	bl	800cdcc <RegionAS923RxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 800c236:	bd08      	pop	{r3, pc}
        AU915_RX_PARAM_SETUP_REQ( );
 800c238:	4608      	mov	r0, r1
 800c23a:	f001 fcd3 	bl	800dbe4 <RegionAU915RxParamSetupReq>
 800c23e:	e7fa      	b.n	800c236 <RegionRxParamSetupReq+0x1a>
        CN470_RX_PARAM_SETUP_REQ( );
 800c240:	4608      	mov	r0, r1
 800c242:	f002 fa61 	bl	800e708 <RegionCN470RxParamSetupReq>
 800c246:	e7f6      	b.n	800c236 <RegionRxParamSetupReq+0x1a>
        CN779_RX_PARAM_SETUP_REQ( );
 800c248:	4608      	mov	r0, r1
 800c24a:	f002 ff33 	bl	800f0b4 <RegionCN779RxParamSetupReq>
 800c24e:	e7f2      	b.n	800c236 <RegionRxParamSetupReq+0x1a>
        EU433_RX_PARAM_SETUP_REQ( );
 800c250:	4608      	mov	r0, r1
 800c252:	f004 f8d3 	bl	80103fc <RegionEU433RxParamSetupReq>
 800c256:	e7ee      	b.n	800c236 <RegionRxParamSetupReq+0x1a>
        EU868_RX_PARAM_SETUP_REQ( );
 800c258:	4608      	mov	r0, r1
 800c25a:	f004 fef3 	bl	8011044 <RegionEU868RxParamSetupReq>
 800c25e:	e7ea      	b.n	800c236 <RegionRxParamSetupReq+0x1a>
        IN865_RX_PARAM_SETUP_REQ( );
 800c260:	4608      	mov	r0, r1
 800c262:	f005 fce7 	bl	8011c34 <RegionIN865RxParamSetupReq>
 800c266:	e7e6      	b.n	800c236 <RegionRxParamSetupReq+0x1a>
        US915_RX_PARAM_SETUP_REQ( );
 800c268:	4608      	mov	r0, r1
 800c26a:	f007 f985 	bl	8013578 <RegionUS915RxParamSetupReq>
 800c26e:	e7e2      	b.n	800c236 <RegionRxParamSetupReq+0x1a>
        RU864_RX_PARAM_SETUP_REQ( );
 800c270:	4608      	mov	r0, r1
 800c272:	f006 fab3 	bl	80127dc <RegionRU864RxParamSetupReq>
 800c276:	e7de      	b.n	800c236 <RegionRxParamSetupReq+0x1a>
{
 800c278:	2000      	movs	r0, #0
 800c27a:	e7dc      	b.n	800c236 <RegionRxParamSetupReq+0x1a>

0800c27c <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800c27c:	b508      	push	{r3, lr}
    switch( region )
 800c27e:	2809      	cmp	r0, #9
 800c280:	d82a      	bhi.n	800c2d8 <RegionNewChannelReq+0x5c>
 800c282:	e8df f000 	tbb	[pc, r0]
 800c286:	0905      	.short	0x0905
 800c288:	1915110d 	.word	0x1915110d
 800c28c:	25211d29 	.word	0x25211d29
    {
        AS923_NEW_CHANNEL_REQ( );
 800c290:	4608      	mov	r0, r1
 800c292:	f000 ff0f 	bl	800d0b4 <RegionAS923NewChannelReq>
        default:
        {
            return 0;
        }
    }
}
 800c296:	bd08      	pop	{r3, pc}
        AU915_NEW_CHANNEL_REQ( );
 800c298:	4608      	mov	r0, r1
 800c29a:	f001 fcc8 	bl	800dc2e <RegionAU915NewChannelReq>
 800c29e:	e7fa      	b.n	800c296 <RegionNewChannelReq+0x1a>
        CN470_NEW_CHANNEL_REQ( );
 800c2a0:	4608      	mov	r0, r1
 800c2a2:	f002 fa4e 	bl	800e742 <RegionCN470NewChannelReq>
 800c2a6:	e7f6      	b.n	800c296 <RegionNewChannelReq+0x1a>
        CN779_NEW_CHANNEL_REQ( );
 800c2a8:	4608      	mov	r0, r1
 800c2aa:	f003 f877 	bl	800f39c <RegionCN779NewChannelReq>
 800c2ae:	e7f2      	b.n	800c296 <RegionNewChannelReq+0x1a>
        EU433_NEW_CHANNEL_REQ( );
 800c2b0:	4608      	mov	r0, r1
 800c2b2:	f004 fa17 	bl	80106e4 <RegionEU433NewChannelReq>
 800c2b6:	e7ee      	b.n	800c296 <RegionNewChannelReq+0x1a>
        EU868_NEW_CHANNEL_REQ( );
 800c2b8:	4608      	mov	r0, r1
 800c2ba:	f005 f851 	bl	8011360 <RegionEU868NewChannelReq>
 800c2be:	e7ea      	b.n	800c296 <RegionNewChannelReq+0x1a>
        IN865_NEW_CHANNEL_REQ( );
 800c2c0:	4608      	mov	r0, r1
 800c2c2:	f005 fe2f 	bl	8011f24 <RegionIN865NewChannelReq>
 800c2c6:	e7e6      	b.n	800c296 <RegionNewChannelReq+0x1a>
        US915_NEW_CHANNEL_REQ( );
 800c2c8:	4608      	mov	r0, r1
 800c2ca:	f007 f980 	bl	80135ce <RegionUS915NewChannelReq>
 800c2ce:	e7e2      	b.n	800c296 <RegionNewChannelReq+0x1a>
        RU864_NEW_CHANNEL_REQ( );
 800c2d0:	4608      	mov	r0, r1
 800c2d2:	f006 fbf5 	bl	8012ac0 <RegionRU864NewChannelReq>
 800c2d6:	e7de      	b.n	800c296 <RegionNewChannelReq+0x1a>
{
 800c2d8:	2000      	movs	r0, #0
 800c2da:	e7dc      	b.n	800c296 <RegionNewChannelReq+0x1a>

0800c2dc <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800c2dc:	b508      	push	{r3, lr}
    switch( region )
 800c2de:	2809      	cmp	r0, #9
 800c2e0:	d82a      	bhi.n	800c338 <RegionTxParamSetupReq+0x5c>
 800c2e2:	e8df f000 	tbb	[pc, r0]
 800c2e6:	0905      	.short	0x0905
 800c2e8:	1915110d 	.word	0x1915110d
 800c2ec:	25211d29 	.word	0x25211d29
    {
        AS923_TX_PARAM_SETUP_REQ( );
 800c2f0:	4608      	mov	r0, r1
 800c2f2:	f000 fd88 	bl	800ce06 <RegionAS923TxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 800c2f6:	bd08      	pop	{r3, pc}
        AU915_TX_PARAM_SETUP_REQ( );
 800c2f8:	4608      	mov	r0, r1
 800c2fa:	f001 fc9b 	bl	800dc34 <RegionAU915TxParamSetupReq>
 800c2fe:	e7fa      	b.n	800c2f6 <RegionTxParamSetupReq+0x1a>
        CN470_TX_PARAM_SETUP_REQ( );
 800c300:	4608      	mov	r0, r1
 800c302:	f002 fa21 	bl	800e748 <RegionCN470TxParamSetupReq>
 800c306:	e7f6      	b.n	800c2f6 <RegionTxParamSetupReq+0x1a>
        CN779_TX_PARAM_SETUP_REQ( );
 800c308:	4608      	mov	r0, r1
 800c30a:	f002 fef0 	bl	800f0ee <RegionCN779TxParamSetupReq>
 800c30e:	e7f2      	b.n	800c2f6 <RegionTxParamSetupReq+0x1a>
        EU433_TX_PARAM_SETUP_REQ( );
 800c310:	4608      	mov	r0, r1
 800c312:	f004 f890 	bl	8010436 <RegionEU433TxParamSetupReq>
 800c316:	e7ee      	b.n	800c2f6 <RegionTxParamSetupReq+0x1a>
        EU868_TX_PARAM_SETUP_REQ( );
 800c318:	4608      	mov	r0, r1
 800c31a:	f004 feb7 	bl	801108c <RegionEU868TxParamSetupReq>
 800c31e:	e7ea      	b.n	800c2f6 <RegionTxParamSetupReq+0x1a>
        IN865_TX_PARAM_SETUP_REQ( );
 800c320:	4608      	mov	r0, r1
 800c322:	f005 fca8 	bl	8011c76 <RegionIN865TxParamSetupReq>
 800c326:	e7e6      	b.n	800c2f6 <RegionTxParamSetupReq+0x1a>
        US915_TX_PARAM_SETUP_REQ( );
 800c328:	4608      	mov	r0, r1
 800c32a:	f007 f953 	bl	80135d4 <RegionUS915TxParamSetupReq>
 800c32e:	e7e2      	b.n	800c2f6 <RegionTxParamSetupReq+0x1a>
        RU864_TX_PARAM_SETUP_REQ( );
 800c330:	4608      	mov	r0, r1
 800c332:	f006 fa70 	bl	8012816 <RegionRU864TxParamSetupReq>
 800c336:	e7de      	b.n	800c2f6 <RegionTxParamSetupReq+0x1a>
{
 800c338:	2000      	movs	r0, #0
 800c33a:	e7dc      	b.n	800c2f6 <RegionTxParamSetupReq+0x1a>

0800c33c <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800c33c:	b508      	push	{r3, lr}
    switch( region )
 800c33e:	2809      	cmp	r0, #9
 800c340:	d82a      	bhi.n	800c398 <RegionDlChannelReq+0x5c>
 800c342:	e8df f000 	tbb	[pc, r0]
 800c346:	0905      	.short	0x0905
 800c348:	1915110d 	.word	0x1915110d
 800c34c:	25211d29 	.word	0x25211d29
    {
        AS923_DL_CHANNEL_REQ( );
 800c350:	4608      	mov	r0, r1
 800c352:	f000 fd5b 	bl	800ce0c <RegionAS923DlChannelReq>
        default:
        {
            return 0;
        }
    }
}
 800c356:	bd08      	pop	{r3, pc}
        AU915_DL_CHANNEL_REQ( );
 800c358:	4608      	mov	r0, r1
 800c35a:	f001 fc6d 	bl	800dc38 <RegionAU915DlChannelReq>
 800c35e:	e7fa      	b.n	800c356 <RegionDlChannelReq+0x1a>
        CN470_DL_CHANNEL_REQ( );
 800c360:	4608      	mov	r0, r1
 800c362:	f002 f9f4 	bl	800e74e <RegionCN470DlChannelReq>
 800c366:	e7f6      	b.n	800c356 <RegionDlChannelReq+0x1a>
        CN779_DL_CHANNEL_REQ( );
 800c368:	4608      	mov	r0, r1
 800c36a:	f002 fec3 	bl	800f0f4 <RegionCN779DlChannelReq>
 800c36e:	e7f2      	b.n	800c356 <RegionDlChannelReq+0x1a>
        EU433_DL_CHANNEL_REQ( );
 800c370:	4608      	mov	r0, r1
 800c372:	f004 f863 	bl	801043c <RegionEU433DlChannelReq>
 800c376:	e7ee      	b.n	800c356 <RegionDlChannelReq+0x1a>
        EU868_DL_CHANNEL_REQ( );
 800c378:	4608      	mov	r0, r1
 800c37a:	f004 fe8b 	bl	8011094 <RegionEU868DlChannelReq>
 800c37e:	e7ea      	b.n	800c356 <RegionDlChannelReq+0x1a>
        IN865_DL_CHANNEL_REQ( );
 800c380:	4608      	mov	r0, r1
 800c382:	f005 fc7b 	bl	8011c7c <RegionIN865DlChannelReq>
 800c386:	e7e6      	b.n	800c356 <RegionDlChannelReq+0x1a>
        US915_DL_CHANNEL_REQ( );
 800c388:	4608      	mov	r0, r1
 800c38a:	f007 f926 	bl	80135da <RegionUS915DlChannelReq>
 800c38e:	e7e2      	b.n	800c356 <RegionDlChannelReq+0x1a>
        RU864_DL_CHANNEL_REQ( );
 800c390:	4608      	mov	r0, r1
 800c392:	f006 fa43 	bl	801281c <RegionRU864DlChannelReq>
 800c396:	e7de      	b.n	800c356 <RegionDlChannelReq+0x1a>
{
 800c398:	2000      	movs	r0, #0
 800c39a:	e7dc      	b.n	800c356 <RegionDlChannelReq+0x1a>

0800c39c <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800c39c:	b508      	push	{r3, lr}
 800c39e:	4603      	mov	r3, r0
 800c3a0:	4608      	mov	r0, r1
 800c3a2:	4611      	mov	r1, r2
    switch( region )
 800c3a4:	2b09      	cmp	r3, #9
 800c3a6:	d821      	bhi.n	800c3ec <RegionAlternateDr+0x50>
 800c3a8:	e8df f003 	tbb	[pc, r3]
 800c3ac:	0e0b0805 	.word	0x0e0b0805
 800c3b0:	17201411 	.word	0x17201411
 800c3b4:	1d1a      	.short	0x1d1a
    {
        AS923_ALTERNATE_DR( );
 800c3b6:	f000 fd49 	bl	800ce4c <RegionAS923AlternateDr>
        default:
        {
            return 0;
        }
    }
}
 800c3ba:	bd08      	pop	{r3, pc}
        AU915_ALTERNATE_DR( );
 800c3bc:	f001 fc40 	bl	800dc40 <RegionAU915AlternateDr>
 800c3c0:	e7fb      	b.n	800c3ba <RegionAlternateDr+0x1e>
        CN470_ALTERNATE_DR( );
 800c3c2:	f002 f9c7 	bl	800e754 <RegionCN470AlternateDr>
 800c3c6:	e7f8      	b.n	800c3ba <RegionAlternateDr+0x1e>
        CN779_ALTERNATE_DR( );
 800c3c8:	f002 feb4 	bl	800f134 <RegionCN779AlternateDr>
 800c3cc:	e7f5      	b.n	800c3ba <RegionAlternateDr+0x1e>
        EU433_ALTERNATE_DR( );
 800c3ce:	f004 f855 	bl	801047c <RegionEU433AlternateDr>
 800c3d2:	e7f2      	b.n	800c3ba <RegionAlternateDr+0x1e>
        EU868_ALTERNATE_DR( );
 800c3d4:	f004 fe86 	bl	80110e4 <RegionEU868AlternateDr>
 800c3d8:	e7ef      	b.n	800c3ba <RegionAlternateDr+0x1e>
        IN865_ALTERNATE_DR( );
 800c3da:	f005 fc6f 	bl	8011cbc <RegionIN865AlternateDr>
 800c3de:	e7ec      	b.n	800c3ba <RegionAlternateDr+0x1e>
        US915_ALTERNATE_DR( );
 800c3e0:	f007 f8fe 	bl	80135e0 <RegionUS915AlternateDr>
 800c3e4:	e7e9      	b.n	800c3ba <RegionAlternateDr+0x1e>
        RU864_ALTERNATE_DR( );
 800c3e6:	f006 fa39 	bl	801285c <RegionRU864AlternateDr>
 800c3ea:	e7e6      	b.n	800c3ba <RegionAlternateDr+0x1e>
{
 800c3ec:	2000      	movs	r0, #0
 800c3ee:	e7e4      	b.n	800c3ba <RegionAlternateDr+0x1e>

0800c3f0 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800c3f0:	b510      	push	{r4, lr}
 800c3f2:	4604      	mov	r4, r0
 800c3f4:	4608      	mov	r0, r1
 800c3f6:	4611      	mov	r1, r2
 800c3f8:	461a      	mov	r2, r3
    switch( region )
 800c3fa:	2c09      	cmp	r4, #9
 800c3fc:	d82a      	bhi.n	800c454 <RegionNextChannel+0x64>
 800c3fe:	e8df f004 	tbb	[pc, r4]
 800c402:	0905      	.short	0x0905
 800c404:	1915110d 	.word	0x1915110d
 800c408:	25211d29 	.word	0x25211d29
    {
        AS923_NEXT_CHANNEL( );
 800c40c:	9b02      	ldr	r3, [sp, #8]
 800c40e:	f000 fd1f 	bl	800ce50 <RegionAS923NextChannel>
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800c412:	bd10      	pop	{r4, pc}
        AU915_NEXT_CHANNEL( );
 800c414:	9b02      	ldr	r3, [sp, #8]
 800c416:	f001 fc39 	bl	800dc8c <RegionAU915NextChannel>
 800c41a:	e7fa      	b.n	800c412 <RegionNextChannel+0x22>
        CN470_NEXT_CHANNEL( );
 800c41c:	9b02      	ldr	r3, [sp, #8]
 800c41e:	f002 f99b 	bl	800e758 <RegionCN470NextChannel>
 800c422:	e7f6      	b.n	800c412 <RegionNextChannel+0x22>
        CN779_NEXT_CHANNEL( );
 800c424:	9b02      	ldr	r3, [sp, #8]
 800c426:	f002 fe87 	bl	800f138 <RegionCN779NextChannel>
 800c42a:	e7f2      	b.n	800c412 <RegionNextChannel+0x22>
        EU433_NEXT_CHANNEL( );
 800c42c:	9b02      	ldr	r3, [sp, #8]
 800c42e:	f004 f827 	bl	8010480 <RegionEU433NextChannel>
 800c432:	e7ee      	b.n	800c412 <RegionNextChannel+0x22>
        EU868_NEXT_CHANNEL( );
 800c434:	9b02      	ldr	r3, [sp, #8]
 800c436:	f004 fe57 	bl	80110e8 <RegionEU868NextChannel>
 800c43a:	e7ea      	b.n	800c412 <RegionNextChannel+0x22>
        IN865_NEXT_CHANNEL( );
 800c43c:	9b02      	ldr	r3, [sp, #8]
 800c43e:	f005 fc3f 	bl	8011cc0 <RegionIN865NextChannel>
 800c442:	e7e6      	b.n	800c412 <RegionNextChannel+0x22>
        US915_NEXT_CHANNEL( );
 800c444:	9b02      	ldr	r3, [sp, #8]
 800c446:	f007 f8f1 	bl	801362c <RegionUS915NextChannel>
 800c44a:	e7e2      	b.n	800c412 <RegionNextChannel+0x22>
        RU864_NEXT_CHANNEL( );
 800c44c:	9b02      	ldr	r3, [sp, #8]
 800c44e:	f006 fa07 	bl	8012860 <RegionRU864NextChannel>
 800c452:	e7de      	b.n	800c412 <RegionNextChannel+0x22>
{
 800c454:	2009      	movs	r0, #9
 800c456:	e7dc      	b.n	800c412 <RegionNextChannel+0x22>

0800c458 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800c458:	b508      	push	{r3, lr}
    switch( region )
 800c45a:	2809      	cmp	r0, #9
 800c45c:	d809      	bhi.n	800c472 <RegionSetContinuousWave+0x1a>
 800c45e:	e8df f000 	tbb	[pc, r0]
 800c462:	0905      	.short	0x0905
 800c464:	1915110d 	.word	0x1915110d
 800c468:	25211d08 	.word	0x25211d08
    {
        AS923_SET_CONTINUOUS_WAVE( );
 800c46c:	4608      	mov	r0, r1
 800c46e:	f000 fe4d 	bl	800d10c <RegionAS923SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 800c472:	bd08      	pop	{r3, pc}
        AU915_SET_CONTINUOUS_WAVE( );
 800c474:	4608      	mov	r0, r1
 800c476:	f001 fcb9 	bl	800ddec <RegionAU915SetContinuousWave>
 800c47a:	e7fa      	b.n	800c472 <RegionSetContinuousWave+0x1a>
        CN470_SET_CONTINUOUS_WAVE( );
 800c47c:	4608      	mov	r0, r1
 800c47e:	f002 f9e5 	bl	800e84c <RegionCN470SetContinuousWave>
 800c482:	e7f6      	b.n	800c472 <RegionSetContinuousWave+0x1a>
        CN779_SET_CONTINUOUS_WAVE( );
 800c484:	4608      	mov	r0, r1
 800c486:	f002 ffb5 	bl	800f3f4 <RegionCN779SetContinuousWave>
 800c48a:	e7f2      	b.n	800c472 <RegionSetContinuousWave+0x1a>
        EU433_SET_CONTINUOUS_WAVE( );
 800c48c:	4608      	mov	r0, r1
 800c48e:	f004 f955 	bl	801073c <RegionEU433SetContinuousWave>
 800c492:	e7ee      	b.n	800c472 <RegionSetContinuousWave+0x1a>
        EU868_SET_CONTINUOUS_WAVE( );
 800c494:	4608      	mov	r0, r1
 800c496:	f004 ff8f 	bl	80113b8 <RegionEU868SetContinuousWave>
 800c49a:	e7ea      	b.n	800c472 <RegionSetContinuousWave+0x1a>
        IN865_SET_CONTINUOUS_WAVE( );
 800c49c:	4608      	mov	r0, r1
 800c49e:	f005 fd6d 	bl	8011f7c <RegionIN865SetContinuousWave>
 800c4a2:	e7e6      	b.n	800c472 <RegionSetContinuousWave+0x1a>
        US915_SET_CONTINUOUS_WAVE( );
 800c4a4:	4608      	mov	r0, r1
 800c4a6:	f007 f971 	bl	801378c <RegionUS915SetContinuousWave>
 800c4aa:	e7e2      	b.n	800c472 <RegionSetContinuousWave+0x1a>
        RU864_SET_CONTINUOUS_WAVE( );
 800c4ac:	4608      	mov	r0, r1
 800c4ae:	f006 fb33 	bl	8012b18 <RegionRU864SetContinuousWave>
}
 800c4b2:	e7de      	b.n	800c472 <RegionSetContinuousWave+0x1a>

0800c4b4 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800c4b4:	b510      	push	{r4, lr}
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	4608      	mov	r0, r1
 800c4ba:	4611      	mov	r1, r2
 800c4bc:	461a      	mov	r2, r3
    switch( region )
 800c4be:	2c09      	cmp	r4, #9
 800c4c0:	d821      	bhi.n	800c506 <RegionApplyDrOffset+0x52>
 800c4c2:	e8df f004 	tbb	[pc, r4]
 800c4c6:	0805      	.short	0x0805
 800c4c8:	14110e0b 	.word	0x14110e0b
 800c4cc:	1d1a1720 	.word	0x1d1a1720
    {
        AS923_APPLY_DR_OFFSET( );
 800c4d0:	f000 fe4a 	bl	800d168 <RegionAS923ApplyDrOffset>
        default:
        {
            return dr;
        }
    }
}
 800c4d4:	bd10      	pop	{r4, pc}
        AU915_APPLY_DR_OFFSET( );
 800c4d6:	f001 fcb7 	bl	800de48 <RegionAU915ApplyDrOffset>
 800c4da:	e7fb      	b.n	800c4d4 <RegionApplyDrOffset+0x20>
        CN470_APPLY_DR_OFFSET( );
 800c4dc:	f002 f9e4 	bl	800e8a8 <RegionCN470ApplyDrOffset>
 800c4e0:	e7f8      	b.n	800c4d4 <RegionApplyDrOffset+0x20>
        CN779_APPLY_DR_OFFSET( );
 800c4e2:	f002 ffb5 	bl	800f450 <RegionCN779ApplyDrOffset>
 800c4e6:	e7f5      	b.n	800c4d4 <RegionApplyDrOffset+0x20>
        EU433_APPLY_DR_OFFSET( );
 800c4e8:	f004 f956 	bl	8010798 <RegionEU433ApplyDrOffset>
 800c4ec:	e7f2      	b.n	800c4d4 <RegionApplyDrOffset+0x20>
        EU868_APPLY_DR_OFFSET( );
 800c4ee:	f004 ff91 	bl	8011414 <RegionEU868ApplyDrOffset>
 800c4f2:	e7ef      	b.n	800c4d4 <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
 800c4f4:	f005 fd70 	bl	8011fd8 <RegionIN865ApplyDrOffset>
 800c4f8:	e7ec      	b.n	800c4d4 <RegionApplyDrOffset+0x20>
        US915_APPLY_DR_OFFSET( );
 800c4fa:	f007 f97b 	bl	80137f4 <RegionUS915ApplyDrOffset>
 800c4fe:	e7e9      	b.n	800c4d4 <RegionApplyDrOffset+0x20>
        RU864_APPLY_DR_OFFSET( );
 800c500:	f006 fb38 	bl	8012b74 <RegionRU864ApplyDrOffset>
 800c504:	e7e6      	b.n	800c4d4 <RegionApplyDrOffset+0x20>
            return dr;
 800c506:	b2c8      	uxtb	r0, r1
 800c508:	e7e4      	b.n	800c4d4 <RegionApplyDrOffset+0x20>
	...

0800c50c <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800c50c:	4800      	ldr	r0, [pc, #0]	; (800c510 <RegionGetVersion+0x4>)
 800c50e:	4770      	bx	lr
 800c510:	01000300 	.word	0x01000300

0800c514 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 800c514:	b510      	push	{r4, lr}
 800c516:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800c518:	4b05      	ldr	r3, [pc, #20]	; (800c530 <VerifyRfFreq+0x1c>)
 800c51a:	6a1b      	ldr	r3, [r3, #32]
 800c51c:	4798      	blx	r3
 800c51e:	b120      	cbz	r0, 800c52a <VerifyRfFreq+0x16>
    {
        return false;
    }

    if( ( freq < AS923_MIN_RF_FREQUENCY ) || ( freq > AS923_MAX_RF_FREQUENCY ) )
 800c520:	4b04      	ldr	r3, [pc, #16]	; (800c534 <VerifyRfFreq+0x20>)
 800c522:	4423      	add	r3, r4
 800c524:	4a04      	ldr	r2, [pc, #16]	; (800c538 <VerifyRfFreq+0x24>)
 800c526:	4293      	cmp	r3, r2
 800c528:	d800      	bhi.n	800c52c <VerifyRfFreq+0x18>
    {
        return false;
    }
    return true;
}
 800c52a:	bd10      	pop	{r4, pc}
        return false;
 800c52c:	2000      	movs	r0, #0
 800c52e:	e7fc      	b.n	800c52a <VerifyRfFreq+0x16>
 800c530:	08018400 	.word	0x08018400
 800c534:	c9763540 	.word	0xc9763540
 800c538:	00c65d40 	.word	0x00c65d40

0800c53c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800c53c:	b570      	push	{r4, r5, r6, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	4605      	mov	r5, r0
 800c542:	460c      	mov	r4, r1
    int8_t phyDr = DataratesAS923[datarate];
 800c544:	4b13      	ldr	r3, [pc, #76]	; (800c594 <GetTimeOnAir+0x58>)
 800c546:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAS923 );
 800c548:	4913      	ldr	r1, [pc, #76]	; (800c598 <GetTimeOnAir+0x5c>)
 800c54a:	f003 fb09 	bl	800fb60 <RegionCommonGetBandwidth>
 800c54e:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800c550:	2d07      	cmp	r5, #7
 800c552:	d00e      	beq.n	800c572 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800c554:	4b11      	ldr	r3, [pc, #68]	; (800c59c <GetTimeOnAir+0x60>)
 800c556:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800c558:	2001      	movs	r0, #1
 800c55a:	9003      	str	r0, [sp, #12]
 800c55c:	b2e4      	uxtb	r4, r4
 800c55e:	9402      	str	r4, [sp, #8]
 800c560:	2300      	movs	r3, #0
 800c562:	9301      	str	r3, [sp, #4]
 800c564:	2308      	movs	r3, #8
 800c566:	9300      	str	r3, [sp, #0]
 800c568:	4603      	mov	r3, r0
 800c56a:	4632      	mov	r2, r6
 800c56c:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800c56e:	b004      	add	sp, #16
 800c570:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800c572:	4b0a      	ldr	r3, [pc, #40]	; (800c59c <GetTimeOnAir+0x60>)
 800c574:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800c576:	2301      	movs	r3, #1
 800c578:	9303      	str	r3, [sp, #12]
 800c57a:	b2e4      	uxtb	r4, r4
 800c57c:	9402      	str	r4, [sp, #8]
 800c57e:	2000      	movs	r0, #0
 800c580:	9001      	str	r0, [sp, #4]
 800c582:	2305      	movs	r3, #5
 800c584:	9300      	str	r3, [sp, #0]
 800c586:	4603      	mov	r3, r0
 800c588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c58c:	fb02 f206 	mul.w	r2, r2, r6
 800c590:	47a8      	blx	r5
 800c592:	e7ec      	b.n	800c56e <GetTimeOnAir+0x32>
 800c594:	08017be4 	.word	0x08017be4
 800c598:	08017bc4 	.word	0x08017bc4
 800c59c:	08018400 	.word	0x08018400

0800c5a0 <RegionAS923GetPhyParam>:
#endif /* REGION_AS923 */

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 800c5a0:	b500      	push	{lr}
 800c5a2:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	9304      	str	r3, [sp, #16]

#if defined( REGION_AS923 )
    switch( getPhy->Attribute )
 800c5a8:	7803      	ldrb	r3, [r0, #0]
 800c5aa:	3b01      	subs	r3, #1
 800c5ac:	2b38      	cmp	r3, #56	; 0x38
 800c5ae:	d846      	bhi.n	800c63e <RegionAS923GetPhyParam+0x9e>
 800c5b0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c5b4:	003e0039 	.word	0x003e0039
 800c5b8:	00450045 	.word	0x00450045
 800c5bc:	00430045 	.word	0x00430045
 800c5c0:	00450045 	.word	0x00450045
 800c5c4:	00450045 	.word	0x00450045
 800c5c8:	00660063 	.word	0x00660063
 800c5cc:	00770069 	.word	0x00770069
 800c5d0:	00850045 	.word	0x00850045
 800c5d4:	008d0089 	.word	0x008d0089
 800c5d8:	00950091 	.word	0x00950091
 800c5dc:	009d0099 	.word	0x009d0099
 800c5e0:	00a60045 	.word	0x00a60045
 800c5e4:	00ac00a9 	.word	0x00ac00a9
 800c5e8:	00b800b2 	.word	0x00b800b2
 800c5ec:	00bf00bb 	.word	0x00bf00bb
 800c5f0:	00c500c2 	.word	0x00c500c2
 800c5f4:	004900c9 	.word	0x004900c9
 800c5f8:	00450045 	.word	0x00450045
 800c5fc:	00450045 	.word	0x00450045
 800c600:	00450045 	.word	0x00450045
 800c604:	00450045 	.word	0x00450045
 800c608:	00450045 	.word	0x00450045
 800c60c:	00450045 	.word	0x00450045
 800c610:	00cc0045 	.word	0x00cc0045
 800c614:	00d900cf 	.word	0x00d900cf
 800c618:	00450045 	.word	0x00450045
 800c61c:	00df00dc 	.word	0x00df00dc
 800c620:	00e20045 	.word	0x00e20045
 800c624:	00e8      	.short	0x00e8
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 800c626:	78c3      	ldrb	r3, [r0, #3]
 800c628:	b14b      	cbz	r3, 800c63e <RegionAS923GetPhyParam+0x9e>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 800c62a:	2302      	movs	r3, #2
 800c62c:	9304      	str	r3, [sp, #16]
 800c62e:	e006      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            }
            break;
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 800c630:	7883      	ldrb	r3, [r0, #2]
 800c632:	b123      	cbz	r3, 800c63e <RegionAS923GetPhyParam+0x9e>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 800c634:	2302      	movs	r3, #2
 800c636:	9304      	str	r3, [sp, #16]
 800c638:	e001      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            }
            break;
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 800c63a:	2302      	movs	r3, #2
 800c63c:	9304      	str	r3, [sp, #16]
        }
    }

#endif /* REGION_AS923 */
    return phyParam;
}
 800c63e:	9804      	ldr	r0, [sp, #16]
 800c640:	b007      	add	sp, #28
 800c642:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800c646:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800c64a:	f88d 3004 	strb.w	r3, [sp, #4]
 800c64e:	2307      	movs	r3, #7
 800c650:	f88d 3005 	strb.w	r3, [sp, #5]
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AS923_TX_MIN_DATARATE : AS923_DWELL_LIMIT_DATARATE ),
 800c654:	7883      	ldrb	r3, [r0, #2]
 800c656:	b103      	cbz	r3, 800c65a <RegionAS923GetPhyParam+0xba>
 800c658:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800c65a:	f88d 3006 	strb.w	r3, [sp, #6]
 800c65e:	2310      	movs	r3, #16
 800c660:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800c664:	4b4b      	ldr	r3, [pc, #300]	; (800c794 <RegionAS923GetPhyParam+0x1f4>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800c66c:	9202      	str	r2, [sp, #8]
 800c66e:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800c670:	a801      	add	r0, sp, #4
 800c672:	f003 fa51 	bl	800fb18 <RegionCommonGetNextLowerTxDr>
 800c676:	9004      	str	r0, [sp, #16]
            break;
 800c678:	e7e1      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800c67a:	2340      	movs	r3, #64	; 0x40
 800c67c:	9304      	str	r3, [sp, #16]
            break;
 800c67e:	e7de      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800c680:	2320      	movs	r3, #32
 800c682:	9304      	str	r3, [sp, #16]
            break;
 800c684:	e7db      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            if( getPhy->UplinkDwellTime == 0 )
 800c686:	7883      	ldrb	r3, [r0, #2]
 800c688:	b92b      	cbnz	r3, 800c696 <RegionAS923GetPhyParam+0xf6>
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 800c68a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c68e:	4a42      	ldr	r2, [pc, #264]	; (800c798 <RegionAS923GetPhyParam+0x1f8>)
 800c690:	5cd3      	ldrb	r3, [r2, r3]
 800c692:	9304      	str	r3, [sp, #16]
 800c694:	e7d3      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 800c696:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c69a:	4a40      	ldr	r2, [pc, #256]	; (800c79c <RegionAS923GetPhyParam+0x1fc>)
 800c69c:	5cd3      	ldrb	r3, [r2, r3]
 800c69e:	9304      	str	r3, [sp, #16]
 800c6a0:	e7cd      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            if( getPhy->UplinkDwellTime == 0 )
 800c6a2:	7883      	ldrb	r3, [r0, #2]
 800c6a4:	b92b      	cbnz	r3, 800c6b2 <RegionAS923GetPhyParam+0x112>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 800c6a6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c6aa:	4a3d      	ldr	r2, [pc, #244]	; (800c7a0 <RegionAS923GetPhyParam+0x200>)
 800c6ac:	5cd3      	ldrb	r3, [r2, r3]
 800c6ae:	9304      	str	r3, [sp, #16]
 800c6b0:	e7c5      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 800c6b2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c6b6:	4a39      	ldr	r2, [pc, #228]	; (800c79c <RegionAS923GetPhyParam+0x1fc>)
 800c6b8:	5cd3      	ldrb	r3, [r2, r3]
 800c6ba:	9304      	str	r3, [sp, #16]
 800c6bc:	e7bf      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_MAX_RX_WINDOW;
 800c6be:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800c6c2:	9304      	str	r3, [sp, #16]
            break;
 800c6c4:	e7bb      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800c6c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c6ca:	9304      	str	r3, [sp, #16]
            break;
 800c6cc:	e7b7      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800c6ce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c6d2:	9304      	str	r3, [sp, #16]
            break;
 800c6d4:	e7b3      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800c6d6:	f241 3388 	movw	r3, #5000	; 0x1388
 800c6da:	9304      	str	r3, [sp, #16]
            break;
 800c6dc:	e7af      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800c6de:	f241 7370 	movw	r3, #6000	; 0x1770
 800c6e2:	9304      	str	r3, [sp, #16]
            break;
 800c6e4:	e7ab      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800c6e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c6ea:	9304      	str	r3, [sp, #16]
            break;
 800c6ec:	e7a7      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800c6ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c6f2:	482c      	ldr	r0, [pc, #176]	; (800c7a4 <RegionAS923GetPhyParam+0x204>)
 800c6f4:	f007 ff54 	bl	80145a0 <randr>
 800c6f8:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800c6fc:	9004      	str	r0, [sp, #16]
            break;
 800c6fe:	e79e      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_RX_WND_2_FREQ - REGION_AS923_FREQ_OFFSET;
 800c700:	4b29      	ldr	r3, [pc, #164]	; (800c7a8 <RegionAS923GetPhyParam+0x208>)
 800c702:	9304      	str	r3, [sp, #16]
            break;
 800c704:	e79b      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_RX_WND_2_DR;
 800c706:	2302      	movs	r3, #2
 800c708:	9304      	str	r3, [sp, #16]
            break;
 800c70a:	e798      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800c70c:	4b21      	ldr	r3, [pc, #132]	; (800c794 <RegionAS923GetPhyParam+0x1f4>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800c714:	9304      	str	r3, [sp, #16]
            break;
 800c716:	e792      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800c718:	4b1e      	ldr	r3, [pc, #120]	; (800c794 <RegionAS923GetPhyParam+0x1f4>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800c720:	9304      	str	r3, [sp, #16]
            break;
 800c722:	e78c      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 800c724:	2310      	movs	r3, #16
 800c726:	9304      	str	r3, [sp, #16]
            break;
 800c728:	e789      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800c72a:	4b1a      	ldr	r3, [pc, #104]	; (800c794 <RegionAS923GetPhyParam+0x1f4>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	9304      	str	r3, [sp, #16]
            break;
 800c730:	e785      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 800c732:	2301      	movs	r3, #1
 800c734:	9304      	str	r3, [sp, #16]
            break;
 800c736:	e782      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_DEFAULT_DOWNLINK_DWELL_TIME;
 800c738:	2301      	movs	r3, #1
 800c73a:	9304      	str	r3, [sp, #16]
            break;
 800c73c:	e77f      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 800c73e:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800c742:	9304      	str	r3, [sp, #16]
            break;
 800c744:	e77b      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 800c746:	4b19      	ldr	r3, [pc, #100]	; (800c7ac <RegionAS923GetPhyParam+0x20c>)
 800c748:	9304      	str	r3, [sp, #16]
            break;
 800c74a:	e778      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 800c74c:	4b18      	ldr	r3, [pc, #96]	; (800c7b0 <RegionAS923GetPhyParam+0x210>)
 800c74e:	9304      	str	r3, [sp, #16]
            break;
 800c750:	e775      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 800c752:	2311      	movs	r3, #17
 800c754:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 800c758:	2302      	movs	r3, #2
 800c75a:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = AS923_RFU2_SIZE;
 800c75e:	2300      	movs	r3, #0
 800c760:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800c764:	e76b      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 800c766:	2303      	movs	r3, #3
 800c768:	9304      	str	r3, [sp, #16]
            break;
 800c76a:	e768      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ;
 800c76c:	4b10      	ldr	r3, [pc, #64]	; (800c7b0 <RegionAS923GetPhyParam+0x210>)
 800c76e:	9304      	str	r3, [sp, #16]
            break;
 800c770:	e765      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 800c772:	2303      	movs	r3, #3
 800c774:	9304      	str	r3, [sp, #16]
            break;
 800c776:	e762      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = DataratesAS923[getPhy->Datarate];
 800c778:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c77c:	4a0d      	ldr	r2, [pc, #52]	; (800c7b4 <RegionAS923GetPhyParam+0x214>)
 800c77e:	5cd3      	ldrb	r3, [r2, r3]
 800c780:	9304      	str	r3, [sp, #16]
            break;
 800c782:	e75c      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAS923 );
 800c784:	490c      	ldr	r1, [pc, #48]	; (800c7b8 <RegionAS923GetPhyParam+0x218>)
 800c786:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800c78a:	f003 f9e9 	bl	800fb60 <RegionCommonGetBandwidth>
 800c78e:	9004      	str	r0, [sp, #16]
            break;
 800c790:	e755      	b.n	800c63e <RegionAS923GetPhyParam+0x9e>
 800c792:	bf00      	nop
 800c794:	2000142c 	.word	0x2000142c
 800c798:	08017bf4 	.word	0x08017bf4
 800c79c:	08017bfc 	.word	0x08017bfc
 800c7a0:	08017c04 	.word	0x08017c04
 800c7a4:	fffffc18 	.word	0xfffffc18
 800c7a8:	3706ea00 	.word	0x3706ea00
 800c7ac:	4009999a 	.word	0x4009999a
 800c7b0:	3709f740 	.word	0x3709f740
 800c7b4:	08017be4 	.word	0x08017be4
 800c7b8:	08017bc4 	.word	0x08017bc4

0800c7bc <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800c7bc:	b530      	push	{r4, r5, lr}
 800c7be:	b083      	sub	sp, #12
#if defined( REGION_AS923 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800c7c0:	4b0b      	ldr	r3, [pc, #44]	; (800c7f0 <RegionAS923SetBandTxDone+0x34>)
 800c7c2:	681d      	ldr	r5, [r3, #0]
 800c7c4:	4b0b      	ldr	r3, [pc, #44]	; (800c7f4 <RegionAS923SetBandTxDone+0x38>)
 800c7c6:	681a      	ldr	r2, [r3, #0]
 800c7c8:	7803      	ldrb	r3, [r0, #0]
 800c7ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c7ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c7d2:	7a5b      	ldrb	r3, [r3, #9]
 800c7d4:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800c7d8:	6903      	ldr	r3, [r0, #16]
 800c7da:	9300      	str	r3, [sp, #0]
 800c7dc:	68c3      	ldr	r3, [r0, #12]
 800c7de:	7842      	ldrb	r2, [r0, #1]
 800c7e0:	6881      	ldr	r1, [r0, #8]
 800c7e2:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 800c7e6:	f002 ff83 	bl	800f6f0 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_AS923 */
}
 800c7ea:	b003      	add	sp, #12
 800c7ec:	bd30      	pop	{r4, r5, pc}
 800c7ee:	bf00      	nop
 800c7f0:	20001428 	.word	0x20001428
 800c7f4:	2000142c 	.word	0x2000142c

0800c7f8 <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 800c7f8:	b530      	push	{r4, r5, lr}
 800c7fa:	b087      	sub	sp, #28
#if defined( REGION_AS923 )
    Band_t bands[AS923_MAX_NB_BANDS] =
 800c7fc:	2364      	movs	r3, #100	; 0x64
 800c7fe:	f8ad 3000 	strh.w	r3, [sp]
 800c802:	2300      	movs	r3, #0
 800c804:	f88d 3002 	strb.w	r3, [sp, #2]
 800c808:	9301      	str	r3, [sp, #4]
 800c80a:	9302      	str	r3, [sp, #8]
 800c80c:	9303      	str	r3, [sp, #12]
 800c80e:	9304      	str	r3, [sp, #16]
 800c810:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        AS923_BAND0
    };

    switch( params->Type )
 800c814:	7a03      	ldrb	r3, [r0, #8]
 800c816:	2b01      	cmp	r3, #1
 800c818:	d032      	beq.n	800c880 <RegionAS923InitDefaults+0x88>
 800c81a:	2b02      	cmp	r3, #2
 800c81c:	d03d      	beq.n	800c89a <RegionAS923InitDefaults+0xa2>
 800c81e:	b10b      	cbz	r3, 800c824 <RegionAS923InitDefaults+0x2c>
        {
            break;
        }
    }
#endif /* REGION_AS923 */
}
 800c820:	b007      	add	sp, #28
 800c822:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800c824:	6803      	ldr	r3, [r0, #0]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d0fa      	beq.n	800c820 <RegionAS923InitDefaults+0x28>
 800c82a:	6842      	ldr	r2, [r0, #4]
 800c82c:	2a00      	cmp	r2, #0
 800c82e:	d0f7      	beq.n	800c820 <RegionAS923InitDefaults+0x28>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800c830:	491f      	ldr	r1, [pc, #124]	; (800c8b0 <RegionAS923InitDefaults+0xb8>)
 800c832:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800c834:	4c1f      	ldr	r4, [pc, #124]	; (800c8b4 <RegionAS923InitDefaults+0xbc>)
 800c836:	6022      	str	r2, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 800c838:	2218      	movs	r2, #24
 800c83a:	4669      	mov	r1, sp
 800c83c:	4618      	mov	r0, r3
 800c83e:	f007 febc 	bl	80145ba <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) AS923_LC1;
 800c842:	6823      	ldr	r3, [r4, #0]
 800c844:	4c1c      	ldr	r4, [pc, #112]	; (800c8b8 <RegionAS923InitDefaults+0xc0>)
 800c846:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c84a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) AS923_LC2;
 800c84e:	f103 050c 	add.w	r5, r3, #12
 800c852:	340c      	adds	r4, #12
 800c854:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c858:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[0].Frequency -= REGION_AS923_FREQ_OFFSET;
 800c85c:	4a17      	ldr	r2, [pc, #92]	; (800c8bc <RegionAS923InitDefaults+0xc4>)
 800c85e:	601a      	str	r2, [r3, #0]
            RegionNvmGroup2->Channels[1].Frequency -= REGION_AS923_FREQ_OFFSET;
 800c860:	f502 3243 	add.w	r2, r2, #199680	; 0x30c00
 800c864:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 800c868:	60da      	str	r2, [r3, #12]
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 800c86a:	2203      	movs	r2, #3
 800c86c:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800c870:	2201      	movs	r2, #1
 800c872:	f203 418c 	addw	r1, r3, #1164	; 0x48c
 800c876:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800c87a:	f002 ff28 	bl	800f6ce <RegionCommonChanMaskCopy>
            break;
 800c87e:	e7cf      	b.n	800c820 <RegionAS923InitDefaults+0x28>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800c880:	4b0c      	ldr	r3, [pc, #48]	; (800c8b4 <RegionAS923InitDefaults+0xbc>)
 800c882:	6818      	ldr	r0, [r3, #0]
 800c884:	2300      	movs	r3, #0
 800c886:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800c888:	6103      	str	r3, [r0, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800c88a:	2201      	movs	r2, #1
 800c88c:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800c890:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800c894:	f002 ff1b 	bl	800f6ce <RegionCommonChanMaskCopy>
            break;
 800c898:	e7c2      	b.n	800c820 <RegionAS923InitDefaults+0x28>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800c89a:	4b06      	ldr	r3, [pc, #24]	; (800c8b4 <RegionAS923InitDefaults+0xbc>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 800c8a2:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 800c8a6:	430a      	orrs	r2, r1
 800c8a8:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 800c8ac:	e7b8      	b.n	800c820 <RegionAS923InitDefaults+0x28>
 800c8ae:	bf00      	nop
 800c8b0:	20001428 	.word	0x20001428
 800c8b4:	2000142c 	.word	0x2000142c
 800c8b8:	080175b4 	.word	0x080175b4
 800c8bc:	3706ea00 	.word	0x3706ea00

0800c8c0 <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800c8c0:	b508      	push	{r3, lr}
#if defined( REGION_AS923 )
    switch( phyAttribute )
 800c8c2:	290a      	cmp	r1, #10
 800c8c4:	d84b      	bhi.n	800c95e <RegionAS923Verify+0x9e>
 800c8c6:	e8df f001 	tbb	[pc, r1]
 800c8ca:	4a06      	.short	0x4a06
 800c8cc:	0a4a4a4a 	.word	0x0a4a4a4a
 800c8d0:	404a2a20 	.word	0x404a2a20
 800c8d4:	40          	.byte	0x40
 800c8d5:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800c8d6:	6800      	ldr	r0, [r0, #0]
 800c8d8:	f7ff fe1c 	bl	800c514 <VerifyRfFreq>
 800c8dc:	e040      	b.n	800c960 <RegionAS923Verify+0xa0>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 800c8de:	7883      	ldrb	r3, [r0, #2]
 800c8e0:	b94b      	cbnz	r3, 800c8f6 <RegionAS923Verify+0x36>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE );
 800c8e2:	2207      	movs	r2, #7
 800c8e4:	2100      	movs	r1, #0
 800c8e6:	f990 0000 	ldrsb.w	r0, [r0]
 800c8ea:	f002 fe7e 	bl	800f5ea <RegionCommonValueInRange>
 800c8ee:	3800      	subs	r0, #0
 800c8f0:	bf18      	it	ne
 800c8f2:	2001      	movne	r0, #1
 800c8f4:	e034      	b.n	800c960 <RegionAS923Verify+0xa0>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE );
 800c8f6:	2207      	movs	r2, #7
 800c8f8:	2102      	movs	r1, #2
 800c8fa:	f990 0000 	ldrsb.w	r0, [r0]
 800c8fe:	f002 fe74 	bl	800f5ea <RegionCommonValueInRange>
 800c902:	3800      	subs	r0, #0
 800c904:	bf18      	it	ne
 800c906:	2001      	movne	r0, #1
 800c908:	e02a      	b.n	800c960 <RegionAS923Verify+0xa0>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800c90a:	2205      	movs	r2, #5
 800c90c:	2100      	movs	r1, #0
 800c90e:	f990 0000 	ldrsb.w	r0, [r0]
 800c912:	f002 fe6a 	bl	800f5ea <RegionCommonValueInRange>
 800c916:	3800      	subs	r0, #0
 800c918:	bf18      	it	ne
 800c91a:	2001      	movne	r0, #1
 800c91c:	e020      	b.n	800c960 <RegionAS923Verify+0xa0>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 800c91e:	7843      	ldrb	r3, [r0, #1]
 800c920:	b94b      	cbnz	r3, 800c936 <RegionAS923Verify+0x76>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 800c922:	2207      	movs	r2, #7
 800c924:	2100      	movs	r1, #0
 800c926:	f990 0000 	ldrsb.w	r0, [r0]
 800c92a:	f002 fe5e 	bl	800f5ea <RegionCommonValueInRange>
 800c92e:	3800      	subs	r0, #0
 800c930:	bf18      	it	ne
 800c932:	2001      	movne	r0, #1
 800c934:	e014      	b.n	800c960 <RegionAS923Verify+0xa0>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 800c936:	2207      	movs	r2, #7
 800c938:	2102      	movs	r1, #2
 800c93a:	f990 0000 	ldrsb.w	r0, [r0]
 800c93e:	f002 fe54 	bl	800f5ea <RegionCommonValueInRange>
 800c942:	3800      	subs	r0, #0
 800c944:	bf18      	it	ne
 800c946:	2001      	movne	r0, #1
 800c948:	e00a      	b.n	800c960 <RegionAS923Verify+0xa0>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 800c94a:	2207      	movs	r2, #7
 800c94c:	2100      	movs	r1, #0
 800c94e:	f990 0000 	ldrsb.w	r0, [r0]
 800c952:	f002 fe4a 	bl	800f5ea <RegionCommonValueInRange>
 800c956:	3800      	subs	r0, #0
 800c958:	bf18      	it	ne
 800c95a:	2001      	movne	r0, #1
 800c95c:	e000      	b.n	800c960 <RegionAS923Verify+0xa0>
{
 800c95e:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_AS923 */
}
 800c960:	bd08      	pop	{r3, pc}
	...

0800c964 <RegionAS923ChanMaskSet>:
    }
#endif /* REGION_AS923 */
}

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800c964:	b508      	push	{r3, lr}
#if defined( REGION_AS923 )
    switch( chanMaskSet->ChannelsMaskType )
 800c966:	7903      	ldrb	r3, [r0, #4]
 800c968:	b11b      	cbz	r3, 800c972 <RegionAS923ChanMaskSet+0xe>
 800c96a:	2b01      	cmp	r3, #1
 800c96c:	d00b      	beq.n	800c986 <RegionAS923ChanMaskSet+0x22>
 800c96e:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_AS923 */
}
 800c970:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800c972:	4b0a      	ldr	r3, [pc, #40]	; (800c99c <RegionAS923ChanMaskSet+0x38>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	2201      	movs	r2, #1
 800c978:	6801      	ldr	r1, [r0, #0]
 800c97a:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800c97e:	f002 fea6 	bl	800f6ce <RegionCommonChanMaskCopy>
    return true;
 800c982:	2001      	movs	r0, #1
            break;
 800c984:	e7f4      	b.n	800c970 <RegionAS923ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800c986:	4b05      	ldr	r3, [pc, #20]	; (800c99c <RegionAS923ChanMaskSet+0x38>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	2201      	movs	r2, #1
 800c98c:	6801      	ldr	r1, [r0, #0]
 800c98e:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 800c992:	f002 fe9c 	bl	800f6ce <RegionCommonChanMaskCopy>
    return true;
 800c996:	2001      	movs	r0, #1
            break;
 800c998:	e7ea      	b.n	800c970 <RegionAS923ChanMaskSet+0xc>
 800c99a:	bf00      	nop
 800c99c:	2000142c 	.word	0x2000142c

0800c9a0 <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800c9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9a2:	b083      	sub	sp, #12
 800c9a4:	460e      	mov	r6, r1
 800c9a6:	4617      	mov	r7, r2
 800c9a8:	461c      	mov	r4, r3
#if defined( REGION_AS923 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 800c9aa:	2807      	cmp	r0, #7
 800c9ac:	bfa8      	it	ge
 800c9ae:	2007      	movge	r0, #7
 800c9b0:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAS923 );
 800c9b2:	4913      	ldr	r1, [pc, #76]	; (800ca00 <RegionAS923ComputeRxWindowParameters+0x60>)
 800c9b4:	f003 f8d4 	bl	800fb60 <RegionCommonGetBandwidth>
 800c9b8:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800c9ba:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800c9be:	2b07      	cmp	r3, #7
 800c9c0:	d017      	beq.n	800c9f2 <RegionAS923ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 800c9c2:	4a0f      	ldr	r2, [pc, #60]	; (800ca00 <RegionAS923ComputeRxWindowParameters+0x60>)
 800c9c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c9c8:	4a0e      	ldr	r2, [pc, #56]	; (800ca04 <RegionAS923ComputeRxWindowParameters+0x64>)
 800c9ca:	5cd0      	ldrb	r0, [r2, r3]
 800c9cc:	f002 ff98 	bl	800f900 <RegionCommonComputeSymbolTimeLoRa>
 800c9d0:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800c9d2:	4b0d      	ldr	r3, [pc, #52]	; (800ca08 <RegionAS923ComputeRxWindowParameters+0x68>)
 800c9d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9d6:	4798      	blx	r3
 800c9d8:	4603      	mov	r3, r0
 800c9da:	f104 020c 	add.w	r2, r4, #12
 800c9de:	9201      	str	r2, [sp, #4]
 800c9e0:	3408      	adds	r4, #8
 800c9e2:	9400      	str	r4, [sp, #0]
 800c9e4:	463a      	mov	r2, r7
 800c9e6:	4631      	mov	r1, r6
 800c9e8:	4628      	mov	r0, r5
 800c9ea:	f002 ff97 	bl	800f91c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AS923 */
}
 800c9ee:	b003      	add	sp, #12
 800c9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 800c9f2:	4a04      	ldr	r2, [pc, #16]	; (800ca04 <RegionAS923ComputeRxWindowParameters+0x64>)
 800c9f4:	5cd0      	ldrb	r0, [r2, r3]
 800c9f6:	f002 ff8b 	bl	800f910 <RegionCommonComputeSymbolTimeFsk>
 800c9fa:	4605      	mov	r5, r0
 800c9fc:	e7e9      	b.n	800c9d2 <RegionAS923ComputeRxWindowParameters+0x32>
 800c9fe:	bf00      	nop
 800ca00:	08017bc4 	.word	0x08017bc4
 800ca04:	08017be4 	.word	0x08017be4
 800ca08:	08018400 	.word	0x08018400

0800ca0c <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800ca0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca10:	b08a      	sub	sp, #40	; 0x28
 800ca12:	4604      	mov	r4, r0
 800ca14:	460f      	mov	r7, r1
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800ca16:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800ca1a:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800ca1e:	4b37      	ldr	r3, [pc, #220]	; (800cafc <RegionAS923RxConfig+0xf0>)
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	4798      	blx	r3
 800ca24:	2800      	cmp	r0, #0
 800ca26:	d167      	bne.n	800caf8 <RegionAS923RxConfig+0xec>
 800ca28:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800ca2a:	7ce3      	ldrb	r3, [r4, #19]
 800ca2c:	b983      	cbnz	r3, 800ca50 <RegionAS923RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800ca2e:	4b34      	ldr	r3, [pc, #208]	; (800cb00 <RegionAS923RxConfig+0xf4>)
 800ca30:	681a      	ldr	r2, [r3, #0]
 800ca32:	7823      	ldrb	r3, [r4, #0]
 800ca34:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800ca38:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800ca3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ca40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ca44:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800ca48:	f1b8 0f00 	cmp.w	r8, #0
 800ca4c:	d100      	bne.n	800ca50 <RegionAS923RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800ca4e:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 800ca50:	4b2c      	ldr	r3, [pc, #176]	; (800cb04 <RegionAS923RxConfig+0xf8>)
 800ca52:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800ca56:	4b29      	ldr	r3, [pc, #164]	; (800cafc <RegionAS923RxConfig+0xf0>)
 800ca58:	68db      	ldr	r3, [r3, #12]
 800ca5a:	4640      	mov	r0, r8
 800ca5c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800ca5e:	2d07      	cmp	r5, #7
 800ca60:	d02b      	beq.n	800caba <RegionAS923RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800ca62:	4b26      	ldr	r3, [pc, #152]	; (800cafc <RegionAS923RxConfig+0xf0>)
 800ca64:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800ca68:	7ca3      	ldrb	r3, [r4, #18]
 800ca6a:	9309      	str	r3, [sp, #36]	; 0x24
 800ca6c:	2601      	movs	r6, #1
 800ca6e:	9608      	str	r6, [sp, #32]
 800ca70:	2300      	movs	r3, #0
 800ca72:	9307      	str	r3, [sp, #28]
 800ca74:	9306      	str	r3, [sp, #24]
 800ca76:	9305      	str	r3, [sp, #20]
 800ca78:	9304      	str	r3, [sp, #16]
 800ca7a:	9303      	str	r3, [sp, #12]
 800ca7c:	8922      	ldrh	r2, [r4, #8]
 800ca7e:	9202      	str	r2, [sp, #8]
 800ca80:	2208      	movs	r2, #8
 800ca82:	9201      	str	r2, [sp, #4]
 800ca84:	9300      	str	r3, [sp, #0]
 800ca86:	4633      	mov	r3, r6
 800ca88:	464a      	mov	r2, r9
 800ca8a:	78a1      	ldrb	r1, [r4, #2]
 800ca8c:	4630      	mov	r0, r6
 800ca8e:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800ca90:	7c63      	ldrb	r3, [r4, #17]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d02d      	beq.n	800caf2 <RegionAS923RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 800ca96:	4b1c      	ldr	r3, [pc, #112]	; (800cb08 <RegionAS923RxConfig+0xfc>)
 800ca98:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800ca9a:	4b18      	ldr	r3, [pc, #96]	; (800cafc <RegionAS923RxConfig+0xf0>)
 800ca9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca9e:	310d      	adds	r1, #13
 800caa0:	b2c9      	uxtb	r1, r1
 800caa2:	4630      	mov	r0, r6
 800caa4:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800caa6:	462a      	mov	r2, r5
 800caa8:	4641      	mov	r1, r8
 800caaa:	7ce0      	ldrb	r0, [r4, #19]
 800caac:	f003 f86a 	bl	800fb84 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800cab0:	703d      	strb	r5, [r7, #0]
    return true;
 800cab2:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 800cab4:	b00a      	add	sp, #40	; 0x28
 800cab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800caba:	4b10      	ldr	r3, [pc, #64]	; (800cafc <RegionAS923RxConfig+0xf0>)
 800cabc:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800cac0:	7ca3      	ldrb	r3, [r4, #18]
 800cac2:	9309      	str	r3, [sp, #36]	; 0x24
 800cac4:	2000      	movs	r0, #0
 800cac6:	9008      	str	r0, [sp, #32]
 800cac8:	9007      	str	r0, [sp, #28]
 800caca:	9006      	str	r0, [sp, #24]
 800cacc:	2301      	movs	r3, #1
 800cace:	9305      	str	r3, [sp, #20]
 800cad0:	9004      	str	r0, [sp, #16]
 800cad2:	9003      	str	r0, [sp, #12]
 800cad4:	8923      	ldrh	r3, [r4, #8]
 800cad6:	9302      	str	r3, [sp, #8]
 800cad8:	2305      	movs	r3, #5
 800cada:	9301      	str	r3, [sp, #4]
 800cadc:	4b0b      	ldr	r3, [pc, #44]	; (800cb0c <RegionAS923RxConfig+0x100>)
 800cade:	9300      	str	r3, [sp, #0]
 800cae0:	4603      	mov	r3, r0
 800cae2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cae6:	fb02 f209 	mul.w	r2, r2, r9
 800caea:	f24c 3150 	movw	r1, #50000	; 0xc350
 800caee:	47d0      	blx	sl
 800caf0:	e7ce      	b.n	800ca90 <RegionAS923RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 800caf2:	4b07      	ldr	r3, [pc, #28]	; (800cb10 <RegionAS923RxConfig+0x104>)
 800caf4:	5d59      	ldrb	r1, [r3, r5]
 800caf6:	e7d0      	b.n	800ca9a <RegionAS923RxConfig+0x8e>
        return false;
 800caf8:	2000      	movs	r0, #0
 800cafa:	e7db      	b.n	800cab4 <RegionAS923RxConfig+0xa8>
 800cafc:	08018400 	.word	0x08018400
 800cb00:	2000142c 	.word	0x2000142c
 800cb04:	08017be4 	.word	0x08017be4
 800cb08:	08017c04 	.word	0x08017c04
 800cb0c:	00014585 	.word	0x00014585
 800cb10:	08017bf4 	.word	0x08017bf4

0800cb14 <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800cb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb18:	b08d      	sub	sp, #52	; 0x34
 800cb1a:	4604      	mov	r4, r0
 800cb1c:	460f      	mov	r7, r1
 800cb1e:	4690      	mov	r8, r2
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 800cb20:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800cb24:	4a42      	ldr	r2, [pc, #264]	; (800cc30 <RegionAS923TxConfig+0x11c>)
 800cb26:	f912 a003 	ldrsb.w	sl, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800cb2a:	4b42      	ldr	r3, [pc, #264]	; (800cc34 <RegionAS923TxConfig+0x120>)
 800cb2c:	6819      	ldr	r1, [r3, #0]
 800cb2e:	4d42      	ldr	r5, [pc, #264]	; (800cc38 <RegionAS923TxConfig+0x124>)
 800cb30:	682b      	ldr	r3, [r5, #0]
 800cb32:	7802      	ldrb	r2, [r0, #0]
 800cb34:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800cb38:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800cb3c:	7a53      	ldrb	r3, [r2, #9]
 800cb3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cb42:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800cb46:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800cb4a:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800cb4e:	f003 f802 	bl	800fb56 <RegionCommonLimitTxPower>
 800cb52:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAS923 );
 800cb54:	4939      	ldr	r1, [pc, #228]	; (800cc3c <RegionAS923TxConfig+0x128>)
 800cb56:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800cb5a:	f003 f801 	bl	800fb60 <RegionCommonGetBandwidth>
 800cb5e:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800cb60:	68a2      	ldr	r2, [r4, #8]
 800cb62:	6861      	ldr	r1, [r4, #4]
 800cb64:	4630      	mov	r0, r6
 800cb66:	f002 ff13 	bl	800f990 <RegionCommonComputeTxPower>
 800cb6a:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800cb6c:	4b34      	ldr	r3, [pc, #208]	; (800cc40 <RegionAS923TxConfig+0x12c>)
 800cb6e:	68da      	ldr	r2, [r3, #12]
 800cb70:	6829      	ldr	r1, [r5, #0]
 800cb72:	7823      	ldrb	r3, [r4, #0]
 800cb74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cb78:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800cb7c:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800cb7e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800cb82:	2b07      	cmp	r3, #7
 800cb84:	d031      	beq.n	800cbea <RegionAS923TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800cb86:	4b2e      	ldr	r3, [pc, #184]	; (800cc40 <RegionAS923TxConfig+0x12c>)
 800cb88:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800cb8c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800cb90:	9308      	str	r3, [sp, #32]
 800cb92:	2200      	movs	r2, #0
 800cb94:	9207      	str	r2, [sp, #28]
 800cb96:	9206      	str	r2, [sp, #24]
 800cb98:	9205      	str	r2, [sp, #20]
 800cb9a:	2501      	movs	r5, #1
 800cb9c:	9504      	str	r5, [sp, #16]
 800cb9e:	9203      	str	r2, [sp, #12]
 800cba0:	2308      	movs	r3, #8
 800cba2:	9302      	str	r3, [sp, #8]
 800cba4:	9501      	str	r5, [sp, #4]
 800cba6:	f8cd a000 	str.w	sl, [sp]
 800cbaa:	464b      	mov	r3, r9
 800cbac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cbae:	4628      	mov	r0, r5
 800cbb0:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800cbb2:	4b21      	ldr	r3, [pc, #132]	; (800cc38 <RegionAS923TxConfig+0x124>)
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	7823      	ldrb	r3, [r4, #0]
 800cbb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cbbc:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800cbc0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cbc4:	f003 f80e 	bl	800fbe4 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800cbc8:	89a1      	ldrh	r1, [r4, #12]
 800cbca:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800cbce:	f7ff fcb5 	bl	800c53c <GetTimeOnAir>
 800cbd2:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800cbd6:	4b1a      	ldr	r3, [pc, #104]	; (800cc40 <RegionAS923TxConfig+0x12c>)
 800cbd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbda:	7b21      	ldrb	r1, [r4, #12]
 800cbdc:	4628      	mov	r0, r5
 800cbde:	4798      	blx	r3

    *txPower = txPowerLimited;
 800cbe0:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_AS923 */
}
 800cbe2:	2001      	movs	r0, #1
 800cbe4:	b00d      	add	sp, #52	; 0x34
 800cbe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800cbea:	4b15      	ldr	r3, [pc, #84]	; (800cc40 <RegionAS923TxConfig+0x12c>)
 800cbec:	69dd      	ldr	r5, [r3, #28]
 800cbee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cbf2:	fb03 f30a 	mul.w	r3, r3, sl
 800cbf6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800cbfa:	9208      	str	r2, [sp, #32]
 800cbfc:	f04f 0b00 	mov.w	fp, #0
 800cc00:	f8cd b01c 	str.w	fp, [sp, #28]
 800cc04:	f8cd b018 	str.w	fp, [sp, #24]
 800cc08:	f8cd b014 	str.w	fp, [sp, #20]
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	9204      	str	r2, [sp, #16]
 800cc10:	f8cd b00c 	str.w	fp, [sp, #12]
 800cc14:	2205      	movs	r2, #5
 800cc16:	9202      	str	r2, [sp, #8]
 800cc18:	f8cd b004 	str.w	fp, [sp, #4]
 800cc1c:	9300      	str	r3, [sp, #0]
 800cc1e:	464b      	mov	r3, r9
 800cc20:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800cc24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc26:	4658      	mov	r0, fp
 800cc28:	47a8      	blx	r5
        modem = MODEM_FSK;
 800cc2a:	465d      	mov	r5, fp
 800cc2c:	e7c1      	b.n	800cbb2 <RegionAS923TxConfig+0x9e>
 800cc2e:	bf00      	nop
 800cc30:	08017be4 	.word	0x08017be4
 800cc34:	20001428 	.word	0x20001428
 800cc38:	2000142c 	.word	0x2000142c
 800cc3c:	08017bc4 	.word	0x08017bc4
 800cc40:	08018400 	.word	0x08018400

0800cc44 <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800cc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc48:	b08f      	sub	sp, #60	; 0x3c
 800cc4a:	4607      	mov	r7, r0
 800cc4c:	468b      	mov	fp, r1
 800cc4e:	4692      	mov	sl, r2
 800cc50:	4699      	mov	r9, r3
    uint8_t status = 0x07;
#if defined( REGION_AS923 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800cc52:	2500      	movs	r5, #0
 800cc54:	950c      	str	r5, [sp, #48]	; 0x30
 800cc56:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800cc5a:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800cc5e:	f04f 0807 	mov.w	r8, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800cc62:	e02d      	b.n	800ccc0 <RegionAS923LinkAdrReq+0x7c>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 800cc64:	2400      	movs	r4, #0
        status = 0x07;
 800cc66:	f04f 0807 	mov.w	r8, #7
 800cc6a:	e00f      	b.n	800cc8c <RegionAS923LinkAdrReq+0x48>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800cc6c:	4a56      	ldr	r2, [pc, #344]	; (800cdc8 <RegionAS923LinkAdrReq+0x184>)
 800cc6e:	6812      	ldr	r2, [r2, #0]
 800cc70:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800cc74:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800cc78:	b132      	cbz	r2, 800cc88 <RegionAS923LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	40a2      	lsls	r2, r4
 800cc7e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800cc82:	430a      	orrs	r2, r1
 800cc84:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 800cc88:	3401      	adds	r4, #1
 800cc8a:	b2e4      	uxtb	r4, r4
 800cc8c:	2c0f      	cmp	r4, #15
 800cc8e:	d817      	bhi.n	800ccc0 <RegionAS923LinkAdrReq+0x7c>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800cc90:	2b06      	cmp	r3, #6
 800cc92:	d0eb      	beq.n	800cc6c <RegionAS923LinkAdrReq+0x28>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800cc94:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 800cc98:	4126      	asrs	r6, r4
 800cc9a:	f016 0f01 	tst.w	r6, #1
 800cc9e:	d0f3      	beq.n	800cc88 <RegionAS923LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800cca0:	4a49      	ldr	r2, [pc, #292]	; (800cdc8 <RegionAS923LinkAdrReq+0x184>)
 800cca2:	6812      	ldr	r2, [r2, #0]
 800cca4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800cca8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800ccac:	2a00      	cmp	r2, #0
 800ccae:	d1eb      	bne.n	800cc88 <RegionAS923LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800ccb0:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
 800ccb4:	e7e8      	b.n	800cc88 <RegionAS923LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800ccb6:	f04f 0806 	mov.w	r8, #6
 800ccba:	e001      	b.n	800ccc0 <RegionAS923LinkAdrReq+0x7c>
            status &= 0xFE; // Channel mask KO
 800ccbc:	f04f 0806 	mov.w	r8, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800ccc0:	7a3b      	ldrb	r3, [r7, #8]
 800ccc2:	42ab      	cmp	r3, r5
 800ccc4:	d919      	bls.n	800ccfa <RegionAS923LinkAdrReq+0xb6>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	a90c      	add	r1, sp, #48	; 0x30
 800ccca:	4428      	add	r0, r5
 800cccc:	f002 fdb0 	bl	800f830 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800ccd0:	b198      	cbz	r0, 800ccfa <RegionAS923LinkAdrReq+0xb6>
        bytesProcessed += nextIndex;
 800ccd2:	4405      	add	r5, r0
 800ccd4:	b2ed      	uxtb	r5, r5
        chMask = linkAdrParams.ChMask;
 800ccd6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800ccda:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800ccde:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800cce2:	b90b      	cbnz	r3, 800cce8 <RegionAS923LinkAdrReq+0xa4>
 800cce4:	2a00      	cmp	r2, #0
 800cce6:	d0e6      	beq.n	800ccb6 <RegionAS923LinkAdrReq+0x72>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800cce8:	1e5a      	subs	r2, r3, #1
 800ccea:	b2d2      	uxtb	r2, r2
 800ccec:	2a04      	cmp	r2, #4
 800ccee:	d9e5      	bls.n	800ccbc <RegionAS923LinkAdrReq+0x78>
 800ccf0:	2b06      	cmp	r3, #6
 800ccf2:	d9b7      	bls.n	800cc64 <RegionAS923LinkAdrReq+0x20>
            status &= 0xFE; // Channel mask KO
 800ccf4:	f04f 0806 	mov.w	r8, #6
 800ccf8:	e7e2      	b.n	800ccc0 <RegionAS923LinkAdrReq+0x7c>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800ccfa:	2302      	movs	r3, #2
 800ccfc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800cd00:	7a7b      	ldrb	r3, [r7, #9]
 800cd02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionAS923GetPhyParam( &getPhy );
 800cd06:	a80a      	add	r0, sp, #40	; 0x28
 800cd08:	f7ff fc4a 	bl	800c5a0 <RegionAS923GetPhyParam>

    linkAdrVerifyParams.Status = status;
 800cd0c:	f88d 8008 	strb.w	r8, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800cd10:	7abb      	ldrb	r3, [r7, #10]
 800cd12:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800cd16:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800cd1a:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800cd1e:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800cd22:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800cd26:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800cd2a:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800cd2e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cd32:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800cd36:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800cd3a:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800cd3e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800cd42:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 800cd46:	2310      	movs	r3, #16
 800cd48:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800cd4c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800cd50:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800cd52:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 800cd56:	2307      	movs	r3, #7
 800cd58:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800cd5c:	4a1a      	ldr	r2, [pc, #104]	; (800cdc8 <RegionAS923LinkAdrReq+0x184>)
 800cd5e:	6812      	ldr	r2, [r2, #0]
 800cd60:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 800cd62:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 800cd66:	2300      	movs	r3, #0
 800cd68:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800cd70:	ab0c      	add	r3, sp, #48	; 0x30
 800cd72:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800cd76:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800cd7a:	a801      	add	r0, sp, #4
 800cd7c:	f002 fd74 	bl	800f868 <RegionCommonLinkAdrReqVerifyParams>
 800cd80:	4604      	mov	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800cd82:	2807      	cmp	r0, #7
 800cd84:	d011      	beq.n	800cdaa <RegionAS923LinkAdrReq+0x166>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800cd86:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800cd8a:	f88b 3000 	strb.w	r3, [fp]
    *txPowOut = linkAdrParams.TxPower;
 800cd8e:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800cd92:	f88a 3000 	strb.w	r3, [sl]
    *nbRepOut = linkAdrParams.NbRep;
 800cd96:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800cd9a:	f889 3000 	strb.w	r3, [r9]
    *nbBytesParsed = bytesProcessed;
 800cd9e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cda0:	701d      	strb	r5, [r3, #0]

#endif /* REGION_AS923 */
    return status;
}
 800cda2:	4620      	mov	r0, r4
 800cda4:	b00f      	add	sp, #60	; 0x3c
 800cda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800cdaa:	4e07      	ldr	r6, [pc, #28]	; (800cdc8 <RegionAS923LinkAdrReq+0x184>)
 800cdac:	6830      	ldr	r0, [r6, #0]
 800cdae:	220c      	movs	r2, #12
 800cdb0:	2100      	movs	r1, #0
 800cdb2:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800cdb6:	f007 fc16 	bl	80145e6 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800cdba:	6833      	ldr	r3, [r6, #0]
 800cdbc:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800cdc0:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
 800cdc4:	e7df      	b.n	800cd86 <RegionAS923LinkAdrReq+0x142>
 800cdc6:	bf00      	nop
 800cdc8:	2000142c 	.word	0x2000142c

0800cdcc <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800cdcc:	b538      	push	{r3, r4, r5, lr}
 800cdce:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_AS923 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800cdd0:	6840      	ldr	r0, [r0, #4]
 800cdd2:	f7ff fb9f 	bl	800c514 <VerifyRfFreq>
 800cdd6:	b1a0      	cbz	r0, 800ce02 <RegionAS923RxParamSetupReq+0x36>
    uint8_t status = 0x07;
 800cdd8:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 800cdda:	2207      	movs	r2, #7
 800cddc:	2100      	movs	r1, #0
 800cdde:	f994 0000 	ldrsb.w	r0, [r4]
 800cde2:	f002 fc02 	bl	800f5ea <RegionCommonValueInRange>
 800cde6:	b908      	cbnz	r0, 800cdec <RegionAS923RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800cde8:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 800cdec:	2207      	movs	r2, #7
 800cdee:	2100      	movs	r1, #0
 800cdf0:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800cdf4:	f002 fbf9 	bl	800f5ea <RegionCommonValueInRange>
 800cdf8:	b908      	cbnz	r0, 800cdfe <RegionAS923RxParamSetupReq+0x32>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800cdfa:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_AS923 */
    return status;
}
 800cdfe:	4628      	mov	r0, r5
 800ce00:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800ce02:	2506      	movs	r5, #6
 800ce04:	e7e9      	b.n	800cdda <RegionAS923RxParamSetupReq+0xe>

0800ce06 <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Accept the request
    return 0;
}
 800ce06:	2000      	movs	r0, #0
 800ce08:	4770      	bx	lr
	...

0800ce0c <RegionAS923DlChannelReq>:

int8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800ce0c:	b510      	push	{r4, lr}
 800ce0e:	4604      	mov	r4, r0
    uint8_t status = 0x03;

#if defined( REGION_AS923 )
    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 800ce10:	6840      	ldr	r0, [r0, #4]
 800ce12:	f7ff fb7f 	bl	800c514 <VerifyRfFreq>
 800ce16:	b170      	cbz	r0, 800ce36 <RegionAS923DlChannelReq+0x2a>
    uint8_t status = 0x03;
 800ce18:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800ce1a:	4b0b      	ldr	r3, [pc, #44]	; (800ce48 <RegionAS923DlChannelReq+0x3c>)
 800ce1c:	681a      	ldr	r2, [r3, #0]
 800ce1e:	7823      	ldrb	r3, [r4, #0]
 800ce20:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800ce24:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800ce28:	b909      	cbnz	r1, 800ce2e <RegionAS923DlChannelReq+0x22>
    {
        status &= 0xFD;
 800ce2a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 800ce2e:	2803      	cmp	r0, #3
 800ce30:	d003      	beq.n	800ce3a <RegionAS923DlChannelReq+0x2e>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_AS923 */
    return status;
}
 800ce32:	b240      	sxtb	r0, r0
 800ce34:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800ce36:	2002      	movs	r0, #2
 800ce38:	e7ef      	b.n	800ce1a <RegionAS923DlChannelReq+0xe>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800ce3a:	6861      	ldr	r1, [r4, #4]
 800ce3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ce40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ce44:	6059      	str	r1, [r3, #4]
 800ce46:	e7f4      	b.n	800ce32 <RegionAS923DlChannelReq+0x26>
 800ce48:	2000142c 	.word	0x2000142c

0800ce4c <RegionAS923AlternateDr>:
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
#else
    return -1;
#endif /* REGION_AS923 */
}
 800ce4c:	2002      	movs	r0, #2
 800ce4e:	4770      	bx	lr

0800ce50 <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800ce50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce52:	b097      	sub	sp, #92	; 0x5c
 800ce54:	4604      	mov	r4, r0
 800ce56:	460f      	mov	r7, r1
 800ce58:	4616      	mov	r6, r2
 800ce5a:	461d      	mov	r5, r3
#if defined( REGION_AS923 )
    uint8_t nbEnabledChannels = 0;
 800ce5c:	2100      	movs	r1, #0
 800ce5e:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800ce62:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 800ce66:	9111      	str	r1, [sp, #68]	; 0x44
 800ce68:	9112      	str	r1, [sp, #72]	; 0x48
 800ce6a:	9113      	str	r1, [sp, #76]	; 0x4c
 800ce6c:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = AS923_JOIN_CHANNELS;
 800ce6e:	2303      	movs	r3, #3
 800ce70:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800ce74:	4b32      	ldr	r3, [pc, #200]	; (800cf40 <RegionAS923NextChannel+0xf0>)
 800ce76:	6818      	ldr	r0, [r3, #0]
 800ce78:	2201      	movs	r2, #1
 800ce7a:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800ce7e:	f002 fc10 	bl	800f6a2 <RegionCommonCountChannels>
 800ce82:	b938      	cbnz	r0, 800ce94 <RegionAS923NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 800ce84:	4b2e      	ldr	r3, [pc, #184]	; (800cf40 <RegionAS923NextChannel+0xf0>)
 800ce86:	681a      	ldr	r2, [r3, #0]
 800ce88:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800ce8c:	f043 0303 	orr.w	r3, r3, #3
 800ce90:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800ce94:	7a63      	ldrb	r3, [r4, #9]
 800ce96:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800ce9a:	7a23      	ldrb	r3, [r4, #8]
 800ce9c:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800cea0:	4b27      	ldr	r3, [pc, #156]	; (800cf40 <RegionAS923NextChannel+0xf0>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f503 6290 	add.w	r2, r3, #1152	; 0x480
 800cea8:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800ceaa:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800ceac:	4b25      	ldr	r3, [pc, #148]	; (800cf44 <RegionAS923NextChannel+0xf4>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 800ceb2:	2310      	movs	r3, #16
 800ceb4:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800ceb8:	f10d 030a 	add.w	r3, sp, #10
 800cebc:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800cebe:	6823      	ldr	r3, [r4, #0]
 800cec0:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800cec2:	6863      	ldr	r3, [r4, #4]
 800cec4:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800cec6:	7aa3      	ldrb	r3, [r4, #10]
 800cec8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;
 800cecc:	2301      	movs	r3, #1
 800cece:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800ced2:	ab0c      	add	r3, sp, #48	; 0x30
 800ced4:	6921      	ldr	r1, [r4, #16]
 800ced6:	68e0      	ldr	r0, [r4, #12]
 800ced8:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800cedc:	7d23      	ldrb	r3, [r4, #20]
 800cede:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800cee2:	8ae1      	ldrh	r1, [r4, #22]
 800cee4:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800cee8:	f7ff fb28 	bl	800c53c <GetTimeOnAir>
 800ceec:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800ceee:	ab03      	add	r3, sp, #12
 800cef0:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800cef2:	9601      	str	r6, [sp, #4]
 800cef4:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800cef8:	9300      	str	r3, [sp, #0]
 800cefa:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800cefe:	aa11      	add	r2, sp, #68	; 0x44
 800cf00:	4629      	mov	r1, r5
 800cf02:	a809      	add	r0, sp, #36	; 0x24
 800cf04:	f002 fdc0 	bl	800fa88 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800cf08:	4604      	mov	r4, r0
 800cf0a:	b120      	cbz	r0, 800cf16 <RegionAS923NextChannel+0xc6>
#else
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
#endif
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800cf0c:	280c      	cmp	r0, #12
 800cf0e:	d00d      	beq.n	800cf2c <RegionAS923NextChannel+0xdc>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 800cf10:	4620      	mov	r0, r4
 800cf12:	b017      	add	sp, #92	; 0x5c
 800cf14:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800cf16:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800cf1a:	3901      	subs	r1, #1
 800cf1c:	f007 fb40 	bl	80145a0 <randr>
 800cf20:	ab16      	add	r3, sp, #88	; 0x58
 800cf22:	4418      	add	r0, r3
 800cf24:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800cf28:	703b      	strb	r3, [r7, #0]
 800cf2a:	e7f1      	b.n	800cf10 <RegionAS923NextChannel+0xc0>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 800cf2c:	4b04      	ldr	r3, [pc, #16]	; (800cf40 <RegionAS923NextChannel+0xf0>)
 800cf2e:	681a      	ldr	r2, [r3, #0]
 800cf30:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800cf34:	f043 0303 	orr.w	r3, r3, #3
 800cf38:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
 800cf3c:	e7e8      	b.n	800cf10 <RegionAS923NextChannel+0xc0>
 800cf3e:	bf00      	nop
 800cf40:	2000142c 	.word	0x2000142c
 800cf44:	20001428 	.word	0x20001428

0800cf48 <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800cf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined( REGION_AS923 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800cf4a:	7905      	ldrb	r5, [r0, #4]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 800cf4c:	2d01      	cmp	r5, #1
 800cf4e:	d94b      	bls.n	800cfe8 <RegionAS923ChannelAdd+0xa0>
 800cf50:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= AS923_MAX_NB_CHANNELS )
 800cf52:	2d0f      	cmp	r5, #15
 800cf54:	d84a      	bhi.n	800cfec <RegionAS923ChannelAdd+0xa4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 800cf56:	6803      	ldr	r3, [r0, #0]
 800cf58:	7a18      	ldrb	r0, [r3, #8]
 800cf5a:	f340 0003 	sbfx	r0, r0, #0, #4
 800cf5e:	2207      	movs	r2, #7
 800cf60:	2100      	movs	r1, #0
 800cf62:	b240      	sxtb	r0, r0
 800cf64:	f002 fb41 	bl	800f5ea <RegionCommonValueInRange>
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	d039      	beq.n	800cfe0 <RegionAS923ChannelAdd+0x98>
    bool drInvalid = false;
 800cf6c:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 800cf6e:	6823      	ldr	r3, [r4, #0]
 800cf70:	7a18      	ldrb	r0, [r3, #8]
 800cf72:	f340 1003 	sbfx	r0, r0, #4, #4
 800cf76:	2207      	movs	r2, #7
 800cf78:	2100      	movs	r1, #0
 800cf7a:	b240      	sxtb	r0, r0
 800cf7c:	f002 fb35 	bl	800f5ea <RegionCommonValueInRange>
 800cf80:	b900      	cbnz	r0, 800cf84 <RegionAS923ChannelAdd+0x3c>
    {
        drInvalid = true;
 800cf82:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800cf84:	6821      	ldr	r1, [r4, #0]
 800cf86:	7a0b      	ldrb	r3, [r1, #8]
 800cf88:	f343 0203 	sbfx	r2, r3, #0, #4
 800cf8c:	b252      	sxtb	r2, r2
 800cf8e:	f343 1303 	sbfx	r3, r3, #4, #4
 800cf92:	b25b      	sxtb	r3, r3
 800cf94:	429a      	cmp	r2, r3
 800cf96:	dd00      	ble.n	800cf9a <RegionAS923ChannelAdd+0x52>
    {
        drInvalid = true;
 800cf98:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 800cf9a:	6808      	ldr	r0, [r1, #0]
 800cf9c:	f7ff faba 	bl	800c514 <VerifyRfFreq>
 800cfa0:	b300      	cbz	r0, 800cfe4 <RegionAS923ChannelAdd+0x9c>
    bool freqInvalid = false;
 800cfa2:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800cfa4:	b106      	cbz	r6, 800cfa8 <RegionAS923ChannelAdd+0x60>
 800cfa6:	bb1b      	cbnz	r3, 800cff0 <RegionAS923ChannelAdd+0xa8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800cfa8:	bb26      	cbnz	r6, 800cff4 <RegionAS923ChannelAdd+0xac>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800cfaa:	bb2b      	cbnz	r3, 800cff8 <RegionAS923ChannelAdd+0xb0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800cfac:	4f13      	ldr	r7, [pc, #76]	; (800cffc <RegionAS923ChannelAdd+0xb4>)
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	006e      	lsls	r6, r5, #1
 800cfb2:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800cfb6:	220c      	movs	r2, #12
 800cfb8:	6821      	ldr	r1, [r4, #0]
 800cfba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cfbe:	f007 fafc 	bl	80145ba <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 800cfc2:	683a      	ldr	r2, [r7, #0]
 800cfc4:	442e      	add	r6, r5
 800cfc6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cfca:	2000      	movs	r0, #0
 800cfcc:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800cfce:	2301      	movs	r3, #1
 800cfd0:	fa03 f505 	lsl.w	r5, r3, r5
 800cfd4:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800cfd8:	431d      	orrs	r5, r3
 800cfda:	f8a2 5480 	strh.w	r5, [r2, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 800cfde:	e006      	b.n	800cfee <RegionAS923ChannelAdd+0xa6>
        drInvalid = true;
 800cfe0:	2601      	movs	r6, #1
 800cfe2:	e7c4      	b.n	800cf6e <RegionAS923ChannelAdd+0x26>
            freqInvalid = true;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	e7dd      	b.n	800cfa4 <RegionAS923ChannelAdd+0x5c>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800cfe8:	2006      	movs	r0, #6
 800cfea:	e000      	b.n	800cfee <RegionAS923ChannelAdd+0xa6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800cfec:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 800cfee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800cff0:	2006      	movs	r0, #6
 800cff2:	e7fc      	b.n	800cfee <RegionAS923ChannelAdd+0xa6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800cff4:	2005      	movs	r0, #5
 800cff6:	e7fa      	b.n	800cfee <RegionAS923ChannelAdd+0xa6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800cff8:	2004      	movs	r0, #4
 800cffa:	e7f8      	b.n	800cfee <RegionAS923ChannelAdd+0xa6>
 800cffc:	2000142c 	.word	0x2000142c

0800d000 <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_AS923 )
    uint8_t id = channelRemove->ChannelId;
 800d000:	7801      	ldrb	r1, [r0, #0]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 800d002:	2901      	cmp	r1, #1
 800d004:	d911      	bls.n	800d02a <RegionAS923ChannelsRemove+0x2a>
{
 800d006:	b510      	push	{r4, lr}
    {
        return false;
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800d008:	4b09      	ldr	r3, [pc, #36]	; (800d030 <RegionAS923ChannelsRemove+0x30>)
 800d00a:	6818      	ldr	r0, [r3, #0]
 800d00c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800d010:	009c      	lsls	r4, r3, #2
 800d012:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d016:	2200      	movs	r2, #0
 800d018:	5102      	str	r2, [r0, r4]
 800d01a:	605a      	str	r2, [r3, #4]
 800d01c:	609a      	str	r2, [r3, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 800d01e:	2210      	movs	r2, #16
 800d020:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800d024:	f002 fb23 	bl	800f66e <RegionCommonChanDisable>
#else
    return false;
#endif /* REGION_AS923 */
}
 800d028:	bd10      	pop	{r4, pc}
        return false;
 800d02a:	2000      	movs	r0, #0
}
 800d02c:	4770      	bx	lr
 800d02e:	bf00      	nop
 800d030:	2000142c 	.word	0x2000142c

0800d034 <RegionAS923ApplyCFList>:
{
 800d034:	b570      	push	{r4, r5, r6, lr}
 800d036:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800d038:	2350      	movs	r3, #80	; 0x50
 800d03a:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800d03e:	7903      	ldrb	r3, [r0, #4]
 800d040:	2b10      	cmp	r3, #16
 800d042:	d135      	bne.n	800d0b0 <RegionAS923ApplyCFList+0x7c>
 800d044:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800d046:	6803      	ldr	r3, [r0, #0]
 800d048:	7bdd      	ldrb	r5, [r3, #15]
 800d04a:	2d00      	cmp	r5, #0
 800d04c:	d130      	bne.n	800d0b0 <RegionAS923ApplyCFList+0x7c>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800d04e:	2402      	movs	r4, #2
 800d050:	e01a      	b.n	800d088 <RegionAS923ApplyCFList+0x54>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800d052:	6832      	ldr	r2, [r6, #0]
 800d054:	5d53      	ldrb	r3, [r2, r5]
 800d056:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800d058:	442a      	add	r2, r5
 800d05a:	7851      	ldrb	r1, [r2, #1]
 800d05c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d060:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800d062:	7892      	ldrb	r2, [r2, #2]
 800d064:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 800d068:	2264      	movs	r2, #100	; 0x64
 800d06a:	fb02 f303 	mul.w	r3, r2, r3
 800d06e:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800d070:	2300      	movs	r3, #0
 800d072:	9304      	str	r3, [sp, #16]
 800d074:	e011      	b.n	800d09a <RegionAS923ApplyCFList+0x66>
            channelRemove.ChannelId = chanIdx;
 800d076:	f88d 4000 	strb.w	r4, [sp]
            RegionAS923ChannelsRemove( &channelRemove );
 800d07a:	4668      	mov	r0, sp
 800d07c:	f7ff ffc0 	bl	800d000 <RegionAS923ChannelsRemove>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800d080:	3503      	adds	r5, #3
 800d082:	b2ed      	uxtb	r5, r5
 800d084:	3401      	adds	r4, #1
 800d086:	b2e4      	uxtb	r4, r4
 800d088:	2c0f      	cmp	r4, #15
 800d08a:	d811      	bhi.n	800d0b0 <RegionAS923ApplyCFList+0x7c>
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 800d08c:	2c06      	cmp	r4, #6
 800d08e:	d9e0      	bls.n	800d052 <RegionAS923ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800d090:	2300      	movs	r3, #0
 800d092:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800d094:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800d098:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800d09a:	9b03      	ldr	r3, [sp, #12]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d0ea      	beq.n	800d076 <RegionAS923ApplyCFList+0x42>
            channelAdd.NewChannel = &newChannel;
 800d0a0:	ab03      	add	r3, sp, #12
 800d0a2:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800d0a4:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionAS923ChannelAdd( &channelAdd );
 800d0a8:	a801      	add	r0, sp, #4
 800d0aa:	f7ff ff4d 	bl	800cf48 <RegionAS923ChannelAdd>
 800d0ae:	e7e7      	b.n	800d080 <RegionAS923ApplyCFList+0x4c>
}
 800d0b0:	b006      	add	sp, #24
 800d0b2:	bd70      	pop	{r4, r5, r6, pc}

0800d0b4 <RegionAS923NewChannelReq>:
{
 800d0b4:	b500      	push	{lr}
 800d0b6:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800d0b8:	6803      	ldr	r3, [r0, #0]
 800d0ba:	681a      	ldr	r2, [r3, #0]
 800d0bc:	b952      	cbnz	r2, 800d0d4 <RegionAS923NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800d0be:	7903      	ldrb	r3, [r0, #4]
 800d0c0:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 800d0c4:	a801      	add	r0, sp, #4
 800d0c6:	f7ff ff9b 	bl	800d000 <RegionAS923ChannelsRemove>
 800d0ca:	b1d0      	cbz	r0, 800d102 <RegionAS923NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800d0cc:	2003      	movs	r0, #3
}
 800d0ce:	b005      	add	sp, #20
 800d0d0:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800d0d4:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800d0d6:	7903      	ldrb	r3, [r0, #4]
 800d0d8:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionAS923ChannelAdd( &channelAdd ) )
 800d0dc:	a802      	add	r0, sp, #8
 800d0de:	f7ff ff33 	bl	800cf48 <RegionAS923ChannelAdd>
 800d0e2:	2806      	cmp	r0, #6
 800d0e4:	d80b      	bhi.n	800d0fe <RegionAS923NewChannelReq+0x4a>
 800d0e6:	e8df f000 	tbb	[pc, r0]
 800d0ea:	0a04      	.short	0x0a04
 800d0ec:	060e0a0a 	.word	0x060e0a0a
 800d0f0:	08          	.byte	0x08
 800d0f1:	00          	.byte	0x00
 800d0f2:	2003      	movs	r0, #3
 800d0f4:	e7eb      	b.n	800d0ce <RegionAS923NewChannelReq+0x1a>
                status &= 0xFD;
 800d0f6:	2001      	movs	r0, #1
                break;
 800d0f8:	e7e9      	b.n	800d0ce <RegionAS923NewChannelReq+0x1a>
                status &= 0xFC;
 800d0fa:	2000      	movs	r0, #0
                break;
 800d0fc:	e7e7      	b.n	800d0ce <RegionAS923NewChannelReq+0x1a>
                status &= 0xFC;
 800d0fe:	2000      	movs	r0, #0
                break;
 800d100:	e7e5      	b.n	800d0ce <RegionAS923NewChannelReq+0x1a>
            status &= 0xFC;
 800d102:	2000      	movs	r0, #0
 800d104:	e7e3      	b.n	800d0ce <RegionAS923NewChannelReq+0x1a>
                status &= 0xFE;
 800d106:	2002      	movs	r0, #2
 800d108:	e7e1      	b.n	800d0ce <RegionAS923NewChannelReq+0x1a>
	...

0800d10c <RegionAS923SetContinuousWave>:

void RegionAS923SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800d10c:	b538      	push	{r3, r4, r5, lr}
 800d10e:	4604      	mov	r4, r0
#if defined( REGION_AS923 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800d110:	4b12      	ldr	r3, [pc, #72]	; (800d15c <RegionAS923SetContinuousWave+0x50>)
 800d112:	6819      	ldr	r1, [r3, #0]
 800d114:	4d12      	ldr	r5, [pc, #72]	; (800d160 <RegionAS923SetContinuousWave+0x54>)
 800d116:	682b      	ldr	r3, [r5, #0]
 800d118:	7802      	ldrb	r2, [r0, #0]
 800d11a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d11e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d122:	7a53      	ldrb	r3, [r2, #9]
 800d124:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d128:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800d12c:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800d130:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800d134:	f002 fd0f 	bl	800fb56 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800d138:	682a      	ldr	r2, [r5, #0]
 800d13a:	7823      	ldrb	r3, [r4, #0]
 800d13c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d140:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800d144:	68a2      	ldr	r2, [r4, #8]
 800d146:	6861      	ldr	r1, [r4, #4]
 800d148:	f002 fc22 	bl	800f990 <RegionCommonComputeTxPower>
 800d14c:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800d14e:	4b05      	ldr	r3, [pc, #20]	; (800d164 <RegionAS923SetContinuousWave+0x58>)
 800d150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d152:	89a2      	ldrh	r2, [r4, #12]
 800d154:	4628      	mov	r0, r5
 800d156:	4798      	blx	r3
#endif /* REGION_AS923 */
}
 800d158:	bd38      	pop	{r3, r4, r5, pc}
 800d15a:	bf00      	nop
 800d15c:	20001428 	.word	0x20001428
 800d160:	2000142c 	.word	0x2000142c
 800d164:	08018400 	.word	0x08018400

0800d168 <RegionAS923ApplyDrOffset>:
#if defined( REGION_AS923 )
    // Initialize minDr for a downlink dwell time configuration of 0
    int8_t minDr = DR_0;

    // Update the minDR for a downlink dwell time configuration of 1
    if( downlinkDwellTime == 1 )
 800d168:	2801      	cmp	r0, #1
 800d16a:	d00b      	beq.n	800d184 <RegionAS923ApplyDrOffset+0x1c>
    int8_t minDr = DR_0;
 800d16c:	2000      	movs	r0, #0
    {
        minDr = AS923_DWELL_LIMIT_DATARATE;
    }

    // Apply offset formula
    return MIN( DR_5, MAX( minDr, dr - EffectiveRx1DrOffsetAS923[drOffset] ) );
 800d16e:	4b06      	ldr	r3, [pc, #24]	; (800d188 <RegionAS923ApplyDrOffset+0x20>)
 800d170:	569b      	ldrsb	r3, [r3, r2]
 800d172:	1ac9      	subs	r1, r1, r3
 800d174:	4288      	cmp	r0, r1
 800d176:	bfb8      	it	lt
 800d178:	4608      	movlt	r0, r1
 800d17a:	2805      	cmp	r0, #5
 800d17c:	bfa8      	it	ge
 800d17e:	2005      	movge	r0, #5
#else
    return 0;
#endif /* REGION_AS923 */

}
 800d180:	b2c0      	uxtb	r0, r0
 800d182:	4770      	bx	lr
        minDr = AS923_DWELL_LIMIT_DATARATE;
 800d184:	2002      	movs	r0, #2
 800d186:	e7f2      	b.n	800d16e <RegionAS923ApplyDrOffset+0x6>
 800d188:	08017bec 	.word	0x08017bec

0800d18c <VerifyRfFreq>:
 */
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

static bool VerifyRfFreq( uint32_t freq )
{
 800d18c:	b510      	push	{r4, lr}
 800d18e:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800d190:	4b10      	ldr	r3, [pc, #64]	; (800d1d4 <VerifyRfFreq+0x48>)
 800d192:	6a1b      	ldr	r3, [r3, #32]
 800d194:	4798      	blx	r3
 800d196:	b1c8      	cbz	r0, 800d1cc <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < AU915_FIRST_RX1_CHANNEL ) ||
 800d198:	4b0f      	ldr	r3, [pc, #60]	; (800d1d8 <VerifyRfFreq+0x4c>)
 800d19a:	4423      	add	r3, r4
 800d19c:	4a0f      	ldr	r2, [pc, #60]	; (800d1dc <VerifyRfFreq+0x50>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d813      	bhi.n	800d1ca <VerifyRfFreq+0x3e>
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) AU915_FIRST_RX1_CHANNEL ) % ( uint32_t ) AU915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800d1a2:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 800d1a6:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 800d1aa:	f202 7245 	addw	r2, r2, #1861	; 0x745
 800d1ae:	fba2 1203 	umull	r1, r2, r2, r3
 800d1b2:	0c92      	lsrs	r2, r2, #18
 800d1b4:	490a      	ldr	r1, [pc, #40]	; (800d1e0 <VerifyRfFreq+0x54>)
 800d1b6:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
 800d1ba:	b942      	cbnz	r2, 800d1ce <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 915200000 ) ||  ( freq > 927800000 ) )
 800d1bc:	4b09      	ldr	r3, [pc, #36]	; (800d1e4 <VerifyRfFreq+0x58>)
 800d1be:	4423      	add	r3, r4
 800d1c0:	4a09      	ldr	r2, [pc, #36]	; (800d1e8 <VerifyRfFreq+0x5c>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d902      	bls.n	800d1cc <VerifyRfFreq+0x40>
    {
        return false;
 800d1c6:	2000      	movs	r0, #0
 800d1c8:	e000      	b.n	800d1cc <VerifyRfFreq+0x40>
        return false;
 800d1ca:	2000      	movs	r0, #0
    }
    return true;
}
 800d1cc:	bd10      	pop	{r4, pc}
        return false;
 800d1ce:	2000      	movs	r0, #0
 800d1d0:	e7fc      	b.n	800d1cc <VerifyRfFreq+0x40>
 800d1d2:	bf00      	nop
 800d1d4:	08018400 	.word	0x08018400
 800d1d8:	c8f78f60 	.word	0xc8f78f60
 800d1dc:	00401640 	.word	0x00401640
 800d1e0:	000927c0 	.word	0x000927c0
 800d1e4:	c9732800 	.word	0xc9732800
 800d1e8:	00c042c0 	.word	0x00c042c0

0800d1ec <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800d1ec:	b570      	push	{r4, r5, r6, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	460c      	mov	r4, r1
    int8_t phyDr = DataratesAU915[datarate];
 800d1f2:	4b0a      	ldr	r3, [pc, #40]	; (800d21c <GetTimeOnAir+0x30>)
 800d1f4:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAU915 );
 800d1f6:	490a      	ldr	r1, [pc, #40]	; (800d220 <GetTimeOnAir+0x34>)
 800d1f8:	f002 fcb2 	bl	800fb60 <RegionCommonGetBandwidth>
 800d1fc:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800d1fe:	4b09      	ldr	r3, [pc, #36]	; (800d224 <GetTimeOnAir+0x38>)
 800d200:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800d202:	2001      	movs	r0, #1
 800d204:	9003      	str	r0, [sp, #12]
 800d206:	b2e4      	uxtb	r4, r4
 800d208:	9402      	str	r4, [sp, #8]
 800d20a:	2200      	movs	r2, #0
 800d20c:	9201      	str	r2, [sp, #4]
 800d20e:	2208      	movs	r2, #8
 800d210:	9200      	str	r2, [sp, #0]
 800d212:	4603      	mov	r3, r0
 800d214:	4632      	mov	r2, r6
 800d216:	47a8      	blx	r5
}
 800d218:	b004      	add	sp, #16
 800d21a:	bd70      	pop	{r4, r5, r6, pc}
 800d21c:	08017c78 	.word	0x08017c78
 800d220:	08017c0c 	.word	0x08017c0c
 800d224:	08018400 	.word	0x08018400

0800d228 <RegionAU915GetPhyParam>:
#endif /* REGION_AU915 */

PhyParam_t RegionAU915GetPhyParam( GetPhyParams_t* getPhy )
{
 800d228:	b500      	push	{lr}
 800d22a:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800d22c:	2300      	movs	r3, #0
 800d22e:	9304      	str	r3, [sp, #16]

#if defined( REGION_AU915 )
    switch( getPhy->Attribute )
 800d230:	7803      	ldrb	r3, [r0, #0]
 800d232:	3b01      	subs	r3, #1
 800d234:	2b38      	cmp	r3, #56	; 0x38
 800d236:	d849      	bhi.n	800d2cc <RegionAU915GetPhyParam+0xa4>
 800d238:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d23c:	00410039 	.word	0x00410039
 800d240:	00480048 	.word	0x00480048
 800d244:	00460048 	.word	0x00460048
 800d248:	00480048 	.word	0x00480048
 800d24c:	00480048 	.word	0x00480048
 800d250:	00690066 	.word	0x00690066
 800d254:	007a006c 	.word	0x007a006c
 800d258:	00880048 	.word	0x00880048
 800d25c:	0090008c 	.word	0x0090008c
 800d260:	00980094 	.word	0x00980094
 800d264:	00a0009c 	.word	0x00a0009c
 800d268:	00a90048 	.word	0x00a90048
 800d26c:	00af00ac 	.word	0x00af00ac
 800d270:	00bb00b5 	.word	0x00bb00b5
 800d274:	00c200be 	.word	0x00c200be
 800d278:	00c50048 	.word	0x00c50048
 800d27c:	004c00c8 	.word	0x004c00c8
 800d280:	00480048 	.word	0x00480048
 800d284:	00480048 	.word	0x00480048
 800d288:	00480048 	.word	0x00480048
 800d28c:	00480048 	.word	0x00480048
 800d290:	00480048 	.word	0x00480048
 800d294:	00480048 	.word	0x00480048
 800d298:	00cb0048 	.word	0x00cb0048
 800d29c:	00dc00d2 	.word	0x00dc00d2
 800d2a0:	004800df 	.word	0x004800df
 800d2a4:	00e900e2 	.word	0x00e900e2
 800d2a8:	00ef00ec 	.word	0x00ef00ec
 800d2ac:	00f5      	.short	0x00f5
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0)
 800d2ae:	78c3      	ldrb	r3, [r0, #3]
 800d2b0:	b913      	cbnz	r3, 800d2b8 <RegionAU915GetPhyParam+0x90>
            {
                phyParam.Value = AU915_RX_MIN_DATARATE;
 800d2b2:	2308      	movs	r3, #8
 800d2b4:	9304      	str	r3, [sp, #16]
 800d2b6:	e009      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            }
            else
            {
                phyParam.Value = AU915_DWELL_LIMIT_DATARATE;
 800d2b8:	2302      	movs	r3, #2
 800d2ba:	9304      	str	r3, [sp, #16]
 800d2bc:	e006      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            }
            break;
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0)
 800d2be:	7883      	ldrb	r3, [r0, #2]
 800d2c0:	b123      	cbz	r3, 800d2cc <RegionAU915GetPhyParam+0xa4>
            {
                phyParam.Value = AU915_TX_MIN_DATARATE;
            }
            else
            {
                phyParam.Value = AU915_DWELL_LIMIT_DATARATE;
 800d2c2:	2302      	movs	r3, #2
 800d2c4:	9304      	str	r3, [sp, #16]
 800d2c6:	e001      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            }
            break;
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AU915_DEFAULT_DATARATE;
 800d2c8:	2302      	movs	r3, #2
 800d2ca:	9304      	str	r3, [sp, #16]
        }
    }

#endif /* REGION_AU915 */
    return phyParam;
}
 800d2cc:	9804      	ldr	r0, [sp, #16]
 800d2ce:	b007      	add	sp, #28
 800d2d0:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800d2d4:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800d2d8:	f88d 3004 	strb.w	r3, [sp, #4]
 800d2dc:	2306      	movs	r3, #6
 800d2de:	f88d 3005 	strb.w	r3, [sp, #5]
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AU915_TX_MIN_DATARATE : AU915_DWELL_LIMIT_DATARATE ),
 800d2e2:	7883      	ldrb	r3, [r0, #2]
 800d2e4:	b103      	cbz	r3, 800d2e8 <RegionAU915GetPhyParam+0xc0>
 800d2e6:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800d2e8:	f88d 3006 	strb.w	r3, [sp, #6]
 800d2ec:	2348      	movs	r3, #72	; 0x48
 800d2ee:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800d2f2:	4b50      	ldr	r3, [pc, #320]	; (800d434 <RegionAU915GetPhyParam+0x20c>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800d2fa:	9202      	str	r2, [sp, #8]
 800d2fc:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800d2fe:	a801      	add	r0, sp, #4
 800d300:	f002 fc0a 	bl	800fb18 <RegionCommonGetNextLowerTxDr>
 800d304:	9004      	str	r0, [sp, #16]
            break;
 800d306:	e7e1      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800d308:	2340      	movs	r3, #64	; 0x40
 800d30a:	9304      	str	r3, [sp, #16]
            break;
 800d30c:	e7de      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800d30e:	2320      	movs	r3, #32
 800d310:	9304      	str	r3, [sp, #16]
            break;
 800d312:	e7db      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            if( getPhy->UplinkDwellTime == 0 )
 800d314:	7883      	ldrb	r3, [r0, #2]
 800d316:	b92b      	cbnz	r3, 800d324 <RegionAU915GetPhyParam+0xfc>
                phyParam.Value = MaxPayloadOfDatarateDwell0AU915[getPhy->Datarate];
 800d318:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d31c:	4a46      	ldr	r2, [pc, #280]	; (800d438 <RegionAU915GetPhyParam+0x210>)
 800d31e:	5cd3      	ldrb	r3, [r2, r3]
 800d320:	9304      	str	r3, [sp, #16]
 800d322:	e7d3      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
                phyParam.Value = MaxPayloadOfDatarateDwell1AU915[getPhy->Datarate];
 800d324:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d328:	4a44      	ldr	r2, [pc, #272]	; (800d43c <RegionAU915GetPhyParam+0x214>)
 800d32a:	5cd3      	ldrb	r3, [r2, r3]
 800d32c:	9304      	str	r3, [sp, #16]
 800d32e:	e7cd      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            if( getPhy->UplinkDwellTime == 0)
 800d330:	7883      	ldrb	r3, [r0, #2]
 800d332:	b92b      	cbnz	r3, 800d340 <RegionAU915GetPhyParam+0x118>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AU915[getPhy->Datarate];
 800d334:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d338:	4a41      	ldr	r2, [pc, #260]	; (800d440 <RegionAU915GetPhyParam+0x218>)
 800d33a:	5cd3      	ldrb	r3, [r2, r3]
 800d33c:	9304      	str	r3, [sp, #16]
 800d33e:	e7c5      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell1AU915[getPhy->Datarate];
 800d340:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d344:	4a3f      	ldr	r2, [pc, #252]	; (800d444 <RegionAU915GetPhyParam+0x21c>)
 800d346:	5cd3      	ldrb	r3, [r2, r3]
 800d348:	9304      	str	r3, [sp, #16]
 800d34a:	e7bf      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_MAX_RX_WINDOW;
 800d34c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d350:	9304      	str	r3, [sp, #16]
            break;
 800d352:	e7bb      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800d354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d358:	9304      	str	r3, [sp, #16]
            break;
 800d35a:	e7b7      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800d35c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d360:	9304      	str	r3, [sp, #16]
            break;
 800d362:	e7b3      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800d364:	f241 3388 	movw	r3, #5000	; 0x1388
 800d368:	9304      	str	r3, [sp, #16]
            break;
 800d36a:	e7af      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800d36c:	f241 7370 	movw	r3, #6000	; 0x1770
 800d370:	9304      	str	r3, [sp, #16]
            break;
 800d372:	e7ab      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800d374:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d378:	9304      	str	r3, [sp, #16]
            break;
 800d37a:	e7a7      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800d37c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d380:	4831      	ldr	r0, [pc, #196]	; (800d448 <RegionAU915GetPhyParam+0x220>)
 800d382:	f007 f90d 	bl	80145a0 <randr>
 800d386:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800d38a:	9004      	str	r0, [sp, #16]
            break;
 800d38c:	e79e      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_RX_WND_2_FREQ;
 800d38e:	4b2f      	ldr	r3, [pc, #188]	; (800d44c <RegionAU915GetPhyParam+0x224>)
 800d390:	9304      	str	r3, [sp, #16]
            break;
 800d392:	e79b      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_RX_WND_2_DR;
 800d394:	2308      	movs	r3, #8
 800d396:	9304      	str	r3, [sp, #16]
            break;
 800d398:	e798      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800d39a:	4b26      	ldr	r3, [pc, #152]	; (800d434 <RegionAU915GetPhyParam+0x20c>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800d3a2:	9304      	str	r3, [sp, #16]
            break;
 800d3a4:	e792      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800d3a6:	4b23      	ldr	r3, [pc, #140]	; (800d434 <RegionAU915GetPhyParam+0x20c>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800d3ae:	9304      	str	r3, [sp, #16]
            break;
 800d3b0:	e78c      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_MAX_NB_CHANNELS;
 800d3b2:	2348      	movs	r3, #72	; 0x48
 800d3b4:	9304      	str	r3, [sp, #16]
            break;
 800d3b6:	e789      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800d3b8:	4b1e      	ldr	r3, [pc, #120]	; (800d434 <RegionAU915GetPhyParam+0x20c>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	9304      	str	r3, [sp, #16]
            break;
 800d3be:	e785      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_DEFAULT_UPLINK_DWELL_TIME;
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	9304      	str	r3, [sp, #16]
            break;
 800d3c4:	e782      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.fValue = AU915_DEFAULT_MAX_EIRP;
 800d3c6:	4b22      	ldr	r3, [pc, #136]	; (800d450 <RegionAU915GetPhyParam+0x228>)
 800d3c8:	9304      	str	r3, [sp, #16]
            break;
 800d3ca:	e77f      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 800d3cc:	4b21      	ldr	r3, [pc, #132]	; (800d454 <RegionAU915GetPhyParam+0x22c>)
 800d3ce:	9304      	str	r3, [sp, #16]
            break;
 800d3d0:	e77c      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800d3d2:	4a21      	ldr	r2, [pc, #132]	; (800d458 <RegionAU915GetPhyParam+0x230>)
 800d3d4:	491d      	ldr	r1, [pc, #116]	; (800d44c <RegionAU915GetPhyParam+0x224>)
 800d3d6:	7900      	ldrb	r0, [r0, #4]
 800d3d8:	f000 fdb1 	bl	800df3e <RegionBaseUSCalcDownlinkFrequency>
 800d3dc:	9004      	str	r0, [sp, #16]
            break;
 800d3de:	e775      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.BeaconFormat.BeaconSize = AU915_BEACON_SIZE;
 800d3e0:	2313      	movs	r3, #19
 800d3e2:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = AU915_RFU1_SIZE;
 800d3e6:	2303      	movs	r3, #3
 800d3e8:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = AU915_RFU2_SIZE;
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800d3f2:	e76b      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_BEACON_CHANNEL_DR;
 800d3f4:	2308      	movs	r3, #8
 800d3f6:	9304      	str	r3, [sp, #16]
            break;
 800d3f8:	e768      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_BEACON_NB_CHANNELS;
 800d3fa:	2308      	movs	r3, #8
 800d3fc:	9304      	str	r3, [sp, #16]
            break;
 800d3fe:	e765      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800d400:	4a15      	ldr	r2, [pc, #84]	; (800d458 <RegionAU915GetPhyParam+0x230>)
 800d402:	4912      	ldr	r1, [pc, #72]	; (800d44c <RegionAU915GetPhyParam+0x224>)
 800d404:	7900      	ldrb	r0, [r0, #4]
 800d406:	f000 fd9a 	bl	800df3e <RegionBaseUSCalcDownlinkFrequency>
 800d40a:	9004      	str	r0, [sp, #16]
            break;
 800d40c:	e75e      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_PING_SLOT_CHANNEL_DR;
 800d40e:	2308      	movs	r3, #8
 800d410:	9304      	str	r3, [sp, #16]
            break;
 800d412:	e75b      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_BEACON_NB_CHANNELS;
 800d414:	2308      	movs	r3, #8
 800d416:	9304      	str	r3, [sp, #16]
            break;
 800d418:	e758      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = DataratesAU915[getPhy->Datarate];
 800d41a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d41e:	4a0f      	ldr	r2, [pc, #60]	; (800d45c <RegionAU915GetPhyParam+0x234>)
 800d420:	5cd3      	ldrb	r3, [r2, r3]
 800d422:	9304      	str	r3, [sp, #16]
            break;
 800d424:	e752      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAU915 );
 800d426:	490e      	ldr	r1, [pc, #56]	; (800d460 <RegionAU915GetPhyParam+0x238>)
 800d428:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800d42c:	f002 fb98 	bl	800fb60 <RegionCommonGetBandwidth>
 800d430:	9004      	str	r0, [sp, #16]
            break;
 800d432:	e74b      	b.n	800d2cc <RegionAU915GetPhyParam+0xa4>
 800d434:	20001434 	.word	0x20001434
 800d438:	08017c88 	.word	0x08017c88
 800d43c:	08017c98 	.word	0x08017c98
 800d440:	08017ca8 	.word	0x08017ca8
 800d444:	08017cb8 	.word	0x08017cb8
 800d448:	fffffc18 	.word	0xfffffc18
 800d44c:	370870a0 	.word	0x370870a0
 800d450:	41f00000 	.word	0x41f00000
 800d454:	4009999a 	.word	0x4009999a
 800d458:	000927c0 	.word	0x000927c0
 800d45c:	08017c78 	.word	0x08017c78
 800d460:	08017c0c 	.word	0x08017c0c

0800d464 <RegionAU915SetBandTxDone>:

void RegionAU915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800d464:	b530      	push	{r4, r5, lr}
 800d466:	b083      	sub	sp, #12
#if defined( REGION_AU915 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800d468:	4b0b      	ldr	r3, [pc, #44]	; (800d498 <RegionAU915SetBandTxDone+0x34>)
 800d46a:	681d      	ldr	r5, [r3, #0]
 800d46c:	4b0b      	ldr	r3, [pc, #44]	; (800d49c <RegionAU915SetBandTxDone+0x38>)
 800d46e:	681a      	ldr	r2, [r3, #0]
 800d470:	7803      	ldrb	r3, [r0, #0]
 800d472:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d476:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d47a:	7a5b      	ldrb	r3, [r3, #9]
 800d47c:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800d480:	6903      	ldr	r3, [r0, #16]
 800d482:	9300      	str	r3, [sp, #0]
 800d484:	68c3      	ldr	r3, [r0, #12]
 800d486:	7842      	ldrb	r2, [r0, #1]
 800d488:	6881      	ldr	r1, [r0, #8]
 800d48a:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 800d48e:	f002 f92f 	bl	800f6f0 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_AU915 */
}
 800d492:	b003      	add	sp, #12
 800d494:	bd30      	pop	{r4, r5, pc}
 800d496:	bf00      	nop
 800d498:	20001430 	.word	0x20001430
 800d49c:	20001434 	.word	0x20001434

0800d4a0 <RegionAU915InitDefaults>:

void RegionAU915InitDefaults( InitDefaultsParams_t* params )
{
 800d4a0:	b510      	push	{r4, lr}
 800d4a2:	b086      	sub	sp, #24
#if defined( REGION_AU915 )
    Band_t bands[AU915_MAX_NB_BANDS] =
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	f8ad 3000 	strh.w	r3, [sp]
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	f88d 3002 	strb.w	r3, [sp, #2]
 800d4b0:	9301      	str	r3, [sp, #4]
 800d4b2:	9302      	str	r3, [sp, #8]
 800d4b4:	9303      	str	r3, [sp, #12]
 800d4b6:	9304      	str	r3, [sp, #16]
 800d4b8:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        AU915_BAND0
    };

    switch( params->Type )
 800d4bc:	7a04      	ldrb	r4, [r0, #8]
 800d4be:	b17c      	cbz	r4, 800d4e0 <RegionAU915InitDefaults+0x40>
 800d4c0:	3c01      	subs	r4, #1
 800d4c2:	b2e4      	uxtb	r4, r4
 800d4c4:	2c01      	cmp	r4, #1
 800d4c6:	f200 8082 	bhi.w	800d5ce <RegionAU915InitDefaults+0x12e>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800d4ca:	4b42      	ldr	r3, [pc, #264]	; (800d5d4 <RegionAU915InitDefaults+0x134>)
 800d4cc:	6818      	ldr	r0, [r3, #0]
 800d4ce:	2206      	movs	r2, #6
 800d4d0:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800d4d4:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800d4d8:	f002 f8f9 	bl	800f6ce <RegionCommonChanMaskCopy>

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800d4dc:	2300      	movs	r3, #0
 800d4de:	e074      	b.n	800d5ca <RegionAU915InitDefaults+0x12a>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800d4e0:	6803      	ldr	r3, [r0, #0]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d073      	beq.n	800d5ce <RegionAU915InitDefaults+0x12e>
 800d4e6:	6842      	ldr	r2, [r0, #4]
 800d4e8:	2a00      	cmp	r2, #0
 800d4ea:	d070      	beq.n	800d5ce <RegionAU915InitDefaults+0x12e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800d4ec:	493a      	ldr	r1, [pc, #232]	; (800d5d8 <RegionAU915InitDefaults+0x138>)
 800d4ee:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800d4f0:	4938      	ldr	r1, [pc, #224]	; (800d5d4 <RegionAU915InitDefaults+0x134>)
 800d4f2:	600a      	str	r2, [r1, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            RegionNvmGroup1->JoinTrialsCounter = 0;
 800d4fa:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
 800d4fe:	2218      	movs	r2, #24
 800d500:	4669      	mov	r1, sp
 800d502:	4618      	mov	r0, r3
 800d504:	f007 f859 	bl	80145ba <memcpy1>
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 800d508:	e011      	b.n	800d52e <RegionAU915InitDefaults+0x8e>
                RegionNvmGroup2->Channels[i].Frequency = 915200000 + i * 200000;
 800d50a:	4b32      	ldr	r3, [pc, #200]	; (800d5d4 <RegionAU915InitDefaults+0x134>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	4a33      	ldr	r2, [pc, #204]	; (800d5dc <RegionAU915InitDefaults+0x13c>)
 800d510:	4933      	ldr	r1, [pc, #204]	; (800d5e0 <RegionAU915InitDefaults+0x140>)
 800d512:	fb02 1204 	mla	r2, r2, r4, r1
 800d516:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800d51a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800d51e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800d522:	2250      	movs	r2, #80	; 0x50
 800d524:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800d526:	2200      	movs	r2, #0
 800d528:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 800d52a:	3401      	adds	r4, #1
 800d52c:	b2e4      	uxtb	r4, r4
 800d52e:	2c3f      	cmp	r4, #63	; 0x3f
 800d530:	d9eb      	bls.n	800d50a <RegionAU915InitDefaults+0x6a>
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 800d532:	2340      	movs	r3, #64	; 0x40
 800d534:	e013      	b.n	800d55e <RegionAU915InitDefaults+0xbe>
                RegionNvmGroup2->Channels[i].Frequency = 915900000 + ( i - ( AU915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800d536:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 800d53a:	4a26      	ldr	r2, [pc, #152]	; (800d5d4 <RegionAU915InitDefaults+0x134>)
 800d53c:	6812      	ldr	r2, [r2, #0]
 800d53e:	4c29      	ldr	r4, [pc, #164]	; (800d5e4 <RegionAU915InitDefaults+0x144>)
 800d540:	4829      	ldr	r0, [pc, #164]	; (800d5e8 <RegionAU915InitDefaults+0x148>)
 800d542:	fb04 0101 	mla	r1, r4, r1, r0
 800d546:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800d54a:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800d54e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_6 << 4 ) | DR_6;
 800d552:	2166      	movs	r1, #102	; 0x66
 800d554:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800d556:	2100      	movs	r1, #0
 800d558:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 800d55a:	3301      	adds	r3, #1
 800d55c:	b2db      	uxtb	r3, r3
 800d55e:	2b47      	cmp	r3, #71	; 0x47
 800d560:	d9e9      	bls.n	800d536 <RegionAU915InitDefaults+0x96>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800d562:	4c1c      	ldr	r4, [pc, #112]	; (800d5d4 <RegionAU915InitDefaults+0x134>)
 800d564:	6820      	ldr	r0, [r4, #0]
 800d566:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d56a:	f8a0 348c 	strh.w	r3, [r0, #1164]	; 0x48c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800d56e:	f8a0 348e 	strh.w	r3, [r0, #1166]	; 0x48e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800d572:	f8a0 3490 	strh.w	r3, [r0, #1168]	; 0x490
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800d576:	f8a0 3492 	strh.w	r3, [r0, #1170]	; 0x492
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800d57a:	23ff      	movs	r3, #255	; 0xff
 800d57c:	f8a0 3494 	strh.w	r3, [r0, #1172]	; 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800d580:	2300      	movs	r3, #0
 800d582:	f8a0 3496 	strh.w	r3, [r0, #1174]	; 0x496
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800d586:	2206      	movs	r2, #6
 800d588:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800d58c:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800d590:	f002 f89d 	bl	800f6ce <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800d594:	4b10      	ldr	r3, [pc, #64]	; (800d5d8 <RegionAU915InitDefaults+0x138>)
 800d596:	6818      	ldr	r0, [r3, #0]
 800d598:	6821      	ldr	r1, [r4, #0]
 800d59a:	2206      	movs	r2, #6
 800d59c:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 800d5a0:	3090      	adds	r0, #144	; 0x90
 800d5a2:	f002 f894 	bl	800f6ce <RegionCommonChanMaskCopy>
            break;
 800d5a6:	e012      	b.n	800d5ce <RegionAU915InitDefaults+0x12e>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800d5a8:	4a0b      	ldr	r2, [pc, #44]	; (800d5d8 <RegionAU915InitDefaults+0x138>)
 800d5aa:	6811      	ldr	r1, [r2, #0]
 800d5ac:	4a09      	ldr	r2, [pc, #36]	; (800d5d4 <RegionAU915InitDefaults+0x134>)
 800d5ae:	6812      	ldr	r2, [r2, #0]
 800d5b0:	f503 7010 	add.w	r0, r3, #576	; 0x240
 800d5b4:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800d5b8:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800d5bc:	f831 4010 	ldrh.w	r4, [r1, r0, lsl #1]
 800d5c0:	4022      	ands	r2, r4
 800d5c2:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	b2db      	uxtb	r3, r3
 800d5ca:	2b05      	cmp	r3, #5
 800d5cc:	d9ec      	bls.n	800d5a8 <RegionAU915InitDefaults+0x108>
        {
            break;
        }
    }
#endif /* REGION_AU915 */
}
 800d5ce:	b006      	add	sp, #24
 800d5d0:	bd10      	pop	{r4, pc}
 800d5d2:	bf00      	nop
 800d5d4:	20001434 	.word	0x20001434
 800d5d8:	20001430 	.word	0x20001430
 800d5dc:	00030d40 	.word	0x00030d40
 800d5e0:	368cd800 	.word	0x368cd800
 800d5e4:	00186a00 	.word	0x00186a00
 800d5e8:	36978660 	.word	0x36978660

0800d5ec <RegionAU915Verify>:

bool RegionAU915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800d5ec:	b508      	push	{r3, lr}
#if defined( REGION_AU915 )
    switch( phyAttribute )
 800d5ee:	290a      	cmp	r1, #10
 800d5f0:	d841      	bhi.n	800d676 <RegionAU915Verify+0x8a>
 800d5f2:	e8df f001 	tbb	[pc, r1]
 800d5f6:	4006      	.short	0x4006
 800d5f8:	0a404040 	.word	0x0a404040
 800d5fc:	3640200a 	.word	0x3640200a
 800d600:	36          	.byte	0x36
 800d601:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800d602:	6800      	ldr	r0, [r0, #0]
 800d604:	f7ff fdc2 	bl	800d18c <VerifyRfFreq>
 800d608:	e036      	b.n	800d678 <RegionAU915Verify+0x8c>
        }
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 800d60a:	7883      	ldrb	r3, [r0, #2]
 800d60c:	b94b      	cbnz	r3, 800d622 <RegionAU915Verify+0x36>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_TX_MIN_DATARATE, AU915_TX_MAX_DATARATE );
 800d60e:	2206      	movs	r2, #6
 800d610:	2100      	movs	r1, #0
 800d612:	f990 0000 	ldrsb.w	r0, [r0]
 800d616:	f001 ffe8 	bl	800f5ea <RegionCommonValueInRange>
 800d61a:	3800      	subs	r0, #0
 800d61c:	bf18      	it	ne
 800d61e:	2001      	movne	r0, #1
 800d620:	e02a      	b.n	800d678 <RegionAU915Verify+0x8c>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_DWELL_LIMIT_DATARATE, AU915_TX_MAX_DATARATE );
 800d622:	2206      	movs	r2, #6
 800d624:	2102      	movs	r1, #2
 800d626:	f990 0000 	ldrsb.w	r0, [r0]
 800d62a:	f001 ffde 	bl	800f5ea <RegionCommonValueInRange>
 800d62e:	3800      	subs	r0, #0
 800d630:	bf18      	it	ne
 800d632:	2001      	movne	r0, #1
 800d634:	e020      	b.n	800d678 <RegionAU915Verify+0x8c>
            }
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 800d636:	7883      	ldrb	r3, [r0, #2]
 800d638:	b94b      	cbnz	r3, 800d64e <RegionAU915Verify+0x62>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE );
 800d63a:	220d      	movs	r2, #13
 800d63c:	2108      	movs	r1, #8
 800d63e:	f990 0000 	ldrsb.w	r0, [r0]
 800d642:	f001 ffd2 	bl	800f5ea <RegionCommonValueInRange>
 800d646:	3800      	subs	r0, #0
 800d648:	bf18      	it	ne
 800d64a:	2001      	movne	r0, #1
 800d64c:	e014      	b.n	800d678 <RegionAU915Verify+0x8c>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_DWELL_LIMIT_DATARATE, AU915_RX_MAX_DATARATE );
 800d64e:	220d      	movs	r2, #13
 800d650:	2102      	movs	r1, #2
 800d652:	f990 0000 	ldrsb.w	r0, [r0]
 800d656:	f001 ffc8 	bl	800f5ea <RegionCommonValueInRange>
 800d65a:	3800      	subs	r0, #0
 800d65c:	bf18      	it	ne
 800d65e:	2001      	movne	r0, #1
 800d660:	e00a      	b.n	800d678 <RegionAU915Verify+0x8c>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AU915_MAX_TX_POWER, AU915_MIN_TX_POWER );
 800d662:	220e      	movs	r2, #14
 800d664:	2100      	movs	r1, #0
 800d666:	f990 0000 	ldrsb.w	r0, [r0]
 800d66a:	f001 ffbe 	bl	800f5ea <RegionCommonValueInRange>
 800d66e:	3800      	subs	r0, #0
 800d670:	bf18      	it	ne
 800d672:	2001      	movne	r0, #1
 800d674:	e000      	b.n	800d678 <RegionAU915Verify+0x8c>
{
 800d676:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_AU915 */
}
 800d678:	bd08      	pop	{r3, pc}
	...

0800d67c <RegionAU915ApplyCFList>:

void RegionAU915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_AU915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800d67c:	7903      	ldrb	r3, [r0, #4]
 800d67e:	2b10      	cmp	r3, #16
 800d680:	d134      	bne.n	800d6ec <RegionAU915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800d682:	6803      	ldr	r3, [r0, #0]
 800d684:	7bdb      	ldrb	r3, [r3, #15]
 800d686:	2b01      	cmp	r3, #1
 800d688:	d130      	bne.n	800d6ec <RegionAU915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800d68a:	2200      	movs	r2, #0
 800d68c:	4613      	mov	r3, r2
 800d68e:	2a04      	cmp	r2, #4
 800d690:	d82b      	bhi.n	800d6ea <RegionAU915ApplyCFList+0x6e>
{
 800d692:	b4f0      	push	{r4, r5, r6, r7}
 800d694:	e014      	b.n	800d6c0 <RegionAU915ApplyCFList+0x44>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800d696:	b2e4      	uxtb	r4, r4
 800d698:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800d69c:	4c14      	ldr	r4, [pc, #80]	; (800d6f0 <RegionAU915ApplyCFList+0x74>)
 800d69e:	6826      	ldr	r6, [r4, #0]
 800d6a0:	f501 7410 	add.w	r4, r1, #576	; 0x240
 800d6a4:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
 800d6a8:	3148      	adds	r1, #72	; 0x48
 800d6aa:	f836 5011 	ldrh.w	r5, [r6, r1, lsl #1]
 800d6ae:	402c      	ands	r4, r5
 800d6b0:	f826 4011 	strh.w	r4, [r6, r1, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	b2db      	uxtb	r3, r3
 800d6b8:	3202      	adds	r2, #2
 800d6ba:	b2d2      	uxtb	r2, r2
 800d6bc:	2b04      	cmp	r3, #4
 800d6be:	d812      	bhi.n	800d6e6 <RegionAU915ApplyCFList+0x6a>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800d6c0:	6804      	ldr	r4, [r0, #0]
 800d6c2:	490c      	ldr	r1, [pc, #48]	; (800d6f4 <RegionAU915ApplyCFList+0x78>)
 800d6c4:	680d      	ldr	r5, [r1, #0]
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	5ca4      	ldrb	r4, [r4, r2]
 800d6ca:	f503 7710 	add.w	r7, r3, #576	; 0x240
 800d6ce:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800d6d2:	6806      	ldr	r6, [r0, #0]
 800d6d4:	4416      	add	r6, r2
 800d6d6:	7876      	ldrb	r6, [r6, #1]
 800d6d8:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800d6dc:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        if( chMaskItr == 4 )
 800d6e0:	2b04      	cmp	r3, #4
 800d6e2:	d1db      	bne.n	800d69c <RegionAU915ApplyCFList+0x20>
 800d6e4:	e7d7      	b.n	800d696 <RegionAU915ApplyCFList+0x1a>
    }
#endif /* REGION_AU915 */
}
 800d6e6:	bcf0      	pop	{r4, r5, r6, r7}
 800d6e8:	4770      	bx	lr
 800d6ea:	4770      	bx	lr
 800d6ec:	4770      	bx	lr
 800d6ee:	bf00      	nop
 800d6f0:	20001430 	.word	0x20001430
 800d6f4:	20001434 	.word	0x20001434

0800d6f8 <RegionAU915ChanMaskSet>:

bool RegionAU915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800d6f8:	b538      	push	{r3, r4, r5, lr}
#if defined( REGION_AU915 )
    switch( chanMaskSet->ChannelsMaskType )
 800d6fa:	7904      	ldrb	r4, [r0, #4]
 800d6fc:	b11c      	cbz	r4, 800d706 <RegionAU915ChanMaskSet+0xe>
 800d6fe:	2c01      	cmp	r4, #1
 800d700:	d025      	beq.n	800d74e <RegionAU915ChanMaskSet+0x56>
 800d702:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_AU915 */
}
 800d704:	bd38      	pop	{r3, r4, r5, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800d706:	4d17      	ldr	r5, [pc, #92]	; (800d764 <RegionAU915ChanMaskSet+0x6c>)
 800d708:	682b      	ldr	r3, [r5, #0]
 800d70a:	2206      	movs	r2, #6
 800d70c:	6801      	ldr	r1, [r0, #0]
 800d70e:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800d712:	f001 ffdc 	bl	800f6ce <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800d716:	682d      	ldr	r5, [r5, #0]
 800d718:	f895 3494 	ldrb.w	r3, [r5, #1172]	; 0x494
 800d71c:	f8a5 3494 	strh.w	r3, [r5, #1172]	; 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800d720:	2300      	movs	r3, #0
 800d722:	f8a5 3496 	strh.w	r3, [r5, #1174]	; 0x496
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800d726:	2c05      	cmp	r4, #5
 800d728:	d80f      	bhi.n	800d74a <RegionAU915ChanMaskSet+0x52>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800d72a:	4b0f      	ldr	r3, [pc, #60]	; (800d768 <RegionAU915ChanMaskSet+0x70>)
 800d72c:	681a      	ldr	r2, [r3, #0]
 800d72e:	f504 7310 	add.w	r3, r4, #576	; 0x240
 800d732:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 800d736:	f104 0148 	add.w	r1, r4, #72	; 0x48
 800d73a:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 800d73e:	4003      	ands	r3, r0
 800d740:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800d744:	3401      	adds	r4, #1
 800d746:	b2e4      	uxtb	r4, r4
 800d748:	e7ed      	b.n	800d726 <RegionAU915ChanMaskSet+0x2e>
    return true;
 800d74a:	2001      	movs	r0, #1
 800d74c:	e7da      	b.n	800d704 <RegionAU915ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800d74e:	4b05      	ldr	r3, [pc, #20]	; (800d764 <RegionAU915ChanMaskSet+0x6c>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	2206      	movs	r2, #6
 800d754:	6801      	ldr	r1, [r0, #0]
 800d756:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 800d75a:	f001 ffb8 	bl	800f6ce <RegionCommonChanMaskCopy>
    return true;
 800d75e:	2001      	movs	r0, #1
            break;
 800d760:	e7d0      	b.n	800d704 <RegionAU915ChanMaskSet+0xc>
 800d762:	bf00      	nop
 800d764:	20001434 	.word	0x20001434
 800d768:	20001430 	.word	0x20001430

0800d76c <RegionAU915ComputeRxWindowParameters>:

void RegionAU915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800d76c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d76e:	b083      	sub	sp, #12
 800d770:	460e      	mov	r6, r1
 800d772:	4617      	mov	r7, r2
 800d774:	461c      	mov	r4, r3
#if defined( REGION_AU915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AU915_RX_MAX_DATARATE );
 800d776:	280d      	cmp	r0, #13
 800d778:	bfa8      	it	ge
 800d77a:	200d      	movge	r0, #13
 800d77c:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAU915 );
 800d77e:	4d0f      	ldr	r5, [pc, #60]	; (800d7bc <RegionAU915ComputeRxWindowParameters+0x50>)
 800d780:	4629      	mov	r1, r5
 800d782:	f002 f9ed 	bl	800fb60 <RegionCommonGetBandwidth>
 800d786:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 800d788:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d78c:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800d790:	4a0b      	ldr	r2, [pc, #44]	; (800d7c0 <RegionAU915ComputeRxWindowParameters+0x54>)
 800d792:	5cd0      	ldrb	r0, [r2, r3]
 800d794:	f002 f8b4 	bl	800f900 <RegionCommonComputeSymbolTimeLoRa>
 800d798:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800d79a:	4b0a      	ldr	r3, [pc, #40]	; (800d7c4 <RegionAU915ComputeRxWindowParameters+0x58>)
 800d79c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d79e:	4798      	blx	r3
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	f104 020c 	add.w	r2, r4, #12
 800d7a6:	9201      	str	r2, [sp, #4]
 800d7a8:	3408      	adds	r4, #8
 800d7aa:	9400      	str	r4, [sp, #0]
 800d7ac:	463a      	mov	r2, r7
 800d7ae:	4631      	mov	r1, r6
 800d7b0:	4628      	mov	r0, r5
 800d7b2:	f002 f8b3 	bl	800f91c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AU915 */
}
 800d7b6:	b003      	add	sp, #12
 800d7b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7ba:	bf00      	nop
 800d7bc:	08017c0c 	.word	0x08017c0c
 800d7c0:	08017c78 	.word	0x08017c78
 800d7c4:	08018400 	.word	0x08018400

0800d7c8 <RegionAU915RxConfig>:

bool RegionAU915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800d7c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d7cc:	b08b      	sub	sp, #44	; 0x2c
 800d7ce:	4604      	mov	r4, r0
 800d7d0:	460e      	mov	r6, r1
#if defined( REGION_AU915 )
    int8_t dr = rxConfig->Datarate;
 800d7d2:	f990 7001 	ldrsb.w	r7, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800d7d6:	6845      	ldr	r5, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800d7d8:	4b22      	ldr	r3, [pc, #136]	; (800d864 <RegionAU915RxConfig+0x9c>)
 800d7da:	685b      	ldr	r3, [r3, #4]
 800d7dc:	4798      	blx	r3
 800d7de:	2800      	cmp	r0, #0
 800d7e0:	d13d      	bne.n	800d85e <RegionAU915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800d7e2:	7ce3      	ldrb	r3, [r4, #19]
 800d7e4:	b933      	cbnz	r3, 800d7f4 <RegionAU915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = AU915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * AU915_STEPWIDTH_RX1_CHANNEL;
 800d7e6:	7825      	ldrb	r5, [r4, #0]
 800d7e8:	f005 0507 	and.w	r5, r5, #7
 800d7ec:	4a1e      	ldr	r2, [pc, #120]	; (800d868 <RegionAU915RxConfig+0xa0>)
 800d7ee:	4b1f      	ldr	r3, [pc, #124]	; (800d86c <RegionAU915RxConfig+0xa4>)
 800d7f0:	fb02 3505 	mla	r5, r2, r5, r3
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAU915[dr];
 800d7f4:	4b1e      	ldr	r3, [pc, #120]	; (800d870 <RegionAU915RxConfig+0xa8>)
 800d7f6:	f913 9007 	ldrsb.w	r9, [r3, r7]

    Radio.SetChannel( frequency );
 800d7fa:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800d864 <RegionAU915RxConfig+0x9c>
 800d7fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d802:	4628      	mov	r0, r5
 800d804:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800d806:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800d80a:	7ca3      	ldrb	r3, [r4, #18]
 800d80c:	9309      	str	r3, [sp, #36]	; 0x24
 800d80e:	2001      	movs	r0, #1
 800d810:	9008      	str	r0, [sp, #32]
 800d812:	2200      	movs	r2, #0
 800d814:	9207      	str	r2, [sp, #28]
 800d816:	9206      	str	r2, [sp, #24]
 800d818:	9205      	str	r2, [sp, #20]
 800d81a:	9204      	str	r2, [sp, #16]
 800d81c:	9203      	str	r2, [sp, #12]
 800d81e:	8923      	ldrh	r3, [r4, #8]
 800d820:	9302      	str	r3, [sp, #8]
 800d822:	2308      	movs	r3, #8
 800d824:	9301      	str	r3, [sp, #4]
 800d826:	9200      	str	r2, [sp, #0]
 800d828:	4603      	mov	r3, r0
 800d82a:	464a      	mov	r2, r9
 800d82c:	78a1      	ldrb	r1, [r4, #2]
 800d82e:	47c0      	blx	r8

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800d830:	7c63      	ldrb	r3, [r4, #17]
 800d832:	b18b      	cbz	r3, 800d858 <RegionAU915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AU915[dr];
 800d834:	4b0f      	ldr	r3, [pc, #60]	; (800d874 <RegionAU915RxConfig+0xac>)
 800d836:	5dd9      	ldrb	r1, [r3, r7]
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
    }
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800d838:	4b0a      	ldr	r3, [pc, #40]	; (800d864 <RegionAU915RxConfig+0x9c>)
 800d83a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d83c:	310d      	adds	r1, #13
 800d83e:	b2c9      	uxtb	r1, r1
 800d840:	2001      	movs	r0, #1
 800d842:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800d844:	463a      	mov	r2, r7
 800d846:	4629      	mov	r1, r5
 800d848:	7ce0      	ldrb	r0, [r4, #19]
 800d84a:	f002 f99b 	bl	800fb84 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800d84e:	7037      	strb	r7, [r6, #0]
    return true;
 800d850:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_AU915 */
}
 800d852:	b00b      	add	sp, #44	; 0x2c
 800d854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
 800d858:	4b07      	ldr	r3, [pc, #28]	; (800d878 <RegionAU915RxConfig+0xb0>)
 800d85a:	5dd9      	ldrb	r1, [r3, r7]
 800d85c:	e7ec      	b.n	800d838 <RegionAU915RxConfig+0x70>
        return false;
 800d85e:	2000      	movs	r0, #0
 800d860:	e7f7      	b.n	800d852 <RegionAU915RxConfig+0x8a>
 800d862:	bf00      	nop
 800d864:	08018400 	.word	0x08018400
 800d868:	000927c0 	.word	0x000927c0
 800d86c:	370870a0 	.word	0x370870a0
 800d870:	08017c78 	.word	0x08017c78
 800d874:	08017ca8 	.word	0x08017ca8
 800d878:	08017c88 	.word	0x08017c88

0800d87c <RegionAU915TxConfig>:

bool RegionAU915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800d87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d880:	b08d      	sub	sp, #52	; 0x34
 800d882:	4604      	mov	r4, r0
 800d884:	910b      	str	r1, [sp, #44]	; 0x2c
 800d886:	4690      	mov	r8, r2
#if defined( REGION_AU915 )
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 800d888:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d88c:	4a31      	ldr	r2, [pc, #196]	; (800d954 <RegionAU915TxConfig+0xd8>)
 800d88e:	f912 b003 	ldrsb.w	fp, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800d892:	4b31      	ldr	r3, [pc, #196]	; (800d958 <RegionAU915TxConfig+0xdc>)
 800d894:	6819      	ldr	r1, [r3, #0]
 800d896:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d960 <RegionAU915TxConfig+0xe4>
 800d89a:	f8da 3000 	ldr.w	r3, [sl]
 800d89e:	7802      	ldrb	r2, [r0, #0]
 800d8a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d8a4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d8a8:	7a53      	ldrb	r3, [r2, #9]
 800d8aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d8ae:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800d8b2:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800d8b6:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800d8ba:	f002 f94c 	bl	800fb56 <RegionCommonLimitTxPower>
 800d8be:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAU915 );
 800d8c0:	4926      	ldr	r1, [pc, #152]	; (800d95c <RegionAU915TxConfig+0xe0>)
 800d8c2:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d8c6:	f002 f94b 	bl	800fb60 <RegionCommonGetBandwidth>
 800d8ca:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800d8cc:	68a2      	ldr	r2, [r4, #8]
 800d8ce:	6861      	ldr	r1, [r4, #4]
 800d8d0:	4630      	mov	r0, r6
 800d8d2:	f002 f85d 	bl	800f990 <RegionCommonComputeTxPower>
 800d8d6:	4607      	mov	r7, r0

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800d8d8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800d964 <RegionAU915TxConfig+0xe8>
 800d8dc:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800d8e0:	f8da 1000 	ldr.w	r1, [sl]
 800d8e4:	7823      	ldrb	r3, [r4, #0]
 800d8e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d8ea:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800d8ee:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800d8f0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800d8f4:	9308      	str	r3, [sp, #32]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	9207      	str	r2, [sp, #28]
 800d8fa:	9206      	str	r2, [sp, #24]
 800d8fc:	9205      	str	r2, [sp, #20]
 800d8fe:	2501      	movs	r5, #1
 800d900:	9504      	str	r5, [sp, #16]
 800d902:	9203      	str	r2, [sp, #12]
 800d904:	2308      	movs	r3, #8
 800d906:	9302      	str	r3, [sp, #8]
 800d908:	9501      	str	r5, [sp, #4]
 800d90a:	f8cd b000 	str.w	fp, [sp]
 800d90e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d910:	4639      	mov	r1, r7
 800d912:	4628      	mov	r0, r5
 800d914:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800d918:	47b8      	blx	r7
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800d91a:	f8da 2000 	ldr.w	r2, [sl]
 800d91e:	7823      	ldrb	r3, [r4, #0]
 800d920:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d924:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800d928:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d92c:	f002 f95a 	bl	800fbe4 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800d930:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 800d934:	7b21      	ldrb	r1, [r4, #12]
 800d936:	4628      	mov	r0, r5
 800d938:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800d93a:	89a1      	ldrh	r1, [r4, #12]
 800d93c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d940:	f7ff fc54 	bl	800d1ec <GetTimeOnAir>
 800d944:	f8c8 0000 	str.w	r0, [r8]

    *txPower = txPowerLimited;
 800d948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d94a:	701e      	strb	r6, [r3, #0]
    return true;
#else
    return false;
#endif /* REGION_AU915 */
}
 800d94c:	4628      	mov	r0, r5
 800d94e:	b00d      	add	sp, #52	; 0x34
 800d950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d954:	08017c78 	.word	0x08017c78
 800d958:	20001430 	.word	0x20001430
 800d95c:	08017c0c 	.word	0x08017c0c
 800d960:	20001434 	.word	0x20001434
 800d964:	08018400 	.word	0x08018400

0800d968 <RegionAU915LinkAdrReq>:

uint8_t RegionAU915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800d968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d96c:	b091      	sub	sp, #68	; 0x44
 800d96e:	4606      	mov	r6, r0
 800d970:	4689      	mov	r9, r1
 800d972:	4690      	mov	r8, r2
 800d974:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_AU915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800d976:	2400      	movs	r4, #0
 800d978:	940e      	str	r4, [sp, #56]	; 0x38
 800d97a:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800d97e:	940b      	str	r4, [sp, #44]	; 0x2c
 800d980:	940c      	str	r4, [sp, #48]	; 0x30
 800d982:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, 6 );
 800d984:	4b95      	ldr	r3, [pc, #596]	; (800dbdc <RegionAU915LinkAdrReq+0x274>)
 800d986:	6819      	ldr	r1, [r3, #0]
 800d988:	2206      	movs	r2, #6
 800d98a:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 800d98e:	a80b      	add	r0, sp, #44	; 0x2c
 800d990:	f001 fe9d 	bl	800f6ce <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d994:	e00d      	b.n	800d9b2 <RegionAU915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 800d996:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d99a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 800d99e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 800d9a2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 800d9a6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800d9aa:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800d9ae:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d9b2:	7a33      	ldrb	r3, [r6, #8]
 800d9b4:	42a3      	cmp	r3, r4
 800d9b6:	d978      	bls.n	800daaa <RegionAU915LinkAdrReq+0x142>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800d9b8:	6870      	ldr	r0, [r6, #4]
 800d9ba:	a90e      	add	r1, sp, #56	; 0x38
 800d9bc:	4420      	add	r0, r4
 800d9be:	f001 ff37 	bl	800f830 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800d9c2:	2800      	cmp	r0, #0
 800d9c4:	d071      	beq.n	800daaa <RegionAU915LinkAdrReq+0x142>
        bytesProcessed += nextIndex;
 800d9c6:	4404      	add	r4, r0
 800d9c8:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 800d9ca:	f89d 503b 	ldrb.w	r5, [sp, #59]	; 0x3b
 800d9ce:	2d06      	cmp	r5, #6
 800d9d0:	d0e1      	beq.n	800d996 <RegionAU915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800d9d2:	2d07      	cmp	r5, #7
 800d9d4:	d009      	beq.n	800d9ea <RegionAU915LinkAdrReq+0x82>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800d9d6:	2d05      	cmp	r5, #5
 800d9d8:	d064      	beq.n	800daa4 <RegionAU915LinkAdrReq+0x13c>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800d9da:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800d9de:	aa10      	add	r2, sp, #64	; 0x40
 800d9e0:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 800d9e4:	f825 3c14 	strh.w	r3, [r5, #-20]
 800d9e8:	e7e3      	b.n	800d9b2 <RegionAU915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 800d9f0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 800d9f4:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 800d9f8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800d9fc:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800da00:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800da04:	e7d5      	b.n	800d9b2 <RegionAU915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800da06:	aa10      	add	r2, sp, #64	; 0x40
 800da08:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800da0c:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800da10:	f062 02ff 	orn	r2, r2, #255	; 0xff
 800da14:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800da18:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800da1c:	4313      	orrs	r3, r2
 800da1e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800da22:	3101      	adds	r1, #1
 800da24:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 800da26:	3501      	adds	r5, #1
 800da28:	b2ed      	uxtb	r5, r5
 800da2a:	2d07      	cmp	r5, #7
 800da2c:	d8c1      	bhi.n	800d9b2 <RegionAU915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800da2e:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800da32:	2301      	movs	r3, #1
 800da34:	40ab      	lsls	r3, r5
 800da36:	421a      	tst	r2, r3
 800da38:	d011      	beq.n	800da5e <RegionAU915LinkAdrReq+0xf6>
                    if( ( i % 2 ) == 0 )
 800da3a:	f015 0f01 	tst.w	r5, #1
 800da3e:	d1e2      	bne.n	800da06 <RegionAU915LinkAdrReq+0x9e>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800da40:	aa10      	add	r2, sp, #64	; 0x40
 800da42:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800da46:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800da4a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800da4e:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800da52:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800da56:	4313      	orrs	r3, r2
 800da58:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800da5c:	e7e3      	b.n	800da26 <RegionAU915LinkAdrReq+0xbe>
                    if( ( i % 2 ) == 0 )
 800da5e:	f015 0f01 	tst.w	r5, #1
 800da62:	d10f      	bne.n	800da84 <RegionAU915LinkAdrReq+0x11c>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800da64:	aa10      	add	r2, sp, #64	; 0x40
 800da66:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800da6a:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800da6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800da72:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800da76:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800da7a:	ea22 0303 	bic.w	r3, r2, r3
 800da7e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800da82:	e7d0      	b.n	800da26 <RegionAU915LinkAdrReq+0xbe>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800da84:	aa10      	add	r2, sp, #64	; 0x40
 800da86:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800da8a:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 800da8e:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800da92:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800da96:	ea22 0303 	bic.w	r3, r2, r3
 800da9a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800da9e:	3101      	adds	r1, #1
 800daa0:	b2c9      	uxtb	r1, r1
 800daa2:	e7c0      	b.n	800da26 <RegionAU915LinkAdrReq+0xbe>
            for( uint8_t i = 0; i <= 7; i++ )
 800daa4:	2500      	movs	r5, #0
            uint8_t cntChannelMask = 0;
 800daa6:	4629      	mov	r1, r5
 800daa8:	e7bf      	b.n	800da2a <RegionAU915LinkAdrReq+0xc2>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_6 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800daaa:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800daae:	2b05      	cmp	r3, #5
 800dab0:	dd58      	ble.n	800db64 <RegionAU915LinkAdrReq+0x1fc>
 800dab2:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800dab4:	2302      	movs	r3, #2
 800dab6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800daba:	7a73      	ldrb	r3, [r6, #9]
 800dabc:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionAU915GetPhyParam( &getPhy );
 800dac0:	a809      	add	r0, sp, #36	; 0x24
 800dac2:	f7ff fbb1 	bl	800d228 <RegionAU915GetPhyParam>
 800dac6:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 800dac8:	f88d 5004 	strb.w	r5, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800dacc:	7ab3      	ldrb	r3, [r6, #10]
 800dace:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800dad2:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800dad6:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800dada:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800dade:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800dae2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800dae6:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800daea:	f996 300b 	ldrsb.w	r3, [r6, #11]
 800daee:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800daf2:	f996 300c 	ldrsb.w	r3, [r6, #12]
 800daf6:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800dafa:	f996 300d 	ldrsb.w	r3, [r6, #13]
 800dafe:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = AU915_MAX_NB_CHANNELS;
 800db02:	2348      	movs	r3, #72	; 0x48
 800db04:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800db08:	ab0b      	add	r3, sp, #44	; 0x2c
 800db0a:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800db0c:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = AU915_TX_MAX_DATARATE;
 800db10:	2306      	movs	r3, #6
 800db12:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800db16:	4b31      	ldr	r3, [pc, #196]	; (800dbdc <RegionAU915LinkAdrReq+0x274>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = AU915_MIN_TX_POWER;
 800db1c:	230e      	movs	r3, #14
 800db1e:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = AU915_MAX_TX_POWER;
 800db22:	2300      	movs	r3, #0
 800db24:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800db28:	6833      	ldr	r3, [r6, #0]
 800db2a:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800db2c:	ab0e      	add	r3, sp, #56	; 0x38
 800db2e:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800db32:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 800db36:	4668      	mov	r0, sp
 800db38:	f001 fe96 	bl	800f868 <RegionCommonLinkAdrReqVerifyParams>
 800db3c:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800db3e:	2807      	cmp	r0, #7
 800db40:	d01b      	beq.n	800db7a <RegionAU915LinkAdrReq+0x212>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800db42:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800db46:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800db4a:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800db4e:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800db52:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800db56:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800db58:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800db5a:	701c      	strb	r4, [r3, #0]

#endif /* REGION_AU915 */
    return status;
}
 800db5c:	4628      	mov	r0, r5
 800db5e:	b011      	add	sp, #68	; 0x44
 800db60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_6 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800db64:	2204      	movs	r2, #4
 800db66:	2100      	movs	r1, #0
 800db68:	a80b      	add	r0, sp, #44	; 0x2c
 800db6a:	f001 fd9a 	bl	800f6a2 <RegionCommonCountChannels>
 800db6e:	2801      	cmp	r0, #1
 800db70:	d901      	bls.n	800db76 <RegionAU915LinkAdrReq+0x20e>
 800db72:	2507      	movs	r5, #7
 800db74:	e79e      	b.n	800dab4 <RegionAU915LinkAdrReq+0x14c>
        status &= 0xFE; // Channel mask KO
 800db76:	2506      	movs	r5, #6
 800db78:	e79c      	b.n	800dab4 <RegionAU915LinkAdrReq+0x14c>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800db7a:	4e18      	ldr	r6, [pc, #96]	; (800dbdc <RegionAU915LinkAdrReq+0x274>)
 800db7c:	6830      	ldr	r0, [r6, #0]
 800db7e:	2206      	movs	r2, #6
 800db80:	a90b      	add	r1, sp, #44	; 0x2c
 800db82:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800db86:	f001 fda2 	bl	800f6ce <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 800db8a:	4b15      	ldr	r3, [pc, #84]	; (800dbe0 <RegionAU915LinkAdrReq+0x278>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	6832      	ldr	r2, [r6, #0]
 800db90:	f8b2 1480 	ldrh.w	r1, [r2, #1152]	; 0x480
 800db94:	f8b3 0090 	ldrh.w	r0, [r3, #144]	; 0x90
 800db98:	4001      	ands	r1, r0
 800db9a:	f8a3 1090 	strh.w	r1, [r3, #144]	; 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 800db9e:	f8b2 1482 	ldrh.w	r1, [r2, #1154]	; 0x482
 800dba2:	f8b3 0092 	ldrh.w	r0, [r3, #146]	; 0x92
 800dba6:	4001      	ands	r1, r0
 800dba8:	f8a3 1092 	strh.w	r1, [r3, #146]	; 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 800dbac:	f8b2 1484 	ldrh.w	r1, [r2, #1156]	; 0x484
 800dbb0:	f8b3 0094 	ldrh.w	r0, [r3, #148]	; 0x94
 800dbb4:	4001      	ands	r1, r0
 800dbb6:	f8a3 1094 	strh.w	r1, [r3, #148]	; 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 800dbba:	f8b2 1486 	ldrh.w	r1, [r2, #1158]	; 0x486
 800dbbe:	f8b3 0096 	ldrh.w	r0, [r3, #150]	; 0x96
 800dbc2:	4001      	ands	r1, r0
 800dbc4:	f8a3 1096 	strh.w	r1, [r3, #150]	; 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800dbc8:	f8b2 1488 	ldrh.w	r1, [r2, #1160]	; 0x488
 800dbcc:	f8a3 1098 	strh.w	r1, [r3, #152]	; 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800dbd0:	f8b2 248a 	ldrh.w	r2, [r2, #1162]	; 0x48a
 800dbd4:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 800dbd8:	e7b3      	b.n	800db42 <RegionAU915LinkAdrReq+0x1da>
 800dbda:	bf00      	nop
 800dbdc:	20001434 	.word	0x20001434
 800dbe0:	20001430 	.word	0x20001430

0800dbe4 <RegionAU915RxParamSetupReq>:

uint8_t RegionAU915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800dbe4:	b538      	push	{r3, r4, r5, lr}
 800dbe6:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_AU915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800dbe8:	6840      	ldr	r0, [r0, #4]
 800dbea:	f7ff facf 	bl	800d18c <VerifyRfFreq>
 800dbee:	b1e0      	cbz	r0, 800dc2a <RegionAU915RxParamSetupReq+0x46>
    uint8_t status = 0x07;
 800dbf0:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 800dbf2:	220d      	movs	r2, #13
 800dbf4:	2108      	movs	r1, #8
 800dbf6:	f994 0000 	ldrsb.w	r0, [r4]
 800dbfa:	f001 fcf6 	bl	800f5ea <RegionCommonValueInRange>
 800dbfe:	b908      	cbnz	r0, 800dc04 <RegionAU915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800dc00:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( rxParamSetupReq->Datarate == DR_7 ) ||
 800dc04:	f994 3000 	ldrsb.w	r3, [r4]
 800dc08:	2b07      	cmp	r3, #7
 800dc0a:	d001      	beq.n	800dc10 <RegionAU915RxParamSetupReq+0x2c>
 800dc0c:	2b0d      	cmp	r3, #13
 800dc0e:	dd01      	ble.n	800dc14 <RegionAU915RxParamSetupReq+0x30>
        ( rxParamSetupReq->Datarate > DR_13 ) )
    {
        status &= 0xFD; // Datarate KO
 800dc10:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AU915_MIN_RX1_DR_OFFSET, AU915_MAX_RX1_DR_OFFSET ) == false )
 800dc14:	2205      	movs	r2, #5
 800dc16:	2100      	movs	r1, #0
 800dc18:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800dc1c:	f001 fce5 	bl	800f5ea <RegionCommonValueInRange>
 800dc20:	b908      	cbnz	r0, 800dc26 <RegionAU915RxParamSetupReq+0x42>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800dc22:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_AU915 */
    return status;
}
 800dc26:	4628      	mov	r0, r5
 800dc28:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800dc2a:	2506      	movs	r5, #6
 800dc2c:	e7e1      	b.n	800dbf2 <RegionAU915RxParamSetupReq+0xe>

0800dc2e <RegionAU915NewChannelReq>:

int8_t RegionAU915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 800dc2e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc32:	4770      	bx	lr

0800dc34 <RegionAU915TxParamSetupReq>:

int8_t RegionAU915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Accept the request
    return 0;
}
 800dc34:	2000      	movs	r0, #0
 800dc36:	4770      	bx	lr

0800dc38 <RegionAU915DlChannelReq>:

int8_t RegionAU915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 800dc38:	f04f 30ff 	mov.w	r0, #4294967295
 800dc3c:	4770      	bx	lr
	...

0800dc40 <RegionAU915AlternateDr>:
int8_t RegionAU915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_AU915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_2 and then one 500kHz DR_6 channel
    if( type == ALTERNATE_DR )
 800dc40:	b9b1      	cbnz	r1, 800dc70 <RegionAU915AlternateDr+0x30>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 800dc42:	4b10      	ldr	r3, [pc, #64]	; (800dc84 <RegionAU915AlternateDr+0x44>)
 800dc44:	681a      	ldr	r2, [r3, #0]
 800dc46:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800dc50:	4b0c      	ldr	r3, [pc, #48]	; (800dc84 <RegionAU915AlternateDr+0x44>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 800dc58:	4b0b      	ldr	r3, [pc, #44]	; (800dc88 <RegionAU915AlternateDr+0x48>)
 800dc5a:	fba3 1302 	umull	r1, r3, r3, r2
 800dc5e:	085b      	lsrs	r3, r3, #1
 800dc60:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800dc64:	1ad3      	subs	r3, r2, r3
 800dc66:	f013 0fff 	tst.w	r3, #255	; 0xff
 800dc6a:	d109      	bne.n	800dc80 <RegionAU915AlternateDr+0x40>
    {
        // Use DR_6 every 9th times.
        currentDr = DR_6;
 800dc6c:	2006      	movs	r0, #6
 800dc6e:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 800dc70:	4b04      	ldr	r3, [pc, #16]	; (800dc84 <RegionAU915AlternateDr+0x44>)
 800dc72:	681a      	ldr	r2, [r3, #0]
 800dc74:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 800dc78:	3b01      	subs	r3, #1
 800dc7a:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
 800dc7e:	e7e7      	b.n	800dc50 <RegionAU915AlternateDr+0x10>
    }
    else
    {
        currentDr = DR_2;
 800dc80:	2002      	movs	r0, #2
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_AU915 */
}
 800dc82:	4770      	bx	lr
 800dc84:	20001430 	.word	0x20001430
 800dc88:	38e38e39 	.word	0x38e38e39

0800dc8c <RegionAU915NextChannel>:

LoRaMacStatus_t RegionAU915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800dc8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc90:	b0a4      	sub	sp, #144	; 0x90
 800dc92:	4604      	mov	r4, r0
 800dc94:	460e      	mov	r6, r1
 800dc96:	4690      	mov	r8, r2
 800dc98:	461f      	mov	r7, r3
#if defined( REGION_AU915 )
    uint8_t nbEnabledChannels = 0;
 800dc9a:	2500      	movs	r5, #0
 800dc9c:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 800dca0:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 800dca4:	9511      	str	r5, [sp, #68]	; 0x44
 800dca6:	2244      	movs	r2, #68	; 0x44
 800dca8:	4629      	mov	r1, r5
 800dcaa:	a812      	add	r0, sp, #72	; 0x48
 800dcac:	f009 fbe0 	bl	8017470 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800dcb0:	4b4c      	ldr	r3, [pc, #304]	; (800dde4 <RegionAU915NextChannel+0x158>)
 800dcb2:	6818      	ldr	r0, [r3, #0]
 800dcb4:	2204      	movs	r2, #4
 800dcb6:	4629      	mov	r1, r5
 800dcb8:	3090      	adds	r0, #144	; 0x90
 800dcba:	f001 fcf2 	bl	800f6a2 <RegionCommonCountChannels>
 800dcbe:	2800      	cmp	r0, #0
 800dcc0:	d053      	beq.n	800dd6a <RegionAU915NextChannel+0xde>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_6 )
 800dcc2:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800dcc6:	2b05      	cmp	r3, #5
 800dcc8:	dd0a      	ble.n	800dce0 <RegionAU915NextChannel+0x54>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800dcca:	4b46      	ldr	r3, [pc, #280]	; (800dde4 <RegionAU915NextChannel+0x158>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 800dcd2:	b92a      	cbnz	r2, 800dce0 <RegionAU915NextChannel+0x54>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800dcd4:	4a44      	ldr	r2, [pc, #272]	; (800dde8 <RegionAU915NextChannel+0x15c>)
 800dcd6:	6812      	ldr	r2, [r2, #0]
 800dcd8:	f8b2 2488 	ldrh.w	r2, [r2, #1160]	; 0x488
 800dcdc:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800dce0:	7a63      	ldrb	r3, [r4, #9]
 800dce2:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800dce6:	7a23      	ldrb	r3, [r4, #8]
 800dce8:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 800dcec:	4b3d      	ldr	r3, [pc, #244]	; (800dde4 <RegionAU915NextChannel+0x158>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800dcf4:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800dcf6:	4a3c      	ldr	r2, [pc, #240]	; (800dde8 <RegionAU915NextChannel+0x15c>)
 800dcf8:	6812      	ldr	r2, [r2, #0]
 800dcfa:	9205      	str	r2, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800dcfc:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = AU915_MAX_NB_CHANNELS;
 800dcfe:	2348      	movs	r3, #72	; 0x48
 800dd00:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 800dd04:	2300      	movs	r3, #0
 800dd06:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800dd08:	6823      	ldr	r3, [r4, #0]
 800dd0a:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800dd0c:	6863      	ldr	r3, [r4, #4]
 800dd0e:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800dd10:	7aa3      	ldrb	r3, [r4, #10]
 800dd12:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = AU915_MAX_NB_BANDS;
 800dd16:	2301      	movs	r3, #1
 800dd18:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800dd1c:	ab0c      	add	r3, sp, #48	; 0x30
 800dd1e:	6921      	ldr	r1, [r4, #16]
 800dd20:	68e0      	ldr	r0, [r4, #12]
 800dd22:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800dd26:	7d23      	ldrb	r3, [r4, #20]
 800dd28:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800dd2c:	8ae1      	ldrh	r1, [r4, #22]
 800dd2e:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800dd32:	f7ff fa5b 	bl	800d1ec <GetTimeOnAir>
 800dd36:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800dd38:	ab03      	add	r3, sp, #12
 800dd3a:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800dd3c:	f8cd 8004 	str.w	r8, [sp, #4]
 800dd40:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 800dd44:	9300      	str	r3, [sp, #0]
 800dd46:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 800dd4a:	aa11      	add	r2, sp, #68	; 0x44
 800dd4c:	4639      	mov	r1, r7
 800dd4e:	a809      	add	r0, sp, #36	; 0x24
 800dd50:	f001 fe9a 	bl	800fa88 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800dd54:	4605      	mov	r5, r0
 800dd56:	2800      	cmp	r0, #0
 800dd58:	d140      	bne.n	800dddc <RegionAU915NextChannel+0x150>
    {
        if( nextChanParams->Joined == true )
 800dd5a:	7a63      	ldrb	r3, [r4, #9]
 800dd5c:	b9a3      	cbnz	r3, 800dd88 <RegionAU915NextChannel+0xfc>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR2
            if( nextChanParams->Datarate == DR_2 )
 800dd5e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800dd62:	2b02      	cmp	r3, #2
 800dd64:	d01b      	beq.n	800dd9e <RegionAU915NextChannel+0x112>
            }
            // 500kHz Channels (64 - 71) DR6
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 800dd66:	4603      	mov	r3, r0
 800dd68:	e027      	b.n	800ddba <RegionAU915NextChannel+0x12e>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 800dd6a:	4d1e      	ldr	r5, [pc, #120]	; (800dde4 <RegionAU915NextChannel+0x158>)
 800dd6c:	6828      	ldr	r0, [r5, #0]
 800dd6e:	4b1e      	ldr	r3, [pc, #120]	; (800dde8 <RegionAU915NextChannel+0x15c>)
 800dd70:	6819      	ldr	r1, [r3, #0]
 800dd72:	2204      	movs	r2, #4
 800dd74:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 800dd78:	3090      	adds	r0, #144	; 0x90
 800dd7a:	f001 fca8 	bl	800f6ce <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800dd7e:	682b      	ldr	r3, [r5, #0]
 800dd80:	2200      	movs	r2, #0
 800dd82:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800dd86:	e79c      	b.n	800dcc2 <RegionAU915NextChannel+0x36>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800dd88:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 800dd8c:	3901      	subs	r1, #1
 800dd8e:	f006 fc07 	bl	80145a0 <randr>
 800dd92:	ab24      	add	r3, sp, #144	; 0x90
 800dd94:	4418      	add	r0, r3
 800dd96:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 800dd9a:	7033      	strb	r3, [r6, #0]
 800dd9c:	e017      	b.n	800ddce <RegionAU915NextChannel+0x142>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800dd9e:	4b11      	ldr	r3, [pc, #68]	; (800dde4 <RegionAU915NextChannel+0x158>)
 800dda0:	6818      	ldr	r0, [r3, #0]
 800dda2:	4632      	mov	r2, r6
 800dda4:	f100 019c 	add.w	r1, r0, #156	; 0x9c
 800dda8:	3090      	adds	r0, #144	; 0x90
 800ddaa:	f000 f87c 	bl	800dea6 <RegionBaseUSComputeNext125kHzJoinChannel>
 800ddae:	2803      	cmp	r0, #3
 800ddb0:	d10d      	bne.n	800ddce <RegionAU915NextChannel+0x142>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 800ddb2:	4605      	mov	r5, r0
 800ddb4:	e012      	b.n	800dddc <RegionAU915NextChannel+0x150>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 800ddb6:	3301      	adds	r3, #1
 800ddb8:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800ddba:	4a0a      	ldr	r2, [pc, #40]	; (800dde4 <RegionAU915NextChannel+0x158>)
 800ddbc:	6812      	ldr	r2, [r2, #0]
 800ddbe:	f892 2098 	ldrb.w	r2, [r2, #152]	; 0x98
 800ddc2:	411a      	asrs	r2, r3
 800ddc4:	f012 0f01 	tst.w	r2, #1
 800ddc8:	d0f5      	beq.n	800ddb6 <RegionAU915NextChannel+0x12a>
                }
                *channel = 64 + i;
 800ddca:	3340      	adds	r3, #64	; 0x40
 800ddcc:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, AU915_MAX_NB_CHANNELS );
 800ddce:	4b05      	ldr	r3, [pc, #20]	; (800dde4 <RegionAU915NextChannel+0x158>)
 800ddd0:	6818      	ldr	r0, [r3, #0]
 800ddd2:	2248      	movs	r2, #72	; 0x48
 800ddd4:	7831      	ldrb	r1, [r6, #0]
 800ddd6:	3090      	adds	r0, #144	; 0x90
 800ddd8:	f001 fc49 	bl	800f66e <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AU915 */
}
 800dddc:	4628      	mov	r0, r5
 800ddde:	b024      	add	sp, #144	; 0x90
 800dde0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dde4:	20001430 	.word	0x20001430
 800dde8:	20001434 	.word	0x20001434

0800ddec <RegionAU915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionAU915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800ddec:	b538      	push	{r3, r4, r5, lr}
 800ddee:	4604      	mov	r4, r0
#if defined( REGION_AU915 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800ddf0:	4b12      	ldr	r3, [pc, #72]	; (800de3c <RegionAU915SetContinuousWave+0x50>)
 800ddf2:	6819      	ldr	r1, [r3, #0]
 800ddf4:	4d12      	ldr	r5, [pc, #72]	; (800de40 <RegionAU915SetContinuousWave+0x54>)
 800ddf6:	682b      	ldr	r3, [r5, #0]
 800ddf8:	7802      	ldrb	r2, [r0, #0]
 800ddfa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800ddfe:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800de02:	7a53      	ldrb	r3, [r2, #9]
 800de04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800de08:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800de0c:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800de10:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800de14:	f001 fe9f 	bl	800fb56 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800de18:	682a      	ldr	r2, [r5, #0]
 800de1a:	7823      	ldrb	r3, [r4, #0]
 800de1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800de20:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800de24:	68a2      	ldr	r2, [r4, #8]
 800de26:	6861      	ldr	r1, [r4, #4]
 800de28:	f001 fdb2 	bl	800f990 <RegionCommonComputeTxPower>
 800de2c:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800de2e:	4b05      	ldr	r3, [pc, #20]	; (800de44 <RegionAU915SetContinuousWave+0x58>)
 800de30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de32:	89a2      	ldrh	r2, [r4, #12]
 800de34:	4628      	mov	r0, r5
 800de36:	4798      	blx	r3
#endif /* REGION_AU915 */
}
 800de38:	bd38      	pop	{r3, r4, r5, pc}
 800de3a:	bf00      	nop
 800de3c:	20001430 	.word	0x20001430
 800de40:	20001434 	.word	0x20001434
 800de44:	08018400 	.word	0x08018400

0800de48 <RegionAU915ApplyDrOffset>:

uint8_t RegionAU915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_AU915 )
    int8_t datarate = DatarateOffsetsAU915[dr][drOffset];
 800de48:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800de4c:	4b06      	ldr	r3, [pc, #24]	; (800de68 <RegionAU915ApplyDrOffset+0x20>)
 800de4e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800de52:	568b      	ldrsb	r3, [r1, r2]

    if( datarate < 0 )
 800de54:	2b00      	cmp	r3, #0
 800de56:	db01      	blt.n	800de5c <RegionAU915ApplyDrOffset+0x14>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_AU915 */
}
 800de58:	b2d8      	uxtb	r0, r3
 800de5a:	4770      	bx	lr
        if( downlinkDwellTime == 0 )
 800de5c:	b908      	cbnz	r0, 800de62 <RegionAU915ApplyDrOffset+0x1a>
            datarate = AU915_TX_MIN_DATARATE;
 800de5e:	2300      	movs	r3, #0
 800de60:	e7fa      	b.n	800de58 <RegionAU915ApplyDrOffset+0x10>
            datarate = AU915_DWELL_LIMIT_DATARATE;
 800de62:	2302      	movs	r3, #2
 800de64:	e7f8      	b.n	800de58 <RegionAU915ApplyDrOffset+0x10>
 800de66:	bf00      	nop
 800de68:	08017c4c 	.word	0x08017c4c

0800de6c <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800de6c:	b1b9      	cbz	r1, 800de9e <FindAvailable125kHzChannels+0x32>
{
 800de6e:	b410      	push	{r4}
 800de70:	460c      	mov	r4, r1
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800de72:	b1b2      	cbz	r2, 800dea2 <FindAvailable125kHzChannels+0x36>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800de74:	2300      	movs	r3, #0
 800de76:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800de78:	e001      	b.n	800de7e <FindAvailable125kHzChannels+0x12>
 800de7a:	3301      	adds	r3, #1
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	2b07      	cmp	r3, #7
 800de80:	d80a      	bhi.n	800de98 <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800de82:	fa40 f103 	asr.w	r1, r0, r3
 800de86:	f011 0f01 	tst.w	r1, #1
 800de8a:	d0f6      	beq.n	800de7a <FindAvailable125kHzChannels+0xe>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800de8c:	7811      	ldrb	r1, [r2, #0]
 800de8e:	5463      	strb	r3, [r4, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800de90:	7811      	ldrb	r1, [r2, #0]
 800de92:	3101      	adds	r1, #1
 800de94:	7011      	strb	r1, [r2, #0]
 800de96:	e7f0      	b.n	800de7a <FindAvailable125kHzChannels+0xe>
        }
    }

    return LORAMAC_STATUS_OK;
 800de98:	2000      	movs	r0, #0
}
 800de9a:	bc10      	pop	{r4}
 800de9c:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800de9e:	2003      	movs	r0, #3
}
 800dea0:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dea2:	2003      	movs	r0, #3
 800dea4:	e7f9      	b.n	800de9a <FindAvailable125kHzChannels+0x2e>

0800dea6 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800dea6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dea8:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800deaa:	2300      	movs	r3, #0
 800deac:	9302      	str	r3, [sp, #8]
 800deae:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800deb0:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800deb4:	2800      	cmp	r0, #0
 800deb6:	d03c      	beq.n	800df32 <RegionBaseUSComputeNext125kHzJoinChannel+0x8c>
 800deb8:	460d      	mov	r5, r1
 800deba:	4617      	mov	r7, r2
 800debc:	4606      	mov	r6, r0
 800debe:	2900      	cmp	r1, #0
 800dec0:	d039      	beq.n	800df36 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800dec2:	2a00      	cmp	r2, #0
 800dec4:	d039      	beq.n	800df3a <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800dec6:	780c      	ldrb	r4, [r1, #0]
 800dec8:	e015      	b.n	800def6 <RegionBaseUSComputeNext125kHzJoinChannel+0x50>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800deca:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800dece:	0a00      	lsrs	r0, r0, #8
 800ded0:	e017      	b.n	800df02 <RegionBaseUSComputeNext125kHzJoinChannel+0x5c>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800ded2:	3901      	subs	r1, #1
 800ded4:	2000      	movs	r0, #0
 800ded6:	f006 fb63 	bl	80145a0 <randr>
 800deda:	ab04      	add	r3, sp, #16
 800dedc:	4418      	add	r0, r3
 800dede:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800dee2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dee6:	703b      	strb	r3, [r7, #0]
 800dee8:	e016      	b.n	800df18 <RegionBaseUSComputeNext125kHzJoinChannel+0x72>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800deea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800deee:	b9cb      	cbnz	r3, 800df24 <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
 800def0:	782a      	ldrb	r2, [r5, #0]
 800def2:	42a2      	cmp	r2, r4
 800def4:	d016      	beq.n	800df24 <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800def6:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800def8:	f014 0f01 	tst.w	r4, #1
 800defc:	d1e5      	bne.n	800deca <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800defe:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800df02:	f10d 0207 	add.w	r2, sp, #7
 800df06:	a902      	add	r1, sp, #8
 800df08:	f7ff ffb0 	bl	800de6c <FindAvailable125kHzChannels>
 800df0c:	2803      	cmp	r0, #3
 800df0e:	d00b      	beq.n	800df28 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        if ( availableChannels > 0 )
 800df10:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800df14:	2900      	cmp	r1, #0
 800df16:	d1dc      	bne.n	800ded2 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800df18:	3401      	adds	r4, #1
 800df1a:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800df1c:	2c07      	cmp	r4, #7
 800df1e:	d9e4      	bls.n	800deea <RegionBaseUSComputeNext125kHzJoinChannel+0x44>
            startIndex = 0;
 800df20:	2400      	movs	r4, #0
 800df22:	e7e2      	b.n	800deea <RegionBaseUSComputeNext125kHzJoinChannel+0x44>

    if ( availableChannels > 0 )
 800df24:	b913      	cbnz	r3, 800df2c <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800df26:	2003      	movs	r0, #3
}
 800df28:	b005      	add	sp, #20
 800df2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800df2c:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800df2e:	2000      	movs	r0, #0
 800df30:	e7fa      	b.n	800df28 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800df32:	2003      	movs	r0, #3
 800df34:	e7f8      	b.n	800df28 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800df36:	2003      	movs	r0, #3
 800df38:	e7f6      	b.n	800df28 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800df3a:	2003      	movs	r0, #3
 800df3c:	e7f4      	b.n	800df28 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>

0800df3e <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800df3e:	fb02 1000 	mla	r0, r2, r0, r1
 800df42:	4770      	bx	lr

0800df44 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 800df44:	b510      	push	{r4, lr}
 800df46:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800df48:	4b0e      	ldr	r3, [pc, #56]	; (800df84 <VerifyRfFreq+0x40>)
 800df4a:	6a1b      	ldr	r3, [r3, #32]
 800df4c:	4798      	blx	r3
 800df4e:	b1a8      	cbz	r0, 800df7c <VerifyRfFreq+0x38>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < CN470_FIRST_RX1_CHANNEL ) ||
 800df50:	4b0d      	ldr	r3, [pc, #52]	; (800df88 <VerifyRfFreq+0x44>)
 800df52:	4423      	add	r3, r4
 800df54:	4a0d      	ldr	r2, [pc, #52]	; (800df8c <VerifyRfFreq+0x48>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d80f      	bhi.n	800df7a <VerifyRfFreq+0x36>
        ( freq > CN470_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) CN470_FIRST_RX1_CHANNEL ) % ( uint32_t ) CN470_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800df5a:	099a      	lsrs	r2, r3, #6
 800df5c:	490c      	ldr	r1, [pc, #48]	; (800df90 <VerifyRfFreq+0x4c>)
 800df5e:	fba1 1202 	umull	r1, r2, r1, r2
 800df62:	0992      	lsrs	r2, r2, #6
 800df64:	490b      	ldr	r1, [pc, #44]	; (800df94 <VerifyRfFreq+0x50>)
 800df66:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > CN470_LAST_RX1_CHANNEL ) ||
 800df6a:	b942      	cbnz	r2, 800df7e <VerifyRfFreq+0x3a>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 470300000 ) ||  ( freq > 509700000 ) )
 800df6c:	4b0a      	ldr	r3, [pc, #40]	; (800df98 <VerifyRfFreq+0x54>)
 800df6e:	4423      	add	r3, r4
 800df70:	4a0a      	ldr	r2, [pc, #40]	; (800df9c <VerifyRfFreq+0x58>)
 800df72:	4293      	cmp	r3, r2
 800df74:	d902      	bls.n	800df7c <VerifyRfFreq+0x38>
    {
        return false;
 800df76:	2000      	movs	r0, #0
 800df78:	e000      	b.n	800df7c <VerifyRfFreq+0x38>
        return false;
 800df7a:	2000      	movs	r0, #0
    }
    return true;
}
 800df7c:	bd10      	pop	{r4, pc}
        return false;
 800df7e:	2000      	movs	r0, #0
 800df80:	e7fc      	b.n	800df7c <VerifyRfFreq+0x38>
 800df82:	bf00      	nop
 800df84:	08018400 	.word	0x08018400
 800df88:	e22e0720 	.word	0xe22e0720
 800df8c:	008f6ec0 	.word	0x008f6ec0
 800df90:	053e2d63 	.word	0x053e2d63
 800df94:	00030d40 	.word	0x00030d40
 800df98:	e3f7caa0 	.word	0xe3f7caa0
 800df9c:	02593240 	.word	0x02593240

0800dfa0 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800dfa0:	b570      	push	{r4, r5, r6, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	460c      	mov	r4, r1
    int8_t phyDr = DataratesCN470[datarate];
 800dfa6:	4b0a      	ldr	r3, [pc, #40]	; (800dfd0 <GetTimeOnAir+0x30>)
 800dfa8:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsCN470 );
 800dfaa:	490a      	ldr	r1, [pc, #40]	; (800dfd4 <GetTimeOnAir+0x34>)
 800dfac:	f001 fdd8 	bl	800fb60 <RegionCommonGetBandwidth>
 800dfb0:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800dfb2:	4b09      	ldr	r3, [pc, #36]	; (800dfd8 <GetTimeOnAir+0x38>)
 800dfb4:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800dfb6:	2001      	movs	r0, #1
 800dfb8:	9003      	str	r0, [sp, #12]
 800dfba:	b2e4      	uxtb	r4, r4
 800dfbc:	9402      	str	r4, [sp, #8]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	9201      	str	r2, [sp, #4]
 800dfc2:	2208      	movs	r2, #8
 800dfc4:	9200      	str	r2, [sp, #0]
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	4632      	mov	r2, r6
 800dfca:	47a8      	blx	r5
}
 800dfcc:	b004      	add	sp, #16
 800dfce:	bd70      	pop	{r4, r5, r6, pc}
 800dfd0:	08017ce0 	.word	0x08017ce0
 800dfd4:	08017cc8 	.word	0x08017cc8
 800dfd8:	08018400 	.word	0x08018400

0800dfdc <RegionCN470GetPhyParam>:
#endif /* REGION_CN470 */

PhyParam_t RegionCN470GetPhyParam( GetPhyParams_t* getPhy )
{
 800dfdc:	b500      	push	{lr}
 800dfde:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	9304      	str	r3, [sp, #16]

#if defined( REGION_CN470 )
    switch( getPhy->Attribute )
 800dfe4:	7803      	ldrb	r3, [r0, #0]
 800dfe6:	3b0b      	subs	r3, #11
 800dfe8:	2b2e      	cmp	r3, #46	; 0x2e
 800dfea:	d830      	bhi.n	800e04e <RegionCN470GetPhyParam+0x72>
 800dfec:	e8df f003 	tbb	[pc, r3]
 800dff0:	3f393633 	.word	0x3f393633
 800dff4:	4d49452f 	.word	0x4d49452f
 800dff8:	5d595551 	.word	0x5d595551
 800dffc:	692f662f 	.word	0x692f662f
 800e000:	2f78756f 	.word	0x2f78756f
 800e004:	187f7c2f 	.word	0x187f7c2f
 800e008:	2f2f2f2f 	.word	0x2f2f2f2f
 800e00c:	2f2f2f2f 	.word	0x2f2f2f2f
 800e010:	2f2f2f2f 	.word	0x2f2f2f2f
 800e014:	9389822f 	.word	0x9389822f
 800e018:	a0992f96 	.word	0xa0992f96
 800e01c:	a6a3      	.short	0xa6a3
 800e01e:	ac          	.byte	0xac
 800e01f:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800e020:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800e024:	f88d 3004 	strb.w	r3, [sp, #4]
 800e028:	2305      	movs	r3, #5
 800e02a:	f88d 3005 	strb.w	r3, [sp, #5]
 800e02e:	2300      	movs	r3, #0
 800e030:	f88d 3006 	strb.w	r3, [sp, #6]
 800e034:	2360      	movs	r3, #96	; 0x60
 800e036:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )CN470_TX_MAX_DATARATE,
                .MinDr = ( int8_t )CN470_TX_MIN_DATARATE,
                .NbChannels = CN470_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800e03a:	4b47      	ldr	r3, [pc, #284]	; (800e158 <RegionCN470GetPhyParam+0x17c>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800e042:	9202      	str	r2, [sp, #8]
 800e044:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800e046:	a801      	add	r0, sp, #4
 800e048:	f001 fd66 	bl	800fb18 <RegionCommonGetNextLowerTxDr>
 800e04c:	9004      	str	r0, [sp, #16]
        }
    }

#endif /* REGION_CN470 */
    return phyParam;
}
 800e04e:	9804      	ldr	r0, [sp, #16]
 800e050:	b007      	add	sp, #28
 800e052:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800e056:	2340      	movs	r3, #64	; 0x40
 800e058:	9304      	str	r3, [sp, #16]
            break;
 800e05a:	e7f8      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800e05c:	2320      	movs	r3, #32
 800e05e:	9304      	str	r3, [sp, #16]
            break;
 800e060:	e7f5      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateCN470[getPhy->Datarate];
 800e062:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e066:	4a3d      	ldr	r2, [pc, #244]	; (800e15c <RegionCN470GetPhyParam+0x180>)
 800e068:	5cd3      	ldrb	r3, [r2, r3]
 800e06a:	9304      	str	r3, [sp, #16]
            break;
 800e06c:	e7ef      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterCN470[getPhy->Datarate];
 800e06e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e072:	4a3b      	ldr	r2, [pc, #236]	; (800e160 <RegionCN470GetPhyParam+0x184>)
 800e074:	5cd3      	ldrb	r3, [r2, r3]
 800e076:	9304      	str	r3, [sp, #16]
            break;
 800e078:	e7e9      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.Value = CN470_MAX_RX_WINDOW;
 800e07a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800e07e:	9304      	str	r3, [sp, #16]
            break;
 800e080:	e7e5      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800e082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e086:	9304      	str	r3, [sp, #16]
            break;
 800e088:	e7e1      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800e08a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e08e:	9304      	str	r3, [sp, #16]
            break;
 800e090:	e7dd      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800e092:	f241 3388 	movw	r3, #5000	; 0x1388
 800e096:	9304      	str	r3, [sp, #16]
            break;
 800e098:	e7d9      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800e09a:	f241 7370 	movw	r3, #6000	; 0x1770
 800e09e:	9304      	str	r3, [sp, #16]
            break;
 800e0a0:	e7d5      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800e0a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e0a6:	9304      	str	r3, [sp, #16]
            break;
 800e0a8:	e7d1      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800e0aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e0ae:	482d      	ldr	r0, [pc, #180]	; (800e164 <RegionCN470GetPhyParam+0x188>)
 800e0b0:	f006 fa76 	bl	80145a0 <randr>
 800e0b4:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800e0b8:	9004      	str	r0, [sp, #16]
            break;
 800e0ba:	e7c8      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.Value = CN470_RX_WND_2_FREQ;
 800e0bc:	4b2a      	ldr	r3, [pc, #168]	; (800e168 <RegionCN470GetPhyParam+0x18c>)
 800e0be:	9304      	str	r3, [sp, #16]
            break;
 800e0c0:	e7c5      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800e0c2:	4b25      	ldr	r3, [pc, #148]	; (800e158 <RegionCN470GetPhyParam+0x17c>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800e0ca:	9304      	str	r3, [sp, #16]
            break;
 800e0cc:	e7bf      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800e0ce:	4b22      	ldr	r3, [pc, #136]	; (800e158 <RegionCN470GetPhyParam+0x17c>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800e0d6:	9304      	str	r3, [sp, #16]
            break;
 800e0d8:	e7b9      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.Value = CN470_MAX_NB_CHANNELS;
 800e0da:	2360      	movs	r3, #96	; 0x60
 800e0dc:	9304      	str	r3, [sp, #16]
            break;
 800e0de:	e7b6      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800e0e0:	4b1d      	ldr	r3, [pc, #116]	; (800e158 <RegionCN470GetPhyParam+0x17c>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	9304      	str	r3, [sp, #16]
            break;
 800e0e6:	e7b2      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.fValue = CN470_DEFAULT_MAX_EIRP;
 800e0e8:	4b20      	ldr	r3, [pc, #128]	; (800e16c <RegionCN470GetPhyParam+0x190>)
 800e0ea:	9304      	str	r3, [sp, #16]
            break;
 800e0ec:	e7af      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.fValue = CN470_DEFAULT_ANTENNA_GAIN;
 800e0ee:	4b20      	ldr	r3, [pc, #128]	; (800e170 <RegionCN470GetPhyParam+0x194>)
 800e0f0:	9304      	str	r3, [sp, #16]
            break;
 800e0f2:	e7ac      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800e0f4:	4a1f      	ldr	r2, [pc, #124]	; (800e174 <RegionCN470GetPhyParam+0x198>)
 800e0f6:	4920      	ldr	r1, [pc, #128]	; (800e178 <RegionCN470GetPhyParam+0x19c>)
 800e0f8:	7900      	ldrb	r0, [r0, #4]
 800e0fa:	f7ff ff20 	bl	800df3e <RegionBaseUSCalcDownlinkFrequency>
 800e0fe:	9004      	str	r0, [sp, #16]
            break;
 800e100:	e7a5      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = CN470_BEACON_SIZE;
 800e102:	2313      	movs	r3, #19
 800e104:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = CN470_RFU1_SIZE;
 800e108:	2303      	movs	r3, #3
 800e10a:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = CN470_RFU2_SIZE;
 800e10e:	2301      	movs	r3, #1
 800e110:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800e114:	e79b      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.Value = CN470_BEACON_CHANNEL_DR;
 800e116:	2302      	movs	r3, #2
 800e118:	9304      	str	r3, [sp, #16]
            break;
 800e11a:	e798      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.Value = CN470_BEACON_NB_CHANNELS;
 800e11c:	2308      	movs	r3, #8
 800e11e:	9304      	str	r3, [sp, #16]
            break;
 800e120:	e795      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800e122:	4a14      	ldr	r2, [pc, #80]	; (800e174 <RegionCN470GetPhyParam+0x198>)
 800e124:	4914      	ldr	r1, [pc, #80]	; (800e178 <RegionCN470GetPhyParam+0x19c>)
 800e126:	7900      	ldrb	r0, [r0, #4]
 800e128:	f7ff ff09 	bl	800df3e <RegionBaseUSCalcDownlinkFrequency>
 800e12c:	9004      	str	r0, [sp, #16]
            break;
 800e12e:	e78e      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.Value = CN470_PING_SLOT_CHANNEL_DR;
 800e130:	2302      	movs	r3, #2
 800e132:	9304      	str	r3, [sp, #16]
            break;
 800e134:	e78b      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.Value = CN470_BEACON_NB_CHANNELS;
 800e136:	2308      	movs	r3, #8
 800e138:	9304      	str	r3, [sp, #16]
            break;
 800e13a:	e788      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.Value = DataratesCN470[getPhy->Datarate];
 800e13c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e140:	4a0e      	ldr	r2, [pc, #56]	; (800e17c <RegionCN470GetPhyParam+0x1a0>)
 800e142:	5cd3      	ldrb	r3, [r2, r3]
 800e144:	9304      	str	r3, [sp, #16]
            break;
 800e146:	e782      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsCN470 );
 800e148:	490d      	ldr	r1, [pc, #52]	; (800e180 <RegionCN470GetPhyParam+0x1a4>)
 800e14a:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800e14e:	f001 fd07 	bl	800fb60 <RegionCommonGetBandwidth>
 800e152:	9004      	str	r0, [sp, #16]
            break;
 800e154:	e77b      	b.n	800e04e <RegionCN470GetPhyParam+0x72>
 800e156:	bf00      	nop
 800e158:	2000143c 	.word	0x2000143c
 800e15c:	08017ce8 	.word	0x08017ce8
 800e160:	08017cf0 	.word	0x08017cf0
 800e164:	fffffc18 	.word	0xfffffc18
 800e168:	1e1e4420 	.word	0x1e1e4420
 800e16c:	41993333 	.word	0x41993333
 800e170:	4009999a 	.word	0x4009999a
 800e174:	00030d40 	.word	0x00030d40
 800e178:	1e4c0ae0 	.word	0x1e4c0ae0
 800e17c:	08017ce0 	.word	0x08017ce0
 800e180:	08017cc8 	.word	0x08017cc8

0800e184 <RegionCN470SetBandTxDone>:

void RegionCN470SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800e184:	b530      	push	{r4, r5, lr}
 800e186:	b083      	sub	sp, #12
#if defined( REGION_CN470 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800e188:	4b0b      	ldr	r3, [pc, #44]	; (800e1b8 <RegionCN470SetBandTxDone+0x34>)
 800e18a:	681d      	ldr	r5, [r3, #0]
 800e18c:	4b0b      	ldr	r3, [pc, #44]	; (800e1bc <RegionCN470SetBandTxDone+0x38>)
 800e18e:	681a      	ldr	r2, [r3, #0]
 800e190:	7803      	ldrb	r3, [r0, #0]
 800e192:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e196:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e19a:	7a5b      	ldrb	r3, [r3, #9]
 800e19c:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800e1a0:	6903      	ldr	r3, [r0, #16]
 800e1a2:	9300      	str	r3, [sp, #0]
 800e1a4:	68c3      	ldr	r3, [r0, #12]
 800e1a6:	7842      	ldrb	r2, [r0, #1]
 800e1a8:	6881      	ldr	r1, [r0, #8]
 800e1aa:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 800e1ae:	f001 fa9f 	bl	800f6f0 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_CN470 */
}
 800e1b2:	b003      	add	sp, #12
 800e1b4:	bd30      	pop	{r4, r5, pc}
 800e1b6:	bf00      	nop
 800e1b8:	20001438 	.word	0x20001438
 800e1bc:	2000143c 	.word	0x2000143c

0800e1c0 <RegionCN470InitDefaults>:

void RegionCN470InitDefaults( InitDefaultsParams_t* params )
{
 800e1c0:	b510      	push	{r4, lr}
 800e1c2:	b086      	sub	sp, #24
#if defined( REGION_CN470 )
    Band_t bands[CN470_MAX_NB_BANDS] =
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	f8ad 3000 	strh.w	r3, [sp]
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	f88d 3002 	strb.w	r3, [sp, #2]
 800e1d0:	9301      	str	r3, [sp, #4]
 800e1d2:	9302      	str	r3, [sp, #8]
 800e1d4:	9303      	str	r3, [sp, #12]
 800e1d6:	9304      	str	r3, [sp, #16]
 800e1d8:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        CN470_BAND0
    };

    switch( params->Type )
 800e1dc:	7a04      	ldrb	r4, [r0, #8]
 800e1de:	b174      	cbz	r4, 800e1fe <RegionCN470InitDefaults+0x3e>
 800e1e0:	3c01      	subs	r4, #1
 800e1e2:	b2e4      	uxtb	r4, r4
 800e1e4:	2c01      	cmp	r4, #1
 800e1e6:	d808      	bhi.n	800e1fa <RegionCN470InitDefaults+0x3a>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800e1e8:	4b23      	ldr	r3, [pc, #140]	; (800e278 <RegionCN470InitDefaults+0xb8>)
 800e1ea:	6818      	ldr	r0, [r3, #0]
 800e1ec:	2206      	movs	r2, #6
 800e1ee:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800e1f2:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800e1f6:	f001 fa6a 	bl	800f6ce <RegionCommonChanMaskCopy>
        {
            break;
        }
    }
#endif /* REGION_CN470 */
}
 800e1fa:	b006      	add	sp, #24
 800e1fc:	bd10      	pop	{r4, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800e1fe:	6803      	ldr	r3, [r0, #0]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d0fa      	beq.n	800e1fa <RegionCN470InitDefaults+0x3a>
 800e204:	6842      	ldr	r2, [r0, #4]
 800e206:	2a00      	cmp	r2, #0
 800e208:	d0f7      	beq.n	800e1fa <RegionCN470InitDefaults+0x3a>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800e20a:	491c      	ldr	r1, [pc, #112]	; (800e27c <RegionCN470InitDefaults+0xbc>)
 800e20c:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800e20e:	491a      	ldr	r1, [pc, #104]	; (800e278 <RegionCN470InitDefaults+0xb8>)
 800e210:	600a      	str	r2, [r1, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * CN470_MAX_NB_BANDS );
 800e212:	2218      	movs	r2, #24
 800e214:	4669      	mov	r1, sp
 800e216:	4618      	mov	r0, r3
 800e218:	f006 f9cf 	bl	80145ba <memcpy1>
            for( uint8_t i = 0; i < CN470_MAX_NB_CHANNELS; i++ )
 800e21c:	e011      	b.n	800e242 <RegionCN470InitDefaults+0x82>
                RegionNvmGroup2->Channels[i].Frequency = 470300000 + i * 200000;
 800e21e:	4b16      	ldr	r3, [pc, #88]	; (800e278 <RegionCN470InitDefaults+0xb8>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	4a17      	ldr	r2, [pc, #92]	; (800e280 <RegionCN470InitDefaults+0xc0>)
 800e224:	4917      	ldr	r1, [pc, #92]	; (800e284 <RegionCN470InitDefaults+0xc4>)
 800e226:	fb02 1204 	mla	r2, r2, r4, r1
 800e22a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800e22e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800e232:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800e236:	2250      	movs	r2, #80	; 0x50
 800e238:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800e23a:	2200      	movs	r2, #0
 800e23c:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < CN470_MAX_NB_CHANNELS; i++ )
 800e23e:	3401      	adds	r4, #1
 800e240:	b2e4      	uxtb	r4, r4
 800e242:	2c5f      	cmp	r4, #95	; 0x5f
 800e244:	d9eb      	bls.n	800e21e <RegionCN470InitDefaults+0x5e>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800e246:	4b0c      	ldr	r3, [pc, #48]	; (800e278 <RegionCN470InitDefaults+0xb8>)
 800e248:	6818      	ldr	r0, [r3, #0]
 800e24a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e24e:	f8a0 348c 	strh.w	r3, [r0, #1164]	; 0x48c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800e252:	f8a0 348e 	strh.w	r3, [r0, #1166]	; 0x48e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800e256:	f8a0 3490 	strh.w	r3, [r0, #1168]	; 0x490
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800e25a:	f8a0 3492 	strh.w	r3, [r0, #1170]	; 0x492
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0xFFFF;
 800e25e:	f8a0 3494 	strh.w	r3, [r0, #1172]	; 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0xFFFF;
 800e262:	f8a0 3496 	strh.w	r3, [r0, #1174]	; 0x496
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800e266:	2206      	movs	r2, #6
 800e268:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800e26c:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800e270:	f001 fa2d 	bl	800f6ce <RegionCommonChanMaskCopy>
            break;
 800e274:	e7c1      	b.n	800e1fa <RegionCN470InitDefaults+0x3a>
 800e276:	bf00      	nop
 800e278:	2000143c 	.word	0x2000143c
 800e27c:	20001438 	.word	0x20001438
 800e280:	00030d40 	.word	0x00030d40
 800e284:	1c083560 	.word	0x1c083560

0800e288 <RegionCN470Verify>:

bool RegionCN470Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800e288:	b508      	push	{r3, lr}
#if defined( REGION_CN470 )
    switch( phyAttribute )
 800e28a:	290a      	cmp	r1, #10
 800e28c:	d829      	bhi.n	800e2e2 <RegionCN470Verify+0x5a>
 800e28e:	e8df f001 	tbb	[pc, r1]
 800e292:	2806      	.short	0x2806
 800e294:	0a282828 	.word	0x0a282828
 800e298:	1e28140a 	.word	0x1e28140a
 800e29c:	1e          	.byte	0x1e
 800e29d:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800e29e:	6800      	ldr	r0, [r0, #0]
 800e2a0:	f7ff fe50 	bl	800df44 <VerifyRfFreq>
 800e2a4:	e01e      	b.n	800e2e4 <RegionCN470Verify+0x5c>
        }
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, CN470_TX_MIN_DATARATE, CN470_TX_MAX_DATARATE );
 800e2a6:	2205      	movs	r2, #5
 800e2a8:	2100      	movs	r1, #0
 800e2aa:	f990 0000 	ldrsb.w	r0, [r0]
 800e2ae:	f001 f99c 	bl	800f5ea <RegionCommonValueInRange>
 800e2b2:	3800      	subs	r0, #0
 800e2b4:	bf18      	it	ne
 800e2b6:	2001      	movne	r0, #1
 800e2b8:	e014      	b.n	800e2e4 <RegionCN470Verify+0x5c>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, CN470_RX_MIN_DATARATE, CN470_RX_MAX_DATARATE );
 800e2ba:	2205      	movs	r2, #5
 800e2bc:	2100      	movs	r1, #0
 800e2be:	f990 0000 	ldrsb.w	r0, [r0]
 800e2c2:	f001 f992 	bl	800f5ea <RegionCommonValueInRange>
 800e2c6:	3800      	subs	r0, #0
 800e2c8:	bf18      	it	ne
 800e2ca:	2001      	movne	r0, #1
 800e2cc:	e00a      	b.n	800e2e4 <RegionCN470Verify+0x5c>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, CN470_MAX_TX_POWER, CN470_MIN_TX_POWER );
 800e2ce:	2207      	movs	r2, #7
 800e2d0:	2100      	movs	r1, #0
 800e2d2:	f990 0000 	ldrsb.w	r0, [r0]
 800e2d6:	f001 f988 	bl	800f5ea <RegionCommonValueInRange>
 800e2da:	3800      	subs	r0, #0
 800e2dc:	bf18      	it	ne
 800e2de:	2001      	movne	r0, #1
 800e2e0:	e000      	b.n	800e2e4 <RegionCN470Verify+0x5c>
{
 800e2e2:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_CN470 */
}
 800e2e4:	bd08      	pop	{r3, pc}
	...

0800e2e8 <RegionCN470ApplyCFList>:

void RegionCN470ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_CN470 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800e2e8:	7903      	ldrb	r3, [r0, #4]
 800e2ea:	2b10      	cmp	r3, #16
 800e2ec:	d120      	bne.n	800e330 <RegionCN470ApplyCFList+0x48>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800e2ee:	6803      	ldr	r3, [r0, #0]
 800e2f0:	7bdb      	ldrb	r3, [r3, #15]
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	d11c      	bne.n	800e330 <RegionCN470ApplyCFList+0x48>
    {
        return;
    }

    // ChMask0 - ChMask5 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 5; chMaskItr++, cntPayload+=2 )
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	4613      	mov	r3, r2
 800e2fa:	2a05      	cmp	r2, #5
 800e2fc:	d817      	bhi.n	800e32e <RegionCN470ApplyCFList+0x46>
{
 800e2fe:	b470      	push	{r4, r5, r6}
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800e300:	6801      	ldr	r1, [r0, #0]
 800e302:	4c0c      	ldr	r4, [pc, #48]	; (800e334 <RegionCN470ApplyCFList+0x4c>)
 800e304:	6825      	ldr	r5, [r4, #0]
 800e306:	5c89      	ldrb	r1, [r1, r2]
 800e308:	f503 7610 	add.w	r6, r3, #576	; 0x240
 800e30c:	f825 1016 	strh.w	r1, [r5, r6, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800e310:	6804      	ldr	r4, [r0, #0]
 800e312:	4414      	add	r4, r2
 800e314:	7864      	ldrb	r4, [r4, #1]
 800e316:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 800e31a:	f825 1016 	strh.w	r1, [r5, r6, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 5; chMaskItr++, cntPayload+=2 )
 800e31e:	3301      	adds	r3, #1
 800e320:	b2db      	uxtb	r3, r3
 800e322:	3202      	adds	r2, #2
 800e324:	b2d2      	uxtb	r2, r2
 800e326:	2b05      	cmp	r3, #5
 800e328:	d9ea      	bls.n	800e300 <RegionCN470ApplyCFList+0x18>
    }
#endif /* REGION_CN470 */
}
 800e32a:	bc70      	pop	{r4, r5, r6}
 800e32c:	4770      	bx	lr
 800e32e:	4770      	bx	lr
 800e330:	4770      	bx	lr
 800e332:	bf00      	nop
 800e334:	2000143c 	.word	0x2000143c

0800e338 <RegionCN470ChanMaskSet>:

bool RegionCN470ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800e338:	b508      	push	{r3, lr}
#if defined( REGION_CN470 )
    switch( chanMaskSet->ChannelsMaskType )
 800e33a:	7903      	ldrb	r3, [r0, #4]
 800e33c:	b11b      	cbz	r3, 800e346 <RegionCN470ChanMaskSet+0xe>
 800e33e:	2b01      	cmp	r3, #1
 800e340:	d00b      	beq.n	800e35a <RegionCN470ChanMaskSet+0x22>
 800e342:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_CN470 */
}
 800e344:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800e346:	4b0a      	ldr	r3, [pc, #40]	; (800e370 <RegionCN470ChanMaskSet+0x38>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	2206      	movs	r2, #6
 800e34c:	6801      	ldr	r1, [r0, #0]
 800e34e:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800e352:	f001 f9bc 	bl	800f6ce <RegionCommonChanMaskCopy>
    return true;
 800e356:	2001      	movs	r0, #1
            break;
 800e358:	e7f4      	b.n	800e344 <RegionCN470ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800e35a:	4b05      	ldr	r3, [pc, #20]	; (800e370 <RegionCN470ChanMaskSet+0x38>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	2206      	movs	r2, #6
 800e360:	6801      	ldr	r1, [r0, #0]
 800e362:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 800e366:	f001 f9b2 	bl	800f6ce <RegionCommonChanMaskCopy>
    return true;
 800e36a:	2001      	movs	r0, #1
            break;
 800e36c:	e7ea      	b.n	800e344 <RegionCN470ChanMaskSet+0xc>
 800e36e:	bf00      	nop
 800e370:	2000143c 	.word	0x2000143c

0800e374 <RegionCN470ComputeRxWindowParameters>:

void RegionCN470ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800e374:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e376:	b083      	sub	sp, #12
 800e378:	460e      	mov	r6, r1
 800e37a:	4617      	mov	r7, r2
 800e37c:	461c      	mov	r4, r3
#if defined( REGION_CN470 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, CN470_RX_MAX_DATARATE );
 800e37e:	2805      	cmp	r0, #5
 800e380:	bfa8      	it	ge
 800e382:	2005      	movge	r0, #5
 800e384:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsCN470 );
 800e386:	4d0f      	ldr	r5, [pc, #60]	; (800e3c4 <RegionCN470ComputeRxWindowParameters+0x50>)
 800e388:	4629      	mov	r1, r5
 800e38a:	f001 fbe9 	bl	800fb60 <RegionCommonGetBandwidth>
 800e38e:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesCN470[rxConfigParams->Datarate], BandwidthsCN470[rxConfigParams->Datarate] );
 800e390:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800e394:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800e398:	4a0b      	ldr	r2, [pc, #44]	; (800e3c8 <RegionCN470ComputeRxWindowParameters+0x54>)
 800e39a:	5cd0      	ldrb	r0, [r2, r3]
 800e39c:	f001 fab0 	bl	800f900 <RegionCommonComputeSymbolTimeLoRa>
 800e3a0:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800e3a2:	4b0a      	ldr	r3, [pc, #40]	; (800e3cc <RegionCN470ComputeRxWindowParameters+0x58>)
 800e3a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3a6:	4798      	blx	r3
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	f104 020c 	add.w	r2, r4, #12
 800e3ae:	9201      	str	r2, [sp, #4]
 800e3b0:	3408      	adds	r4, #8
 800e3b2:	9400      	str	r4, [sp, #0]
 800e3b4:	463a      	mov	r2, r7
 800e3b6:	4631      	mov	r1, r6
 800e3b8:	4628      	mov	r0, r5
 800e3ba:	f001 faaf 	bl	800f91c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_CN470 */
}
 800e3be:	b003      	add	sp, #12
 800e3c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3c2:	bf00      	nop
 800e3c4:	08017cc8 	.word	0x08017cc8
 800e3c8:	08017ce0 	.word	0x08017ce0
 800e3cc:	08018400 	.word	0x08018400

0800e3d0 <RegionCN470RxConfig>:

bool RegionCN470RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800e3d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3d4:	b08b      	sub	sp, #44	; 0x2c
 800e3d6:	4604      	mov	r4, r0
 800e3d8:	460e      	mov	r6, r1
#if defined( REGION_CN470 )
    int8_t dr = rxConfig->Datarate;
 800e3da:	f990 7001 	ldrsb.w	r7, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800e3de:	6845      	ldr	r5, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800e3e0:	4b26      	ldr	r3, [pc, #152]	; (800e47c <RegionCN470RxConfig+0xac>)
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	4798      	blx	r3
 800e3e6:	2800      	cmp	r0, #0
 800e3e8:	d145      	bne.n	800e476 <RegionCN470RxConfig+0xa6>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800e3ea:	7ce3      	ldrb	r3, [r4, #19]
 800e3ec:	b973      	cbnz	r3, 800e40c <RegionCN470RxConfig+0x3c>
    {
        // Apply window 1 frequency
        frequency = CN470_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 48 ) * CN470_STEPWIDTH_RX1_CHANNEL;
 800e3ee:	7825      	ldrb	r5, [r4, #0]
 800e3f0:	f1a3 3355 	sub.w	r3, r3, #1431655765	; 0x55555555
 800e3f4:	fba3 2305 	umull	r2, r3, r3, r5
 800e3f8:	095b      	lsrs	r3, r3, #5
 800e3fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e3fe:	eba5 1503 	sub.w	r5, r5, r3, lsl #4
 800e402:	b2ed      	uxtb	r5, r5
 800e404:	4a1e      	ldr	r2, [pc, #120]	; (800e480 <RegionCN470RxConfig+0xb0>)
 800e406:	4b1f      	ldr	r3, [pc, #124]	; (800e484 <RegionCN470RxConfig+0xb4>)
 800e408:	fb02 3505 	mla	r5, r2, r5, r3
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesCN470[dr];
 800e40c:	4b1e      	ldr	r3, [pc, #120]	; (800e488 <RegionCN470RxConfig+0xb8>)
 800e40e:	f913 9007 	ldrsb.w	r9, [r3, r7]

    Radio.SetChannel( frequency );
 800e412:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800e47c <RegionCN470RxConfig+0xac>
 800e416:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e41a:	4628      	mov	r0, r5
 800e41c:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800e41e:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800e422:	7ca3      	ldrb	r3, [r4, #18]
 800e424:	9309      	str	r3, [sp, #36]	; 0x24
 800e426:	2001      	movs	r0, #1
 800e428:	9008      	str	r0, [sp, #32]
 800e42a:	2200      	movs	r2, #0
 800e42c:	9207      	str	r2, [sp, #28]
 800e42e:	9206      	str	r2, [sp, #24]
 800e430:	9205      	str	r2, [sp, #20]
 800e432:	9204      	str	r2, [sp, #16]
 800e434:	9203      	str	r2, [sp, #12]
 800e436:	8923      	ldrh	r3, [r4, #8]
 800e438:	9302      	str	r3, [sp, #8]
 800e43a:	2308      	movs	r3, #8
 800e43c:	9301      	str	r3, [sp, #4]
 800e43e:	9200      	str	r2, [sp, #0]
 800e440:	4603      	mov	r3, r0
 800e442:	464a      	mov	r2, r9
 800e444:	78a1      	ldrb	r1, [r4, #2]
 800e446:	47c0      	blx	r8
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800e448:	7c63      	ldrb	r3, [r4, #17]
 800e44a:	b18b      	cbz	r3, 800e470 <RegionCN470RxConfig+0xa0>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterCN470[dr];
 800e44c:	4b0f      	ldr	r3, [pc, #60]	; (800e48c <RegionCN470RxConfig+0xbc>)
 800e44e:	5dd9      	ldrb	r1, [r3, r7]
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateCN470[dr];
    }
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800e450:	4b0a      	ldr	r3, [pc, #40]	; (800e47c <RegionCN470RxConfig+0xac>)
 800e452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e454:	310d      	adds	r1, #13
 800e456:	b2c9      	uxtb	r1, r1
 800e458:	2001      	movs	r0, #1
 800e45a:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800e45c:	463a      	mov	r2, r7
 800e45e:	4629      	mov	r1, r5
 800e460:	7ce0      	ldrb	r0, [r4, #19]
 800e462:	f001 fb8f 	bl	800fb84 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800e466:	7037      	strb	r7, [r6, #0]
    return true;
 800e468:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_CN470 */
}
 800e46a:	b00b      	add	sp, #44	; 0x2c
 800e46c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateCN470[dr];
 800e470:	4b07      	ldr	r3, [pc, #28]	; (800e490 <RegionCN470RxConfig+0xc0>)
 800e472:	5dd9      	ldrb	r1, [r3, r7]
 800e474:	e7ec      	b.n	800e450 <RegionCN470RxConfig+0x80>
        return false;
 800e476:	2000      	movs	r0, #0
 800e478:	e7f7      	b.n	800e46a <RegionCN470RxConfig+0x9a>
 800e47a:	bf00      	nop
 800e47c:	08018400 	.word	0x08018400
 800e480:	00030d40 	.word	0x00030d40
 800e484:	1dd1f8e0 	.word	0x1dd1f8e0
 800e488:	08017ce0 	.word	0x08017ce0
 800e48c:	08017cf0 	.word	0x08017cf0
 800e490:	08017ce8 	.word	0x08017ce8

0800e494 <RegionCN470TxConfig>:

bool RegionCN470TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800e494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e498:	b08d      	sub	sp, #52	; 0x34
 800e49a:	4604      	mov	r4, r0
 800e49c:	910b      	str	r1, [sp, #44]	; 0x2c
 800e49e:	4690      	mov	r8, r2
#if defined( REGION_CN470 )
    int8_t phyDr = DataratesCN470[txConfig->Datarate];
 800e4a0:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e4a4:	4a31      	ldr	r2, [pc, #196]	; (800e56c <RegionCN470TxConfig+0xd8>)
 800e4a6:	f912 b003 	ldrsb.w	fp, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800e4aa:	4b31      	ldr	r3, [pc, #196]	; (800e570 <RegionCN470TxConfig+0xdc>)
 800e4ac:	6819      	ldr	r1, [r3, #0]
 800e4ae:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e578 <RegionCN470TxConfig+0xe4>
 800e4b2:	f8da 3000 	ldr.w	r3, [sl]
 800e4b6:	7802      	ldrb	r2, [r0, #0]
 800e4b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e4bc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e4c0:	7a53      	ldrb	r3, [r2, #9]
 800e4c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e4c6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800e4ca:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800e4ce:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800e4d2:	f001 fb40 	bl	800fb56 <RegionCommonLimitTxPower>
 800e4d6:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsCN470 );
 800e4d8:	4926      	ldr	r1, [pc, #152]	; (800e574 <RegionCN470TxConfig+0xe0>)
 800e4da:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e4de:	f001 fb3f 	bl	800fb60 <RegionCommonGetBandwidth>
 800e4e2:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800e4e4:	68a2      	ldr	r2, [r4, #8]
 800e4e6:	6861      	ldr	r1, [r4, #4]
 800e4e8:	4630      	mov	r0, r6
 800e4ea:	f001 fa51 	bl	800f990 <RegionCommonComputeTxPower>
 800e4ee:	4607      	mov	r7, r0

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800e4f0:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800e57c <RegionCN470TxConfig+0xe8>
 800e4f4:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800e4f8:	f8da 1000 	ldr.w	r1, [sl]
 800e4fc:	7823      	ldrb	r3, [r4, #0]
 800e4fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e502:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800e506:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800e508:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800e50c:	9308      	str	r3, [sp, #32]
 800e50e:	2200      	movs	r2, #0
 800e510:	9207      	str	r2, [sp, #28]
 800e512:	9206      	str	r2, [sp, #24]
 800e514:	9205      	str	r2, [sp, #20]
 800e516:	2501      	movs	r5, #1
 800e518:	9504      	str	r5, [sp, #16]
 800e51a:	9203      	str	r2, [sp, #12]
 800e51c:	2308      	movs	r3, #8
 800e51e:	9302      	str	r3, [sp, #8]
 800e520:	9501      	str	r5, [sp, #4]
 800e522:	f8cd b000 	str.w	fp, [sp]
 800e526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e528:	4639      	mov	r1, r7
 800e52a:	4628      	mov	r0, r5
 800e52c:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800e530:	47b8      	blx	r7
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800e532:	f8da 2000 	ldr.w	r2, [sl]
 800e536:	7823      	ldrb	r3, [r4, #0]
 800e538:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e53c:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800e540:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e544:	f001 fb4e 	bl	800fbe4 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800e548:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 800e54c:	7b21      	ldrb	r1, [r4, #12]
 800e54e:	4628      	mov	r0, r5
 800e550:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800e552:	89a1      	ldrh	r1, [r4, #12]
 800e554:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e558:	f7ff fd22 	bl	800dfa0 <GetTimeOnAir>
 800e55c:	f8c8 0000 	str.w	r0, [r8]

    *txPower = txPowerLimited;
 800e560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e562:	701e      	strb	r6, [r3, #0]
    return true;
#else
    return false;
#endif /* REGION_CN470 */
}
 800e564:	4628      	mov	r0, r5
 800e566:	b00d      	add	sp, #52	; 0x34
 800e568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e56c:	08017ce0 	.word	0x08017ce0
 800e570:	20001438 	.word	0x20001438
 800e574:	08017cc8 	.word	0x08017cc8
 800e578:	2000143c 	.word	0x2000143c
 800e57c:	08018400 	.word	0x08018400

0800e580 <RegionCN470LinkAdrReq>:

uint8_t RegionCN470LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800e580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e584:	b091      	sub	sp, #68	; 0x44
 800e586:	4680      	mov	r8, r0
 800e588:	468b      	mov	fp, r1
 800e58a:	4692      	mov	sl, r2
 800e58c:	4699      	mov	r9, r3
    uint8_t status = 0x07;
#if defined( REGION_CN470 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800e58e:	2600      	movs	r6, #0
 800e590:	960e      	str	r6, [sp, #56]	; 0x38
 800e592:	f8ad 603c 	strh.w	r6, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 800e596:	960b      	str	r6, [sp, #44]	; 0x2c
 800e598:	960c      	str	r6, [sp, #48]	; 0x30
 800e59a:	960d      	str	r6, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800e59c:	4b59      	ldr	r3, [pc, #356]	; (800e704 <RegionCN470LinkAdrReq+0x184>)
 800e59e:	6819      	ldr	r1, [r3, #0]
 800e5a0:	2206      	movs	r2, #6
 800e5a2:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 800e5a6:	a80b      	add	r0, sp, #44	; 0x2c
 800e5a8:	f001 f891 	bl	800f6ce <RegionCommonChanMaskCopy>
    uint8_t status = 0x07;
 800e5ac:	2707      	movs	r7, #7

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800e5ae:	e00e      	b.n	800e5ce <RegionCN470LinkAdrReq+0x4e>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 800e5b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e5b4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 800e5b8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 800e5bc:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 800e5c0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = 0xFFFF;
 800e5c4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
            channelsMask[5] = 0xFFFF;
 800e5c8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        status = 0x07;
 800e5cc:	2707      	movs	r7, #7
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800e5ce:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e5d2:	42b3      	cmp	r3, r6
 800e5d4:	d932      	bls.n	800e63c <RegionCN470LinkAdrReq+0xbc>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800e5d6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e5da:	a90e      	add	r1, sp, #56	; 0x38
 800e5dc:	4430      	add	r0, r6
 800e5de:	f001 f927 	bl	800f830 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800e5e2:	b358      	cbz	r0, 800e63c <RegionCN470LinkAdrReq+0xbc>
        bytesProcessed += nextIndex;
 800e5e4:	4406      	add	r6, r0
 800e5e6:	b2f6      	uxtb	r6, r6
        if( linkAdrParams.ChMaskCtrl == 6 )
 800e5e8:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 800e5ec:	2a06      	cmp	r2, #6
 800e5ee:	d0df      	beq.n	800e5b0 <RegionCN470LinkAdrReq+0x30>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800e5f0:	2a07      	cmp	r2, #7
 800e5f2:	d101      	bne.n	800e5f8 <RegionCN470LinkAdrReq+0x78>
        {
            status &= 0xFE; // Channel mask KO
 800e5f4:	2706      	movs	r7, #6
 800e5f6:	e7ea      	b.n	800e5ce <RegionCN470LinkAdrReq+0x4e>
        }
        else
        {
            for( uint8_t i = 0; i < 16; i++ )
 800e5f8:	2400      	movs	r4, #0
        status = 0x07;
 800e5fa:	2707      	movs	r7, #7
 800e5fc:	e001      	b.n	800e602 <RegionCN470LinkAdrReq+0x82>
            for( uint8_t i = 0; i < 16; i++ )
 800e5fe:	3401      	adds	r4, #1
 800e600:	b2e4      	uxtb	r4, r4
 800e602:	2c0f      	cmp	r4, #15
 800e604:	d812      	bhi.n	800e62c <RegionCN470LinkAdrReq+0xac>
            {
                if( ( ( linkAdrParams.ChMask & ( 1 << i ) ) != 0 ) &&
 800e606:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800e60a:	4125      	asrs	r5, r4
 800e60c:	f015 0f01 	tst.w	r5, #1
 800e610:	d0f5      	beq.n	800e5fe <RegionCN470LinkAdrReq+0x7e>
                    ( RegionNvmGroup2->Channels[linkAdrParams.ChMaskCtrl * 16 + i].Frequency == 0 ) )
 800e612:	4b3c      	ldr	r3, [pc, #240]	; (800e704 <RegionCN470LinkAdrReq+0x184>)
 800e614:	6819      	ldr	r1, [r3, #0]
 800e616:	eb04 1302 	add.w	r3, r4, r2, lsl #4
 800e61a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e61e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                if( ( ( linkAdrParams.ChMask & ( 1 << i ) ) != 0 ) &&
 800e622:	2b00      	cmp	r3, #0
 800e624:	d1eb      	bne.n	800e5fe <RegionCN470LinkAdrReq+0x7e>
                {// Trying to enable an undefined channel
                    status &= 0xFE; // Channel mask KO
 800e626:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 800e62a:	e7e8      	b.n	800e5fe <RegionCN470LinkAdrReq+0x7e>
                }
            }
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800e62c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800e630:	a910      	add	r1, sp, #64	; 0x40
 800e632:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800e636:	f822 3c14 	strh.w	r3, [r2, #-20]
 800e63a:	e7c8      	b.n	800e5ce <RegionCN470LinkAdrReq+0x4e>
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800e63c:	2302      	movs	r3, #2
 800e63e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800e642:	f898 3009 	ldrb.w	r3, [r8, #9]
 800e646:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionCN470GetPhyParam( &getPhy );
 800e64a:	a809      	add	r0, sp, #36	; 0x24
 800e64c:	f7ff fcc6 	bl	800dfdc <RegionCN470GetPhyParam>

    linkAdrVerifyParams.Status = status;
 800e650:	f88d 7004 	strb.w	r7, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800e654:	f898 300a 	ldrb.w	r3, [r8, #10]
 800e658:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800e65c:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800e660:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800e664:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800e668:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800e66c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800e670:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800e674:	f998 300b 	ldrsb.w	r3, [r8, #11]
 800e678:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800e67c:	f998 300c 	ldrsb.w	r3, [r8, #12]
 800e680:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800e684:	f998 300d 	ldrsb.w	r3, [r8, #13]
 800e688:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = CN470_MAX_NB_CHANNELS;
 800e68c:	2360      	movs	r3, #96	; 0x60
 800e68e:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800e692:	ab0b      	add	r3, sp, #44	; 0x2c
 800e694:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800e696:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = CN470_TX_MAX_DATARATE;
 800e69a:	2305      	movs	r3, #5
 800e69c:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800e6a0:	4b18      	ldr	r3, [pc, #96]	; (800e704 <RegionCN470LinkAdrReq+0x184>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = CN470_MIN_TX_POWER;
 800e6a6:	2307      	movs	r3, #7
 800e6a8:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = CN470_MAX_TX_POWER;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800e6b2:	f8d8 3000 	ldr.w	r3, [r8]
 800e6b6:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800e6b8:	ab0e      	add	r3, sp, #56	; 0x38
 800e6ba:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800e6be:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 800e6c2:	4668      	mov	r0, sp
 800e6c4:	f001 f8d0 	bl	800f868 <RegionCommonLinkAdrReqVerifyParams>
 800e6c8:	4604      	mov	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800e6ca:	2807      	cmp	r0, #7
 800e6cc:	d011      	beq.n	800e6f2 <RegionCN470LinkAdrReq+0x172>
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800e6ce:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800e6d2:	f88b 3000 	strb.w	r3, [fp]
    *txPowOut = linkAdrParams.TxPower;
 800e6d6:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800e6da:	f88a 3000 	strb.w	r3, [sl]
    *nbRepOut = linkAdrParams.NbRep;
 800e6de:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800e6e2:	f889 3000 	strb.w	r3, [r9]
    *nbBytesParsed = bytesProcessed;
 800e6e6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e6e8:	701e      	strb	r6, [r3, #0]

#endif /* REGION_CN470 */
    return status;
}
 800e6ea:	4620      	mov	r0, r4
 800e6ec:	b011      	add	sp, #68	; 0x44
 800e6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800e6f2:	4b04      	ldr	r3, [pc, #16]	; (800e704 <RegionCN470LinkAdrReq+0x184>)
 800e6f4:	6818      	ldr	r0, [r3, #0]
 800e6f6:	2206      	movs	r2, #6
 800e6f8:	a90b      	add	r1, sp, #44	; 0x2c
 800e6fa:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800e6fe:	f000 ffe6 	bl	800f6ce <RegionCommonChanMaskCopy>
 800e702:	e7e4      	b.n	800e6ce <RegionCN470LinkAdrReq+0x14e>
 800e704:	2000143c 	.word	0x2000143c

0800e708 <RegionCN470RxParamSetupReq>:

uint8_t RegionCN470RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800e708:	b538      	push	{r3, r4, r5, lr}
 800e70a:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_CN470 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800e70c:	6840      	ldr	r0, [r0, #4]
 800e70e:	f7ff fc19 	bl	800df44 <VerifyRfFreq>
 800e712:	b1a0      	cbz	r0, 800e73e <RegionCN470RxParamSetupReq+0x36>
    uint8_t status = 0x07;
 800e714:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, CN470_RX_MIN_DATARATE, CN470_RX_MAX_DATARATE ) == false )
 800e716:	2205      	movs	r2, #5
 800e718:	2100      	movs	r1, #0
 800e71a:	f994 0000 	ldrsb.w	r0, [r4]
 800e71e:	f000 ff64 	bl	800f5ea <RegionCommonValueInRange>
 800e722:	b908      	cbnz	r0, 800e728 <RegionCN470RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800e724:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, CN470_MIN_RX1_DR_OFFSET, CN470_MAX_RX1_DR_OFFSET ) == false )
 800e728:	2205      	movs	r2, #5
 800e72a:	2100      	movs	r1, #0
 800e72c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e730:	f000 ff5b 	bl	800f5ea <RegionCommonValueInRange>
 800e734:	b908      	cbnz	r0, 800e73a <RegionCN470RxParamSetupReq+0x32>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800e736:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_CN470 */
    return status;
}
 800e73a:	4628      	mov	r0, r5
 800e73c:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800e73e:	2506      	movs	r5, #6
 800e740:	e7e9      	b.n	800e716 <RegionCN470RxParamSetupReq+0xe>

0800e742 <RegionCN470NewChannelReq>:

int8_t RegionCN470NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 800e742:	f04f 30ff 	mov.w	r0, #4294967295
 800e746:	4770      	bx	lr

0800e748 <RegionCN470TxParamSetupReq>:

int8_t RegionCN470TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800e748:	f04f 30ff 	mov.w	r0, #4294967295
 800e74c:	4770      	bx	lr

0800e74e <RegionCN470DlChannelReq>:

int8_t RegionCN470DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 800e74e:	f04f 30ff 	mov.w	r0, #4294967295
 800e752:	4770      	bx	lr

0800e754 <RegionCN470AlternateDr>:
#if defined( REGION_CN470 )
    return currentDr;
#else
    return -1;
#endif /* REGION_CN470 */
}
 800e754:	4770      	bx	lr
	...

0800e758 <RegionCN470NextChannel>:

LoRaMacStatus_t RegionCN470NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800e758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e75c:	b0aa      	sub	sp, #168	; 0xa8
 800e75e:	4604      	mov	r4, r0
 800e760:	4688      	mov	r8, r1
 800e762:	4617      	mov	r7, r2
 800e764:	461e      	mov	r6, r3
#if defined( REGION_CN470 )
    uint8_t nbEnabledChannels = 0;
 800e766:	2500      	movs	r5, #0
 800e768:	f88d 50a7 	strb.w	r5, [sp, #167]	; 0xa7
    uint8_t nbRestrictedChannels = 0;
 800e76c:	f88d 50a6 	strb.w	r5, [sp, #166]	; 0xa6
    uint8_t enabledChannels[CN470_MAX_NB_CHANNELS] = { 0 };
 800e770:	9511      	str	r5, [sp, #68]	; 0x44
 800e772:	225c      	movs	r2, #92	; 0x5c
 800e774:	4629      	mov	r1, r5
 800e776:	a812      	add	r0, sp, #72	; 0x48
 800e778:	f008 fe7a 	bl	8017470 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, CHANNELS_MASK_SIZE ) == 0 )
 800e77c:	4b31      	ldr	r3, [pc, #196]	; (800e844 <RegionCN470NextChannel+0xec>)
 800e77e:	6818      	ldr	r0, [r3, #0]
 800e780:	2206      	movs	r2, #6
 800e782:	4629      	mov	r1, r5
 800e784:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800e788:	f000 ff8b 	bl	800f6a2 <RegionCommonCountChannels>
 800e78c:	b978      	cbnz	r0, 800e7ae <RegionCN470NextChannel+0x56>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] = 0xFFFF;
 800e78e:	4b2d      	ldr	r3, [pc, #180]	; (800e844 <RegionCN470NextChannel+0xec>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e796:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
        RegionNvmGroup2->ChannelsMask[1] = 0xFFFF;
 800e79a:	f8a3 2482 	strh.w	r2, [r3, #1154]	; 0x482
        RegionNvmGroup2->ChannelsMask[2] = 0xFFFF;
 800e79e:	f8a3 2484 	strh.w	r2, [r3, #1156]	; 0x484
        RegionNvmGroup2->ChannelsMask[3] = 0xFFFF;
 800e7a2:	f8a3 2486 	strh.w	r2, [r3, #1158]	; 0x486
        RegionNvmGroup2->ChannelsMask[4] = 0xFFFF;
 800e7a6:	f8a3 2488 	strh.w	r2, [r3, #1160]	; 0x488
        RegionNvmGroup2->ChannelsMask[5] = 0xFFFF;
 800e7aa:	f8a3 248a 	strh.w	r2, [r3, #1162]	; 0x48a
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800e7ae:	7a63      	ldrb	r3, [r4, #9]
 800e7b0:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800e7b4:	7a23      	ldrb	r3, [r4, #8]
 800e7b6:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800e7ba:	4b22      	ldr	r3, [pc, #136]	; (800e844 <RegionCN470NextChannel+0xec>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f503 6290 	add.w	r2, r3, #1152	; 0x480
 800e7c2:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800e7c4:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800e7c6:	4b20      	ldr	r3, [pc, #128]	; (800e848 <RegionCN470NextChannel+0xf0>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = CN470_MAX_NB_CHANNELS;
 800e7cc:	2360      	movs	r3, #96	; 0x60
 800e7ce:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800e7d6:	6823      	ldr	r3, [r4, #0]
 800e7d8:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800e7da:	6863      	ldr	r3, [r4, #4]
 800e7dc:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800e7de:	7aa3      	ldrb	r3, [r4, #10]
 800e7e0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = CN470_MAX_NB_BANDS;
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800e7ea:	ab0c      	add	r3, sp, #48	; 0x30
 800e7ec:	6921      	ldr	r1, [r4, #16]
 800e7ee:	68e0      	ldr	r0, [r4, #12]
 800e7f0:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800e7f4:	7d23      	ldrb	r3, [r4, #20]
 800e7f6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800e7fa:	8ae1      	ldrh	r1, [r4, #22]
 800e7fc:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800e800:	f7ff fbce 	bl	800dfa0 <GetTimeOnAir>
 800e804:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800e806:	ab03      	add	r3, sp, #12
 800e808:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800e80a:	9701      	str	r7, [sp, #4]
 800e80c:	f10d 03a6 	add.w	r3, sp, #166	; 0xa6
 800e810:	9300      	str	r3, [sp, #0]
 800e812:	f10d 03a7 	add.w	r3, sp, #167	; 0xa7
 800e816:	aa11      	add	r2, sp, #68	; 0x44
 800e818:	4631      	mov	r1, r6
 800e81a:	a809      	add	r0, sp, #36	; 0x24
 800e81c:	f001 f934 	bl	800fa88 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800e820:	4604      	mov	r4, r0
 800e822:	b118      	cbz	r0, 800e82c <RegionCN470NextChannel+0xd4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_CN470 */
}
 800e824:	4620      	mov	r0, r4
 800e826:	b02a      	add	sp, #168	; 0xa8
 800e828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800e82c:	f89d 10a7 	ldrb.w	r1, [sp, #167]	; 0xa7
 800e830:	3901      	subs	r1, #1
 800e832:	f005 feb5 	bl	80145a0 <randr>
 800e836:	ab2a      	add	r3, sp, #168	; 0xa8
 800e838:	4418      	add	r0, r3
 800e83a:	f810 3c64 	ldrb.w	r3, [r0, #-100]
 800e83e:	f888 3000 	strb.w	r3, [r8]
 800e842:	e7ef      	b.n	800e824 <RegionCN470NextChannel+0xcc>
 800e844:	2000143c 	.word	0x2000143c
 800e848:	20001438 	.word	0x20001438

0800e84c <RegionCN470SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionCN470SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800e84c:	b538      	push	{r3, r4, r5, lr}
 800e84e:	4604      	mov	r4, r0
#if defined( REGION_CN470 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800e850:	4b12      	ldr	r3, [pc, #72]	; (800e89c <RegionCN470SetContinuousWave+0x50>)
 800e852:	6819      	ldr	r1, [r3, #0]
 800e854:	4d12      	ldr	r5, [pc, #72]	; (800e8a0 <RegionCN470SetContinuousWave+0x54>)
 800e856:	682b      	ldr	r3, [r5, #0]
 800e858:	7802      	ldrb	r2, [r0, #0]
 800e85a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e85e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e862:	7a53      	ldrb	r3, [r2, #9]
 800e864:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e868:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800e86c:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800e870:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800e874:	f001 f96f 	bl	800fb56 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800e878:	682a      	ldr	r2, [r5, #0]
 800e87a:	7823      	ldrb	r3, [r4, #0]
 800e87c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e880:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800e884:	68a2      	ldr	r2, [r4, #8]
 800e886:	6861      	ldr	r1, [r4, #4]
 800e888:	f001 f882 	bl	800f990 <RegionCommonComputeTxPower>
 800e88c:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800e88e:	4b05      	ldr	r3, [pc, #20]	; (800e8a4 <RegionCN470SetContinuousWave+0x58>)
 800e890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e892:	89a2      	ldrh	r2, [r4, #12]
 800e894:	4628      	mov	r0, r5
 800e896:	4798      	blx	r3
#endif /* REGION_CN470 */
}
 800e898:	bd38      	pop	{r3, r4, r5, pc}
 800e89a:	bf00      	nop
 800e89c:	20001438 	.word	0x20001438
 800e8a0:	2000143c 	.word	0x2000143c
 800e8a4:	08018400 	.word	0x08018400

0800e8a8 <RegionCN470ApplyDrOffset>:

uint8_t RegionCN470ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_CN470 )
    int8_t datarate = dr - drOffset;
 800e8a8:	1a88      	subs	r0, r1, r2
 800e8aa:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800e8ac:	2800      	cmp	r0, #0
 800e8ae:	db01      	blt.n	800e8b4 <RegionCN470ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_CN470 */
}
 800e8b0:	b2c0      	uxtb	r0, r0
 800e8b2:	4770      	bx	lr
        datarate = DR_0;
 800e8b4:	2000      	movs	r0, #0
 800e8b6:	e7fb      	b.n	800e8b0 <RegionCN470ApplyDrOffset+0x8>

0800e8b8 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 800e8b8:	b510      	push	{r4, lr}
 800e8ba:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800e8bc:	4b05      	ldr	r3, [pc, #20]	; (800e8d4 <VerifyRfFreq+0x1c>)
 800e8be:	6a1b      	ldr	r3, [r3, #32]
 800e8c0:	4798      	blx	r3
 800e8c2:	b120      	cbz	r0, 800e8ce <VerifyRfFreq+0x16>
    {
        return false;
    }

    if( ( freq < 779500000 ) || ( freq > 786500000 ) )
 800e8c4:	4b04      	ldr	r3, [pc, #16]	; (800e8d8 <VerifyRfFreq+0x20>)
 800e8c6:	4423      	add	r3, r4
 800e8c8:	4a04      	ldr	r2, [pc, #16]	; (800e8dc <VerifyRfFreq+0x24>)
 800e8ca:	4293      	cmp	r3, r2
 800e8cc:	d800      	bhi.n	800e8d0 <VerifyRfFreq+0x18>
    {
        return false;
    }
    return true;
}
 800e8ce:	bd10      	pop	{r4, pc}
        return false;
 800e8d0:	2000      	movs	r0, #0
 800e8d2:	e7fc      	b.n	800e8ce <VerifyRfFreq+0x16>
 800e8d4:	08018400 	.word	0x08018400
 800e8d8:	d189c620 	.word	0xd189c620
 800e8dc:	006acfc0 	.word	0x006acfc0

0800e8e0 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800e8e0:	b570      	push	{r4, r5, r6, lr}
 800e8e2:	b084      	sub	sp, #16
 800e8e4:	4605      	mov	r5, r0
 800e8e6:	460c      	mov	r4, r1
    int8_t phyDr = DataratesCN779[datarate];
 800e8e8:	4b13      	ldr	r3, [pc, #76]	; (800e938 <GetTimeOnAir+0x58>)
 800e8ea:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsCN779 );
 800e8ec:	4913      	ldr	r1, [pc, #76]	; (800e93c <GetTimeOnAir+0x5c>)
 800e8ee:	f001 f937 	bl	800fb60 <RegionCommonGetBandwidth>
 800e8f2:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800e8f4:	2d07      	cmp	r5, #7
 800e8f6:	d00e      	beq.n	800e916 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800e8f8:	4b11      	ldr	r3, [pc, #68]	; (800e940 <GetTimeOnAir+0x60>)
 800e8fa:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800e8fc:	2001      	movs	r0, #1
 800e8fe:	9003      	str	r0, [sp, #12]
 800e900:	b2e4      	uxtb	r4, r4
 800e902:	9402      	str	r4, [sp, #8]
 800e904:	2300      	movs	r3, #0
 800e906:	9301      	str	r3, [sp, #4]
 800e908:	2308      	movs	r3, #8
 800e90a:	9300      	str	r3, [sp, #0]
 800e90c:	4603      	mov	r3, r0
 800e90e:	4632      	mov	r2, r6
 800e910:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800e912:	b004      	add	sp, #16
 800e914:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800e916:	4b0a      	ldr	r3, [pc, #40]	; (800e940 <GetTimeOnAir+0x60>)
 800e918:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800e91a:	2301      	movs	r3, #1
 800e91c:	9303      	str	r3, [sp, #12]
 800e91e:	b2e4      	uxtb	r4, r4
 800e920:	9402      	str	r4, [sp, #8]
 800e922:	2000      	movs	r0, #0
 800e924:	9001      	str	r0, [sp, #4]
 800e926:	2305      	movs	r3, #5
 800e928:	9300      	str	r3, [sp, #0]
 800e92a:	4603      	mov	r3, r0
 800e92c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e930:	fb02 f206 	mul.w	r2, r2, r6
 800e934:	47a8      	blx	r5
 800e936:	e7ec      	b.n	800e912 <GetTimeOnAir+0x32>
 800e938:	08017d18 	.word	0x08017d18
 800e93c:	08017cf8 	.word	0x08017cf8
 800e940:	08018400 	.word	0x08018400

0800e944 <RegionCN779GetPhyParam>:
#endif /* REGION_CN779 */

PhyParam_t RegionCN779GetPhyParam( GetPhyParams_t* getPhy )
{
 800e944:	b500      	push	{lr}
 800e946:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800e948:	2300      	movs	r3, #0
 800e94a:	9304      	str	r3, [sp, #16]

#if defined( REGION_CN779 )
    switch( getPhy->Attribute )
 800e94c:	7803      	ldrb	r3, [r0, #0]
 800e94e:	3b0b      	subs	r3, #11
 800e950:	2b2e      	cmp	r3, #46	; 0x2e
 800e952:	d830      	bhi.n	800e9b6 <RegionCN779GetPhyParam+0x72>
 800e954:	e8df f003 	tbb	[pc, r3]
 800e958:	3f393633 	.word	0x3f393633
 800e95c:	504c4845 	.word	0x504c4845
 800e960:	605c5854 	.word	0x605c5854
 800e964:	6c2f692f 	.word	0x6c2f692f
 800e968:	2f7b7872 	.word	0x2f7b7872
 800e96c:	18827f2f 	.word	0x18827f2f
 800e970:	2f2f2f2f 	.word	0x2f2f2f2f
 800e974:	2f2f2f2f 	.word	0x2f2f2f2f
 800e978:	2f2f2f2f 	.word	0x2f2f2f2f
 800e97c:	9288852f 	.word	0x9288852f
 800e980:	98952f2f 	.word	0x98952f2f
 800e984:	9b2f      	.short	0x9b2f
 800e986:	a1          	.byte	0xa1
 800e987:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800e988:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800e98c:	f88d 3004 	strb.w	r3, [sp, #4]
 800e990:	2307      	movs	r3, #7
 800e992:	f88d 3005 	strb.w	r3, [sp, #5]
 800e996:	2300      	movs	r3, #0
 800e998:	f88d 3006 	strb.w	r3, [sp, #6]
 800e99c:	2310      	movs	r3, #16
 800e99e:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )CN779_TX_MAX_DATARATE,
                .MinDr = ( int8_t )CN779_TX_MIN_DATARATE,
                .NbChannels = CN779_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800e9a2:	4b41      	ldr	r3, [pc, #260]	; (800eaa8 <RegionCN779GetPhyParam+0x164>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800e9aa:	9202      	str	r2, [sp, #8]
 800e9ac:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800e9ae:	a801      	add	r0, sp, #4
 800e9b0:	f001 f8b2 	bl	800fb18 <RegionCommonGetNextLowerTxDr>
 800e9b4:	9004      	str	r0, [sp, #16]
        }
    }

#endif /* REGION_CN779 */
    return phyParam;
}
 800e9b6:	9804      	ldr	r0, [sp, #16]
 800e9b8:	b007      	add	sp, #28
 800e9ba:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800e9be:	2340      	movs	r3, #64	; 0x40
 800e9c0:	9304      	str	r3, [sp, #16]
            break;
 800e9c2:	e7f8      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800e9c4:	2320      	movs	r3, #32
 800e9c6:	9304      	str	r3, [sp, #16]
            break;
 800e9c8:	e7f5      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateCN779[getPhy->Datarate];
 800e9ca:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e9ce:	4a37      	ldr	r2, [pc, #220]	; (800eaac <RegionCN779GetPhyParam+0x168>)
 800e9d0:	5cd3      	ldrb	r3, [r2, r3]
 800e9d2:	9304      	str	r3, [sp, #16]
            break;
 800e9d4:	e7ef      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterCN779[getPhy->Datarate];
 800e9d6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e9da:	4a35      	ldr	r2, [pc, #212]	; (800eab0 <RegionCN779GetPhyParam+0x16c>)
 800e9dc:	5cd3      	ldrb	r3, [r2, r3]
 800e9de:	9304      	str	r3, [sp, #16]
            break;
 800e9e0:	e7e9      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = CN779_DUTY_CYCLE_ENABLED;
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	9304      	str	r3, [sp, #16]
            break;
 800e9e6:	e7e6      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = CN779_MAX_RX_WINDOW;
 800e9e8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800e9ec:	9304      	str	r3, [sp, #16]
            break;
 800e9ee:	e7e2      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800e9f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e9f4:	9304      	str	r3, [sp, #16]
            break;
 800e9f6:	e7de      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800e9f8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e9fc:	9304      	str	r3, [sp, #16]
            break;
 800e9fe:	e7da      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800ea00:	f241 3388 	movw	r3, #5000	; 0x1388
 800ea04:	9304      	str	r3, [sp, #16]
            break;
 800ea06:	e7d6      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800ea08:	f241 7370 	movw	r3, #6000	; 0x1770
 800ea0c:	9304      	str	r3, [sp, #16]
            break;
 800ea0e:	e7d2      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800ea10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ea14:	9304      	str	r3, [sp, #16]
            break;
 800ea16:	e7ce      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800ea18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ea1c:	4825      	ldr	r0, [pc, #148]	; (800eab4 <RegionCN779GetPhyParam+0x170>)
 800ea1e:	f005 fdbf 	bl	80145a0 <randr>
 800ea22:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800ea26:	9004      	str	r0, [sp, #16]
            break;
 800ea28:	e7c5      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = CN779_RX_WND_2_FREQ;
 800ea2a:	4b23      	ldr	r3, [pc, #140]	; (800eab8 <RegionCN779GetPhyParam+0x174>)
 800ea2c:	9304      	str	r3, [sp, #16]
            break;
 800ea2e:	e7c2      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800ea30:	4b1d      	ldr	r3, [pc, #116]	; (800eaa8 <RegionCN779GetPhyParam+0x164>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800ea38:	9304      	str	r3, [sp, #16]
            break;
 800ea3a:	e7bc      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800ea3c:	4b1a      	ldr	r3, [pc, #104]	; (800eaa8 <RegionCN779GetPhyParam+0x164>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800ea44:	9304      	str	r3, [sp, #16]
            break;
 800ea46:	e7b6      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = CN779_MAX_NB_CHANNELS;
 800ea48:	2310      	movs	r3, #16
 800ea4a:	9304      	str	r3, [sp, #16]
            break;
 800ea4c:	e7b3      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800ea4e:	4b16      	ldr	r3, [pc, #88]	; (800eaa8 <RegionCN779GetPhyParam+0x164>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	9304      	str	r3, [sp, #16]
            break;
 800ea54:	e7af      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
            phyParam.fValue = CN779_DEFAULT_MAX_EIRP;
 800ea56:	4b19      	ldr	r3, [pc, #100]	; (800eabc <RegionCN779GetPhyParam+0x178>)
 800ea58:	9304      	str	r3, [sp, #16]
            break;
 800ea5a:	e7ac      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
            phyParam.fValue = CN779_DEFAULT_ANTENNA_GAIN;
 800ea5c:	4b18      	ldr	r3, [pc, #96]	; (800eac0 <RegionCN779GetPhyParam+0x17c>)
 800ea5e:	9304      	str	r3, [sp, #16]
            break;
 800ea60:	e7a9      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = CN779_BEACON_CHANNEL_FREQ;
 800ea62:	4b18      	ldr	r3, [pc, #96]	; (800eac4 <RegionCN779GetPhyParam+0x180>)
 800ea64:	9304      	str	r3, [sp, #16]
            break;
 800ea66:	e7a6      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = CN779_BEACON_SIZE;
 800ea68:	2311      	movs	r3, #17
 800ea6a:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = CN779_RFU1_SIZE;
 800ea6e:	2302      	movs	r3, #2
 800ea70:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = CN779_RFU2_SIZE;
 800ea74:	2300      	movs	r3, #0
 800ea76:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800ea7a:	e79c      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = CN779_BEACON_CHANNEL_DR;
 800ea7c:	2303      	movs	r3, #3
 800ea7e:	9304      	str	r3, [sp, #16]
            break;
 800ea80:	e799      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = CN779_PING_SLOT_CHANNEL_FREQ;
 800ea82:	4b10      	ldr	r3, [pc, #64]	; (800eac4 <RegionCN779GetPhyParam+0x180>)
 800ea84:	9304      	str	r3, [sp, #16]
            break;
 800ea86:	e796      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = CN779_PING_SLOT_CHANNEL_DR;
 800ea88:	2303      	movs	r3, #3
 800ea8a:	9304      	str	r3, [sp, #16]
            break;
 800ea8c:	e793      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = DataratesCN779[getPhy->Datarate];
 800ea8e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ea92:	4a0d      	ldr	r2, [pc, #52]	; (800eac8 <RegionCN779GetPhyParam+0x184>)
 800ea94:	5cd3      	ldrb	r3, [r2, r3]
 800ea96:	9304      	str	r3, [sp, #16]
            break;
 800ea98:	e78d      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsCN779 );
 800ea9a:	490c      	ldr	r1, [pc, #48]	; (800eacc <RegionCN779GetPhyParam+0x188>)
 800ea9c:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800eaa0:	f001 f85e 	bl	800fb60 <RegionCommonGetBandwidth>
 800eaa4:	9004      	str	r0, [sp, #16]
            break;
 800eaa6:	e786      	b.n	800e9b6 <RegionCN779GetPhyParam+0x72>
 800eaa8:	20001444 	.word	0x20001444
 800eaac:	08017d20 	.word	0x08017d20
 800eab0:	08017d28 	.word	0x08017d28
 800eab4:	fffffc18 	.word	0xfffffc18
 800eab8:	2ed96880 	.word	0x2ed96880
 800eabc:	41426666 	.word	0x41426666
 800eac0:	4009999a 	.word	0x4009999a
 800eac4:	2eca2640 	.word	0x2eca2640
 800eac8:	08017d18 	.word	0x08017d18
 800eacc:	08017cf8 	.word	0x08017cf8

0800ead0 <RegionCN779SetBandTxDone>:

void RegionCN779SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800ead0:	b530      	push	{r4, r5, lr}
 800ead2:	b083      	sub	sp, #12
#if defined( REGION_CN779 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800ead4:	4b0b      	ldr	r3, [pc, #44]	; (800eb04 <RegionCN779SetBandTxDone+0x34>)
 800ead6:	681d      	ldr	r5, [r3, #0]
 800ead8:	4b0b      	ldr	r3, [pc, #44]	; (800eb08 <RegionCN779SetBandTxDone+0x38>)
 800eada:	681a      	ldr	r2, [r3, #0]
 800eadc:	7803      	ldrb	r3, [r0, #0]
 800eade:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800eae2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eae6:	7a5b      	ldrb	r3, [r3, #9]
 800eae8:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800eaec:	6903      	ldr	r3, [r0, #16]
 800eaee:	9300      	str	r3, [sp, #0]
 800eaf0:	68c3      	ldr	r3, [r0, #12]
 800eaf2:	7842      	ldrb	r2, [r0, #1]
 800eaf4:	6881      	ldr	r1, [r0, #8]
 800eaf6:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 800eafa:	f000 fdf9 	bl	800f6f0 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_CN779 */
}
 800eafe:	b003      	add	sp, #12
 800eb00:	bd30      	pop	{r4, r5, pc}
 800eb02:	bf00      	nop
 800eb04:	20001440 	.word	0x20001440
 800eb08:	20001444 	.word	0x20001444

0800eb0c <RegionCN779InitDefaults>:

void RegionCN779InitDefaults( InitDefaultsParams_t* params )
{
 800eb0c:	b530      	push	{r4, r5, lr}
 800eb0e:	b087      	sub	sp, #28
#if defined( REGION_CN779 )
    Band_t bands[CN779_MAX_NB_BANDS] =
 800eb10:	2364      	movs	r3, #100	; 0x64
 800eb12:	f8ad 3000 	strh.w	r3, [sp]
 800eb16:	2300      	movs	r3, #0
 800eb18:	f88d 3002 	strb.w	r3, [sp, #2]
 800eb1c:	9301      	str	r3, [sp, #4]
 800eb1e:	9302      	str	r3, [sp, #8]
 800eb20:	9303      	str	r3, [sp, #12]
 800eb22:	9304      	str	r3, [sp, #16]
 800eb24:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        CN779_BAND0
    };

    switch( params->Type )
 800eb28:	7a03      	ldrb	r3, [r0, #8]
 800eb2a:	2b01      	cmp	r3, #1
 800eb2c:	d032      	beq.n	800eb94 <RegionCN779InitDefaults+0x88>
 800eb2e:	2b02      	cmp	r3, #2
 800eb30:	d03e      	beq.n	800ebb0 <RegionCN779InitDefaults+0xa4>
 800eb32:	b10b      	cbz	r3, 800eb38 <RegionCN779InitDefaults+0x2c>
        {
            break;
        }
    }
#endif /* REGION_CN779 */
}
 800eb34:	b007      	add	sp, #28
 800eb36:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800eb38:	6803      	ldr	r3, [r0, #0]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d0fa      	beq.n	800eb34 <RegionCN779InitDefaults+0x28>
 800eb3e:	6842      	ldr	r2, [r0, #4]
 800eb40:	2a00      	cmp	r2, #0
 800eb42:	d0f7      	beq.n	800eb34 <RegionCN779InitDefaults+0x28>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800eb44:	491f      	ldr	r1, [pc, #124]	; (800ebc4 <RegionCN779InitDefaults+0xb8>)
 800eb46:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800eb48:	4c1f      	ldr	r4, [pc, #124]	; (800ebc8 <RegionCN779InitDefaults+0xbc>)
 800eb4a:	6022      	str	r2, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * CN779_MAX_NB_BANDS );
 800eb4c:	2218      	movs	r2, #24
 800eb4e:	4669      	mov	r1, sp
 800eb50:	4618      	mov	r0, r3
 800eb52:	f005 fd32 	bl	80145ba <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) CN779_LC1;
 800eb56:	6824      	ldr	r4, [r4, #0]
 800eb58:	4b1c      	ldr	r3, [pc, #112]	; (800ebcc <RegionCN779InitDefaults+0xc0>)
 800eb5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800eb5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) CN779_LC2;
 800eb62:	f104 050c 	add.w	r5, r4, #12
 800eb66:	f103 020c 	add.w	r2, r3, #12
 800eb6a:	ca07      	ldmia	r2, {r0, r1, r2}
 800eb6c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) CN779_LC3;
 800eb70:	f104 0518 	add.w	r5, r4, #24
 800eb74:	3318      	adds	r3, #24
 800eb76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800eb7a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800eb7e:	2307      	movs	r3, #7
 800eb80:	f8a4 348c 	strh.w	r3, [r4, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800eb84:	2201      	movs	r2, #1
 800eb86:	f204 418c 	addw	r1, r4, #1164	; 0x48c
 800eb8a:	f504 6090 	add.w	r0, r4, #1152	; 0x480
 800eb8e:	f000 fd9e 	bl	800f6ce <RegionCommonChanMaskCopy>
            break;
 800eb92:	e7cf      	b.n	800eb34 <RegionCN779InitDefaults+0x28>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800eb94:	4b0c      	ldr	r3, [pc, #48]	; (800ebc8 <RegionCN779InitDefaults+0xbc>)
 800eb96:	6818      	ldr	r0, [r3, #0]
 800eb98:	2300      	movs	r3, #0
 800eb9a:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800eb9c:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800eb9e:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800eba0:	2201      	movs	r2, #1
 800eba2:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800eba6:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800ebaa:	f000 fd90 	bl	800f6ce <RegionCommonChanMaskCopy>
            break;
 800ebae:	e7c1      	b.n	800eb34 <RegionCN779InitDefaults+0x28>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800ebb0:	4b05      	ldr	r3, [pc, #20]	; (800ebc8 <RegionCN779InitDefaults+0xbc>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 800ebb8:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 800ebbc:	430a      	orrs	r2, r1
 800ebbe:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 800ebc2:	e7b7      	b.n	800eb34 <RegionCN779InitDefaults+0x28>
 800ebc4:	20001440 	.word	0x20001440
 800ebc8:	20001444 	.word	0x20001444
 800ebcc:	080175cc 	.word	0x080175cc

0800ebd0 <RegionCN779Verify>:

bool RegionCN779Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800ebd0:	b508      	push	{r3, lr}
#if defined( REGION_CN779 )
    switch( phyAttribute )
 800ebd2:	290f      	cmp	r1, #15
 800ebd4:	d837      	bhi.n	800ec46 <RegionCN779Verify+0x76>
 800ebd6:	e8df f001 	tbb	[pc, r1]
 800ebda:	360a      	.short	0x360a
 800ebdc:	0e363636 	.word	0x0e363636
 800ebe0:	2c362218 	.word	0x2c362218
 800ebe4:	3636362c 	.word	0x3636362c
 800ebe8:	0836      	.short	0x0836
        case PHY_DUTY_CYCLE:
        {
            return CN779_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800ebea:	2001      	movs	r0, #1
 800ebec:	e02c      	b.n	800ec48 <RegionCN779Verify+0x78>
            return VerifyRfFreq( verify->Frequency );
 800ebee:	6800      	ldr	r0, [r0, #0]
 800ebf0:	f7ff fe62 	bl	800e8b8 <VerifyRfFreq>
 800ebf4:	e028      	b.n	800ec48 <RegionCN779Verify+0x78>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, CN779_TX_MIN_DATARATE, CN779_TX_MAX_DATARATE );
 800ebf6:	2207      	movs	r2, #7
 800ebf8:	2100      	movs	r1, #0
 800ebfa:	f990 0000 	ldrsb.w	r0, [r0]
 800ebfe:	f000 fcf4 	bl	800f5ea <RegionCommonValueInRange>
 800ec02:	3800      	subs	r0, #0
 800ec04:	bf18      	it	ne
 800ec06:	2001      	movne	r0, #1
 800ec08:	e01e      	b.n	800ec48 <RegionCN779Verify+0x78>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800ec0a:	2205      	movs	r2, #5
 800ec0c:	2100      	movs	r1, #0
 800ec0e:	f990 0000 	ldrsb.w	r0, [r0]
 800ec12:	f000 fcea 	bl	800f5ea <RegionCommonValueInRange>
 800ec16:	3800      	subs	r0, #0
 800ec18:	bf18      	it	ne
 800ec1a:	2001      	movne	r0, #1
 800ec1c:	e014      	b.n	800ec48 <RegionCN779Verify+0x78>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, CN779_RX_MIN_DATARATE, CN779_RX_MAX_DATARATE );
 800ec1e:	2207      	movs	r2, #7
 800ec20:	2100      	movs	r1, #0
 800ec22:	f990 0000 	ldrsb.w	r0, [r0]
 800ec26:	f000 fce0 	bl	800f5ea <RegionCommonValueInRange>
 800ec2a:	3800      	subs	r0, #0
 800ec2c:	bf18      	it	ne
 800ec2e:	2001      	movne	r0, #1
 800ec30:	e00a      	b.n	800ec48 <RegionCN779Verify+0x78>
            return RegionCommonValueInRange( verify->TxPower, CN779_MAX_TX_POWER, CN779_MIN_TX_POWER );
 800ec32:	2205      	movs	r2, #5
 800ec34:	2100      	movs	r1, #0
 800ec36:	f990 0000 	ldrsb.w	r0, [r0]
 800ec3a:	f000 fcd6 	bl	800f5ea <RegionCommonValueInRange>
 800ec3e:	3800      	subs	r0, #0
 800ec40:	bf18      	it	ne
 800ec42:	2001      	movne	r0, #1
 800ec44:	e000      	b.n	800ec48 <RegionCN779Verify+0x78>
            return false;
 800ec46:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_CN779 */
}
 800ec48:	bd08      	pop	{r3, pc}
	...

0800ec4c <RegionCN779ChanMaskSet>:
    }
#endif /* REGION_CN779 */
}

bool RegionCN779ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800ec4c:	b508      	push	{r3, lr}
#if defined( REGION_CN779 )
    switch( chanMaskSet->ChannelsMaskType )
 800ec4e:	7903      	ldrb	r3, [r0, #4]
 800ec50:	b11b      	cbz	r3, 800ec5a <RegionCN779ChanMaskSet+0xe>
 800ec52:	2b01      	cmp	r3, #1
 800ec54:	d00b      	beq.n	800ec6e <RegionCN779ChanMaskSet+0x22>
 800ec56:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_CN779 */
}
 800ec58:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800ec5a:	4b0a      	ldr	r3, [pc, #40]	; (800ec84 <RegionCN779ChanMaskSet+0x38>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	2201      	movs	r2, #1
 800ec60:	6801      	ldr	r1, [r0, #0]
 800ec62:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800ec66:	f000 fd32 	bl	800f6ce <RegionCommonChanMaskCopy>
    return true;
 800ec6a:	2001      	movs	r0, #1
            break;
 800ec6c:	e7f4      	b.n	800ec58 <RegionCN779ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800ec6e:	4b05      	ldr	r3, [pc, #20]	; (800ec84 <RegionCN779ChanMaskSet+0x38>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	2201      	movs	r2, #1
 800ec74:	6801      	ldr	r1, [r0, #0]
 800ec76:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 800ec7a:	f000 fd28 	bl	800f6ce <RegionCommonChanMaskCopy>
    return true;
 800ec7e:	2001      	movs	r0, #1
            break;
 800ec80:	e7ea      	b.n	800ec58 <RegionCN779ChanMaskSet+0xc>
 800ec82:	bf00      	nop
 800ec84:	20001444 	.word	0x20001444

0800ec88 <RegionCN779ComputeRxWindowParameters>:

void RegionCN779ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800ec88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec8a:	b083      	sub	sp, #12
 800ec8c:	460e      	mov	r6, r1
 800ec8e:	4617      	mov	r7, r2
 800ec90:	461c      	mov	r4, r3
#if defined( REGION_CN779 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, CN779_RX_MAX_DATARATE );
 800ec92:	2807      	cmp	r0, #7
 800ec94:	bfa8      	it	ge
 800ec96:	2007      	movge	r0, #7
 800ec98:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsCN779 );
 800ec9a:	4913      	ldr	r1, [pc, #76]	; (800ece8 <RegionCN779ComputeRxWindowParameters+0x60>)
 800ec9c:	f000 ff60 	bl	800fb60 <RegionCommonGetBandwidth>
 800eca0:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800eca2:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800eca6:	2b07      	cmp	r3, #7
 800eca8:	d017      	beq.n	800ecda <RegionCN779ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesCN779[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesCN779[rxConfigParams->Datarate], BandwidthsCN779[rxConfigParams->Datarate] );
 800ecaa:	4a0f      	ldr	r2, [pc, #60]	; (800ece8 <RegionCN779ComputeRxWindowParameters+0x60>)
 800ecac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ecb0:	4a0e      	ldr	r2, [pc, #56]	; (800ecec <RegionCN779ComputeRxWindowParameters+0x64>)
 800ecb2:	5cd0      	ldrb	r0, [r2, r3]
 800ecb4:	f000 fe24 	bl	800f900 <RegionCommonComputeSymbolTimeLoRa>
 800ecb8:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800ecba:	4b0d      	ldr	r3, [pc, #52]	; (800ecf0 <RegionCN779ComputeRxWindowParameters+0x68>)
 800ecbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecbe:	4798      	blx	r3
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	f104 020c 	add.w	r2, r4, #12
 800ecc6:	9201      	str	r2, [sp, #4]
 800ecc8:	3408      	adds	r4, #8
 800ecca:	9400      	str	r4, [sp, #0]
 800eccc:	463a      	mov	r2, r7
 800ecce:	4631      	mov	r1, r6
 800ecd0:	4628      	mov	r0, r5
 800ecd2:	f000 fe23 	bl	800f91c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_CN779 */
}
 800ecd6:	b003      	add	sp, #12
 800ecd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesCN779[rxConfigParams->Datarate] );
 800ecda:	4a04      	ldr	r2, [pc, #16]	; (800ecec <RegionCN779ComputeRxWindowParameters+0x64>)
 800ecdc:	5cd0      	ldrb	r0, [r2, r3]
 800ecde:	f000 fe17 	bl	800f910 <RegionCommonComputeSymbolTimeFsk>
 800ece2:	4605      	mov	r5, r0
 800ece4:	e7e9      	b.n	800ecba <RegionCN779ComputeRxWindowParameters+0x32>
 800ece6:	bf00      	nop
 800ece8:	08017cf8 	.word	0x08017cf8
 800ecec:	08017d18 	.word	0x08017d18
 800ecf0:	08018400 	.word	0x08018400

0800ecf4 <RegionCN779RxConfig>:

bool RegionCN779RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800ecf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecf8:	b08a      	sub	sp, #40	; 0x28
 800ecfa:	4604      	mov	r4, r0
 800ecfc:	460f      	mov	r7, r1
#if defined( REGION_CN779 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800ecfe:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800ed02:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800ed06:	4b37      	ldr	r3, [pc, #220]	; (800ede4 <RegionCN779RxConfig+0xf0>)
 800ed08:	685b      	ldr	r3, [r3, #4]
 800ed0a:	4798      	blx	r3
 800ed0c:	2800      	cmp	r0, #0
 800ed0e:	d167      	bne.n	800ede0 <RegionCN779RxConfig+0xec>
 800ed10:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800ed12:	7ce3      	ldrb	r3, [r4, #19]
 800ed14:	b983      	cbnz	r3, 800ed38 <RegionCN779RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800ed16:	4b34      	ldr	r3, [pc, #208]	; (800ede8 <RegionCN779RxConfig+0xf4>)
 800ed18:	681a      	ldr	r2, [r3, #0]
 800ed1a:	7823      	ldrb	r3, [r4, #0]
 800ed1c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800ed20:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800ed24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ed28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed2c:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800ed30:	f1b8 0f00 	cmp.w	r8, #0
 800ed34:	d100      	bne.n	800ed38 <RegionCN779RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800ed36:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesCN779[dr];
 800ed38:	4b2c      	ldr	r3, [pc, #176]	; (800edec <RegionCN779RxConfig+0xf8>)
 800ed3a:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800ed3e:	4b29      	ldr	r3, [pc, #164]	; (800ede4 <RegionCN779RxConfig+0xf0>)
 800ed40:	68db      	ldr	r3, [r3, #12]
 800ed42:	4640      	mov	r0, r8
 800ed44:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800ed46:	2d07      	cmp	r5, #7
 800ed48:	d02b      	beq.n	800eda2 <RegionCN779RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800ed4a:	4b26      	ldr	r3, [pc, #152]	; (800ede4 <RegionCN779RxConfig+0xf0>)
 800ed4c:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800ed50:	7ca3      	ldrb	r3, [r4, #18]
 800ed52:	9309      	str	r3, [sp, #36]	; 0x24
 800ed54:	2601      	movs	r6, #1
 800ed56:	9608      	str	r6, [sp, #32]
 800ed58:	2300      	movs	r3, #0
 800ed5a:	9307      	str	r3, [sp, #28]
 800ed5c:	9306      	str	r3, [sp, #24]
 800ed5e:	9305      	str	r3, [sp, #20]
 800ed60:	9304      	str	r3, [sp, #16]
 800ed62:	9303      	str	r3, [sp, #12]
 800ed64:	8922      	ldrh	r2, [r4, #8]
 800ed66:	9202      	str	r2, [sp, #8]
 800ed68:	2208      	movs	r2, #8
 800ed6a:	9201      	str	r2, [sp, #4]
 800ed6c:	9300      	str	r3, [sp, #0]
 800ed6e:	4633      	mov	r3, r6
 800ed70:	464a      	mov	r2, r9
 800ed72:	78a1      	ldrb	r1, [r4, #2]
 800ed74:	4630      	mov	r0, r6
 800ed76:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800ed78:	7c63      	ldrb	r3, [r4, #17]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d02d      	beq.n	800edda <RegionCN779RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterCN779[dr];
 800ed7e:	4b1c      	ldr	r3, [pc, #112]	; (800edf0 <RegionCN779RxConfig+0xfc>)
 800ed80:	5d59      	ldrb	r1, [r3, r5]
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateCN779[dr];
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800ed82:	4b18      	ldr	r3, [pc, #96]	; (800ede4 <RegionCN779RxConfig+0xf0>)
 800ed84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed86:	310d      	adds	r1, #13
 800ed88:	b2c9      	uxtb	r1, r1
 800ed8a:	4630      	mov	r0, r6
 800ed8c:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800ed8e:	462a      	mov	r2, r5
 800ed90:	4641      	mov	r1, r8
 800ed92:	7ce0      	ldrb	r0, [r4, #19]
 800ed94:	f000 fef6 	bl	800fb84 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800ed98:	703d      	strb	r5, [r7, #0]
    return true;
 800ed9a:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_CN779 */
}
 800ed9c:	b00a      	add	sp, #40	; 0x28
 800ed9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800eda2:	4b10      	ldr	r3, [pc, #64]	; (800ede4 <RegionCN779RxConfig+0xf0>)
 800eda4:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800eda8:	7ca3      	ldrb	r3, [r4, #18]
 800edaa:	9309      	str	r3, [sp, #36]	; 0x24
 800edac:	2000      	movs	r0, #0
 800edae:	9008      	str	r0, [sp, #32]
 800edb0:	9007      	str	r0, [sp, #28]
 800edb2:	9006      	str	r0, [sp, #24]
 800edb4:	2301      	movs	r3, #1
 800edb6:	9305      	str	r3, [sp, #20]
 800edb8:	9004      	str	r0, [sp, #16]
 800edba:	9003      	str	r0, [sp, #12]
 800edbc:	8923      	ldrh	r3, [r4, #8]
 800edbe:	9302      	str	r3, [sp, #8]
 800edc0:	2305      	movs	r3, #5
 800edc2:	9301      	str	r3, [sp, #4]
 800edc4:	4b0b      	ldr	r3, [pc, #44]	; (800edf4 <RegionCN779RxConfig+0x100>)
 800edc6:	9300      	str	r3, [sp, #0]
 800edc8:	4603      	mov	r3, r0
 800edca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800edce:	fb02 f209 	mul.w	r2, r2, r9
 800edd2:	f24c 3150 	movw	r1, #50000	; 0xc350
 800edd6:	47d0      	blx	sl
 800edd8:	e7ce      	b.n	800ed78 <RegionCN779RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateCN779[dr];
 800edda:	4b07      	ldr	r3, [pc, #28]	; (800edf8 <RegionCN779RxConfig+0x104>)
 800eddc:	5d59      	ldrb	r1, [r3, r5]
 800edde:	e7d0      	b.n	800ed82 <RegionCN779RxConfig+0x8e>
        return false;
 800ede0:	2000      	movs	r0, #0
 800ede2:	e7db      	b.n	800ed9c <RegionCN779RxConfig+0xa8>
 800ede4:	08018400 	.word	0x08018400
 800ede8:	20001444 	.word	0x20001444
 800edec:	08017d18 	.word	0x08017d18
 800edf0:	08017d28 	.word	0x08017d28
 800edf4:	00014585 	.word	0x00014585
 800edf8:	08017d20 	.word	0x08017d20

0800edfc <RegionCN779TxConfig>:

bool RegionCN779TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800edfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee00:	b08d      	sub	sp, #52	; 0x34
 800ee02:	4604      	mov	r4, r0
 800ee04:	460f      	mov	r7, r1
 800ee06:	4690      	mov	r8, r2
#if defined( REGION_CN779 )
    RadioModems_t modem;
    int8_t phyDr = DataratesCN779[txConfig->Datarate];
 800ee08:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ee0c:	4a42      	ldr	r2, [pc, #264]	; (800ef18 <RegionCN779TxConfig+0x11c>)
 800ee0e:	f912 a003 	ldrsb.w	sl, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800ee12:	4b42      	ldr	r3, [pc, #264]	; (800ef1c <RegionCN779TxConfig+0x120>)
 800ee14:	6819      	ldr	r1, [r3, #0]
 800ee16:	4d42      	ldr	r5, [pc, #264]	; (800ef20 <RegionCN779TxConfig+0x124>)
 800ee18:	682b      	ldr	r3, [r5, #0]
 800ee1a:	7802      	ldrb	r2, [r0, #0]
 800ee1c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800ee20:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800ee24:	7a53      	ldrb	r3, [r2, #9]
 800ee26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ee2a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800ee2e:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800ee32:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800ee36:	f000 fe8e 	bl	800fb56 <RegionCommonLimitTxPower>
 800ee3a:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsCN779 );
 800ee3c:	4939      	ldr	r1, [pc, #228]	; (800ef24 <RegionCN779TxConfig+0x128>)
 800ee3e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ee42:	f000 fe8d 	bl	800fb60 <RegionCommonGetBandwidth>
 800ee46:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800ee48:	68a2      	ldr	r2, [r4, #8]
 800ee4a:	6861      	ldr	r1, [r4, #4]
 800ee4c:	4630      	mov	r0, r6
 800ee4e:	f000 fd9f 	bl	800f990 <RegionCommonComputeTxPower>
 800ee52:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800ee54:	4b34      	ldr	r3, [pc, #208]	; (800ef28 <RegionCN779TxConfig+0x12c>)
 800ee56:	68da      	ldr	r2, [r3, #12]
 800ee58:	6829      	ldr	r1, [r5, #0]
 800ee5a:	7823      	ldrb	r3, [r4, #0]
 800ee5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ee60:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800ee64:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800ee66:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800ee6a:	2b07      	cmp	r3, #7
 800ee6c:	d031      	beq.n	800eed2 <RegionCN779TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800ee6e:	4b2e      	ldr	r3, [pc, #184]	; (800ef28 <RegionCN779TxConfig+0x12c>)
 800ee70:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800ee74:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800ee78:	9308      	str	r3, [sp, #32]
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	9207      	str	r2, [sp, #28]
 800ee7e:	9206      	str	r2, [sp, #24]
 800ee80:	9205      	str	r2, [sp, #20]
 800ee82:	2501      	movs	r5, #1
 800ee84:	9504      	str	r5, [sp, #16]
 800ee86:	9203      	str	r2, [sp, #12]
 800ee88:	2308      	movs	r3, #8
 800ee8a:	9302      	str	r3, [sp, #8]
 800ee8c:	9501      	str	r5, [sp, #4]
 800ee8e:	f8cd a000 	str.w	sl, [sp]
 800ee92:	464b      	mov	r3, r9
 800ee94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ee96:	4628      	mov	r0, r5
 800ee98:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800ee9a:	4b21      	ldr	r3, [pc, #132]	; (800ef20 <RegionCN779TxConfig+0x124>)
 800ee9c:	681a      	ldr	r2, [r3, #0]
 800ee9e:	7823      	ldrb	r3, [r4, #0]
 800eea0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800eea4:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800eea8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800eeac:	f000 fe9a 	bl	800fbe4 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800eeb0:	89a1      	ldrh	r1, [r4, #12]
 800eeb2:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800eeb6:	f7ff fd13 	bl	800e8e0 <GetTimeOnAir>
 800eeba:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800eebe:	4b1a      	ldr	r3, [pc, #104]	; (800ef28 <RegionCN779TxConfig+0x12c>)
 800eec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eec2:	7b21      	ldrb	r1, [r4, #12]
 800eec4:	4628      	mov	r0, r5
 800eec6:	4798      	blx	r3

    *txPower = txPowerLimited;
 800eec8:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_CN779 */
}
 800eeca:	2001      	movs	r0, #1
 800eecc:	b00d      	add	sp, #52	; 0x34
 800eece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800eed2:	4b15      	ldr	r3, [pc, #84]	; (800ef28 <RegionCN779TxConfig+0x12c>)
 800eed4:	69dd      	ldr	r5, [r3, #28]
 800eed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800eeda:	fb03 f30a 	mul.w	r3, r3, sl
 800eede:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800eee2:	9208      	str	r2, [sp, #32]
 800eee4:	f04f 0b00 	mov.w	fp, #0
 800eee8:	f8cd b01c 	str.w	fp, [sp, #28]
 800eeec:	f8cd b018 	str.w	fp, [sp, #24]
 800eef0:	f8cd b014 	str.w	fp, [sp, #20]
 800eef4:	2201      	movs	r2, #1
 800eef6:	9204      	str	r2, [sp, #16]
 800eef8:	f8cd b00c 	str.w	fp, [sp, #12]
 800eefc:	2205      	movs	r2, #5
 800eefe:	9202      	str	r2, [sp, #8]
 800ef00:	f8cd b004 	str.w	fp, [sp, #4]
 800ef04:	9300      	str	r3, [sp, #0]
 800ef06:	464b      	mov	r3, r9
 800ef08:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800ef0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ef0e:	4658      	mov	r0, fp
 800ef10:	47a8      	blx	r5
        modem = MODEM_FSK;
 800ef12:	465d      	mov	r5, fp
 800ef14:	e7c1      	b.n	800ee9a <RegionCN779TxConfig+0x9e>
 800ef16:	bf00      	nop
 800ef18:	08017d18 	.word	0x08017d18
 800ef1c:	20001440 	.word	0x20001440
 800ef20:	20001444 	.word	0x20001444
 800ef24:	08017cf8 	.word	0x08017cf8
 800ef28:	08018400 	.word	0x08018400

0800ef2c <RegionCN779LinkAdrReq>:

uint8_t RegionCN779LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800ef2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef30:	b08f      	sub	sp, #60	; 0x3c
 800ef32:	4607      	mov	r7, r0
 800ef34:	468b      	mov	fp, r1
 800ef36:	4692      	mov	sl, r2
 800ef38:	4699      	mov	r9, r3
    uint8_t status = 0x07;
#if defined( REGION_CN779 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800ef3a:	2500      	movs	r5, #0
 800ef3c:	950c      	str	r5, [sp, #48]	; 0x30
 800ef3e:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800ef42:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800ef46:	f04f 0807 	mov.w	r8, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800ef4a:	e02d      	b.n	800efa8 <RegionCN779LinkAdrReq+0x7c>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < CN779_MAX_NB_CHANNELS; i++ )
 800ef4c:	2400      	movs	r4, #0
        status = 0x07;
 800ef4e:	f04f 0807 	mov.w	r8, #7
 800ef52:	e00f      	b.n	800ef74 <RegionCN779LinkAdrReq+0x48>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800ef54:	4a56      	ldr	r2, [pc, #344]	; (800f0b0 <RegionCN779LinkAdrReq+0x184>)
 800ef56:	6812      	ldr	r2, [r2, #0]
 800ef58:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800ef5c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ef60:	b132      	cbz	r2, 800ef70 <RegionCN779LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800ef62:	2201      	movs	r2, #1
 800ef64:	40a2      	lsls	r2, r4
 800ef66:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800ef6a:	430a      	orrs	r2, r1
 800ef6c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < CN779_MAX_NB_CHANNELS; i++ )
 800ef70:	3401      	adds	r4, #1
 800ef72:	b2e4      	uxtb	r4, r4
 800ef74:	2c0f      	cmp	r4, #15
 800ef76:	d817      	bhi.n	800efa8 <RegionCN779LinkAdrReq+0x7c>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800ef78:	2b06      	cmp	r3, #6
 800ef7a:	d0eb      	beq.n	800ef54 <RegionCN779LinkAdrReq+0x28>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800ef7c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 800ef80:	4126      	asrs	r6, r4
 800ef82:	f016 0f01 	tst.w	r6, #1
 800ef86:	d0f3      	beq.n	800ef70 <RegionCN779LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800ef88:	4a49      	ldr	r2, [pc, #292]	; (800f0b0 <RegionCN779LinkAdrReq+0x184>)
 800ef8a:	6812      	ldr	r2, [r2, #0]
 800ef8c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800ef90:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800ef94:	2a00      	cmp	r2, #0
 800ef96:	d1eb      	bne.n	800ef70 <RegionCN779LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800ef98:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
 800ef9c:	e7e8      	b.n	800ef70 <RegionCN779LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800ef9e:	f04f 0806 	mov.w	r8, #6
 800efa2:	e001      	b.n	800efa8 <RegionCN779LinkAdrReq+0x7c>
            status &= 0xFE; // Channel mask KO
 800efa4:	f04f 0806 	mov.w	r8, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800efa8:	7a3b      	ldrb	r3, [r7, #8]
 800efaa:	42ab      	cmp	r3, r5
 800efac:	d919      	bls.n	800efe2 <RegionCN779LinkAdrReq+0xb6>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	a90c      	add	r1, sp, #48	; 0x30
 800efb2:	4428      	add	r0, r5
 800efb4:	f000 fc3c 	bl	800f830 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800efb8:	b198      	cbz	r0, 800efe2 <RegionCN779LinkAdrReq+0xb6>
        bytesProcessed += nextIndex;
 800efba:	4405      	add	r5, r0
 800efbc:	b2ed      	uxtb	r5, r5
        chMask = linkAdrParams.ChMask;
 800efbe:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800efc2:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800efc6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800efca:	b90b      	cbnz	r3, 800efd0 <RegionCN779LinkAdrReq+0xa4>
 800efcc:	2a00      	cmp	r2, #0
 800efce:	d0e6      	beq.n	800ef9e <RegionCN779LinkAdrReq+0x72>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800efd0:	1e5a      	subs	r2, r3, #1
 800efd2:	b2d2      	uxtb	r2, r2
 800efd4:	2a04      	cmp	r2, #4
 800efd6:	d9e5      	bls.n	800efa4 <RegionCN779LinkAdrReq+0x78>
 800efd8:	2b06      	cmp	r3, #6
 800efda:	d9b7      	bls.n	800ef4c <RegionCN779LinkAdrReq+0x20>
            status &= 0xFE; // Channel mask KO
 800efdc:	f04f 0806 	mov.w	r8, #6
 800efe0:	e7e2      	b.n	800efa8 <RegionCN779LinkAdrReq+0x7c>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800efe2:	2302      	movs	r3, #2
 800efe4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800efe8:	7a7b      	ldrb	r3, [r7, #9]
 800efea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionCN779GetPhyParam( &getPhy );
 800efee:	a80a      	add	r0, sp, #40	; 0x28
 800eff0:	f7ff fca8 	bl	800e944 <RegionCN779GetPhyParam>

    linkAdrVerifyParams.Status = status;
 800eff4:	f88d 8008 	strb.w	r8, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800eff8:	7abb      	ldrb	r3, [r7, #10]
 800effa:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800effe:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800f002:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800f006:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800f00a:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800f00e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800f012:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800f016:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f01a:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800f01e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800f022:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800f026:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800f02a:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = CN779_MAX_NB_CHANNELS;
 800f02e:	2310      	movs	r3, #16
 800f030:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800f034:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800f038:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800f03a:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = CN779_TX_MAX_DATARATE;
 800f03e:	2307      	movs	r3, #7
 800f040:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800f044:	4b1a      	ldr	r3, [pc, #104]	; (800f0b0 <RegionCN779LinkAdrReq+0x184>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	9307      	str	r3, [sp, #28]
    linkAdrVerifyParams.MinTxPower = CN779_MIN_TX_POWER;
 800f04a:	2305      	movs	r3, #5
 800f04c:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = CN779_MAX_TX_POWER;
 800f050:	2300      	movs	r3, #0
 800f052:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800f05a:	ab0c      	add	r3, sp, #48	; 0x30
 800f05c:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800f060:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800f064:	a801      	add	r0, sp, #4
 800f066:	f000 fbff 	bl	800f868 <RegionCommonLinkAdrReqVerifyParams>
 800f06a:	4604      	mov	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800f06c:	2807      	cmp	r0, #7
 800f06e:	d011      	beq.n	800f094 <RegionCN779LinkAdrReq+0x168>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800f070:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800f074:	f88b 3000 	strb.w	r3, [fp]
    *txPowOut = linkAdrParams.TxPower;
 800f078:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800f07c:	f88a 3000 	strb.w	r3, [sl]
    *nbRepOut = linkAdrParams.NbRep;
 800f080:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800f084:	f889 3000 	strb.w	r3, [r9]
    *nbBytesParsed = bytesProcessed;
 800f088:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f08a:	701d      	strb	r5, [r3, #0]

#endif /* REGION_CN779 */
    return status;
}
 800f08c:	4620      	mov	r0, r4
 800f08e:	b00f      	add	sp, #60	; 0x3c
 800f090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800f094:	4e06      	ldr	r6, [pc, #24]	; (800f0b0 <RegionCN779LinkAdrReq+0x184>)
 800f096:	6830      	ldr	r0, [r6, #0]
 800f098:	220c      	movs	r2, #12
 800f09a:	2100      	movs	r1, #0
 800f09c:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800f0a0:	f005 faa1 	bl	80145e6 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800f0a4:	6833      	ldr	r3, [r6, #0]
 800f0a6:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800f0aa:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
 800f0ae:	e7df      	b.n	800f070 <RegionCN779LinkAdrReq+0x144>
 800f0b0:	20001444 	.word	0x20001444

0800f0b4 <RegionCN779RxParamSetupReq>:

uint8_t RegionCN779RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800f0b4:	b538      	push	{r3, r4, r5, lr}
 800f0b6:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_CN779 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800f0b8:	6840      	ldr	r0, [r0, #4]
 800f0ba:	f7ff fbfd 	bl	800e8b8 <VerifyRfFreq>
 800f0be:	b1a0      	cbz	r0, 800f0ea <RegionCN779RxParamSetupReq+0x36>
    uint8_t status = 0x07;
 800f0c0:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, CN779_RX_MIN_DATARATE, CN779_RX_MAX_DATARATE ) == false )
 800f0c2:	2207      	movs	r2, #7
 800f0c4:	2100      	movs	r1, #0
 800f0c6:	f994 0000 	ldrsb.w	r0, [r4]
 800f0ca:	f000 fa8e 	bl	800f5ea <RegionCommonValueInRange>
 800f0ce:	b908      	cbnz	r0, 800f0d4 <RegionCN779RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800f0d0:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, CN779_MIN_RX1_DR_OFFSET, CN779_MAX_RX1_DR_OFFSET ) == false )
 800f0d4:	2205      	movs	r2, #5
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f0dc:	f000 fa85 	bl	800f5ea <RegionCommonValueInRange>
 800f0e0:	b908      	cbnz	r0, 800f0e6 <RegionCN779RxParamSetupReq+0x32>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800f0e2:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_CN779 */
    return status;
}
 800f0e6:	4628      	mov	r0, r5
 800f0e8:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800f0ea:	2506      	movs	r5, #6
 800f0ec:	e7e9      	b.n	800f0c2 <RegionCN779RxParamSetupReq+0xe>

0800f0ee <RegionCN779TxParamSetupReq>:

int8_t RegionCN779TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800f0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f0f2:	4770      	bx	lr

0800f0f4 <RegionCN779DlChannelReq>:

int8_t RegionCN779DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800f0f4:	b510      	push	{r4, lr}
 800f0f6:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_CN779 )

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 800f0f8:	6840      	ldr	r0, [r0, #4]
 800f0fa:	f7ff fbdd 	bl	800e8b8 <VerifyRfFreq>
 800f0fe:	b170      	cbz	r0, 800f11e <RegionCN779DlChannelReq+0x2a>
    uint8_t status = 0x03;
 800f100:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800f102:	4b0b      	ldr	r3, [pc, #44]	; (800f130 <RegionCN779DlChannelReq+0x3c>)
 800f104:	681a      	ldr	r2, [r3, #0]
 800f106:	7823      	ldrb	r3, [r4, #0]
 800f108:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800f10c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800f110:	b909      	cbnz	r1, 800f116 <RegionCN779DlChannelReq+0x22>
    {
        status &= 0xFD;
 800f112:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 800f116:	2803      	cmp	r0, #3
 800f118:	d003      	beq.n	800f122 <RegionCN779DlChannelReq+0x2e>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_CN779 */
    return status;
}
 800f11a:	b240      	sxtb	r0, r0
 800f11c:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800f11e:	2002      	movs	r0, #2
 800f120:	e7ef      	b.n	800f102 <RegionCN779DlChannelReq+0xe>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800f122:	6861      	ldr	r1, [r4, #4]
 800f124:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f128:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f12c:	6059      	str	r1, [r3, #4]
 800f12e:	e7f4      	b.n	800f11a <RegionCN779DlChannelReq+0x26>
 800f130:	20001444 	.word	0x20001444

0800f134 <RegionCN779AlternateDr>:

int8_t RegionCN779AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
    return currentDr;
}
 800f134:	4770      	bx	lr
	...

0800f138 <RegionCN779NextChannel>:

LoRaMacStatus_t RegionCN779NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800f138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f13a:	b097      	sub	sp, #92	; 0x5c
 800f13c:	4604      	mov	r4, r0
 800f13e:	460f      	mov	r7, r1
 800f140:	4616      	mov	r6, r2
 800f142:	461d      	mov	r5, r3
#if defined( REGION_CN779 )
    uint8_t nbEnabledChannels = 0;
 800f144:	2100      	movs	r1, #0
 800f146:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800f14a:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[CN779_MAX_NB_CHANNELS] = { 0 };
 800f14e:	9111      	str	r1, [sp, #68]	; 0x44
 800f150:	9112      	str	r1, [sp, #72]	; 0x48
 800f152:	9113      	str	r1, [sp, #76]	; 0x4c
 800f154:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = CN779_JOIN_CHANNELS;
 800f156:	2307      	movs	r3, #7
 800f158:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800f15c:	4b32      	ldr	r3, [pc, #200]	; (800f228 <RegionCN779NextChannel+0xf0>)
 800f15e:	6818      	ldr	r0, [r3, #0]
 800f160:	2201      	movs	r2, #1
 800f162:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800f166:	f000 fa9c 	bl	800f6a2 <RegionCommonCountChannels>
 800f16a:	b938      	cbnz	r0, 800f17c <RegionCN779NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800f16c:	4b2e      	ldr	r3, [pc, #184]	; (800f228 <RegionCN779NextChannel+0xf0>)
 800f16e:	681a      	ldr	r2, [r3, #0]
 800f170:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800f174:	f043 0307 	orr.w	r3, r3, #7
 800f178:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800f17c:	7a63      	ldrb	r3, [r4, #9]
 800f17e:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800f182:	7a23      	ldrb	r3, [r4, #8]
 800f184:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800f188:	4b27      	ldr	r3, [pc, #156]	; (800f228 <RegionCN779NextChannel+0xf0>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	f503 6290 	add.w	r2, r3, #1152	; 0x480
 800f190:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800f192:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800f194:	4b25      	ldr	r3, [pc, #148]	; (800f22c <RegionCN779NextChannel+0xf4>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = CN779_MAX_NB_CHANNELS;
 800f19a:	2310      	movs	r3, #16
 800f19c:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800f1a0:	f10d 030a 	add.w	r3, sp, #10
 800f1a4:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800f1a6:	6823      	ldr	r3, [r4, #0]
 800f1a8:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800f1aa:	6863      	ldr	r3, [r4, #4]
 800f1ac:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800f1ae:	7aa3      	ldrb	r3, [r4, #10]
 800f1b0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = CN779_MAX_NB_BANDS;
 800f1b4:	2301      	movs	r3, #1
 800f1b6:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800f1ba:	ab0c      	add	r3, sp, #48	; 0x30
 800f1bc:	6921      	ldr	r1, [r4, #16]
 800f1be:	68e0      	ldr	r0, [r4, #12]
 800f1c0:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800f1c4:	7d23      	ldrb	r3, [r4, #20]
 800f1c6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800f1ca:	8ae1      	ldrh	r1, [r4, #22]
 800f1cc:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800f1d0:	f7ff fb86 	bl	800e8e0 <GetTimeOnAir>
 800f1d4:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800f1d6:	ab03      	add	r3, sp, #12
 800f1d8:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800f1da:	9601      	str	r6, [sp, #4]
 800f1dc:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800f1e0:	9300      	str	r3, [sp, #0]
 800f1e2:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800f1e6:	aa11      	add	r2, sp, #68	; 0x44
 800f1e8:	4629      	mov	r1, r5
 800f1ea:	a809      	add	r0, sp, #36	; 0x24
 800f1ec:	f000 fc4c 	bl	800fa88 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800f1f0:	4604      	mov	r4, r0
 800f1f2:	b120      	cbz	r0, 800f1fe <RegionCN779NextChannel+0xc6>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800f1f4:	280c      	cmp	r0, #12
 800f1f6:	d00d      	beq.n	800f214 <RegionCN779NextChannel+0xdc>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_CN779 */
}
 800f1f8:	4620      	mov	r0, r4
 800f1fa:	b017      	add	sp, #92	; 0x5c
 800f1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800f1fe:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800f202:	3901      	subs	r1, #1
 800f204:	f005 f9cc 	bl	80145a0 <randr>
 800f208:	ab16      	add	r3, sp, #88	; 0x58
 800f20a:	4418      	add	r0, r3
 800f20c:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800f210:	703b      	strb	r3, [r7, #0]
 800f212:	e7f1      	b.n	800f1f8 <RegionCN779NextChannel+0xc0>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800f214:	4b04      	ldr	r3, [pc, #16]	; (800f228 <RegionCN779NextChannel+0xf0>)
 800f216:	681a      	ldr	r2, [r3, #0]
 800f218:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800f21c:	f043 0307 	orr.w	r3, r3, #7
 800f220:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
 800f224:	e7e8      	b.n	800f1f8 <RegionCN779NextChannel+0xc0>
 800f226:	bf00      	nop
 800f228:	20001444 	.word	0x20001444
 800f22c:	20001440 	.word	0x20001440

0800f230 <RegionCN779ChannelAdd>:

LoRaMacStatus_t RegionCN779ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800f230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined( REGION_CN779 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800f232:	7905      	ldrb	r5, [r0, #4]

    if( id < CN779_NUMB_DEFAULT_CHANNELS )
 800f234:	2d02      	cmp	r5, #2
 800f236:	d94b      	bls.n	800f2d0 <RegionCN779ChannelAdd+0xa0>
 800f238:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= CN779_MAX_NB_CHANNELS )
 800f23a:	2d0f      	cmp	r5, #15
 800f23c:	d84a      	bhi.n	800f2d4 <RegionCN779ChannelAdd+0xa4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, CN779_TX_MIN_DATARATE, CN779_TX_MAX_DATARATE ) == false )
 800f23e:	6803      	ldr	r3, [r0, #0]
 800f240:	7a18      	ldrb	r0, [r3, #8]
 800f242:	f340 0003 	sbfx	r0, r0, #0, #4
 800f246:	2207      	movs	r2, #7
 800f248:	2100      	movs	r1, #0
 800f24a:	b240      	sxtb	r0, r0
 800f24c:	f000 f9cd 	bl	800f5ea <RegionCommonValueInRange>
 800f250:	2800      	cmp	r0, #0
 800f252:	d039      	beq.n	800f2c8 <RegionCN779ChannelAdd+0x98>
    bool drInvalid = false;
 800f254:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, CN779_TX_MIN_DATARATE, CN779_TX_MAX_DATARATE ) == false )
 800f256:	6823      	ldr	r3, [r4, #0]
 800f258:	7a18      	ldrb	r0, [r3, #8]
 800f25a:	f340 1003 	sbfx	r0, r0, #4, #4
 800f25e:	2207      	movs	r2, #7
 800f260:	2100      	movs	r1, #0
 800f262:	b240      	sxtb	r0, r0
 800f264:	f000 f9c1 	bl	800f5ea <RegionCommonValueInRange>
 800f268:	b900      	cbnz	r0, 800f26c <RegionCN779ChannelAdd+0x3c>
    {
        drInvalid = true;
 800f26a:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800f26c:	6821      	ldr	r1, [r4, #0]
 800f26e:	7a0b      	ldrb	r3, [r1, #8]
 800f270:	f343 0203 	sbfx	r2, r3, #0, #4
 800f274:	b252      	sxtb	r2, r2
 800f276:	f343 1303 	sbfx	r3, r3, #4, #4
 800f27a:	b25b      	sxtb	r3, r3
 800f27c:	429a      	cmp	r2, r3
 800f27e:	dd00      	ble.n	800f282 <RegionCN779ChannelAdd+0x52>
    {
        drInvalid = true;
 800f280:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 800f282:	6808      	ldr	r0, [r1, #0]
 800f284:	f7ff fb18 	bl	800e8b8 <VerifyRfFreq>
 800f288:	b300      	cbz	r0, 800f2cc <RegionCN779ChannelAdd+0x9c>
    bool freqInvalid = false;
 800f28a:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800f28c:	b106      	cbz	r6, 800f290 <RegionCN779ChannelAdd+0x60>
 800f28e:	bb1b      	cbnz	r3, 800f2d8 <RegionCN779ChannelAdd+0xa8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800f290:	bb26      	cbnz	r6, 800f2dc <RegionCN779ChannelAdd+0xac>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800f292:	bb2b      	cbnz	r3, 800f2e0 <RegionCN779ChannelAdd+0xb0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800f294:	4f13      	ldr	r7, [pc, #76]	; (800f2e4 <RegionCN779ChannelAdd+0xb4>)
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	006e      	lsls	r6, r5, #1
 800f29a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800f29e:	220c      	movs	r2, #12
 800f2a0:	6821      	ldr	r1, [r4, #0]
 800f2a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f2a6:	f005 f988 	bl	80145ba <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 800f2aa:	683a      	ldr	r2, [r7, #0]
 800f2ac:	442e      	add	r6, r5
 800f2ae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f2b2:	2000      	movs	r0, #0
 800f2b4:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	fa03 f505 	lsl.w	r5, r3, r5
 800f2bc:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800f2c0:	431d      	orrs	r5, r3
 800f2c2:	f8a2 5480 	strh.w	r5, [r2, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 800f2c6:	e006      	b.n	800f2d6 <RegionCN779ChannelAdd+0xa6>
        drInvalid = true;
 800f2c8:	2601      	movs	r6, #1
 800f2ca:	e7c4      	b.n	800f256 <RegionCN779ChannelAdd+0x26>
            freqInvalid = true;
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	e7dd      	b.n	800f28c <RegionCN779ChannelAdd+0x5c>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800f2d0:	2006      	movs	r0, #6
 800f2d2:	e000      	b.n	800f2d6 <RegionCN779ChannelAdd+0xa6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f2d4:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_CN779 */
}
 800f2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800f2d8:	2006      	movs	r0, #6
 800f2da:	e7fc      	b.n	800f2d6 <RegionCN779ChannelAdd+0xa6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800f2dc:	2005      	movs	r0, #5
 800f2de:	e7fa      	b.n	800f2d6 <RegionCN779ChannelAdd+0xa6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800f2e0:	2004      	movs	r0, #4
 800f2e2:	e7f8      	b.n	800f2d6 <RegionCN779ChannelAdd+0xa6>
 800f2e4:	20001444 	.word	0x20001444

0800f2e8 <RegionCN779ChannelsRemove>:

bool RegionCN779ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_CN779 )
    uint8_t id = channelRemove->ChannelId;
 800f2e8:	7801      	ldrb	r1, [r0, #0]

    if( id < CN779_NUMB_DEFAULT_CHANNELS )
 800f2ea:	2902      	cmp	r1, #2
 800f2ec:	d801      	bhi.n	800f2f2 <RegionCN779ChannelsRemove+0xa>
    {
        return false;
 800f2ee:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, CN779_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_CN779 */
}
 800f2f0:	4770      	bx	lr
{
 800f2f2:	b510      	push	{r4, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800f2f4:	4b08      	ldr	r3, [pc, #32]	; (800f318 <RegionCN779ChannelsRemove+0x30>)
 800f2f6:	6818      	ldr	r0, [r3, #0]
 800f2f8:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800f2fc:	009c      	lsls	r4, r3, #2
 800f2fe:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800f302:	2200      	movs	r2, #0
 800f304:	5102      	str	r2, [r0, r4]
 800f306:	605a      	str	r2, [r3, #4]
 800f308:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, CN779_MAX_NB_CHANNELS );
 800f30a:	2210      	movs	r2, #16
 800f30c:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800f310:	f000 f9ad 	bl	800f66e <RegionCommonChanDisable>
}
 800f314:	bd10      	pop	{r4, pc}
 800f316:	bf00      	nop
 800f318:	20001444 	.word	0x20001444

0800f31c <RegionCN779ApplyCFList>:
{
 800f31c:	b570      	push	{r4, r5, r6, lr}
 800f31e:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800f320:	2350      	movs	r3, #80	; 0x50
 800f322:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800f326:	7903      	ldrb	r3, [r0, #4]
 800f328:	2b10      	cmp	r3, #16
 800f32a:	d135      	bne.n	800f398 <RegionCN779ApplyCFList+0x7c>
 800f32c:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800f32e:	6803      	ldr	r3, [r0, #0]
 800f330:	7bdd      	ldrb	r5, [r3, #15]
 800f332:	2d00      	cmp	r5, #0
 800f334:	d130      	bne.n	800f398 <RegionCN779ApplyCFList+0x7c>
    for( uint8_t i = 0, chanIdx = CN779_NUMB_DEFAULT_CHANNELS; chanIdx < CN779_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800f336:	2403      	movs	r4, #3
 800f338:	e01a      	b.n	800f370 <RegionCN779ApplyCFList+0x54>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800f33a:	6832      	ldr	r2, [r6, #0]
 800f33c:	5d53      	ldrb	r3, [r2, r5]
 800f33e:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800f340:	442a      	add	r2, r5
 800f342:	7851      	ldrb	r1, [r2, #1]
 800f344:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f348:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800f34a:	7892      	ldrb	r2, [r2, #2]
 800f34c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 800f350:	2264      	movs	r2, #100	; 0x64
 800f352:	fb02 f303 	mul.w	r3, r2, r3
 800f356:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800f358:	2300      	movs	r3, #0
 800f35a:	9304      	str	r3, [sp, #16]
 800f35c:	e011      	b.n	800f382 <RegionCN779ApplyCFList+0x66>
            channelRemove.ChannelId = chanIdx;
 800f35e:	f88d 4000 	strb.w	r4, [sp]
            RegionCN779ChannelsRemove( &channelRemove );
 800f362:	4668      	mov	r0, sp
 800f364:	f7ff ffc0 	bl	800f2e8 <RegionCN779ChannelsRemove>
    for( uint8_t i = 0, chanIdx = CN779_NUMB_DEFAULT_CHANNELS; chanIdx < CN779_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800f368:	3503      	adds	r5, #3
 800f36a:	b2ed      	uxtb	r5, r5
 800f36c:	3401      	adds	r4, #1
 800f36e:	b2e4      	uxtb	r4, r4
 800f370:	2c0f      	cmp	r4, #15
 800f372:	d811      	bhi.n	800f398 <RegionCN779ApplyCFList+0x7c>
        if( chanIdx < ( CN779_NUMB_CHANNELS_CF_LIST + CN779_NUMB_DEFAULT_CHANNELS ) )
 800f374:	2c07      	cmp	r4, #7
 800f376:	d9e0      	bls.n	800f33a <RegionCN779ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800f378:	2300      	movs	r3, #0
 800f37a:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800f37c:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800f380:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800f382:	9b03      	ldr	r3, [sp, #12]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d0ea      	beq.n	800f35e <RegionCN779ApplyCFList+0x42>
            channelAdd.NewChannel = &newChannel;
 800f388:	ab03      	add	r3, sp, #12
 800f38a:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800f38c:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionCN779ChannelAdd( &channelAdd );
 800f390:	a801      	add	r0, sp, #4
 800f392:	f7ff ff4d 	bl	800f230 <RegionCN779ChannelAdd>
 800f396:	e7e7      	b.n	800f368 <RegionCN779ApplyCFList+0x4c>
}
 800f398:	b006      	add	sp, #24
 800f39a:	bd70      	pop	{r4, r5, r6, pc}

0800f39c <RegionCN779NewChannelReq>:
{
 800f39c:	b500      	push	{lr}
 800f39e:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800f3a0:	6803      	ldr	r3, [r0, #0]
 800f3a2:	681a      	ldr	r2, [r3, #0]
 800f3a4:	b952      	cbnz	r2, 800f3bc <RegionCN779NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800f3a6:	7903      	ldrb	r3, [r0, #4]
 800f3a8:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionCN779ChannelsRemove( &channelRemove ) == false )
 800f3ac:	a801      	add	r0, sp, #4
 800f3ae:	f7ff ff9b 	bl	800f2e8 <RegionCN779ChannelsRemove>
 800f3b2:	b1d0      	cbz	r0, 800f3ea <RegionCN779NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800f3b4:	2003      	movs	r0, #3
}
 800f3b6:	b005      	add	sp, #20
 800f3b8:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800f3bc:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800f3be:	7903      	ldrb	r3, [r0, #4]
 800f3c0:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionCN779ChannelAdd( &channelAdd ) )
 800f3c4:	a802      	add	r0, sp, #8
 800f3c6:	f7ff ff33 	bl	800f230 <RegionCN779ChannelAdd>
 800f3ca:	2806      	cmp	r0, #6
 800f3cc:	d80b      	bhi.n	800f3e6 <RegionCN779NewChannelReq+0x4a>
 800f3ce:	e8df f000 	tbb	[pc, r0]
 800f3d2:	0a04      	.short	0x0a04
 800f3d4:	060e0a0a 	.word	0x060e0a0a
 800f3d8:	08          	.byte	0x08
 800f3d9:	00          	.byte	0x00
 800f3da:	2003      	movs	r0, #3
 800f3dc:	e7eb      	b.n	800f3b6 <RegionCN779NewChannelReq+0x1a>
                status &= 0xFD;
 800f3de:	2001      	movs	r0, #1
                break;
 800f3e0:	e7e9      	b.n	800f3b6 <RegionCN779NewChannelReq+0x1a>
                status &= 0xFC;
 800f3e2:	2000      	movs	r0, #0
                break;
 800f3e4:	e7e7      	b.n	800f3b6 <RegionCN779NewChannelReq+0x1a>
                status &= 0xFC;
 800f3e6:	2000      	movs	r0, #0
                break;
 800f3e8:	e7e5      	b.n	800f3b6 <RegionCN779NewChannelReq+0x1a>
            status &= 0xFC;
 800f3ea:	2000      	movs	r0, #0
 800f3ec:	e7e3      	b.n	800f3b6 <RegionCN779NewChannelReq+0x1a>
                status &= 0xFE;
 800f3ee:	2002      	movs	r0, #2
 800f3f0:	e7e1      	b.n	800f3b6 <RegionCN779NewChannelReq+0x1a>
	...

0800f3f4 <RegionCN779SetContinuousWave>:

void RegionCN779SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800f3f4:	b538      	push	{r3, r4, r5, lr}
 800f3f6:	4604      	mov	r4, r0
#if defined( REGION_CN779 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800f3f8:	4b12      	ldr	r3, [pc, #72]	; (800f444 <RegionCN779SetContinuousWave+0x50>)
 800f3fa:	6819      	ldr	r1, [r3, #0]
 800f3fc:	4d12      	ldr	r5, [pc, #72]	; (800f448 <RegionCN779SetContinuousWave+0x54>)
 800f3fe:	682b      	ldr	r3, [r5, #0]
 800f400:	7802      	ldrb	r2, [r0, #0]
 800f402:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f406:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800f40a:	7a53      	ldrb	r3, [r2, #9]
 800f40c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f410:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800f414:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800f418:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800f41c:	f000 fb9b 	bl	800fb56 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800f420:	682a      	ldr	r2, [r5, #0]
 800f422:	7823      	ldrb	r3, [r4, #0]
 800f424:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f428:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800f42c:	68a2      	ldr	r2, [r4, #8]
 800f42e:	6861      	ldr	r1, [r4, #4]
 800f430:	f000 faae 	bl	800f990 <RegionCommonComputeTxPower>
 800f434:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800f436:	4b05      	ldr	r3, [pc, #20]	; (800f44c <RegionCN779SetContinuousWave+0x58>)
 800f438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f43a:	89a2      	ldrh	r2, [r4, #12]
 800f43c:	4628      	mov	r0, r5
 800f43e:	4798      	blx	r3
#endif /* REGION_CN779 */
}
 800f440:	bd38      	pop	{r3, r4, r5, pc}
 800f442:	bf00      	nop
 800f444:	20001440 	.word	0x20001440
 800f448:	20001444 	.word	0x20001444
 800f44c:	08018400 	.word	0x08018400

0800f450 <RegionCN779ApplyDrOffset>:

uint8_t RegionCN779ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_CN779 )
    int8_t datarate = dr - drOffset;
 800f450:	1a88      	subs	r0, r1, r2
 800f452:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800f454:	2800      	cmp	r0, #0
 800f456:	db01      	blt.n	800f45c <RegionCN779ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_CN779 */
}
 800f458:	b2c0      	uxtb	r0, r0
 800f45a:	4770      	bx	lr
        datarate = DR_0;
 800f45c:	2000      	movs	r0, #0
 800f45e:	e7fb      	b.n	800f458 <RegionCN779ApplyDrOffset+0x8>

0800f460 <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800f460:	b082      	sub	sp, #8
 800f462:	f10d 0c08 	add.w	ip, sp, #8
 800f466:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800f46a:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800f46c:	b971      	cbnz	r1, 800f48c <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800f46e:	9b00      	ldr	r3, [sp, #0]
 800f470:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800f474:	d306      	bcc.n	800f484 <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800f476:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800f47a:	4293      	cmp	r3, r2
 800f47c:	d80a      	bhi.n	800f494 <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800f47e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f482:	e000      	b.n	800f486 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800f484:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800f486:	4298      	cmp	r0, r3
 800f488:	bf38      	it	cc
 800f48a:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800f48c:	b900      	cbnz	r0, 800f490 <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800f48e:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800f490:	b002      	add	sp, #8
 800f492:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800f494:	f242 7310 	movw	r3, #10000	; 0x2710
 800f498:	e7f5      	b.n	800f486 <GetDutyCycle+0x26>

0800f49a <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800f49a:	b410      	push	{r4}
 800f49c:	4604      	mov	r4, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800f49e:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800f4a0:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800f4a2:	e001      	b.n	800f4a8 <CountChannels+0xe>
 800f4a4:	3301      	adds	r3, #1
 800f4a6:	b2db      	uxtb	r3, r3
 800f4a8:	428b      	cmp	r3, r1
 800f4aa:	d206      	bcs.n	800f4ba <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	409a      	lsls	r2, r3
 800f4b0:	43a2      	bics	r2, r4
 800f4b2:	d1f7      	bne.n	800f4a4 <CountChannels+0xa>
        {
            nbActiveBits++;
 800f4b4:	3001      	adds	r0, #1
 800f4b6:	b2c0      	uxtb	r0, r0
 800f4b8:	e7f4      	b.n	800f4a4 <CountChannels+0xa>
        }
    }
    return nbActiveBits;
}
 800f4ba:	bc10      	pop	{r4}
 800f4bc:	4770      	bx	lr
	...

0800f4c0 <SetMaxTimeCredits>:
{
 800f4c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f4c4:	b089      	sub	sp, #36	; 0x24
 800f4c6:	4604      	mov	r4, r0
 800f4c8:	460e      	mov	r6, r1
 800f4ca:	ad02      	add	r5, sp, #8
 800f4cc:	e885 000c 	stmia.w	r5, {r2, r3}
 800f4d0:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 800f4d4:	f89d 8044 	ldrb.w	r8, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800f4d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f4dc:	f007 fc7c 	bl	8016dd8 <SysTimeToMs>
 800f4e0:	4681      	mov	r9, r0
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800f4e2:	e895 000c 	ldmia.w	r5, {r2, r3}
 800f4e6:	4631      	mov	r1, r6
 800f4e8:	4620      	mov	r0, r4
 800f4ea:	f7ff ffb9 	bl	800f460 <GetDutyCycle>
 800f4ee:	4605      	mov	r5, r0
    if( joined == false )
 800f4f0:	2e00      	cmp	r6, #0
 800f4f2:	d149      	bne.n	800f588 <SetMaxTimeCredits+0xc8>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800f4f4:	2864      	cmp	r0, #100	; 0x64
 800f4f6:	d023      	beq.n	800f540 <SetMaxTimeCredits+0x80>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800f4f8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800f4fc:	d024      	beq.n	800f548 <SetMaxTimeCredits+0x88>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800f4fe:	4e25      	ldr	r6, [pc, #148]	; (800f594 <SetMaxTimeCredits+0xd4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800f500:	68a1      	ldr	r1, [r4, #8]
 800f502:	a806      	add	r0, sp, #24
 800f504:	f007 fc88 	bl	8016e18 <SysTimeFromMs>
 800f508:	9b07      	ldr	r3, [sp, #28]
 800f50a:	9300      	str	r3, [sp, #0]
 800f50c:	9b06      	ldr	r3, [sp, #24]
 800f50e:	9a03      	ldr	r2, [sp, #12]
 800f510:	9902      	ldr	r1, [sp, #8]
 800f512:	a804      	add	r0, sp, #16
 800f514:	f007 fbeb 	bl	8016cee <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800f518:	b917      	cbnz	r7, 800f520 <SetMaxTimeCredits+0x60>
 800f51a:	f1b8 0f00 	cmp.w	r8, #0
 800f51e:	d002      	beq.n	800f526 <SetMaxTimeCredits+0x66>
            ( band->MaxTimeCredits != maxCredits ) ||
 800f520:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800f522:	42b3      	cmp	r3, r6
 800f524:	d014      	beq.n	800f550 <SetMaxTimeCredits+0x90>
            band->TimeCredits = maxCredits;
 800f526:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800f528:	9b02      	ldr	r3, [sp, #8]
 800f52a:	4a1b      	ldr	r2, [pc, #108]	; (800f598 <SetMaxTimeCredits+0xd8>)
 800f52c:	4293      	cmp	r3, r2
 800f52e:	d814      	bhi.n	800f55a <SetMaxTimeCredits+0x9a>
    if( band->LastBandUpdateTime == 0 )
 800f530:	6863      	ldr	r3, [r4, #4]
 800f532:	b903      	cbnz	r3, 800f536 <SetMaxTimeCredits+0x76>
        band->TimeCredits = maxCredits;
 800f534:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800f536:	6126      	str	r6, [r4, #16]
}
 800f538:	4628      	mov	r0, r5
 800f53a:	b009      	add	sp, #36	; 0x24
 800f53c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800f540:	f8c4 9008 	str.w	r9, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800f544:	4e15      	ldr	r6, [pc, #84]	; (800f59c <SetMaxTimeCredits+0xdc>)
 800f546:	e7db      	b.n	800f500 <SetMaxTimeCredits+0x40>
            band->LastMaxCreditAssignTime = elapsedTime;
 800f548:	f8c4 9008 	str.w	r9, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800f54c:	4e14      	ldr	r6, [pc, #80]	; (800f5a0 <SetMaxTimeCredits+0xe0>)
 800f54e:	e7d7      	b.n	800f500 <SetMaxTimeCredits+0x40>
            ( band->MaxTimeCredits != maxCredits ) ||
 800f550:	9a04      	ldr	r2, [sp, #16]
 800f552:	4b14      	ldr	r3, [pc, #80]	; (800f5a4 <SetMaxTimeCredits+0xe4>)
 800f554:	429a      	cmp	r2, r3
 800f556:	d9eb      	bls.n	800f530 <SetMaxTimeCredits+0x70>
 800f558:	e7e5      	b.n	800f526 <SetMaxTimeCredits+0x66>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800f55a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800f55e:	3b30      	subs	r3, #48	; 0x30
 800f560:	4a11      	ldr	r2, [pc, #68]	; (800f5a8 <SetMaxTimeCredits+0xe8>)
 800f562:	fba2 2303 	umull	r2, r3, r2, r3
 800f566:	0c1b      	lsrs	r3, r3, #16
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800f568:	4a10      	ldr	r2, [pc, #64]	; (800f5ac <SetMaxTimeCredits+0xec>)
 800f56a:	fb02 f303 	mul.w	r3, r2, r3
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800f56e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800f572:	3330      	adds	r3, #48	; 0x30
 800f574:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800f576:	2300      	movs	r3, #0
 800f578:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800f57c:	9905      	ldr	r1, [sp, #20]
 800f57e:	9804      	ldr	r0, [sp, #16]
 800f580:	f007 fc2a 	bl	8016dd8 <SysTimeToMs>
 800f584:	60a0      	str	r0, [r4, #8]
 800f586:	e7d3      	b.n	800f530 <SetMaxTimeCredits+0x70>
        if( dutyCycleEnabled == false )
 800f588:	b917      	cbnz	r7, 800f590 <SetMaxTimeCredits+0xd0>
            band->TimeCredits = maxCredits;
 800f58a:	4e04      	ldr	r6, [pc, #16]	; (800f59c <SetMaxTimeCredits+0xdc>)
 800f58c:	60e6      	str	r6, [r4, #12]
 800f58e:	e7cf      	b.n	800f530 <SetMaxTimeCredits+0x70>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800f590:	4e02      	ldr	r6, [pc, #8]	; (800f59c <SetMaxTimeCredits+0xdc>)
 800f592:	e7cd      	b.n	800f530 <SetMaxTimeCredits+0x70>
 800f594:	02932e00 	.word	0x02932e00
 800f598:	0001ec2f 	.word	0x0001ec2f
 800f59c:	001b7740 	.word	0x001b7740
 800f5a0:	0112a880 	.word	0x0112a880
 800f5a4:	0001517f 	.word	0x0001517f
 800f5a8:	c22e4507 	.word	0xc22e4507
 800f5ac:	00015180 	.word	0x00015180

0800f5b0 <UpdateTimeCredits>:
{
 800f5b0:	b570      	push	{r4, r5, r6, lr}
 800f5b2:	b082      	sub	sp, #8
 800f5b4:	4604      	mov	r4, r0
 800f5b6:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800f5b8:	9301      	str	r3, [sp, #4]
 800f5ba:	9200      	str	r2, [sp, #0]
 800f5bc:	ab06      	add	r3, sp, #24
 800f5be:	cb0c      	ldmia	r3, {r2, r3}
 800f5c0:	f7ff ff7e 	bl	800f4c0 <SetMaxTimeCredits>
 800f5c4:	4605      	mov	r5, r0
    if( joined == true )
 800f5c6:	b94e      	cbnz	r6, 800f5dc <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800f5c8:	68e2      	ldr	r2, [r4, #12]
 800f5ca:	6923      	ldr	r3, [r4, #16]
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	d900      	bls.n	800f5d2 <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800f5d0:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800f5d2:	9b08      	ldr	r3, [sp, #32]
 800f5d4:	6063      	str	r3, [r4, #4]
}
 800f5d6:	4628      	mov	r0, r5
 800f5d8:	b002      	add	sp, #8
 800f5da:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800f5dc:	6860      	ldr	r0, [r4, #4]
 800f5de:	f007 fc79 	bl	8016ed4 <UTIL_TIMER_GetElapsedTime>
 800f5e2:	68e3      	ldr	r3, [r4, #12]
 800f5e4:	4403      	add	r3, r0
 800f5e6:	60e3      	str	r3, [r4, #12]
 800f5e8:	e7ee      	b.n	800f5c8 <UpdateTimeCredits+0x18>

0800f5ea <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800f5ea:	4288      	cmp	r0, r1
 800f5ec:	db03      	blt.n	800f5f6 <RegionCommonValueInRange+0xc>
 800f5ee:	4290      	cmp	r0, r2
 800f5f0:	dd03      	ble.n	800f5fa <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800f5f2:	2000      	movs	r0, #0
 800f5f4:	4770      	bx	lr
 800f5f6:	2000      	movs	r0, #0
 800f5f8:	4770      	bx	lr
        return 1;
 800f5fa:	2001      	movs	r0, #1
}
 800f5fc:	4770      	bx	lr

0800f5fe <RegionCommonChanVerifyDr>:
{
 800f5fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f602:	4682      	mov	sl, r0
 800f604:	460e      	mov	r6, r1
 800f606:	4690      	mov	r8, r2
 800f608:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800f60c:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800f610:	4619      	mov	r1, r3
 800f612:	4640      	mov	r0, r8
 800f614:	f7ff ffe9 	bl	800f5ea <RegionCommonValueInRange>
 800f618:	b338      	cbz	r0, 800f66a <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800f61a:	2500      	movs	r5, #0
 800f61c:	462f      	mov	r7, r5
 800f61e:	e01e      	b.n	800f65e <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800f620:	3401      	adds	r4, #1
 800f622:	b2e4      	uxtb	r4, r4
 800f624:	2c0f      	cmp	r4, #15
 800f626:	d816      	bhi.n	800f656 <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800f628:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800f62c:	4123      	asrs	r3, r4
 800f62e:	f013 0f01 	tst.w	r3, #1
 800f632:	d0f5      	beq.n	800f620 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800f634:	193b      	adds	r3, r7, r4
 800f636:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f63a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800f63e:	7a19      	ldrb	r1, [r3, #8]
 800f640:	090a      	lsrs	r2, r1, #4
 800f642:	f001 010f 	and.w	r1, r1, #15
 800f646:	4640      	mov	r0, r8
 800f648:	f7ff ffcf 	bl	800f5ea <RegionCommonValueInRange>
 800f64c:	2801      	cmp	r0, #1
 800f64e:	d1e7      	bne.n	800f620 <RegionCommonChanVerifyDr+0x22>
                    return true;
 800f650:	2001      	movs	r0, #1
}
 800f652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800f656:	3710      	adds	r7, #16
 800f658:	b2ff      	uxtb	r7, r7
 800f65a:	3501      	adds	r5, #1
 800f65c:	b2ed      	uxtb	r5, r5
 800f65e:	4557      	cmp	r7, sl
 800f660:	d201      	bcs.n	800f666 <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800f662:	2400      	movs	r4, #0
 800f664:	e7de      	b.n	800f624 <RegionCommonChanVerifyDr+0x26>
    return false;
 800f666:	2000      	movs	r0, #0
 800f668:	e7f3      	b.n	800f652 <RegionCommonChanVerifyDr+0x54>
        return false;
 800f66a:	2000      	movs	r0, #0
 800f66c:	e7f1      	b.n	800f652 <RegionCommonChanVerifyDr+0x54>

0800f66e <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800f66e:	0913      	lsrs	r3, r2, #4
 800f670:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800f674:	d311      	bcc.n	800f69a <RegionCommonChanDisable+0x2c>
{
 800f676:	b410      	push	{r4}
 800f678:	090c      	lsrs	r4, r1, #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800f67a:	4291      	cmp	r1, r2
 800f67c:	d20f      	bcs.n	800f69e <RegionCommonChanDisable+0x30>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800f67e:	f001 010f 	and.w	r1, r1, #15
 800f682:	2301      	movs	r3, #1
 800f684:	fa03 f101 	lsl.w	r1, r3, r1
 800f688:	f830 2014 	ldrh.w	r2, [r0, r4, lsl #1]
 800f68c:	ea22 0101 	bic.w	r1, r2, r1
 800f690:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]

    return true;
 800f694:	4618      	mov	r0, r3
}
 800f696:	bc10      	pop	{r4}
 800f698:	4770      	bx	lr
        return false;
 800f69a:	2000      	movs	r0, #0
}
 800f69c:	4770      	bx	lr
        return false;
 800f69e:	2000      	movs	r0, #0
 800f6a0:	e7f9      	b.n	800f696 <RegionCommonChanDisable+0x28>

0800f6a2 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800f6a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800f6a4:	b188      	cbz	r0, 800f6ca <RegionCommonCountChannels+0x28>
 800f6a6:	460c      	mov	r4, r1
 800f6a8:	4616      	mov	r6, r2
 800f6aa:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800f6ac:	2500      	movs	r5, #0
 800f6ae:	e008      	b.n	800f6c2 <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800f6b0:	2110      	movs	r1, #16
 800f6b2:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800f6b6:	f7ff fef0 	bl	800f49a <CountChannels>
 800f6ba:	4405      	add	r5, r0
 800f6bc:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800f6be:	3401      	adds	r4, #1
 800f6c0:	b2e4      	uxtb	r4, r4
 800f6c2:	42b4      	cmp	r4, r6
 800f6c4:	d3f4      	bcc.n	800f6b0 <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800f6c6:	4628      	mov	r0, r5
 800f6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800f6ca:	2500      	movs	r5, #0
 800f6cc:	e7fb      	b.n	800f6c6 <RegionCommonCountChannels+0x24>

0800f6ce <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800f6ce:	b170      	cbz	r0, 800f6ee <RegionCommonChanMaskCopy+0x20>
{
 800f6d0:	b410      	push	{r4}
 800f6d2:	4604      	mov	r4, r0
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800f6d4:	b149      	cbz	r1, 800f6ea <RegionCommonChanMaskCopy+0x1c>
    {
        for( uint8_t i = 0; i < len; i++ )
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	d206      	bcs.n	800f6ea <RegionCommonChanMaskCopy+0x1c>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800f6dc:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f6e0:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800f6e4:	3301      	adds	r3, #1
 800f6e6:	b2db      	uxtb	r3, r3
 800f6e8:	e7f6      	b.n	800f6d8 <RegionCommonChanMaskCopy+0xa>
        }
    }
}
 800f6ea:	bc10      	pop	{r4}
 800f6ec:	4770      	bx	lr
 800f6ee:	4770      	bx	lr

0800f6f0 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800f6f0:	b082      	sub	sp, #8
 800f6f2:	b538      	push	{r3, r4, r5, lr}
 800f6f4:	4605      	mov	r5, r0
 800f6f6:	460c      	mov	r4, r1
 800f6f8:	4611      	mov	r1, r2
 800f6fa:	aa04      	add	r2, sp, #16
 800f6fc:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800f700:	ca0c      	ldmia	r2, {r2, r3}
 800f702:	f7ff fead 	bl	800f460 <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800f706:	68eb      	ldr	r3, [r5, #12]
 800f708:	fb04 f100 	mul.w	r1, r4, r0
 800f70c:	428b      	cmp	r3, r1
 800f70e:	d905      	bls.n	800f71c <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800f710:	1a59      	subs	r1, r3, r1
 800f712:	60e9      	str	r1, [r5, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800f714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f718:	b002      	add	sp, #8
 800f71a:	4770      	bx	lr
        band->TimeCredits = 0;
 800f71c:	2300      	movs	r3, #0
 800f71e:	60eb      	str	r3, [r5, #12]
}
 800f720:	e7f8      	b.n	800f714 <RegionCommonSetBandTxDone+0x24>
	...

0800f724 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800f724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f728:	b089      	sub	sp, #36	; 0x24
 800f72a:	4607      	mov	r7, r0
 800f72c:	468b      	mov	fp, r1
 800f72e:	4691      	mov	r9, r2
 800f730:	4698      	mov	r8, r3
 800f732:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800f736:	f007 fbc3 	bl	8016ec0 <UTIL_TIMER_GetCurrentTime>
 800f73a:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800f73c:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800f73e:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800f740:	f04f 33ff 	mov.w	r3, #4294967295
 800f744:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800f746:	e005      	b.n	800f754 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800f748:	2301      	movs	r3, #1
 800f74a:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800f74c:	441e      	add	r6, r3
 800f74e:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800f750:	3401      	adds	r4, #1
 800f752:	b2e4      	uxtb	r4, r4
 800f754:	454c      	cmp	r4, r9
 800f756:	d25b      	bcs.n	800f810 <RegionCommonUpdateBandTimeOff+0xec>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800f758:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800f75c:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800f760:	9b04      	ldr	r3, [sp, #16]
 800f762:	9302      	str	r3, [sp, #8]
 800f764:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f766:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800f768:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f76c:	4653      	mov	r3, sl
 800f76e:	4642      	mov	r2, r8
 800f770:	4639      	mov	r1, r7
 800f772:	4628      	mov	r0, r5
 800f774:	f7ff ff1c 	bl	800f5b0 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800f778:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f77a:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800f77e:	68ea      	ldr	r2, [r5, #12]
 800f780:	429a      	cmp	r2, r3
 800f782:	d8e1      	bhi.n	800f748 <RegionCommonUpdateBandTimeOff+0x24>
 800f784:	f1b8 0f00 	cmp.w	r8, #0
 800f788:	d101      	bne.n	800f78e <RegionCommonUpdateBandTimeOff+0x6a>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800f78a:	2f00      	cmp	r7, #0
 800f78c:	d1dc      	bne.n	800f748 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800f78e:	2100      	movs	r1, #0
 800f790:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 800f792:	6929      	ldr	r1, [r5, #16]
 800f794:	4299      	cmp	r1, r3
 800f796:	d907      	bls.n	800f7a8 <RegionCommonUpdateBandTimeOff+0x84>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800f798:	1a9b      	subs	r3, r3, r2
 800f79a:	9a05      	ldr	r2, [sp, #20]
 800f79c:	429a      	cmp	r2, r3
 800f79e:	bf28      	it	cs
 800f7a0:	461a      	movcs	r2, r3
 800f7a2:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800f7a4:	3601      	adds	r6, #1
 800f7a6:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800f7a8:	2f00      	cmp	r7, #0
 800f7aa:	d1d1      	bne.n	800f750 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800f7b2:	2864      	cmp	r0, #100	; 0x64
 800f7b4:	d024      	beq.n	800f800 <RegionCommonUpdateBandTimeOff+0xdc>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800f7b6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800f7ba:	d025      	beq.n	800f808 <RegionCommonUpdateBandTimeOff+0xe4>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800f7bc:	4b19      	ldr	r3, [pc, #100]	; (800f824 <RegionCommonUpdateBandTimeOff+0x100>)
 800f7be:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800f7c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f7c2:	4a18      	ldr	r2, [pc, #96]	; (800f824 <RegionCommonUpdateBandTimeOff+0x100>)
 800f7c4:	4293      	cmp	r3, r2
 800f7c6:	d90c      	bls.n	800f7e2 <RegionCommonUpdateBandTimeOff+0xbe>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800f7c8:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800f7cc:	3b30      	subs	r3, #48	; 0x30
 800f7ce:	4a16      	ldr	r2, [pc, #88]	; (800f828 <RegionCommonUpdateBandTimeOff+0x104>)
 800f7d0:	fba2 2303 	umull	r2, r3, r2, r3
 800f7d4:	0c1b      	lsrs	r3, r3, #16
 800f7d6:	4a15      	ldr	r2, [pc, #84]	; (800f82c <RegionCommonUpdateBandTimeOff+0x108>)
 800f7d8:	fb03 2202 	mla	r2, r3, r2, r2
 800f7dc:	9b06      	ldr	r3, [sp, #24]
 800f7de:	441a      	add	r2, r3
 800f7e0:	9206      	str	r2, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800f7e2:	ad06      	add	r5, sp, #24
 800f7e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f7e6:	9300      	str	r3, [sp, #0]
 800f7e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f7ea:	e895 0006 	ldmia.w	r5, {r1, r2}
 800f7ee:	4628      	mov	r0, r5
 800f7f0:	f007 fa7d 	bl	8016cee <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800f7f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f7f8:	f007 faee 	bl	8016dd8 <SysTimeToMs>
 800f7fc:	9005      	str	r0, [sp, #20]
 800f7fe:	e7a7      	b.n	800f750 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800f800:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800f804:	9306      	str	r3, [sp, #24]
 800f806:	e7db      	b.n	800f7c0 <RegionCommonUpdateBandTimeOff+0x9c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800f808:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800f80c:	9306      	str	r3, [sp, #24]
 800f80e:	e7d7      	b.n	800f7c0 <RegionCommonUpdateBandTimeOff+0x9c>
            }
        }
    }


    if( validBands == 0 )
 800f810:	b11e      	cbz	r6, 800f81a <RegionCommonUpdateBandTimeOff+0xf6>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800f812:	9805      	ldr	r0, [sp, #20]
 800f814:	b009      	add	sp, #36	; 0x24
 800f816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800f81a:	f04f 33ff 	mov.w	r3, #4294967295
 800f81e:	9305      	str	r3, [sp, #20]
 800f820:	e7f7      	b.n	800f812 <RegionCommonUpdateBandTimeOff+0xee>
 800f822:	bf00      	nop
 800f824:	0001ec30 	.word	0x0001ec30
 800f828:	c22e4507 	.word	0xc22e4507
 800f82c:	00015180 	.word	0x00015180

0800f830 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800f830:	7803      	ldrb	r3, [r0, #0]
 800f832:	2b03      	cmp	r3, #3
 800f834:	d001      	beq.n	800f83a <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800f836:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800f838:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800f83a:	7843      	ldrb	r3, [r0, #1]
 800f83c:	f990 2001 	ldrsb.w	r2, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800f840:	f002 020f 	and.w	r2, r2, #15
 800f844:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800f846:	091b      	lsrs	r3, r3, #4
 800f848:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800f84a:	7883      	ldrb	r3, [r0, #2]
 800f84c:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800f84e:	78c2      	ldrb	r2, [r0, #3]
 800f850:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f854:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800f856:	7903      	ldrb	r3, [r0, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800f858:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800f85c:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800f85e:	f003 030f 	and.w	r3, r3, #15
 800f862:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800f864:	2005      	movs	r0, #5
 800f866:	4770      	bx	lr

0800f868 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800f868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f86c:	b085      	sub	sp, #20
 800f86e:	4604      	mov	r4, r0
 800f870:	4688      	mov	r8, r1
 800f872:	4617      	mov	r7, r2
 800f874:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800f876:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800f878:	f990 b006 	ldrsb.w	fp, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800f87c:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800f880:	f990 a008 	ldrsb.w	sl, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800f884:	7943      	ldrb	r3, [r0, #5]
 800f886:	b92b      	cbnz	r3, 800f894 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800f888:	f990 a00b 	ldrsb.w	sl, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800f88c:	f990 b009 	ldrsb.w	fp, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800f890:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800f894:	b95d      	cbnz	r5, 800f8ae <RegionCommonLinkAdrReqVerifyParams+0x46>
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800f896:	2d07      	cmp	r5, #7
 800f898:	d02c      	beq.n	800f8f4 <RegionCommonLinkAdrReqVerifyParams+0x8c>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800f89a:	f888 b000 	strb.w	fp, [r8]
    *txPow = txPower;
 800f89e:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800f8a2:	f886 a000 	strb.w	sl, [r6]

    return status;
}
 800f8a6:	4628      	mov	r0, r5
 800f8a8:	b005      	add	sp, #20
 800f8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800f8ae:	69a3      	ldr	r3, [r4, #24]
 800f8b0:	9301      	str	r3, [sp, #4]
 800f8b2:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800f8b6:	9300      	str	r3, [sp, #0]
 800f8b8:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800f8bc:	465a      	mov	r2, fp
 800f8be:	6921      	ldr	r1, [r4, #16]
 800f8c0:	7b20      	ldrb	r0, [r4, #12]
 800f8c2:	f7ff fe9c 	bl	800f5fe <RegionCommonChanVerifyDr>
 800f8c6:	b908      	cbnz	r0, 800f8cc <RegionCommonLinkAdrReqVerifyParams+0x64>
            status &= 0xFD; // Datarate KO
 800f8c8:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800f8cc:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800f8d0:	9303      	str	r3, [sp, #12]
 800f8d2:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800f8d6:	461c      	mov	r4, r3
 800f8d8:	4619      	mov	r1, r3
 800f8da:	4648      	mov	r0, r9
 800f8dc:	f7ff fe85 	bl	800f5ea <RegionCommonValueInRange>
 800f8e0:	2800      	cmp	r0, #0
 800f8e2:	d1d8      	bne.n	800f896 <RegionCommonLinkAdrReqVerifyParams+0x2e>
            if( verifyParams->MaxTxPower > txPower )
 800f8e4:	454c      	cmp	r4, r9
 800f8e6:	dc02      	bgt.n	800f8ee <RegionCommonLinkAdrReqVerifyParams+0x86>
                status &= 0xFB; // TxPower KO
 800f8e8:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800f8ec:	e7d3      	b.n	800f896 <RegionCommonLinkAdrReqVerifyParams+0x2e>
                txPower = verifyParams->MaxTxPower;
 800f8ee:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f8f2:	e7d0      	b.n	800f896 <RegionCommonLinkAdrReqVerifyParams+0x2e>
        if( nbRepetitions == 0 )
 800f8f4:	f1ba 0f00 	cmp.w	sl, #0
 800f8f8:	d1cf      	bne.n	800f89a <RegionCommonLinkAdrReqVerifyParams+0x32>
            nbRepetitions = 1;
 800f8fa:	f04f 0a01 	mov.w	sl, #1
 800f8fe:	e7cc      	b.n	800f89a <RegionCommonLinkAdrReqVerifyParams+0x32>

0800f900 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800f900:	4b02      	ldr	r3, [pc, #8]	; (800f90c <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800f902:	fa03 f000 	lsl.w	r0, r3, r0
}
 800f906:	fbb0 f0f1 	udiv	r0, r0, r1
 800f90a:	4770      	bx	lr
 800f90c:	000f4240 	.word	0x000f4240

0800f910 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800f910:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800f914:	fbb3 f0f0 	udiv	r0, r3, r0
 800f918:	4770      	bx	lr
	...

0800f91c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800f91c:	b430      	push	{r4, r5}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800f91e:	1f0c      	subs	r4, r1, #4
 800f920:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800f924:	fb05 f202 	mul.w	r2, r5, r2
 800f928:	fb00 2204 	mla	r2, r0, r4, r2
 800f92c:	0052      	lsls	r2, r2, #1
 800f92e:	d021      	beq.n	800f974 <RegionCommonComputeRxWindowParameters+0x58>
 800f930:	4402      	add	r2, r0
 800f932:	3a01      	subs	r2, #1
 800f934:	fbb2 f2f0 	udiv	r2, r2, r0
 800f938:	428a      	cmp	r2, r1
 800f93a:	bf38      	it	cc
 800f93c:	460a      	movcc	r2, r1
 800f93e:	9902      	ldr	r1, [sp, #8]
 800f940:	600a      	str	r2, [r1, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800f942:	0081      	lsls	r1, r0, #2
 800f944:	fb00 f002 	mul.w	r0, r0, r2
 800f948:	b1b8      	cbz	r0, 800f97a <RegionCommonComputeRxWindowParameters+0x5e>
 800f94a:	3001      	adds	r0, #1
 800f94c:	0840      	lsrs	r0, r0, #1
 800f94e:	1a08      	subs	r0, r1, r0
 800f950:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f954:	fb02 0313 	mls	r3, r2, r3, r0
 800f958:	2b00      	cmp	r3, #0
 800f95a:	dd10      	ble.n	800f97e <RegionCommonComputeRxWindowParameters+0x62>
 800f95c:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800f960:	480a      	ldr	r0, [pc, #40]	; (800f98c <RegionCommonComputeRxWindowParameters+0x70>)
 800f962:	fb80 2003 	smull	r2, r0, r0, r3
 800f966:	17db      	asrs	r3, r3, #31
 800f968:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 800f96c:	9a03      	ldr	r2, [sp, #12]
 800f96e:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800f970:	bc30      	pop	{r4, r5}
 800f972:	4770      	bx	lr
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800f974:	fbb2 f2f0 	udiv	r2, r2, r0
 800f978:	e7de      	b.n	800f938 <RegionCommonComputeRxWindowParameters+0x1c>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800f97a:	0840      	lsrs	r0, r0, #1
 800f97c:	e7e7      	b.n	800f94e <RegionCommonComputeRxWindowParameters+0x32>
 800f97e:	4803      	ldr	r0, [pc, #12]	; (800f98c <RegionCommonComputeRxWindowParameters+0x70>)
 800f980:	fb80 2003 	smull	r2, r0, r0, r3
 800f984:	17db      	asrs	r3, r3, #31
 800f986:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 800f98a:	e7ef      	b.n	800f96c <RegionCommonComputeRxWindowParameters+0x50>
 800f98c:	10624dd3 	.word	0x10624dd3

0800f990 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800f990:	b538      	push	{r3, r4, r5, lr}
 800f992:	460d      	mov	r5, r1
 800f994:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800f996:	0040      	lsls	r0, r0, #1
 800f998:	f7f0 ff18 	bl	80007cc <__aeabi_ui2f>
 800f99c:	4601      	mov	r1, r0
 800f99e:	4628      	mov	r0, r5
 800f9a0:	f7f0 fe62 	bl	8000668 <__aeabi_fsub>
 800f9a4:	4621      	mov	r1, r4
 800f9a6:	f7f0 fe5f 	bl	8000668 <__aeabi_fsub>
 800f9aa:	f7f0 fd51 	bl	8000450 <__aeabi_f2d>
 800f9ae:	f007 fd67 	bl	8017480 <floor>
 800f9b2:	f7f0 fe2d 	bl	8000610 <__aeabi_d2iz>

    return phyTxPower;
}
 800f9b6:	b240      	sxtb	r0, r0
 800f9b8:	bd38      	pop	{r3, r4, r5, pc}

0800f9ba <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800f9ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9be:	b083      	sub	sp, #12
 800f9c0:	4605      	mov	r5, r0
 800f9c2:	468b      	mov	fp, r1
 800f9c4:	9200      	str	r2, [sp, #0]
 800f9c6:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800f9c8:	2600      	movs	r6, #0
 800f9ca:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800f9cc:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800f9ce:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800f9d0:	e04a      	b.n	800fa68 <RegionCommonCountNbOfEnabledChannels+0xae>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800f9d2:	7a3a      	ldrb	r2, [r7, #8]
 800f9d4:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800f9d8:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800f9dc:	b252      	sxtb	r2, r2
 800f9de:	b249      	sxtb	r1, r1
 800f9e0:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800f9e4:	f7ff fe01 	bl	800f5ea <RegionCommonValueInRange>
 800f9e8:	b178      	cbz	r0, 800fa0a <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800f9ea:	68ea      	ldr	r2, [r5, #12]
 800f9ec:	7a7b      	ldrb	r3, [r7, #9]
 800f9ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f9f2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f9f6:	7d1b      	ldrb	r3, [r3, #20]
 800f9f8:	b35b      	cbz	r3, 800fa52 <RegionCommonCountNbOfEnabledChannels+0x98>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800f9fa:	f109 0301 	add.w	r3, r9, #1
 800f9fe:	eb08 0204 	add.w	r2, r8, r4
 800fa02:	f80b 2009 	strb.w	r2, [fp, r9]
 800fa06:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800fa0a:	3401      	adds	r4, #1
 800fa0c:	b2e4      	uxtb	r4, r4
 800fa0e:	2c0f      	cmp	r4, #15
 800fa10:	d824      	bhi.n	800fa5c <RegionCommonCountNbOfEnabledChannels+0xa2>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800fa12:	686b      	ldr	r3, [r5, #4]
 800fa14:	0072      	lsls	r2, r6, #1
 800fa16:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800fa1a:	4123      	asrs	r3, r4
 800fa1c:	f013 0f01 	tst.w	r3, #1
 800fa20:	d0f3      	beq.n	800fa0a <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800fa22:	68a8      	ldr	r0, [r5, #8]
 800fa24:	eb08 0304 	add.w	r3, r8, r4
 800fa28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fa2c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800fa30:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d0e8      	beq.n	800fa0a <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800fa38:	782b      	ldrb	r3, [r5, #0]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d1c9      	bne.n	800f9d2 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800fa3e:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d0c6      	beq.n	800f9d2 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800fa44:	5a9b      	ldrh	r3, [r3, r2]
 800fa46:	fa43 f104 	asr.w	r1, r3, r4
 800fa4a:	f011 0f01 	tst.w	r1, #1
 800fa4e:	d1c0      	bne.n	800f9d2 <RegionCommonCountNbOfEnabledChannels+0x18>
 800fa50:	e7db      	b.n	800fa0a <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800fa52:	f10a 0a01 	add.w	sl, sl, #1
 800fa56:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800fa5a:	e7d6      	b.n	800fa0a <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800fa5c:	f108 0810 	add.w	r8, r8, #16
 800fa60:	fa5f f888 	uxtb.w	r8, r8
 800fa64:	3601      	adds	r6, #1
 800fa66:	b2f6      	uxtb	r6, r6
 800fa68:	fa1f f388 	uxth.w	r3, r8
 800fa6c:	8a2a      	ldrh	r2, [r5, #16]
 800fa6e:	4293      	cmp	r3, r2
 800fa70:	d201      	bcs.n	800fa76 <RegionCommonCountNbOfEnabledChannels+0xbc>
        for( uint8_t j = 0; j < 16; j++ )
 800fa72:	2400      	movs	r4, #0
 800fa74:	e7cb      	b.n	800fa0e <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800fa76:	9b00      	ldr	r3, [sp, #0]
 800fa78:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800fa7c:	9b01      	ldr	r3, [sp, #4]
 800fa7e:	f883 a000 	strb.w	sl, [r3]
}
 800fa82:	b003      	add	sp, #12
 800fa84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fa88 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800fa88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa8c:	b085      	sub	sp, #20
 800fa8e:	4604      	mov	r4, r0
 800fa90:	460f      	mov	r7, r1
 800fa92:	4616      	mov	r6, r2
 800fa94:	461d      	mov	r5, r3
 800fa96:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800fa9a:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800fa9e:	6840      	ldr	r0, [r0, #4]
 800faa0:	f007 fa18 	bl	8016ed4 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800faa4:	6823      	ldr	r3, [r4, #0]
 800faa6:	1a1b      	subs	r3, r3, r0
 800faa8:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800faac:	2301      	movs	r3, #1
 800faae:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800fab2:	2300      	movs	r3, #0
 800fab4:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800fab6:	6863      	ldr	r3, [r4, #4]
 800fab8:	b113      	cbz	r3, 800fac0 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800faba:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800fabc:	4283      	cmp	r3, r0
 800fabe:	d81c      	bhi.n	800fafa <RegionCommonIdentifyChannels+0x72>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800fac0:	2300      	movs	r3, #0
 800fac2:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800fac4:	69e3      	ldr	r3, [r4, #28]
 800fac6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800faca:	781f      	ldrb	r7, [r3, #0]
 800facc:	69a3      	ldr	r3, [r4, #24]
 800face:	9303      	str	r3, [sp, #12]
 800fad0:	ab01      	add	r3, sp, #4
 800fad2:	6921      	ldr	r1, [r4, #16]
 800fad4:	68e0      	ldr	r0, [r4, #12]
 800fad6:	e883 0003 	stmia.w	r3, {r0, r1}
 800fada:	7d23      	ldrb	r3, [r4, #20]
 800fadc:	9300      	str	r3, [sp, #0]
 800fade:	7a23      	ldrb	r3, [r4, #8]
 800fae0:	7a62      	ldrb	r2, [r4, #9]
 800fae2:	4661      	mov	r1, ip
 800fae4:	4638      	mov	r0, r7
 800fae6:	f7ff fe1d 	bl	800f724 <RegionCommonUpdateBandTimeOff>
 800faea:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800faee:	4643      	mov	r3, r8
 800faf0:	462a      	mov	r2, r5
 800faf2:	4631      	mov	r1, r6
 800faf4:	69e0      	ldr	r0, [r4, #28]
 800faf6:	f7ff ff60 	bl	800f9ba <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800fafa:	782b      	ldrb	r3, [r5, #0]
 800fafc:	b923      	cbnz	r3, 800fb08 <RegionCommonIdentifyChannels+0x80>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800fafe:	f898 3000 	ldrb.w	r3, [r8]
 800fb02:	b13b      	cbz	r3, 800fb14 <RegionCommonIdentifyChannels+0x8c>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800fb04:	200b      	movs	r0, #11
 800fb06:	e002      	b.n	800fb0e <RegionCommonIdentifyChannels+0x86>
        *nextTxDelay = 0;
 800fb08:	2000      	movs	r0, #0
 800fb0a:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800fb0e:	b005      	add	sp, #20
 800fb10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800fb14:	200c      	movs	r0, #12
 800fb16:	e7fa      	b.n	800fb0e <RegionCommonIdentifyChannels+0x86>

0800fb18 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800fb18:	b570      	push	{r4, r5, r6, lr}
 800fb1a:	b082      	sub	sp, #8
 800fb1c:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800fb1e:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800fb22:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800fb26:	42a6      	cmp	r6, r4
 800fb28:	d011      	beq.n	800fb4e <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800fb2a:	3c01      	subs	r4, #1
 800fb2c:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800fb2e:	42a6      	cmp	r6, r4
 800fb30:	d00e      	beq.n	800fb50 <RegionCommonGetNextLowerTxDr+0x38>
 800fb32:	68ab      	ldr	r3, [r5, #8]
 800fb34:	9301      	str	r3, [sp, #4]
 800fb36:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800fb3a:	9300      	str	r3, [sp, #0]
 800fb3c:	4633      	mov	r3, r6
 800fb3e:	4622      	mov	r2, r4
 800fb40:	6869      	ldr	r1, [r5, #4]
 800fb42:	78e8      	ldrb	r0, [r5, #3]
 800fb44:	f7ff fd5b 	bl	800f5fe <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800fb48:	2800      	cmp	r0, #0
 800fb4a:	d0ee      	beq.n	800fb2a <RegionCommonGetNextLowerTxDr+0x12>
 800fb4c:	e000      	b.n	800fb50 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800fb4e:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800fb50:	4620      	mov	r0, r4
 800fb52:	b002      	add	sp, #8
 800fb54:	bd70      	pop	{r4, r5, r6, pc}

0800fb56 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800fb56:	4288      	cmp	r0, r1
 800fb58:	bfb8      	it	lt
 800fb5a:	4608      	movlt	r0, r1
 800fb5c:	4770      	bx	lr
	...

0800fb60 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800fb60:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800fb64:	4a05      	ldr	r2, [pc, #20]	; (800fb7c <RegionCommonGetBandwidth+0x1c>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	d004      	beq.n	800fb74 <RegionCommonGetBandwidth+0x14>
 800fb6a:	4a05      	ldr	r2, [pc, #20]	; (800fb80 <RegionCommonGetBandwidth+0x20>)
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	d103      	bne.n	800fb78 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800fb70:	2002      	movs	r0, #2
 800fb72:	4770      	bx	lr
            return 1;
 800fb74:	2001      	movs	r0, #1
 800fb76:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800fb78:	2000      	movs	r0, #0
    }
}
 800fb7a:	4770      	bx	lr
 800fb7c:	0003d090 	.word	0x0003d090
 800fb80:	0007a120 	.word	0x0007a120

0800fb84 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800fb84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb86:	b08b      	sub	sp, #44	; 0x2c
 800fb88:	4606      	mov	r6, r0
 800fb8a:	460f      	mov	r7, r1
 800fb8c:	4694      	mov	ip, r2
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800fb8e:	ac04      	add	r4, sp, #16
 800fb90:	4d11      	ldr	r5, [pc, #68]	; (800fbd8 <RegionCommonRxConfigPrint+0x54>)
 800fb92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb96:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fb9a:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 800fb9e:	2e05      	cmp	r6, #5
 800fba0:	d810      	bhi.n	800fbc4 <RegionCommonRxConfigPrint+0x40>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800fba2:	f8cd c008 	str.w	ip, [sp, #8]
 800fba6:	9701      	str	r7, [sp, #4]
 800fba8:	ab0a      	add	r3, sp, #40	; 0x28
 800fbaa:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800fbae:	f856 3c18 	ldr.w	r3, [r6, #-24]
 800fbb2:	9300      	str	r3, [sp, #0]
 800fbb4:	4b09      	ldr	r3, [pc, #36]	; (800fbdc <RegionCommonRxConfigPrint+0x58>)
 800fbb6:	2201      	movs	r2, #1
 800fbb8:	2100      	movs	r1, #0
 800fbba:	2002      	movs	r0, #2
 800fbbc:	f006 fe86 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800fbc0:	b00b      	add	sp, #44	; 0x2c
 800fbc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800fbc4:	f8cd c004 	str.w	ip, [sp, #4]
 800fbc8:	9700      	str	r7, [sp, #0]
 800fbca:	4b05      	ldr	r3, [pc, #20]	; (800fbe0 <RegionCommonRxConfigPrint+0x5c>)
 800fbcc:	2201      	movs	r2, #1
 800fbce:	2100      	movs	r1, #0
 800fbd0:	2002      	movs	r0, #2
 800fbd2:	f006 fe7b 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
}
 800fbd6:	e7f3      	b.n	800fbc0 <RegionCommonRxConfigPrint+0x3c>
 800fbd8:	080175f0 	.word	0x080175f0
 800fbdc:	08017d44 	.word	0x08017d44
 800fbe0:	08017d64 	.word	0x08017d64

0800fbe4 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800fbe4:	b500      	push	{lr}
 800fbe6:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800fbe8:	9101      	str	r1, [sp, #4]
 800fbea:	9000      	str	r0, [sp, #0]
 800fbec:	4b04      	ldr	r3, [pc, #16]	; (800fc00 <RegionCommonTxConfigPrint+0x1c>)
 800fbee:	2201      	movs	r2, #1
 800fbf0:	2100      	movs	r1, #0
 800fbf2:	2002      	movs	r0, #2
 800fbf4:	f006 fe6a 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
}
 800fbf8:	b003      	add	sp, #12
 800fbfa:	f85d fb04 	ldr.w	pc, [sp], #4
 800fbfe:	bf00      	nop
 800fc00:	08017d80 	.word	0x08017d80

0800fc04 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 800fc04:	b510      	push	{r4, lr}
 800fc06:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800fc08:	4b05      	ldr	r3, [pc, #20]	; (800fc20 <VerifyRfFreq+0x1c>)
 800fc0a:	6a1b      	ldr	r3, [r3, #32]
 800fc0c:	4798      	blx	r3
 800fc0e:	b120      	cbz	r0, 800fc1a <VerifyRfFreq+0x16>
    {
        return false;
    }

    if( ( freq < 433175000 ) || ( freq > 434665000 ) )
 800fc10:	4b04      	ldr	r3, [pc, #16]	; (800fc24 <VerifyRfFreq+0x20>)
 800fc12:	4423      	add	r3, r4
 800fc14:	4a04      	ldr	r2, [pc, #16]	; (800fc28 <VerifyRfFreq+0x24>)
 800fc16:	4293      	cmp	r3, r2
 800fc18:	d800      	bhi.n	800fc1c <VerifyRfFreq+0x18>
    {
        return false;
    }
    return true;
}
 800fc1a:	bd10      	pop	{r4, pc}
        return false;
 800fc1c:	2000      	movs	r0, #0
 800fc1e:	e7fc      	b.n	800fc1a <VerifyRfFreq+0x16>
 800fc20:	08018400 	.word	0x08018400
 800fc24:	e62e4628 	.word	0xe62e4628
 800fc28:	0016bc50 	.word	0x0016bc50

0800fc2c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800fc2c:	b570      	push	{r4, r5, r6, lr}
 800fc2e:	b084      	sub	sp, #16
 800fc30:	4605      	mov	r5, r0
 800fc32:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU433[datarate];
 800fc34:	4b13      	ldr	r3, [pc, #76]	; (800fc84 <GetTimeOnAir+0x58>)
 800fc36:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU433 );
 800fc38:	4913      	ldr	r1, [pc, #76]	; (800fc88 <GetTimeOnAir+0x5c>)
 800fc3a:	f7ff ff91 	bl	800fb60 <RegionCommonGetBandwidth>
 800fc3e:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800fc40:	2d07      	cmp	r5, #7
 800fc42:	d00e      	beq.n	800fc62 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800fc44:	4b11      	ldr	r3, [pc, #68]	; (800fc8c <GetTimeOnAir+0x60>)
 800fc46:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800fc48:	2001      	movs	r0, #1
 800fc4a:	9003      	str	r0, [sp, #12]
 800fc4c:	b2e4      	uxtb	r4, r4
 800fc4e:	9402      	str	r4, [sp, #8]
 800fc50:	2300      	movs	r3, #0
 800fc52:	9301      	str	r3, [sp, #4]
 800fc54:	2308      	movs	r3, #8
 800fc56:	9300      	str	r3, [sp, #0]
 800fc58:	4603      	mov	r3, r0
 800fc5a:	4632      	mov	r2, r6
 800fc5c:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800fc5e:	b004      	add	sp, #16
 800fc60:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800fc62:	4b0a      	ldr	r3, [pc, #40]	; (800fc8c <GetTimeOnAir+0x60>)
 800fc64:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800fc66:	2301      	movs	r3, #1
 800fc68:	9303      	str	r3, [sp, #12]
 800fc6a:	b2e4      	uxtb	r4, r4
 800fc6c:	9402      	str	r4, [sp, #8]
 800fc6e:	2000      	movs	r0, #0
 800fc70:	9001      	str	r0, [sp, #4]
 800fc72:	2305      	movs	r3, #5
 800fc74:	9300      	str	r3, [sp, #0]
 800fc76:	4603      	mov	r3, r0
 800fc78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fc7c:	fb02 f206 	mul.w	r2, r2, r6
 800fc80:	47a8      	blx	r5
 800fc82:	e7ec      	b.n	800fc5e <GetTimeOnAir+0x32>
 800fc84:	08017dbc 	.word	0x08017dbc
 800fc88:	08017d9c 	.word	0x08017d9c
 800fc8c:	08018400 	.word	0x08018400

0800fc90 <RegionEU433GetPhyParam>:
#endif /* REGION_EU433 */

PhyParam_t RegionEU433GetPhyParam( GetPhyParams_t* getPhy )
{
 800fc90:	b500      	push	{lr}
 800fc92:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800fc94:	2300      	movs	r3, #0
 800fc96:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU433 )
    switch( getPhy->Attribute )
 800fc98:	7803      	ldrb	r3, [r0, #0]
 800fc9a:	3b0b      	subs	r3, #11
 800fc9c:	2b2e      	cmp	r3, #46	; 0x2e
 800fc9e:	d830      	bhi.n	800fd02 <RegionEU433GetPhyParam+0x72>
 800fca0:	e8df f003 	tbb	[pc, r3]
 800fca4:	3f393633 	.word	0x3f393633
 800fca8:	504c4845 	.word	0x504c4845
 800fcac:	605c5854 	.word	0x605c5854
 800fcb0:	6c2f692f 	.word	0x6c2f692f
 800fcb4:	2f7b7872 	.word	0x2f7b7872
 800fcb8:	18827f2f 	.word	0x18827f2f
 800fcbc:	2f2f2f2f 	.word	0x2f2f2f2f
 800fcc0:	2f2f2f2f 	.word	0x2f2f2f2f
 800fcc4:	2f2f2f2f 	.word	0x2f2f2f2f
 800fcc8:	9288852f 	.word	0x9288852f
 800fccc:	98952f2f 	.word	0x98952f2f
 800fcd0:	9b2f      	.short	0x9b2f
 800fcd2:	a1          	.byte	0xa1
 800fcd3:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800fcd4:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800fcd8:	f88d 3004 	strb.w	r3, [sp, #4]
 800fcdc:	2307      	movs	r3, #7
 800fcde:	f88d 3005 	strb.w	r3, [sp, #5]
 800fce2:	2300      	movs	r3, #0
 800fce4:	f88d 3006 	strb.w	r3, [sp, #6]
 800fce8:	2310      	movs	r3, #16
 800fcea:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU433_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU433_TX_MIN_DATARATE,
                .NbChannels = EU433_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800fcee:	4b41      	ldr	r3, [pc, #260]	; (800fdf4 <RegionEU433GetPhyParam+0x164>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800fcf6:	9202      	str	r2, [sp, #8]
 800fcf8:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800fcfa:	a801      	add	r0, sp, #4
 800fcfc:	f7ff ff0c 	bl	800fb18 <RegionCommonGetNextLowerTxDr>
 800fd00:	9004      	str	r0, [sp, #16]
        }
    }

#endif /* REGION_EU433 */
    return phyParam;
}
 800fd02:	9804      	ldr	r0, [sp, #16]
 800fd04:	b007      	add	sp, #28
 800fd06:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800fd0a:	2340      	movs	r3, #64	; 0x40
 800fd0c:	9304      	str	r3, [sp, #16]
            break;
 800fd0e:	e7f8      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800fd10:	2320      	movs	r3, #32
 800fd12:	9304      	str	r3, [sp, #16]
            break;
 800fd14:	e7f5      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateEU433[getPhy->Datarate];
 800fd16:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800fd1a:	4a37      	ldr	r2, [pc, #220]	; (800fdf8 <RegionEU433GetPhyParam+0x168>)
 800fd1c:	5cd3      	ldrb	r3, [r2, r3]
 800fd1e:	9304      	str	r3, [sp, #16]
            break;
 800fd20:	e7ef      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU433[getPhy->Datarate];
 800fd22:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800fd26:	4a35      	ldr	r2, [pc, #212]	; (800fdfc <RegionEU433GetPhyParam+0x16c>)
 800fd28:	5cd3      	ldrb	r3, [r2, r3]
 800fd2a:	9304      	str	r3, [sp, #16]
            break;
 800fd2c:	e7e9      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
            phyParam.Value = EU433_DUTY_CYCLE_ENABLED;
 800fd2e:	2301      	movs	r3, #1
 800fd30:	9304      	str	r3, [sp, #16]
            break;
 800fd32:	e7e6      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
            phyParam.Value = EU433_MAX_RX_WINDOW;
 800fd34:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800fd38:	9304      	str	r3, [sp, #16]
            break;
 800fd3a:	e7e2      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800fd3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fd40:	9304      	str	r3, [sp, #16]
            break;
 800fd42:	e7de      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800fd44:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800fd48:	9304      	str	r3, [sp, #16]
            break;
 800fd4a:	e7da      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800fd4c:	f241 3388 	movw	r3, #5000	; 0x1388
 800fd50:	9304      	str	r3, [sp, #16]
            break;
 800fd52:	e7d6      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800fd54:	f241 7370 	movw	r3, #6000	; 0x1770
 800fd58:	9304      	str	r3, [sp, #16]
            break;
 800fd5a:	e7d2      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800fd5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fd60:	9304      	str	r3, [sp, #16]
            break;
 800fd62:	e7ce      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800fd64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800fd68:	4825      	ldr	r0, [pc, #148]	; (800fe00 <RegionEU433GetPhyParam+0x170>)
 800fd6a:	f004 fc19 	bl	80145a0 <randr>
 800fd6e:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800fd72:	9004      	str	r0, [sp, #16]
            break;
 800fd74:	e7c5      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
            phyParam.Value = EU433_RX_WND_2_FREQ;
 800fd76:	4b23      	ldr	r3, [pc, #140]	; (800fe04 <RegionEU433GetPhyParam+0x174>)
 800fd78:	9304      	str	r3, [sp, #16]
            break;
 800fd7a:	e7c2      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800fd7c:	4b1d      	ldr	r3, [pc, #116]	; (800fdf4 <RegionEU433GetPhyParam+0x164>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800fd84:	9304      	str	r3, [sp, #16]
            break;
 800fd86:	e7bc      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800fd88:	4b1a      	ldr	r3, [pc, #104]	; (800fdf4 <RegionEU433GetPhyParam+0x164>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800fd90:	9304      	str	r3, [sp, #16]
            break;
 800fd92:	e7b6      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
            phyParam.Value = EU433_MAX_NB_CHANNELS;
 800fd94:	2310      	movs	r3, #16
 800fd96:	9304      	str	r3, [sp, #16]
            break;
 800fd98:	e7b3      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800fd9a:	4b16      	ldr	r3, [pc, #88]	; (800fdf4 <RegionEU433GetPhyParam+0x164>)
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	9304      	str	r3, [sp, #16]
            break;
 800fda0:	e7af      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
            phyParam.fValue = EU433_DEFAULT_MAX_EIRP;
 800fda2:	4b19      	ldr	r3, [pc, #100]	; (800fe08 <RegionEU433GetPhyParam+0x178>)
 800fda4:	9304      	str	r3, [sp, #16]
            break;
 800fda6:	e7ac      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
            phyParam.fValue = EU433_DEFAULT_ANTENNA_GAIN;
 800fda8:	4b18      	ldr	r3, [pc, #96]	; (800fe0c <RegionEU433GetPhyParam+0x17c>)
 800fdaa:	9304      	str	r3, [sp, #16]
            break;
 800fdac:	e7a9      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
            phyParam.Value = EU433_BEACON_CHANNEL_FREQ;
 800fdae:	4b15      	ldr	r3, [pc, #84]	; (800fe04 <RegionEU433GetPhyParam+0x174>)
 800fdb0:	9304      	str	r3, [sp, #16]
            break;
 800fdb2:	e7a6      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = EU433_BEACON_SIZE;
 800fdb4:	2311      	movs	r3, #17
 800fdb6:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU433_RFU1_SIZE;
 800fdba:	2302      	movs	r3, #2
 800fdbc:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = EU433_RFU2_SIZE;
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800fdc6:	e79c      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
            phyParam.Value = EU433_BEACON_CHANNEL_DR;
 800fdc8:	2303      	movs	r3, #3
 800fdca:	9304      	str	r3, [sp, #16]
            break;
 800fdcc:	e799      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
            phyParam.Value = EU433_PING_SLOT_CHANNEL_FREQ;
 800fdce:	4b0d      	ldr	r3, [pc, #52]	; (800fe04 <RegionEU433GetPhyParam+0x174>)
 800fdd0:	9304      	str	r3, [sp, #16]
            break;
 800fdd2:	e796      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
            phyParam.Value = EU433_PING_SLOT_CHANNEL_DR;
 800fdd4:	2303      	movs	r3, #3
 800fdd6:	9304      	str	r3, [sp, #16]
            break;
 800fdd8:	e793      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
            phyParam.Value = DataratesEU433[getPhy->Datarate];
 800fdda:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800fdde:	4a0c      	ldr	r2, [pc, #48]	; (800fe10 <RegionEU433GetPhyParam+0x180>)
 800fde0:	5cd3      	ldrb	r3, [r2, r3]
 800fde2:	9304      	str	r3, [sp, #16]
            break;
 800fde4:	e78d      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU433 );
 800fde6:	490b      	ldr	r1, [pc, #44]	; (800fe14 <RegionEU433GetPhyParam+0x184>)
 800fde8:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800fdec:	f7ff feb8 	bl	800fb60 <RegionCommonGetBandwidth>
 800fdf0:	9004      	str	r0, [sp, #16]
            break;
 800fdf2:	e786      	b.n	800fd02 <RegionEU433GetPhyParam+0x72>
 800fdf4:	2000144c 	.word	0x2000144c
 800fdf8:	08017dc4 	.word	0x08017dc4
 800fdfc:	08017dcc 	.word	0x08017dcc
 800fe00:	fffffc18 	.word	0xfffffc18
 800fe04:	19e87628 	.word	0x19e87628
 800fe08:	41426666 	.word	0x41426666
 800fe0c:	4009999a 	.word	0x4009999a
 800fe10:	08017dbc 	.word	0x08017dbc
 800fe14:	08017d9c 	.word	0x08017d9c

0800fe18 <RegionEU433SetBandTxDone>:

void RegionEU433SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800fe18:	b530      	push	{r4, r5, lr}
 800fe1a:	b083      	sub	sp, #12
#if defined( REGION_EU433 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800fe1c:	4b0b      	ldr	r3, [pc, #44]	; (800fe4c <RegionEU433SetBandTxDone+0x34>)
 800fe1e:	681d      	ldr	r5, [r3, #0]
 800fe20:	4b0b      	ldr	r3, [pc, #44]	; (800fe50 <RegionEU433SetBandTxDone+0x38>)
 800fe22:	681a      	ldr	r2, [r3, #0]
 800fe24:	7803      	ldrb	r3, [r0, #0]
 800fe26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fe2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fe2e:	7a5b      	ldrb	r3, [r3, #9]
 800fe30:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800fe34:	6903      	ldr	r3, [r0, #16]
 800fe36:	9300      	str	r3, [sp, #0]
 800fe38:	68c3      	ldr	r3, [r0, #12]
 800fe3a:	7842      	ldrb	r2, [r0, #1]
 800fe3c:	6881      	ldr	r1, [r0, #8]
 800fe3e:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 800fe42:	f7ff fc55 	bl	800f6f0 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU433 */
}
 800fe46:	b003      	add	sp, #12
 800fe48:	bd30      	pop	{r4, r5, pc}
 800fe4a:	bf00      	nop
 800fe4c:	20001448 	.word	0x20001448
 800fe50:	2000144c 	.word	0x2000144c

0800fe54 <RegionEU433InitDefaults>:

void RegionEU433InitDefaults( InitDefaultsParams_t* params )
{
 800fe54:	b530      	push	{r4, r5, lr}
 800fe56:	b087      	sub	sp, #28
#if defined( REGION_EU433 )
    Band_t bands[EU433_MAX_NB_BANDS] =
 800fe58:	2364      	movs	r3, #100	; 0x64
 800fe5a:	f8ad 3000 	strh.w	r3, [sp]
 800fe5e:	2300      	movs	r3, #0
 800fe60:	f88d 3002 	strb.w	r3, [sp, #2]
 800fe64:	9301      	str	r3, [sp, #4]
 800fe66:	9302      	str	r3, [sp, #8]
 800fe68:	9303      	str	r3, [sp, #12]
 800fe6a:	9304      	str	r3, [sp, #16]
 800fe6c:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        EU433_BAND0
    };

    switch( params->Type )
 800fe70:	7a03      	ldrb	r3, [r0, #8]
 800fe72:	2b01      	cmp	r3, #1
 800fe74:	d032      	beq.n	800fedc <RegionEU433InitDefaults+0x88>
 800fe76:	2b02      	cmp	r3, #2
 800fe78:	d03e      	beq.n	800fef8 <RegionEU433InitDefaults+0xa4>
 800fe7a:	b10b      	cbz	r3, 800fe80 <RegionEU433InitDefaults+0x2c>
        {
            break;
        }
    }
#endif /* REGION_EU433 */
}
 800fe7c:	b007      	add	sp, #28
 800fe7e:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800fe80:	6803      	ldr	r3, [r0, #0]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d0fa      	beq.n	800fe7c <RegionEU433InitDefaults+0x28>
 800fe86:	6842      	ldr	r2, [r0, #4]
 800fe88:	2a00      	cmp	r2, #0
 800fe8a:	d0f7      	beq.n	800fe7c <RegionEU433InitDefaults+0x28>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800fe8c:	491f      	ldr	r1, [pc, #124]	; (800ff0c <RegionEU433InitDefaults+0xb8>)
 800fe8e:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800fe90:	4c1f      	ldr	r4, [pc, #124]	; (800ff10 <RegionEU433InitDefaults+0xbc>)
 800fe92:	6022      	str	r2, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU433_MAX_NB_BANDS );
 800fe94:	2218      	movs	r2, #24
 800fe96:	4669      	mov	r1, sp
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f004 fb8e 	bl	80145ba <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU433_LC1;
 800fe9e:	6824      	ldr	r4, [r4, #0]
 800fea0:	4b1c      	ldr	r3, [pc, #112]	; (800ff14 <RegionEU433InitDefaults+0xc0>)
 800fea2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fea6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU433_LC2;
 800feaa:	f104 050c 	add.w	r5, r4, #12
 800feae:	f103 020c 	add.w	r2, r3, #12
 800feb2:	ca07      	ldmia	r2, {r0, r1, r2}
 800feb4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU433_LC3;
 800feb8:	f104 0518 	add.w	r5, r4, #24
 800febc:	3318      	adds	r3, #24
 800febe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fec2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800fec6:	2307      	movs	r3, #7
 800fec8:	f8a4 348c 	strh.w	r3, [r4, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800fecc:	2201      	movs	r2, #1
 800fece:	f204 418c 	addw	r1, r4, #1164	; 0x48c
 800fed2:	f504 6090 	add.w	r0, r4, #1152	; 0x480
 800fed6:	f7ff fbfa 	bl	800f6ce <RegionCommonChanMaskCopy>
            break;
 800feda:	e7cf      	b.n	800fe7c <RegionEU433InitDefaults+0x28>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800fedc:	4b0c      	ldr	r3, [pc, #48]	; (800ff10 <RegionEU433InitDefaults+0xbc>)
 800fede:	6818      	ldr	r0, [r3, #0]
 800fee0:	2300      	movs	r3, #0
 800fee2:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800fee4:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800fee6:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800fee8:	2201      	movs	r2, #1
 800feea:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800feee:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800fef2:	f7ff fbec 	bl	800f6ce <RegionCommonChanMaskCopy>
            break;
 800fef6:	e7c1      	b.n	800fe7c <RegionEU433InitDefaults+0x28>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800fef8:	4b05      	ldr	r3, [pc, #20]	; (800ff10 <RegionEU433InitDefaults+0xbc>)
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 800ff00:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 800ff04:	430a      	orrs	r2, r1
 800ff06:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 800ff0a:	e7b7      	b.n	800fe7c <RegionEU433InitDefaults+0x28>
 800ff0c:	20001448 	.word	0x20001448
 800ff10:	2000144c 	.word	0x2000144c
 800ff14:	08017608 	.word	0x08017608

0800ff18 <RegionEU433Verify>:

bool RegionEU433Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800ff18:	b508      	push	{r3, lr}
#if defined( REGION_EU433 )
    switch( phyAttribute )
 800ff1a:	290f      	cmp	r1, #15
 800ff1c:	d837      	bhi.n	800ff8e <RegionEU433Verify+0x76>
 800ff1e:	e8df f001 	tbb	[pc, r1]
 800ff22:	360a      	.short	0x360a
 800ff24:	0e363636 	.word	0x0e363636
 800ff28:	2c362218 	.word	0x2c362218
 800ff2c:	3636362c 	.word	0x3636362c
 800ff30:	0836      	.short	0x0836
        case PHY_DUTY_CYCLE:
        {
            return EU433_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800ff32:	2001      	movs	r0, #1
 800ff34:	e02c      	b.n	800ff90 <RegionEU433Verify+0x78>
            return VerifyRfFreq( verify->Frequency );
 800ff36:	6800      	ldr	r0, [r0, #0]
 800ff38:	f7ff fe64 	bl	800fc04 <VerifyRfFreq>
 800ff3c:	e028      	b.n	800ff90 <RegionEU433Verify+0x78>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU433_TX_MIN_DATARATE, EU433_TX_MAX_DATARATE );
 800ff3e:	2207      	movs	r2, #7
 800ff40:	2100      	movs	r1, #0
 800ff42:	f990 0000 	ldrsb.w	r0, [r0]
 800ff46:	f7ff fb50 	bl	800f5ea <RegionCommonValueInRange>
 800ff4a:	3800      	subs	r0, #0
 800ff4c:	bf18      	it	ne
 800ff4e:	2001      	movne	r0, #1
 800ff50:	e01e      	b.n	800ff90 <RegionEU433Verify+0x78>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800ff52:	2205      	movs	r2, #5
 800ff54:	2100      	movs	r1, #0
 800ff56:	f990 0000 	ldrsb.w	r0, [r0]
 800ff5a:	f7ff fb46 	bl	800f5ea <RegionCommonValueInRange>
 800ff5e:	3800      	subs	r0, #0
 800ff60:	bf18      	it	ne
 800ff62:	2001      	movne	r0, #1
 800ff64:	e014      	b.n	800ff90 <RegionEU433Verify+0x78>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU433_RX_MIN_DATARATE, EU433_RX_MAX_DATARATE );
 800ff66:	2207      	movs	r2, #7
 800ff68:	2100      	movs	r1, #0
 800ff6a:	f990 0000 	ldrsb.w	r0, [r0]
 800ff6e:	f7ff fb3c 	bl	800f5ea <RegionCommonValueInRange>
 800ff72:	3800      	subs	r0, #0
 800ff74:	bf18      	it	ne
 800ff76:	2001      	movne	r0, #1
 800ff78:	e00a      	b.n	800ff90 <RegionEU433Verify+0x78>
            return RegionCommonValueInRange( verify->TxPower, EU433_MAX_TX_POWER, EU433_MIN_TX_POWER );
 800ff7a:	2205      	movs	r2, #5
 800ff7c:	2100      	movs	r1, #0
 800ff7e:	f990 0000 	ldrsb.w	r0, [r0]
 800ff82:	f7ff fb32 	bl	800f5ea <RegionCommonValueInRange>
 800ff86:	3800      	subs	r0, #0
 800ff88:	bf18      	it	ne
 800ff8a:	2001      	movne	r0, #1
 800ff8c:	e000      	b.n	800ff90 <RegionEU433Verify+0x78>
            return false;
 800ff8e:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU433 */
}
 800ff90:	bd08      	pop	{r3, pc}
	...

0800ff94 <RegionEU433ChanMaskSet>:
    }
#endif /* REGION_EU433 */
}

bool RegionEU433ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800ff94:	b508      	push	{r3, lr}
#if defined( REGION_EU433 )
    switch( chanMaskSet->ChannelsMaskType )
 800ff96:	7903      	ldrb	r3, [r0, #4]
 800ff98:	b11b      	cbz	r3, 800ffa2 <RegionEU433ChanMaskSet+0xe>
 800ff9a:	2b01      	cmp	r3, #1
 800ff9c:	d00b      	beq.n	800ffb6 <RegionEU433ChanMaskSet+0x22>
 800ff9e:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU433 */
}
 800ffa0:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800ffa2:	4b0a      	ldr	r3, [pc, #40]	; (800ffcc <RegionEU433ChanMaskSet+0x38>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	6801      	ldr	r1, [r0, #0]
 800ffaa:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800ffae:	f7ff fb8e 	bl	800f6ce <RegionCommonChanMaskCopy>
    return true;
 800ffb2:	2001      	movs	r0, #1
            break;
 800ffb4:	e7f4      	b.n	800ffa0 <RegionEU433ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800ffb6:	4b05      	ldr	r3, [pc, #20]	; (800ffcc <RegionEU433ChanMaskSet+0x38>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	2201      	movs	r2, #1
 800ffbc:	6801      	ldr	r1, [r0, #0]
 800ffbe:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 800ffc2:	f7ff fb84 	bl	800f6ce <RegionCommonChanMaskCopy>
    return true;
 800ffc6:	2001      	movs	r0, #1
            break;
 800ffc8:	e7ea      	b.n	800ffa0 <RegionEU433ChanMaskSet+0xc>
 800ffca:	bf00      	nop
 800ffcc:	2000144c 	.word	0x2000144c

0800ffd0 <RegionEU433ComputeRxWindowParameters>:

void RegionEU433ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800ffd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffd2:	b083      	sub	sp, #12
 800ffd4:	460e      	mov	r6, r1
 800ffd6:	4617      	mov	r7, r2
 800ffd8:	461c      	mov	r4, r3
#if defined( REGION_EU433 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU433_RX_MAX_DATARATE );
 800ffda:	2807      	cmp	r0, #7
 800ffdc:	bfa8      	it	ge
 800ffde:	2007      	movge	r0, #7
 800ffe0:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU433 );
 800ffe2:	4913      	ldr	r1, [pc, #76]	; (8010030 <RegionEU433ComputeRxWindowParameters+0x60>)
 800ffe4:	f7ff fdbc 	bl	800fb60 <RegionCommonGetBandwidth>
 800ffe8:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800ffea:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800ffee:	2b07      	cmp	r3, #7
 800fff0:	d017      	beq.n	8010022 <RegionEU433ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU433[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU433[rxConfigParams->Datarate], BandwidthsEU433[rxConfigParams->Datarate] );
 800fff2:	4a0f      	ldr	r2, [pc, #60]	; (8010030 <RegionEU433ComputeRxWindowParameters+0x60>)
 800fff4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800fff8:	4a0e      	ldr	r2, [pc, #56]	; (8010034 <RegionEU433ComputeRxWindowParameters+0x64>)
 800fffa:	5cd0      	ldrb	r0, [r2, r3]
 800fffc:	f7ff fc80 	bl	800f900 <RegionCommonComputeSymbolTimeLoRa>
 8010000:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8010002:	4b0d      	ldr	r3, [pc, #52]	; (8010038 <RegionEU433ComputeRxWindowParameters+0x68>)
 8010004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010006:	4798      	blx	r3
 8010008:	4603      	mov	r3, r0
 801000a:	f104 020c 	add.w	r2, r4, #12
 801000e:	9201      	str	r2, [sp, #4]
 8010010:	3408      	adds	r4, #8
 8010012:	9400      	str	r4, [sp, #0]
 8010014:	463a      	mov	r2, r7
 8010016:	4631      	mov	r1, r6
 8010018:	4628      	mov	r0, r5
 801001a:	f7ff fc7f 	bl	800f91c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU433 */
}
 801001e:	b003      	add	sp, #12
 8010020:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU433[rxConfigParams->Datarate] );
 8010022:	4a04      	ldr	r2, [pc, #16]	; (8010034 <RegionEU433ComputeRxWindowParameters+0x64>)
 8010024:	5cd0      	ldrb	r0, [r2, r3]
 8010026:	f7ff fc73 	bl	800f910 <RegionCommonComputeSymbolTimeFsk>
 801002a:	4605      	mov	r5, r0
 801002c:	e7e9      	b.n	8010002 <RegionEU433ComputeRxWindowParameters+0x32>
 801002e:	bf00      	nop
 8010030:	08017d9c 	.word	0x08017d9c
 8010034:	08017dbc 	.word	0x08017dbc
 8010038:	08018400 	.word	0x08018400

0801003c <RegionEU433RxConfig>:

bool RegionEU433RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801003c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010040:	b08a      	sub	sp, #40	; 0x28
 8010042:	4604      	mov	r4, r0
 8010044:	460f      	mov	r7, r1
#if defined( REGION_EU433 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8010046:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 801004a:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 801004e:	4b37      	ldr	r3, [pc, #220]	; (801012c <RegionEU433RxConfig+0xf0>)
 8010050:	685b      	ldr	r3, [r3, #4]
 8010052:	4798      	blx	r3
 8010054:	2800      	cmp	r0, #0
 8010056:	d167      	bne.n	8010128 <RegionEU433RxConfig+0xec>
 8010058:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801005a:	7ce3      	ldrb	r3, [r4, #19]
 801005c:	b983      	cbnz	r3, 8010080 <RegionEU433RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801005e:	4b34      	ldr	r3, [pc, #208]	; (8010130 <RegionEU433RxConfig+0xf4>)
 8010060:	681a      	ldr	r2, [r3, #0]
 8010062:	7823      	ldrb	r3, [r4, #0]
 8010064:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8010068:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801006c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010070:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010074:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8010078:	f1b8 0f00 	cmp.w	r8, #0
 801007c:	d100      	bne.n	8010080 <RegionEU433RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801007e:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU433[dr];
 8010080:	4b2c      	ldr	r3, [pc, #176]	; (8010134 <RegionEU433RxConfig+0xf8>)
 8010082:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 8010086:	4b29      	ldr	r3, [pc, #164]	; (801012c <RegionEU433RxConfig+0xf0>)
 8010088:	68db      	ldr	r3, [r3, #12]
 801008a:	4640      	mov	r0, r8
 801008c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801008e:	2d07      	cmp	r5, #7
 8010090:	d02b      	beq.n	80100ea <RegionEU433RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8010092:	4b26      	ldr	r3, [pc, #152]	; (801012c <RegionEU433RxConfig+0xf0>)
 8010094:	f8d3 a018 	ldr.w	sl, [r3, #24]
 8010098:	7ca3      	ldrb	r3, [r4, #18]
 801009a:	9309      	str	r3, [sp, #36]	; 0x24
 801009c:	2601      	movs	r6, #1
 801009e:	9608      	str	r6, [sp, #32]
 80100a0:	2300      	movs	r3, #0
 80100a2:	9307      	str	r3, [sp, #28]
 80100a4:	9306      	str	r3, [sp, #24]
 80100a6:	9305      	str	r3, [sp, #20]
 80100a8:	9304      	str	r3, [sp, #16]
 80100aa:	9303      	str	r3, [sp, #12]
 80100ac:	8922      	ldrh	r2, [r4, #8]
 80100ae:	9202      	str	r2, [sp, #8]
 80100b0:	2208      	movs	r2, #8
 80100b2:	9201      	str	r2, [sp, #4]
 80100b4:	9300      	str	r3, [sp, #0]
 80100b6:	4633      	mov	r3, r6
 80100b8:	464a      	mov	r2, r9
 80100ba:	78a1      	ldrb	r1, [r4, #2]
 80100bc:	4630      	mov	r0, r6
 80100be:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 80100c0:	7c63      	ldrb	r3, [r4, #17]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d02d      	beq.n	8010122 <RegionEU433RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU433[dr];
 80100c6:	4b1c      	ldr	r3, [pc, #112]	; (8010138 <RegionEU433RxConfig+0xfc>)
 80100c8:	5d59      	ldrb	r1, [r3, r5]
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU433[dr];
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80100ca:	4b18      	ldr	r3, [pc, #96]	; (801012c <RegionEU433RxConfig+0xf0>)
 80100cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100ce:	310d      	adds	r1, #13
 80100d0:	b2c9      	uxtb	r1, r1
 80100d2:	4630      	mov	r0, r6
 80100d4:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80100d6:	462a      	mov	r2, r5
 80100d8:	4641      	mov	r1, r8
 80100da:	7ce0      	ldrb	r0, [r4, #19]
 80100dc:	f7ff fd52 	bl	800fb84 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 80100e0:	703d      	strb	r5, [r7, #0]
    return true;
 80100e2:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU433 */
}
 80100e4:	b00a      	add	sp, #40	; 0x28
 80100e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80100ea:	4b10      	ldr	r3, [pc, #64]	; (801012c <RegionEU433RxConfig+0xf0>)
 80100ec:	f8d3 a018 	ldr.w	sl, [r3, #24]
 80100f0:	7ca3      	ldrb	r3, [r4, #18]
 80100f2:	9309      	str	r3, [sp, #36]	; 0x24
 80100f4:	2000      	movs	r0, #0
 80100f6:	9008      	str	r0, [sp, #32]
 80100f8:	9007      	str	r0, [sp, #28]
 80100fa:	9006      	str	r0, [sp, #24]
 80100fc:	2301      	movs	r3, #1
 80100fe:	9305      	str	r3, [sp, #20]
 8010100:	9004      	str	r0, [sp, #16]
 8010102:	9003      	str	r0, [sp, #12]
 8010104:	8923      	ldrh	r3, [r4, #8]
 8010106:	9302      	str	r3, [sp, #8]
 8010108:	2305      	movs	r3, #5
 801010a:	9301      	str	r3, [sp, #4]
 801010c:	4b0b      	ldr	r3, [pc, #44]	; (801013c <RegionEU433RxConfig+0x100>)
 801010e:	9300      	str	r3, [sp, #0]
 8010110:	4603      	mov	r3, r0
 8010112:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010116:	fb02 f209 	mul.w	r2, r2, r9
 801011a:	f24c 3150 	movw	r1, #50000	; 0xc350
 801011e:	47d0      	blx	sl
 8010120:	e7ce      	b.n	80100c0 <RegionEU433RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU433[dr];
 8010122:	4b07      	ldr	r3, [pc, #28]	; (8010140 <RegionEU433RxConfig+0x104>)
 8010124:	5d59      	ldrb	r1, [r3, r5]
 8010126:	e7d0      	b.n	80100ca <RegionEU433RxConfig+0x8e>
        return false;
 8010128:	2000      	movs	r0, #0
 801012a:	e7db      	b.n	80100e4 <RegionEU433RxConfig+0xa8>
 801012c:	08018400 	.word	0x08018400
 8010130:	2000144c 	.word	0x2000144c
 8010134:	08017dbc 	.word	0x08017dbc
 8010138:	08017dcc 	.word	0x08017dcc
 801013c:	00014585 	.word	0x00014585
 8010140:	08017dc4 	.word	0x08017dc4

08010144 <RegionEU433TxConfig>:

bool RegionEU433TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8010144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010148:	b08d      	sub	sp, #52	; 0x34
 801014a:	4604      	mov	r4, r0
 801014c:	460f      	mov	r7, r1
 801014e:	4690      	mov	r8, r2
#if defined( REGION_EU433 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU433[txConfig->Datarate];
 8010150:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010154:	4a42      	ldr	r2, [pc, #264]	; (8010260 <RegionEU433TxConfig+0x11c>)
 8010156:	f912 a003 	ldrsb.w	sl, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801015a:	4b42      	ldr	r3, [pc, #264]	; (8010264 <RegionEU433TxConfig+0x120>)
 801015c:	6819      	ldr	r1, [r3, #0]
 801015e:	4d42      	ldr	r5, [pc, #264]	; (8010268 <RegionEU433TxConfig+0x124>)
 8010160:	682b      	ldr	r3, [r5, #0]
 8010162:	7802      	ldrb	r2, [r0, #0]
 8010164:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010168:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801016c:	7a53      	ldrb	r3, [r2, #9]
 801016e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010172:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8010176:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801017a:	f990 0002 	ldrsb.w	r0, [r0, #2]
 801017e:	f7ff fcea 	bl	800fb56 <RegionCommonLimitTxPower>
 8010182:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU433 );
 8010184:	4939      	ldr	r1, [pc, #228]	; (801026c <RegionEU433TxConfig+0x128>)
 8010186:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801018a:	f7ff fce9 	bl	800fb60 <RegionCommonGetBandwidth>
 801018e:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8010190:	68a2      	ldr	r2, [r4, #8]
 8010192:	6861      	ldr	r1, [r4, #4]
 8010194:	4630      	mov	r0, r6
 8010196:	f7ff fbfb 	bl	800f990 <RegionCommonComputeTxPower>
 801019a:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801019c:	4b34      	ldr	r3, [pc, #208]	; (8010270 <RegionEU433TxConfig+0x12c>)
 801019e:	68da      	ldr	r2, [r3, #12]
 80101a0:	6829      	ldr	r1, [r5, #0]
 80101a2:	7823      	ldrb	r3, [r4, #0]
 80101a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80101a8:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80101ac:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80101ae:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80101b2:	2b07      	cmp	r3, #7
 80101b4:	d031      	beq.n	801021a <RegionEU433TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80101b6:	4b2e      	ldr	r3, [pc, #184]	; (8010270 <RegionEU433TxConfig+0x12c>)
 80101b8:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 80101bc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80101c0:	9308      	str	r3, [sp, #32]
 80101c2:	2200      	movs	r2, #0
 80101c4:	9207      	str	r2, [sp, #28]
 80101c6:	9206      	str	r2, [sp, #24]
 80101c8:	9205      	str	r2, [sp, #20]
 80101ca:	2501      	movs	r5, #1
 80101cc:	9504      	str	r5, [sp, #16]
 80101ce:	9203      	str	r2, [sp, #12]
 80101d0:	2308      	movs	r3, #8
 80101d2:	9302      	str	r3, [sp, #8]
 80101d4:	9501      	str	r5, [sp, #4]
 80101d6:	f8cd a000 	str.w	sl, [sp]
 80101da:	464b      	mov	r3, r9
 80101dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80101de:	4628      	mov	r0, r5
 80101e0:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80101e2:	4b21      	ldr	r3, [pc, #132]	; (8010268 <RegionEU433TxConfig+0x124>)
 80101e4:	681a      	ldr	r2, [r3, #0]
 80101e6:	7823      	ldrb	r3, [r4, #0]
 80101e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80101ec:	f994 1001 	ldrsb.w	r1, [r4, #1]
 80101f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80101f4:	f7ff fcf6 	bl	800fbe4 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80101f8:	89a1      	ldrh	r1, [r4, #12]
 80101fa:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80101fe:	f7ff fd15 	bl	800fc2c <GetTimeOnAir>
 8010202:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8010206:	4b1a      	ldr	r3, [pc, #104]	; (8010270 <RegionEU433TxConfig+0x12c>)
 8010208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801020a:	7b21      	ldrb	r1, [r4, #12]
 801020c:	4628      	mov	r0, r5
 801020e:	4798      	blx	r3

    *txPower = txPowerLimited;
 8010210:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU433 */
}
 8010212:	2001      	movs	r0, #1
 8010214:	b00d      	add	sp, #52	; 0x34
 8010216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801021a:	4b15      	ldr	r3, [pc, #84]	; (8010270 <RegionEU433TxConfig+0x12c>)
 801021c:	69dd      	ldr	r5, [r3, #28]
 801021e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010222:	fb03 f30a 	mul.w	r3, r3, sl
 8010226:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801022a:	9208      	str	r2, [sp, #32]
 801022c:	f04f 0b00 	mov.w	fp, #0
 8010230:	f8cd b01c 	str.w	fp, [sp, #28]
 8010234:	f8cd b018 	str.w	fp, [sp, #24]
 8010238:	f8cd b014 	str.w	fp, [sp, #20]
 801023c:	2201      	movs	r2, #1
 801023e:	9204      	str	r2, [sp, #16]
 8010240:	f8cd b00c 	str.w	fp, [sp, #12]
 8010244:	2205      	movs	r2, #5
 8010246:	9202      	str	r2, [sp, #8]
 8010248:	f8cd b004 	str.w	fp, [sp, #4]
 801024c:	9300      	str	r3, [sp, #0]
 801024e:	464b      	mov	r3, r9
 8010250:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8010254:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010256:	4658      	mov	r0, fp
 8010258:	47a8      	blx	r5
        modem = MODEM_FSK;
 801025a:	465d      	mov	r5, fp
 801025c:	e7c1      	b.n	80101e2 <RegionEU433TxConfig+0x9e>
 801025e:	bf00      	nop
 8010260:	08017dbc 	.word	0x08017dbc
 8010264:	20001448 	.word	0x20001448
 8010268:	2000144c 	.word	0x2000144c
 801026c:	08017d9c 	.word	0x08017d9c
 8010270:	08018400 	.word	0x08018400

08010274 <RegionEU433LinkAdrReq>:

uint8_t RegionEU433LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8010274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010278:	b08f      	sub	sp, #60	; 0x3c
 801027a:	4607      	mov	r7, r0
 801027c:	468b      	mov	fp, r1
 801027e:	4692      	mov	sl, r2
 8010280:	4699      	mov	r9, r3
    uint8_t status = 0x07;
#if defined( REGION_EU433 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8010282:	2500      	movs	r5, #0
 8010284:	950c      	str	r5, [sp, #48]	; 0x30
 8010286:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 801028a:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 801028e:	f04f 0807 	mov.w	r8, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8010292:	e02d      	b.n	80102f0 <RegionEU433LinkAdrReq+0x7c>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU433_MAX_NB_CHANNELS; i++ )
 8010294:	2400      	movs	r4, #0
        status = 0x07;
 8010296:	f04f 0807 	mov.w	r8, #7
 801029a:	e00f      	b.n	80102bc <RegionEU433LinkAdrReq+0x48>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 801029c:	4a56      	ldr	r2, [pc, #344]	; (80103f8 <RegionEU433LinkAdrReq+0x184>)
 801029e:	6812      	ldr	r2, [r2, #0]
 80102a0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80102a4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80102a8:	b132      	cbz	r2, 80102b8 <RegionEU433LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 80102aa:	2201      	movs	r2, #1
 80102ac:	40a2      	lsls	r2, r4
 80102ae:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80102b2:	430a      	orrs	r2, r1
 80102b4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU433_MAX_NB_CHANNELS; i++ )
 80102b8:	3401      	adds	r4, #1
 80102ba:	b2e4      	uxtb	r4, r4
 80102bc:	2c0f      	cmp	r4, #15
 80102be:	d817      	bhi.n	80102f0 <RegionEU433LinkAdrReq+0x7c>
                if( linkAdrParams.ChMaskCtrl == 6 )
 80102c0:	2b06      	cmp	r3, #6
 80102c2:	d0eb      	beq.n	801029c <RegionEU433LinkAdrReq+0x28>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80102c4:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 80102c8:	4126      	asrs	r6, r4
 80102ca:	f016 0f01 	tst.w	r6, #1
 80102ce:	d0f3      	beq.n	80102b8 <RegionEU433LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80102d0:	4a49      	ldr	r2, [pc, #292]	; (80103f8 <RegionEU433LinkAdrReq+0x184>)
 80102d2:	6812      	ldr	r2, [r2, #0]
 80102d4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80102d8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80102dc:	2a00      	cmp	r2, #0
 80102de:	d1eb      	bne.n	80102b8 <RegionEU433LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80102e0:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
 80102e4:	e7e8      	b.n	80102b8 <RegionEU433LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 80102e6:	f04f 0806 	mov.w	r8, #6
 80102ea:	e001      	b.n	80102f0 <RegionEU433LinkAdrReq+0x7c>
            status &= 0xFE; // Channel mask KO
 80102ec:	f04f 0806 	mov.w	r8, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80102f0:	7a3b      	ldrb	r3, [r7, #8]
 80102f2:	42ab      	cmp	r3, r5
 80102f4:	d919      	bls.n	801032a <RegionEU433LinkAdrReq+0xb6>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	a90c      	add	r1, sp, #48	; 0x30
 80102fa:	4428      	add	r0, r5
 80102fc:	f7ff fa98 	bl	800f830 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8010300:	b198      	cbz	r0, 801032a <RegionEU433LinkAdrReq+0xb6>
        bytesProcessed += nextIndex;
 8010302:	4405      	add	r5, r0
 8010304:	b2ed      	uxtb	r5, r5
        chMask = linkAdrParams.ChMask;
 8010306:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801030a:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801030e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8010312:	b90b      	cbnz	r3, 8010318 <RegionEU433LinkAdrReq+0xa4>
 8010314:	2a00      	cmp	r2, #0
 8010316:	d0e6      	beq.n	80102e6 <RegionEU433LinkAdrReq+0x72>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8010318:	1e5a      	subs	r2, r3, #1
 801031a:	b2d2      	uxtb	r2, r2
 801031c:	2a04      	cmp	r2, #4
 801031e:	d9e5      	bls.n	80102ec <RegionEU433LinkAdrReq+0x78>
 8010320:	2b06      	cmp	r3, #6
 8010322:	d9b7      	bls.n	8010294 <RegionEU433LinkAdrReq+0x20>
            status &= 0xFE; // Channel mask KO
 8010324:	f04f 0806 	mov.w	r8, #6
 8010328:	e7e2      	b.n	80102f0 <RegionEU433LinkAdrReq+0x7c>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801032a:	2302      	movs	r3, #2
 801032c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8010330:	7a7b      	ldrb	r3, [r7, #9]
 8010332:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU433GetPhyParam( &getPhy );
 8010336:	a80a      	add	r0, sp, #40	; 0x28
 8010338:	f7ff fcaa 	bl	800fc90 <RegionEU433GetPhyParam>

    linkAdrVerifyParams.Status = status;
 801033c:	f88d 8008 	strb.w	r8, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8010340:	7abb      	ldrb	r3, [r7, #10]
 8010342:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8010346:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 801034a:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801034e:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 8010352:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8010356:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 801035a:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801035e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010362:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8010366:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801036a:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801036e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010372:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU433_MAX_NB_CHANNELS;
 8010376:	2310      	movs	r3, #16
 8010378:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801037c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8010380:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8010382:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU433_TX_MAX_DATARATE;
 8010386:	2307      	movs	r3, #7
 8010388:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801038c:	4b1a      	ldr	r3, [pc, #104]	; (80103f8 <RegionEU433LinkAdrReq+0x184>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	9307      	str	r3, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU433_MIN_TX_POWER;
 8010392:	2305      	movs	r3, #5
 8010394:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU433_MAX_TX_POWER;
 8010398:	2300      	movs	r3, #0
 801039a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80103a2:	ab0c      	add	r3, sp, #48	; 0x30
 80103a4:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 80103a8:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 80103ac:	a801      	add	r0, sp, #4
 80103ae:	f7ff fa5b 	bl	800f868 <RegionCommonLinkAdrReqVerifyParams>
 80103b2:	4604      	mov	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80103b4:	2807      	cmp	r0, #7
 80103b6:	d011      	beq.n	80103dc <RegionEU433LinkAdrReq+0x168>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80103b8:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 80103bc:	f88b 3000 	strb.w	r3, [fp]
    *txPowOut = linkAdrParams.TxPower;
 80103c0:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 80103c4:	f88a 3000 	strb.w	r3, [sl]
    *nbRepOut = linkAdrParams.NbRep;
 80103c8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80103cc:	f889 3000 	strb.w	r3, [r9]
    *nbBytesParsed = bytesProcessed;
 80103d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80103d2:	701d      	strb	r5, [r3, #0]

#endif /* REGION_EU433 */
    return status;
}
 80103d4:	4620      	mov	r0, r4
 80103d6:	b00f      	add	sp, #60	; 0x3c
 80103d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80103dc:	4e06      	ldr	r6, [pc, #24]	; (80103f8 <RegionEU433LinkAdrReq+0x184>)
 80103de:	6830      	ldr	r0, [r6, #0]
 80103e0:	220c      	movs	r2, #12
 80103e2:	2100      	movs	r1, #0
 80103e4:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 80103e8:	f004 f8fd 	bl	80145e6 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 80103ec:	6833      	ldr	r3, [r6, #0]
 80103ee:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 80103f2:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
 80103f6:	e7df      	b.n	80103b8 <RegionEU433LinkAdrReq+0x144>
 80103f8:	2000144c 	.word	0x2000144c

080103fc <RegionEU433RxParamSetupReq>:

uint8_t RegionEU433RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80103fc:	b538      	push	{r3, r4, r5, lr}
 80103fe:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU433 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8010400:	6840      	ldr	r0, [r0, #4]
 8010402:	f7ff fbff 	bl	800fc04 <VerifyRfFreq>
 8010406:	b1a0      	cbz	r0, 8010432 <RegionEU433RxParamSetupReq+0x36>
    uint8_t status = 0x07;
 8010408:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU433_RX_MIN_DATARATE, EU433_RX_MAX_DATARATE ) == false )
 801040a:	2207      	movs	r2, #7
 801040c:	2100      	movs	r1, #0
 801040e:	f994 0000 	ldrsb.w	r0, [r4]
 8010412:	f7ff f8ea 	bl	800f5ea <RegionCommonValueInRange>
 8010416:	b908      	cbnz	r0, 801041c <RegionEU433RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 8010418:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU433_MIN_RX1_DR_OFFSET, EU433_MAX_RX1_DR_OFFSET ) == false )
 801041c:	2205      	movs	r2, #5
 801041e:	2100      	movs	r1, #0
 8010420:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8010424:	f7ff f8e1 	bl	800f5ea <RegionCommonValueInRange>
 8010428:	b908      	cbnz	r0, 801042e <RegionEU433RxParamSetupReq+0x32>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801042a:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU433 */
    return status;
}
 801042e:	4628      	mov	r0, r5
 8010430:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 8010432:	2506      	movs	r5, #6
 8010434:	e7e9      	b.n	801040a <RegionEU433RxParamSetupReq+0xe>

08010436 <RegionEU433TxParamSetupReq>:

int8_t RegionEU433TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 8010436:	f04f 30ff 	mov.w	r0, #4294967295
 801043a:	4770      	bx	lr

0801043c <RegionEU433DlChannelReq>:

int8_t RegionEU433DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801043c:	b510      	push	{r4, lr}
 801043e:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_EU433 )

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8010440:	6840      	ldr	r0, [r0, #4]
 8010442:	f7ff fbdf 	bl	800fc04 <VerifyRfFreq>
 8010446:	b170      	cbz	r0, 8010466 <RegionEU433DlChannelReq+0x2a>
    uint8_t status = 0x03;
 8010448:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801044a:	4b0b      	ldr	r3, [pc, #44]	; (8010478 <RegionEU433DlChannelReq+0x3c>)
 801044c:	681a      	ldr	r2, [r3, #0]
 801044e:	7823      	ldrb	r3, [r4, #0]
 8010450:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8010454:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8010458:	b909      	cbnz	r1, 801045e <RegionEU433DlChannelReq+0x22>
    {
        status &= 0xFD;
 801045a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801045e:	2803      	cmp	r0, #3
 8010460:	d003      	beq.n	801046a <RegionEU433DlChannelReq+0x2e>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU433 */
    return status;
}
 8010462:	b240      	sxtb	r0, r0
 8010464:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 8010466:	2002      	movs	r0, #2
 8010468:	e7ef      	b.n	801044a <RegionEU433DlChannelReq+0xe>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801046a:	6861      	ldr	r1, [r4, #4]
 801046c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010470:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010474:	6059      	str	r1, [r3, #4]
 8010476:	e7f4      	b.n	8010462 <RegionEU433DlChannelReq+0x26>
 8010478:	2000144c 	.word	0x2000144c

0801047c <RegionEU433AlternateDr>:
#if defined( REGION_EU433 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU433 */
}
 801047c:	4770      	bx	lr
	...

08010480 <RegionEU433NextChannel>:

LoRaMacStatus_t RegionEU433NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8010480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010482:	b097      	sub	sp, #92	; 0x5c
 8010484:	4604      	mov	r4, r0
 8010486:	460f      	mov	r7, r1
 8010488:	4616      	mov	r6, r2
 801048a:	461d      	mov	r5, r3
#if defined( REGION_EU433 )
    uint8_t nbEnabledChannels = 0;
 801048c:	2100      	movs	r1, #0
 801048e:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 8010492:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU433_MAX_NB_CHANNELS] = { 0 };
 8010496:	9111      	str	r1, [sp, #68]	; 0x44
 8010498:	9112      	str	r1, [sp, #72]	; 0x48
 801049a:	9113      	str	r1, [sp, #76]	; 0x4c
 801049c:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU433_JOIN_CHANNELS;
 801049e:	2307      	movs	r3, #7
 80104a0:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80104a4:	4b32      	ldr	r3, [pc, #200]	; (8010570 <RegionEU433NextChannel+0xf0>)
 80104a6:	6818      	ldr	r0, [r3, #0]
 80104a8:	2201      	movs	r2, #1
 80104aa:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 80104ae:	f7ff f8f8 	bl	800f6a2 <RegionCommonCountChannels>
 80104b2:	b938      	cbnz	r0, 80104c4 <RegionEU433NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80104b4:	4b2e      	ldr	r3, [pc, #184]	; (8010570 <RegionEU433NextChannel+0xf0>)
 80104b6:	681a      	ldr	r2, [r3, #0]
 80104b8:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 80104bc:	f043 0307 	orr.w	r3, r3, #7
 80104c0:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80104c4:	7a63      	ldrb	r3, [r4, #9]
 80104c6:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80104ca:	7a23      	ldrb	r3, [r4, #8]
 80104cc:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80104d0:	4b27      	ldr	r3, [pc, #156]	; (8010570 <RegionEU433NextChannel+0xf0>)
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	f503 6290 	add.w	r2, r3, #1152	; 0x480
 80104d8:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80104da:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 80104dc:	4b25      	ldr	r3, [pc, #148]	; (8010574 <RegionEU433NextChannel+0xf4>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = EU433_MAX_NB_CHANNELS;
 80104e2:	2310      	movs	r3, #16
 80104e4:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 80104e8:	f10d 030a 	add.w	r3, sp, #10
 80104ec:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80104ee:	6823      	ldr	r3, [r4, #0]
 80104f0:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80104f2:	6863      	ldr	r3, [r4, #4]
 80104f4:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80104f6:	7aa3      	ldrb	r3, [r4, #10]
 80104f8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU433_MAX_NB_BANDS;
 80104fc:	2301      	movs	r3, #1
 80104fe:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8010502:	ab0c      	add	r3, sp, #48	; 0x30
 8010504:	6921      	ldr	r1, [r4, #16]
 8010506:	68e0      	ldr	r0, [r4, #12]
 8010508:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801050c:	7d23      	ldrb	r3, [r4, #20]
 801050e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8010512:	8ae1      	ldrh	r1, [r4, #22]
 8010514:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8010518:	f7ff fb88 	bl	800fc2c <GetTimeOnAir>
 801051c:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801051e:	ab03      	add	r3, sp, #12
 8010520:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8010522:	9601      	str	r6, [sp, #4]
 8010524:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 8010528:	9300      	str	r3, [sp, #0]
 801052a:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 801052e:	aa11      	add	r2, sp, #68	; 0x44
 8010530:	4629      	mov	r1, r5
 8010532:	a809      	add	r0, sp, #36	; 0x24
 8010534:	f7ff faa8 	bl	800fa88 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8010538:	4604      	mov	r4, r0
 801053a:	b120      	cbz	r0, 8010546 <RegionEU433NextChannel+0xc6>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801053c:	280c      	cmp	r0, #12
 801053e:	d00d      	beq.n	801055c <RegionEU433NextChannel+0xdc>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU433 */
}
 8010540:	4620      	mov	r0, r4
 8010542:	b017      	add	sp, #92	; 0x5c
 8010544:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8010546:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 801054a:	3901      	subs	r1, #1
 801054c:	f004 f828 	bl	80145a0 <randr>
 8010550:	ab16      	add	r3, sp, #88	; 0x58
 8010552:	4418      	add	r0, r3
 8010554:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 8010558:	703b      	strb	r3, [r7, #0]
 801055a:	e7f1      	b.n	8010540 <RegionEU433NextChannel+0xc0>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801055c:	4b04      	ldr	r3, [pc, #16]	; (8010570 <RegionEU433NextChannel+0xf0>)
 801055e:	681a      	ldr	r2, [r3, #0]
 8010560:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 8010564:	f043 0307 	orr.w	r3, r3, #7
 8010568:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
 801056c:	e7e8      	b.n	8010540 <RegionEU433NextChannel+0xc0>
 801056e:	bf00      	nop
 8010570:	2000144c 	.word	0x2000144c
 8010574:	20001448 	.word	0x20001448

08010578 <RegionEU433ChannelAdd>:

LoRaMacStatus_t RegionEU433ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8010578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined( REGION_EU433 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 801057a:	7905      	ldrb	r5, [r0, #4]

    if( id < EU433_NUMB_DEFAULT_CHANNELS )
 801057c:	2d02      	cmp	r5, #2
 801057e:	d94b      	bls.n	8010618 <RegionEU433ChannelAdd+0xa0>
 8010580:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU433_MAX_NB_CHANNELS )
 8010582:	2d0f      	cmp	r5, #15
 8010584:	d84a      	bhi.n	801061c <RegionEU433ChannelAdd+0xa4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU433_TX_MIN_DATARATE, EU433_TX_MAX_DATARATE ) == false )
 8010586:	6803      	ldr	r3, [r0, #0]
 8010588:	7a18      	ldrb	r0, [r3, #8]
 801058a:	f340 0003 	sbfx	r0, r0, #0, #4
 801058e:	2207      	movs	r2, #7
 8010590:	2100      	movs	r1, #0
 8010592:	b240      	sxtb	r0, r0
 8010594:	f7ff f829 	bl	800f5ea <RegionCommonValueInRange>
 8010598:	2800      	cmp	r0, #0
 801059a:	d039      	beq.n	8010610 <RegionEU433ChannelAdd+0x98>
    bool drInvalid = false;
 801059c:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU433_TX_MIN_DATARATE, EU433_TX_MAX_DATARATE ) == false )
 801059e:	6823      	ldr	r3, [r4, #0]
 80105a0:	7a18      	ldrb	r0, [r3, #8]
 80105a2:	f340 1003 	sbfx	r0, r0, #4, #4
 80105a6:	2207      	movs	r2, #7
 80105a8:	2100      	movs	r1, #0
 80105aa:	b240      	sxtb	r0, r0
 80105ac:	f7ff f81d 	bl	800f5ea <RegionCommonValueInRange>
 80105b0:	b900      	cbnz	r0, 80105b4 <RegionEU433ChannelAdd+0x3c>
    {
        drInvalid = true;
 80105b2:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80105b4:	6821      	ldr	r1, [r4, #0]
 80105b6:	7a0b      	ldrb	r3, [r1, #8]
 80105b8:	f343 0203 	sbfx	r2, r3, #0, #4
 80105bc:	b252      	sxtb	r2, r2
 80105be:	f343 1303 	sbfx	r3, r3, #4, #4
 80105c2:	b25b      	sxtb	r3, r3
 80105c4:	429a      	cmp	r2, r3
 80105c6:	dd00      	ble.n	80105ca <RegionEU433ChannelAdd+0x52>
    {
        drInvalid = true;
 80105c8:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 80105ca:	6808      	ldr	r0, [r1, #0]
 80105cc:	f7ff fb1a 	bl	800fc04 <VerifyRfFreq>
 80105d0:	b300      	cbz	r0, 8010614 <RegionEU433ChannelAdd+0x9c>
    bool freqInvalid = false;
 80105d2:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80105d4:	b106      	cbz	r6, 80105d8 <RegionEU433ChannelAdd+0x60>
 80105d6:	bb1b      	cbnz	r3, 8010620 <RegionEU433ChannelAdd+0xa8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 80105d8:	bb26      	cbnz	r6, 8010624 <RegionEU433ChannelAdd+0xac>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 80105da:	bb2b      	cbnz	r3, 8010628 <RegionEU433ChannelAdd+0xb0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80105dc:	4f13      	ldr	r7, [pc, #76]	; (801062c <RegionEU433ChannelAdd+0xb4>)
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	006e      	lsls	r6, r5, #1
 80105e2:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80105e6:	220c      	movs	r2, #12
 80105e8:	6821      	ldr	r1, [r4, #0]
 80105ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80105ee:	f003 ffe4 	bl	80145ba <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 80105f2:	683a      	ldr	r2, [r7, #0]
 80105f4:	442e      	add	r6, r5
 80105f6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80105fa:	2000      	movs	r0, #0
 80105fc:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80105fe:	2301      	movs	r3, #1
 8010600:	fa03 f505 	lsl.w	r5, r3, r5
 8010604:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 8010608:	431d      	orrs	r5, r3
 801060a:	f8a2 5480 	strh.w	r5, [r2, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 801060e:	e006      	b.n	801061e <RegionEU433ChannelAdd+0xa6>
        drInvalid = true;
 8010610:	2601      	movs	r6, #1
 8010612:	e7c4      	b.n	801059e <RegionEU433ChannelAdd+0x26>
            freqInvalid = true;
 8010614:	2301      	movs	r3, #1
 8010616:	e7dd      	b.n	80105d4 <RegionEU433ChannelAdd+0x5c>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8010618:	2006      	movs	r0, #6
 801061a:	e000      	b.n	801061e <RegionEU433ChannelAdd+0xa6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801061c:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU433 */
}
 801061e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8010620:	2006      	movs	r0, #6
 8010622:	e7fc      	b.n	801061e <RegionEU433ChannelAdd+0xa6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 8010624:	2005      	movs	r0, #5
 8010626:	e7fa      	b.n	801061e <RegionEU433ChannelAdd+0xa6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8010628:	2004      	movs	r0, #4
 801062a:	e7f8      	b.n	801061e <RegionEU433ChannelAdd+0xa6>
 801062c:	2000144c 	.word	0x2000144c

08010630 <RegionEU433ChannelsRemove>:

bool RegionEU433ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU433 )
    uint8_t id = channelRemove->ChannelId;
 8010630:	7801      	ldrb	r1, [r0, #0]

    if( id < EU433_NUMB_DEFAULT_CHANNELS )
 8010632:	2902      	cmp	r1, #2
 8010634:	d801      	bhi.n	801063a <RegionEU433ChannelsRemove+0xa>
    {
        return false;
 8010636:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU433_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU433 */
}
 8010638:	4770      	bx	lr
{
 801063a:	b510      	push	{r4, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801063c:	4b08      	ldr	r3, [pc, #32]	; (8010660 <RegionEU433ChannelsRemove+0x30>)
 801063e:	6818      	ldr	r0, [r3, #0]
 8010640:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8010644:	009c      	lsls	r4, r3, #2
 8010646:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801064a:	2200      	movs	r2, #0
 801064c:	5102      	str	r2, [r0, r4]
 801064e:	605a      	str	r2, [r3, #4]
 8010650:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU433_MAX_NB_CHANNELS );
 8010652:	2210      	movs	r2, #16
 8010654:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8010658:	f7ff f809 	bl	800f66e <RegionCommonChanDisable>
}
 801065c:	bd10      	pop	{r4, pc}
 801065e:	bf00      	nop
 8010660:	2000144c 	.word	0x2000144c

08010664 <RegionEU433ApplyCFList>:
{
 8010664:	b570      	push	{r4, r5, r6, lr}
 8010666:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8010668:	2350      	movs	r3, #80	; 0x50
 801066a:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 801066e:	7903      	ldrb	r3, [r0, #4]
 8010670:	2b10      	cmp	r3, #16
 8010672:	d135      	bne.n	80106e0 <RegionEU433ApplyCFList+0x7c>
 8010674:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 8010676:	6803      	ldr	r3, [r0, #0]
 8010678:	7bdd      	ldrb	r5, [r3, #15]
 801067a:	2d00      	cmp	r5, #0
 801067c:	d130      	bne.n	80106e0 <RegionEU433ApplyCFList+0x7c>
    for( uint8_t i = 0, chanIdx = EU433_NUMB_DEFAULT_CHANNELS; chanIdx < EU433_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801067e:	2403      	movs	r4, #3
 8010680:	e01a      	b.n	80106b8 <RegionEU433ApplyCFList+0x54>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8010682:	6832      	ldr	r2, [r6, #0]
 8010684:	5d53      	ldrb	r3, [r2, r5]
 8010686:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8010688:	442a      	add	r2, r5
 801068a:	7851      	ldrb	r1, [r2, #1]
 801068c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8010690:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8010692:	7892      	ldrb	r2, [r2, #2]
 8010694:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 8010698:	2264      	movs	r2, #100	; 0x64
 801069a:	fb02 f303 	mul.w	r3, r2, r3
 801069e:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 80106a0:	2300      	movs	r3, #0
 80106a2:	9304      	str	r3, [sp, #16]
 80106a4:	e011      	b.n	80106ca <RegionEU433ApplyCFList+0x66>
            channelRemove.ChannelId = chanIdx;
 80106a6:	f88d 4000 	strb.w	r4, [sp]
            RegionEU433ChannelsRemove( &channelRemove );
 80106aa:	4668      	mov	r0, sp
 80106ac:	f7ff ffc0 	bl	8010630 <RegionEU433ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU433_NUMB_DEFAULT_CHANNELS; chanIdx < EU433_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80106b0:	3503      	adds	r5, #3
 80106b2:	b2ed      	uxtb	r5, r5
 80106b4:	3401      	adds	r4, #1
 80106b6:	b2e4      	uxtb	r4, r4
 80106b8:	2c0f      	cmp	r4, #15
 80106ba:	d811      	bhi.n	80106e0 <RegionEU433ApplyCFList+0x7c>
        if( chanIdx < ( EU433_NUMB_CHANNELS_CF_LIST + EU433_NUMB_DEFAULT_CHANNELS ) )
 80106bc:	2c07      	cmp	r4, #7
 80106be:	d9e0      	bls.n	8010682 <RegionEU433ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 80106c0:	2300      	movs	r3, #0
 80106c2:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 80106c4:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 80106c8:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 80106ca:	9b03      	ldr	r3, [sp, #12]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d0ea      	beq.n	80106a6 <RegionEU433ApplyCFList+0x42>
            channelAdd.NewChannel = &newChannel;
 80106d0:	ab03      	add	r3, sp, #12
 80106d2:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 80106d4:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU433ChannelAdd( &channelAdd );
 80106d8:	a801      	add	r0, sp, #4
 80106da:	f7ff ff4d 	bl	8010578 <RegionEU433ChannelAdd>
 80106de:	e7e7      	b.n	80106b0 <RegionEU433ApplyCFList+0x4c>
}
 80106e0:	b006      	add	sp, #24
 80106e2:	bd70      	pop	{r4, r5, r6, pc}

080106e4 <RegionEU433NewChannelReq>:
{
 80106e4:	b500      	push	{lr}
 80106e6:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 80106e8:	6803      	ldr	r3, [r0, #0]
 80106ea:	681a      	ldr	r2, [r3, #0]
 80106ec:	b952      	cbnz	r2, 8010704 <RegionEU433NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80106ee:	7903      	ldrb	r3, [r0, #4]
 80106f0:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU433ChannelsRemove( &channelRemove ) == false )
 80106f4:	a801      	add	r0, sp, #4
 80106f6:	f7ff ff9b 	bl	8010630 <RegionEU433ChannelsRemove>
 80106fa:	b1d0      	cbz	r0, 8010732 <RegionEU433NewChannelReq+0x4e>
    uint8_t status = 0x03;
 80106fc:	2003      	movs	r0, #3
}
 80106fe:	b005      	add	sp, #20
 8010700:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8010704:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8010706:	7903      	ldrb	r3, [r0, #4]
 8010708:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU433ChannelAdd( &channelAdd ) )
 801070c:	a802      	add	r0, sp, #8
 801070e:	f7ff ff33 	bl	8010578 <RegionEU433ChannelAdd>
 8010712:	2806      	cmp	r0, #6
 8010714:	d80b      	bhi.n	801072e <RegionEU433NewChannelReq+0x4a>
 8010716:	e8df f000 	tbb	[pc, r0]
 801071a:	0a04      	.short	0x0a04
 801071c:	060e0a0a 	.word	0x060e0a0a
 8010720:	08          	.byte	0x08
 8010721:	00          	.byte	0x00
 8010722:	2003      	movs	r0, #3
 8010724:	e7eb      	b.n	80106fe <RegionEU433NewChannelReq+0x1a>
                status &= 0xFD;
 8010726:	2001      	movs	r0, #1
                break;
 8010728:	e7e9      	b.n	80106fe <RegionEU433NewChannelReq+0x1a>
                status &= 0xFC;
 801072a:	2000      	movs	r0, #0
                break;
 801072c:	e7e7      	b.n	80106fe <RegionEU433NewChannelReq+0x1a>
                status &= 0xFC;
 801072e:	2000      	movs	r0, #0
                break;
 8010730:	e7e5      	b.n	80106fe <RegionEU433NewChannelReq+0x1a>
            status &= 0xFC;
 8010732:	2000      	movs	r0, #0
 8010734:	e7e3      	b.n	80106fe <RegionEU433NewChannelReq+0x1a>
                status &= 0xFE;
 8010736:	2002      	movs	r0, #2
 8010738:	e7e1      	b.n	80106fe <RegionEU433NewChannelReq+0x1a>
	...

0801073c <RegionEU433SetContinuousWave>:

void RegionEU433SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 801073c:	b538      	push	{r3, r4, r5, lr}
 801073e:	4604      	mov	r4, r0
#if defined( REGION_EU433 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8010740:	4b12      	ldr	r3, [pc, #72]	; (801078c <RegionEU433SetContinuousWave+0x50>)
 8010742:	6819      	ldr	r1, [r3, #0]
 8010744:	4d12      	ldr	r5, [pc, #72]	; (8010790 <RegionEU433SetContinuousWave+0x54>)
 8010746:	682b      	ldr	r3, [r5, #0]
 8010748:	7802      	ldrb	r2, [r0, #0]
 801074a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801074e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8010752:	7a53      	ldrb	r3, [r2, #9]
 8010754:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010758:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801075c:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8010760:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8010764:	f7ff f9f7 	bl	800fb56 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8010768:	682a      	ldr	r2, [r5, #0]
 801076a:	7823      	ldrb	r3, [r4, #0]
 801076c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010770:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8010774:	68a2      	ldr	r2, [r4, #8]
 8010776:	6861      	ldr	r1, [r4, #4]
 8010778:	f7ff f90a 	bl	800f990 <RegionCommonComputeTxPower>
 801077c:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 801077e:	4b05      	ldr	r3, [pc, #20]	; (8010794 <RegionEU433SetContinuousWave+0x58>)
 8010780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010782:	89a2      	ldrh	r2, [r4, #12]
 8010784:	4628      	mov	r0, r5
 8010786:	4798      	blx	r3
#endif /* REGION_EU433 */
}
 8010788:	bd38      	pop	{r3, r4, r5, pc}
 801078a:	bf00      	nop
 801078c:	20001448 	.word	0x20001448
 8010790:	2000144c 	.word	0x2000144c
 8010794:	08018400 	.word	0x08018400

08010798 <RegionEU433ApplyDrOffset>:

uint8_t RegionEU433ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU433 )
    int8_t datarate = dr - drOffset;
 8010798:	1a88      	subs	r0, r1, r2
 801079a:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 801079c:	2800      	cmp	r0, #0
 801079e:	db01      	blt.n	80107a4 <RegionEU433ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU433 */
}
 80107a0:	b2c0      	uxtb	r0, r0
 80107a2:	4770      	bx	lr
        datarate = DR_0;
 80107a4:	2000      	movs	r0, #0
 80107a6:	e7fb      	b.n	80107a0 <RegionEU433ApplyDrOffset+0x8>

080107a8 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 80107a8:	b538      	push	{r3, r4, r5, lr}
 80107aa:	4604      	mov	r4, r0
 80107ac:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80107ae:	4b1b      	ldr	r3, [pc, #108]	; (801081c <VerifyRfFreq+0x74>)
 80107b0:	6a1b      	ldr	r3, [r3, #32]
 80107b2:	4798      	blx	r3
 80107b4:	b130      	cbz	r0, 80107c4 <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80107b6:	4b1a      	ldr	r3, [pc, #104]	; (8010820 <VerifyRfFreq+0x78>)
 80107b8:	4423      	add	r3, r4
 80107ba:	4a1a      	ldr	r2, [pc, #104]	; (8010824 <VerifyRfFreq+0x7c>)
 80107bc:	4293      	cmp	r3, r2
 80107be:	d802      	bhi.n	80107c6 <VerifyRfFreq+0x1e>
    {
        *band = 2;
 80107c0:	2302      	movs	r3, #2
 80107c2:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 80107c4:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80107c6:	4b18      	ldr	r3, [pc, #96]	; (8010828 <VerifyRfFreq+0x80>)
 80107c8:	4423      	add	r3, r4
 80107ca:	4a18      	ldr	r2, [pc, #96]	; (801082c <VerifyRfFreq+0x84>)
 80107cc:	4293      	cmp	r3, r2
 80107ce:	d802      	bhi.n	80107d6 <VerifyRfFreq+0x2e>
        *band = 0;
 80107d0:	2300      	movs	r3, #0
 80107d2:	702b      	strb	r3, [r5, #0]
 80107d4:	e7f6      	b.n	80107c4 <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80107d6:	4b16      	ldr	r3, [pc, #88]	; (8010830 <VerifyRfFreq+0x88>)
 80107d8:	4423      	add	r3, r4
 80107da:	4a16      	ldr	r2, [pc, #88]	; (8010834 <VerifyRfFreq+0x8c>)
 80107dc:	4293      	cmp	r3, r2
 80107de:	d802      	bhi.n	80107e6 <VerifyRfFreq+0x3e>
        *band = 1;
 80107e0:	2301      	movs	r3, #1
 80107e2:	702b      	strb	r3, [r5, #0]
 80107e4:	e7ee      	b.n	80107c4 <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80107e6:	4b14      	ldr	r3, [pc, #80]	; (8010838 <VerifyRfFreq+0x90>)
 80107e8:	4423      	add	r3, r4
 80107ea:	4a14      	ldr	r2, [pc, #80]	; (801083c <VerifyRfFreq+0x94>)
 80107ec:	4293      	cmp	r3, r2
 80107ee:	d802      	bhi.n	80107f6 <VerifyRfFreq+0x4e>
        *band = 5;
 80107f0:	2305      	movs	r3, #5
 80107f2:	702b      	strb	r3, [r5, #0]
 80107f4:	e7e6      	b.n	80107c4 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80107f6:	4b12      	ldr	r3, [pc, #72]	; (8010840 <VerifyRfFreq+0x98>)
 80107f8:	4423      	add	r3, r4
 80107fa:	4a12      	ldr	r2, [pc, #72]	; (8010844 <VerifyRfFreq+0x9c>)
 80107fc:	4293      	cmp	r3, r2
 80107fe:	d802      	bhi.n	8010806 <VerifyRfFreq+0x5e>
        *band = 3;
 8010800:	2303      	movs	r3, #3
 8010802:	702b      	strb	r3, [r5, #0]
 8010804:	e7de      	b.n	80107c4 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8010806:	4b10      	ldr	r3, [pc, #64]	; (8010848 <VerifyRfFreq+0xa0>)
 8010808:	4423      	add	r3, r4
 801080a:	4a10      	ldr	r2, [pc, #64]	; (801084c <VerifyRfFreq+0xa4>)
 801080c:	4293      	cmp	r3, r2
 801080e:	d802      	bhi.n	8010816 <VerifyRfFreq+0x6e>
        *band = 4;
 8010810:	2304      	movs	r3, #4
 8010812:	702b      	strb	r3, [r5, #0]
 8010814:	e7d6      	b.n	80107c4 <VerifyRfFreq+0x1c>
        return false;
 8010816:	2000      	movs	r0, #0
 8010818:	e7d4      	b.n	80107c4 <VerifyRfFreq+0x1c>
 801081a:	bf00      	nop
 801081c:	08018400 	.word	0x08018400
 8010820:	cc8faa40 	.word	0xcc8faa40
 8010824:	001e847f 	.word	0x001e847f
 8010828:	cc7125c0 	.word	0xcc7125c0
 801082c:	002dc6c0 	.word	0x002dc6c0
 8010830:	cc435eff 	.word	0xcc435eff
 8010834:	000927bf 	.word	0x000927bf
 8010838:	cc38b0a0 	.word	0xcc38b0a0
 801083c:	0007a120 	.word	0x0007a120
 8010840:	cc2e0240 	.word	0xcc2e0240
 8010844:	0003d090 	.word	0x0003d090
 8010848:	cc296e60 	.word	0xcc296e60
 801084c:	000493e0 	.word	0x000493e0

08010850 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8010850:	b570      	push	{r4, r5, r6, lr}
 8010852:	b084      	sub	sp, #16
 8010854:	4605      	mov	r5, r0
 8010856:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 8010858:	4b13      	ldr	r3, [pc, #76]	; (80108a8 <GetTimeOnAir+0x58>)
 801085a:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 801085c:	4913      	ldr	r1, [pc, #76]	; (80108ac <GetTimeOnAir+0x5c>)
 801085e:	f7ff f97f 	bl	800fb60 <RegionCommonGetBandwidth>
 8010862:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 8010864:	2d07      	cmp	r5, #7
 8010866:	d00e      	beq.n	8010886 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8010868:	4b11      	ldr	r3, [pc, #68]	; (80108b0 <GetTimeOnAir+0x60>)
 801086a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801086c:	2001      	movs	r0, #1
 801086e:	9003      	str	r0, [sp, #12]
 8010870:	b2e4      	uxtb	r4, r4
 8010872:	9402      	str	r4, [sp, #8]
 8010874:	2300      	movs	r3, #0
 8010876:	9301      	str	r3, [sp, #4]
 8010878:	2308      	movs	r3, #8
 801087a:	9300      	str	r3, [sp, #0]
 801087c:	4603      	mov	r3, r0
 801087e:	4632      	mov	r2, r6
 8010880:	47a8      	blx	r5
    }
    return timeOnAir;
}
 8010882:	b004      	add	sp, #16
 8010884:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8010886:	4b0a      	ldr	r3, [pc, #40]	; (80108b0 <GetTimeOnAir+0x60>)
 8010888:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801088a:	2301      	movs	r3, #1
 801088c:	9303      	str	r3, [sp, #12]
 801088e:	b2e4      	uxtb	r4, r4
 8010890:	9402      	str	r4, [sp, #8]
 8010892:	2000      	movs	r0, #0
 8010894:	9001      	str	r0, [sp, #4]
 8010896:	2305      	movs	r3, #5
 8010898:	9300      	str	r3, [sp, #0]
 801089a:	4603      	mov	r3, r0
 801089c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80108a0:	fb02 f206 	mul.w	r2, r2, r6
 80108a4:	47a8      	blx	r5
 80108a6:	e7ec      	b.n	8010882 <GetTimeOnAir+0x32>
 80108a8:	08017df4 	.word	0x08017df4
 80108ac:	08017dd4 	.word	0x08017dd4
 80108b0:	08018400 	.word	0x08018400

080108b4 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80108b4:	b500      	push	{lr}
 80108b6:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 80108b8:	2300      	movs	r3, #0
 80108ba:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 80108bc:	7803      	ldrb	r3, [r0, #0]
 80108be:	3b0b      	subs	r3, #11
 80108c0:	2b2e      	cmp	r3, #46	; 0x2e
 80108c2:	d830      	bhi.n	8010926 <RegionEU868GetPhyParam+0x72>
 80108c4:	e8df f003 	tbb	[pc, r3]
 80108c8:	3f393633 	.word	0x3f393633
 80108cc:	504c4845 	.word	0x504c4845
 80108d0:	605c5854 	.word	0x605c5854
 80108d4:	6c2f692f 	.word	0x6c2f692f
 80108d8:	2f7b7872 	.word	0x2f7b7872
 80108dc:	18837f2f 	.word	0x18837f2f
 80108e0:	2f2f2f2f 	.word	0x2f2f2f2f
 80108e4:	2f2f2f2f 	.word	0x2f2f2f2f
 80108e8:	2f2f2f2f 	.word	0x2f2f2f2f
 80108ec:	9389862f 	.word	0x9389862f
 80108f0:	99962f2f 	.word	0x99962f2f
 80108f4:	9c2f      	.short	0x9c2f
 80108f6:	a2          	.byte	0xa2
 80108f7:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80108f8:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80108fc:	f88d 3004 	strb.w	r3, [sp, #4]
 8010900:	2307      	movs	r3, #7
 8010902:	f88d 3005 	strb.w	r3, [sp, #5]
 8010906:	2300      	movs	r3, #0
 8010908:	f88d 3006 	strb.w	r3, [sp, #6]
 801090c:	2310      	movs	r3, #16
 801090e:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8010912:	4b42      	ldr	r3, [pc, #264]	; (8010a1c <RegionEU868GetPhyParam+0x168>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801091a:	9202      	str	r2, [sp, #8]
 801091c:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801091e:	a801      	add	r0, sp, #4
 8010920:	f7ff f8fa 	bl	800fb18 <RegionCommonGetNextLowerTxDr>
 8010924:	9004      	str	r0, [sp, #16]
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
}
 8010926:	9804      	ldr	r0, [sp, #16]
 8010928:	b007      	add	sp, #28
 801092a:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801092e:	2340      	movs	r3, #64	; 0x40
 8010930:	9304      	str	r3, [sp, #16]
            break;
 8010932:	e7f8      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8010934:	2320      	movs	r3, #32
 8010936:	9304      	str	r3, [sp, #16]
            break;
 8010938:	e7f5      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 801093a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801093e:	4a38      	ldr	r2, [pc, #224]	; (8010a20 <RegionEU868GetPhyParam+0x16c>)
 8010940:	5cd3      	ldrb	r3, [r2, r3]
 8010942:	9304      	str	r3, [sp, #16]
            break;
 8010944:	e7ef      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8010946:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801094a:	4a36      	ldr	r2, [pc, #216]	; (8010a24 <RegionEU868GetPhyParam+0x170>)
 801094c:	5cd3      	ldrb	r3, [r2, r3]
 801094e:	9304      	str	r3, [sp, #16]
            break;
 8010950:	e7e9      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8010952:	2301      	movs	r3, #1
 8010954:	9304      	str	r3, [sp, #16]
            break;
 8010956:	e7e6      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8010958:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801095c:	9304      	str	r3, [sp, #16]
            break;
 801095e:	e7e2      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8010960:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010964:	9304      	str	r3, [sp, #16]
            break;
 8010966:	e7de      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8010968:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801096c:	9304      	str	r3, [sp, #16]
            break;
 801096e:	e7da      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8010970:	f241 3388 	movw	r3, #5000	; 0x1388
 8010974:	9304      	str	r3, [sp, #16]
            break;
 8010976:	e7d6      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8010978:	f241 7370 	movw	r3, #6000	; 0x1770
 801097c:	9304      	str	r3, [sp, #16]
            break;
 801097e:	e7d2      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8010980:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010984:	9304      	str	r3, [sp, #16]
            break;
 8010986:	e7ce      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8010988:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801098c:	4826      	ldr	r0, [pc, #152]	; (8010a28 <RegionEU868GetPhyParam+0x174>)
 801098e:	f003 fe07 	bl	80145a0 <randr>
 8010992:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 8010996:	9004      	str	r0, [sp, #16]
            break;
 8010998:	e7c5      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 801099a:	4b24      	ldr	r3, [pc, #144]	; (8010a2c <RegionEU868GetPhyParam+0x178>)
 801099c:	9304      	str	r3, [sp, #16]
            break;
 801099e:	e7c2      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80109a0:	4b1e      	ldr	r3, [pc, #120]	; (8010a1c <RegionEU868GetPhyParam+0x168>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80109a8:	9304      	str	r3, [sp, #16]
            break;
 80109aa:	e7bc      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80109ac:	4b1b      	ldr	r3, [pc, #108]	; (8010a1c <RegionEU868GetPhyParam+0x168>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 80109b4:	9304      	str	r3, [sp, #16]
            break;
 80109b6:	e7b6      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 80109b8:	2310      	movs	r3, #16
 80109ba:	9304      	str	r3, [sp, #16]
            break;
 80109bc:	e7b3      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 80109be:	4b17      	ldr	r3, [pc, #92]	; (8010a1c <RegionEU868GetPhyParam+0x168>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	9304      	str	r3, [sp, #16]
            break;
 80109c4:	e7af      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 80109c6:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80109ca:	9304      	str	r3, [sp, #16]
            break;
 80109cc:	e7ab      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 80109ce:	4b18      	ldr	r3, [pc, #96]	; (8010a30 <RegionEU868GetPhyParam+0x17c>)
 80109d0:	9304      	str	r3, [sp, #16]
            break;
 80109d2:	e7a8      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80109d4:	4b15      	ldr	r3, [pc, #84]	; (8010a2c <RegionEU868GetPhyParam+0x178>)
 80109d6:	9304      	str	r3, [sp, #16]
            break;
 80109d8:	e7a5      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80109da:	2311      	movs	r3, #17
 80109dc:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80109e0:	2302      	movs	r3, #2
 80109e2:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80109e6:	2300      	movs	r3, #0
 80109e8:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 80109ec:	e79b      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80109ee:	2303      	movs	r3, #3
 80109f0:	9304      	str	r3, [sp, #16]
            break;
 80109f2:	e798      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80109f4:	4b0d      	ldr	r3, [pc, #52]	; (8010a2c <RegionEU868GetPhyParam+0x178>)
 80109f6:	9304      	str	r3, [sp, #16]
            break;
 80109f8:	e795      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80109fa:	2303      	movs	r3, #3
 80109fc:	9304      	str	r3, [sp, #16]
            break;
 80109fe:	e792      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8010a00:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010a04:	4a0b      	ldr	r2, [pc, #44]	; (8010a34 <RegionEU868GetPhyParam+0x180>)
 8010a06:	5cd3      	ldrb	r3, [r2, r3]
 8010a08:	9304      	str	r3, [sp, #16]
            break;
 8010a0a:	e78c      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8010a0c:	490a      	ldr	r1, [pc, #40]	; (8010a38 <RegionEU868GetPhyParam+0x184>)
 8010a0e:	f990 0001 	ldrsb.w	r0, [r0, #1]
 8010a12:	f7ff f8a5 	bl	800fb60 <RegionCommonGetBandwidth>
 8010a16:	9004      	str	r0, [sp, #16]
            break;
 8010a18:	e785      	b.n	8010926 <RegionEU868GetPhyParam+0x72>
 8010a1a:	bf00      	nop
 8010a1c:	20001454 	.word	0x20001454
 8010a20:	08017dfc 	.word	0x08017dfc
 8010a24:	08017e04 	.word	0x08017e04
 8010a28:	fffffc18 	.word	0xfffffc18
 8010a2c:	33d3e608 	.word	0x33d3e608
 8010a30:	4009999a 	.word	0x4009999a
 8010a34:	08017df4 	.word	0x08017df4
 8010a38:	08017dd4 	.word	0x08017dd4

08010a3c <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8010a3c:	b530      	push	{r4, r5, lr}
 8010a3e:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8010a40:	4b0b      	ldr	r3, [pc, #44]	; (8010a70 <RegionEU868SetBandTxDone+0x34>)
 8010a42:	681d      	ldr	r5, [r3, #0]
 8010a44:	4b0b      	ldr	r3, [pc, #44]	; (8010a74 <RegionEU868SetBandTxDone+0x38>)
 8010a46:	681a      	ldr	r2, [r3, #0]
 8010a48:	7803      	ldrb	r3, [r0, #0]
 8010a4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010a4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010a52:	7a5b      	ldrb	r3, [r3, #9]
 8010a54:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8010a58:	6903      	ldr	r3, [r0, #16]
 8010a5a:	9300      	str	r3, [sp, #0]
 8010a5c:	68c3      	ldr	r3, [r0, #12]
 8010a5e:	7842      	ldrb	r2, [r0, #1]
 8010a60:	6881      	ldr	r1, [r0, #8]
 8010a62:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 8010a66:	f7fe fe43 	bl	800f6f0 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 8010a6a:	b003      	add	sp, #12
 8010a6c:	bd30      	pop	{r4, r5, pc}
 8010a6e:	bf00      	nop
 8010a70:	20001450 	.word	0x20001450
 8010a74:	20001454 	.word	0x20001454

08010a78 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8010a78:	b530      	push	{r4, r5, lr}
 8010a7a:	b0a5      	sub	sp, #148	; 0x94
 8010a7c:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8010a7e:	2290      	movs	r2, #144	; 0x90
 8010a80:	2100      	movs	r1, #0
 8010a82:	4668      	mov	r0, sp
 8010a84:	f006 fcf4 	bl	8017470 <memset>
 8010a88:	2364      	movs	r3, #100	; 0x64
 8010a8a:	f8ad 3000 	strh.w	r3, [sp]
 8010a8e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010a92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010a96:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8010a9a:	210a      	movs	r1, #10
 8010a9c:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 8010aa0:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8010aa4:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8010aa8:	7a23      	ldrb	r3, [r4, #8]
 8010aaa:	2b01      	cmp	r3, #1
 8010aac:	d031      	beq.n	8010b12 <RegionEU868InitDefaults+0x9a>
 8010aae:	2b02      	cmp	r3, #2
 8010ab0:	d03d      	beq.n	8010b2e <RegionEU868InitDefaults+0xb6>
 8010ab2:	b10b      	cbz	r3, 8010ab8 <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 8010ab4:	b025      	add	sp, #148	; 0x94
 8010ab6:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8010ab8:	6820      	ldr	r0, [r4, #0]
 8010aba:	2800      	cmp	r0, #0
 8010abc:	d0fa      	beq.n	8010ab4 <RegionEU868InitDefaults+0x3c>
 8010abe:	6863      	ldr	r3, [r4, #4]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d0f7      	beq.n	8010ab4 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8010ac4:	4a1f      	ldr	r2, [pc, #124]	; (8010b44 <RegionEU868InitDefaults+0xcc>)
 8010ac6:	6010      	str	r0, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8010ac8:	4c1f      	ldr	r4, [pc, #124]	; (8010b48 <RegionEU868InitDefaults+0xd0>)
 8010aca:	6023      	str	r3, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8010acc:	2290      	movs	r2, #144	; 0x90
 8010ace:	4669      	mov	r1, sp
 8010ad0:	f003 fd73 	bl	80145ba <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8010ad4:	6824      	ldr	r4, [r4, #0]
 8010ad6:	4b1d      	ldr	r3, [pc, #116]	; (8010b4c <RegionEU868InitDefaults+0xd4>)
 8010ad8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010adc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8010ae0:	f104 050c 	add.w	r5, r4, #12
 8010ae4:	f103 020c 	add.w	r2, r3, #12
 8010ae8:	ca07      	ldmia	r2, {r0, r1, r2}
 8010aea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8010aee:	f104 0518 	add.w	r5, r4, #24
 8010af2:	3318      	adds	r3, #24
 8010af4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010af8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8010afc:	2307      	movs	r3, #7
 8010afe:	f8a4 348c 	strh.w	r3, [r4, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8010b02:	2201      	movs	r2, #1
 8010b04:	f204 418c 	addw	r1, r4, #1164	; 0x48c
 8010b08:	f504 6090 	add.w	r0, r4, #1152	; 0x480
 8010b0c:	f7fe fddf 	bl	800f6ce <RegionCommonChanMaskCopy>
            break;
 8010b10:	e7d0      	b.n	8010ab4 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8010b12:	4b0d      	ldr	r3, [pc, #52]	; (8010b48 <RegionEU868InitDefaults+0xd0>)
 8010b14:	6818      	ldr	r0, [r3, #0]
 8010b16:	2300      	movs	r3, #0
 8010b18:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8010b1a:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8010b1c:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8010b1e:	2201      	movs	r2, #1
 8010b20:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 8010b24:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8010b28:	f7fe fdd1 	bl	800f6ce <RegionCommonChanMaskCopy>
            break;
 8010b2c:	e7c2      	b.n	8010ab4 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8010b2e:	4b06      	ldr	r3, [pc, #24]	; (8010b48 <RegionEU868InitDefaults+0xd0>)
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 8010b36:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 8010b3a:	430a      	orrs	r2, r1
 8010b3c:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 8010b40:	e7b8      	b.n	8010ab4 <RegionEU868InitDefaults+0x3c>
 8010b42:	bf00      	nop
 8010b44:	20001450 	.word	0x20001450
 8010b48:	20001454 	.word	0x20001454
 8010b4c:	0801762c 	.word	0x0801762c

08010b50 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8010b50:	b500      	push	{lr}
 8010b52:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8010b54:	290f      	cmp	r1, #15
 8010b56:	d83c      	bhi.n	8010bd2 <RegionEU868Verify+0x82>
 8010b58:	e8df f001 	tbb	[pc, r1]
 8010b5c:	3b3b3b0a 	.word	0x3b3b3b0a
 8010b60:	271d133b 	.word	0x271d133b
 8010b64:	3b31313b 	.word	0x3b31313b
 8010b68:	083b3b3b 	.word	0x083b3b3b
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 8010b6c:	2001      	movs	r0, #1
 8010b6e:	e031      	b.n	8010bd4 <RegionEU868Verify+0x84>
            uint8_t band = 0;
 8010b70:	2300      	movs	r3, #0
 8010b72:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 8010b76:	f10d 0107 	add.w	r1, sp, #7
 8010b7a:	6800      	ldr	r0, [r0, #0]
 8010b7c:	f7ff fe14 	bl	80107a8 <VerifyRfFreq>
 8010b80:	e028      	b.n	8010bd4 <RegionEU868Verify+0x84>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8010b82:	2207      	movs	r2, #7
 8010b84:	2100      	movs	r1, #0
 8010b86:	f990 0000 	ldrsb.w	r0, [r0]
 8010b8a:	f7fe fd2e 	bl	800f5ea <RegionCommonValueInRange>
 8010b8e:	3800      	subs	r0, #0
 8010b90:	bf18      	it	ne
 8010b92:	2001      	movne	r0, #1
 8010b94:	e01e      	b.n	8010bd4 <RegionEU868Verify+0x84>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8010b96:	2205      	movs	r2, #5
 8010b98:	2100      	movs	r1, #0
 8010b9a:	f990 0000 	ldrsb.w	r0, [r0]
 8010b9e:	f7fe fd24 	bl	800f5ea <RegionCommonValueInRange>
 8010ba2:	3800      	subs	r0, #0
 8010ba4:	bf18      	it	ne
 8010ba6:	2001      	movne	r0, #1
 8010ba8:	e014      	b.n	8010bd4 <RegionEU868Verify+0x84>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8010baa:	2207      	movs	r2, #7
 8010bac:	2100      	movs	r1, #0
 8010bae:	f990 0000 	ldrsb.w	r0, [r0]
 8010bb2:	f7fe fd1a 	bl	800f5ea <RegionCommonValueInRange>
 8010bb6:	3800      	subs	r0, #0
 8010bb8:	bf18      	it	ne
 8010bba:	2001      	movne	r0, #1
 8010bbc:	e00a      	b.n	8010bd4 <RegionEU868Verify+0x84>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8010bbe:	2207      	movs	r2, #7
 8010bc0:	2100      	movs	r1, #0
 8010bc2:	f990 0000 	ldrsb.w	r0, [r0]
 8010bc6:	f7fe fd10 	bl	800f5ea <RegionCommonValueInRange>
 8010bca:	3800      	subs	r0, #0
 8010bcc:	bf18      	it	ne
 8010bce:	2001      	movne	r0, #1
 8010bd0:	e000      	b.n	8010bd4 <RegionEU868Verify+0x84>
            return false;
 8010bd2:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8010bd4:	b003      	add	sp, #12
 8010bd6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010bdc <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8010bdc:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8010bde:	7903      	ldrb	r3, [r0, #4]
 8010be0:	b11b      	cbz	r3, 8010bea <RegionEU868ChanMaskSet+0xe>
 8010be2:	2b01      	cmp	r3, #1
 8010be4:	d00b      	beq.n	8010bfe <RegionEU868ChanMaskSet+0x22>
 8010be6:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 8010be8:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8010bea:	4b0a      	ldr	r3, [pc, #40]	; (8010c14 <RegionEU868ChanMaskSet+0x38>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	2201      	movs	r2, #1
 8010bf0:	6801      	ldr	r1, [r0, #0]
 8010bf2:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8010bf6:	f7fe fd6a 	bl	800f6ce <RegionCommonChanMaskCopy>
    return true;
 8010bfa:	2001      	movs	r0, #1
            break;
 8010bfc:	e7f4      	b.n	8010be8 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8010bfe:	4b05      	ldr	r3, [pc, #20]	; (8010c14 <RegionEU868ChanMaskSet+0x38>)
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	2201      	movs	r2, #1
 8010c04:	6801      	ldr	r1, [r0, #0]
 8010c06:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8010c0a:	f7fe fd60 	bl	800f6ce <RegionCommonChanMaskCopy>
    return true;
 8010c0e:	2001      	movs	r0, #1
            break;
 8010c10:	e7ea      	b.n	8010be8 <RegionEU868ChanMaskSet+0xc>
 8010c12:	bf00      	nop
 8010c14:	20001454 	.word	0x20001454

08010c18 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8010c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c1a:	b083      	sub	sp, #12
 8010c1c:	460e      	mov	r6, r1
 8010c1e:	4617      	mov	r7, r2
 8010c20:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8010c22:	2807      	cmp	r0, #7
 8010c24:	bfa8      	it	ge
 8010c26:	2007      	movge	r0, #7
 8010c28:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8010c2a:	4913      	ldr	r1, [pc, #76]	; (8010c78 <RegionEU868ComputeRxWindowParameters+0x60>)
 8010c2c:	f7fe ff98 	bl	800fb60 <RegionCommonGetBandwidth>
 8010c30:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8010c32:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8010c36:	2b07      	cmp	r3, #7
 8010c38:	d017      	beq.n	8010c6a <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8010c3a:	4a0f      	ldr	r2, [pc, #60]	; (8010c78 <RegionEU868ComputeRxWindowParameters+0x60>)
 8010c3c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8010c40:	4a0e      	ldr	r2, [pc, #56]	; (8010c7c <RegionEU868ComputeRxWindowParameters+0x64>)
 8010c42:	5cd0      	ldrb	r0, [r2, r3]
 8010c44:	f7fe fe5c 	bl	800f900 <RegionCommonComputeSymbolTimeLoRa>
 8010c48:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8010c4a:	4b0d      	ldr	r3, [pc, #52]	; (8010c80 <RegionEU868ComputeRxWindowParameters+0x68>)
 8010c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c4e:	4798      	blx	r3
 8010c50:	4603      	mov	r3, r0
 8010c52:	f104 020c 	add.w	r2, r4, #12
 8010c56:	9201      	str	r2, [sp, #4]
 8010c58:	3408      	adds	r4, #8
 8010c5a:	9400      	str	r4, [sp, #0]
 8010c5c:	463a      	mov	r2, r7
 8010c5e:	4631      	mov	r1, r6
 8010c60:	4628      	mov	r0, r5
 8010c62:	f7fe fe5b 	bl	800f91c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8010c66:	b003      	add	sp, #12
 8010c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8010c6a:	4a04      	ldr	r2, [pc, #16]	; (8010c7c <RegionEU868ComputeRxWindowParameters+0x64>)
 8010c6c:	5cd0      	ldrb	r0, [r2, r3]
 8010c6e:	f7fe fe4f 	bl	800f910 <RegionCommonComputeSymbolTimeFsk>
 8010c72:	4605      	mov	r5, r0
 8010c74:	e7e9      	b.n	8010c4a <RegionEU868ComputeRxWindowParameters+0x32>
 8010c76:	bf00      	nop
 8010c78:	08017dd4 	.word	0x08017dd4
 8010c7c:	08017df4 	.word	0x08017df4
 8010c80:	08018400 	.word	0x08018400

08010c84 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8010c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c88:	b08a      	sub	sp, #40	; 0x28
 8010c8a:	4604      	mov	r4, r0
 8010c8c:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8010c8e:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 8010c92:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 8010c96:	4b37      	ldr	r3, [pc, #220]	; (8010d74 <RegionEU868RxConfig+0xf0>)
 8010c98:	685b      	ldr	r3, [r3, #4]
 8010c9a:	4798      	blx	r3
 8010c9c:	2800      	cmp	r0, #0
 8010c9e:	d167      	bne.n	8010d70 <RegionEU868RxConfig+0xec>
 8010ca0:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8010ca2:	7ce3      	ldrb	r3, [r4, #19]
 8010ca4:	b983      	cbnz	r3, 8010cc8 <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8010ca6:	4b34      	ldr	r3, [pc, #208]	; (8010d78 <RegionEU868RxConfig+0xf4>)
 8010ca8:	681a      	ldr	r2, [r3, #0]
 8010caa:	7823      	ldrb	r3, [r4, #0]
 8010cac:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8010cb0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8010cb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010cb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010cbc:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8010cc0:	f1b8 0f00 	cmp.w	r8, #0
 8010cc4:	d100      	bne.n	8010cc8 <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8010cc6:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8010cc8:	4b2c      	ldr	r3, [pc, #176]	; (8010d7c <RegionEU868RxConfig+0xf8>)
 8010cca:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 8010cce:	4b29      	ldr	r3, [pc, #164]	; (8010d74 <RegionEU868RxConfig+0xf0>)
 8010cd0:	68db      	ldr	r3, [r3, #12]
 8010cd2:	4640      	mov	r0, r8
 8010cd4:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8010cd6:	2d07      	cmp	r5, #7
 8010cd8:	d02b      	beq.n	8010d32 <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8010cda:	4b26      	ldr	r3, [pc, #152]	; (8010d74 <RegionEU868RxConfig+0xf0>)
 8010cdc:	f8d3 a018 	ldr.w	sl, [r3, #24]
 8010ce0:	7ca3      	ldrb	r3, [r4, #18]
 8010ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8010ce4:	2601      	movs	r6, #1
 8010ce6:	9608      	str	r6, [sp, #32]
 8010ce8:	2300      	movs	r3, #0
 8010cea:	9307      	str	r3, [sp, #28]
 8010cec:	9306      	str	r3, [sp, #24]
 8010cee:	9305      	str	r3, [sp, #20]
 8010cf0:	9304      	str	r3, [sp, #16]
 8010cf2:	9303      	str	r3, [sp, #12]
 8010cf4:	8922      	ldrh	r2, [r4, #8]
 8010cf6:	9202      	str	r2, [sp, #8]
 8010cf8:	2208      	movs	r2, #8
 8010cfa:	9201      	str	r2, [sp, #4]
 8010cfc:	9300      	str	r3, [sp, #0]
 8010cfe:	4633      	mov	r3, r6
 8010d00:	464a      	mov	r2, r9
 8010d02:	78a1      	ldrb	r1, [r4, #2]
 8010d04:	4630      	mov	r0, r6
 8010d06:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8010d08:	7c63      	ldrb	r3, [r4, #17]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d02d      	beq.n	8010d6a <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8010d0e:	4b1c      	ldr	r3, [pc, #112]	; (8010d80 <RegionEU868RxConfig+0xfc>)
 8010d10:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8010d12:	4b18      	ldr	r3, [pc, #96]	; (8010d74 <RegionEU868RxConfig+0xf0>)
 8010d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d16:	310d      	adds	r1, #13
 8010d18:	b2c9      	uxtb	r1, r1
 8010d1a:	4630      	mov	r0, r6
 8010d1c:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8010d1e:	462a      	mov	r2, r5
 8010d20:	4641      	mov	r1, r8
 8010d22:	7ce0      	ldrb	r0, [r4, #19]
 8010d24:	f7fe ff2e 	bl	800fb84 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8010d28:	703d      	strb	r5, [r7, #0]
    return true;
 8010d2a:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8010d2c:	b00a      	add	sp, #40	; 0x28
 8010d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8010d32:	4b10      	ldr	r3, [pc, #64]	; (8010d74 <RegionEU868RxConfig+0xf0>)
 8010d34:	f8d3 a018 	ldr.w	sl, [r3, #24]
 8010d38:	7ca3      	ldrb	r3, [r4, #18]
 8010d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8010d3c:	2000      	movs	r0, #0
 8010d3e:	9008      	str	r0, [sp, #32]
 8010d40:	9007      	str	r0, [sp, #28]
 8010d42:	9006      	str	r0, [sp, #24]
 8010d44:	2301      	movs	r3, #1
 8010d46:	9305      	str	r3, [sp, #20]
 8010d48:	9004      	str	r0, [sp, #16]
 8010d4a:	9003      	str	r0, [sp, #12]
 8010d4c:	8923      	ldrh	r3, [r4, #8]
 8010d4e:	9302      	str	r3, [sp, #8]
 8010d50:	2305      	movs	r3, #5
 8010d52:	9301      	str	r3, [sp, #4]
 8010d54:	4b0b      	ldr	r3, [pc, #44]	; (8010d84 <RegionEU868RxConfig+0x100>)
 8010d56:	9300      	str	r3, [sp, #0]
 8010d58:	4603      	mov	r3, r0
 8010d5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010d5e:	fb02 f209 	mul.w	r2, r2, r9
 8010d62:	f24c 3150 	movw	r1, #50000	; 0xc350
 8010d66:	47d0      	blx	sl
 8010d68:	e7ce      	b.n	8010d08 <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8010d6a:	4b07      	ldr	r3, [pc, #28]	; (8010d88 <RegionEU868RxConfig+0x104>)
 8010d6c:	5d59      	ldrb	r1, [r3, r5]
 8010d6e:	e7d0      	b.n	8010d12 <RegionEU868RxConfig+0x8e>
        return false;
 8010d70:	2000      	movs	r0, #0
 8010d72:	e7db      	b.n	8010d2c <RegionEU868RxConfig+0xa8>
 8010d74:	08018400 	.word	0x08018400
 8010d78:	20001454 	.word	0x20001454
 8010d7c:	08017df4 	.word	0x08017df4
 8010d80:	08017e04 	.word	0x08017e04
 8010d84:	00014585 	.word	0x00014585
 8010d88:	08017dfc 	.word	0x08017dfc

08010d8c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8010d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d90:	b08d      	sub	sp, #52	; 0x34
 8010d92:	4604      	mov	r4, r0
 8010d94:	460f      	mov	r7, r1
 8010d96:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8010d98:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010d9c:	4a42      	ldr	r2, [pc, #264]	; (8010ea8 <RegionEU868TxConfig+0x11c>)
 8010d9e:	f912 a003 	ldrsb.w	sl, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8010da2:	4b42      	ldr	r3, [pc, #264]	; (8010eac <RegionEU868TxConfig+0x120>)
 8010da4:	6819      	ldr	r1, [r3, #0]
 8010da6:	4d42      	ldr	r5, [pc, #264]	; (8010eb0 <RegionEU868TxConfig+0x124>)
 8010da8:	682b      	ldr	r3, [r5, #0]
 8010daa:	7802      	ldrb	r2, [r0, #0]
 8010dac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010db0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8010db4:	7a53      	ldrb	r3, [r2, #9]
 8010db6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010dba:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8010dbe:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8010dc2:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8010dc6:	f7fe fec6 	bl	800fb56 <RegionCommonLimitTxPower>
 8010dca:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8010dcc:	4939      	ldr	r1, [pc, #228]	; (8010eb4 <RegionEU868TxConfig+0x128>)
 8010dce:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8010dd2:	f7fe fec5 	bl	800fb60 <RegionCommonGetBandwidth>
 8010dd6:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8010dd8:	68a2      	ldr	r2, [r4, #8]
 8010dda:	6861      	ldr	r1, [r4, #4]
 8010ddc:	4630      	mov	r0, r6
 8010dde:	f7fe fdd7 	bl	800f990 <RegionCommonComputeTxPower>
 8010de2:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8010de4:	4b34      	ldr	r3, [pc, #208]	; (8010eb8 <RegionEU868TxConfig+0x12c>)
 8010de6:	68da      	ldr	r2, [r3, #12]
 8010de8:	6829      	ldr	r1, [r5, #0]
 8010dea:	7823      	ldrb	r3, [r4, #0]
 8010dec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010df0:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8010df4:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8010df6:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8010dfa:	2b07      	cmp	r3, #7
 8010dfc:	d031      	beq.n	8010e62 <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8010dfe:	4b2e      	ldr	r3, [pc, #184]	; (8010eb8 <RegionEU868TxConfig+0x12c>)
 8010e00:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 8010e04:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8010e08:	9308      	str	r3, [sp, #32]
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	9207      	str	r2, [sp, #28]
 8010e0e:	9206      	str	r2, [sp, #24]
 8010e10:	9205      	str	r2, [sp, #20]
 8010e12:	2501      	movs	r5, #1
 8010e14:	9504      	str	r5, [sp, #16]
 8010e16:	9203      	str	r2, [sp, #12]
 8010e18:	2308      	movs	r3, #8
 8010e1a:	9302      	str	r3, [sp, #8]
 8010e1c:	9501      	str	r5, [sp, #4]
 8010e1e:	f8cd a000 	str.w	sl, [sp]
 8010e22:	464b      	mov	r3, r9
 8010e24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010e26:	4628      	mov	r0, r5
 8010e28:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8010e2a:	4b21      	ldr	r3, [pc, #132]	; (8010eb0 <RegionEU868TxConfig+0x124>)
 8010e2c:	681a      	ldr	r2, [r3, #0]
 8010e2e:	7823      	ldrb	r3, [r4, #0]
 8010e30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010e34:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8010e38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010e3c:	f7fe fed2 	bl	800fbe4 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8010e40:	89a1      	ldrh	r1, [r4, #12]
 8010e42:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8010e46:	f7ff fd03 	bl	8010850 <GetTimeOnAir>
 8010e4a:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8010e4e:	4b1a      	ldr	r3, [pc, #104]	; (8010eb8 <RegionEU868TxConfig+0x12c>)
 8010e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e52:	7b21      	ldrb	r1, [r4, #12]
 8010e54:	4628      	mov	r0, r5
 8010e56:	4798      	blx	r3

    *txPower = txPowerLimited;
 8010e58:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 8010e5a:	2001      	movs	r0, #1
 8010e5c:	b00d      	add	sp, #52	; 0x34
 8010e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8010e62:	4b15      	ldr	r3, [pc, #84]	; (8010eb8 <RegionEU868TxConfig+0x12c>)
 8010e64:	69dd      	ldr	r5, [r3, #28]
 8010e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010e6a:	fb03 f30a 	mul.w	r3, r3, sl
 8010e6e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8010e72:	9208      	str	r2, [sp, #32]
 8010e74:	f04f 0b00 	mov.w	fp, #0
 8010e78:	f8cd b01c 	str.w	fp, [sp, #28]
 8010e7c:	f8cd b018 	str.w	fp, [sp, #24]
 8010e80:	f8cd b014 	str.w	fp, [sp, #20]
 8010e84:	2201      	movs	r2, #1
 8010e86:	9204      	str	r2, [sp, #16]
 8010e88:	f8cd b00c 	str.w	fp, [sp, #12]
 8010e8c:	2205      	movs	r2, #5
 8010e8e:	9202      	str	r2, [sp, #8]
 8010e90:	f8cd b004 	str.w	fp, [sp, #4]
 8010e94:	9300      	str	r3, [sp, #0]
 8010e96:	464b      	mov	r3, r9
 8010e98:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8010e9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010e9e:	4658      	mov	r0, fp
 8010ea0:	47a8      	blx	r5
        modem = MODEM_FSK;
 8010ea2:	465d      	mov	r5, fp
 8010ea4:	e7c1      	b.n	8010e2a <RegionEU868TxConfig+0x9e>
 8010ea6:	bf00      	nop
 8010ea8:	08017df4 	.word	0x08017df4
 8010eac:	20001450 	.word	0x20001450
 8010eb0:	20001454 	.word	0x20001454
 8010eb4:	08017dd4 	.word	0x08017dd4
 8010eb8:	08018400 	.word	0x08018400

08010ebc <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8010ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ec0:	b08f      	sub	sp, #60	; 0x3c
 8010ec2:	4607      	mov	r7, r0
 8010ec4:	468b      	mov	fp, r1
 8010ec6:	4692      	mov	sl, r2
 8010ec8:	4699      	mov	r9, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8010eca:	2500      	movs	r5, #0
 8010ecc:	950c      	str	r5, [sp, #48]	; 0x30
 8010ece:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 8010ed2:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 8010ed6:	f04f 0807 	mov.w	r8, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8010eda:	e02d      	b.n	8010f38 <RegionEU868LinkAdrReq+0x7c>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8010edc:	2400      	movs	r4, #0
        status = 0x07;
 8010ede:	f04f 0807 	mov.w	r8, #7
 8010ee2:	e00f      	b.n	8010f04 <RegionEU868LinkAdrReq+0x48>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8010ee4:	4a56      	ldr	r2, [pc, #344]	; (8011040 <RegionEU868LinkAdrReq+0x184>)
 8010ee6:	6812      	ldr	r2, [r2, #0]
 8010ee8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8010eec:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8010ef0:	b132      	cbz	r2, 8010f00 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 8010ef2:	2201      	movs	r2, #1
 8010ef4:	40a2      	lsls	r2, r4
 8010ef6:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8010efa:	430a      	orrs	r2, r1
 8010efc:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8010f00:	3401      	adds	r4, #1
 8010f02:	b2e4      	uxtb	r4, r4
 8010f04:	2c0f      	cmp	r4, #15
 8010f06:	d817      	bhi.n	8010f38 <RegionEU868LinkAdrReq+0x7c>
                if( linkAdrParams.ChMaskCtrl == 6 )
 8010f08:	2b06      	cmp	r3, #6
 8010f0a:	d0eb      	beq.n	8010ee4 <RegionEU868LinkAdrReq+0x28>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8010f0c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8010f10:	4126      	asrs	r6, r4
 8010f12:	f016 0f01 	tst.w	r6, #1
 8010f16:	d0f3      	beq.n	8010f00 <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8010f18:	4a49      	ldr	r2, [pc, #292]	; (8011040 <RegionEU868LinkAdrReq+0x184>)
 8010f1a:	6812      	ldr	r2, [r2, #0]
 8010f1c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8010f20:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8010f24:	2a00      	cmp	r2, #0
 8010f26:	d1eb      	bne.n	8010f00 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8010f28:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
 8010f2c:	e7e8      	b.n	8010f00 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 8010f2e:	f04f 0806 	mov.w	r8, #6
 8010f32:	e001      	b.n	8010f38 <RegionEU868LinkAdrReq+0x7c>
            status &= 0xFE; // Channel mask KO
 8010f34:	f04f 0806 	mov.w	r8, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8010f38:	7a3b      	ldrb	r3, [r7, #8]
 8010f3a:	42ab      	cmp	r3, r5
 8010f3c:	d919      	bls.n	8010f72 <RegionEU868LinkAdrReq+0xb6>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	a90c      	add	r1, sp, #48	; 0x30
 8010f42:	4428      	add	r0, r5
 8010f44:	f7fe fc74 	bl	800f830 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8010f48:	b198      	cbz	r0, 8010f72 <RegionEU868LinkAdrReq+0xb6>
        bytesProcessed += nextIndex;
 8010f4a:	4405      	add	r5, r0
 8010f4c:	b2ed      	uxtb	r5, r5
        chMask = linkAdrParams.ChMask;
 8010f4e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8010f52:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8010f56:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8010f5a:	b90b      	cbnz	r3, 8010f60 <RegionEU868LinkAdrReq+0xa4>
 8010f5c:	2a00      	cmp	r2, #0
 8010f5e:	d0e6      	beq.n	8010f2e <RegionEU868LinkAdrReq+0x72>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8010f60:	1e5a      	subs	r2, r3, #1
 8010f62:	b2d2      	uxtb	r2, r2
 8010f64:	2a04      	cmp	r2, #4
 8010f66:	d9e5      	bls.n	8010f34 <RegionEU868LinkAdrReq+0x78>
 8010f68:	2b06      	cmp	r3, #6
 8010f6a:	d9b7      	bls.n	8010edc <RegionEU868LinkAdrReq+0x20>
            status &= 0xFE; // Channel mask KO
 8010f6c:	f04f 0806 	mov.w	r8, #6
 8010f70:	e7e2      	b.n	8010f38 <RegionEU868LinkAdrReq+0x7c>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8010f72:	2302      	movs	r3, #2
 8010f74:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8010f78:	7a7b      	ldrb	r3, [r7, #9]
 8010f7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8010f7e:	a80a      	add	r0, sp, #40	; 0x28
 8010f80:	f7ff fc98 	bl	80108b4 <RegionEU868GetPhyParam>

    linkAdrVerifyParams.Status = status;
 8010f84:	f88d 8008 	strb.w	r8, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8010f88:	7abb      	ldrb	r3, [r7, #10]
 8010f8a:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8010f8e:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8010f92:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8010f96:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 8010f9a:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8010f9e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8010fa2:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8010fa6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010faa:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8010fae:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8010fb2:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8010fb6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010fba:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8010fbe:	2310      	movs	r3, #16
 8010fc0:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8010fc4:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8010fc8:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8010fca:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8010fce:	2307      	movs	r3, #7
 8010fd0:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8010fd4:	4a1a      	ldr	r2, [pc, #104]	; (8011040 <RegionEU868LinkAdrReq+0x184>)
 8010fd6:	6812      	ldr	r2, [r2, #0]
 8010fd8:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8010fda:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8010fe4:	683b      	ldr	r3, [r7, #0]
 8010fe6:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8010fe8:	ab0c      	add	r3, sp, #48	; 0x30
 8010fea:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8010fee:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 8010ff2:	a801      	add	r0, sp, #4
 8010ff4:	f7fe fc38 	bl	800f868 <RegionCommonLinkAdrReqVerifyParams>
 8010ff8:	4604      	mov	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8010ffa:	2807      	cmp	r0, #7
 8010ffc:	d011      	beq.n	8011022 <RegionEU868LinkAdrReq+0x166>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8010ffe:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8011002:	f88b 3000 	strb.w	r3, [fp]
    *txPowOut = linkAdrParams.TxPower;
 8011006:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 801100a:	f88a 3000 	strb.w	r3, [sl]
    *nbRepOut = linkAdrParams.NbRep;
 801100e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8011012:	f889 3000 	strb.w	r3, [r9]
    *nbBytesParsed = bytesProcessed;
 8011016:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011018:	701d      	strb	r5, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 801101a:	4620      	mov	r0, r4
 801101c:	b00f      	add	sp, #60	; 0x3c
 801101e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8011022:	4e07      	ldr	r6, [pc, #28]	; (8011040 <RegionEU868LinkAdrReq+0x184>)
 8011024:	6830      	ldr	r0, [r6, #0]
 8011026:	220c      	movs	r2, #12
 8011028:	2100      	movs	r1, #0
 801102a:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 801102e:	f003 fada 	bl	80145e6 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8011032:	6833      	ldr	r3, [r6, #0]
 8011034:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8011038:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
 801103c:	e7df      	b.n	8010ffe <RegionEU868LinkAdrReq+0x142>
 801103e:	bf00      	nop
 8011040:	20001454 	.word	0x20001454

08011044 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8011044:	b530      	push	{r4, r5, lr}
 8011046:	b083      	sub	sp, #12
 8011048:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801104a:	2300      	movs	r3, #0
 801104c:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8011050:	f10d 0107 	add.w	r1, sp, #7
 8011054:	6840      	ldr	r0, [r0, #4]
 8011056:	f7ff fba7 	bl	80107a8 <VerifyRfFreq>
 801105a:	b1a8      	cbz	r0, 8011088 <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 801105c:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 801105e:	2207      	movs	r2, #7
 8011060:	2100      	movs	r1, #0
 8011062:	f994 0000 	ldrsb.w	r0, [r4]
 8011066:	f7fe fac0 	bl	800f5ea <RegionCommonValueInRange>
 801106a:	b908      	cbnz	r0, 8011070 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 801106c:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8011070:	2205      	movs	r2, #5
 8011072:	2100      	movs	r1, #0
 8011074:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8011078:	f7fe fab7 	bl	800f5ea <RegionCommonValueInRange>
 801107c:	b908      	cbnz	r0, 8011082 <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801107e:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 8011082:	4628      	mov	r0, r5
 8011084:	b003      	add	sp, #12
 8011086:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 8011088:	2506      	movs	r5, #6
 801108a:	e7e8      	b.n	801105e <RegionEU868RxParamSetupReq+0x1a>

0801108c <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 801108c:	f04f 30ff 	mov.w	r0, #4294967295
 8011090:	4770      	bx	lr
	...

08011094 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8011094:	b510      	push	{r4, lr}
 8011096:	b082      	sub	sp, #8
 8011098:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801109a:	2300      	movs	r3, #0
 801109c:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80110a0:	f10d 0107 	add.w	r1, sp, #7
 80110a4:	6840      	ldr	r0, [r0, #4]
 80110a6:	f7ff fb7f 	bl	80107a8 <VerifyRfFreq>
 80110aa:	b178      	cbz	r0, 80110cc <RegionEU868DlChannelReq+0x38>
    uint8_t status = 0x03;
 80110ac:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80110ae:	4b0c      	ldr	r3, [pc, #48]	; (80110e0 <RegionEU868DlChannelReq+0x4c>)
 80110b0:	681a      	ldr	r2, [r3, #0]
 80110b2:	7823      	ldrb	r3, [r4, #0]
 80110b4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80110b8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80110bc:	b909      	cbnz	r1, 80110c2 <RegionEU868DlChannelReq+0x2e>
    {
        status &= 0xFD;
 80110be:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80110c2:	2803      	cmp	r0, #3
 80110c4:	d004      	beq.n	80110d0 <RegionEU868DlChannelReq+0x3c>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 80110c6:	b240      	sxtb	r0, r0
 80110c8:	b002      	add	sp, #8
 80110ca:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 80110cc:	2002      	movs	r0, #2
 80110ce:	e7ee      	b.n	80110ae <RegionEU868DlChannelReq+0x1a>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80110d0:	6861      	ldr	r1, [r4, #4]
 80110d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80110d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80110da:	6059      	str	r1, [r3, #4]
 80110dc:	e7f3      	b.n	80110c6 <RegionEU868DlChannelReq+0x32>
 80110de:	bf00      	nop
 80110e0:	20001454 	.word	0x20001454

080110e4 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 80110e4:	4770      	bx	lr
	...

080110e8 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80110e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110ea:	b097      	sub	sp, #92	; 0x5c
 80110ec:	4604      	mov	r4, r0
 80110ee:	460f      	mov	r7, r1
 80110f0:	4616      	mov	r6, r2
 80110f2:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80110f4:	2100      	movs	r1, #0
 80110f6:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 80110fa:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80110fe:	9111      	str	r1, [sp, #68]	; 0x44
 8011100:	9112      	str	r1, [sp, #72]	; 0x48
 8011102:	9113      	str	r1, [sp, #76]	; 0x4c
 8011104:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8011106:	2307      	movs	r3, #7
 8011108:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 801110c:	4b32      	ldr	r3, [pc, #200]	; (80111d8 <RegionEU868NextChannel+0xf0>)
 801110e:	6818      	ldr	r0, [r3, #0]
 8011110:	2201      	movs	r2, #1
 8011112:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8011116:	f7fe fac4 	bl	800f6a2 <RegionCommonCountChannels>
 801111a:	b938      	cbnz	r0, 801112c <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801111c:	4b2e      	ldr	r3, [pc, #184]	; (80111d8 <RegionEU868NextChannel+0xf0>)
 801111e:	681a      	ldr	r2, [r3, #0]
 8011120:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 8011124:	f043 0307 	orr.w	r3, r3, #7
 8011128:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801112c:	7a63      	ldrb	r3, [r4, #9]
 801112e:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8011132:	7a23      	ldrb	r3, [r4, #8]
 8011134:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8011138:	4b27      	ldr	r3, [pc, #156]	; (80111d8 <RegionEU868NextChannel+0xf0>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	f503 6290 	add.w	r2, r3, #1152	; 0x480
 8011140:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8011142:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8011144:	4b25      	ldr	r3, [pc, #148]	; (80111dc <RegionEU868NextChannel+0xf4>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 801114a:	2310      	movs	r3, #16
 801114c:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 8011150:	f10d 030a 	add.w	r3, sp, #10
 8011154:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8011156:	6823      	ldr	r3, [r4, #0]
 8011158:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801115a:	6863      	ldr	r3, [r4, #4]
 801115c:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801115e:	7aa3      	ldrb	r3, [r4, #10]
 8011160:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8011164:	2306      	movs	r3, #6
 8011166:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801116a:	ab0c      	add	r3, sp, #48	; 0x30
 801116c:	6921      	ldr	r1, [r4, #16]
 801116e:	68e0      	ldr	r0, [r4, #12]
 8011170:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8011174:	7d23      	ldrb	r3, [r4, #20]
 8011176:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801117a:	8ae1      	ldrh	r1, [r4, #22]
 801117c:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8011180:	f7ff fb66 	bl	8010850 <GetTimeOnAir>
 8011184:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8011186:	ab03      	add	r3, sp, #12
 8011188:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801118a:	9601      	str	r6, [sp, #4]
 801118c:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 8011190:	9300      	str	r3, [sp, #0]
 8011192:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 8011196:	aa11      	add	r2, sp, #68	; 0x44
 8011198:	4629      	mov	r1, r5
 801119a:	a809      	add	r0, sp, #36	; 0x24
 801119c:	f7fe fc74 	bl	800fa88 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80111a0:	4604      	mov	r4, r0
 80111a2:	b120      	cbz	r0, 80111ae <RegionEU868NextChannel+0xc6>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80111a4:	280c      	cmp	r0, #12
 80111a6:	d00d      	beq.n	80111c4 <RegionEU868NextChannel+0xdc>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80111a8:	4620      	mov	r0, r4
 80111aa:	b017      	add	sp, #92	; 0x5c
 80111ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80111ae:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 80111b2:	3901      	subs	r1, #1
 80111b4:	f003 f9f4 	bl	80145a0 <randr>
 80111b8:	ab16      	add	r3, sp, #88	; 0x58
 80111ba:	4418      	add	r0, r3
 80111bc:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 80111c0:	703b      	strb	r3, [r7, #0]
 80111c2:	e7f1      	b.n	80111a8 <RegionEU868NextChannel+0xc0>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80111c4:	4b04      	ldr	r3, [pc, #16]	; (80111d8 <RegionEU868NextChannel+0xf0>)
 80111c6:	681a      	ldr	r2, [r3, #0]
 80111c8:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 80111cc:	f043 0307 	orr.w	r3, r3, #7
 80111d0:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
 80111d4:	e7e8      	b.n	80111a8 <RegionEU868NextChannel+0xc0>
 80111d6:	bf00      	nop
 80111d8:	20001454 	.word	0x20001454
 80111dc:	20001450 	.word	0x20001450

080111e0 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80111e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111e2:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80111e4:	2300      	movs	r3, #0
 80111e6:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 80111ea:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80111ec:	2d02      	cmp	r5, #2
 80111ee:	d94f      	bls.n	8011290 <RegionEU868ChannelAdd+0xb0>
 80111f0:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80111f2:	2d0f      	cmp	r5, #15
 80111f4:	d84e      	bhi.n	8011294 <RegionEU868ChannelAdd+0xb4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80111f6:	6803      	ldr	r3, [r0, #0]
 80111f8:	7a18      	ldrb	r0, [r3, #8]
 80111fa:	f340 0003 	sbfx	r0, r0, #0, #4
 80111fe:	2207      	movs	r2, #7
 8011200:	2100      	movs	r1, #0
 8011202:	b240      	sxtb	r0, r0
 8011204:	f7fe f9f1 	bl	800f5ea <RegionCommonValueInRange>
 8011208:	2800      	cmp	r0, #0
 801120a:	d03d      	beq.n	8011288 <RegionEU868ChannelAdd+0xa8>
    bool drInvalid = false;
 801120c:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801120e:	6823      	ldr	r3, [r4, #0]
 8011210:	7a18      	ldrb	r0, [r3, #8]
 8011212:	f340 1003 	sbfx	r0, r0, #4, #4
 8011216:	2207      	movs	r2, #7
 8011218:	2100      	movs	r1, #0
 801121a:	b240      	sxtb	r0, r0
 801121c:	f7fe f9e5 	bl	800f5ea <RegionCommonValueInRange>
 8011220:	b900      	cbnz	r0, 8011224 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 8011222:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8011224:	6820      	ldr	r0, [r4, #0]
 8011226:	7a03      	ldrb	r3, [r0, #8]
 8011228:	f343 0203 	sbfx	r2, r3, #0, #4
 801122c:	b252      	sxtb	r2, r2
 801122e:	f343 1303 	sbfx	r3, r3, #4, #4
 8011232:	b25b      	sxtb	r3, r3
 8011234:	429a      	cmp	r2, r3
 8011236:	dd00      	ble.n	801123a <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 8011238:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801123a:	f10d 0107 	add.w	r1, sp, #7
 801123e:	6800      	ldr	r0, [r0, #0]
 8011240:	f7ff fab2 	bl	80107a8 <VerifyRfFreq>
 8011244:	b310      	cbz	r0, 801128c <RegionEU868ChannelAdd+0xac>
    bool freqInvalid = false;
 8011246:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8011248:	b106      	cbz	r6, 801124c <RegionEU868ChannelAdd+0x6c>
 801124a:	bb33      	cbnz	r3, 801129a <RegionEU868ChannelAdd+0xba>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 801124c:	bb3e      	cbnz	r6, 801129e <RegionEU868ChannelAdd+0xbe>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 801124e:	bb43      	cbnz	r3, 80112a2 <RegionEU868ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8011250:	4f15      	ldr	r7, [pc, #84]	; (80112a8 <RegionEU868ChannelAdd+0xc8>)
 8011252:	683b      	ldr	r3, [r7, #0]
 8011254:	006e      	lsls	r6, r5, #1
 8011256:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 801125a:	220c      	movs	r2, #12
 801125c:	6821      	ldr	r1, [r4, #0]
 801125e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011262:	f003 f9aa 	bl	80145ba <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8011266:	683a      	ldr	r2, [r7, #0]
 8011268:	442e      	add	r6, r5
 801126a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801126e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011272:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8011274:	2301      	movs	r3, #1
 8011276:	fa03 f505 	lsl.w	r5, r3, r5
 801127a:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 801127e:	431d      	orrs	r5, r3
 8011280:	f8a2 5480 	strh.w	r5, [r2, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 8011284:	2000      	movs	r0, #0
 8011286:	e006      	b.n	8011296 <RegionEU868ChannelAdd+0xb6>
        drInvalid = true;
 8011288:	2601      	movs	r6, #1
 801128a:	e7c0      	b.n	801120e <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 801128c:	2301      	movs	r3, #1
 801128e:	e7db      	b.n	8011248 <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8011290:	2006      	movs	r0, #6
 8011292:	e000      	b.n	8011296 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011294:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8011296:	b003      	add	sp, #12
 8011298:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801129a:	2006      	movs	r0, #6
 801129c:	e7fb      	b.n	8011296 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 801129e:	2005      	movs	r0, #5
 80112a0:	e7f9      	b.n	8011296 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80112a2:	2004      	movs	r0, #4
 80112a4:	e7f7      	b.n	8011296 <RegionEU868ChannelAdd+0xb6>
 80112a6:	bf00      	nop
 80112a8:	20001454 	.word	0x20001454

080112ac <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 80112ac:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80112ae:	2902      	cmp	r1, #2
 80112b0:	d801      	bhi.n	80112b6 <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 80112b2:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 80112b4:	4770      	bx	lr
{
 80112b6:	b510      	push	{r4, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80112b8:	4b08      	ldr	r3, [pc, #32]	; (80112dc <RegionEU868ChannelsRemove+0x30>)
 80112ba:	6818      	ldr	r0, [r3, #0]
 80112bc:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80112c0:	009c      	lsls	r4, r3, #2
 80112c2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80112c6:	2200      	movs	r2, #0
 80112c8:	5102      	str	r2, [r0, r4]
 80112ca:	605a      	str	r2, [r3, #4]
 80112cc:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 80112ce:	2210      	movs	r2, #16
 80112d0:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 80112d4:	f7fe f9cb 	bl	800f66e <RegionCommonChanDisable>
}
 80112d8:	bd10      	pop	{r4, pc}
 80112da:	bf00      	nop
 80112dc:	20001454 	.word	0x20001454

080112e0 <RegionEU868ApplyCFList>:
{
 80112e0:	b570      	push	{r4, r5, r6, lr}
 80112e2:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80112e4:	2350      	movs	r3, #80	; 0x50
 80112e6:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 80112ea:	7903      	ldrb	r3, [r0, #4]
 80112ec:	2b10      	cmp	r3, #16
 80112ee:	d135      	bne.n	801135c <RegionEU868ApplyCFList+0x7c>
 80112f0:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 80112f2:	6803      	ldr	r3, [r0, #0]
 80112f4:	7bdd      	ldrb	r5, [r3, #15]
 80112f6:	2d00      	cmp	r5, #0
 80112f8:	d130      	bne.n	801135c <RegionEU868ApplyCFList+0x7c>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80112fa:	2403      	movs	r4, #3
 80112fc:	e01a      	b.n	8011334 <RegionEU868ApplyCFList+0x54>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80112fe:	6832      	ldr	r2, [r6, #0]
 8011300:	5d53      	ldrb	r3, [r2, r5]
 8011302:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8011304:	442a      	add	r2, r5
 8011306:	7851      	ldrb	r1, [r2, #1]
 8011308:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801130c:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801130e:	7892      	ldrb	r2, [r2, #2]
 8011310:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 8011314:	2264      	movs	r2, #100	; 0x64
 8011316:	fb02 f303 	mul.w	r3, r2, r3
 801131a:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 801131c:	2300      	movs	r3, #0
 801131e:	9304      	str	r3, [sp, #16]
 8011320:	e011      	b.n	8011346 <RegionEU868ApplyCFList+0x66>
            channelRemove.ChannelId = chanIdx;
 8011322:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 8011326:	4668      	mov	r0, sp
 8011328:	f7ff ffc0 	bl	80112ac <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801132c:	3503      	adds	r5, #3
 801132e:	b2ed      	uxtb	r5, r5
 8011330:	3401      	adds	r4, #1
 8011332:	b2e4      	uxtb	r4, r4
 8011334:	2c0f      	cmp	r4, #15
 8011336:	d811      	bhi.n	801135c <RegionEU868ApplyCFList+0x7c>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8011338:	2c07      	cmp	r4, #7
 801133a:	d9e0      	bls.n	80112fe <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 801133c:	2300      	movs	r3, #0
 801133e:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 8011340:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 8011344:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 8011346:	9b03      	ldr	r3, [sp, #12]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d0ea      	beq.n	8011322 <RegionEU868ApplyCFList+0x42>
            channelAdd.NewChannel = &newChannel;
 801134c:	ab03      	add	r3, sp, #12
 801134e:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 8011350:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 8011354:	a801      	add	r0, sp, #4
 8011356:	f7ff ff43 	bl	80111e0 <RegionEU868ChannelAdd>
 801135a:	e7e7      	b.n	801132c <RegionEU868ApplyCFList+0x4c>
}
 801135c:	b006      	add	sp, #24
 801135e:	bd70      	pop	{r4, r5, r6, pc}

08011360 <RegionEU868NewChannelReq>:
{
 8011360:	b500      	push	{lr}
 8011362:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 8011364:	6803      	ldr	r3, [r0, #0]
 8011366:	681a      	ldr	r2, [r3, #0]
 8011368:	b952      	cbnz	r2, 8011380 <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801136a:	7903      	ldrb	r3, [r0, #4]
 801136c:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8011370:	a801      	add	r0, sp, #4
 8011372:	f7ff ff9b 	bl	80112ac <RegionEU868ChannelsRemove>
 8011376:	b1d0      	cbz	r0, 80113ae <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 8011378:	2003      	movs	r0, #3
}
 801137a:	b005      	add	sp, #20
 801137c:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8011380:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8011382:	7903      	ldrb	r3, [r0, #4]
 8011384:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8011388:	a802      	add	r0, sp, #8
 801138a:	f7ff ff29 	bl	80111e0 <RegionEU868ChannelAdd>
 801138e:	2806      	cmp	r0, #6
 8011390:	d80b      	bhi.n	80113aa <RegionEU868NewChannelReq+0x4a>
 8011392:	e8df f000 	tbb	[pc, r0]
 8011396:	0a04      	.short	0x0a04
 8011398:	060e0a0a 	.word	0x060e0a0a
 801139c:	08          	.byte	0x08
 801139d:	00          	.byte	0x00
 801139e:	2003      	movs	r0, #3
 80113a0:	e7eb      	b.n	801137a <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 80113a2:	2001      	movs	r0, #1
                break;
 80113a4:	e7e9      	b.n	801137a <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 80113a6:	2000      	movs	r0, #0
                break;
 80113a8:	e7e7      	b.n	801137a <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 80113aa:	2000      	movs	r0, #0
                break;
 80113ac:	e7e5      	b.n	801137a <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 80113ae:	2000      	movs	r0, #0
 80113b0:	e7e3      	b.n	801137a <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 80113b2:	2002      	movs	r0, #2
 80113b4:	e7e1      	b.n	801137a <RegionEU868NewChannelReq+0x1a>
	...

080113b8 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 80113b8:	b538      	push	{r3, r4, r5, lr}
 80113ba:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 80113bc:	4b12      	ldr	r3, [pc, #72]	; (8011408 <RegionEU868SetContinuousWave+0x50>)
 80113be:	6819      	ldr	r1, [r3, #0]
 80113c0:	4d12      	ldr	r5, [pc, #72]	; (801140c <RegionEU868SetContinuousWave+0x54>)
 80113c2:	682b      	ldr	r3, [r5, #0]
 80113c4:	7802      	ldrb	r2, [r0, #0]
 80113c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80113ca:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80113ce:	7a53      	ldrb	r3, [r2, #9]
 80113d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80113d4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80113d8:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80113dc:	f990 0002 	ldrsb.w	r0, [r0, #2]
 80113e0:	f7fe fbb9 	bl	800fb56 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 80113e4:	682a      	ldr	r2, [r5, #0]
 80113e6:	7823      	ldrb	r3, [r4, #0]
 80113e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80113ec:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 80113f0:	68a2      	ldr	r2, [r4, #8]
 80113f2:	6861      	ldr	r1, [r4, #4]
 80113f4:	f7fe facc 	bl	800f990 <RegionCommonComputeTxPower>
 80113f8:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80113fa:	4b05      	ldr	r3, [pc, #20]	; (8011410 <RegionEU868SetContinuousWave+0x58>)
 80113fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80113fe:	89a2      	ldrh	r2, [r4, #12]
 8011400:	4628      	mov	r0, r5
 8011402:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8011404:	bd38      	pop	{r3, r4, r5, pc}
 8011406:	bf00      	nop
 8011408:	20001450 	.word	0x20001450
 801140c:	20001454 	.word	0x20001454
 8011410:	08018400 	.word	0x08018400

08011414 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8011414:	1a88      	subs	r0, r1, r2
 8011416:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 8011418:	2800      	cmp	r0, #0
 801141a:	db01      	blt.n	8011420 <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 801141c:	b2c0      	uxtb	r0, r0
 801141e:	4770      	bx	lr
        datarate = DR_0;
 8011420:	2000      	movs	r0, #0
 8011422:	e7fb      	b.n	801141c <RegionEU868ApplyDrOffset+0x8>

08011424 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;


static bool VerifyRfFreq( uint32_t freq )
{
 8011424:	b510      	push	{r4, lr}
 8011426:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8011428:	4b05      	ldr	r3, [pc, #20]	; (8011440 <VerifyRfFreq+0x1c>)
 801142a:	6a1b      	ldr	r3, [r3, #32]
 801142c:	4798      	blx	r3
 801142e:	b120      	cbz	r0, 801143a <VerifyRfFreq+0x16>
    {
        return false;
    }

    if( ( freq < 865000000 ) || ( freq > 867000000 ) )
 8011430:	4b04      	ldr	r3, [pc, #16]	; (8011444 <VerifyRfFreq+0x20>)
 8011432:	4423      	add	r3, r4
 8011434:	4a04      	ldr	r2, [pc, #16]	; (8011448 <VerifyRfFreq+0x24>)
 8011436:	4293      	cmp	r3, r2
 8011438:	d800      	bhi.n	801143c <VerifyRfFreq+0x18>
    {
        return false;
    }
    return true;
}
 801143a:	bd10      	pop	{r4, pc}
        return false;
 801143c:	2000      	movs	r0, #0
 801143e:	e7fc      	b.n	801143a <VerifyRfFreq+0x16>
 8011440:	08018400 	.word	0x08018400
 8011444:	cc7125c0 	.word	0xcc7125c0
 8011448:	001e8480 	.word	0x001e8480

0801144c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801144c:	b570      	push	{r4, r5, r6, lr}
 801144e:	b084      	sub	sp, #16
 8011450:	4605      	mov	r5, r0
 8011452:	460c      	mov	r4, r1
    int8_t phyDr = DataratesIN865[datarate];
 8011454:	4b13      	ldr	r3, [pc, #76]	; (80114a4 <GetTimeOnAir+0x58>)
 8011456:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsIN865 );
 8011458:	4913      	ldr	r1, [pc, #76]	; (80114a8 <GetTimeOnAir+0x5c>)
 801145a:	f7fe fb81 	bl	800fb60 <RegionCommonGetBandwidth>
 801145e:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 8011460:	2d07      	cmp	r5, #7
 8011462:	d00e      	beq.n	8011482 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8011464:	4b11      	ldr	r3, [pc, #68]	; (80114ac <GetTimeOnAir+0x60>)
 8011466:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8011468:	2001      	movs	r0, #1
 801146a:	9003      	str	r0, [sp, #12]
 801146c:	b2e4      	uxtb	r4, r4
 801146e:	9402      	str	r4, [sp, #8]
 8011470:	2300      	movs	r3, #0
 8011472:	9301      	str	r3, [sp, #4]
 8011474:	2308      	movs	r3, #8
 8011476:	9300      	str	r3, [sp, #0]
 8011478:	4603      	mov	r3, r0
 801147a:	4632      	mov	r2, r6
 801147c:	47a8      	blx	r5
    }
    return timeOnAir;
}
 801147e:	b004      	add	sp, #16
 8011480:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8011482:	4b0a      	ldr	r3, [pc, #40]	; (80114ac <GetTimeOnAir+0x60>)
 8011484:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8011486:	2301      	movs	r3, #1
 8011488:	9303      	str	r3, [sp, #12]
 801148a:	b2e4      	uxtb	r4, r4
 801148c:	9402      	str	r4, [sp, #8]
 801148e:	2000      	movs	r0, #0
 8011490:	9001      	str	r0, [sp, #4]
 8011492:	2305      	movs	r3, #5
 8011494:	9300      	str	r3, [sp, #0]
 8011496:	4603      	mov	r3, r0
 8011498:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801149c:	fb02 f206 	mul.w	r2, r2, r6
 80114a0:	47a8      	blx	r5
 80114a2:	e7ec      	b.n	801147e <GetTimeOnAir+0x32>
 80114a4:	08017e2c 	.word	0x08017e2c
 80114a8:	08017e0c 	.word	0x08017e0c
 80114ac:	08018400 	.word	0x08018400

080114b0 <RegionIN865GetPhyParam>:
#endif /* REGION_IN865 */

PhyParam_t RegionIN865GetPhyParam( GetPhyParams_t* getPhy )
{
 80114b0:	b500      	push	{lr}
 80114b2:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 80114b4:	2300      	movs	r3, #0
 80114b6:	9304      	str	r3, [sp, #16]

#if defined( REGION_IN865 )
    switch( getPhy->Attribute )
 80114b8:	7803      	ldrb	r3, [r0, #0]
 80114ba:	3b0b      	subs	r3, #11
 80114bc:	2b2e      	cmp	r3, #46	; 0x2e
 80114be:	d830      	bhi.n	8011522 <RegionIN865GetPhyParam+0x72>
 80114c0:	e8df f003 	tbb	[pc, r3]
 80114c4:	3f393633 	.word	0x3f393633
 80114c8:	4d49452f 	.word	0x4d49452f
 80114cc:	5d595551 	.word	0x5d595551
 80114d0:	6c69662f 	.word	0x6c69662f
 80114d4:	2f7b7872 	.word	0x2f7b7872
 80114d8:	18827f2f 	.word	0x18827f2f
 80114dc:	2f2f2f2f 	.word	0x2f2f2f2f
 80114e0:	2f2f2f2f 	.word	0x2f2f2f2f
 80114e4:	2f2f2f2f 	.word	0x2f2f2f2f
 80114e8:	9288852f 	.word	0x9288852f
 80114ec:	98952f2f 	.word	0x98952f2f
 80114f0:	9b2f      	.short	0x9b2f
 80114f2:	a1          	.byte	0xa1
 80114f3:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80114f4:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80114f8:	f88d 3004 	strb.w	r3, [sp, #4]
 80114fc:	2307      	movs	r3, #7
 80114fe:	f88d 3005 	strb.w	r3, [sp, #5]
 8011502:	2300      	movs	r3, #0
 8011504:	f88d 3006 	strb.w	r3, [sp, #6]
 8011508:	2310      	movs	r3, #16
 801150a:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )IN865_TX_MAX_DATARATE,
                .MinDr = ( int8_t )IN865_TX_MIN_DATARATE,
                .NbChannels = IN865_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801150e:	4b41      	ldr	r3, [pc, #260]	; (8011614 <RegionIN865GetPhyParam+0x164>)
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8011516:	9202      	str	r2, [sp, #8]
 8011518:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801151a:	a801      	add	r0, sp, #4
 801151c:	f7fe fafc 	bl	800fb18 <RegionCommonGetNextLowerTxDr>
 8011520:	9004      	str	r0, [sp, #16]
        }
    }

#endif /* REGION_IN865 */
    return phyParam;
}
 8011522:	9804      	ldr	r0, [sp, #16]
 8011524:	b007      	add	sp, #28
 8011526:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801152a:	2340      	movs	r3, #64	; 0x40
 801152c:	9304      	str	r3, [sp, #16]
            break;
 801152e:	e7f8      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8011530:	2320      	movs	r3, #32
 8011532:	9304      	str	r3, [sp, #16]
            break;
 8011534:	e7f5      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateIN865[getPhy->Datarate];
 8011536:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801153a:	4a37      	ldr	r2, [pc, #220]	; (8011618 <RegionIN865GetPhyParam+0x168>)
 801153c:	5cd3      	ldrb	r3, [r2, r3]
 801153e:	9304      	str	r3, [sp, #16]
            break;
 8011540:	e7ef      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterIN865[getPhy->Datarate];
 8011542:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011546:	4a35      	ldr	r2, [pc, #212]	; (801161c <RegionIN865GetPhyParam+0x16c>)
 8011548:	5cd3      	ldrb	r3, [r2, r3]
 801154a:	9304      	str	r3, [sp, #16]
            break;
 801154c:	e7e9      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_MAX_RX_WINDOW;
 801154e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011552:	9304      	str	r3, [sp, #16]
            break;
 8011554:	e7e5      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8011556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801155a:	9304      	str	r3, [sp, #16]
            break;
 801155c:	e7e1      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801155e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8011562:	9304      	str	r3, [sp, #16]
            break;
 8011564:	e7dd      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8011566:	f241 3388 	movw	r3, #5000	; 0x1388
 801156a:	9304      	str	r3, [sp, #16]
            break;
 801156c:	e7d9      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801156e:	f241 7370 	movw	r3, #6000	; 0x1770
 8011572:	9304      	str	r3, [sp, #16]
            break;
 8011574:	e7d5      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8011576:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801157a:	9304      	str	r3, [sp, #16]
            break;
 801157c:	e7d1      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 801157e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011582:	4827      	ldr	r0, [pc, #156]	; (8011620 <RegionIN865GetPhyParam+0x170>)
 8011584:	f003 f80c 	bl	80145a0 <randr>
 8011588:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 801158c:	9004      	str	r0, [sp, #16]
            break;
 801158e:	e7c8      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_RX_WND_2_FREQ;
 8011590:	4b24      	ldr	r3, [pc, #144]	; (8011624 <RegionIN865GetPhyParam+0x174>)
 8011592:	9304      	str	r3, [sp, #16]
            break;
 8011594:	e7c5      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_RX_WND_2_DR;
 8011596:	2302      	movs	r3, #2
 8011598:	9304      	str	r3, [sp, #16]
            break;
 801159a:	e7c2      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801159c:	4b1d      	ldr	r3, [pc, #116]	; (8011614 <RegionIN865GetPhyParam+0x164>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80115a4:	9304      	str	r3, [sp, #16]
            break;
 80115a6:	e7bc      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80115a8:	4b1a      	ldr	r3, [pc, #104]	; (8011614 <RegionIN865GetPhyParam+0x164>)
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 80115b0:	9304      	str	r3, [sp, #16]
            break;
 80115b2:	e7b6      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_MAX_NB_CHANNELS;
 80115b4:	2310      	movs	r3, #16
 80115b6:	9304      	str	r3, [sp, #16]
            break;
 80115b8:	e7b3      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 80115ba:	4b16      	ldr	r3, [pc, #88]	; (8011614 <RegionIN865GetPhyParam+0x164>)
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	9304      	str	r3, [sp, #16]
            break;
 80115c0:	e7af      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
            phyParam.fValue = IN865_DEFAULT_MAX_EIRP;
 80115c2:	4b19      	ldr	r3, [pc, #100]	; (8011628 <RegionIN865GetPhyParam+0x178>)
 80115c4:	9304      	str	r3, [sp, #16]
            break;
 80115c6:	e7ac      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
            phyParam.fValue = IN865_DEFAULT_ANTENNA_GAIN;
 80115c8:	4b18      	ldr	r3, [pc, #96]	; (801162c <RegionIN865GetPhyParam+0x17c>)
 80115ca:	9304      	str	r3, [sp, #16]
            break;
 80115cc:	e7a9      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_BEACON_CHANNEL_FREQ;
 80115ce:	4b15      	ldr	r3, [pc, #84]	; (8011624 <RegionIN865GetPhyParam+0x174>)
 80115d0:	9304      	str	r3, [sp, #16]
            break;
 80115d2:	e7a6      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = IN865_BEACON_SIZE;
 80115d4:	2313      	movs	r3, #19
 80115d6:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = IN865_RFU1_SIZE;
 80115da:	2301      	movs	r3, #1
 80115dc:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = IN865_RFU2_SIZE;
 80115e0:	2303      	movs	r3, #3
 80115e2:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 80115e6:	e79c      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_BEACON_CHANNEL_DR;
 80115e8:	2304      	movs	r3, #4
 80115ea:	9304      	str	r3, [sp, #16]
            break;
 80115ec:	e799      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_PING_SLOT_CHANNEL_FREQ;
 80115ee:	4b0d      	ldr	r3, [pc, #52]	; (8011624 <RegionIN865GetPhyParam+0x174>)
 80115f0:	9304      	str	r3, [sp, #16]
            break;
 80115f2:	e796      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_PING_SLOT_CHANNEL_DR;
 80115f4:	2304      	movs	r3, #4
 80115f6:	9304      	str	r3, [sp, #16]
            break;
 80115f8:	e793      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = DataratesIN865[getPhy->Datarate];
 80115fa:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80115fe:	4a0c      	ldr	r2, [pc, #48]	; (8011630 <RegionIN865GetPhyParam+0x180>)
 8011600:	5cd3      	ldrb	r3, [r2, r3]
 8011602:	9304      	str	r3, [sp, #16]
            break;
 8011604:	e78d      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsIN865 );
 8011606:	490b      	ldr	r1, [pc, #44]	; (8011634 <RegionIN865GetPhyParam+0x184>)
 8011608:	f990 0001 	ldrsb.w	r0, [r0, #1]
 801160c:	f7fe faa8 	bl	800fb60 <RegionCommonGetBandwidth>
 8011610:	9004      	str	r0, [sp, #16]
            break;
 8011612:	e786      	b.n	8011522 <RegionIN865GetPhyParam+0x72>
 8011614:	2000145c 	.word	0x2000145c
 8011618:	08017e3c 	.word	0x08017e3c
 801161c:	08017e44 	.word	0x08017e44
 8011620:	fffffc18 	.word	0xfffffc18
 8011624:	33a680f0 	.word	0x33a680f0
 8011628:	41f00000 	.word	0x41f00000
 801162c:	4009999a 	.word	0x4009999a
 8011630:	08017e2c 	.word	0x08017e2c
 8011634:	08017e0c 	.word	0x08017e0c

08011638 <RegionIN865SetBandTxDone>:

void RegionIN865SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8011638:	b530      	push	{r4, r5, lr}
 801163a:	b083      	sub	sp, #12
#if defined( REGION_IN865 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801163c:	4b0b      	ldr	r3, [pc, #44]	; (801166c <RegionIN865SetBandTxDone+0x34>)
 801163e:	681d      	ldr	r5, [r3, #0]
 8011640:	4b0b      	ldr	r3, [pc, #44]	; (8011670 <RegionIN865SetBandTxDone+0x38>)
 8011642:	681a      	ldr	r2, [r3, #0]
 8011644:	7803      	ldrb	r3, [r0, #0]
 8011646:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801164a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801164e:	7a5b      	ldrb	r3, [r3, #9]
 8011650:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8011654:	6903      	ldr	r3, [r0, #16]
 8011656:	9300      	str	r3, [sp, #0]
 8011658:	68c3      	ldr	r3, [r0, #12]
 801165a:	7842      	ldrb	r2, [r0, #1]
 801165c:	6881      	ldr	r1, [r0, #8]
 801165e:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 8011662:	f7fe f845 	bl	800f6f0 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_IN865 */
}
 8011666:	b003      	add	sp, #12
 8011668:	bd30      	pop	{r4, r5, pc}
 801166a:	bf00      	nop
 801166c:	20001458 	.word	0x20001458
 8011670:	2000145c 	.word	0x2000145c

08011674 <RegionIN865InitDefaults>:

void RegionIN865InitDefaults( InitDefaultsParams_t* params )
{
 8011674:	b530      	push	{r4, r5, lr}
 8011676:	b087      	sub	sp, #28
#if defined( REGION_IN865 )
    Band_t bands[IN865_MAX_NB_BANDS] =
 8011678:	2301      	movs	r3, #1
 801167a:	f8ad 3000 	strh.w	r3, [sp]
 801167e:	2300      	movs	r3, #0
 8011680:	f88d 3002 	strb.w	r3, [sp, #2]
 8011684:	9301      	str	r3, [sp, #4]
 8011686:	9302      	str	r3, [sp, #8]
 8011688:	9303      	str	r3, [sp, #12]
 801168a:	9304      	str	r3, [sp, #16]
 801168c:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        IN865_BAND0
    };

    switch( params->Type )
 8011690:	7a03      	ldrb	r3, [r0, #8]
 8011692:	2b01      	cmp	r3, #1
 8011694:	d032      	beq.n	80116fc <RegionIN865InitDefaults+0x88>
 8011696:	2b02      	cmp	r3, #2
 8011698:	d03e      	beq.n	8011718 <RegionIN865InitDefaults+0xa4>
 801169a:	b10b      	cbz	r3, 80116a0 <RegionIN865InitDefaults+0x2c>
        {
            break;
        }
    }
#endif /* REGION_IN865 */
}
 801169c:	b007      	add	sp, #28
 801169e:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80116a0:	6803      	ldr	r3, [r0, #0]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d0fa      	beq.n	801169c <RegionIN865InitDefaults+0x28>
 80116a6:	6842      	ldr	r2, [r0, #4]
 80116a8:	2a00      	cmp	r2, #0
 80116aa:	d0f7      	beq.n	801169c <RegionIN865InitDefaults+0x28>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80116ac:	491f      	ldr	r1, [pc, #124]	; (801172c <RegionIN865InitDefaults+0xb8>)
 80116ae:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80116b0:	4c1f      	ldr	r4, [pc, #124]	; (8011730 <RegionIN865InitDefaults+0xbc>)
 80116b2:	6022      	str	r2, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * IN865_MAX_NB_BANDS );
 80116b4:	2218      	movs	r2, #24
 80116b6:	4669      	mov	r1, sp
 80116b8:	4618      	mov	r0, r3
 80116ba:	f002 ff7e 	bl	80145ba <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) IN865_LC1;
 80116be:	6824      	ldr	r4, [r4, #0]
 80116c0:	4b1c      	ldr	r3, [pc, #112]	; (8011734 <RegionIN865InitDefaults+0xc0>)
 80116c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80116c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) IN865_LC2;
 80116ca:	f104 050c 	add.w	r5, r4, #12
 80116ce:	f103 020c 	add.w	r2, r3, #12
 80116d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80116d4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) IN865_LC3;
 80116d8:	f104 0518 	add.w	r5, r4, #24
 80116dc:	3318      	adds	r3, #24
 80116de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80116e2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80116e6:	2307      	movs	r3, #7
 80116e8:	f8a4 348c 	strh.w	r3, [r4, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80116ec:	2201      	movs	r2, #1
 80116ee:	f204 418c 	addw	r1, r4, #1164	; 0x48c
 80116f2:	f504 6090 	add.w	r0, r4, #1152	; 0x480
 80116f6:	f7fd ffea 	bl	800f6ce <RegionCommonChanMaskCopy>
            break;
 80116fa:	e7cf      	b.n	801169c <RegionIN865InitDefaults+0x28>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80116fc:	4b0c      	ldr	r3, [pc, #48]	; (8011730 <RegionIN865InitDefaults+0xbc>)
 80116fe:	6818      	ldr	r0, [r3, #0]
 8011700:	2300      	movs	r3, #0
 8011702:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8011704:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8011706:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8011708:	2201      	movs	r2, #1
 801170a:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 801170e:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8011712:	f7fd ffdc 	bl	800f6ce <RegionCommonChanMaskCopy>
            break;
 8011716:	e7c1      	b.n	801169c <RegionIN865InitDefaults+0x28>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8011718:	4b05      	ldr	r3, [pc, #20]	; (8011730 <RegionIN865InitDefaults+0xbc>)
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 8011720:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 8011724:	430a      	orrs	r2, r1
 8011726:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 801172a:	e7b7      	b.n	801169c <RegionIN865InitDefaults+0x28>
 801172c:	20001458 	.word	0x20001458
 8011730:	2000145c 	.word	0x2000145c
 8011734:	08017650 	.word	0x08017650

08011738 <RegionIN865Verify>:

bool RegionIN865Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8011738:	b508      	push	{r3, lr}
#if defined( REGION_IN865 )
    switch( phyAttribute )
 801173a:	290a      	cmp	r1, #10
 801173c:	d83b      	bhi.n	80117b6 <RegionIN865Verify+0x7e>
 801173e:	e8df f001 	tbb	[pc, r1]
 8011742:	3a06      	.short	0x3a06
 8011744:	0a3a3a3a 	.word	0x0a3a3a3a
 8011748:	303a2218 	.word	0x303a2218
 801174c:	30          	.byte	0x30
 801174d:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 801174e:	6800      	ldr	r0, [r0, #0]
 8011750:	f7ff fe68 	bl	8011424 <VerifyRfFreq>
 8011754:	e030      	b.n	80117b8 <RegionIN865Verify+0x80>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.Datarate == DR_6 )
 8011756:	f990 0000 	ldrsb.w	r0, [r0]
 801175a:	2806      	cmp	r0, #6
 801175c:	d101      	bne.n	8011762 <RegionIN865Verify+0x2a>
            {// DR_6 is not supported by this region
                return false;
 801175e:	2000      	movs	r0, #0
 8011760:	e02a      	b.n	80117b8 <RegionIN865Verify+0x80>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE );
 8011762:	2207      	movs	r2, #7
 8011764:	2100      	movs	r1, #0
 8011766:	f7fd ff40 	bl	800f5ea <RegionCommonValueInRange>
 801176a:	3800      	subs	r0, #0
 801176c:	bf18      	it	ne
 801176e:	2001      	movne	r0, #1
 8011770:	e022      	b.n	80117b8 <RegionIN865Verify+0x80>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8011772:	2205      	movs	r2, #5
 8011774:	2100      	movs	r1, #0
 8011776:	f990 0000 	ldrsb.w	r0, [r0]
 801177a:	f7fd ff36 	bl	800f5ea <RegionCommonValueInRange>
 801177e:	3800      	subs	r0, #0
 8011780:	bf18      	it	ne
 8011782:	2001      	movne	r0, #1
 8011784:	e018      	b.n	80117b8 <RegionIN865Verify+0x80>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.Datarate == DR_6 )
 8011786:	f990 0000 	ldrsb.w	r0, [r0]
 801178a:	2806      	cmp	r0, #6
 801178c:	d101      	bne.n	8011792 <RegionIN865Verify+0x5a>
            {// DR_6 is not supported by this region
                return false;
 801178e:	2000      	movs	r0, #0
 8011790:	e012      	b.n	80117b8 <RegionIN865Verify+0x80>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE );
 8011792:	2207      	movs	r2, #7
 8011794:	2100      	movs	r1, #0
 8011796:	f7fd ff28 	bl	800f5ea <RegionCommonValueInRange>
 801179a:	3800      	subs	r0, #0
 801179c:	bf18      	it	ne
 801179e:	2001      	movne	r0, #1
 80117a0:	e00a      	b.n	80117b8 <RegionIN865Verify+0x80>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, IN865_MAX_TX_POWER, IN865_MIN_TX_POWER );
 80117a2:	220a      	movs	r2, #10
 80117a4:	2100      	movs	r1, #0
 80117a6:	f990 0000 	ldrsb.w	r0, [r0]
 80117aa:	f7fd ff1e 	bl	800f5ea <RegionCommonValueInRange>
 80117ae:	3800      	subs	r0, #0
 80117b0:	bf18      	it	ne
 80117b2:	2001      	movne	r0, #1
 80117b4:	e000      	b.n	80117b8 <RegionIN865Verify+0x80>
{
 80117b6:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_IN865 */
}
 80117b8:	bd08      	pop	{r3, pc}
	...

080117bc <RegionIN865ChanMaskSet>:
    }
#endif /* REGION_IN865 */
}

bool RegionIN865ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80117bc:	b508      	push	{r3, lr}
#if defined( REGION_IN865 )
    switch( chanMaskSet->ChannelsMaskType )
 80117be:	7903      	ldrb	r3, [r0, #4]
 80117c0:	b11b      	cbz	r3, 80117ca <RegionIN865ChanMaskSet+0xe>
 80117c2:	2b01      	cmp	r3, #1
 80117c4:	d00b      	beq.n	80117de <RegionIN865ChanMaskSet+0x22>
 80117c6:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_IN865 */
}
 80117c8:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 80117ca:	4b0a      	ldr	r3, [pc, #40]	; (80117f4 <RegionIN865ChanMaskSet+0x38>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	2201      	movs	r2, #1
 80117d0:	6801      	ldr	r1, [r0, #0]
 80117d2:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 80117d6:	f7fd ff7a 	bl	800f6ce <RegionCommonChanMaskCopy>
    return true;
 80117da:	2001      	movs	r0, #1
            break;
 80117dc:	e7f4      	b.n	80117c8 <RegionIN865ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 80117de:	4b05      	ldr	r3, [pc, #20]	; (80117f4 <RegionIN865ChanMaskSet+0x38>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	2201      	movs	r2, #1
 80117e4:	6801      	ldr	r1, [r0, #0]
 80117e6:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 80117ea:	f7fd ff70 	bl	800f6ce <RegionCommonChanMaskCopy>
    return true;
 80117ee:	2001      	movs	r0, #1
            break;
 80117f0:	e7ea      	b.n	80117c8 <RegionIN865ChanMaskSet+0xc>
 80117f2:	bf00      	nop
 80117f4:	2000145c 	.word	0x2000145c

080117f8 <RegionIN865ComputeRxWindowParameters>:

void RegionIN865ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80117f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117fa:	b083      	sub	sp, #12
 80117fc:	460e      	mov	r6, r1
 80117fe:	4617      	mov	r7, r2
 8011800:	461c      	mov	r4, r3
#if defined( REGION_IN865 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, IN865_RX_MAX_DATARATE );
 8011802:	2807      	cmp	r0, #7
 8011804:	bfa8      	it	ge
 8011806:	2007      	movge	r0, #7
 8011808:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsIN865 );
 801180a:	4913      	ldr	r1, [pc, #76]	; (8011858 <RegionIN865ComputeRxWindowParameters+0x60>)
 801180c:	f7fe f9a8 	bl	800fb60 <RegionCommonGetBandwidth>
 8011810:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8011812:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8011816:	2b07      	cmp	r3, #7
 8011818:	d017      	beq.n	801184a <RegionIN865ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesIN865[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesIN865[rxConfigParams->Datarate], BandwidthsIN865[rxConfigParams->Datarate] );
 801181a:	4a0f      	ldr	r2, [pc, #60]	; (8011858 <RegionIN865ComputeRxWindowParameters+0x60>)
 801181c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8011820:	4a0e      	ldr	r2, [pc, #56]	; (801185c <RegionIN865ComputeRxWindowParameters+0x64>)
 8011822:	5cd0      	ldrb	r0, [r2, r3]
 8011824:	f7fe f86c 	bl	800f900 <RegionCommonComputeSymbolTimeLoRa>
 8011828:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801182a:	4b0d      	ldr	r3, [pc, #52]	; (8011860 <RegionIN865ComputeRxWindowParameters+0x68>)
 801182c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801182e:	4798      	blx	r3
 8011830:	4603      	mov	r3, r0
 8011832:	f104 020c 	add.w	r2, r4, #12
 8011836:	9201      	str	r2, [sp, #4]
 8011838:	3408      	adds	r4, #8
 801183a:	9400      	str	r4, [sp, #0]
 801183c:	463a      	mov	r2, r7
 801183e:	4631      	mov	r1, r6
 8011840:	4628      	mov	r0, r5
 8011842:	f7fe f86b 	bl	800f91c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_IN865 */
}
 8011846:	b003      	add	sp, #12
 8011848:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesIN865[rxConfigParams->Datarate] );
 801184a:	4a04      	ldr	r2, [pc, #16]	; (801185c <RegionIN865ComputeRxWindowParameters+0x64>)
 801184c:	5cd0      	ldrb	r0, [r2, r3]
 801184e:	f7fe f85f 	bl	800f910 <RegionCommonComputeSymbolTimeFsk>
 8011852:	4605      	mov	r5, r0
 8011854:	e7e9      	b.n	801182a <RegionIN865ComputeRxWindowParameters+0x32>
 8011856:	bf00      	nop
 8011858:	08017e0c 	.word	0x08017e0c
 801185c:	08017e2c 	.word	0x08017e2c
 8011860:	08018400 	.word	0x08018400

08011864 <RegionIN865RxConfig>:

bool RegionIN865RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8011864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011868:	b08a      	sub	sp, #40	; 0x28
 801186a:	4604      	mov	r4, r0
 801186c:	460f      	mov	r7, r1
#if defined( REGION_IN865 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801186e:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 8011872:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 8011876:	4b37      	ldr	r3, [pc, #220]	; (8011954 <RegionIN865RxConfig+0xf0>)
 8011878:	685b      	ldr	r3, [r3, #4]
 801187a:	4798      	blx	r3
 801187c:	2800      	cmp	r0, #0
 801187e:	d167      	bne.n	8011950 <RegionIN865RxConfig+0xec>
 8011880:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8011882:	7ce3      	ldrb	r3, [r4, #19]
 8011884:	b983      	cbnz	r3, 80118a8 <RegionIN865RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8011886:	4b34      	ldr	r3, [pc, #208]	; (8011958 <RegionIN865RxConfig+0xf4>)
 8011888:	681a      	ldr	r2, [r3, #0]
 801188a:	7823      	ldrb	r3, [r4, #0]
 801188c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8011890:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8011894:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011898:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801189c:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80118a0:	f1b8 0f00 	cmp.w	r8, #0
 80118a4:	d100      	bne.n	80118a8 <RegionIN865RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80118a6:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesIN865[dr];
 80118a8:	4b2c      	ldr	r3, [pc, #176]	; (801195c <RegionIN865RxConfig+0xf8>)
 80118aa:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 80118ae:	4b29      	ldr	r3, [pc, #164]	; (8011954 <RegionIN865RxConfig+0xf0>)
 80118b0:	68db      	ldr	r3, [r3, #12]
 80118b2:	4640      	mov	r0, r8
 80118b4:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80118b6:	2d07      	cmp	r5, #7
 80118b8:	d02b      	beq.n	8011912 <RegionIN865RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80118ba:	4b26      	ldr	r3, [pc, #152]	; (8011954 <RegionIN865RxConfig+0xf0>)
 80118bc:	f8d3 a018 	ldr.w	sl, [r3, #24]
 80118c0:	7ca3      	ldrb	r3, [r4, #18]
 80118c2:	9309      	str	r3, [sp, #36]	; 0x24
 80118c4:	2601      	movs	r6, #1
 80118c6:	9608      	str	r6, [sp, #32]
 80118c8:	2300      	movs	r3, #0
 80118ca:	9307      	str	r3, [sp, #28]
 80118cc:	9306      	str	r3, [sp, #24]
 80118ce:	9305      	str	r3, [sp, #20]
 80118d0:	9304      	str	r3, [sp, #16]
 80118d2:	9303      	str	r3, [sp, #12]
 80118d4:	8922      	ldrh	r2, [r4, #8]
 80118d6:	9202      	str	r2, [sp, #8]
 80118d8:	2208      	movs	r2, #8
 80118da:	9201      	str	r2, [sp, #4]
 80118dc:	9300      	str	r3, [sp, #0]
 80118de:	4633      	mov	r3, r6
 80118e0:	464a      	mov	r2, r9
 80118e2:	78a1      	ldrb	r1, [r4, #2]
 80118e4:	4630      	mov	r0, r6
 80118e6:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 80118e8:	7c63      	ldrb	r3, [r4, #17]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d02d      	beq.n	801194a <RegionIN865RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterIN865[dr];
 80118ee:	4b1c      	ldr	r3, [pc, #112]	; (8011960 <RegionIN865RxConfig+0xfc>)
 80118f0:	5d59      	ldrb	r1, [r3, r5]
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateIN865[dr];
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80118f2:	4b18      	ldr	r3, [pc, #96]	; (8011954 <RegionIN865RxConfig+0xf0>)
 80118f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118f6:	310d      	adds	r1, #13
 80118f8:	b2c9      	uxtb	r1, r1
 80118fa:	4630      	mov	r0, r6
 80118fc:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80118fe:	462a      	mov	r2, r5
 8011900:	4641      	mov	r1, r8
 8011902:	7ce0      	ldrb	r0, [r4, #19]
 8011904:	f7fe f93e 	bl	800fb84 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8011908:	703d      	strb	r5, [r7, #0]
    return true;
 801190a:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_IN865 */
}
 801190c:	b00a      	add	sp, #40	; 0x28
 801190e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8011912:	4b10      	ldr	r3, [pc, #64]	; (8011954 <RegionIN865RxConfig+0xf0>)
 8011914:	f8d3 a018 	ldr.w	sl, [r3, #24]
 8011918:	7ca3      	ldrb	r3, [r4, #18]
 801191a:	9309      	str	r3, [sp, #36]	; 0x24
 801191c:	2000      	movs	r0, #0
 801191e:	9008      	str	r0, [sp, #32]
 8011920:	9007      	str	r0, [sp, #28]
 8011922:	9006      	str	r0, [sp, #24]
 8011924:	2301      	movs	r3, #1
 8011926:	9305      	str	r3, [sp, #20]
 8011928:	9004      	str	r0, [sp, #16]
 801192a:	9003      	str	r0, [sp, #12]
 801192c:	8923      	ldrh	r3, [r4, #8]
 801192e:	9302      	str	r3, [sp, #8]
 8011930:	2305      	movs	r3, #5
 8011932:	9301      	str	r3, [sp, #4]
 8011934:	4b0b      	ldr	r3, [pc, #44]	; (8011964 <RegionIN865RxConfig+0x100>)
 8011936:	9300      	str	r3, [sp, #0]
 8011938:	4603      	mov	r3, r0
 801193a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801193e:	fb02 f209 	mul.w	r2, r2, r9
 8011942:	f24c 3150 	movw	r1, #50000	; 0xc350
 8011946:	47d0      	blx	sl
 8011948:	e7ce      	b.n	80118e8 <RegionIN865RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateIN865[dr];
 801194a:	4b07      	ldr	r3, [pc, #28]	; (8011968 <RegionIN865RxConfig+0x104>)
 801194c:	5d59      	ldrb	r1, [r3, r5]
 801194e:	e7d0      	b.n	80118f2 <RegionIN865RxConfig+0x8e>
        return false;
 8011950:	2000      	movs	r0, #0
 8011952:	e7db      	b.n	801190c <RegionIN865RxConfig+0xa8>
 8011954:	08018400 	.word	0x08018400
 8011958:	2000145c 	.word	0x2000145c
 801195c:	08017e2c 	.word	0x08017e2c
 8011960:	08017e44 	.word	0x08017e44
 8011964:	00014585 	.word	0x00014585
 8011968:	08017e3c 	.word	0x08017e3c

0801196c <RegionIN865TxConfig>:

bool RegionIN865TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801196c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011970:	b08d      	sub	sp, #52	; 0x34
 8011972:	4604      	mov	r4, r0
 8011974:	460f      	mov	r7, r1
 8011976:	4690      	mov	r8, r2
#if defined( REGION_IN865 )
    RadioModems_t modem;
    int8_t phyDr = DataratesIN865[txConfig->Datarate];
 8011978:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801197c:	4a42      	ldr	r2, [pc, #264]	; (8011a88 <RegionIN865TxConfig+0x11c>)
 801197e:	f912 a003 	ldrsb.w	sl, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8011982:	4b42      	ldr	r3, [pc, #264]	; (8011a8c <RegionIN865TxConfig+0x120>)
 8011984:	6819      	ldr	r1, [r3, #0]
 8011986:	4d42      	ldr	r5, [pc, #264]	; (8011a90 <RegionIN865TxConfig+0x124>)
 8011988:	682b      	ldr	r3, [r5, #0]
 801198a:	7802      	ldrb	r2, [r0, #0]
 801198c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011990:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8011994:	7a53      	ldrb	r3, [r2, #9]
 8011996:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801199a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801199e:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80119a2:	f990 0002 	ldrsb.w	r0, [r0, #2]
 80119a6:	f7fe f8d6 	bl	800fb56 <RegionCommonLimitTxPower>
 80119aa:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsIN865 );
 80119ac:	4939      	ldr	r1, [pc, #228]	; (8011a94 <RegionIN865TxConfig+0x128>)
 80119ae:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80119b2:	f7fe f8d5 	bl	800fb60 <RegionCommonGetBandwidth>
 80119b6:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80119b8:	68a2      	ldr	r2, [r4, #8]
 80119ba:	6861      	ldr	r1, [r4, #4]
 80119bc:	4630      	mov	r0, r6
 80119be:	f7fd ffe7 	bl	800f990 <RegionCommonComputeTxPower>
 80119c2:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80119c4:	4b34      	ldr	r3, [pc, #208]	; (8011a98 <RegionIN865TxConfig+0x12c>)
 80119c6:	68da      	ldr	r2, [r3, #12]
 80119c8:	6829      	ldr	r1, [r5, #0]
 80119ca:	7823      	ldrb	r3, [r4, #0]
 80119cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80119d0:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80119d4:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80119d6:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80119da:	2b07      	cmp	r3, #7
 80119dc:	d031      	beq.n	8011a42 <RegionIN865TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80119de:	4b2e      	ldr	r3, [pc, #184]	; (8011a98 <RegionIN865TxConfig+0x12c>)
 80119e0:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 80119e4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80119e8:	9308      	str	r3, [sp, #32]
 80119ea:	2200      	movs	r2, #0
 80119ec:	9207      	str	r2, [sp, #28]
 80119ee:	9206      	str	r2, [sp, #24]
 80119f0:	9205      	str	r2, [sp, #20]
 80119f2:	2501      	movs	r5, #1
 80119f4:	9504      	str	r5, [sp, #16]
 80119f6:	9203      	str	r2, [sp, #12]
 80119f8:	2308      	movs	r3, #8
 80119fa:	9302      	str	r3, [sp, #8]
 80119fc:	9501      	str	r5, [sp, #4]
 80119fe:	f8cd a000 	str.w	sl, [sp]
 8011a02:	464b      	mov	r3, r9
 8011a04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011a06:	4628      	mov	r0, r5
 8011a08:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8011a0a:	4b21      	ldr	r3, [pc, #132]	; (8011a90 <RegionIN865TxConfig+0x124>)
 8011a0c:	681a      	ldr	r2, [r3, #0]
 8011a0e:	7823      	ldrb	r3, [r4, #0]
 8011a10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011a14:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8011a18:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011a1c:	f7fe f8e2 	bl	800fbe4 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8011a20:	89a1      	ldrh	r1, [r4, #12]
 8011a22:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8011a26:	f7ff fd11 	bl	801144c <GetTimeOnAir>
 8011a2a:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8011a2e:	4b1a      	ldr	r3, [pc, #104]	; (8011a98 <RegionIN865TxConfig+0x12c>)
 8011a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a32:	7b21      	ldrb	r1, [r4, #12]
 8011a34:	4628      	mov	r0, r5
 8011a36:	4798      	blx	r3

    *txPower = txPowerLimited;
 8011a38:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_IN865 */
}
 8011a3a:	2001      	movs	r0, #1
 8011a3c:	b00d      	add	sp, #52	; 0x34
 8011a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8011a42:	4b15      	ldr	r3, [pc, #84]	; (8011a98 <RegionIN865TxConfig+0x12c>)
 8011a44:	69dd      	ldr	r5, [r3, #28]
 8011a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011a4a:	fb03 f30a 	mul.w	r3, r3, sl
 8011a4e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8011a52:	9208      	str	r2, [sp, #32]
 8011a54:	f04f 0b00 	mov.w	fp, #0
 8011a58:	f8cd b01c 	str.w	fp, [sp, #28]
 8011a5c:	f8cd b018 	str.w	fp, [sp, #24]
 8011a60:	f8cd b014 	str.w	fp, [sp, #20]
 8011a64:	2201      	movs	r2, #1
 8011a66:	9204      	str	r2, [sp, #16]
 8011a68:	f8cd b00c 	str.w	fp, [sp, #12]
 8011a6c:	2205      	movs	r2, #5
 8011a6e:	9202      	str	r2, [sp, #8]
 8011a70:	f8cd b004 	str.w	fp, [sp, #4]
 8011a74:	9300      	str	r3, [sp, #0]
 8011a76:	464b      	mov	r3, r9
 8011a78:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8011a7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011a7e:	4658      	mov	r0, fp
 8011a80:	47a8      	blx	r5
        modem = MODEM_FSK;
 8011a82:	465d      	mov	r5, fp
 8011a84:	e7c1      	b.n	8011a0a <RegionIN865TxConfig+0x9e>
 8011a86:	bf00      	nop
 8011a88:	08017e2c 	.word	0x08017e2c
 8011a8c:	20001458 	.word	0x20001458
 8011a90:	2000145c 	.word	0x2000145c
 8011a94:	08017e0c 	.word	0x08017e0c
 8011a98:	08018400 	.word	0x08018400

08011a9c <RegionIN865LinkAdrReq>:

uint8_t RegionIN865LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8011a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aa0:	b08f      	sub	sp, #60	; 0x3c
 8011aa2:	4607      	mov	r7, r0
 8011aa4:	468b      	mov	fp, r1
 8011aa6:	4692      	mov	sl, r2
 8011aa8:	4699      	mov	r9, r3
    uint8_t status = 0x07;
#if defined( REGION_IN865 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8011aaa:	2500      	movs	r5, #0
 8011aac:	950c      	str	r5, [sp, #48]	; 0x30
 8011aae:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 8011ab2:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 8011ab6:	f04f 0807 	mov.w	r8, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8011aba:	e02d      	b.n	8011b18 <RegionIN865LinkAdrReq+0x7c>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 8011abc:	2400      	movs	r4, #0
        status = 0x07;
 8011abe:	f04f 0807 	mov.w	r8, #7
 8011ac2:	e00f      	b.n	8011ae4 <RegionIN865LinkAdrReq+0x48>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8011ac4:	4a5a      	ldr	r2, [pc, #360]	; (8011c30 <RegionIN865LinkAdrReq+0x194>)
 8011ac6:	6812      	ldr	r2, [r2, #0]
 8011ac8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8011acc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8011ad0:	b132      	cbz	r2, 8011ae0 <RegionIN865LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 8011ad2:	2201      	movs	r2, #1
 8011ad4:	40a2      	lsls	r2, r4
 8011ad6:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8011ada:	430a      	orrs	r2, r1
 8011adc:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 8011ae0:	3401      	adds	r4, #1
 8011ae2:	b2e4      	uxtb	r4, r4
 8011ae4:	2c0f      	cmp	r4, #15
 8011ae6:	d817      	bhi.n	8011b18 <RegionIN865LinkAdrReq+0x7c>
                if( linkAdrParams.ChMaskCtrl == 6 )
 8011ae8:	2b06      	cmp	r3, #6
 8011aea:	d0eb      	beq.n	8011ac4 <RegionIN865LinkAdrReq+0x28>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8011aec:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8011af0:	4126      	asrs	r6, r4
 8011af2:	f016 0f01 	tst.w	r6, #1
 8011af6:	d0f3      	beq.n	8011ae0 <RegionIN865LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8011af8:	4a4d      	ldr	r2, [pc, #308]	; (8011c30 <RegionIN865LinkAdrReq+0x194>)
 8011afa:	6812      	ldr	r2, [r2, #0]
 8011afc:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8011b00:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8011b04:	2a00      	cmp	r2, #0
 8011b06:	d1eb      	bne.n	8011ae0 <RegionIN865LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8011b08:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
 8011b0c:	e7e8      	b.n	8011ae0 <RegionIN865LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 8011b0e:	f04f 0806 	mov.w	r8, #6
 8011b12:	e001      	b.n	8011b18 <RegionIN865LinkAdrReq+0x7c>
            status &= 0xFE; // Channel mask KO
 8011b14:	f04f 0806 	mov.w	r8, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8011b18:	7a3b      	ldrb	r3, [r7, #8]
 8011b1a:	42ab      	cmp	r3, r5
 8011b1c:	d919      	bls.n	8011b52 <RegionIN865LinkAdrReq+0xb6>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8011b1e:	6878      	ldr	r0, [r7, #4]
 8011b20:	a90c      	add	r1, sp, #48	; 0x30
 8011b22:	4428      	add	r0, r5
 8011b24:	f7fd fe84 	bl	800f830 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8011b28:	b198      	cbz	r0, 8011b52 <RegionIN865LinkAdrReq+0xb6>
        bytesProcessed += nextIndex;
 8011b2a:	4405      	add	r5, r0
 8011b2c:	b2ed      	uxtb	r5, r5
        chMask = linkAdrParams.ChMask;
 8011b2e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8011b32:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8011b36:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8011b3a:	b90b      	cbnz	r3, 8011b40 <RegionIN865LinkAdrReq+0xa4>
 8011b3c:	2a00      	cmp	r2, #0
 8011b3e:	d0e6      	beq.n	8011b0e <RegionIN865LinkAdrReq+0x72>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8011b40:	1e5a      	subs	r2, r3, #1
 8011b42:	b2d2      	uxtb	r2, r2
 8011b44:	2a04      	cmp	r2, #4
 8011b46:	d9e5      	bls.n	8011b14 <RegionIN865LinkAdrReq+0x78>
 8011b48:	2b06      	cmp	r3, #6
 8011b4a:	d9b7      	bls.n	8011abc <RegionIN865LinkAdrReq+0x20>
            status &= 0xFE; // Channel mask KO
 8011b4c:	f04f 0806 	mov.w	r8, #6
 8011b50:	e7e2      	b.n	8011b18 <RegionIN865LinkAdrReq+0x7c>
                }
            }
        }
    }

    if( linkAdrParams.Datarate != DR_6 )
 8011b52:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8011b56:	2b06      	cmp	r3, #6
 8011b58:	d116      	bne.n	8011b88 <RegionIN865LinkAdrReq+0xec>
        // Verify the parameters and update, if necessary
        status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
    }
    else
    {// DR_6 is not supported by this region
        status &= 0xFD; // Datarate KO
 8011b5a:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
    }

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8011b5e:	f1b8 0f07 	cmp.w	r8, #7
 8011b62:	d057      	beq.n	8011c14 <RegionIN865LinkAdrReq+0x178>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8011b64:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8011b68:	f88b 3000 	strb.w	r3, [fp]
    *txPowOut = linkAdrParams.TxPower;
 8011b6c:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 8011b70:	f88a 3000 	strb.w	r3, [sl]
    *nbRepOut = linkAdrParams.NbRep;
 8011b74:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8011b78:	f889 3000 	strb.w	r3, [r9]
    *nbBytesParsed = bytesProcessed;
 8011b7c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011b7e:	701d      	strb	r5, [r3, #0]

#endif /* REGION_IN865 */
    return status;
}
 8011b80:	4640      	mov	r0, r8
 8011b82:	b00f      	add	sp, #60	; 0x3c
 8011b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        getPhy.Attribute = PHY_MIN_TX_DR;
 8011b88:	2302      	movs	r3, #2
 8011b8a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8011b8e:	7a7b      	ldrb	r3, [r7, #9]
 8011b90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        phyParam = RegionIN865GetPhyParam( &getPhy );
 8011b94:	a80a      	add	r0, sp, #40	; 0x28
 8011b96:	f7ff fc8b 	bl	80114b0 <RegionIN865GetPhyParam>
        linkAdrVerifyParams.Status = status;
 8011b9a:	f88d 8008 	strb.w	r8, [sp, #8]
        linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8011b9e:	7abb      	ldrb	r3, [r7, #10]
 8011ba0:	f88d 3009 	strb.w	r3, [sp, #9]
        linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8011ba4:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8011ba8:	f88d 300a 	strb.w	r3, [sp, #10]
        linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8011bac:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 8011bb0:	f88d 300b 	strb.w	r3, [sp, #11]
        linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8011bb4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8011bb8:	f88d 300c 	strb.w	r3, [sp, #12]
        linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8011bbc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011bc0:	f88d 300d 	strb.w	r3, [sp, #13]
        linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8011bc4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8011bc8:	f88d 300e 	strb.w	r3, [sp, #14]
        linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8011bcc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8011bd0:	f88d 300f 	strb.w	r3, [sp, #15]
        linkAdrVerifyParams.NbChannels = IN865_MAX_NB_CHANNELS;
 8011bd4:	2310      	movs	r3, #16
 8011bd6:	f88d 3010 	strb.w	r3, [sp, #16]
        linkAdrVerifyParams.ChannelsMask = &chMask;
 8011bda:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8011bde:	9305      	str	r3, [sp, #20]
        linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8011be0:	f88d 0018 	strb.w	r0, [sp, #24]
        linkAdrVerifyParams.MaxDatarate = IN865_TX_MAX_DATARATE;
 8011be4:	2307      	movs	r3, #7
 8011be6:	f88d 3019 	strb.w	r3, [sp, #25]
        linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8011bea:	4b11      	ldr	r3, [pc, #68]	; (8011c30 <RegionIN865LinkAdrReq+0x194>)
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	9307      	str	r3, [sp, #28]
        linkAdrVerifyParams.MinTxPower = IN865_MIN_TX_POWER;
 8011bf0:	230a      	movs	r3, #10
 8011bf2:	f88d 3020 	strb.w	r3, [sp, #32]
        linkAdrVerifyParams.MaxTxPower = IN865_MAX_TX_POWER;
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        linkAdrVerifyParams.Version = linkAdrReq->Version;
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	9301      	str	r3, [sp, #4]
        status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8011c00:	ab0c      	add	r3, sp, #48	; 0x30
 8011c02:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8011c06:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 8011c0a:	a801      	add	r0, sp, #4
 8011c0c:	f7fd fe2c 	bl	800f868 <RegionCommonLinkAdrReqVerifyParams>
 8011c10:	4680      	mov	r8, r0
 8011c12:	e7a4      	b.n	8011b5e <RegionIN865LinkAdrReq+0xc2>
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8011c14:	4c06      	ldr	r4, [pc, #24]	; (8011c30 <RegionIN865LinkAdrReq+0x194>)
 8011c16:	6820      	ldr	r0, [r4, #0]
 8011c18:	220c      	movs	r2, #12
 8011c1a:	2100      	movs	r1, #0
 8011c1c:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8011c20:	f002 fce1 	bl	80145e6 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8011c24:	6823      	ldr	r3, [r4, #0]
 8011c26:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8011c2a:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
 8011c2e:	e799      	b.n	8011b64 <RegionIN865LinkAdrReq+0xc8>
 8011c30:	2000145c 	.word	0x2000145c

08011c34 <RegionIN865RxParamSetupReq>:

uint8_t RegionIN865RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8011c34:	b538      	push	{r3, r4, r5, lr}
 8011c36:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_IN865 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8011c38:	6840      	ldr	r0, [r0, #4]
 8011c3a:	f7ff fbf3 	bl	8011424 <VerifyRfFreq>
 8011c3e:	b1c0      	cbz	r0, 8011c72 <RegionIN865RxParamSetupReq+0x3e>
    uint8_t status = 0x07;
 8011c40:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE ) == false ) ||
 8011c42:	2207      	movs	r2, #7
 8011c44:	2100      	movs	r1, #0
 8011c46:	f994 0000 	ldrsb.w	r0, [r4]
 8011c4a:	f7fd fcce 	bl	800f5ea <RegionCommonValueInRange>
 8011c4e:	b118      	cbz	r0, 8011c58 <RegionIN865RxParamSetupReq+0x24>
        // DR_6 is not supported by this region
        ( rxParamSetupReq->Datarate == DR_6 ) )
 8011c50:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE ) == false ) ||
 8011c54:	2b06      	cmp	r3, #6
 8011c56:	d101      	bne.n	8011c5c <RegionIN865RxParamSetupReq+0x28>
    {
        status &= 0xFD; // Datarate KO
 8011c58:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, IN865_MIN_RX1_DR_OFFSET, IN865_MAX_RX1_DR_OFFSET ) == false )
 8011c5c:	2207      	movs	r2, #7
 8011c5e:	2100      	movs	r1, #0
 8011c60:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8011c64:	f7fd fcc1 	bl	800f5ea <RegionCommonValueInRange>
 8011c68:	b908      	cbnz	r0, 8011c6e <RegionIN865RxParamSetupReq+0x3a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8011c6a:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_IN865 */
    return status;
}
 8011c6e:	4628      	mov	r0, r5
 8011c70:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 8011c72:	2506      	movs	r5, #6
 8011c74:	e7e5      	b.n	8011c42 <RegionIN865RxParamSetupReq+0xe>

08011c76 <RegionIN865TxParamSetupReq>:

int8_t RegionIN865TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 8011c76:	f04f 30ff 	mov.w	r0, #4294967295
 8011c7a:	4770      	bx	lr

08011c7c <RegionIN865DlChannelReq>:

int8_t RegionIN865DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8011c7c:	b510      	push	{r4, lr}
 8011c7e:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_IN865 )

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8011c80:	6840      	ldr	r0, [r0, #4]
 8011c82:	f7ff fbcf 	bl	8011424 <VerifyRfFreq>
 8011c86:	b170      	cbz	r0, 8011ca6 <RegionIN865DlChannelReq+0x2a>
    uint8_t status = 0x03;
 8011c88:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8011c8a:	4b0b      	ldr	r3, [pc, #44]	; (8011cb8 <RegionIN865DlChannelReq+0x3c>)
 8011c8c:	681a      	ldr	r2, [r3, #0]
 8011c8e:	7823      	ldrb	r3, [r4, #0]
 8011c90:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8011c94:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8011c98:	b909      	cbnz	r1, 8011c9e <RegionIN865DlChannelReq+0x22>
    {
        status &= 0xFD;
 8011c9a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8011c9e:	2803      	cmp	r0, #3
 8011ca0:	d003      	beq.n	8011caa <RegionIN865DlChannelReq+0x2e>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_IN865 */
    return status;
}
 8011ca2:	b240      	sxtb	r0, r0
 8011ca4:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 8011ca6:	2002      	movs	r0, #2
 8011ca8:	e7ef      	b.n	8011c8a <RegionIN865DlChannelReq+0xe>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8011caa:	6861      	ldr	r1, [r4, #4]
 8011cac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011cb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011cb4:	6059      	str	r1, [r3, #4]
 8011cb6:	e7f4      	b.n	8011ca2 <RegionIN865DlChannelReq+0x26>
 8011cb8:	2000145c 	.word	0x2000145c

08011cbc <RegionIN865AlternateDr>:
#if defined( REGION_IN865 )
    return currentDr;
#else
    return -1;
#endif /* REGION_IN865 */
}
 8011cbc:	4770      	bx	lr
	...

08011cc0 <RegionIN865NextChannel>:

LoRaMacStatus_t RegionIN865NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8011cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cc2:	b097      	sub	sp, #92	; 0x5c
 8011cc4:	4604      	mov	r4, r0
 8011cc6:	460f      	mov	r7, r1
 8011cc8:	4616      	mov	r6, r2
 8011cca:	461d      	mov	r5, r3
#if defined( REGION_IN865 )
    uint8_t nbEnabledChannels = 0;
 8011ccc:	2100      	movs	r1, #0
 8011cce:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 8011cd2:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[IN865_MAX_NB_CHANNELS] = { 0 };
 8011cd6:	9111      	str	r1, [sp, #68]	; 0x44
 8011cd8:	9112      	str	r1, [sp, #72]	; 0x48
 8011cda:	9113      	str	r1, [sp, #76]	; 0x4c
 8011cdc:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = IN865_JOIN_CHANNELS;
 8011cde:	2307      	movs	r3, #7
 8011ce0:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8011ce4:	4b32      	ldr	r3, [pc, #200]	; (8011db0 <RegionIN865NextChannel+0xf0>)
 8011ce6:	6818      	ldr	r0, [r3, #0]
 8011ce8:	2201      	movs	r2, #1
 8011cea:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8011cee:	f7fd fcd8 	bl	800f6a2 <RegionCommonCountChannels>
 8011cf2:	b938      	cbnz	r0, 8011d04 <RegionIN865NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8011cf4:	4b2e      	ldr	r3, [pc, #184]	; (8011db0 <RegionIN865NextChannel+0xf0>)
 8011cf6:	681a      	ldr	r2, [r3, #0]
 8011cf8:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 8011cfc:	f043 0307 	orr.w	r3, r3, #7
 8011d00:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8011d04:	7a63      	ldrb	r3, [r4, #9]
 8011d06:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8011d0a:	7a23      	ldrb	r3, [r4, #8]
 8011d0c:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8011d10:	4b27      	ldr	r3, [pc, #156]	; (8011db0 <RegionIN865NextChannel+0xf0>)
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	f503 6290 	add.w	r2, r3, #1152	; 0x480
 8011d18:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8011d1a:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8011d1c:	4b25      	ldr	r3, [pc, #148]	; (8011db4 <RegionIN865NextChannel+0xf4>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = IN865_MAX_NB_CHANNELS;
 8011d22:	2310      	movs	r3, #16
 8011d24:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 8011d28:	f10d 030a 	add.w	r3, sp, #10
 8011d2c:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8011d2e:	6823      	ldr	r3, [r4, #0]
 8011d30:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8011d32:	6863      	ldr	r3, [r4, #4]
 8011d34:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8011d36:	7aa3      	ldrb	r3, [r4, #10]
 8011d38:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = IN865_MAX_NB_BANDS;
 8011d3c:	2301      	movs	r3, #1
 8011d3e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8011d42:	ab0c      	add	r3, sp, #48	; 0x30
 8011d44:	6921      	ldr	r1, [r4, #16]
 8011d46:	68e0      	ldr	r0, [r4, #12]
 8011d48:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8011d4c:	7d23      	ldrb	r3, [r4, #20]
 8011d4e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8011d52:	8ae1      	ldrh	r1, [r4, #22]
 8011d54:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8011d58:	f7ff fb78 	bl	801144c <GetTimeOnAir>
 8011d5c:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8011d5e:	ab03      	add	r3, sp, #12
 8011d60:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8011d62:	9601      	str	r6, [sp, #4]
 8011d64:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 8011d68:	9300      	str	r3, [sp, #0]
 8011d6a:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 8011d6e:	aa11      	add	r2, sp, #68	; 0x44
 8011d70:	4629      	mov	r1, r5
 8011d72:	a809      	add	r0, sp, #36	; 0x24
 8011d74:	f7fd fe88 	bl	800fa88 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8011d78:	4604      	mov	r4, r0
 8011d7a:	b120      	cbz	r0, 8011d86 <RegionIN865NextChannel+0xc6>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8011d7c:	280c      	cmp	r0, #12
 8011d7e:	d00d      	beq.n	8011d9c <RegionIN865NextChannel+0xdc>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_IN865 */
}
 8011d80:	4620      	mov	r0, r4
 8011d82:	b017      	add	sp, #92	; 0x5c
 8011d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8011d86:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 8011d8a:	3901      	subs	r1, #1
 8011d8c:	f002 fc08 	bl	80145a0 <randr>
 8011d90:	ab16      	add	r3, sp, #88	; 0x58
 8011d92:	4418      	add	r0, r3
 8011d94:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 8011d98:	703b      	strb	r3, [r7, #0]
 8011d9a:	e7f1      	b.n	8011d80 <RegionIN865NextChannel+0xc0>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8011d9c:	4b04      	ldr	r3, [pc, #16]	; (8011db0 <RegionIN865NextChannel+0xf0>)
 8011d9e:	681a      	ldr	r2, [r3, #0]
 8011da0:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 8011da4:	f043 0307 	orr.w	r3, r3, #7
 8011da8:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
 8011dac:	e7e8      	b.n	8011d80 <RegionIN865NextChannel+0xc0>
 8011dae:	bf00      	nop
 8011db0:	2000145c 	.word	0x2000145c
 8011db4:	20001458 	.word	0x20001458

08011db8 <RegionIN865ChannelAdd>:

LoRaMacStatus_t RegionIN865ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8011db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined( REGION_IN865 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 8011dba:	7905      	ldrb	r5, [r0, #4]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 8011dbc:	2d02      	cmp	r5, #2
 8011dbe:	d94b      	bls.n	8011e58 <RegionIN865ChannelAdd+0xa0>
 8011dc0:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= IN865_MAX_NB_CHANNELS )
 8011dc2:	2d0f      	cmp	r5, #15
 8011dc4:	d84a      	bhi.n	8011e5c <RegionIN865ChannelAdd+0xa4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 8011dc6:	6803      	ldr	r3, [r0, #0]
 8011dc8:	7a18      	ldrb	r0, [r3, #8]
 8011dca:	f340 0003 	sbfx	r0, r0, #0, #4
 8011dce:	2207      	movs	r2, #7
 8011dd0:	2100      	movs	r1, #0
 8011dd2:	b240      	sxtb	r0, r0
 8011dd4:	f7fd fc09 	bl	800f5ea <RegionCommonValueInRange>
 8011dd8:	2800      	cmp	r0, #0
 8011dda:	d039      	beq.n	8011e50 <RegionIN865ChannelAdd+0x98>
    bool drInvalid = false;
 8011ddc:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 8011dde:	6823      	ldr	r3, [r4, #0]
 8011de0:	7a18      	ldrb	r0, [r3, #8]
 8011de2:	f340 1003 	sbfx	r0, r0, #4, #4
 8011de6:	2207      	movs	r2, #7
 8011de8:	2100      	movs	r1, #0
 8011dea:	b240      	sxtb	r0, r0
 8011dec:	f7fd fbfd 	bl	800f5ea <RegionCommonValueInRange>
 8011df0:	b900      	cbnz	r0, 8011df4 <RegionIN865ChannelAdd+0x3c>
    {
        drInvalid = true;
 8011df2:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8011df4:	6821      	ldr	r1, [r4, #0]
 8011df6:	7a0b      	ldrb	r3, [r1, #8]
 8011df8:	f343 0203 	sbfx	r2, r3, #0, #4
 8011dfc:	b252      	sxtb	r2, r2
 8011dfe:	f343 1303 	sbfx	r3, r3, #4, #4
 8011e02:	b25b      	sxtb	r3, r3
 8011e04:	429a      	cmp	r2, r3
 8011e06:	dd00      	ble.n	8011e0a <RegionIN865ChannelAdd+0x52>
    {
        drInvalid = true;
 8011e08:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8011e0a:	6808      	ldr	r0, [r1, #0]
 8011e0c:	f7ff fb0a 	bl	8011424 <VerifyRfFreq>
 8011e10:	b300      	cbz	r0, 8011e54 <RegionIN865ChannelAdd+0x9c>
    bool freqInvalid = false;
 8011e12:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8011e14:	b106      	cbz	r6, 8011e18 <RegionIN865ChannelAdd+0x60>
 8011e16:	bb1b      	cbnz	r3, 8011e60 <RegionIN865ChannelAdd+0xa8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 8011e18:	bb26      	cbnz	r6, 8011e64 <RegionIN865ChannelAdd+0xac>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 8011e1a:	bb2b      	cbnz	r3, 8011e68 <RegionIN865ChannelAdd+0xb0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8011e1c:	4f13      	ldr	r7, [pc, #76]	; (8011e6c <RegionIN865ChannelAdd+0xb4>)
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	006e      	lsls	r6, r5, #1
 8011e22:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8011e26:	220c      	movs	r2, #12
 8011e28:	6821      	ldr	r1, [r4, #0]
 8011e2a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011e2e:	f002 fbc4 	bl	80145ba <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 8011e32:	683a      	ldr	r2, [r7, #0]
 8011e34:	442e      	add	r6, r5
 8011e36:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011e3a:	2000      	movs	r0, #0
 8011e3c:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8011e3e:	2301      	movs	r3, #1
 8011e40:	fa03 f505 	lsl.w	r5, r3, r5
 8011e44:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 8011e48:	431d      	orrs	r5, r3
 8011e4a:	f8a2 5480 	strh.w	r5, [r2, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 8011e4e:	e006      	b.n	8011e5e <RegionIN865ChannelAdd+0xa6>
        drInvalid = true;
 8011e50:	2601      	movs	r6, #1
 8011e52:	e7c4      	b.n	8011dde <RegionIN865ChannelAdd+0x26>
            freqInvalid = true;
 8011e54:	2301      	movs	r3, #1
 8011e56:	e7dd      	b.n	8011e14 <RegionIN865ChannelAdd+0x5c>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8011e58:	2006      	movs	r0, #6
 8011e5a:	e000      	b.n	8011e5e <RegionIN865ChannelAdd+0xa6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011e5c:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_IN865 */
}
 8011e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8011e60:	2006      	movs	r0, #6
 8011e62:	e7fc      	b.n	8011e5e <RegionIN865ChannelAdd+0xa6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 8011e64:	2005      	movs	r0, #5
 8011e66:	e7fa      	b.n	8011e5e <RegionIN865ChannelAdd+0xa6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8011e68:	2004      	movs	r0, #4
 8011e6a:	e7f8      	b.n	8011e5e <RegionIN865ChannelAdd+0xa6>
 8011e6c:	2000145c 	.word	0x2000145c

08011e70 <RegionIN865ChannelsRemove>:

bool RegionIN865ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_IN865 )
    uint8_t id = channelRemove->ChannelId;
 8011e70:	7801      	ldrb	r1, [r0, #0]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 8011e72:	2902      	cmp	r1, #2
 8011e74:	d801      	bhi.n	8011e7a <RegionIN865ChannelsRemove+0xa>
    {
        return false;
 8011e76:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, IN865_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_IN865 */
}
 8011e78:	4770      	bx	lr
{
 8011e7a:	b510      	push	{r4, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8011e7c:	4b08      	ldr	r3, [pc, #32]	; (8011ea0 <RegionIN865ChannelsRemove+0x30>)
 8011e7e:	6818      	ldr	r0, [r3, #0]
 8011e80:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8011e84:	009c      	lsls	r4, r3, #2
 8011e86:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	5102      	str	r2, [r0, r4]
 8011e8e:	605a      	str	r2, [r3, #4]
 8011e90:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, IN865_MAX_NB_CHANNELS );
 8011e92:	2210      	movs	r2, #16
 8011e94:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8011e98:	f7fd fbe9 	bl	800f66e <RegionCommonChanDisable>
}
 8011e9c:	bd10      	pop	{r4, pc}
 8011e9e:	bf00      	nop
 8011ea0:	2000145c 	.word	0x2000145c

08011ea4 <RegionIN865ApplyCFList>:
{
 8011ea4:	b570      	push	{r4, r5, r6, lr}
 8011ea6:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8011ea8:	2350      	movs	r3, #80	; 0x50
 8011eaa:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 8011eae:	7903      	ldrb	r3, [r0, #4]
 8011eb0:	2b10      	cmp	r3, #16
 8011eb2:	d135      	bne.n	8011f20 <RegionIN865ApplyCFList+0x7c>
 8011eb4:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 8011eb6:	6803      	ldr	r3, [r0, #0]
 8011eb8:	7bdd      	ldrb	r5, [r3, #15]
 8011eba:	2d00      	cmp	r5, #0
 8011ebc:	d130      	bne.n	8011f20 <RegionIN865ApplyCFList+0x7c>
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8011ebe:	2403      	movs	r4, #3
 8011ec0:	e01a      	b.n	8011ef8 <RegionIN865ApplyCFList+0x54>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8011ec2:	6832      	ldr	r2, [r6, #0]
 8011ec4:	5d53      	ldrb	r3, [r2, r5]
 8011ec6:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8011ec8:	442a      	add	r2, r5
 8011eca:	7851      	ldrb	r1, [r2, #1]
 8011ecc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8011ed0:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8011ed2:	7892      	ldrb	r2, [r2, #2]
 8011ed4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 8011ed8:	2264      	movs	r2, #100	; 0x64
 8011eda:	fb02 f303 	mul.w	r3, r2, r3
 8011ede:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	9304      	str	r3, [sp, #16]
 8011ee4:	e011      	b.n	8011f0a <RegionIN865ApplyCFList+0x66>
            channelRemove.ChannelId = chanIdx;
 8011ee6:	f88d 4000 	strb.w	r4, [sp]
            RegionIN865ChannelsRemove( &channelRemove );
 8011eea:	4668      	mov	r0, sp
 8011eec:	f7ff ffc0 	bl	8011e70 <RegionIN865ChannelsRemove>
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8011ef0:	3503      	adds	r5, #3
 8011ef2:	b2ed      	uxtb	r5, r5
 8011ef4:	3401      	adds	r4, #1
 8011ef6:	b2e4      	uxtb	r4, r4
 8011ef8:	2c0f      	cmp	r4, #15
 8011efa:	d811      	bhi.n	8011f20 <RegionIN865ApplyCFList+0x7c>
        if( chanIdx < ( IN865_NUMB_CHANNELS_CF_LIST + IN865_NUMB_DEFAULT_CHANNELS ) )
 8011efc:	2c07      	cmp	r4, #7
 8011efe:	d9e0      	bls.n	8011ec2 <RegionIN865ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 8011f00:	2300      	movs	r3, #0
 8011f02:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 8011f04:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 8011f08:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 8011f0a:	9b03      	ldr	r3, [sp, #12]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d0ea      	beq.n	8011ee6 <RegionIN865ApplyCFList+0x42>
            channelAdd.NewChannel = &newChannel;
 8011f10:	ab03      	add	r3, sp, #12
 8011f12:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 8011f14:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionIN865ChannelAdd( &channelAdd );
 8011f18:	a801      	add	r0, sp, #4
 8011f1a:	f7ff ff4d 	bl	8011db8 <RegionIN865ChannelAdd>
 8011f1e:	e7e7      	b.n	8011ef0 <RegionIN865ApplyCFList+0x4c>
}
 8011f20:	b006      	add	sp, #24
 8011f22:	bd70      	pop	{r4, r5, r6, pc}

08011f24 <RegionIN865NewChannelReq>:
{
 8011f24:	b500      	push	{lr}
 8011f26:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 8011f28:	6803      	ldr	r3, [r0, #0]
 8011f2a:	681a      	ldr	r2, [r3, #0]
 8011f2c:	b952      	cbnz	r2, 8011f44 <RegionIN865NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8011f2e:	7903      	ldrb	r3, [r0, #4]
 8011f30:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionIN865ChannelsRemove( &channelRemove ) == false )
 8011f34:	a801      	add	r0, sp, #4
 8011f36:	f7ff ff9b 	bl	8011e70 <RegionIN865ChannelsRemove>
 8011f3a:	b1d0      	cbz	r0, 8011f72 <RegionIN865NewChannelReq+0x4e>
    uint8_t status = 0x03;
 8011f3c:	2003      	movs	r0, #3
}
 8011f3e:	b005      	add	sp, #20
 8011f40:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8011f44:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8011f46:	7903      	ldrb	r3, [r0, #4]
 8011f48:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionIN865ChannelAdd( &channelAdd ) )
 8011f4c:	a802      	add	r0, sp, #8
 8011f4e:	f7ff ff33 	bl	8011db8 <RegionIN865ChannelAdd>
 8011f52:	2806      	cmp	r0, #6
 8011f54:	d80b      	bhi.n	8011f6e <RegionIN865NewChannelReq+0x4a>
 8011f56:	e8df f000 	tbb	[pc, r0]
 8011f5a:	0a04      	.short	0x0a04
 8011f5c:	060e0a0a 	.word	0x060e0a0a
 8011f60:	08          	.byte	0x08
 8011f61:	00          	.byte	0x00
 8011f62:	2003      	movs	r0, #3
 8011f64:	e7eb      	b.n	8011f3e <RegionIN865NewChannelReq+0x1a>
                status &= 0xFD;
 8011f66:	2001      	movs	r0, #1
                break;
 8011f68:	e7e9      	b.n	8011f3e <RegionIN865NewChannelReq+0x1a>
                status &= 0xFC;
 8011f6a:	2000      	movs	r0, #0
                break;
 8011f6c:	e7e7      	b.n	8011f3e <RegionIN865NewChannelReq+0x1a>
                status &= 0xFC;
 8011f6e:	2000      	movs	r0, #0
                break;
 8011f70:	e7e5      	b.n	8011f3e <RegionIN865NewChannelReq+0x1a>
            status &= 0xFC;
 8011f72:	2000      	movs	r0, #0
 8011f74:	e7e3      	b.n	8011f3e <RegionIN865NewChannelReq+0x1a>
                status &= 0xFE;
 8011f76:	2002      	movs	r0, #2
 8011f78:	e7e1      	b.n	8011f3e <RegionIN865NewChannelReq+0x1a>
	...

08011f7c <RegionIN865SetContinuousWave>:

void RegionIN865SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8011f7c:	b538      	push	{r3, r4, r5, lr}
 8011f7e:	4604      	mov	r4, r0
#if defined( REGION_IN865 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8011f80:	4b12      	ldr	r3, [pc, #72]	; (8011fcc <RegionIN865SetContinuousWave+0x50>)
 8011f82:	6819      	ldr	r1, [r3, #0]
 8011f84:	4d12      	ldr	r5, [pc, #72]	; (8011fd0 <RegionIN865SetContinuousWave+0x54>)
 8011f86:	682b      	ldr	r3, [r5, #0]
 8011f88:	7802      	ldrb	r2, [r0, #0]
 8011f8a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011f8e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8011f92:	7a53      	ldrb	r3, [r2, #9]
 8011f94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011f98:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8011f9c:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8011fa0:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8011fa4:	f7fd fdd7 	bl	800fb56 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8011fa8:	682a      	ldr	r2, [r5, #0]
 8011faa:	7823      	ldrb	r3, [r4, #0]
 8011fac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011fb0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8011fb4:	68a2      	ldr	r2, [r4, #8]
 8011fb6:	6861      	ldr	r1, [r4, #4]
 8011fb8:	f7fd fcea 	bl	800f990 <RegionCommonComputeTxPower>
 8011fbc:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8011fbe:	4b05      	ldr	r3, [pc, #20]	; (8011fd4 <RegionIN865SetContinuousWave+0x58>)
 8011fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fc2:	89a2      	ldrh	r2, [r4, #12]
 8011fc4:	4628      	mov	r0, r5
 8011fc6:	4798      	blx	r3
#endif /* REGION_IN865 */
}
 8011fc8:	bd38      	pop	{r3, r4, r5, pc}
 8011fca:	bf00      	nop
 8011fcc:	20001458 	.word	0x20001458
 8011fd0:	2000145c 	.word	0x2000145c
 8011fd4:	08018400 	.word	0x08018400

08011fd8 <RegionIN865ApplyDrOffset>:

uint8_t RegionIN865ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_IN865 )
    // Apply offset formula
    return MIN( DR_5, MAX( DR_0, dr - EffectiveRx1DrOffsetIN865[drOffset] ) );
 8011fd8:	4b05      	ldr	r3, [pc, #20]	; (8011ff0 <RegionIN865ApplyDrOffset+0x18>)
 8011fda:	5698      	ldrsb	r0, [r3, r2]
 8011fdc:	1a09      	subs	r1, r1, r0
 8011fde:	2905      	cmp	r1, #5
 8011fe0:	dc03      	bgt.n	8011fea <RegionIN865ApplyDrOffset+0x12>
 8011fe2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8011fe6:	b2c8      	uxtb	r0, r1
 8011fe8:	4770      	bx	lr
 8011fea:	2005      	movs	r0, #5
#else
    return 0;
#endif /* REGION_IN865 */
}
 8011fec:	4770      	bx	lr
 8011fee:	bf00      	nop
 8011ff0:	08017e34 	.word	0x08017e34

08011ff4 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 8011ff4:	b510      	push	{r4, lr}
 8011ff6:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8011ff8:	4b05      	ldr	r3, [pc, #20]	; (8012010 <VerifyRfFreq+0x1c>)
 8011ffa:	6a1b      	ldr	r3, [r3, #32]
 8011ffc:	4798      	blx	r3
 8011ffe:	b120      	cbz	r0, 801200a <VerifyRfFreq+0x16>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq < 864000000 ) ||  ( freq > 870000000 ) )
 8012000:	4b04      	ldr	r3, [pc, #16]	; (8012014 <VerifyRfFreq+0x20>)
 8012002:	4423      	add	r3, r4
 8012004:	4a04      	ldr	r2, [pc, #16]	; (8012018 <VerifyRfFreq+0x24>)
 8012006:	4293      	cmp	r3, r2
 8012008:	d800      	bhi.n	801200c <VerifyRfFreq+0x18>
    {
        return false;
    }
    return true;
}
 801200a:	bd10      	pop	{r4, pc}
        return false;
 801200c:	2000      	movs	r0, #0
 801200e:	e7fc      	b.n	801200a <VerifyRfFreq+0x16>
 8012010:	08018400 	.word	0x08018400
 8012014:	cc806800 	.word	0xcc806800
 8012018:	005b8d80 	.word	0x005b8d80

0801201c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801201c:	b570      	push	{r4, r5, r6, lr}
 801201e:	b084      	sub	sp, #16
 8012020:	4605      	mov	r5, r0
 8012022:	460c      	mov	r4, r1
    int8_t phyDr = DataratesRU864[datarate];
 8012024:	4b13      	ldr	r3, [pc, #76]	; (8012074 <GetTimeOnAir+0x58>)
 8012026:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsRU864 );
 8012028:	4913      	ldr	r1, [pc, #76]	; (8012078 <GetTimeOnAir+0x5c>)
 801202a:	f7fd fd99 	bl	800fb60 <RegionCommonGetBandwidth>
 801202e:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 8012030:	2d07      	cmp	r5, #7
 8012032:	d00e      	beq.n	8012052 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8012034:	4b11      	ldr	r3, [pc, #68]	; (801207c <GetTimeOnAir+0x60>)
 8012036:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8012038:	2001      	movs	r0, #1
 801203a:	9003      	str	r0, [sp, #12]
 801203c:	b2e4      	uxtb	r4, r4
 801203e:	9402      	str	r4, [sp, #8]
 8012040:	2300      	movs	r3, #0
 8012042:	9301      	str	r3, [sp, #4]
 8012044:	2308      	movs	r3, #8
 8012046:	9300      	str	r3, [sp, #0]
 8012048:	4603      	mov	r3, r0
 801204a:	4632      	mov	r2, r6
 801204c:	47a8      	blx	r5
    }
    return timeOnAir;
}
 801204e:	b004      	add	sp, #16
 8012050:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8012052:	4b0a      	ldr	r3, [pc, #40]	; (801207c <GetTimeOnAir+0x60>)
 8012054:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8012056:	2301      	movs	r3, #1
 8012058:	9303      	str	r3, [sp, #12]
 801205a:	b2e4      	uxtb	r4, r4
 801205c:	9402      	str	r4, [sp, #8]
 801205e:	2000      	movs	r0, #0
 8012060:	9001      	str	r0, [sp, #4]
 8012062:	2305      	movs	r3, #5
 8012064:	9300      	str	r3, [sp, #0]
 8012066:	4603      	mov	r3, r0
 8012068:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801206c:	fb02 f206 	mul.w	r2, r2, r6
 8012070:	47a8      	blx	r5
 8012072:	e7ec      	b.n	801204e <GetTimeOnAir+0x32>
 8012074:	08017e6c 	.word	0x08017e6c
 8012078:	08017e4c 	.word	0x08017e4c
 801207c:	08018400 	.word	0x08018400

08012080 <RegionRU864GetPhyParam>:
#endif /* REGION_RU864 */

PhyParam_t RegionRU864GetPhyParam( GetPhyParams_t* getPhy )
{
 8012080:	b500      	push	{lr}
 8012082:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 8012084:	2300      	movs	r3, #0
 8012086:	9304      	str	r3, [sp, #16]

#if defined( REGION_RU864 )
    switch( getPhy->Attribute )
 8012088:	7803      	ldrb	r3, [r0, #0]
 801208a:	3b0b      	subs	r3, #11
 801208c:	2b2e      	cmp	r3, #46	; 0x2e
 801208e:	d830      	bhi.n	80120f2 <RegionRU864GetPhyParam+0x72>
 8012090:	e8df f003 	tbb	[pc, r3]
 8012094:	3f393633 	.word	0x3f393633
 8012098:	504c4845 	.word	0x504c4845
 801209c:	605c5854 	.word	0x605c5854
 80120a0:	6c2f692f 	.word	0x6c2f692f
 80120a4:	2f7b7872 	.word	0x2f7b7872
 80120a8:	18837f2f 	.word	0x18837f2f
 80120ac:	2f2f2f2f 	.word	0x2f2f2f2f
 80120b0:	2f2f2f2f 	.word	0x2f2f2f2f
 80120b4:	2f2f2f2f 	.word	0x2f2f2f2f
 80120b8:	9389862f 	.word	0x9389862f
 80120bc:	99962f2f 	.word	0x99962f2f
 80120c0:	9c2f      	.short	0x9c2f
 80120c2:	a2          	.byte	0xa2
 80120c3:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80120c4:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80120c8:	f88d 3004 	strb.w	r3, [sp, #4]
 80120cc:	2307      	movs	r3, #7
 80120ce:	f88d 3005 	strb.w	r3, [sp, #5]
 80120d2:	2300      	movs	r3, #0
 80120d4:	f88d 3006 	strb.w	r3, [sp, #6]
 80120d8:	2308      	movs	r3, #8
 80120da:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )RU864_TX_MAX_DATARATE,
                .MinDr = ( int8_t )RU864_TX_MIN_DATARATE,
                .NbChannels = RU864_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80120de:	4b42      	ldr	r3, [pc, #264]	; (80121e8 <RegionRU864GetPhyParam+0x168>)
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80120e6:	9202      	str	r2, [sp, #8]
 80120e8:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80120ea:	a801      	add	r0, sp, #4
 80120ec:	f7fd fd14 	bl	800fb18 <RegionCommonGetNextLowerTxDr>
 80120f0:	9004      	str	r0, [sp, #16]
        }
    }

#endif /* REGION_RU864 */
    return phyParam;
}
 80120f2:	9804      	ldr	r0, [sp, #16]
 80120f4:	b007      	add	sp, #28
 80120f6:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80120fa:	2340      	movs	r3, #64	; 0x40
 80120fc:	9304      	str	r3, [sp, #16]
            break;
 80120fe:	e7f8      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8012100:	2320      	movs	r3, #32
 8012102:	9304      	str	r3, [sp, #16]
            break;
 8012104:	e7f5      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRU864[getPhy->Datarate];
 8012106:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801210a:	4a38      	ldr	r2, [pc, #224]	; (80121ec <RegionRU864GetPhyParam+0x16c>)
 801210c:	5cd3      	ldrb	r3, [r2, r3]
 801210e:	9304      	str	r3, [sp, #16]
            break;
 8012110:	e7ef      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterRU864[getPhy->Datarate];
 8012112:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8012116:	4a36      	ldr	r2, [pc, #216]	; (80121f0 <RegionRU864GetPhyParam+0x170>)
 8012118:	5cd3      	ldrb	r3, [r2, r3]
 801211a:	9304      	str	r3, [sp, #16]
            break;
 801211c:	e7e9      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RU864_DUTY_CYCLE_ENABLED;
 801211e:	2301      	movs	r3, #1
 8012120:	9304      	str	r3, [sp, #16]
            break;
 8012122:	e7e6      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RU864_MAX_RX_WINDOW;
 8012124:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8012128:	9304      	str	r3, [sp, #16]
            break;
 801212a:	e7e2      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801212c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012130:	9304      	str	r3, [sp, #16]
            break;
 8012132:	e7de      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8012134:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8012138:	9304      	str	r3, [sp, #16]
            break;
 801213a:	e7da      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801213c:	f241 3388 	movw	r3, #5000	; 0x1388
 8012140:	9304      	str	r3, [sp, #16]
            break;
 8012142:	e7d6      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8012144:	f241 7370 	movw	r3, #6000	; 0x1770
 8012148:	9304      	str	r3, [sp, #16]
            break;
 801214a:	e7d2      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 801214c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012150:	9304      	str	r3, [sp, #16]
            break;
 8012152:	e7ce      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8012154:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012158:	4826      	ldr	r0, [pc, #152]	; (80121f4 <RegionRU864GetPhyParam+0x174>)
 801215a:	f002 fa21 	bl	80145a0 <randr>
 801215e:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 8012162:	9004      	str	r0, [sp, #16]
            break;
 8012164:	e7c5      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RU864_RX_WND_2_FREQ;
 8012166:	4b24      	ldr	r3, [pc, #144]	; (80121f8 <RegionRU864GetPhyParam+0x178>)
 8012168:	9304      	str	r3, [sp, #16]
            break;
 801216a:	e7c2      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801216c:	4b1e      	ldr	r3, [pc, #120]	; (80121e8 <RegionRU864GetPhyParam+0x168>)
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8012174:	9304      	str	r3, [sp, #16]
            break;
 8012176:	e7bc      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8012178:	4b1b      	ldr	r3, [pc, #108]	; (80121e8 <RegionRU864GetPhyParam+0x168>)
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8012180:	9304      	str	r3, [sp, #16]
            break;
 8012182:	e7b6      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RU864_MAX_NB_CHANNELS;
 8012184:	2308      	movs	r3, #8
 8012186:	9304      	str	r3, [sp, #16]
            break;
 8012188:	e7b3      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 801218a:	4b17      	ldr	r3, [pc, #92]	; (80121e8 <RegionRU864GetPhyParam+0x168>)
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	9304      	str	r3, [sp, #16]
            break;
 8012190:	e7af      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
            phyParam.fValue = RU864_DEFAULT_MAX_EIRP;
 8012192:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8012196:	9304      	str	r3, [sp, #16]
            break;
 8012198:	e7ab      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
            phyParam.fValue = RU864_DEFAULT_ANTENNA_GAIN;
 801219a:	4b18      	ldr	r3, [pc, #96]	; (80121fc <RegionRU864GetPhyParam+0x17c>)
 801219c:	9304      	str	r3, [sp, #16]
            break;
 801219e:	e7a8      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RU864_BEACON_CHANNEL_FREQ;
 80121a0:	4b15      	ldr	r3, [pc, #84]	; (80121f8 <RegionRU864GetPhyParam+0x178>)
 80121a2:	9304      	str	r3, [sp, #16]
            break;
 80121a4:	e7a5      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = RU864_BEACON_SIZE;
 80121a6:	2311      	movs	r3, #17
 80121a8:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = RU864_RFU1_SIZE;
 80121ac:	2302      	movs	r3, #2
 80121ae:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = RU864_RFU2_SIZE;
 80121b2:	2300      	movs	r3, #0
 80121b4:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 80121b8:	e79b      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RU864_BEACON_CHANNEL_DR;
 80121ba:	2303      	movs	r3, #3
 80121bc:	9304      	str	r3, [sp, #16]
            break;
 80121be:	e798      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RU864_PING_SLOT_CHANNEL_FREQ;
 80121c0:	4b0f      	ldr	r3, [pc, #60]	; (8012200 <RegionRU864GetPhyParam+0x180>)
 80121c2:	9304      	str	r3, [sp, #16]
            break;
 80121c4:	e795      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RU864_PING_SLOT_CHANNEL_DR;
 80121c6:	2303      	movs	r3, #3
 80121c8:	9304      	str	r3, [sp, #16]
            break;
 80121ca:	e792      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = DataratesRU864[getPhy->Datarate];
 80121cc:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80121d0:	4a0c      	ldr	r2, [pc, #48]	; (8012204 <RegionRU864GetPhyParam+0x184>)
 80121d2:	5cd3      	ldrb	r3, [r2, r3]
 80121d4:	9304      	str	r3, [sp, #16]
            break;
 80121d6:	e78c      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsRU864 );
 80121d8:	490b      	ldr	r1, [pc, #44]	; (8012208 <RegionRU864GetPhyParam+0x188>)
 80121da:	f990 0001 	ldrsb.w	r0, [r0, #1]
 80121de:	f7fd fcbf 	bl	800fb60 <RegionCommonGetBandwidth>
 80121e2:	9004      	str	r0, [sp, #16]
            break;
 80121e4:	e785      	b.n	80120f2 <RegionRU864GetPhyParam+0x72>
 80121e6:	bf00      	nop
 80121e8:	20001464 	.word	0x20001464
 80121ec:	08017e74 	.word	0x08017e74
 80121f0:	08017e7c 	.word	0x08017e7c
 80121f4:	fffffc18 	.word	0xfffffc18
 80121f8:	33cd69e0 	.word	0x33cd69e0
 80121fc:	4009999a 	.word	0x4009999a
 8012200:	33ca5ca0 	.word	0x33ca5ca0
 8012204:	08017e6c 	.word	0x08017e6c
 8012208:	08017e4c 	.word	0x08017e4c

0801220c <RegionRU864SetBandTxDone>:

void RegionRU864SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801220c:	b530      	push	{r4, r5, lr}
 801220e:	b083      	sub	sp, #12
#if defined( REGION_RU864 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8012210:	4b0b      	ldr	r3, [pc, #44]	; (8012240 <RegionRU864SetBandTxDone+0x34>)
 8012212:	681d      	ldr	r5, [r3, #0]
 8012214:	4b0b      	ldr	r3, [pc, #44]	; (8012244 <RegionRU864SetBandTxDone+0x38>)
 8012216:	681a      	ldr	r2, [r3, #0]
 8012218:	7803      	ldrb	r3, [r0, #0]
 801221a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801221e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012222:	7a5b      	ldrb	r3, [r3, #9]
 8012224:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8012228:	6903      	ldr	r3, [r0, #16]
 801222a:	9300      	str	r3, [sp, #0]
 801222c:	68c3      	ldr	r3, [r0, #12]
 801222e:	7842      	ldrb	r2, [r0, #1]
 8012230:	6881      	ldr	r1, [r0, #8]
 8012232:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 8012236:	f7fd fa5b 	bl	800f6f0 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_RU864 */
}
 801223a:	b003      	add	sp, #12
 801223c:	bd30      	pop	{r4, r5, pc}
 801223e:	bf00      	nop
 8012240:	20001460 	.word	0x20001460
 8012244:	20001464 	.word	0x20001464

08012248 <RegionRU864InitDefaults>:

void RegionRU864InitDefaults( InitDefaultsParams_t* params )
{
 8012248:	b530      	push	{r4, r5, lr}
 801224a:	b087      	sub	sp, #28
#if defined( REGION_RU864 )
    Band_t bands[RU864_MAX_NB_BANDS] =
 801224c:	2364      	movs	r3, #100	; 0x64
 801224e:	f8ad 3000 	strh.w	r3, [sp]
 8012252:	2300      	movs	r3, #0
 8012254:	f88d 3002 	strb.w	r3, [sp, #2]
 8012258:	9301      	str	r3, [sp, #4]
 801225a:	9302      	str	r3, [sp, #8]
 801225c:	9303      	str	r3, [sp, #12]
 801225e:	9304      	str	r3, [sp, #16]
 8012260:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        RU864_BAND0
    };

    switch( params->Type )
 8012264:	7a03      	ldrb	r3, [r0, #8]
 8012266:	2b01      	cmp	r3, #1
 8012268:	d02b      	beq.n	80122c2 <RegionRU864InitDefaults+0x7a>
 801226a:	2b02      	cmp	r3, #2
 801226c:	d036      	beq.n	80122dc <RegionRU864InitDefaults+0x94>
 801226e:	b10b      	cbz	r3, 8012274 <RegionRU864InitDefaults+0x2c>
        {
            break;
        }
    }
#endif /* REGION_RU864 */
}
 8012270:	b007      	add	sp, #28
 8012272:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8012274:	6803      	ldr	r3, [r0, #0]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d0fa      	beq.n	8012270 <RegionRU864InitDefaults+0x28>
 801227a:	6842      	ldr	r2, [r0, #4]
 801227c:	2a00      	cmp	r2, #0
 801227e:	d0f7      	beq.n	8012270 <RegionRU864InitDefaults+0x28>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8012280:	491b      	ldr	r1, [pc, #108]	; (80122f0 <RegionRU864InitDefaults+0xa8>)
 8012282:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8012284:	4c1b      	ldr	r4, [pc, #108]	; (80122f4 <RegionRU864InitDefaults+0xac>)
 8012286:	6022      	str	r2, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * RU864_MAX_NB_BANDS );
 8012288:	2218      	movs	r2, #24
 801228a:	4669      	mov	r1, sp
 801228c:	4618      	mov	r0, r3
 801228e:	f002 f994 	bl	80145ba <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) RU864_LC1;
 8012292:	6824      	ldr	r4, [r4, #0]
 8012294:	4b18      	ldr	r3, [pc, #96]	; (80122f8 <RegionRU864InitDefaults+0xb0>)
 8012296:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801229a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) RU864_LC2;
 801229e:	f104 050c 	add.w	r5, r4, #12
 80122a2:	330c      	adds	r3, #12
 80122a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80122a8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 80122ac:	2303      	movs	r3, #3
 80122ae:	f8a4 348c 	strh.w	r3, [r4, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80122b2:	2201      	movs	r2, #1
 80122b4:	f204 418c 	addw	r1, r4, #1164	; 0x48c
 80122b8:	f504 6090 	add.w	r0, r4, #1152	; 0x480
 80122bc:	f7fd fa07 	bl	800f6ce <RegionCommonChanMaskCopy>
            break;
 80122c0:	e7d6      	b.n	8012270 <RegionRU864InitDefaults+0x28>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80122c2:	4b0c      	ldr	r3, [pc, #48]	; (80122f4 <RegionRU864InitDefaults+0xac>)
 80122c4:	6818      	ldr	r0, [r3, #0]
 80122c6:	2300      	movs	r3, #0
 80122c8:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80122ca:	6103      	str	r3, [r0, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80122cc:	2201      	movs	r2, #1
 80122ce:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 80122d2:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 80122d6:	f7fd f9fa 	bl	800f6ce <RegionCommonChanMaskCopy>
            break;
 80122da:	e7c9      	b.n	8012270 <RegionRU864InitDefaults+0x28>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 80122dc:	4b05      	ldr	r3, [pc, #20]	; (80122f4 <RegionRU864InitDefaults+0xac>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 80122e4:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 80122e8:	430a      	orrs	r2, r1
 80122ea:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 80122ee:	e7bf      	b.n	8012270 <RegionRU864InitDefaults+0x28>
 80122f0:	20001460 	.word	0x20001460
 80122f4:	20001464 	.word	0x20001464
 80122f8:	08017674 	.word	0x08017674

080122fc <RegionRU864Verify>:

bool RegionRU864Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80122fc:	b508      	push	{r3, lr}
#if defined( REGION_RU864 )
    switch( phyAttribute )
 80122fe:	290f      	cmp	r1, #15
 8012300:	d837      	bhi.n	8012372 <RegionRU864Verify+0x76>
 8012302:	e8df f001 	tbb	[pc, r1]
 8012306:	360a      	.short	0x360a
 8012308:	0e363636 	.word	0x0e363636
 801230c:	2c362218 	.word	0x2c362218
 8012310:	3636362c 	.word	0x3636362c
 8012314:	0836      	.short	0x0836
        case PHY_DUTY_CYCLE:
        {
            return RU864_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 8012316:	2001      	movs	r0, #1
 8012318:	e02c      	b.n	8012374 <RegionRU864Verify+0x78>
            return VerifyRfFreq( verify->Frequency );
 801231a:	6800      	ldr	r0, [r0, #0]
 801231c:	f7ff fe6a 	bl	8011ff4 <VerifyRfFreq>
 8012320:	e028      	b.n	8012374 <RegionRU864Verify+0x78>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, RU864_TX_MIN_DATARATE, RU864_TX_MAX_DATARATE );
 8012322:	2207      	movs	r2, #7
 8012324:	2100      	movs	r1, #0
 8012326:	f990 0000 	ldrsb.w	r0, [r0]
 801232a:	f7fd f95e 	bl	800f5ea <RegionCommonValueInRange>
 801232e:	3800      	subs	r0, #0
 8012330:	bf18      	it	ne
 8012332:	2001      	movne	r0, #1
 8012334:	e01e      	b.n	8012374 <RegionRU864Verify+0x78>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8012336:	2205      	movs	r2, #5
 8012338:	2100      	movs	r1, #0
 801233a:	f990 0000 	ldrsb.w	r0, [r0]
 801233e:	f7fd f954 	bl	800f5ea <RegionCommonValueInRange>
 8012342:	3800      	subs	r0, #0
 8012344:	bf18      	it	ne
 8012346:	2001      	movne	r0, #1
 8012348:	e014      	b.n	8012374 <RegionRU864Verify+0x78>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, RU864_RX_MIN_DATARATE, RU864_RX_MAX_DATARATE );
 801234a:	2207      	movs	r2, #7
 801234c:	2100      	movs	r1, #0
 801234e:	f990 0000 	ldrsb.w	r0, [r0]
 8012352:	f7fd f94a 	bl	800f5ea <RegionCommonValueInRange>
 8012356:	3800      	subs	r0, #0
 8012358:	bf18      	it	ne
 801235a:	2001      	movne	r0, #1
 801235c:	e00a      	b.n	8012374 <RegionRU864Verify+0x78>
            return RegionCommonValueInRange( verify->TxPower, RU864_MAX_TX_POWER, RU864_MIN_TX_POWER );
 801235e:	2207      	movs	r2, #7
 8012360:	2100      	movs	r1, #0
 8012362:	f990 0000 	ldrsb.w	r0, [r0]
 8012366:	f7fd f940 	bl	800f5ea <RegionCommonValueInRange>
 801236a:	3800      	subs	r0, #0
 801236c:	bf18      	it	ne
 801236e:	2001      	movne	r0, #1
 8012370:	e000      	b.n	8012374 <RegionRU864Verify+0x78>
            return false;
 8012372:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_RU864 */
}
 8012374:	bd08      	pop	{r3, pc}
	...

08012378 <RegionRU864ChanMaskSet>:
    }
#endif /* REGION_RU864 */
}

bool RegionRU864ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8012378:	b508      	push	{r3, lr}
#if defined( REGION_RU864 )
    switch( chanMaskSet->ChannelsMaskType )
 801237a:	7903      	ldrb	r3, [r0, #4]
 801237c:	b11b      	cbz	r3, 8012386 <RegionRU864ChanMaskSet+0xe>
 801237e:	2b01      	cmp	r3, #1
 8012380:	d00b      	beq.n	801239a <RegionRU864ChanMaskSet+0x22>
 8012382:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_RU864 */
}
 8012384:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8012386:	4b0a      	ldr	r3, [pc, #40]	; (80123b0 <RegionRU864ChanMaskSet+0x38>)
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	2201      	movs	r2, #1
 801238c:	6801      	ldr	r1, [r0, #0]
 801238e:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8012392:	f7fd f99c 	bl	800f6ce <RegionCommonChanMaskCopy>
    return true;
 8012396:	2001      	movs	r0, #1
            break;
 8012398:	e7f4      	b.n	8012384 <RegionRU864ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 801239a:	4b05      	ldr	r3, [pc, #20]	; (80123b0 <RegionRU864ChanMaskSet+0x38>)
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	2201      	movs	r2, #1
 80123a0:	6801      	ldr	r1, [r0, #0]
 80123a2:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 80123a6:	f7fd f992 	bl	800f6ce <RegionCommonChanMaskCopy>
    return true;
 80123aa:	2001      	movs	r0, #1
            break;
 80123ac:	e7ea      	b.n	8012384 <RegionRU864ChanMaskSet+0xc>
 80123ae:	bf00      	nop
 80123b0:	20001464 	.word	0x20001464

080123b4 <RegionRU864ComputeRxWindowParameters>:

void RegionRU864ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80123b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123b6:	b083      	sub	sp, #12
 80123b8:	460e      	mov	r6, r1
 80123ba:	4617      	mov	r7, r2
 80123bc:	461c      	mov	r4, r3
#if defined( REGION_RU864 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, RU864_RX_MAX_DATARATE );
 80123be:	2807      	cmp	r0, #7
 80123c0:	bfa8      	it	ge
 80123c2:	2007      	movge	r0, #7
 80123c4:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsRU864 );
 80123c6:	4913      	ldr	r1, [pc, #76]	; (8012414 <RegionRU864ComputeRxWindowParameters+0x60>)
 80123c8:	f7fd fbca 	bl	800fb60 <RegionCommonGetBandwidth>
 80123cc:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80123ce:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80123d2:	2b07      	cmp	r3, #7
 80123d4:	d017      	beq.n	8012406 <RegionRU864ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesRU864[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesRU864[rxConfigParams->Datarate], BandwidthsRU864[rxConfigParams->Datarate] );
 80123d6:	4a0f      	ldr	r2, [pc, #60]	; (8012414 <RegionRU864ComputeRxWindowParameters+0x60>)
 80123d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80123dc:	4a0e      	ldr	r2, [pc, #56]	; (8012418 <RegionRU864ComputeRxWindowParameters+0x64>)
 80123de:	5cd0      	ldrb	r0, [r2, r3]
 80123e0:	f7fd fa8e 	bl	800f900 <RegionCommonComputeSymbolTimeLoRa>
 80123e4:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80123e6:	4b0d      	ldr	r3, [pc, #52]	; (801241c <RegionRU864ComputeRxWindowParameters+0x68>)
 80123e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80123ea:	4798      	blx	r3
 80123ec:	4603      	mov	r3, r0
 80123ee:	f104 020c 	add.w	r2, r4, #12
 80123f2:	9201      	str	r2, [sp, #4]
 80123f4:	3408      	adds	r4, #8
 80123f6:	9400      	str	r4, [sp, #0]
 80123f8:	463a      	mov	r2, r7
 80123fa:	4631      	mov	r1, r6
 80123fc:	4628      	mov	r0, r5
 80123fe:	f7fd fa8d 	bl	800f91c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_RU864 */
}
 8012402:	b003      	add	sp, #12
 8012404:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesRU864[rxConfigParams->Datarate] );
 8012406:	4a04      	ldr	r2, [pc, #16]	; (8012418 <RegionRU864ComputeRxWindowParameters+0x64>)
 8012408:	5cd0      	ldrb	r0, [r2, r3]
 801240a:	f7fd fa81 	bl	800f910 <RegionCommonComputeSymbolTimeFsk>
 801240e:	4605      	mov	r5, r0
 8012410:	e7e9      	b.n	80123e6 <RegionRU864ComputeRxWindowParameters+0x32>
 8012412:	bf00      	nop
 8012414:	08017e4c 	.word	0x08017e4c
 8012418:	08017e6c 	.word	0x08017e6c
 801241c:	08018400 	.word	0x08018400

08012420 <RegionRU864RxConfig>:

bool RegionRU864RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8012420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012424:	b08a      	sub	sp, #40	; 0x28
 8012426:	4604      	mov	r4, r0
 8012428:	460f      	mov	r7, r1
#if defined( REGION_RU864 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801242a:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 801242e:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 8012432:	4b37      	ldr	r3, [pc, #220]	; (8012510 <RegionRU864RxConfig+0xf0>)
 8012434:	685b      	ldr	r3, [r3, #4]
 8012436:	4798      	blx	r3
 8012438:	2800      	cmp	r0, #0
 801243a:	d167      	bne.n	801250c <RegionRU864RxConfig+0xec>
 801243c:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801243e:	7ce3      	ldrb	r3, [r4, #19]
 8012440:	b983      	cbnz	r3, 8012464 <RegionRU864RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8012442:	4b34      	ldr	r3, [pc, #208]	; (8012514 <RegionRU864RxConfig+0xf4>)
 8012444:	681a      	ldr	r2, [r3, #0]
 8012446:	7823      	ldrb	r3, [r4, #0]
 8012448:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 801244c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8012450:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012454:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012458:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801245c:	f1b8 0f00 	cmp.w	r8, #0
 8012460:	d100      	bne.n	8012464 <RegionRU864RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8012462:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesRU864[dr];
 8012464:	4b2c      	ldr	r3, [pc, #176]	; (8012518 <RegionRU864RxConfig+0xf8>)
 8012466:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 801246a:	4b29      	ldr	r3, [pc, #164]	; (8012510 <RegionRU864RxConfig+0xf0>)
 801246c:	68db      	ldr	r3, [r3, #12]
 801246e:	4640      	mov	r0, r8
 8012470:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8012472:	2d07      	cmp	r5, #7
 8012474:	d02b      	beq.n	80124ce <RegionRU864RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8012476:	4b26      	ldr	r3, [pc, #152]	; (8012510 <RegionRU864RxConfig+0xf0>)
 8012478:	f8d3 a018 	ldr.w	sl, [r3, #24]
 801247c:	7ca3      	ldrb	r3, [r4, #18]
 801247e:	9309      	str	r3, [sp, #36]	; 0x24
 8012480:	2601      	movs	r6, #1
 8012482:	9608      	str	r6, [sp, #32]
 8012484:	2300      	movs	r3, #0
 8012486:	9307      	str	r3, [sp, #28]
 8012488:	9306      	str	r3, [sp, #24]
 801248a:	9305      	str	r3, [sp, #20]
 801248c:	9304      	str	r3, [sp, #16]
 801248e:	9303      	str	r3, [sp, #12]
 8012490:	8922      	ldrh	r2, [r4, #8]
 8012492:	9202      	str	r2, [sp, #8]
 8012494:	2208      	movs	r2, #8
 8012496:	9201      	str	r2, [sp, #4]
 8012498:	9300      	str	r3, [sp, #0]
 801249a:	4633      	mov	r3, r6
 801249c:	464a      	mov	r2, r9
 801249e:	78a1      	ldrb	r1, [r4, #2]
 80124a0:	4630      	mov	r0, r6
 80124a2:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 80124a4:	7c63      	ldrb	r3, [r4, #17]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d02d      	beq.n	8012506 <RegionRU864RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterRU864[dr];
 80124aa:	4b1c      	ldr	r3, [pc, #112]	; (801251c <RegionRU864RxConfig+0xfc>)
 80124ac:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateRU864[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80124ae:	4b18      	ldr	r3, [pc, #96]	; (8012510 <RegionRU864RxConfig+0xf0>)
 80124b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80124b2:	310d      	adds	r1, #13
 80124b4:	b2c9      	uxtb	r1, r1
 80124b6:	4630      	mov	r0, r6
 80124b8:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80124ba:	462a      	mov	r2, r5
 80124bc:	4641      	mov	r1, r8
 80124be:	7ce0      	ldrb	r0, [r4, #19]
 80124c0:	f7fd fb60 	bl	800fb84 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 80124c4:	703d      	strb	r5, [r7, #0]
    return true;
 80124c6:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_RU864 */
}
 80124c8:	b00a      	add	sp, #40	; 0x28
 80124ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80124ce:	4b10      	ldr	r3, [pc, #64]	; (8012510 <RegionRU864RxConfig+0xf0>)
 80124d0:	f8d3 a018 	ldr.w	sl, [r3, #24]
 80124d4:	7ca3      	ldrb	r3, [r4, #18]
 80124d6:	9309      	str	r3, [sp, #36]	; 0x24
 80124d8:	2000      	movs	r0, #0
 80124da:	9008      	str	r0, [sp, #32]
 80124dc:	9007      	str	r0, [sp, #28]
 80124de:	9006      	str	r0, [sp, #24]
 80124e0:	2301      	movs	r3, #1
 80124e2:	9305      	str	r3, [sp, #20]
 80124e4:	9004      	str	r0, [sp, #16]
 80124e6:	9003      	str	r0, [sp, #12]
 80124e8:	8923      	ldrh	r3, [r4, #8]
 80124ea:	9302      	str	r3, [sp, #8]
 80124ec:	2305      	movs	r3, #5
 80124ee:	9301      	str	r3, [sp, #4]
 80124f0:	4b0b      	ldr	r3, [pc, #44]	; (8012520 <RegionRU864RxConfig+0x100>)
 80124f2:	9300      	str	r3, [sp, #0]
 80124f4:	4603      	mov	r3, r0
 80124f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80124fa:	fb02 f209 	mul.w	r2, r2, r9
 80124fe:	f24c 3150 	movw	r1, #50000	; 0xc350
 8012502:	47d0      	blx	sl
 8012504:	e7ce      	b.n	80124a4 <RegionRU864RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateRU864[dr];
 8012506:	4b07      	ldr	r3, [pc, #28]	; (8012524 <RegionRU864RxConfig+0x104>)
 8012508:	5d59      	ldrb	r1, [r3, r5]
 801250a:	e7d0      	b.n	80124ae <RegionRU864RxConfig+0x8e>
        return false;
 801250c:	2000      	movs	r0, #0
 801250e:	e7db      	b.n	80124c8 <RegionRU864RxConfig+0xa8>
 8012510:	08018400 	.word	0x08018400
 8012514:	20001464 	.word	0x20001464
 8012518:	08017e6c 	.word	0x08017e6c
 801251c:	08017e7c 	.word	0x08017e7c
 8012520:	00014585 	.word	0x00014585
 8012524:	08017e74 	.word	0x08017e74

08012528 <RegionRU864TxConfig>:

bool RegionRU864TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8012528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801252c:	b08d      	sub	sp, #52	; 0x34
 801252e:	4604      	mov	r4, r0
 8012530:	460f      	mov	r7, r1
 8012532:	4690      	mov	r8, r2
#if defined( REGION_RU864 )
    RadioModems_t modem;
    int8_t phyDr = DataratesRU864[txConfig->Datarate];
 8012534:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8012538:	4a42      	ldr	r2, [pc, #264]	; (8012644 <RegionRU864TxConfig+0x11c>)
 801253a:	f912 a003 	ldrsb.w	sl, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801253e:	4b42      	ldr	r3, [pc, #264]	; (8012648 <RegionRU864TxConfig+0x120>)
 8012540:	6819      	ldr	r1, [r3, #0]
 8012542:	4d42      	ldr	r5, [pc, #264]	; (801264c <RegionRU864TxConfig+0x124>)
 8012544:	682b      	ldr	r3, [r5, #0]
 8012546:	7802      	ldrb	r2, [r0, #0]
 8012548:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801254c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8012550:	7a53      	ldrb	r3, [r2, #9]
 8012552:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012556:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801255a:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801255e:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8012562:	f7fd faf8 	bl	800fb56 <RegionCommonLimitTxPower>
 8012566:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsRU864 );
 8012568:	4939      	ldr	r1, [pc, #228]	; (8012650 <RegionRU864TxConfig+0x128>)
 801256a:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801256e:	f7fd faf7 	bl	800fb60 <RegionCommonGetBandwidth>
 8012572:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8012574:	68a2      	ldr	r2, [r4, #8]
 8012576:	6861      	ldr	r1, [r4, #4]
 8012578:	4630      	mov	r0, r6
 801257a:	f7fd fa09 	bl	800f990 <RegionCommonComputeTxPower>
 801257e:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8012580:	4b34      	ldr	r3, [pc, #208]	; (8012654 <RegionRU864TxConfig+0x12c>)
 8012582:	68da      	ldr	r2, [r3, #12]
 8012584:	6829      	ldr	r1, [r5, #0]
 8012586:	7823      	ldrb	r3, [r4, #0]
 8012588:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801258c:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8012590:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8012592:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8012596:	2b07      	cmp	r3, #7
 8012598:	d031      	beq.n	80125fe <RegionRU864TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801259a:	4b2e      	ldr	r3, [pc, #184]	; (8012654 <RegionRU864TxConfig+0x12c>)
 801259c:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 80125a0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80125a4:	9308      	str	r3, [sp, #32]
 80125a6:	2200      	movs	r2, #0
 80125a8:	9207      	str	r2, [sp, #28]
 80125aa:	9206      	str	r2, [sp, #24]
 80125ac:	9205      	str	r2, [sp, #20]
 80125ae:	2501      	movs	r5, #1
 80125b0:	9504      	str	r5, [sp, #16]
 80125b2:	9203      	str	r2, [sp, #12]
 80125b4:	2308      	movs	r3, #8
 80125b6:	9302      	str	r3, [sp, #8]
 80125b8:	9501      	str	r5, [sp, #4]
 80125ba:	f8cd a000 	str.w	sl, [sp]
 80125be:	464b      	mov	r3, r9
 80125c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80125c2:	4628      	mov	r0, r5
 80125c4:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80125c6:	4b21      	ldr	r3, [pc, #132]	; (801264c <RegionRU864TxConfig+0x124>)
 80125c8:	681a      	ldr	r2, [r3, #0]
 80125ca:	7823      	ldrb	r3, [r4, #0]
 80125cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80125d0:	f994 1001 	ldrsb.w	r1, [r4, #1]
 80125d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80125d8:	f7fd fb04 	bl	800fbe4 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80125dc:	89a1      	ldrh	r1, [r4, #12]
 80125de:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80125e2:	f7ff fd1b 	bl	801201c <GetTimeOnAir>
 80125e6:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80125ea:	4b1a      	ldr	r3, [pc, #104]	; (8012654 <RegionRU864TxConfig+0x12c>)
 80125ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80125ee:	7b21      	ldrb	r1, [r4, #12]
 80125f0:	4628      	mov	r0, r5
 80125f2:	4798      	blx	r3

    *txPower = txPowerLimited;
 80125f4:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_RU864 */
}
 80125f6:	2001      	movs	r0, #1
 80125f8:	b00d      	add	sp, #52	; 0x34
 80125fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 80125fe:	4b15      	ldr	r3, [pc, #84]	; (8012654 <RegionRU864TxConfig+0x12c>)
 8012600:	69dd      	ldr	r5, [r3, #28]
 8012602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012606:	fb03 f30a 	mul.w	r3, r3, sl
 801260a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801260e:	9208      	str	r2, [sp, #32]
 8012610:	f04f 0b00 	mov.w	fp, #0
 8012614:	f8cd b01c 	str.w	fp, [sp, #28]
 8012618:	f8cd b018 	str.w	fp, [sp, #24]
 801261c:	f8cd b014 	str.w	fp, [sp, #20]
 8012620:	2201      	movs	r2, #1
 8012622:	9204      	str	r2, [sp, #16]
 8012624:	f8cd b00c 	str.w	fp, [sp, #12]
 8012628:	2205      	movs	r2, #5
 801262a:	9202      	str	r2, [sp, #8]
 801262c:	f8cd b004 	str.w	fp, [sp, #4]
 8012630:	9300      	str	r3, [sp, #0]
 8012632:	464b      	mov	r3, r9
 8012634:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8012638:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801263a:	4658      	mov	r0, fp
 801263c:	47a8      	blx	r5
        modem = MODEM_FSK;
 801263e:	465d      	mov	r5, fp
 8012640:	e7c1      	b.n	80125c6 <RegionRU864TxConfig+0x9e>
 8012642:	bf00      	nop
 8012644:	08017e6c 	.word	0x08017e6c
 8012648:	20001460 	.word	0x20001460
 801264c:	20001464 	.word	0x20001464
 8012650:	08017e4c 	.word	0x08017e4c
 8012654:	08018400 	.word	0x08018400

08012658 <RegionRU864LinkAdrReq>:

uint8_t RegionRU864LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8012658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801265c:	b08e      	sub	sp, #56	; 0x38
 801265e:	4606      	mov	r6, r0
 8012660:	4689      	mov	r9, r1
 8012662:	4690      	mov	r8, r2
 8012664:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_RU864 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8012666:	2500      	movs	r5, #0
 8012668:	950c      	str	r5, [sp, #48]	; 0x30
 801266a:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 801266e:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 8012672:	f04f 0a07 	mov.w	sl, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8012676:	e02d      	b.n	80126d4 <RegionRU864LinkAdrReq+0x7c>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < RU864_MAX_NB_CHANNELS; i++ )
 8012678:	2400      	movs	r4, #0
        status = 0x07;
 801267a:	f04f 0a07 	mov.w	sl, #7
 801267e:	e00f      	b.n	80126a0 <RegionRU864LinkAdrReq+0x48>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8012680:	4b55      	ldr	r3, [pc, #340]	; (80127d8 <RegionRU864LinkAdrReq+0x180>)
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8012688:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801268c:	b133      	cbz	r3, 801269c <RegionRU864LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 801268e:	2301      	movs	r3, #1
 8012690:	40a3      	lsls	r3, r4
 8012692:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8012696:	430b      	orrs	r3, r1
 8012698:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < RU864_MAX_NB_CHANNELS; i++ )
 801269c:	3401      	adds	r4, #1
 801269e:	b2e4      	uxtb	r4, r4
 80126a0:	2c07      	cmp	r4, #7
 80126a2:	d817      	bhi.n	80126d4 <RegionRU864LinkAdrReq+0x7c>
                if( linkAdrParams.ChMaskCtrl == 6 )
 80126a4:	2a06      	cmp	r2, #6
 80126a6:	d0eb      	beq.n	8012680 <RegionRU864LinkAdrReq+0x28>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80126a8:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80126ac:	4123      	asrs	r3, r4
 80126ae:	f013 0f01 	tst.w	r3, #1
 80126b2:	d0f3      	beq.n	801269c <RegionRU864LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80126b4:	4b48      	ldr	r3, [pc, #288]	; (80127d8 <RegionRU864LinkAdrReq+0x180>)
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80126bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d1eb      	bne.n	801269c <RegionRU864LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80126c4:	f00a 0afe 	and.w	sl, sl, #254	; 0xfe
 80126c8:	e7e8      	b.n	801269c <RegionRU864LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 80126ca:	f04f 0a06 	mov.w	sl, #6
 80126ce:	e001      	b.n	80126d4 <RegionRU864LinkAdrReq+0x7c>
            status &= 0xFE; // Channel mask KO
 80126d0:	f04f 0a06 	mov.w	sl, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80126d4:	7a33      	ldrb	r3, [r6, #8]
 80126d6:	42ab      	cmp	r3, r5
 80126d8:	d919      	bls.n	801270e <RegionRU864LinkAdrReq+0xb6>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80126da:	6870      	ldr	r0, [r6, #4]
 80126dc:	a90c      	add	r1, sp, #48	; 0x30
 80126de:	4428      	add	r0, r5
 80126e0:	f7fd f8a6 	bl	800f830 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 80126e4:	b198      	cbz	r0, 801270e <RegionRU864LinkAdrReq+0xb6>
        bytesProcessed += nextIndex;
 80126e6:	4405      	add	r5, r0
 80126e8:	b2ed      	uxtb	r5, r5
        chMask = linkAdrParams.ChMask;
 80126ea:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80126ee:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80126f2:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 80126f6:	b90a      	cbnz	r2, 80126fc <RegionRU864LinkAdrReq+0xa4>
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d0e6      	beq.n	80126ca <RegionRU864LinkAdrReq+0x72>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80126fc:	1e53      	subs	r3, r2, #1
 80126fe:	b2db      	uxtb	r3, r3
 8012700:	2b04      	cmp	r3, #4
 8012702:	d9e5      	bls.n	80126d0 <RegionRU864LinkAdrReq+0x78>
 8012704:	2a06      	cmp	r2, #6
 8012706:	d9b7      	bls.n	8012678 <RegionRU864LinkAdrReq+0x20>
            status &= 0xFE; // Channel mask KO
 8012708:	f04f 0a06 	mov.w	sl, #6
 801270c:	e7e2      	b.n	80126d4 <RegionRU864LinkAdrReq+0x7c>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801270e:	2302      	movs	r3, #2
 8012710:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8012714:	7a73      	ldrb	r3, [r6, #9]
 8012716:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionRU864GetPhyParam( &getPhy );
 801271a:	a80a      	add	r0, sp, #40	; 0x28
 801271c:	f7ff fcb0 	bl	8012080 <RegionRU864GetPhyParam>

    linkAdrVerifyParams.Status = status;
 8012720:	f88d a008 	strb.w	sl, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8012724:	7ab3      	ldrb	r3, [r6, #10]
 8012726:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801272a:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 801272e:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8012732:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 8012736:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801273a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 801273e:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8012742:	f996 300b 	ldrsb.w	r3, [r6, #11]
 8012746:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801274a:	f996 300c 	ldrsb.w	r3, [r6, #12]
 801274e:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8012752:	f996 300d 	ldrsb.w	r3, [r6, #13]
 8012756:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = RU864_MAX_NB_CHANNELS;
 801275a:	2308      	movs	r3, #8
 801275c:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8012760:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8012764:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8012766:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = RU864_TX_MAX_DATARATE;
 801276a:	2307      	movs	r3, #7
 801276c:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8012770:	4a19      	ldr	r2, [pc, #100]	; (80127d8 <RegionRU864LinkAdrReq+0x180>)
 8012772:	6812      	ldr	r2, [r2, #0]
 8012774:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = RU864_MIN_TX_POWER;
 8012776:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = RU864_MAX_TX_POWER;
 801277a:	2300      	movs	r3, #0
 801277c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8012780:	6833      	ldr	r3, [r6, #0]
 8012782:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8012784:	ab0c      	add	r3, sp, #48	; 0x30
 8012786:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801278a:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 801278e:	a801      	add	r0, sp, #4
 8012790:	f7fd f86a 	bl	800f868 <RegionCommonLinkAdrReqVerifyParams>
 8012794:	4604      	mov	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8012796:	2807      	cmp	r0, #7
 8012798:	d010      	beq.n	80127bc <RegionRU864LinkAdrReq+0x164>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801279a:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 801279e:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 80127a2:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 80127a6:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 80127aa:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80127ae:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 80127b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80127b2:	701d      	strb	r5, [r3, #0]

#endif /* REGION_RU864 */
    return status;
}
 80127b4:	4620      	mov	r0, r4
 80127b6:	b00e      	add	sp, #56	; 0x38
 80127b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80127bc:	4e06      	ldr	r6, [pc, #24]	; (80127d8 <RegionRU864LinkAdrReq+0x180>)
 80127be:	6830      	ldr	r0, [r6, #0]
 80127c0:	220c      	movs	r2, #12
 80127c2:	2100      	movs	r1, #0
 80127c4:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 80127c8:	f001 ff0d 	bl	80145e6 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 80127cc:	6833      	ldr	r3, [r6, #0]
 80127ce:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 80127d2:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
 80127d6:	e7e0      	b.n	801279a <RegionRU864LinkAdrReq+0x142>
 80127d8:	20001464 	.word	0x20001464

080127dc <RegionRU864RxParamSetupReq>:

uint8_t RegionRU864RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80127dc:	b538      	push	{r3, r4, r5, lr}
 80127de:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_RU864 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 80127e0:	6840      	ldr	r0, [r0, #4]
 80127e2:	f7ff fc07 	bl	8011ff4 <VerifyRfFreq>
 80127e6:	b1a0      	cbz	r0, 8012812 <RegionRU864RxParamSetupReq+0x36>
    uint8_t status = 0x07;
 80127e8:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, RU864_RX_MIN_DATARATE, RU864_RX_MAX_DATARATE ) == false )
 80127ea:	2207      	movs	r2, #7
 80127ec:	2100      	movs	r1, #0
 80127ee:	f994 0000 	ldrsb.w	r0, [r4]
 80127f2:	f7fc fefa 	bl	800f5ea <RegionCommonValueInRange>
 80127f6:	b908      	cbnz	r0, 80127fc <RegionRU864RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 80127f8:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, RU864_MIN_RX1_DR_OFFSET, RU864_MAX_RX1_DR_OFFSET ) == false )
 80127fc:	2205      	movs	r2, #5
 80127fe:	2100      	movs	r1, #0
 8012800:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8012804:	f7fc fef1 	bl	800f5ea <RegionCommonValueInRange>
 8012808:	b908      	cbnz	r0, 801280e <RegionRU864RxParamSetupReq+0x32>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801280a:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_RU864 */
    return status;
}
 801280e:	4628      	mov	r0, r5
 8012810:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 8012812:	2506      	movs	r5, #6
 8012814:	e7e9      	b.n	80127ea <RegionRU864RxParamSetupReq+0xe>

08012816 <RegionRU864TxParamSetupReq>:

int8_t RegionRU864TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 8012816:	f04f 30ff 	mov.w	r0, #4294967295
 801281a:	4770      	bx	lr

0801281c <RegionRU864DlChannelReq>:

int8_t RegionRU864DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801281c:	b510      	push	{r4, lr}
 801281e:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_RU864 )

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8012820:	6840      	ldr	r0, [r0, #4]
 8012822:	f7ff fbe7 	bl	8011ff4 <VerifyRfFreq>
 8012826:	b170      	cbz	r0, 8012846 <RegionRU864DlChannelReq+0x2a>
    uint8_t status = 0x03;
 8012828:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801282a:	4b0b      	ldr	r3, [pc, #44]	; (8012858 <RegionRU864DlChannelReq+0x3c>)
 801282c:	681a      	ldr	r2, [r3, #0]
 801282e:	7823      	ldrb	r3, [r4, #0]
 8012830:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8012834:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8012838:	b909      	cbnz	r1, 801283e <RegionRU864DlChannelReq+0x22>
    {
        status &= 0xFD;
 801283a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801283e:	2803      	cmp	r0, #3
 8012840:	d003      	beq.n	801284a <RegionRU864DlChannelReq+0x2e>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_RU864 */
    return status;
}
 8012842:	b240      	sxtb	r0, r0
 8012844:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 8012846:	2002      	movs	r0, #2
 8012848:	e7ef      	b.n	801282a <RegionRU864DlChannelReq+0xe>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801284a:	6861      	ldr	r1, [r4, #4]
 801284c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012850:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012854:	6059      	str	r1, [r3, #4]
 8012856:	e7f4      	b.n	8012842 <RegionRU864DlChannelReq+0x26>
 8012858:	20001464 	.word	0x20001464

0801285c <RegionRU864AlternateDr>:
#if defined( REGION_RU864 )
    return currentDr;
#else
    return -1;
#endif /* REGION_RU864 */
}
 801285c:	4770      	bx	lr
	...

08012860 <RegionRU864NextChannel>:

LoRaMacStatus_t RegionRU864NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8012860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012862:	b095      	sub	sp, #84	; 0x54
 8012864:	4604      	mov	r4, r0
 8012866:	460f      	mov	r7, r1
 8012868:	4616      	mov	r6, r2
 801286a:	461d      	mov	r5, r3
#if defined( REGION_RU864 )
    uint8_t nbEnabledChannels = 0;
 801286c:	2100      	movs	r1, #0
 801286e:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    uint8_t nbRestrictedChannels = 0;
 8012872:	f88d 104e 	strb.w	r1, [sp, #78]	; 0x4e
    uint8_t enabledChannels[RU864_MAX_NB_CHANNELS] = { 0 };
 8012876:	9111      	str	r1, [sp, #68]	; 0x44
 8012878:	9112      	str	r1, [sp, #72]	; 0x48
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = RU864_JOIN_CHANNELS;
 801287a:	2303      	movs	r3, #3
 801287c:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8012880:	4b32      	ldr	r3, [pc, #200]	; (801294c <RegionRU864NextChannel+0xec>)
 8012882:	6818      	ldr	r0, [r3, #0]
 8012884:	2201      	movs	r2, #1
 8012886:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 801288a:	f7fc ff0a 	bl	800f6a2 <RegionCommonCountChannels>
 801288e:	b938      	cbnz	r0, 80128a0 <RegionRU864NextChannel+0x40>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8012890:	4b2e      	ldr	r3, [pc, #184]	; (801294c <RegionRU864NextChannel+0xec>)
 8012892:	681a      	ldr	r2, [r3, #0]
 8012894:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 8012898:	f043 0303 	orr.w	r3, r3, #3
 801289c:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80128a0:	7a63      	ldrb	r3, [r4, #9]
 80128a2:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80128a6:	7a23      	ldrb	r3, [r4, #8]
 80128a8:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80128ac:	4b27      	ldr	r3, [pc, #156]	; (801294c <RegionRU864NextChannel+0xec>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	f503 6290 	add.w	r2, r3, #1152	; 0x480
 80128b4:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80128b6:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 80128b8:	4b25      	ldr	r3, [pc, #148]	; (8012950 <RegionRU864NextChannel+0xf0>)
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = RU864_MAX_NB_CHANNELS;
 80128be:	2308      	movs	r3, #8
 80128c0:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 80128c4:	f10d 030a 	add.w	r3, sp, #10
 80128c8:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80128ca:	6823      	ldr	r3, [r4, #0]
 80128cc:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80128ce:	6863      	ldr	r3, [r4, #4]
 80128d0:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80128d2:	7aa3      	ldrb	r3, [r4, #10]
 80128d4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = RU864_MAX_NB_BANDS;
 80128d8:	2301      	movs	r3, #1
 80128da:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80128de:	ab0c      	add	r3, sp, #48	; 0x30
 80128e0:	6921      	ldr	r1, [r4, #16]
 80128e2:	68e0      	ldr	r0, [r4, #12]
 80128e4:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80128e8:	7d23      	ldrb	r3, [r4, #20]
 80128ea:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80128ee:	8ae1      	ldrh	r1, [r4, #22]
 80128f0:	f994 0008 	ldrsb.w	r0, [r4, #8]
 80128f4:	f7ff fb92 	bl	801201c <GetTimeOnAir>
 80128f8:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80128fa:	ab03      	add	r3, sp, #12
 80128fc:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80128fe:	9601      	str	r6, [sp, #4]
 8012900:	f10d 034e 	add.w	r3, sp, #78	; 0x4e
 8012904:	9300      	str	r3, [sp, #0]
 8012906:	f10d 034f 	add.w	r3, sp, #79	; 0x4f
 801290a:	aa11      	add	r2, sp, #68	; 0x44
 801290c:	4629      	mov	r1, r5
 801290e:	a809      	add	r0, sp, #36	; 0x24
 8012910:	f7fd f8ba 	bl	800fa88 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8012914:	4604      	mov	r4, r0
 8012916:	b120      	cbz	r0, 8012922 <RegionRU864NextChannel+0xc2>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8012918:	280c      	cmp	r0, #12
 801291a:	d00d      	beq.n	8012938 <RegionRU864NextChannel+0xd8>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_RU864 */
}
 801291c:	4620      	mov	r0, r4
 801291e:	b015      	add	sp, #84	; 0x54
 8012920:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8012922:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 8012926:	3901      	subs	r1, #1
 8012928:	f001 fe3a 	bl	80145a0 <randr>
 801292c:	ab14      	add	r3, sp, #80	; 0x50
 801292e:	4418      	add	r0, r3
 8012930:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
 8012934:	703b      	strb	r3, [r7, #0]
 8012936:	e7f1      	b.n	801291c <RegionRU864NextChannel+0xbc>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8012938:	4b04      	ldr	r3, [pc, #16]	; (801294c <RegionRU864NextChannel+0xec>)
 801293a:	681a      	ldr	r2, [r3, #0]
 801293c:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 8012940:	f043 0303 	orr.w	r3, r3, #3
 8012944:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
 8012948:	e7e8      	b.n	801291c <RegionRU864NextChannel+0xbc>
 801294a:	bf00      	nop
 801294c:	20001464 	.word	0x20001464
 8012950:	20001460 	.word	0x20001460

08012954 <RegionRU864ChannelAdd>:

LoRaMacStatus_t RegionRU864ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8012954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined( REGION_RU864 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 8012956:	7905      	ldrb	r5, [r0, #4]

    if( id < RU864_NUMB_DEFAULT_CHANNELS )
 8012958:	2d01      	cmp	r5, #1
 801295a:	d94b      	bls.n	80129f4 <RegionRU864ChannelAdd+0xa0>
 801295c:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= RU864_MAX_NB_CHANNELS )
 801295e:	2d07      	cmp	r5, #7
 8012960:	d84a      	bhi.n	80129f8 <RegionRU864ChannelAdd+0xa4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, RU864_TX_MIN_DATARATE, RU864_TX_MAX_DATARATE ) == false )
 8012962:	6803      	ldr	r3, [r0, #0]
 8012964:	7a18      	ldrb	r0, [r3, #8]
 8012966:	f340 0003 	sbfx	r0, r0, #0, #4
 801296a:	2207      	movs	r2, #7
 801296c:	2100      	movs	r1, #0
 801296e:	b240      	sxtb	r0, r0
 8012970:	f7fc fe3b 	bl	800f5ea <RegionCommonValueInRange>
 8012974:	2800      	cmp	r0, #0
 8012976:	d039      	beq.n	80129ec <RegionRU864ChannelAdd+0x98>
    bool drInvalid = false;
 8012978:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, RU864_TX_MIN_DATARATE, RU864_TX_MAX_DATARATE ) == false )
 801297a:	6823      	ldr	r3, [r4, #0]
 801297c:	7a18      	ldrb	r0, [r3, #8]
 801297e:	f340 1003 	sbfx	r0, r0, #4, #4
 8012982:	2207      	movs	r2, #7
 8012984:	2100      	movs	r1, #0
 8012986:	b240      	sxtb	r0, r0
 8012988:	f7fc fe2f 	bl	800f5ea <RegionCommonValueInRange>
 801298c:	b900      	cbnz	r0, 8012990 <RegionRU864ChannelAdd+0x3c>
    {
        drInvalid = true;
 801298e:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8012990:	6821      	ldr	r1, [r4, #0]
 8012992:	7a0b      	ldrb	r3, [r1, #8]
 8012994:	f343 0203 	sbfx	r2, r3, #0, #4
 8012998:	b252      	sxtb	r2, r2
 801299a:	f343 1303 	sbfx	r3, r3, #4, #4
 801299e:	b25b      	sxtb	r3, r3
 80129a0:	429a      	cmp	r2, r3
 80129a2:	dd00      	ble.n	80129a6 <RegionRU864ChannelAdd+0x52>
    {
        drInvalid = true;
 80129a4:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 80129a6:	6808      	ldr	r0, [r1, #0]
 80129a8:	f7ff fb24 	bl	8011ff4 <VerifyRfFreq>
 80129ac:	b300      	cbz	r0, 80129f0 <RegionRU864ChannelAdd+0x9c>
    bool freqInvalid = false;
 80129ae:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80129b0:	b106      	cbz	r6, 80129b4 <RegionRU864ChannelAdd+0x60>
 80129b2:	bb1b      	cbnz	r3, 80129fc <RegionRU864ChannelAdd+0xa8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 80129b4:	bb26      	cbnz	r6, 8012a00 <RegionRU864ChannelAdd+0xac>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 80129b6:	bb2b      	cbnz	r3, 8012a04 <RegionRU864ChannelAdd+0xb0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80129b8:	4f13      	ldr	r7, [pc, #76]	; (8012a08 <RegionRU864ChannelAdd+0xb4>)
 80129ba:	683b      	ldr	r3, [r7, #0]
 80129bc:	006e      	lsls	r6, r5, #1
 80129be:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80129c2:	220c      	movs	r2, #12
 80129c4:	6821      	ldr	r1, [r4, #0]
 80129c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80129ca:	f001 fdf6 	bl	80145ba <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 80129ce:	683a      	ldr	r2, [r7, #0]
 80129d0:	442e      	add	r6, r5
 80129d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80129d6:	2000      	movs	r0, #0
 80129d8:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80129da:	2301      	movs	r3, #1
 80129dc:	fa03 f505 	lsl.w	r5, r3, r5
 80129e0:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 80129e4:	431d      	orrs	r5, r3
 80129e6:	f8a2 5480 	strh.w	r5, [r2, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 80129ea:	e006      	b.n	80129fa <RegionRU864ChannelAdd+0xa6>
        drInvalid = true;
 80129ec:	2601      	movs	r6, #1
 80129ee:	e7c4      	b.n	801297a <RegionRU864ChannelAdd+0x26>
            freqInvalid = true;
 80129f0:	2301      	movs	r3, #1
 80129f2:	e7dd      	b.n	80129b0 <RegionRU864ChannelAdd+0x5c>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80129f4:	2006      	movs	r0, #6
 80129f6:	e000      	b.n	80129fa <RegionRU864ChannelAdd+0xa6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80129f8:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_RU864 */
}
 80129fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80129fc:	2006      	movs	r0, #6
 80129fe:	e7fc      	b.n	80129fa <RegionRU864ChannelAdd+0xa6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 8012a00:	2005      	movs	r0, #5
 8012a02:	e7fa      	b.n	80129fa <RegionRU864ChannelAdd+0xa6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8012a04:	2004      	movs	r0, #4
 8012a06:	e7f8      	b.n	80129fa <RegionRU864ChannelAdd+0xa6>
 8012a08:	20001464 	.word	0x20001464

08012a0c <RegionRU864ChannelsRemove>:

bool RegionRU864ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_RU864 )
    uint8_t id = channelRemove->ChannelId;
 8012a0c:	7801      	ldrb	r1, [r0, #0]

    if( id < RU864_NUMB_DEFAULT_CHANNELS )
 8012a0e:	2901      	cmp	r1, #1
 8012a10:	d911      	bls.n	8012a36 <RegionRU864ChannelsRemove+0x2a>
{
 8012a12:	b510      	push	{r4, lr}
    {
        return false;
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8012a14:	4b09      	ldr	r3, [pc, #36]	; (8012a3c <RegionRU864ChannelsRemove+0x30>)
 8012a16:	6818      	ldr	r0, [r3, #0]
 8012a18:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8012a1c:	009c      	lsls	r4, r3, #2
 8012a1e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012a22:	2200      	movs	r2, #0
 8012a24:	5102      	str	r2, [r0, r4]
 8012a26:	605a      	str	r2, [r3, #4]
 8012a28:	609a      	str	r2, [r3, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, RU864_MAX_NB_CHANNELS );
 8012a2a:	2208      	movs	r2, #8
 8012a2c:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8012a30:	f7fc fe1d 	bl	800f66e <RegionCommonChanDisable>
#else
    return false;
#endif /* REGION_RU864 */
}
 8012a34:	bd10      	pop	{r4, pc}
        return false;
 8012a36:	2000      	movs	r0, #0
}
 8012a38:	4770      	bx	lr
 8012a3a:	bf00      	nop
 8012a3c:	20001464 	.word	0x20001464

08012a40 <RegionRU864ApplyCFList>:
{
 8012a40:	b570      	push	{r4, r5, r6, lr}
 8012a42:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8012a44:	2350      	movs	r3, #80	; 0x50
 8012a46:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 8012a4a:	7903      	ldrb	r3, [r0, #4]
 8012a4c:	2b10      	cmp	r3, #16
 8012a4e:	d135      	bne.n	8012abc <RegionRU864ApplyCFList+0x7c>
 8012a50:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 8012a52:	6803      	ldr	r3, [r0, #0]
 8012a54:	7bdd      	ldrb	r5, [r3, #15]
 8012a56:	2d00      	cmp	r5, #0
 8012a58:	d130      	bne.n	8012abc <RegionRU864ApplyCFList+0x7c>
    for( uint8_t i = 0, chanIdx = RU864_NUMB_DEFAULT_CHANNELS; chanIdx < RU864_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8012a5a:	2402      	movs	r4, #2
 8012a5c:	e00e      	b.n	8012a7c <RegionRU864ApplyCFList+0x3c>
            newChannel.Frequency = 0;
 8012a5e:	2300      	movs	r3, #0
 8012a60:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 8012a62:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 8012a66:	9304      	str	r3, [sp, #16]
 8012a68:	e01d      	b.n	8012aa6 <RegionRU864ApplyCFList+0x66>
            channelRemove.ChannelId = chanIdx;
 8012a6a:	f88d 4000 	strb.w	r4, [sp]
            RegionRU864ChannelsRemove( &channelRemove );
 8012a6e:	4668      	mov	r0, sp
 8012a70:	f7ff ffcc 	bl	8012a0c <RegionRU864ChannelsRemove>
    for( uint8_t i = 0, chanIdx = RU864_NUMB_DEFAULT_CHANNELS; chanIdx < RU864_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8012a74:	3503      	adds	r5, #3
 8012a76:	b2ed      	uxtb	r5, r5
 8012a78:	3401      	adds	r4, #1
 8012a7a:	b2e4      	uxtb	r4, r4
 8012a7c:	2c07      	cmp	r4, #7
 8012a7e:	d81d      	bhi.n	8012abc <RegionRU864ApplyCFList+0x7c>
        if( chanIdx < ( RU864_NUMB_CHANNELS_CF_LIST + RU864_NUMB_DEFAULT_CHANNELS ) )
 8012a80:	2c06      	cmp	r4, #6
 8012a82:	d8ec      	bhi.n	8012a5e <RegionRU864ApplyCFList+0x1e>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8012a84:	6832      	ldr	r2, [r6, #0]
 8012a86:	5d53      	ldrb	r3, [r2, r5]
 8012a88:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8012a8a:	442a      	add	r2, r5
 8012a8c:	7851      	ldrb	r1, [r2, #1]
 8012a8e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8012a92:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8012a94:	7892      	ldrb	r2, [r2, #2]
 8012a96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 8012a9a:	2264      	movs	r2, #100	; 0x64
 8012a9c:	fb02 f303 	mul.w	r3, r2, r3
 8012aa0:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 8012aa6:	9b03      	ldr	r3, [sp, #12]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d0de      	beq.n	8012a6a <RegionRU864ApplyCFList+0x2a>
            channelAdd.NewChannel = &newChannel;
 8012aac:	ab03      	add	r3, sp, #12
 8012aae:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 8012ab0:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionRU864ChannelAdd( &channelAdd );
 8012ab4:	a801      	add	r0, sp, #4
 8012ab6:	f7ff ff4d 	bl	8012954 <RegionRU864ChannelAdd>
 8012aba:	e7db      	b.n	8012a74 <RegionRU864ApplyCFList+0x34>
}
 8012abc:	b006      	add	sp, #24
 8012abe:	bd70      	pop	{r4, r5, r6, pc}

08012ac0 <RegionRU864NewChannelReq>:
{
 8012ac0:	b500      	push	{lr}
 8012ac2:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 8012ac4:	6803      	ldr	r3, [r0, #0]
 8012ac6:	681a      	ldr	r2, [r3, #0]
 8012ac8:	b952      	cbnz	r2, 8012ae0 <RegionRU864NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8012aca:	7903      	ldrb	r3, [r0, #4]
 8012acc:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionRU864ChannelsRemove( &channelRemove ) == false )
 8012ad0:	a801      	add	r0, sp, #4
 8012ad2:	f7ff ff9b 	bl	8012a0c <RegionRU864ChannelsRemove>
 8012ad6:	b1d0      	cbz	r0, 8012b0e <RegionRU864NewChannelReq+0x4e>
    uint8_t status = 0x03;
 8012ad8:	2003      	movs	r0, #3
}
 8012ada:	b005      	add	sp, #20
 8012adc:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8012ae0:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8012ae2:	7903      	ldrb	r3, [r0, #4]
 8012ae4:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionRU864ChannelAdd( &channelAdd ) )
 8012ae8:	a802      	add	r0, sp, #8
 8012aea:	f7ff ff33 	bl	8012954 <RegionRU864ChannelAdd>
 8012aee:	2806      	cmp	r0, #6
 8012af0:	d80b      	bhi.n	8012b0a <RegionRU864NewChannelReq+0x4a>
 8012af2:	e8df f000 	tbb	[pc, r0]
 8012af6:	0a04      	.short	0x0a04
 8012af8:	060e0a0a 	.word	0x060e0a0a
 8012afc:	08          	.byte	0x08
 8012afd:	00          	.byte	0x00
 8012afe:	2003      	movs	r0, #3
 8012b00:	e7eb      	b.n	8012ada <RegionRU864NewChannelReq+0x1a>
                status &= 0xFD;
 8012b02:	2001      	movs	r0, #1
                break;
 8012b04:	e7e9      	b.n	8012ada <RegionRU864NewChannelReq+0x1a>
                status &= 0xFC;
 8012b06:	2000      	movs	r0, #0
                break;
 8012b08:	e7e7      	b.n	8012ada <RegionRU864NewChannelReq+0x1a>
                status &= 0xFC;
 8012b0a:	2000      	movs	r0, #0
                break;
 8012b0c:	e7e5      	b.n	8012ada <RegionRU864NewChannelReq+0x1a>
            status &= 0xFC;
 8012b0e:	2000      	movs	r0, #0
 8012b10:	e7e3      	b.n	8012ada <RegionRU864NewChannelReq+0x1a>
                status &= 0xFE;
 8012b12:	2002      	movs	r0, #2
 8012b14:	e7e1      	b.n	8012ada <RegionRU864NewChannelReq+0x1a>
	...

08012b18 <RegionRU864SetContinuousWave>:

void RegionRU864SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8012b18:	b538      	push	{r3, r4, r5, lr}
 8012b1a:	4604      	mov	r4, r0
#if defined( REGION_RU864 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8012b1c:	4b12      	ldr	r3, [pc, #72]	; (8012b68 <RegionRU864SetContinuousWave+0x50>)
 8012b1e:	6819      	ldr	r1, [r3, #0]
 8012b20:	4d12      	ldr	r5, [pc, #72]	; (8012b6c <RegionRU864SetContinuousWave+0x54>)
 8012b22:	682b      	ldr	r3, [r5, #0]
 8012b24:	7802      	ldrb	r2, [r0, #0]
 8012b26:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012b2a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8012b2e:	7a53      	ldrb	r3, [r2, #9]
 8012b30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012b34:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8012b38:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8012b3c:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8012b40:	f7fd f809 	bl	800fb56 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8012b44:	682a      	ldr	r2, [r5, #0]
 8012b46:	7823      	ldrb	r3, [r4, #0]
 8012b48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012b4c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8012b50:	68a2      	ldr	r2, [r4, #8]
 8012b52:	6861      	ldr	r1, [r4, #4]
 8012b54:	f7fc ff1c 	bl	800f990 <RegionCommonComputeTxPower>
 8012b58:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8012b5a:	4b05      	ldr	r3, [pc, #20]	; (8012b70 <RegionRU864SetContinuousWave+0x58>)
 8012b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b5e:	89a2      	ldrh	r2, [r4, #12]
 8012b60:	4628      	mov	r0, r5
 8012b62:	4798      	blx	r3
#endif /* REGION_RU864 */
}
 8012b64:	bd38      	pop	{r3, r4, r5, pc}
 8012b66:	bf00      	nop
 8012b68:	20001460 	.word	0x20001460
 8012b6c:	20001464 	.word	0x20001464
 8012b70:	08018400 	.word	0x08018400

08012b74 <RegionRU864ApplyDrOffset>:

uint8_t RegionRU864ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_RU864 )
    int8_t datarate = dr - drOffset;
 8012b74:	1a88      	subs	r0, r1, r2
 8012b76:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 8012b78:	2800      	cmp	r0, #0
 8012b7a:	db01      	blt.n	8012b80 <RegionRU864ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_RU864 */
}
 8012b7c:	b2c0      	uxtb	r0, r0
 8012b7e:	4770      	bx	lr
        datarate = DR_0;
 8012b80:	2000      	movs	r0, #0
 8012b82:	e7fb      	b.n	8012b7c <RegionRU864ApplyDrOffset+0x8>

08012b84 <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 8012b84:	b510      	push	{r4, lr}
 8012b86:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8012b88:	4b10      	ldr	r3, [pc, #64]	; (8012bcc <VerifyRfFreq+0x48>)
 8012b8a:	6a1b      	ldr	r3, [r3, #32]
 8012b8c:	4798      	blx	r3
 8012b8e:	b1c8      	cbz	r0, 8012bc4 <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8012b90:	4b0f      	ldr	r3, [pc, #60]	; (8012bd0 <VerifyRfFreq+0x4c>)
 8012b92:	4423      	add	r3, r4
 8012b94:	4a0f      	ldr	r2, [pc, #60]	; (8012bd4 <VerifyRfFreq+0x50>)
 8012b96:	4293      	cmp	r3, r2
 8012b98:	d813      	bhi.n	8012bc2 <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8012b9a:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 8012b9e:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 8012ba2:	f202 7245 	addw	r2, r2, #1861	; 0x745
 8012ba6:	fba2 1203 	umull	r1, r2, r2, r3
 8012baa:	0c92      	lsrs	r2, r2, #18
 8012bac:	490a      	ldr	r1, [pc, #40]	; (8012bd8 <VerifyRfFreq+0x54>)
 8012bae:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 8012bb2:	b942      	cbnz	r2, 8012bc6 <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8012bb4:	4b09      	ldr	r3, [pc, #36]	; (8012bdc <VerifyRfFreq+0x58>)
 8012bb6:	4423      	add	r3, r4
 8012bb8:	4a09      	ldr	r2, [pc, #36]	; (8012be0 <VerifyRfFreq+0x5c>)
 8012bba:	4293      	cmp	r3, r2
 8012bbc:	d902      	bls.n	8012bc4 <VerifyRfFreq+0x40>
    {
        return false;
 8012bbe:	2000      	movs	r0, #0
 8012bc0:	e000      	b.n	8012bc4 <VerifyRfFreq+0x40>
        return false;
 8012bc2:	2000      	movs	r0, #0
    }
    return true;
}
 8012bc4:	bd10      	pop	{r4, pc}
        return false;
 8012bc6:	2000      	movs	r0, #0
 8012bc8:	e7fc      	b.n	8012bc4 <VerifyRfFreq+0x40>
 8012bca:	bf00      	nop
 8012bcc:	08018400 	.word	0x08018400
 8012bd0:	c8f78f60 	.word	0xc8f78f60
 8012bd4:	00401640 	.word	0x00401640
 8012bd8:	000927c0 	.word	0x000927c0
 8012bdc:	ca37fea0 	.word	0xca37fea0
 8012be0:	01808580 	.word	0x01808580

08012be4 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8012be4:	b570      	push	{r4, r5, r6, lr}
 8012be6:	b084      	sub	sp, #16
 8012be8:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 8012bea:	4b0a      	ldr	r3, [pc, #40]	; (8012c14 <GetTimeOnAir+0x30>)
 8012bec:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8012bee:	490a      	ldr	r1, [pc, #40]	; (8012c18 <GetTimeOnAir+0x34>)
 8012bf0:	f7fc ffb6 	bl	800fb60 <RegionCommonGetBandwidth>
 8012bf4:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8012bf6:	4b09      	ldr	r3, [pc, #36]	; (8012c1c <GetTimeOnAir+0x38>)
 8012bf8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8012bfa:	2001      	movs	r0, #1
 8012bfc:	9003      	str	r0, [sp, #12]
 8012bfe:	b2e4      	uxtb	r4, r4
 8012c00:	9402      	str	r4, [sp, #8]
 8012c02:	2200      	movs	r2, #0
 8012c04:	9201      	str	r2, [sp, #4]
 8012c06:	2208      	movs	r2, #8
 8012c08:	9200      	str	r2, [sp, #0]
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	4632      	mov	r2, r6
 8012c0e:	47a8      	blx	r5
}
 8012c10:	b004      	add	sp, #16
 8012c12:	bd70      	pop	{r4, r5, r6, pc}
 8012c14:	08017ed8 	.word	0x08017ed8
 8012c18:	08017e84 	.word	0x08017e84
 8012c1c:	08018400 	.word	0x08018400

08012c20 <LimitTxPower>:
{
 8012c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c22:	4606      	mov	r6, r0
 8012c24:	4615      	mov	r5, r2
 8012c26:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8012c28:	f7fc ff95 	bl	800fb56 <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 8012c2c:	2d04      	cmp	r5, #4
 8012c2e:	d105      	bne.n	8012c3c <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8012c30:	4634      	mov	r4, r6
 8012c32:	2e02      	cmp	r6, #2
 8012c34:	bfb8      	it	lt
 8012c36:	2402      	movlt	r4, #2
}
 8012c38:	4620      	mov	r0, r4
 8012c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c3c:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8012c3e:	2204      	movs	r2, #4
 8012c40:	2100      	movs	r1, #0
 8012c42:	4638      	mov	r0, r7
 8012c44:	f7fc fd2d 	bl	800f6a2 <RegionCommonCountChannels>
 8012c48:	2831      	cmp	r0, #49	; 0x31
 8012c4a:	d8f5      	bhi.n	8012c38 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8012c4c:	4634      	mov	r4, r6
 8012c4e:	2e05      	cmp	r6, #5
 8012c50:	bfb8      	it	lt
 8012c52:	2405      	movlt	r4, #5
 8012c54:	e7f0      	b.n	8012c38 <LimitTxPower+0x18>
	...

08012c58 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8012c58:	b500      	push	{lr}
 8012c5a:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8012c60:	7803      	ldrb	r3, [r0, #0]
 8012c62:	3b01      	subs	r3, #1
 8012c64:	2b38      	cmp	r3, #56	; 0x38
 8012c66:	d820      	bhi.n	8012caa <RegionUS915GetPhyParam+0x52>
 8012c68:	e8df f003 	tbb	[pc, r3]
 8012c6c:	1f1f1f1d 	.word	0x1f1f1f1d
 8012c70:	1f1f1f1f 	.word	0x1f1f1f1f
 8012c74:	3e3b1f1f 	.word	0x3e3b1f1f
 8012c78:	4d1f4741 	.word	0x4d1f4741
 8012c7c:	5d595551 	.word	0x5d595551
 8012c80:	6e1f6561 	.word	0x6e1f6561
 8012c84:	807a7471 	.word	0x807a7471
 8012c88:	871f1f83 	.word	0x871f1f83
 8012c8c:	1f1f238a 	.word	0x1f1f238a
 8012c90:	1f1f1f1f 	.word	0x1f1f1f1f
 8012c94:	1f1f1f1f 	.word	0x1f1f1f1f
 8012c98:	8d1f1f1f 	.word	0x8d1f1f1f
 8012c9c:	1fa19e94 	.word	0x1fa19e94
 8012ca0:	b1aeaba4 	.word	0xb1aeaba4
 8012ca4:	b7          	.byte	0xb7
 8012ca5:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8012ca6:	2308      	movs	r3, #8
 8012ca8:	9304      	str	r3, [sp, #16]
        }
    }

#endif /* REGION_US915 */
    return phyParam;
}
 8012caa:	9804      	ldr	r0, [sp, #16]
 8012cac:	b007      	add	sp, #28
 8012cae:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 8012cb2:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8012cb6:	f88d 3004 	strb.w	r3, [sp, #4]
 8012cba:	2304      	movs	r3, #4
 8012cbc:	f88d 3005 	strb.w	r3, [sp, #5]
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	f88d 3006 	strb.w	r3, [sp, #6]
 8012cc6:	2348      	movs	r3, #72	; 0x48
 8012cc8:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8012ccc:	4b46      	ldr	r3, [pc, #280]	; (8012de8 <RegionUS915GetPhyParam+0x190>)
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8012cd4:	9202      	str	r2, [sp, #8]
 8012cd6:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8012cd8:	a801      	add	r0, sp, #4
 8012cda:	f7fc ff1d 	bl	800fb18 <RegionCommonGetNextLowerTxDr>
 8012cde:	9004      	str	r0, [sp, #16]
            break;
 8012ce0:	e7e3      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8012ce2:	2340      	movs	r3, #64	; 0x40
 8012ce4:	9304      	str	r3, [sp, #16]
            break;
 8012ce6:	e7e0      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8012ce8:	2320      	movs	r3, #32
 8012cea:	9304      	str	r3, [sp, #16]
            break;
 8012cec:	e7dd      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8012cee:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8012cf2:	4a3e      	ldr	r2, [pc, #248]	; (8012dec <RegionUS915GetPhyParam+0x194>)
 8012cf4:	5cd3      	ldrb	r3, [r2, r3]
 8012cf6:	9304      	str	r3, [sp, #16]
            break;
 8012cf8:	e7d7      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8012cfa:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8012cfe:	4a3c      	ldr	r2, [pc, #240]	; (8012df0 <RegionUS915GetPhyParam+0x198>)
 8012d00:	5cd3      	ldrb	r3, [r2, r3]
 8012d02:	9304      	str	r3, [sp, #16]
            break;
 8012d04:	e7d1      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_RX_WINDOW;
 8012d06:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8012d0a:	9304      	str	r3, [sp, #16]
            break;
 8012d0c:	e7cd      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8012d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012d12:	9304      	str	r3, [sp, #16]
            break;
 8012d14:	e7c9      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8012d16:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8012d1a:	9304      	str	r3, [sp, #16]
            break;
 8012d1c:	e7c5      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8012d1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8012d22:	9304      	str	r3, [sp, #16]
            break;
 8012d24:	e7c1      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8012d26:	f241 7370 	movw	r3, #6000	; 0x1770
 8012d2a:	9304      	str	r3, [sp, #16]
            break;
 8012d2c:	e7bd      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8012d2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012d32:	9304      	str	r3, [sp, #16]
            break;
 8012d34:	e7b9      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8012d36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012d3a:	482e      	ldr	r0, [pc, #184]	; (8012df4 <RegionUS915GetPhyParam+0x19c>)
 8012d3c:	f001 fc30 	bl	80145a0 <randr>
 8012d40:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 8012d44:	9004      	str	r0, [sp, #16]
            break;
 8012d46:	e7b0      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_FREQ;
 8012d48:	4b2b      	ldr	r3, [pc, #172]	; (8012df8 <RegionUS915GetPhyParam+0x1a0>)
 8012d4a:	9304      	str	r3, [sp, #16]
            break;
 8012d4c:	e7ad      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_DR;
 8012d4e:	2308      	movs	r3, #8
 8012d50:	9304      	str	r3, [sp, #16]
            break;
 8012d52:	e7aa      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8012d54:	4b24      	ldr	r3, [pc, #144]	; (8012de8 <RegionUS915GetPhyParam+0x190>)
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8012d5c:	9304      	str	r3, [sp, #16]
            break;
 8012d5e:	e7a4      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8012d60:	4b21      	ldr	r3, [pc, #132]	; (8012de8 <RegionUS915GetPhyParam+0x190>)
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8012d68:	9304      	str	r3, [sp, #16]
            break;
 8012d6a:	e79e      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8012d6c:	2348      	movs	r3, #72	; 0x48
 8012d6e:	9304      	str	r3, [sp, #16]
            break;
 8012d70:	e79b      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.Channels = RegionNvmGroup2->Channels;
 8012d72:	4b1d      	ldr	r3, [pc, #116]	; (8012de8 <RegionUS915GetPhyParam+0x190>)
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	9304      	str	r3, [sp, #16]
            break;
 8012d78:	e797      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8012d7a:	4b20      	ldr	r3, [pc, #128]	; (8012dfc <RegionUS915GetPhyParam+0x1a4>)
 8012d7c:	9304      	str	r3, [sp, #16]
            break;
 8012d7e:	e794      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = 0;
 8012d80:	2300      	movs	r3, #0
 8012d82:	9304      	str	r3, [sp, #16]
            break;
 8012d84:	e791      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8012d86:	4a1e      	ldr	r2, [pc, #120]	; (8012e00 <RegionUS915GetPhyParam+0x1a8>)
 8012d88:	491b      	ldr	r1, [pc, #108]	; (8012df8 <RegionUS915GetPhyParam+0x1a0>)
 8012d8a:	7900      	ldrb	r0, [r0, #4]
 8012d8c:	f7fb f8d7 	bl	800df3e <RegionBaseUSCalcDownlinkFrequency>
 8012d90:	9004      	str	r0, [sp, #16]
            break;
 8012d92:	e78a      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8012d94:	2317      	movs	r3, #23
 8012d96:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8012d9a:	2305      	movs	r3, #5
 8012d9c:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8012da0:	2303      	movs	r3, #3
 8012da2:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 8012da6:	e780      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8012da8:	2308      	movs	r3, #8
 8012daa:	9304      	str	r3, [sp, #16]
            break;
 8012dac:	e77d      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8012dae:	2308      	movs	r3, #8
 8012db0:	9304      	str	r3, [sp, #16]
            break;
 8012db2:	e77a      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8012db4:	4a12      	ldr	r2, [pc, #72]	; (8012e00 <RegionUS915GetPhyParam+0x1a8>)
 8012db6:	4910      	ldr	r1, [pc, #64]	; (8012df8 <RegionUS915GetPhyParam+0x1a0>)
 8012db8:	7900      	ldrb	r0, [r0, #4]
 8012dba:	f7fb f8c0 	bl	800df3e <RegionBaseUSCalcDownlinkFrequency>
 8012dbe:	9004      	str	r0, [sp, #16]
            break;
 8012dc0:	e773      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8012dc2:	2308      	movs	r3, #8
 8012dc4:	9304      	str	r3, [sp, #16]
            break;
 8012dc6:	e770      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8012dc8:	2308      	movs	r3, #8
 8012dca:	9304      	str	r3, [sp, #16]
            break;
 8012dcc:	e76d      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8012dce:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8012dd2:	4a0c      	ldr	r2, [pc, #48]	; (8012e04 <RegionUS915GetPhyParam+0x1ac>)
 8012dd4:	5cd3      	ldrb	r3, [r2, r3]
 8012dd6:	9304      	str	r3, [sp, #16]
            break;
 8012dd8:	e767      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8012dda:	490b      	ldr	r1, [pc, #44]	; (8012e08 <RegionUS915GetPhyParam+0x1b0>)
 8012ddc:	f990 0001 	ldrsb.w	r0, [r0, #1]
 8012de0:	f7fc febe 	bl	800fb60 <RegionCommonGetBandwidth>
 8012de4:	9004      	str	r0, [sp, #16]
            break;
 8012de6:	e760      	b.n	8012caa <RegionUS915GetPhyParam+0x52>
 8012de8:	2000146c 	.word	0x2000146c
 8012dec:	08017ef8 	.word	0x08017ef8
 8012df0:	08017ee8 	.word	0x08017ee8
 8012df4:	fffffc18 	.word	0xfffffc18
 8012df8:	370870a0 	.word	0x370870a0
 8012dfc:	4200999a 	.word	0x4200999a
 8012e00:	000927c0 	.word	0x000927c0
 8012e04:	08017ed8 	.word	0x08017ed8
 8012e08:	08017e84 	.word	0x08017e84

08012e0c <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8012e0c:	b530      	push	{r4, r5, lr}
 8012e0e:	b083      	sub	sp, #12
#if defined( REGION_US915 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8012e10:	4b0b      	ldr	r3, [pc, #44]	; (8012e40 <RegionUS915SetBandTxDone+0x34>)
 8012e12:	681d      	ldr	r5, [r3, #0]
 8012e14:	4b0b      	ldr	r3, [pc, #44]	; (8012e44 <RegionUS915SetBandTxDone+0x38>)
 8012e16:	681a      	ldr	r2, [r3, #0]
 8012e18:	7803      	ldrb	r3, [r0, #0]
 8012e1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012e1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012e22:	7a5b      	ldrb	r3, [r3, #9]
 8012e24:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8012e28:	6903      	ldr	r3, [r0, #16]
 8012e2a:	9300      	str	r3, [sp, #0]
 8012e2c:	68c3      	ldr	r3, [r0, #12]
 8012e2e:	7842      	ldrb	r2, [r0, #1]
 8012e30:	6881      	ldr	r1, [r0, #8]
 8012e32:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 8012e36:	f7fc fc5b 	bl	800f6f0 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_US915 */
}
 8012e3a:	b003      	add	sp, #12
 8012e3c:	bd30      	pop	{r4, r5, pc}
 8012e3e:	bf00      	nop
 8012e40:	20001468 	.word	0x20001468
 8012e44:	2000146c 	.word	0x2000146c

08012e48 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8012e48:	b510      	push	{r4, lr}
 8012e4a:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8012e4c:	2301      	movs	r3, #1
 8012e4e:	f8ad 3000 	strh.w	r3, [sp]
 8012e52:	2300      	movs	r3, #0
 8012e54:	f88d 3002 	strb.w	r3, [sp, #2]
 8012e58:	9301      	str	r3, [sp, #4]
 8012e5a:	9302      	str	r3, [sp, #8]
 8012e5c:	9303      	str	r3, [sp, #12]
 8012e5e:	9304      	str	r3, [sp, #16]
 8012e60:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 8012e64:	7a04      	ldrb	r4, [r0, #8]
 8012e66:	b17c      	cbz	r4, 8012e88 <RegionUS915InitDefaults+0x40>
 8012e68:	3c01      	subs	r4, #1
 8012e6a:	b2e4      	uxtb	r4, r4
 8012e6c:	2c01      	cmp	r4, #1
 8012e6e:	f200 8082 	bhi.w	8012f76 <RegionUS915InitDefaults+0x12e>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8012e72:	4b42      	ldr	r3, [pc, #264]	; (8012f7c <RegionUS915InitDefaults+0x134>)
 8012e74:	6818      	ldr	r0, [r3, #0]
 8012e76:	2206      	movs	r2, #6
 8012e78:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 8012e7c:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8012e80:	f7fc fc25 	bl	800f6ce <RegionCommonChanMaskCopy>

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8012e84:	2300      	movs	r3, #0
 8012e86:	e074      	b.n	8012f72 <RegionUS915InitDefaults+0x12a>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8012e88:	6803      	ldr	r3, [r0, #0]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d073      	beq.n	8012f76 <RegionUS915InitDefaults+0x12e>
 8012e8e:	6842      	ldr	r2, [r0, #4]
 8012e90:	2a00      	cmp	r2, #0
 8012e92:	d070      	beq.n	8012f76 <RegionUS915InitDefaults+0x12e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8012e94:	493a      	ldr	r1, [pc, #232]	; (8012f80 <RegionUS915InitDefaults+0x138>)
 8012e96:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8012e98:	4938      	ldr	r1, [pc, #224]	; (8012f7c <RegionUS915InitDefaults+0x134>)
 8012e9a:	600a      	str	r2, [r1, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8012ea2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8012ea6:	2218      	movs	r2, #24
 8012ea8:	4669      	mov	r1, sp
 8012eaa:	4618      	mov	r0, r3
 8012eac:	f001 fb85 	bl	80145ba <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8012eb0:	e011      	b.n	8012ed6 <RegionUS915InitDefaults+0x8e>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 8012eb2:	4b32      	ldr	r3, [pc, #200]	; (8012f7c <RegionUS915InitDefaults+0x134>)
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	4a33      	ldr	r2, [pc, #204]	; (8012f84 <RegionUS915InitDefaults+0x13c>)
 8012eb8:	4933      	ldr	r1, [pc, #204]	; (8012f88 <RegionUS915InitDefaults+0x140>)
 8012eba:	fb02 1204 	mla	r2, r2, r4, r1
 8012ebe:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8012ec2:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8012ec6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 8012eca:	2230      	movs	r2, #48	; 0x30
 8012ecc:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 8012ece:	2200      	movs	r2, #0
 8012ed0:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8012ed2:	3401      	adds	r4, #1
 8012ed4:	b2e4      	uxtb	r4, r4
 8012ed6:	2c3f      	cmp	r4, #63	; 0x3f
 8012ed8:	d9eb      	bls.n	8012eb2 <RegionUS915InitDefaults+0x6a>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8012eda:	2340      	movs	r3, #64	; 0x40
 8012edc:	e013      	b.n	8012f06 <RegionUS915InitDefaults+0xbe>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8012ede:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 8012ee2:	4a26      	ldr	r2, [pc, #152]	; (8012f7c <RegionUS915InitDefaults+0x134>)
 8012ee4:	6812      	ldr	r2, [r2, #0]
 8012ee6:	4c29      	ldr	r4, [pc, #164]	; (8012f8c <RegionUS915InitDefaults+0x144>)
 8012ee8:	4829      	ldr	r0, [pc, #164]	; (8012f90 <RegionUS915InitDefaults+0x148>)
 8012eea:	fb04 0101 	mla	r1, r4, r1, r0
 8012eee:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8012ef2:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 8012ef6:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 8012efa:	2144      	movs	r1, #68	; 0x44
 8012efc:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 8012efe:	2100      	movs	r1, #0
 8012f00:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8012f02:	3301      	adds	r3, #1
 8012f04:	b2db      	uxtb	r3, r3
 8012f06:	2b47      	cmp	r3, #71	; 0x47
 8012f08:	d9e9      	bls.n	8012ede <RegionUS915InitDefaults+0x96>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8012f0a:	4c1c      	ldr	r4, [pc, #112]	; (8012f7c <RegionUS915InitDefaults+0x134>)
 8012f0c:	6820      	ldr	r0, [r4, #0]
 8012f0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012f12:	f8a0 348c 	strh.w	r3, [r0, #1164]	; 0x48c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8012f16:	f8a0 348e 	strh.w	r3, [r0, #1166]	; 0x48e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8012f1a:	f8a0 3490 	strh.w	r3, [r0, #1168]	; 0x490
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8012f1e:	f8a0 3492 	strh.w	r3, [r0, #1170]	; 0x492
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 8012f22:	23ff      	movs	r3, #255	; 0xff
 8012f24:	f8a0 3494 	strh.w	r3, [r0, #1172]	; 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8012f28:	2300      	movs	r3, #0
 8012f2a:	f8a0 3496 	strh.w	r3, [r0, #1174]	; 0x496
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8012f2e:	2206      	movs	r2, #6
 8012f30:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 8012f34:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8012f38:	f7fc fbc9 	bl	800f6ce <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8012f3c:	4b10      	ldr	r3, [pc, #64]	; (8012f80 <RegionUS915InitDefaults+0x138>)
 8012f3e:	6818      	ldr	r0, [r3, #0]
 8012f40:	6821      	ldr	r1, [r4, #0]
 8012f42:	2206      	movs	r2, #6
 8012f44:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 8012f48:	3090      	adds	r0, #144	; 0x90
 8012f4a:	f7fc fbc0 	bl	800f6ce <RegionCommonChanMaskCopy>
            break;
 8012f4e:	e012      	b.n	8012f76 <RegionUS915InitDefaults+0x12e>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8012f50:	4a0b      	ldr	r2, [pc, #44]	; (8012f80 <RegionUS915InitDefaults+0x138>)
 8012f52:	6811      	ldr	r1, [r2, #0]
 8012f54:	4a09      	ldr	r2, [pc, #36]	; (8012f7c <RegionUS915InitDefaults+0x134>)
 8012f56:	6812      	ldr	r2, [r2, #0]
 8012f58:	f503 7010 	add.w	r0, r3, #576	; 0x240
 8012f5c:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8012f60:	f103 0048 	add.w	r0, r3, #72	; 0x48
 8012f64:	f831 4010 	ldrh.w	r4, [r1, r0, lsl #1]
 8012f68:	4022      	ands	r2, r4
 8012f6a:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8012f6e:	3301      	adds	r3, #1
 8012f70:	b2db      	uxtb	r3, r3
 8012f72:	2b05      	cmp	r3, #5
 8012f74:	d9ec      	bls.n	8012f50 <RegionUS915InitDefaults+0x108>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 8012f76:	b006      	add	sp, #24
 8012f78:	bd10      	pop	{r4, pc}
 8012f7a:	bf00      	nop
 8012f7c:	2000146c 	.word	0x2000146c
 8012f80:	20001468 	.word	0x20001468
 8012f84:	00030d40 	.word	0x00030d40
 8012f88:	35c80160 	.word	0x35c80160
 8012f8c:	00186a00 	.word	0x00186a00
 8012f90:	35d2afc0 	.word	0x35d2afc0

08012f94 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8012f94:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 8012f96:	290a      	cmp	r1, #10
 8012f98:	d829      	bhi.n	8012fee <RegionUS915Verify+0x5a>
 8012f9a:	e8df f001 	tbb	[pc, r1]
 8012f9e:	2806      	.short	0x2806
 8012fa0:	0a282828 	.word	0x0a282828
 8012fa4:	1e28140a 	.word	0x1e28140a
 8012fa8:	1e          	.byte	0x1e
 8012fa9:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8012faa:	6800      	ldr	r0, [r0, #0]
 8012fac:	f7ff fdea 	bl	8012b84 <VerifyRfFreq>
 8012fb0:	e01e      	b.n	8012ff0 <RegionUS915Verify+0x5c>
        }
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 8012fb2:	2204      	movs	r2, #4
 8012fb4:	2100      	movs	r1, #0
 8012fb6:	f990 0000 	ldrsb.w	r0, [r0]
 8012fba:	f7fc fb16 	bl	800f5ea <RegionCommonValueInRange>
 8012fbe:	3800      	subs	r0, #0
 8012fc0:	bf18      	it	ne
 8012fc2:	2001      	movne	r0, #1
 8012fc4:	e014      	b.n	8012ff0 <RegionUS915Verify+0x5c>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 8012fc6:	220d      	movs	r2, #13
 8012fc8:	2108      	movs	r1, #8
 8012fca:	f990 0000 	ldrsb.w	r0, [r0]
 8012fce:	f7fc fb0c 	bl	800f5ea <RegionCommonValueInRange>
 8012fd2:	3800      	subs	r0, #0
 8012fd4:	bf18      	it	ne
 8012fd6:	2001      	movne	r0, #1
 8012fd8:	e00a      	b.n	8012ff0 <RegionUS915Verify+0x5c>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 8012fda:	220e      	movs	r2, #14
 8012fdc:	2100      	movs	r1, #0
 8012fde:	f990 0000 	ldrsb.w	r0, [r0]
 8012fe2:	f7fc fb02 	bl	800f5ea <RegionCommonValueInRange>
 8012fe6:	3800      	subs	r0, #0
 8012fe8:	bf18      	it	ne
 8012fea:	2001      	movne	r0, #1
 8012fec:	e000      	b.n	8012ff0 <RegionUS915Verify+0x5c>
{
 8012fee:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 8012ff0:	bd08      	pop	{r3, pc}
	...

08012ff4 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8012ff4:	7903      	ldrb	r3, [r0, #4]
 8012ff6:	2b10      	cmp	r3, #16
 8012ff8:	d134      	bne.n	8013064 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8012ffa:	6803      	ldr	r3, [r0, #0]
 8012ffc:	7bdb      	ldrb	r3, [r3, #15]
 8012ffe:	2b01      	cmp	r3, #1
 8013000:	d130      	bne.n	8013064 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8013002:	2200      	movs	r2, #0
 8013004:	4613      	mov	r3, r2
 8013006:	2a04      	cmp	r2, #4
 8013008:	d82b      	bhi.n	8013062 <RegionUS915ApplyCFList+0x6e>
{
 801300a:	b4f0      	push	{r4, r5, r6, r7}
 801300c:	e014      	b.n	8013038 <RegionUS915ApplyCFList+0x44>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 801300e:	b2e4      	uxtb	r4, r4
 8013010:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8013014:	4c14      	ldr	r4, [pc, #80]	; (8013068 <RegionUS915ApplyCFList+0x74>)
 8013016:	6826      	ldr	r6, [r4, #0]
 8013018:	f501 7410 	add.w	r4, r1, #576	; 0x240
 801301c:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
 8013020:	3148      	adds	r1, #72	; 0x48
 8013022:	f836 5011 	ldrh.w	r5, [r6, r1, lsl #1]
 8013026:	402c      	ands	r4, r5
 8013028:	f826 4011 	strh.w	r4, [r6, r1, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801302c:	3301      	adds	r3, #1
 801302e:	b2db      	uxtb	r3, r3
 8013030:	3202      	adds	r2, #2
 8013032:	b2d2      	uxtb	r2, r2
 8013034:	2b04      	cmp	r3, #4
 8013036:	d812      	bhi.n	801305e <RegionUS915ApplyCFList+0x6a>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8013038:	6804      	ldr	r4, [r0, #0]
 801303a:	490c      	ldr	r1, [pc, #48]	; (801306c <RegionUS915ApplyCFList+0x78>)
 801303c:	680d      	ldr	r5, [r1, #0]
 801303e:	4619      	mov	r1, r3
 8013040:	5ca4      	ldrb	r4, [r4, r2]
 8013042:	f503 7710 	add.w	r7, r3, #576	; 0x240
 8013046:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801304a:	6806      	ldr	r6, [r0, #0]
 801304c:	4416      	add	r6, r2
 801304e:	7876      	ldrb	r6, [r6, #1]
 8013050:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8013054:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        if( chMaskItr == 4 )
 8013058:	2b04      	cmp	r3, #4
 801305a:	d1db      	bne.n	8013014 <RegionUS915ApplyCFList+0x20>
 801305c:	e7d7      	b.n	801300e <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 801305e:	bcf0      	pop	{r4, r5, r6, r7}
 8013060:	4770      	bx	lr
 8013062:	4770      	bx	lr
 8013064:	4770      	bx	lr
 8013066:	bf00      	nop
 8013068:	20001468 	.word	0x20001468
 801306c:	2000146c 	.word	0x2000146c

08013070 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8013070:	b570      	push	{r4, r5, r6, lr}
 8013072:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8013074:	2204      	movs	r2, #4
 8013076:	2100      	movs	r1, #0
 8013078:	6800      	ldr	r0, [r0, #0]
 801307a:	f7fc fb12 	bl	800f6a2 <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 801307e:	2801      	cmp	r0, #1
 8013080:	d033      	beq.n	80130ea <RegionUS915ChanMaskSet+0x7a>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 8013082:	792c      	ldrb	r4, [r5, #4]
 8013084:	b11c      	cbz	r4, 801308e <RegionUS915ChanMaskSet+0x1e>
 8013086:	2c01      	cmp	r4, #1
 8013088:	d025      	beq.n	80130d6 <RegionUS915ChanMaskSet+0x66>
 801308a:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 801308c:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801308e:	4e18      	ldr	r6, [pc, #96]	; (80130f0 <RegionUS915ChanMaskSet+0x80>)
 8013090:	6830      	ldr	r0, [r6, #0]
 8013092:	2206      	movs	r2, #6
 8013094:	6829      	ldr	r1, [r5, #0]
 8013096:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 801309a:	f7fc fb18 	bl	800f6ce <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 801309e:	6835      	ldr	r5, [r6, #0]
 80130a0:	f895 3494 	ldrb.w	r3, [r5, #1172]	; 0x494
 80130a4:	f8a5 3494 	strh.w	r3, [r5, #1172]	; 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 80130a8:	2300      	movs	r3, #0
 80130aa:	f8a5 3496 	strh.w	r3, [r5, #1174]	; 0x496
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80130ae:	2c05      	cmp	r4, #5
 80130b0:	d80f      	bhi.n	80130d2 <RegionUS915ChanMaskSet+0x62>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 80130b2:	4b10      	ldr	r3, [pc, #64]	; (80130f4 <RegionUS915ChanMaskSet+0x84>)
 80130b4:	681a      	ldr	r2, [r3, #0]
 80130b6:	f504 7310 	add.w	r3, r4, #576	; 0x240
 80130ba:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 80130be:	f104 0148 	add.w	r1, r4, #72	; 0x48
 80130c2:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 80130c6:	4003      	ands	r3, r0
 80130c8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80130cc:	3401      	adds	r4, #1
 80130ce:	b2e4      	uxtb	r4, r4
 80130d0:	e7ed      	b.n	80130ae <RegionUS915ChanMaskSet+0x3e>
    return true;
 80130d2:	2001      	movs	r0, #1
 80130d4:	e7da      	b.n	801308c <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80130d6:	4b06      	ldr	r3, [pc, #24]	; (80130f0 <RegionUS915ChanMaskSet+0x80>)
 80130d8:	6818      	ldr	r0, [r3, #0]
 80130da:	2206      	movs	r2, #6
 80130dc:	6829      	ldr	r1, [r5, #0]
 80130de:	f200 408c 	addw	r0, r0, #1164	; 0x48c
 80130e2:	f7fc faf4 	bl	800f6ce <RegionCommonChanMaskCopy>
    return true;
 80130e6:	2001      	movs	r0, #1
            break;
 80130e8:	e7d0      	b.n	801308c <RegionUS915ChanMaskSet+0x1c>
        return false;
 80130ea:	2000      	movs	r0, #0
 80130ec:	e7ce      	b.n	801308c <RegionUS915ChanMaskSet+0x1c>
 80130ee:	bf00      	nop
 80130f0:	2000146c 	.word	0x2000146c
 80130f4:	20001468 	.word	0x20001468

080130f8 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80130f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130fa:	b083      	sub	sp, #12
 80130fc:	460e      	mov	r6, r1
 80130fe:	4617      	mov	r7, r2
 8013100:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 8013102:	280d      	cmp	r0, #13
 8013104:	bfa8      	it	ge
 8013106:	200d      	movge	r0, #13
 8013108:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 801310a:	4d0f      	ldr	r5, [pc, #60]	; (8013148 <RegionUS915ComputeRxWindowParameters+0x50>)
 801310c:	4629      	mov	r1, r5
 801310e:	f7fc fd27 	bl	800fb60 <RegionCommonGetBandwidth>
 8013112:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 8013114:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8013118:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801311c:	4a0b      	ldr	r2, [pc, #44]	; (801314c <RegionUS915ComputeRxWindowParameters+0x54>)
 801311e:	5cd0      	ldrb	r0, [r2, r3]
 8013120:	f7fc fbee 	bl	800f900 <RegionCommonComputeSymbolTimeLoRa>
 8013124:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8013126:	4b0a      	ldr	r3, [pc, #40]	; (8013150 <RegionUS915ComputeRxWindowParameters+0x58>)
 8013128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801312a:	4798      	blx	r3
 801312c:	4603      	mov	r3, r0
 801312e:	f104 020c 	add.w	r2, r4, #12
 8013132:	9201      	str	r2, [sp, #4]
 8013134:	3408      	adds	r4, #8
 8013136:	9400      	str	r4, [sp, #0]
 8013138:	463a      	mov	r2, r7
 801313a:	4631      	mov	r1, r6
 801313c:	4628      	mov	r0, r5
 801313e:	f7fc fbed 	bl	800f91c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8013142:	b003      	add	sp, #12
 8013144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013146:	bf00      	nop
 8013148:	08017e84 	.word	0x08017e84
 801314c:	08017ed8 	.word	0x08017ed8
 8013150:	08018400 	.word	0x08018400

08013154 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8013154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013158:	b08b      	sub	sp, #44	; 0x2c
 801315a:	4604      	mov	r4, r0
 801315c:	460e      	mov	r6, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 801315e:	f990 7001 	ldrsb.w	r7, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 8013162:	6845      	ldr	r5, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 8013164:	4b22      	ldr	r3, [pc, #136]	; (80131f0 <RegionUS915RxConfig+0x9c>)
 8013166:	685b      	ldr	r3, [r3, #4]
 8013168:	4798      	blx	r3
 801316a:	2800      	cmp	r0, #0
 801316c:	d13d      	bne.n	80131ea <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801316e:	7ce3      	ldrb	r3, [r4, #19]
 8013170:	b933      	cbnz	r3, 8013180 <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 8013172:	7825      	ldrb	r5, [r4, #0]
 8013174:	f005 0507 	and.w	r5, r5, #7
 8013178:	4a1e      	ldr	r2, [pc, #120]	; (80131f4 <RegionUS915RxConfig+0xa0>)
 801317a:	4b1f      	ldr	r3, [pc, #124]	; (80131f8 <RegionUS915RxConfig+0xa4>)
 801317c:	fb02 3505 	mla	r5, r2, r5, r3
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 8013180:	4b1e      	ldr	r3, [pc, #120]	; (80131fc <RegionUS915RxConfig+0xa8>)
 8013182:	f913 9007 	ldrsb.w	r9, [r3, r7]

    Radio.SetChannel( frequency );
 8013186:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80131f0 <RegionUS915RxConfig+0x9c>
 801318a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801318e:	4628      	mov	r0, r5
 8013190:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8013192:	f8d8 8018 	ldr.w	r8, [r8, #24]
 8013196:	7ca3      	ldrb	r3, [r4, #18]
 8013198:	9309      	str	r3, [sp, #36]	; 0x24
 801319a:	2001      	movs	r0, #1
 801319c:	9008      	str	r0, [sp, #32]
 801319e:	2200      	movs	r2, #0
 80131a0:	9207      	str	r2, [sp, #28]
 80131a2:	9206      	str	r2, [sp, #24]
 80131a4:	9205      	str	r2, [sp, #20]
 80131a6:	9204      	str	r2, [sp, #16]
 80131a8:	9203      	str	r2, [sp, #12]
 80131aa:	8923      	ldrh	r3, [r4, #8]
 80131ac:	9302      	str	r3, [sp, #8]
 80131ae:	2308      	movs	r3, #8
 80131b0:	9301      	str	r3, [sp, #4]
 80131b2:	9200      	str	r2, [sp, #0]
 80131b4:	4603      	mov	r3, r0
 80131b6:	464a      	mov	r2, r9
 80131b8:	78a1      	ldrb	r1, [r4, #2]
 80131ba:	47c0      	blx	r8

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 80131bc:	7c63      	ldrb	r3, [r4, #17]
 80131be:	b18b      	cbz	r3, 80131e4 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 80131c0:	4b0f      	ldr	r3, [pc, #60]	; (8013200 <RegionUS915RxConfig+0xac>)
 80131c2:	5dd9      	ldrb	r1, [r3, r7]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80131c4:	4b0a      	ldr	r3, [pc, #40]	; (80131f0 <RegionUS915RxConfig+0x9c>)
 80131c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80131c8:	310d      	adds	r1, #13
 80131ca:	b2c9      	uxtb	r1, r1
 80131cc:	2001      	movs	r0, #1
 80131ce:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80131d0:	463a      	mov	r2, r7
 80131d2:	4629      	mov	r1, r5
 80131d4:	7ce0      	ldrb	r0, [r4, #19]
 80131d6:	f7fc fcd5 	bl	800fb84 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 80131da:	7037      	strb	r7, [r6, #0]
    return true;
 80131dc:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80131de:	b00b      	add	sp, #44	; 0x2c
 80131e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 80131e4:	4b07      	ldr	r3, [pc, #28]	; (8013204 <RegionUS915RxConfig+0xb0>)
 80131e6:	5dd9      	ldrb	r1, [r3, r7]
 80131e8:	e7ec      	b.n	80131c4 <RegionUS915RxConfig+0x70>
        return false;
 80131ea:	2000      	movs	r0, #0
 80131ec:	e7f7      	b.n	80131de <RegionUS915RxConfig+0x8a>
 80131ee:	bf00      	nop
 80131f0:	08018400 	.word	0x08018400
 80131f4:	000927c0 	.word	0x000927c0
 80131f8:	370870a0 	.word	0x370870a0
 80131fc:	08017ed8 	.word	0x08017ed8
 8013200:	08017ee8 	.word	0x08017ee8
 8013204:	08017ef8 	.word	0x08017ef8

08013208 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8013208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801320c:	b08d      	sub	sp, #52	; 0x34
 801320e:	4604      	mov	r4, r0
 8013210:	910b      	str	r1, [sp, #44]	; 0x2c
 8013212:	4690      	mov	r8, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 8013214:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8013218:	4b32      	ldr	r3, [pc, #200]	; (80132e4 <RegionUS915TxConfig+0xdc>)
 801321a:	f913 b002 	ldrsb.w	fp, [r3, r2]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 801321e:	4b32      	ldr	r3, [pc, #200]	; (80132e8 <RegionUS915TxConfig+0xe0>)
 8013220:	6818      	ldr	r0, [r3, #0]
 8013222:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 80132f4 <RegionUS915TxConfig+0xec>
 8013226:	f8da 3000 	ldr.w	r3, [sl]
 801322a:	7821      	ldrb	r1, [r4, #0]
 801322c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013230:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8013234:	7a49      	ldrb	r1, [r1, #9]
 8013236:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801323a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801323e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8013242:	f991 1002 	ldrsb.w	r1, [r1, #2]
 8013246:	f994 0002 	ldrsb.w	r0, [r4, #2]
 801324a:	f7ff fce9 	bl	8012c20 <LimitTxPower>
 801324e:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8013250:	4926      	ldr	r1, [pc, #152]	; (80132ec <RegionUS915TxConfig+0xe4>)
 8013252:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8013256:	f7fc fc83 	bl	800fb60 <RegionCommonGetBandwidth>
 801325a:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 801325c:	2200      	movs	r2, #0
 801325e:	4924      	ldr	r1, [pc, #144]	; (80132f0 <RegionUS915TxConfig+0xe8>)
 8013260:	4630      	mov	r0, r6
 8013262:	f7fc fb95 	bl	800f990 <RegionCommonComputeTxPower>
 8013266:	4607      	mov	r7, r0

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8013268:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80132f8 <RegionUS915TxConfig+0xf0>
 801326c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8013270:	f8da 1000 	ldr.w	r1, [sl]
 8013274:	7823      	ldrb	r3, [r4, #0]
 8013276:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801327a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 801327e:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8013280:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8013284:	9308      	str	r3, [sp, #32]
 8013286:	2200      	movs	r2, #0
 8013288:	9207      	str	r2, [sp, #28]
 801328a:	9206      	str	r2, [sp, #24]
 801328c:	9205      	str	r2, [sp, #20]
 801328e:	2501      	movs	r5, #1
 8013290:	9504      	str	r5, [sp, #16]
 8013292:	9203      	str	r2, [sp, #12]
 8013294:	2308      	movs	r3, #8
 8013296:	9302      	str	r3, [sp, #8]
 8013298:	9501      	str	r5, [sp, #4]
 801329a:	f8cd b000 	str.w	fp, [sp]
 801329e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132a0:	4639      	mov	r1, r7
 80132a2:	4628      	mov	r0, r5
 80132a4:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80132a8:	47b8      	blx	r7
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80132aa:	f8da 2000 	ldr.w	r2, [sl]
 80132ae:	7823      	ldrb	r3, [r4, #0]
 80132b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80132b4:	f994 1001 	ldrsb.w	r1, [r4, #1]
 80132b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80132bc:	f7fc fc92 	bl	800fbe4 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 80132c0:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 80132c4:	7b21      	ldrb	r1, [r4, #12]
 80132c6:	4628      	mov	r0, r5
 80132c8:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80132ca:	89a1      	ldrh	r1, [r4, #12]
 80132cc:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80132d0:	f7ff fc88 	bl	8012be4 <GetTimeOnAir>
 80132d4:	f8c8 0000 	str.w	r0, [r8]

    *txPower = txPowerLimited;
 80132d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80132da:	701e      	strb	r6, [r3, #0]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 80132dc:	4628      	mov	r0, r5
 80132de:	b00d      	add	sp, #52	; 0x34
 80132e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132e4:	08017ed8 	.word	0x08017ed8
 80132e8:	20001468 	.word	0x20001468
 80132ec:	08017e84 	.word	0x08017e84
 80132f0:	41f00000 	.word	0x41f00000
 80132f4:	2000146c 	.word	0x2000146c
 80132f8:	08018400 	.word	0x08018400

080132fc <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80132fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013300:	b091      	sub	sp, #68	; 0x44
 8013302:	4606      	mov	r6, r0
 8013304:	4689      	mov	r9, r1
 8013306:	4690      	mov	r8, r2
 8013308:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801330a:	2400      	movs	r4, #0
 801330c:	940e      	str	r4, [sp, #56]	; 0x38
 801330e:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 8013312:	940b      	str	r4, [sp, #44]	; 0x2c
 8013314:	940c      	str	r4, [sp, #48]	; 0x30
 8013316:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8013318:	4b95      	ldr	r3, [pc, #596]	; (8013570 <RegionUS915LinkAdrReq+0x274>)
 801331a:	6819      	ldr	r1, [r3, #0]
 801331c:	2206      	movs	r2, #6
 801331e:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 8013322:	a80b      	add	r0, sp, #44	; 0x2c
 8013324:	f7fc f9d3 	bl	800f6ce <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8013328:	e00d      	b.n	8013346 <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 801332a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801332e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 8013332:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 8013336:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 801333a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801333e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8013342:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8013346:	7a33      	ldrb	r3, [r6, #8]
 8013348:	42a3      	cmp	r3, r4
 801334a:	d978      	bls.n	801343e <RegionUS915LinkAdrReq+0x142>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801334c:	6870      	ldr	r0, [r6, #4]
 801334e:	a90e      	add	r1, sp, #56	; 0x38
 8013350:	4420      	add	r0, r4
 8013352:	f7fc fa6d 	bl	800f830 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8013356:	2800      	cmp	r0, #0
 8013358:	d071      	beq.n	801343e <RegionUS915LinkAdrReq+0x142>
        bytesProcessed += nextIndex;
 801335a:	4404      	add	r4, r0
 801335c:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 801335e:	f89d 503b 	ldrb.w	r5, [sp, #59]	; 0x3b
 8013362:	2d06      	cmp	r5, #6
 8013364:	d0e1      	beq.n	801332a <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8013366:	2d07      	cmp	r5, #7
 8013368:	d009      	beq.n	801337e <RegionUS915LinkAdrReq+0x82>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801336a:	2d05      	cmp	r5, #5
 801336c:	d064      	beq.n	8013438 <RegionUS915LinkAdrReq+0x13c>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801336e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8013372:	aa10      	add	r2, sp, #64	; 0x40
 8013374:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8013378:	f825 3c14 	strh.w	r3, [r5, #-20]
 801337c:	e7e3      	b.n	8013346 <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 801337e:	2300      	movs	r3, #0
 8013380:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 8013384:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 8013388:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 801338c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8013390:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8013394:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8013398:	e7d5      	b.n	8013346 <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 801339a:	aa10      	add	r2, sp, #64	; 0x40
 801339c:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 80133a0:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 80133a4:	f062 02ff 	orn	r2, r2, #255	; 0xff
 80133a8:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 80133ac:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80133b0:	4313      	orrs	r3, r2
 80133b2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 80133b6:	3101      	adds	r1, #1
 80133b8:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 80133ba:	3501      	adds	r5, #1
 80133bc:	b2ed      	uxtb	r5, r5
 80133be:	2d07      	cmp	r5, #7
 80133c0:	d8c1      	bhi.n	8013346 <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 80133c2:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 80133c6:	2301      	movs	r3, #1
 80133c8:	40ab      	lsls	r3, r5
 80133ca:	421a      	tst	r2, r3
 80133cc:	d011      	beq.n	80133f2 <RegionUS915LinkAdrReq+0xf6>
                    if( ( i % 2 ) == 0 )
 80133ce:	f015 0f01 	tst.w	r5, #1
 80133d2:	d1e2      	bne.n	801339a <RegionUS915LinkAdrReq+0x9e>
                        channelsMask[cntChannelMask] |= 0x00FF;
 80133d4:	aa10      	add	r2, sp, #64	; 0x40
 80133d6:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 80133da:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 80133de:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 80133e2:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 80133e6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80133ea:	4313      	orrs	r3, r2
 80133ec:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80133f0:	e7e3      	b.n	80133ba <RegionUS915LinkAdrReq+0xbe>
                    if( ( i % 2 ) == 0 )
 80133f2:	f015 0f01 	tst.w	r5, #1
 80133f6:	d10f      	bne.n	8013418 <RegionUS915LinkAdrReq+0x11c>
                        channelsMask[cntChannelMask] &= 0xFF00;
 80133f8:	aa10      	add	r2, sp, #64	; 0x40
 80133fa:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 80133fe:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 8013402:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8013406:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 801340a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801340e:	ea22 0303 	bic.w	r3, r2, r3
 8013412:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8013416:	e7d0      	b.n	80133ba <RegionUS915LinkAdrReq+0xbe>
                        channelsMask[cntChannelMask] &= 0x00FF;
 8013418:	aa10      	add	r2, sp, #64	; 0x40
 801341a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 801341e:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 8013422:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 8013426:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801342a:	ea22 0303 	bic.w	r3, r2, r3
 801342e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 8013432:	3101      	adds	r1, #1
 8013434:	b2c9      	uxtb	r1, r1
 8013436:	e7c0      	b.n	80133ba <RegionUS915LinkAdrReq+0xbe>
            for( uint8_t i = 0; i <= 7; i++ )
 8013438:	2500      	movs	r5, #0
            uint8_t cntChannelMask = 0;
 801343a:	4629      	mov	r1, r5
 801343c:	e7bf      	b.n	80133be <RegionUS915LinkAdrReq+0xc2>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 801343e:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8013442:	2b03      	cmp	r3, #3
 8013444:	dd58      	ble.n	80134f8 <RegionUS915LinkAdrReq+0x1fc>
 8013446:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8013448:	2302      	movs	r3, #2
 801344a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801344e:	7a73      	ldrb	r3, [r6, #9]
 8013450:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8013454:	a809      	add	r0, sp, #36	; 0x24
 8013456:	f7ff fbff 	bl	8012c58 <RegionUS915GetPhyParam>
 801345a:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 801345c:	f88d 5004 	strb.w	r5, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8013460:	7ab3      	ldrb	r3, [r6, #10]
 8013462:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8013466:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 801346a:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801346e:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 8013472:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8013476:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 801347a:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801347e:	f996 300b 	ldrsb.w	r3, [r6, #11]
 8013482:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8013486:	f996 300c 	ldrsb.w	r3, [r6, #12]
 801348a:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801348e:	f996 300d 	ldrsb.w	r3, [r6, #13]
 8013492:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8013496:	2348      	movs	r3, #72	; 0x48
 8013498:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 801349c:	ab0b      	add	r3, sp, #44	; 0x2c
 801349e:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80134a0:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 80134a4:	2304      	movs	r3, #4
 80134a6:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80134aa:	4b31      	ldr	r3, [pc, #196]	; (8013570 <RegionUS915LinkAdrReq+0x274>)
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 80134b0:	230e      	movs	r3, #14
 80134b2:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 80134b6:	2300      	movs	r3, #0
 80134b8:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80134bc:	6833      	ldr	r3, [r6, #0]
 80134be:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80134c0:	ab0e      	add	r3, sp, #56	; 0x38
 80134c2:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 80134c6:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 80134ca:	4668      	mov	r0, sp
 80134cc:	f7fc f9cc 	bl	800f868 <RegionCommonLinkAdrReqVerifyParams>
 80134d0:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80134d2:	2807      	cmp	r0, #7
 80134d4:	d01b      	beq.n	801350e <RegionUS915LinkAdrReq+0x212>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80134d6:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 80134da:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 80134de:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 80134e2:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 80134e6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80134ea:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 80134ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80134ee:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 80134f0:	4628      	mov	r0, r5
 80134f2:	b011      	add	sp, #68	; 0x44
 80134f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 80134f8:	2204      	movs	r2, #4
 80134fa:	2100      	movs	r1, #0
 80134fc:	a80b      	add	r0, sp, #44	; 0x2c
 80134fe:	f7fc f8d0 	bl	800f6a2 <RegionCommonCountChannels>
 8013502:	2801      	cmp	r0, #1
 8013504:	d901      	bls.n	801350a <RegionUS915LinkAdrReq+0x20e>
 8013506:	2507      	movs	r5, #7
 8013508:	e79e      	b.n	8013448 <RegionUS915LinkAdrReq+0x14c>
        status &= 0xFE; // Channel mask KO
 801350a:	2506      	movs	r5, #6
 801350c:	e79c      	b.n	8013448 <RegionUS915LinkAdrReq+0x14c>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 801350e:	4e18      	ldr	r6, [pc, #96]	; (8013570 <RegionUS915LinkAdrReq+0x274>)
 8013510:	6830      	ldr	r0, [r6, #0]
 8013512:	2206      	movs	r2, #6
 8013514:	a90b      	add	r1, sp, #44	; 0x2c
 8013516:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 801351a:	f7fc f8d8 	bl	800f6ce <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 801351e:	4b15      	ldr	r3, [pc, #84]	; (8013574 <RegionUS915LinkAdrReq+0x278>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	6832      	ldr	r2, [r6, #0]
 8013524:	f8b2 1480 	ldrh.w	r1, [r2, #1152]	; 0x480
 8013528:	f8b3 0090 	ldrh.w	r0, [r3, #144]	; 0x90
 801352c:	4001      	ands	r1, r0
 801352e:	f8a3 1090 	strh.w	r1, [r3, #144]	; 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8013532:	f8b2 1482 	ldrh.w	r1, [r2, #1154]	; 0x482
 8013536:	f8b3 0092 	ldrh.w	r0, [r3, #146]	; 0x92
 801353a:	4001      	ands	r1, r0
 801353c:	f8a3 1092 	strh.w	r1, [r3, #146]	; 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8013540:	f8b2 1484 	ldrh.w	r1, [r2, #1156]	; 0x484
 8013544:	f8b3 0094 	ldrh.w	r0, [r3, #148]	; 0x94
 8013548:	4001      	ands	r1, r0
 801354a:	f8a3 1094 	strh.w	r1, [r3, #148]	; 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 801354e:	f8b2 1486 	ldrh.w	r1, [r2, #1158]	; 0x486
 8013552:	f8b3 0096 	ldrh.w	r0, [r3, #150]	; 0x96
 8013556:	4001      	ands	r1, r0
 8013558:	f8a3 1096 	strh.w	r1, [r3, #150]	; 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801355c:	f8b2 1488 	ldrh.w	r1, [r2, #1160]	; 0x488
 8013560:	f8a3 1098 	strh.w	r1, [r3, #152]	; 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8013564:	f8b2 248a 	ldrh.w	r2, [r2, #1162]	; 0x48a
 8013568:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 801356c:	e7b3      	b.n	80134d6 <RegionUS915LinkAdrReq+0x1da>
 801356e:	bf00      	nop
 8013570:	2000146c 	.word	0x2000146c
 8013574:	20001468 	.word	0x20001468

08013578 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8013578:	b538      	push	{r3, r4, r5, lr}
 801357a:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801357c:	6840      	ldr	r0, [r0, #4]
 801357e:	f7ff fb01 	bl	8012b84 <VerifyRfFreq>
 8013582:	b310      	cbz	r0, 80135ca <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 8013584:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8013586:	220d      	movs	r2, #13
 8013588:	2108      	movs	r1, #8
 801358a:	f994 0000 	ldrsb.w	r0, [r4]
 801358e:	f7fc f82c 	bl	800f5ea <RegionCommonValueInRange>
 8013592:	b908      	cbnz	r0, 8013598 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 8013594:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8013598:	2207      	movs	r2, #7
 801359a:	2105      	movs	r1, #5
 801359c:	f994 0000 	ldrsb.w	r0, [r4]
 80135a0:	f7fc f823 	bl	800f5ea <RegionCommonValueInRange>
 80135a4:	2801      	cmp	r0, #1
 80135a6:	d003      	beq.n	80135b0 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 80135a8:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 80135ac:	2b0d      	cmp	r3, #13
 80135ae:	dd01      	ble.n	80135b4 <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 80135b0:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 80135b4:	2203      	movs	r2, #3
 80135b6:	2100      	movs	r1, #0
 80135b8:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80135bc:	f7fc f815 	bl	800f5ea <RegionCommonValueInRange>
 80135c0:	b908      	cbnz	r0, 80135c6 <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80135c2:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 80135c6:	4628      	mov	r0, r5
 80135c8:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 80135ca:	2506      	movs	r5, #6
 80135cc:	e7db      	b.n	8013586 <RegionUS915RxParamSetupReq+0xe>

080135ce <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 80135ce:	f04f 30ff 	mov.w	r0, #4294967295
 80135d2:	4770      	bx	lr

080135d4 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 80135d4:	f04f 30ff 	mov.w	r0, #4294967295
 80135d8:	4770      	bx	lr

080135da <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 80135da:	f04f 30ff 	mov.w	r0, #4294967295
 80135de:	4770      	bx	lr

080135e0 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 80135e0:	b9b1      	cbnz	r1, 8013610 <RegionUS915AlternateDr+0x30>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 80135e2:	4b10      	ldr	r3, [pc, #64]	; (8013624 <RegionUS915AlternateDr+0x44>)
 80135e4:	681a      	ldr	r2, [r3, #0]
 80135e6:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 80135ea:	3301      	adds	r3, #1
 80135ec:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 80135f0:	4b0c      	ldr	r3, [pc, #48]	; (8013624 <RegionUS915AlternateDr+0x44>)
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 80135f8:	4b0b      	ldr	r3, [pc, #44]	; (8013628 <RegionUS915AlternateDr+0x48>)
 80135fa:	fba3 1302 	umull	r1, r3, r3, r2
 80135fe:	085b      	lsrs	r3, r3, #1
 8013600:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8013604:	1ad3      	subs	r3, r2, r3
 8013606:	f013 0fff 	tst.w	r3, #255	; 0xff
 801360a:	d009      	beq.n	8013620 <RegionUS915AlternateDr+0x40>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 801360c:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 801360e:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 8013610:	4b04      	ldr	r3, [pc, #16]	; (8013624 <RegionUS915AlternateDr+0x44>)
 8013612:	681a      	ldr	r2, [r3, #0]
 8013614:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 8013618:	3b01      	subs	r3, #1
 801361a:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
 801361e:	e7e7      	b.n	80135f0 <RegionUS915AlternateDr+0x10>
        currentDr = DR_4;
 8013620:	2004      	movs	r0, #4
 8013622:	4770      	bx	lr
 8013624:	20001468 	.word	0x20001468
 8013628:	38e38e39 	.word	0x38e38e39

0801362c <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801362c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013630:	b0a4      	sub	sp, #144	; 0x90
 8013632:	4604      	mov	r4, r0
 8013634:	460e      	mov	r6, r1
 8013636:	4690      	mov	r8, r2
 8013638:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 801363a:	2500      	movs	r5, #0
 801363c:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 8013640:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8013644:	9511      	str	r5, [sp, #68]	; 0x44
 8013646:	2244      	movs	r2, #68	; 0x44
 8013648:	4629      	mov	r1, r5
 801364a:	a812      	add	r0, sp, #72	; 0x48
 801364c:	f003 ff10 	bl	8017470 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8013650:	4b4c      	ldr	r3, [pc, #304]	; (8013784 <RegionUS915NextChannel+0x158>)
 8013652:	6818      	ldr	r0, [r3, #0]
 8013654:	2204      	movs	r2, #4
 8013656:	4629      	mov	r1, r5
 8013658:	3090      	adds	r0, #144	; 0x90
 801365a:	f7fc f822 	bl	800f6a2 <RegionCommonCountChannels>
 801365e:	2800      	cmp	r0, #0
 8013660:	d05c      	beq.n	801371c <RegionUS915NextChannel+0xf0>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8013662:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8013666:	2b03      	cmp	r3, #3
 8013668:	dd0a      	ble.n	8013680 <RegionUS915NextChannel+0x54>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 801366a:	4b46      	ldr	r3, [pc, #280]	; (8013784 <RegionUS915NextChannel+0x158>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8013672:	b92a      	cbnz	r2, 8013680 <RegionUS915NextChannel+0x54>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8013674:	4a44      	ldr	r2, [pc, #272]	; (8013788 <RegionUS915NextChannel+0x15c>)
 8013676:	6812      	ldr	r2, [r2, #0]
 8013678:	f8b2 2488 	ldrh.w	r2, [r2, #1160]	; 0x488
 801367c:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8013680:	7a63      	ldrb	r3, [r4, #9]
 8013682:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8013686:	7a23      	ldrb	r3, [r4, #8]
 8013688:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 801368c:	4b3d      	ldr	r3, [pc, #244]	; (8013784 <RegionUS915NextChannel+0x158>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8013694:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8013696:	4a3c      	ldr	r2, [pc, #240]	; (8013788 <RegionUS915NextChannel+0x15c>)
 8013698:	6812      	ldr	r2, [r2, #0]
 801369a:	9205      	str	r2, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 801369c:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 801369e:	2348      	movs	r3, #72	; 0x48
 80136a0:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 80136a4:	2300      	movs	r3, #0
 80136a6:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80136a8:	6823      	ldr	r3, [r4, #0]
 80136aa:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80136ac:	6863      	ldr	r3, [r4, #4]
 80136ae:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80136b0:	7aa3      	ldrb	r3, [r4, #10]
 80136b2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 80136b6:	2301      	movs	r3, #1
 80136b8:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80136bc:	ab0c      	add	r3, sp, #48	; 0x30
 80136be:	6921      	ldr	r1, [r4, #16]
 80136c0:	68e0      	ldr	r0, [r4, #12]
 80136c2:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80136c6:	7d23      	ldrb	r3, [r4, #20]
 80136c8:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80136cc:	8ae1      	ldrh	r1, [r4, #22]
 80136ce:	f994 0008 	ldrsb.w	r0, [r4, #8]
 80136d2:	f7ff fa87 	bl	8012be4 <GetTimeOnAir>
 80136d6:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80136d8:	ab03      	add	r3, sp, #12
 80136da:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80136dc:	f8cd 8004 	str.w	r8, [sp, #4]
 80136e0:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 80136e4:	9300      	str	r3, [sp, #0]
 80136e6:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 80136ea:	aa11      	add	r2, sp, #68	; 0x44
 80136ec:	4639      	mov	r1, r7
 80136ee:	a809      	add	r0, sp, #36	; 0x24
 80136f0:	f7fc f9ca 	bl	800fa88 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80136f4:	4605      	mov	r5, r0
 80136f6:	2800      	cmp	r0, #0
 80136f8:	d13f      	bne.n	801377a <RegionUS915NextChannel+0x14e>
    {
        if( nextChanParams->Joined == true )
 80136fa:	7a63      	ldrb	r3, [r4, #9]
 80136fc:	b9eb      	cbnz	r3, 801373a <RegionUS915NextChannel+0x10e>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 80136fe:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8013702:	b32b      	cbz	r3, 8013750 <RegionUS915NextChannel+0x124>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8013704:	4603      	mov	r3, r0
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8013706:	4a1f      	ldr	r2, [pc, #124]	; (8013784 <RegionUS915NextChannel+0x158>)
 8013708:	6812      	ldr	r2, [r2, #0]
 801370a:	f892 2098 	ldrb.w	r2, [r2, #152]	; 0x98
 801370e:	411a      	asrs	r2, r3
 8013710:	f012 0f01 	tst.w	r2, #1
 8013714:	d128      	bne.n	8013768 <RegionUS915NextChannel+0x13c>
                {
                    i++;
 8013716:	3301      	adds	r3, #1
 8013718:	b2db      	uxtb	r3, r3
 801371a:	e7f4      	b.n	8013706 <RegionUS915NextChannel+0xda>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 801371c:	4d19      	ldr	r5, [pc, #100]	; (8013784 <RegionUS915NextChannel+0x158>)
 801371e:	6828      	ldr	r0, [r5, #0]
 8013720:	4b19      	ldr	r3, [pc, #100]	; (8013788 <RegionUS915NextChannel+0x15c>)
 8013722:	6819      	ldr	r1, [r3, #0]
 8013724:	2204      	movs	r2, #4
 8013726:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 801372a:	3090      	adds	r0, #144	; 0x90
 801372c:	f7fb ffcf 	bl	800f6ce <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8013730:	682b      	ldr	r3, [r5, #0]
 8013732:	2200      	movs	r2, #0
 8013734:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8013738:	e793      	b.n	8013662 <RegionUS915NextChannel+0x36>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801373a:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 801373e:	3901      	subs	r1, #1
 8013740:	f000 ff2e 	bl	80145a0 <randr>
 8013744:	ab24      	add	r3, sp, #144	; 0x90
 8013746:	4418      	add	r0, r3
 8013748:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 801374c:	7033      	strb	r3, [r6, #0]
 801374e:	e00d      	b.n	801376c <RegionUS915NextChannel+0x140>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8013750:	4b0c      	ldr	r3, [pc, #48]	; (8013784 <RegionUS915NextChannel+0x158>)
 8013752:	6818      	ldr	r0, [r3, #0]
 8013754:	4632      	mov	r2, r6
 8013756:	f100 019c 	add.w	r1, r0, #156	; 0x9c
 801375a:	3090      	adds	r0, #144	; 0x90
 801375c:	f7fa fba3 	bl	800dea6 <RegionBaseUSComputeNext125kHzJoinChannel>
 8013760:	2803      	cmp	r0, #3
 8013762:	d103      	bne.n	801376c <RegionUS915NextChannel+0x140>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8013764:	4605      	mov	r5, r0
 8013766:	e008      	b.n	801377a <RegionUS915NextChannel+0x14e>
                }
                *channel = 64 + i;
 8013768:	3340      	adds	r3, #64	; 0x40
 801376a:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 801376c:	4b05      	ldr	r3, [pc, #20]	; (8013784 <RegionUS915NextChannel+0x158>)
 801376e:	6818      	ldr	r0, [r3, #0]
 8013770:	2248      	movs	r2, #72	; 0x48
 8013772:	7831      	ldrb	r1, [r6, #0]
 8013774:	3090      	adds	r0, #144	; 0x90
 8013776:	f7fb ff7a 	bl	800f66e <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 801377a:	4628      	mov	r0, r5
 801377c:	b024      	add	sp, #144	; 0x90
 801377e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013782:	bf00      	nop
 8013784:	20001468 	.word	0x20001468
 8013788:	2000146c 	.word	0x2000146c

0801378c <RegionUS915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 801378c:	b538      	push	{r3, r4, r5, lr}
 801378e:	4604      	mov	r4, r0
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 8013790:	4b14      	ldr	r3, [pc, #80]	; (80137e4 <RegionUS915SetContinuousWave+0x58>)
 8013792:	6819      	ldr	r1, [r3, #0]
 8013794:	4d14      	ldr	r5, [pc, #80]	; (80137e8 <RegionUS915SetContinuousWave+0x5c>)
 8013796:	682b      	ldr	r3, [r5, #0]
 8013798:	7802      	ldrb	r2, [r0, #0]
 801379a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801379e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80137a2:	7a52      	ldrb	r2, [r2, #9]
 80137a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80137a8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80137ac:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80137b0:	f990 2001 	ldrsb.w	r2, [r0, #1]
 80137b4:	f991 1002 	ldrsb.w	r1, [r1, #2]
 80137b8:	f990 0002 	ldrsb.w	r0, [r0, #2]
 80137bc:	f7ff fa30 	bl	8012c20 <LimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 80137c0:	682a      	ldr	r2, [r5, #0]
 80137c2:	7823      	ldrb	r3, [r4, #0]
 80137c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80137c8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 80137cc:	2200      	movs	r2, #0
 80137ce:	4907      	ldr	r1, [pc, #28]	; (80137ec <RegionUS915SetContinuousWave+0x60>)
 80137d0:	f7fc f8de 	bl	800f990 <RegionCommonComputeTxPower>
 80137d4:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80137d6:	4b06      	ldr	r3, [pc, #24]	; (80137f0 <RegionUS915SetContinuousWave+0x64>)
 80137d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80137da:	89a2      	ldrh	r2, [r4, #12]
 80137dc:	4628      	mov	r0, r5
 80137de:	4798      	blx	r3
#endif /* REGION_US915 */
}
 80137e0:	bd38      	pop	{r3, r4, r5, pc}
 80137e2:	bf00      	nop
 80137e4:	20001468 	.word	0x20001468
 80137e8:	2000146c 	.word	0x2000146c
 80137ec:	41f00000 	.word	0x41f00000
 80137f0:	08018400 	.word	0x08018400

080137f4 <RegionUS915ApplyDrOffset>:

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 80137f4:	4b04      	ldr	r3, [pc, #16]	; (8013808 <RegionUS915ApplyDrOffset+0x14>)
 80137f6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80137fa:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 80137fc:	2800      	cmp	r0, #0
 80137fe:	db01      	blt.n	8013804 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 8013800:	b2c0      	uxtb	r0, r0
 8013802:	4770      	bx	lr
        datarate = DR_0;
 8013804:	2000      	movs	r0, #0
 8013806:	e7fb      	b.n	8013800 <RegionUS915ApplyDrOffset+0xc>
 8013808:	08017ec4 	.word	0x08017ec4

0801380c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 801380c:	b510      	push	{r4, lr}
 801380e:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 8013810:	2210      	movs	r2, #16
 8013812:	2100      	movs	r1, #0
 8013814:	30f1      	adds	r0, #241	; 0xf1
 8013816:	f000 fee6 	bl	80145e6 <memset1>
    ctx->M_n = 0;
 801381a:	2100      	movs	r1, #0
 801381c:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8013820:	22f0      	movs	r2, #240	; 0xf0
 8013822:	4620      	mov	r0, r4
 8013824:	f000 fedf 	bl	80145e6 <memset1>
}
 8013828:	bd10      	pop	{r4, pc}

0801382a <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 801382a:	b508      	push	{r3, lr}
 801382c:	4602      	mov	r2, r0
 801382e:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8013830:	2110      	movs	r1, #16
 8013832:	f000 fb05 	bl	8013e40 <lorawan_aes_set_key>
}
 8013836:	bd08      	pop	{r3, pc}

08013838 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8013838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801383c:	b085      	sub	sp, #20
 801383e:	4607      	mov	r7, r0
 8013840:	4688      	mov	r8, r1
 8013842:	4691      	mov	r9, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8013844:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8013848:	2b00      	cmp	r3, #0
 801384a:	d04b      	beq.n	80138e4 <AES_CMAC_Update+0xac>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 801384c:	f1c3 0510 	rsb	r5, r3, #16
 8013850:	462c      	mov	r4, r5
 8013852:	4295      	cmp	r5, r2
 8013854:	bf28      	it	cs
 8013856:	4614      	movcs	r4, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8013858:	f200 1001 	addw	r0, r0, #257	; 0x101
 801385c:	b2a2      	uxth	r2, r4
 801385e:	4418      	add	r0, r3
 8013860:	f000 feab 	bl	80145ba <memcpy1>
        ctx->M_n += mlen;
 8013864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013868:	4423      	add	r3, r4
 801386a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 801386e:	2b0f      	cmp	r3, #15
 8013870:	d951      	bls.n	8013916 <AES_CMAC_Update+0xde>
 8013872:	454d      	cmp	r5, r9
 8013874:	d24f      	bcs.n	8013916 <AES_CMAC_Update+0xde>
            return;
        XOR( ctx->M_last, ctx->X );
 8013876:	2300      	movs	r3, #0
 8013878:	e008      	b.n	801388c <AES_CMAC_Update+0x54>
 801387a:	18fa      	adds	r2, r7, r3
 801387c:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 8013880:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 8013884:	4041      	eors	r1, r0
 8013886:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 801388a:	3301      	adds	r3, #1
 801388c:	2b0f      	cmp	r3, #15
 801388e:	ddf4      	ble.n	801387a <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8013890:	f107 05f1 	add.w	r5, r7, #241	; 0xf1
 8013894:	2210      	movs	r2, #16
 8013896:	4629      	mov	r1, r5
 8013898:	4668      	mov	r0, sp
 801389a:	f000 fe8e 	bl	80145ba <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 801389e:	463a      	mov	r2, r7
 80138a0:	4669      	mov	r1, sp
 80138a2:	4668      	mov	r0, sp
 80138a4:	f000 fb56 	bl	8013f54 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 80138a8:	2210      	movs	r2, #16
 80138aa:	4669      	mov	r1, sp
 80138ac:	4628      	mov	r0, r5
 80138ae:	f000 fe84 	bl	80145ba <memcpy1>

        data += mlen;
 80138b2:	44a0      	add	r8, r4
        len -= mlen;
 80138b4:	eba9 0904 	sub.w	r9, r9, r4
 80138b8:	e014      	b.n	80138e4 <AES_CMAC_Update+0xac>
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80138ba:	f107 04f1 	add.w	r4, r7, #241	; 0xf1
 80138be:	2210      	movs	r2, #16
 80138c0:	4621      	mov	r1, r4
 80138c2:	4668      	mov	r0, sp
 80138c4:	f000 fe79 	bl	80145ba <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 80138c8:	463a      	mov	r2, r7
 80138ca:	4669      	mov	r1, sp
 80138cc:	4668      	mov	r0, sp
 80138ce:	f000 fb41 	bl	8013f54 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 80138d2:	2210      	movs	r2, #16
 80138d4:	4669      	mov	r1, sp
 80138d6:	4620      	mov	r0, r4
 80138d8:	f000 fe6f 	bl	80145ba <memcpy1>

        data += 16;
 80138dc:	f108 0810 	add.w	r8, r8, #16
        len -= 16;
 80138e0:	f1a9 0910 	sub.w	r9, r9, #16
    while( len > 16 )
 80138e4:	f1b9 0f10 	cmp.w	r9, #16
 80138e8:	d90c      	bls.n	8013904 <AES_CMAC_Update+0xcc>
        XOR( data, ctx->X );
 80138ea:	2300      	movs	r3, #0
 80138ec:	2b0f      	cmp	r3, #15
 80138ee:	dce4      	bgt.n	80138ba <AES_CMAC_Update+0x82>
 80138f0:	18fd      	adds	r5, r7, r3
 80138f2:	f895 40f1 	ldrb.w	r4, [r5, #241]	; 0xf1
 80138f6:	f818 6003 	ldrb.w	r6, [r8, r3]
 80138fa:	4074      	eors	r4, r6
 80138fc:	f885 40f1 	strb.w	r4, [r5, #241]	; 0xf1
 8013900:	3301      	adds	r3, #1
 8013902:	e7f3      	b.n	80138ec <AES_CMAC_Update+0xb4>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8013904:	fa1f f289 	uxth.w	r2, r9
 8013908:	4641      	mov	r1, r8
 801390a:	f207 1001 	addw	r0, r7, #257	; 0x101
 801390e:	f000 fe54 	bl	80145ba <memcpy1>
    ctx->M_n = len;
 8013912:	f8c7 9114 	str.w	r9, [r7, #276]	; 0x114
}
 8013916:	b005      	add	sp, #20
 8013918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801391c <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 801391c:	b570      	push	{r4, r5, r6, lr}
 801391e:	b088      	sub	sp, #32
 8013920:	4606      	mov	r6, r0
 8013922:	460d      	mov	r5, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8013924:	2210      	movs	r2, #16
 8013926:	2100      	movs	r1, #0
 8013928:	eb0d 0002 	add.w	r0, sp, r2
 801392c:	f000 fe5b 	bl	80145e6 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8013930:	462a      	mov	r2, r5
 8013932:	a904      	add	r1, sp, #16
 8013934:	4608      	mov	r0, r1
 8013936:	f000 fb0d 	bl	8013f54 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 801393a:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 801393e:	2b00      	cmp	r3, #0
 8013940:	db19      	blt.n	8013976 <AES_CMAC_Final+0x5a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 8013942:	2300      	movs	r3, #0
 8013944:	e026      	b.n	8013994 <AES_CMAC_Final+0x78>
        LSHIFT( K, K );
 8013946:	aa08      	add	r2, sp, #32
 8013948:	18d1      	adds	r1, r2, r3
 801394a:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 801394e:	3301      	adds	r3, #1
 8013950:	441a      	add	r2, r3
 8013952:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8013956:	09d2      	lsrs	r2, r2, #7
 8013958:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 801395c:	f801 2c10 	strb.w	r2, [r1, #-16]
 8013960:	2b0e      	cmp	r3, #14
 8013962:	ddf0      	ble.n	8013946 <AES_CMAC_Final+0x2a>
 8013964:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013968:	005b      	lsls	r3, r3, #1
 801396a:	b2db      	uxtb	r3, r3
        K[15] ^= 0x87;
 801396c:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 8013970:	f88d 301f 	strb.w	r3, [sp, #31]
 8013974:	e015      	b.n	80139a2 <AES_CMAC_Final+0x86>
        LSHIFT( K, K );
 8013976:	2300      	movs	r3, #0
 8013978:	e7f2      	b.n	8013960 <AES_CMAC_Final+0x44>
        LSHIFT( K, K );
 801397a:	aa08      	add	r2, sp, #32
 801397c:	18d1      	adds	r1, r2, r3
 801397e:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 8013982:	3301      	adds	r3, #1
 8013984:	441a      	add	r2, r3
 8013986:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 801398a:	09d2      	lsrs	r2, r2, #7
 801398c:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8013990:	f801 2c10 	strb.w	r2, [r1, #-16]
 8013994:	2b0e      	cmp	r3, #14
 8013996:	ddf0      	ble.n	801397a <AES_CMAC_Final+0x5e>
 8013998:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801399c:	005b      	lsls	r3, r3, #1
 801399e:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 80139a2:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
 80139a6:	2810      	cmp	r0, #16
 80139a8:	d014      	beq.n	80139d4 <AES_CMAC_Final+0xb8>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 80139aa:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	db1f      	blt.n	80139f2 <AES_CMAC_Final+0xd6>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 80139b2:	2300      	movs	r3, #0
 80139b4:	2b0e      	cmp	r3, #14
 80139b6:	dc36      	bgt.n	8013a26 <AES_CMAC_Final+0x10a>
 80139b8:	aa08      	add	r2, sp, #32
 80139ba:	18d1      	adds	r1, r2, r3
 80139bc:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 80139c0:	3301      	adds	r3, #1
 80139c2:	441a      	add	r2, r3
 80139c4:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80139c8:	09d2      	lsrs	r2, r2, #7
 80139ca:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 80139ce:	f801 2c10 	strb.w	r2, [r1, #-16]
 80139d2:	e7ef      	b.n	80139b4 <AES_CMAC_Final+0x98>
        XOR( K, ctx->M_last );
 80139d4:	2300      	movs	r3, #0
 80139d6:	2b0f      	cmp	r3, #15
 80139d8:	dc49      	bgt.n	8013a6e <AES_CMAC_Final+0x152>
 80139da:	18e9      	adds	r1, r5, r3
 80139dc:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 80139e0:	a808      	add	r0, sp, #32
 80139e2:	4418      	add	r0, r3
 80139e4:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 80139e8:	4042      	eors	r2, r0
 80139ea:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 80139ee:	3301      	adds	r3, #1
 80139f0:	e7f1      	b.n	80139d6 <AES_CMAC_Final+0xba>
            LSHIFT( K, K );
 80139f2:	2300      	movs	r3, #0
 80139f4:	2b0e      	cmp	r3, #14
 80139f6:	dc0d      	bgt.n	8013a14 <AES_CMAC_Final+0xf8>
 80139f8:	aa08      	add	r2, sp, #32
 80139fa:	18d1      	adds	r1, r2, r3
 80139fc:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 8013a00:	3301      	adds	r3, #1
 8013a02:	441a      	add	r2, r3
 8013a04:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8013a08:	09d2      	lsrs	r2, r2, #7
 8013a0a:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8013a0e:	f801 2c10 	strb.w	r2, [r1, #-16]
 8013a12:	e7ef      	b.n	80139f4 <AES_CMAC_Final+0xd8>
 8013a14:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013a18:	005b      	lsls	r3, r3, #1
 8013a1a:	b2db      	uxtb	r3, r3
            K[15] ^= 0x87;
 8013a1c:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 8013a20:	f88d 301f 	strb.w	r3, [sp, #31]
 8013a24:	e004      	b.n	8013a30 <AES_CMAC_Final+0x114>
            LSHIFT( K, K );
 8013a26:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013a2a:	005b      	lsls	r3, r3, #1
 8013a2c:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 8013a30:	4428      	add	r0, r5
 8013a32:	2380      	movs	r3, #128	; 0x80
 8013a34:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8013a38:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 8013a3c:	3301      	adds	r3, #1
 8013a3e:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
 8013a42:	2b0f      	cmp	r3, #15
 8013a44:	d804      	bhi.n	8013a50 <AES_CMAC_Final+0x134>
            ctx->M_last[ctx->M_n] = 0;
 8013a46:	442b      	add	r3, r5
 8013a48:	2200      	movs	r2, #0
 8013a4a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 8013a4e:	e7f3      	b.n	8013a38 <AES_CMAC_Final+0x11c>

        XOR( K, ctx->M_last );
 8013a50:	2300      	movs	r3, #0
 8013a52:	2b0f      	cmp	r3, #15
 8013a54:	dc0b      	bgt.n	8013a6e <AES_CMAC_Final+0x152>
 8013a56:	18e9      	adds	r1, r5, r3
 8013a58:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 8013a5c:	a808      	add	r0, sp, #32
 8013a5e:	4418      	add	r0, r3
 8013a60:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8013a64:	4042      	eors	r2, r0
 8013a66:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 8013a6a:	3301      	adds	r3, #1
 8013a6c:	e7f1      	b.n	8013a52 <AES_CMAC_Final+0x136>
 8013a6e:	2300      	movs	r3, #0
    }
    XOR( ctx->M_last, ctx->X );
 8013a70:	2b0f      	cmp	r3, #15
 8013a72:	dc09      	bgt.n	8013a88 <AES_CMAC_Final+0x16c>
 8013a74:	18ea      	adds	r2, r5, r3
 8013a76:	f892 40f1 	ldrb.w	r4, [r2, #241]	; 0xf1
 8013a7a:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 8013a7e:	404c      	eors	r4, r1
 8013a80:	f882 40f1 	strb.w	r4, [r2, #241]	; 0xf1
 8013a84:	3301      	adds	r3, #1
 8013a86:	e7f3      	b.n	8013a70 <AES_CMAC_Final+0x154>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8013a88:	2210      	movs	r2, #16
 8013a8a:	f105 01f1 	add.w	r1, r5, #241	; 0xf1
 8013a8e:	4668      	mov	r0, sp
 8013a90:	f000 fd93 	bl	80145ba <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8013a94:	462a      	mov	r2, r5
 8013a96:	4631      	mov	r1, r6
 8013a98:	4668      	mov	r0, sp
 8013a9a:	f000 fa5b 	bl	8013f54 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8013a9e:	2210      	movs	r2, #16
 8013aa0:	2100      	movs	r1, #0
 8013aa2:	eb0d 0002 	add.w	r0, sp, r2
 8013aa6:	f000 fd9e 	bl	80145e6 <memset1>
}
 8013aaa:	b008      	add	sp, #32
 8013aac:	bd70      	pop	{r4, r5, r6, pc}

08013aae <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8013aae:	780b      	ldrb	r3, [r1, #0]
 8013ab0:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8013ab2:	784b      	ldrb	r3, [r1, #1]
 8013ab4:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8013ab6:	788b      	ldrb	r3, [r1, #2]
 8013ab8:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8013aba:	78cb      	ldrb	r3, [r1, #3]
 8013abc:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8013abe:	790b      	ldrb	r3, [r1, #4]
 8013ac0:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8013ac2:	794b      	ldrb	r3, [r1, #5]
 8013ac4:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8013ac6:	798b      	ldrb	r3, [r1, #6]
 8013ac8:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8013aca:	79cb      	ldrb	r3, [r1, #7]
 8013acc:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8013ace:	7a0b      	ldrb	r3, [r1, #8]
 8013ad0:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8013ad2:	7a4b      	ldrb	r3, [r1, #9]
 8013ad4:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 8013ad6:	7a8b      	ldrb	r3, [r1, #10]
 8013ad8:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8013ada:	7acb      	ldrb	r3, [r1, #11]
 8013adc:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8013ade:	7b0b      	ldrb	r3, [r1, #12]
 8013ae0:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 8013ae2:	7b4b      	ldrb	r3, [r1, #13]
 8013ae4:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 8013ae6:	7b8b      	ldrb	r3, [r1, #14]
 8013ae8:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8013aea:	7bcb      	ldrb	r3, [r1, #15]
 8013aec:	73c3      	strb	r3, [r0, #15]
#endif
}
 8013aee:	4770      	bx	lr

08013af0 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 8013af0:	1e53      	subs	r3, r2, #1
 8013af2:	b2db      	uxtb	r3, r3
 8013af4:	b12a      	cbz	r2, 8013b02 <copy_block_nn+0x12>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 8013af6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013afa:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 8013afe:	461a      	mov	r2, r3
 8013b00:	e7f6      	b.n	8013af0 <copy_block_nn>
}
 8013b02:	4770      	bx	lr

08013b04 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8013b04:	780b      	ldrb	r3, [r1, #0]
 8013b06:	7802      	ldrb	r2, [r0, #0]
 8013b08:	4053      	eors	r3, r2
 8013b0a:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8013b0c:	784b      	ldrb	r3, [r1, #1]
 8013b0e:	7842      	ldrb	r2, [r0, #1]
 8013b10:	4053      	eors	r3, r2
 8013b12:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8013b14:	788b      	ldrb	r3, [r1, #2]
 8013b16:	7882      	ldrb	r2, [r0, #2]
 8013b18:	4053      	eors	r3, r2
 8013b1a:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8013b1c:	78cb      	ldrb	r3, [r1, #3]
 8013b1e:	78c2      	ldrb	r2, [r0, #3]
 8013b20:	4053      	eors	r3, r2
 8013b22:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8013b24:	790b      	ldrb	r3, [r1, #4]
 8013b26:	7902      	ldrb	r2, [r0, #4]
 8013b28:	4053      	eors	r3, r2
 8013b2a:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8013b2c:	794b      	ldrb	r3, [r1, #5]
 8013b2e:	7942      	ldrb	r2, [r0, #5]
 8013b30:	4053      	eors	r3, r2
 8013b32:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8013b34:	798b      	ldrb	r3, [r1, #6]
 8013b36:	7982      	ldrb	r2, [r0, #6]
 8013b38:	4053      	eors	r3, r2
 8013b3a:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8013b3c:	79cb      	ldrb	r3, [r1, #7]
 8013b3e:	79c2      	ldrb	r2, [r0, #7]
 8013b40:	4053      	eors	r3, r2
 8013b42:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8013b44:	7a0b      	ldrb	r3, [r1, #8]
 8013b46:	7a02      	ldrb	r2, [r0, #8]
 8013b48:	4053      	eors	r3, r2
 8013b4a:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8013b4c:	7a4b      	ldrb	r3, [r1, #9]
 8013b4e:	7a42      	ldrb	r2, [r0, #9]
 8013b50:	4053      	eors	r3, r2
 8013b52:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8013b54:	7a8b      	ldrb	r3, [r1, #10]
 8013b56:	7a82      	ldrb	r2, [r0, #10]
 8013b58:	4053      	eors	r3, r2
 8013b5a:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8013b5c:	7acb      	ldrb	r3, [r1, #11]
 8013b5e:	7ac2      	ldrb	r2, [r0, #11]
 8013b60:	4053      	eors	r3, r2
 8013b62:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8013b64:	7b0b      	ldrb	r3, [r1, #12]
 8013b66:	7b02      	ldrb	r2, [r0, #12]
 8013b68:	4053      	eors	r3, r2
 8013b6a:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8013b6c:	7b4b      	ldrb	r3, [r1, #13]
 8013b6e:	7b42      	ldrb	r2, [r0, #13]
 8013b70:	4053      	eors	r3, r2
 8013b72:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8013b74:	7b8b      	ldrb	r3, [r1, #14]
 8013b76:	7b82      	ldrb	r2, [r0, #14]
 8013b78:	4053      	eors	r3, r2
 8013b7a:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8013b7c:	7bcb      	ldrb	r3, [r1, #15]
 8013b7e:	7bc2      	ldrb	r2, [r0, #15]
 8013b80:	4053      	eors	r3, r2
 8013b82:	73c3      	strb	r3, [r0, #15]
#endif
}
 8013b84:	4770      	bx	lr

08013b86 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8013b86:	b410      	push	{r4}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8013b88:	780b      	ldrb	r3, [r1, #0]
 8013b8a:	7814      	ldrb	r4, [r2, #0]
 8013b8c:	4063      	eors	r3, r4
 8013b8e:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8013b90:	784b      	ldrb	r3, [r1, #1]
 8013b92:	7854      	ldrb	r4, [r2, #1]
 8013b94:	4063      	eors	r3, r4
 8013b96:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8013b98:	788b      	ldrb	r3, [r1, #2]
 8013b9a:	7894      	ldrb	r4, [r2, #2]
 8013b9c:	4063      	eors	r3, r4
 8013b9e:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8013ba0:	78cb      	ldrb	r3, [r1, #3]
 8013ba2:	78d4      	ldrb	r4, [r2, #3]
 8013ba4:	4063      	eors	r3, r4
 8013ba6:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8013ba8:	790b      	ldrb	r3, [r1, #4]
 8013baa:	7914      	ldrb	r4, [r2, #4]
 8013bac:	4063      	eors	r3, r4
 8013bae:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8013bb0:	794b      	ldrb	r3, [r1, #5]
 8013bb2:	7954      	ldrb	r4, [r2, #5]
 8013bb4:	4063      	eors	r3, r4
 8013bb6:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8013bb8:	798b      	ldrb	r3, [r1, #6]
 8013bba:	7994      	ldrb	r4, [r2, #6]
 8013bbc:	4063      	eors	r3, r4
 8013bbe:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8013bc0:	79cb      	ldrb	r3, [r1, #7]
 8013bc2:	79d4      	ldrb	r4, [r2, #7]
 8013bc4:	4063      	eors	r3, r4
 8013bc6:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8013bc8:	7a0b      	ldrb	r3, [r1, #8]
 8013bca:	7a14      	ldrb	r4, [r2, #8]
 8013bcc:	4063      	eors	r3, r4
 8013bce:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8013bd0:	7a4b      	ldrb	r3, [r1, #9]
 8013bd2:	7a54      	ldrb	r4, [r2, #9]
 8013bd4:	4063      	eors	r3, r4
 8013bd6:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8013bd8:	7a8b      	ldrb	r3, [r1, #10]
 8013bda:	7a94      	ldrb	r4, [r2, #10]
 8013bdc:	4063      	eors	r3, r4
 8013bde:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8013be0:	7acb      	ldrb	r3, [r1, #11]
 8013be2:	7ad4      	ldrb	r4, [r2, #11]
 8013be4:	4063      	eors	r3, r4
 8013be6:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8013be8:	7b0b      	ldrb	r3, [r1, #12]
 8013bea:	7b14      	ldrb	r4, [r2, #12]
 8013bec:	4063      	eors	r3, r4
 8013bee:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8013bf0:	7b4b      	ldrb	r3, [r1, #13]
 8013bf2:	7b54      	ldrb	r4, [r2, #13]
 8013bf4:	4063      	eors	r3, r4
 8013bf6:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8013bf8:	7b8b      	ldrb	r3, [r1, #14]
 8013bfa:	7b94      	ldrb	r4, [r2, #14]
 8013bfc:	4063      	eors	r3, r4
 8013bfe:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8013c00:	7bcb      	ldrb	r3, [r1, #15]
 8013c02:	7bd2      	ldrb	r2, [r2, #15]
 8013c04:	4053      	eors	r3, r2
 8013c06:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8013c08:	bc10      	pop	{r4}
 8013c0a:	4770      	bx	lr

08013c0c <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8013c0c:	b508      	push	{r3, lr}
    xor_block(d, k);
 8013c0e:	f7ff ff79 	bl	8013b04 <xor_block>
}
 8013c12:	bd08      	pop	{r3, pc}

08013c14 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8013c14:	7802      	ldrb	r2, [r0, #0]
 8013c16:	4b18      	ldr	r3, [pc, #96]	; (8013c78 <shift_sub_rows+0x64>)
 8013c18:	5c9a      	ldrb	r2, [r3, r2]
 8013c1a:	7002      	strb	r2, [r0, #0]
 8013c1c:	7902      	ldrb	r2, [r0, #4]
 8013c1e:	5c9a      	ldrb	r2, [r3, r2]
 8013c20:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8013c22:	7a02      	ldrb	r2, [r0, #8]
 8013c24:	5c9a      	ldrb	r2, [r3, r2]
 8013c26:	7202      	strb	r2, [r0, #8]
 8013c28:	7b02      	ldrb	r2, [r0, #12]
 8013c2a:	5c9a      	ldrb	r2, [r3, r2]
 8013c2c:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8013c2e:	7842      	ldrb	r2, [r0, #1]
 8013c30:	7941      	ldrb	r1, [r0, #5]
 8013c32:	5c59      	ldrb	r1, [r3, r1]
 8013c34:	7041      	strb	r1, [r0, #1]
 8013c36:	7a41      	ldrb	r1, [r0, #9]
 8013c38:	5c59      	ldrb	r1, [r3, r1]
 8013c3a:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8013c3c:	7b41      	ldrb	r1, [r0, #13]
 8013c3e:	5c59      	ldrb	r1, [r3, r1]
 8013c40:	7241      	strb	r1, [r0, #9]
 8013c42:	5c9a      	ldrb	r2, [r3, r2]
 8013c44:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8013c46:	7882      	ldrb	r2, [r0, #2]
 8013c48:	7a81      	ldrb	r1, [r0, #10]
 8013c4a:	5c59      	ldrb	r1, [r3, r1]
 8013c4c:	7081      	strb	r1, [r0, #2]
 8013c4e:	5c9a      	ldrb	r2, [r3, r2]
 8013c50:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8013c52:	7982      	ldrb	r2, [r0, #6]
 8013c54:	7b81      	ldrb	r1, [r0, #14]
 8013c56:	5c59      	ldrb	r1, [r3, r1]
 8013c58:	7181      	strb	r1, [r0, #6]
 8013c5a:	5c9a      	ldrb	r2, [r3, r2]
 8013c5c:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8013c5e:	7bc2      	ldrb	r2, [r0, #15]
 8013c60:	7ac1      	ldrb	r1, [r0, #11]
 8013c62:	5c59      	ldrb	r1, [r3, r1]
 8013c64:	73c1      	strb	r1, [r0, #15]
 8013c66:	79c1      	ldrb	r1, [r0, #7]
 8013c68:	5c59      	ldrb	r1, [r3, r1]
 8013c6a:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8013c6c:	78c1      	ldrb	r1, [r0, #3]
 8013c6e:	5c59      	ldrb	r1, [r3, r1]
 8013c70:	71c1      	strb	r1, [r0, #7]
 8013c72:	5c9b      	ldrb	r3, [r3, r2]
 8013c74:	70c3      	strb	r3, [r0, #3]
}
 8013c76:	4770      	bx	lr
 8013c78:	08018108 	.word	0x08018108

08013c7c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8013c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c80:	b084      	sub	sp, #16
 8013c82:	4604      	mov	r4, r0
    block_copy(st, dt);
 8013c84:	4601      	mov	r1, r0
 8013c86:	4668      	mov	r0, sp
 8013c88:	f7ff ff11 	bl	8013aae <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8013c8c:	f89d c000 	ldrb.w	ip, [sp]
 8013c90:	4b68      	ldr	r3, [pc, #416]	; (8013e34 <mix_sub_columns+0x1b8>)
 8013c92:	f813 000c 	ldrb.w	r0, [r3, ip]
 8013c96:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8013c9a:	4a67      	ldr	r2, [pc, #412]	; (8013e38 <mix_sub_columns+0x1bc>)
 8013c9c:	f812 9008 	ldrb.w	r9, [r2, r8]
 8013ca0:	f89d e00a 	ldrb.w	lr, [sp, #10]
 8013ca4:	4965      	ldr	r1, [pc, #404]	; (8013e3c <mix_sub_columns+0x1c0>)
 8013ca6:	f811 500e 	ldrb.w	r5, [r1, lr]
 8013caa:	f89d 700f 	ldrb.w	r7, [sp, #15]
 8013cae:	5dce      	ldrb	r6, [r1, r7]
 8013cb0:	ea80 0009 	eor.w	r0, r0, r9
 8013cb4:	4068      	eors	r0, r5
 8013cb6:	4070      	eors	r0, r6
 8013cb8:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8013cba:	f811 000c 	ldrb.w	r0, [r1, ip]
 8013cbe:	f813 a008 	ldrb.w	sl, [r3, r8]
 8013cc2:	f812 900e 	ldrb.w	r9, [r2, lr]
 8013cc6:	ea80 0a0a 	eor.w	sl, r0, sl
 8013cca:	ea89 090a 	eor.w	r9, r9, sl
 8013cce:	ea86 0609 	eor.w	r6, r6, r9
 8013cd2:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8013cd4:	f811 8008 	ldrb.w	r8, [r1, r8]
 8013cd8:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8013cdc:	5dd6      	ldrb	r6, [r2, r7]
 8013cde:	ea80 0008 	eor.w	r0, r0, r8
 8013ce2:	ea8e 0000 	eor.w	r0, lr, r0
 8013ce6:	4070      	eors	r0, r6
 8013ce8:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8013cea:	f812 600c 	ldrb.w	r6, [r2, ip]
 8013cee:	5dd8      	ldrb	r0, [r3, r7]
 8013cf0:	ea86 0608 	eor.w	r6, r6, r8
 8013cf4:	4075      	eors	r5, r6
 8013cf6:	4045      	eors	r5, r0
 8013cf8:	70e5      	strb	r5, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8013cfa:	f89d c004 	ldrb.w	ip, [sp, #4]
 8013cfe:	f813 000c 	ldrb.w	r0, [r3, ip]
 8013d02:	f89d 8009 	ldrb.w	r8, [sp, #9]
 8013d06:	f812 9008 	ldrb.w	r9, [r2, r8]
 8013d0a:	f89d e00e 	ldrb.w	lr, [sp, #14]
 8013d0e:	f811 500e 	ldrb.w	r5, [r1, lr]
 8013d12:	f89d 7003 	ldrb.w	r7, [sp, #3]
 8013d16:	5dce      	ldrb	r6, [r1, r7]
 8013d18:	ea80 0009 	eor.w	r0, r0, r9
 8013d1c:	4068      	eors	r0, r5
 8013d1e:	4070      	eors	r0, r6
 8013d20:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8013d22:	f811 000c 	ldrb.w	r0, [r1, ip]
 8013d26:	f813 a008 	ldrb.w	sl, [r3, r8]
 8013d2a:	f812 900e 	ldrb.w	r9, [r2, lr]
 8013d2e:	ea80 0a0a 	eor.w	sl, r0, sl
 8013d32:	ea89 090a 	eor.w	r9, r9, sl
 8013d36:	ea86 0609 	eor.w	r6, r6, r9
 8013d3a:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8013d3c:	f811 8008 	ldrb.w	r8, [r1, r8]
 8013d40:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8013d44:	5dd6      	ldrb	r6, [r2, r7]
 8013d46:	ea80 0008 	eor.w	r0, r0, r8
 8013d4a:	ea8e 0000 	eor.w	r0, lr, r0
 8013d4e:	4070      	eors	r0, r6
 8013d50:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8013d52:	f812 600c 	ldrb.w	r6, [r2, ip]
 8013d56:	5dd8      	ldrb	r0, [r3, r7]
 8013d58:	ea86 0608 	eor.w	r6, r6, r8
 8013d5c:	4075      	eors	r5, r6
 8013d5e:	4045      	eors	r5, r0
 8013d60:	71e5      	strb	r5, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8013d62:	f89d c008 	ldrb.w	ip, [sp, #8]
 8013d66:	f813 000c 	ldrb.w	r0, [r3, ip]
 8013d6a:	f89d 800d 	ldrb.w	r8, [sp, #13]
 8013d6e:	f812 9008 	ldrb.w	r9, [r2, r8]
 8013d72:	f89d e002 	ldrb.w	lr, [sp, #2]
 8013d76:	f811 500e 	ldrb.w	r5, [r1, lr]
 8013d7a:	f89d 7007 	ldrb.w	r7, [sp, #7]
 8013d7e:	5dce      	ldrb	r6, [r1, r7]
 8013d80:	ea80 0009 	eor.w	r0, r0, r9
 8013d84:	4068      	eors	r0, r5
 8013d86:	4070      	eors	r0, r6
 8013d88:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8013d8a:	f811 000c 	ldrb.w	r0, [r1, ip]
 8013d8e:	f813 a008 	ldrb.w	sl, [r3, r8]
 8013d92:	f812 900e 	ldrb.w	r9, [r2, lr]
 8013d96:	ea80 0a0a 	eor.w	sl, r0, sl
 8013d9a:	ea89 090a 	eor.w	r9, r9, sl
 8013d9e:	ea86 0609 	eor.w	r6, r6, r9
 8013da2:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8013da4:	f811 8008 	ldrb.w	r8, [r1, r8]
 8013da8:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8013dac:	5dd6      	ldrb	r6, [r2, r7]
 8013dae:	ea80 0008 	eor.w	r0, r0, r8
 8013db2:	ea8e 0000 	eor.w	r0, lr, r0
 8013db6:	4070      	eors	r0, r6
 8013db8:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8013dba:	f812 600c 	ldrb.w	r6, [r2, ip]
 8013dbe:	5dd8      	ldrb	r0, [r3, r7]
 8013dc0:	ea86 0608 	eor.w	r6, r6, r8
 8013dc4:	4075      	eors	r5, r6
 8013dc6:	4045      	eors	r5, r0
 8013dc8:	72e5      	strb	r5, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8013dca:	f89d c00c 	ldrb.w	ip, [sp, #12]
 8013dce:	f813 000c 	ldrb.w	r0, [r3, ip]
 8013dd2:	f89d 8001 	ldrb.w	r8, [sp, #1]
 8013dd6:	f812 9008 	ldrb.w	r9, [r2, r8]
 8013dda:	f89d e006 	ldrb.w	lr, [sp, #6]
 8013dde:	f811 500e 	ldrb.w	r5, [r1, lr]
 8013de2:	f89d 700b 	ldrb.w	r7, [sp, #11]
 8013de6:	5dce      	ldrb	r6, [r1, r7]
 8013de8:	ea80 0009 	eor.w	r0, r0, r9
 8013dec:	4068      	eors	r0, r5
 8013dee:	4070      	eors	r0, r6
 8013df0:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8013df2:	f811 000c 	ldrb.w	r0, [r1, ip]
 8013df6:	f813 a008 	ldrb.w	sl, [r3, r8]
 8013dfa:	f812 900e 	ldrb.w	r9, [r2, lr]
 8013dfe:	ea80 0a0a 	eor.w	sl, r0, sl
 8013e02:	ea89 090a 	eor.w	r9, r9, sl
 8013e06:	ea86 0609 	eor.w	r6, r6, r9
 8013e0a:	7366      	strb	r6, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8013e0c:	f811 1008 	ldrb.w	r1, [r1, r8]
 8013e10:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8013e14:	5dd6      	ldrb	r6, [r2, r7]
 8013e16:	4048      	eors	r0, r1
 8013e18:	ea8e 0000 	eor.w	r0, lr, r0
 8013e1c:	4070      	eors	r0, r6
 8013e1e:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8013e20:	f812 200c 	ldrb.w	r2, [r2, ip]
 8013e24:	5ddb      	ldrb	r3, [r3, r7]
 8013e26:	4051      	eors	r1, r2
 8013e28:	404d      	eors	r5, r1
 8013e2a:	405d      	eors	r5, r3
 8013e2c:	73e5      	strb	r5, [r4, #15]
  }
 8013e2e:	b004      	add	sp, #16
 8013e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e34:	08017f08 	.word	0x08017f08
 8013e38:	08018008 	.word	0x08018008
 8013e3c:	08018108 	.word	0x08018108

08013e40 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8013e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e44:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 8013e46:	f1a1 0310 	sub.w	r3, r1, #16
 8013e4a:	b2da      	uxtb	r2, r3
 8013e4c:	2a10      	cmp	r2, #16
 8013e4e:	d807      	bhi.n	8013e60 <lorawan_aes_set_key+0x20>
 8013e50:	460d      	mov	r5, r1
 8013e52:	2301      	movs	r3, #1
 8013e54:	4093      	lsls	r3, r2
 8013e56:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8013e5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013e5e:	b92b      	cbnz	r3, 8013e6c <lorawan_aes_set_key+0x2c>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8013e60:	2300      	movs	r3, #0
 8013e62:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 8013e66:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8013e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 8013e6c:	460a      	mov	r2, r1
 8013e6e:	4601      	mov	r1, r0
 8013e70:	4620      	mov	r0, r4
 8013e72:	f7ff fe3d 	bl	8013af0 <copy_block_nn>
    hi = (keylen + 28) << 2;
 8013e76:	f105 031c 	add.w	r3, r5, #28
 8013e7a:	b2db      	uxtb	r3, r3
 8013e7c:	009b      	lsls	r3, r3, #2
 8013e7e:	b2df      	uxtb	r7, r3
    ctx->rnd = (hi >> 4) - 1;
 8013e80:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8013e84:	3b01      	subs	r3, #1
 8013e86:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8013e8a:	462b      	mov	r3, r5
 8013e8c:	2601      	movs	r6, #1
 8013e8e:	e028      	b.n	8013ee2 <lorawan_aes_set_key+0xa2>
        else if( keylen > 24 && cc % keylen == 16 )
 8013e90:	2d18      	cmp	r5, #24
 8013e92:	d901      	bls.n	8013e98 <lorawan_aes_set_key+0x58>
 8013e94:	2a10      	cmp	r2, #16
 8013e96:	d04f      	beq.n	8013f38 <lorawan_aes_set_key+0xf8>
        tt = cc - keylen;
 8013e98:	1b5a      	subs	r2, r3, r5
 8013e9a:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8013e9c:	f814 9002 	ldrb.w	r9, [r4, r2]
 8013ea0:	ea89 0808 	eor.w	r8, r9, r8
 8013ea4:	f804 8001 	strb.w	r8, [r4, r1]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8013ea8:	f102 0801 	add.w	r8, r2, #1
 8013eac:	f814 8008 	ldrb.w	r8, [r4, r8]
 8013eb0:	f101 0901 	add.w	r9, r1, #1
 8013eb4:	ea88 0e0e 	eor.w	lr, r8, lr
 8013eb8:	f804 e009 	strb.w	lr, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8013ebc:	f102 0e02 	add.w	lr, r2, #2
 8013ec0:	f814 e00e 	ldrb.w	lr, [r4, lr]
 8013ec4:	f101 0802 	add.w	r8, r1, #2
 8013ec8:	ea8e 0c0c 	eor.w	ip, lr, ip
 8013ecc:	f804 c008 	strb.w	ip, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8013ed0:	3203      	adds	r2, #3
 8013ed2:	f814 c002 	ldrb.w	ip, [r4, r2]
 8013ed6:	1cca      	adds	r2, r1, #3
 8013ed8:	ea8c 0000 	eor.w	r0, ip, r0
 8013edc:	54a0      	strb	r0, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8013ede:	3304      	adds	r3, #4
 8013ee0:	b2db      	uxtb	r3, r3
 8013ee2:	42bb      	cmp	r3, r7
 8013ee4:	d231      	bcs.n	8013f4a <lorawan_aes_set_key+0x10a>
        t0 = ctx->ksch[cc - 4];
 8013ee6:	4619      	mov	r1, r3
 8013ee8:	1f1a      	subs	r2, r3, #4
 8013eea:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 8013eee:	1eda      	subs	r2, r3, #3
 8013ef0:	f814 e002 	ldrb.w	lr, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 8013ef4:	1e9a      	subs	r2, r3, #2
 8013ef6:	f814 c002 	ldrb.w	ip, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 8013efa:	1e5a      	subs	r2, r3, #1
 8013efc:	5ca0      	ldrb	r0, [r4, r2]
        if( cc % keylen == 0 )
 8013efe:	fbb3 f2f5 	udiv	r2, r3, r5
 8013f02:	fb05 3212 	mls	r2, r5, r2, r3
 8013f06:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8013f0a:	d1c1      	bne.n	8013e90 <lorawan_aes_set_key+0x50>
            t0 = s_box(t1) ^ rc;
 8013f0c:	4a10      	ldr	r2, [pc, #64]	; (8013f50 <lorawan_aes_set_key+0x110>)
 8013f0e:	f812 900e 	ldrb.w	r9, [r2, lr]
 8013f12:	ea89 0906 	eor.w	r9, r9, r6
            t1 = s_box(t2);
 8013f16:	f812 e00c 	ldrb.w	lr, [r2, ip]
            t2 = s_box(t3);
 8013f1a:	f812 c000 	ldrb.w	ip, [r2, r0]
            t3 = s_box(tt);
 8013f1e:	f812 0008 	ldrb.w	r0, [r2, r8]
            rc = f2(rc);
 8013f22:	09f2      	lsrs	r2, r6, #7
 8013f24:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8013f28:	4442      	add	r2, r8
 8013f2a:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8013f2e:	ea82 0646 	eor.w	r6, r2, r6, lsl #1
 8013f32:	b2f6      	uxtb	r6, r6
            t0 = s_box(t1) ^ rc;
 8013f34:	46c8      	mov	r8, r9
 8013f36:	e7af      	b.n	8013e98 <lorawan_aes_set_key+0x58>
            t0 = s_box(t0);
 8013f38:	4a05      	ldr	r2, [pc, #20]	; (8013f50 <lorawan_aes_set_key+0x110>)
 8013f3a:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 8013f3e:	f812 e00e 	ldrb.w	lr, [r2, lr]
            t2 = s_box(t2);
 8013f42:	f812 c00c 	ldrb.w	ip, [r2, ip]
            t3 = s_box(t3);
 8013f46:	5c10      	ldrb	r0, [r2, r0]
 8013f48:	e7a6      	b.n	8013e98 <lorawan_aes_set_key+0x58>
    return 0;
 8013f4a:	2000      	movs	r0, #0
 8013f4c:	e78c      	b.n	8013e68 <lorawan_aes_set_key+0x28>
 8013f4e:	bf00      	nop
 8013f50:	08018108 	.word	0x08018108

08013f54 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 8013f54:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 8013f58:	b323      	cbz	r3, 8013fa4 <lorawan_aes_encrypt+0x50>
{
 8013f5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f5c:	b085      	sub	sp, #20
 8013f5e:	460f      	mov	r7, r1
 8013f60:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8013f62:	4616      	mov	r6, r2
 8013f64:	4601      	mov	r1, r0
 8013f66:	4668      	mov	r0, sp
 8013f68:	f7ff fe0d 	bl	8013b86 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8013f6c:	2401      	movs	r4, #1
 8013f6e:	e009      	b.n	8013f84 <lorawan_aes_encrypt+0x30>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 8013f70:	4668      	mov	r0, sp
 8013f72:	f7ff fe83 	bl	8013c7c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8013f76:	eb06 1104 	add.w	r1, r6, r4, lsl #4
 8013f7a:	4668      	mov	r0, sp
 8013f7c:	f7ff fe46 	bl	8013c0c <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8013f80:	3401      	adds	r4, #1
 8013f82:	b2e4      	uxtb	r4, r4
 8013f84:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 8013f88:	42a3      	cmp	r3, r4
 8013f8a:	d8f1      	bhi.n	8013f70 <lorawan_aes_encrypt+0x1c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8013f8c:	4668      	mov	r0, sp
 8013f8e:	f7ff fe41 	bl	8013c14 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8013f92:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8013f96:	4669      	mov	r1, sp
 8013f98:	4638      	mov	r0, r7
 8013f9a:	f7ff fdf4 	bl	8013b86 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8013f9e:	2000      	movs	r0, #0
}
 8013fa0:	b005      	add	sp, #20
 8013fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ( uint8_t )-1;
 8013fa4:	20ff      	movs	r0, #255	; 0xff
}
 8013fa6:	4770      	bx	lr

08013fa8 <GetKeyByID>:
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8013fa8:	2300      	movs	r3, #0
 8013faa:	2b09      	cmp	r3, #9
 8013fac:	d816      	bhi.n	8013fdc <GetKeyByID+0x34>
{
 8013fae:	b430      	push	{r4, r5}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8013fb0:	4a0b      	ldr	r2, [pc, #44]	; (8013fe0 <GetKeyByID+0x38>)
 8013fb2:	6814      	ldr	r4, [r2, #0]
 8013fb4:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8013fb8:	4422      	add	r2, r4
 8013fba:	7c12      	ldrb	r2, [r2, #16]
 8013fbc:	4282      	cmp	r2, r0
 8013fbe:	d006      	beq.n	8013fce <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8013fc0:	3301      	adds	r3, #1
 8013fc2:	b2db      	uxtb	r3, r3
 8013fc4:	2b09      	cmp	r3, #9
 8013fc6:	d9f3      	bls.n	8013fb0 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8013fc8:	2003      	movs	r0, #3
}
 8013fca:	bc30      	pop	{r4, r5}
 8013fcc:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 8013fce:	eb03 1503 	add.w	r5, r3, r3, lsl #4
 8013fd2:	3510      	adds	r5, #16
 8013fd4:	442c      	add	r4, r5
 8013fd6:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8013fd8:	2000      	movs	r0, #0
 8013fda:	e7f6      	b.n	8013fca <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8013fdc:	2003      	movs	r0, #3
}
 8013fde:	4770      	bx	lr
 8013fe0:	20001470 	.word	0x20001470

08013fe4 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 8013fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fe8:	b0cc      	sub	sp, #304	; 0x130
 8013fea:	9e52      	ldr	r6, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8013fec:	b3a9      	cbz	r1, 801405a <ComputeCmac+0x76>
 8013fee:	4605      	mov	r5, r0
 8013ff0:	4617      	mov	r7, r2
 8013ff2:	461c      	mov	r4, r3
 8013ff4:	4688      	mov	r8, r1
 8013ff6:	b396      	cbz	r6, 801405e <ComputeCmac+0x7a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 8013ff8:	a802      	add	r0, sp, #8
 8013ffa:	f7ff fc07 	bl	801380c <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8013ffe:	a901      	add	r1, sp, #4
 8014000:	4620      	mov	r0, r4
 8014002:	f7ff ffd1 	bl	8013fa8 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8014006:	4604      	mov	r4, r0
 8014008:	b118      	cbz	r0, 8014012 <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 801400a:	4620      	mov	r0, r4
 801400c:	b04c      	add	sp, #304	; 0x130
 801400e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8014012:	9901      	ldr	r1, [sp, #4]
 8014014:	3101      	adds	r1, #1
 8014016:	a802      	add	r0, sp, #8
 8014018:	f7ff fc07 	bl	801382a <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 801401c:	b125      	cbz	r5, 8014028 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 801401e:	2210      	movs	r2, #16
 8014020:	4629      	mov	r1, r5
 8014022:	a802      	add	r0, sp, #8
 8014024:	f7ff fc08 	bl	8013838 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8014028:	463a      	mov	r2, r7
 801402a:	4641      	mov	r1, r8
 801402c:	a802      	add	r0, sp, #8
 801402e:	f7ff fc03 	bl	8013838 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 8014032:	a902      	add	r1, sp, #8
 8014034:	a848      	add	r0, sp, #288	; 0x120
 8014036:	f7ff fc71 	bl	801391c <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 801403a:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 801403e:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 8014042:	041b      	lsls	r3, r3, #16
 8014044:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8014048:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 801404c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              ( uint32_t ) Cmac[0] );
 8014050:	f89d 2120 	ldrb.w	r2, [sp, #288]	; 0x120
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 8014054:	4313      	orrs	r3, r2
 8014056:	6033      	str	r3, [r6, #0]
 8014058:	e7d7      	b.n	801400a <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 801405a:	2402      	movs	r4, #2
 801405c:	e7d5      	b.n	801400a <ComputeCmac+0x26>
 801405e:	2402      	movs	r4, #2
 8014060:	e7d3      	b.n	801400a <ComputeCmac+0x26>
	...

08014064 <SecureElementGetKeyByID>:
/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 8014064:	2300      	movs	r3, #0
 8014066:	2b09      	cmp	r3, #9
 8014068:	d816      	bhi.n	8014098 <SecureElementGetKeyByID+0x34>
{
 801406a:	b430      	push	{r4, r5}
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 801406c:	4a0b      	ldr	r2, [pc, #44]	; (801409c <SecureElementGetKeyByID+0x38>)
 801406e:	6814      	ldr	r4, [r2, #0]
 8014070:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8014074:	4422      	add	r2, r4
 8014076:	7c12      	ldrb	r2, [r2, #16]
 8014078:	4282      	cmp	r2, r0
 801407a:	d006      	beq.n	801408a <SecureElementGetKeyByID+0x26>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 801407c:	3301      	adds	r3, #1
 801407e:	b2db      	uxtb	r3, r3
 8014080:	2b09      	cmp	r3, #9
 8014082:	d9f3      	bls.n	801406c <SecureElementGetKeyByID+0x8>
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8014084:	2003      	movs	r0, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 8014086:	bc30      	pop	{r4, r5}
 8014088:	4770      	bx	lr
            *keyItem = &(SeNvm->KeyList[i]);
 801408a:	eb03 1503 	add.w	r5, r3, r3, lsl #4
 801408e:	3510      	adds	r5, #16
 8014090:	442c      	add	r4, r5
 8014092:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8014094:	2000      	movs	r0, #0
 8014096:	e7f6      	b.n	8014086 <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8014098:	2003      	movs	r0, #3
}
 801409a:	4770      	bx	lr
 801409c:	20001470 	.word	0x20001470

080140a0 <PrintKey>:
{
 80140a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140a4:	b095      	sub	sp, #84	; 0x54
 80140a6:	4604      	mov	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 80140a8:	a913      	add	r1, sp, #76	; 0x4c
 80140aa:	f7ff ffdb 	bl	8014064 <SecureElementGetKeyByID>
    if (retval == SECURE_ELEMENT_SUCCESS)
 80140ae:	2800      	cmp	r0, #0
 80140b0:	d154      	bne.n	801415c <PrintKey+0xbc>
        if (key == APP_KEY)
 80140b2:	b1b4      	cbz	r4, 80140e2 <PrintKey+0x42>
        else if (key == NWK_KEY)
 80140b4:	2c01      	cmp	r4, #1
 80140b6:	d054      	beq.n	8014162 <PrintKey+0xc2>
        else if (key == APP_S_KEY)
 80140b8:	2c03      	cmp	r4, #3
 80140ba:	d059      	beq.n	8014170 <PrintKey+0xd0>
        else if (key == NWK_S_KEY)
 80140bc:	2c02      	cmp	r4, #2
 80140be:	d05e      	beq.n	801417e <PrintKey+0xde>
        else if (key == MC_ROOT_KEY)
 80140c0:	2c04      	cmp	r4, #4
 80140c2:	d063      	beq.n	801418c <PrintKey+0xec>
        else if (key == MC_KE_KEY)
 80140c4:	2c7f      	cmp	r4, #127	; 0x7f
 80140c6:	d068      	beq.n	801419a <PrintKey+0xfa>
        else if (key == MC_KEY_0)
 80140c8:	2c80      	cmp	r4, #128	; 0x80
 80140ca:	d06d      	beq.n	80141a8 <PrintKey+0x108>
        else if (key == MC_APP_S_KEY_0)
 80140cc:	2c81      	cmp	r4, #129	; 0x81
 80140ce:	d072      	beq.n	80141b6 <PrintKey+0x116>
        else if (key == MC_NWK_S_KEY_0)
 80140d0:	2c82      	cmp	r4, #130	; 0x82
 80140d2:	d10c      	bne.n	80140ee <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 80140d4:	4b3b      	ldr	r3, [pc, #236]	; (80141c4 <PrintKey+0x124>)
 80140d6:	2200      	movs	r2, #0
 80140d8:	4611      	mov	r1, r2
 80140da:	2002      	movs	r0, #2
 80140dc:	f002 fbf6 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
 80140e0:	e005      	b.n	80140ee <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 80140e2:	4b39      	ldr	r3, [pc, #228]	; (80141c8 <PrintKey+0x128>)
 80140e4:	2200      	movs	r2, #0
 80140e6:	4611      	mov	r1, r2
 80140e8:	2002      	movs	r0, #2
 80140ea:	f002 fbef 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80140ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80140f0:	785a      	ldrb	r2, [r3, #1]
 80140f2:	9210      	str	r2, [sp, #64]	; 0x40
 80140f4:	7899      	ldrb	r1, [r3, #2]
 80140f6:	9111      	str	r1, [sp, #68]	; 0x44
 80140f8:	78da      	ldrb	r2, [r3, #3]
 80140fa:	7919      	ldrb	r1, [r3, #4]
 80140fc:	7958      	ldrb	r0, [r3, #5]
 80140fe:	799c      	ldrb	r4, [r3, #6]
 8014100:	79dd      	ldrb	r5, [r3, #7]
 8014102:	7a1e      	ldrb	r6, [r3, #8]
 8014104:	7a5f      	ldrb	r7, [r3, #9]
 8014106:	f893 c00a 	ldrb.w	ip, [r3, #10]
 801410a:	f893 e00b 	ldrb.w	lr, [r3, #11]
 801410e:	f893 800c 	ldrb.w	r8, [r3, #12]
 8014112:	f893 900d 	ldrb.w	r9, [r3, #13]
 8014116:	f893 a00e 	ldrb.w	sl, [r3, #14]
 801411a:	f893 b00f 	ldrb.w	fp, [r3, #15]
 801411e:	7c1b      	ldrb	r3, [r3, #16]
 8014120:	930f      	str	r3, [sp, #60]	; 0x3c
 8014122:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8014126:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801412a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801412e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8014132:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8014136:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 801413a:	9708      	str	r7, [sp, #32]
 801413c:	9607      	str	r6, [sp, #28]
 801413e:	9506      	str	r5, [sp, #24]
 8014140:	9405      	str	r4, [sp, #20]
 8014142:	9004      	str	r0, [sp, #16]
 8014144:	9103      	str	r1, [sp, #12]
 8014146:	9202      	str	r2, [sp, #8]
 8014148:	9911      	ldr	r1, [sp, #68]	; 0x44
 801414a:	9101      	str	r1, [sp, #4]
 801414c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801414e:	9200      	str	r2, [sp, #0]
 8014150:	4b1e      	ldr	r3, [pc, #120]	; (80141cc <PrintKey+0x12c>)
 8014152:	2200      	movs	r2, #0
 8014154:	4611      	mov	r1, r2
 8014156:	2002      	movs	r0, #2
 8014158:	f002 fbb8 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
}
 801415c:	b015      	add	sp, #84	; 0x54
 801415e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 8014162:	4b1b      	ldr	r3, [pc, #108]	; (80141d0 <PrintKey+0x130>)
 8014164:	2200      	movs	r2, #0
 8014166:	4611      	mov	r1, r2
 8014168:	2002      	movs	r0, #2
 801416a:	f002 fbaf 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
 801416e:	e7be      	b.n	80140ee <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 8014170:	4b18      	ldr	r3, [pc, #96]	; (80141d4 <PrintKey+0x134>)
 8014172:	2200      	movs	r2, #0
 8014174:	4611      	mov	r1, r2
 8014176:	2002      	movs	r0, #2
 8014178:	f002 fba8 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
 801417c:	e7b7      	b.n	80140ee <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 801417e:	4b16      	ldr	r3, [pc, #88]	; (80141d8 <PrintKey+0x138>)
 8014180:	2200      	movs	r2, #0
 8014182:	4611      	mov	r1, r2
 8014184:	2002      	movs	r0, #2
 8014186:	f002 fba1 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
 801418a:	e7b0      	b.n	80140ee <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 801418c:	4b13      	ldr	r3, [pc, #76]	; (80141dc <PrintKey+0x13c>)
 801418e:	2200      	movs	r2, #0
 8014190:	4611      	mov	r1, r2
 8014192:	2002      	movs	r0, #2
 8014194:	f002 fb9a 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
 8014198:	e7a9      	b.n	80140ee <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 801419a:	4b11      	ldr	r3, [pc, #68]	; (80141e0 <PrintKey+0x140>)
 801419c:	2200      	movs	r2, #0
 801419e:	4611      	mov	r1, r2
 80141a0:	2002      	movs	r0, #2
 80141a2:	f002 fb93 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
 80141a6:	e7a2      	b.n	80140ee <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 80141a8:	4b0e      	ldr	r3, [pc, #56]	; (80141e4 <PrintKey+0x144>)
 80141aa:	2200      	movs	r2, #0
 80141ac:	4611      	mov	r1, r2
 80141ae:	2002      	movs	r0, #2
 80141b0:	f002 fb8c 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
 80141b4:	e79b      	b.n	80140ee <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 80141b6:	4b0c      	ldr	r3, [pc, #48]	; (80141e8 <PrintKey+0x148>)
 80141b8:	2200      	movs	r2, #0
 80141ba:	4611      	mov	r1, r2
 80141bc:	2002      	movs	r0, #2
 80141be:	f002 fb85 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
 80141c2:	e794      	b.n	80140ee <PrintKey+0x4e>
 80141c4:	080182c8 	.word	0x080182c8
 80141c8:	08018208 	.word	0x08018208
 80141cc:	080182e0 	.word	0x080182e0
 80141d0:	08018220 	.word	0x08018220
 80141d4:	08018238 	.word	0x08018238
 80141d8:	08018250 	.word	0x08018250
 80141dc:	08018268 	.word	0x08018268
 80141e0:	08018280 	.word	0x08018280
 80141e4:	08018298 	.word	0x08018298
 80141e8:	080182b0 	.word	0x080182b0

080141ec <SecureElementInit>:
{
 80141ec:	b570      	push	{r4, r5, r6, lr}
 80141ee:	b0b0      	sub	sp, #192	; 0xc0
 80141f0:	4606      	mov	r6, r0
    SecureElementNvmData_t seNvmInit =
 80141f2:	22b0      	movs	r2, #176	; 0xb0
 80141f4:	2100      	movs	r1, #0
 80141f6:	a804      	add	r0, sp, #16
 80141f8:	f003 f93a 	bl	8017470 <memset>
 80141fc:	4a37      	ldr	r2, [pc, #220]	; (80142dc <SecureElementInit+0xf0>)
 80141fe:	466b      	mov	r3, sp
 8014200:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014204:	e883 0003 	stmia.w	r3, {r0, r1}
 8014208:	4a35      	ldr	r2, [pc, #212]	; (80142e0 <SecureElementInit+0xf4>)
 801420a:	ab02      	add	r3, sp, #8
 801420c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014210:	e883 0003 	stmia.w	r3, {r0, r1}
 8014214:	4c33      	ldr	r4, [pc, #204]	; (80142e4 <SecureElementInit+0xf8>)
 8014216:	4625      	mov	r5, r4
 8014218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801421a:	f8cd 0011 	str.w	r0, [sp, #17]
 801421e:	f8cd 1015 	str.w	r1, [sp, #21]
 8014222:	f8cd 2019 	str.w	r2, [sp, #25]
 8014226:	f8cd 301d 	str.w	r3, [sp, #29]
 801422a:	2301      	movs	r3, #1
 801422c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8014230:	4625      	mov	r5, r4
 8014232:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014234:	f8cd 0022 	str.w	r0, [sp, #34]	; 0x22
 8014238:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 801423c:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 8014240:	f8cd 302e 	str.w	r3, [sp, #46]	; 0x2e
 8014244:	2302      	movs	r3, #2
 8014246:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 801424a:	4625      	mov	r5, r4
 801424c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801424e:	f8cd 0033 	str.w	r0, [sp, #51]	; 0x33
 8014252:	f8cd 1037 	str.w	r1, [sp, #55]	; 0x37
 8014256:	f8cd 203b 	str.w	r2, [sp, #59]	; 0x3b
 801425a:	f8cd 303f 	str.w	r3, [sp, #63]	; 0x3f
 801425e:	2303      	movs	r3, #3
 8014260:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
 8014264:	ad11      	add	r5, sp, #68	; 0x44
 8014266:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801426a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801426e:	2304      	movs	r3, #4
 8014270:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8014274:	237f      	movs	r3, #127	; 0x7f
 8014276:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
 801427a:	2380      	movs	r3, #128	; 0x80
 801427c:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
 8014280:	2381      	movs	r3, #129	; 0x81
 8014282:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 8014286:	2382      	movs	r3, #130	; 0x82
 8014288:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
 801428c:	2383      	movs	r3, #131	; 0x83
 801428e:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
    if( nvm == NULL )
 8014292:	b30e      	cbz	r6, 80142d8 <SecureElementInit+0xec>
    SeNvm = nvm;
 8014294:	4b14      	ldr	r3, [pc, #80]	; (80142e8 <SecureElementInit+0xfc>)
 8014296:	601e      	str	r6, [r3, #0]
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 8014298:	22c0      	movs	r2, #192	; 0xc0
 801429a:	4669      	mov	r1, sp
 801429c:	4630      	mov	r0, r6
 801429e:	f000 f98c 	bl	80145ba <memcpy1>
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 80142a2:	4b12      	ldr	r3, [pc, #72]	; (80142ec <SecureElementInit+0x100>)
 80142a4:	2200      	movs	r2, #0
 80142a6:	4611      	mov	r1, r2
 80142a8:	2002      	movs	r0, #2
 80142aa:	f002 fb0f 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 80142ae:	2000      	movs	r0, #0
 80142b0:	f7ff fef6 	bl	80140a0 <PrintKey>
    PrintKey(NWK_KEY);
 80142b4:	2001      	movs	r0, #1
 80142b6:	f7ff fef3 	bl	80140a0 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 80142ba:	4b0d      	ldr	r3, [pc, #52]	; (80142f0 <SecureElementInit+0x104>)
 80142bc:	2200      	movs	r2, #0
 80142be:	4611      	mov	r1, r2
 80142c0:	2002      	movs	r0, #2
 80142c2:	f002 fb03 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 80142c6:	2003      	movs	r0, #3
 80142c8:	f7ff feea 	bl	80140a0 <PrintKey>
    PrintKey(NWK_S_KEY);
 80142cc:	2002      	movs	r0, #2
 80142ce:	f7ff fee7 	bl	80140a0 <PrintKey>
    return SECURE_ELEMENT_SUCCESS;
 80142d2:	2000      	movs	r0, #0
}
 80142d4:	b030      	add	sp, #192	; 0xc0
 80142d6:	bd70      	pop	{r4, r5, r6, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80142d8:	2002      	movs	r0, #2
 80142da:	e7fb      	b.n	80142d4 <SecureElementInit+0xe8>
 80142dc:	08018364 	.word	0x08018364
 80142e0:	08018370 	.word	0x08018370
 80142e4:	0801837c 	.word	0x0801837c
 80142e8:	20001470 	.word	0x20001470
 80142ec:	08018334 	.word	0x08018334
 80142f0:	0801834c 	.word	0x0801834c

080142f4 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 80142f4:	2b7e      	cmp	r3, #126	; 0x7e
 80142f6:	d807      	bhi.n	8014308 <SecureElementComputeAesCmac+0x14>
{
 80142f8:	b510      	push	{r4, lr}
 80142fa:	b082      	sub	sp, #8
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 80142fc:	9c04      	ldr	r4, [sp, #16]
 80142fe:	9400      	str	r4, [sp, #0]
 8014300:	f7ff fe70 	bl	8013fe4 <ComputeCmac>
}
 8014304:	b002      	add	sp, #8
 8014306:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8014308:	2003      	movs	r0, #3
}
 801430a:	4770      	bx	lr

0801430c <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 801430c:	b190      	cbz	r0, 8014334 <SecureElementVerifyAesCmac+0x28>
{
 801430e:	b530      	push	{r4, r5, lr}
 8014310:	b085      	sub	sp, #20
 8014312:	460c      	mov	r4, r1
 8014314:	4615      	mov	r5, r2
 8014316:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 8014318:	2000      	movs	r0, #0
 801431a:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 801431c:	aa03      	add	r2, sp, #12
 801431e:	9200      	str	r2, [sp, #0]
 8014320:	4622      	mov	r2, r4
 8014322:	f7ff fe5f 	bl	8013fe4 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8014326:	b918      	cbnz	r0, 8014330 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 8014328:	9b03      	ldr	r3, [sp, #12]
 801432a:	42ab      	cmp	r3, r5
 801432c:	d000      	beq.n	8014330 <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 801432e:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 8014330:	b005      	add	sp, #20
 8014332:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8014334:	2002      	movs	r0, #2
}
 8014336:	4770      	bx	lr

08014338 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 8014338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801433c:	b0be      	sub	sp, #248	; 0xf8
    if( buffer == NULL || encBuffer == NULL )
 801433e:	b350      	cbz	r0, 8014396 <SecureElementAesEncrypt+0x5e>
 8014340:	460c      	mov	r4, r1
 8014342:	4615      	mov	r5, r2
 8014344:	461e      	mov	r6, r3
 8014346:	4607      	mov	r7, r0
 8014348:	b343      	cbz	r3, 801439c <SecureElementAesEncrypt+0x64>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 801434a:	f011 0f0f 	tst.w	r1, #15
 801434e:	d128      	bne.n	80143a2 <SecureElementAesEncrypt+0x6a>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 8014350:	22f0      	movs	r2, #240	; 0xf0
 8014352:	2100      	movs	r1, #0
 8014354:	a801      	add	r0, sp, #4
 8014356:	f000 f946 	bl	80145e6 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 801435a:	4669      	mov	r1, sp
 801435c:	4628      	mov	r0, r5
 801435e:	f7ff fe23 	bl	8013fa8 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8014362:	4680      	mov	r8, r0
 8014364:	b118      	cbz	r0, 801436e <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 8014366:	4640      	mov	r0, r8
 8014368:	b03e      	add	sp, #248	; 0xf8
 801436a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 801436e:	aa01      	add	r2, sp, #4
 8014370:	2110      	movs	r1, #16
 8014372:	9800      	ldr	r0, [sp, #0]
 8014374:	3001      	adds	r0, #1
 8014376:	f7ff fd63 	bl	8013e40 <lorawan_aes_set_key>
        uint8_t block = 0;
 801437a:	4645      	mov	r5, r8
        while( size != 0 )
 801437c:	e008      	b.n	8014390 <SecureElementAesEncrypt+0x58>
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 801437e:	aa01      	add	r2, sp, #4
 8014380:	1971      	adds	r1, r6, r5
 8014382:	1978      	adds	r0, r7, r5
 8014384:	f7ff fde6 	bl	8013f54 <lorawan_aes_encrypt>
            block = block + 16;
 8014388:	3510      	adds	r5, #16
 801438a:	b2ed      	uxtb	r5, r5
            size  = size - 16;
 801438c:	3c10      	subs	r4, #16
 801438e:	b2a4      	uxth	r4, r4
        while( size != 0 )
 8014390:	2c00      	cmp	r4, #0
 8014392:	d1f4      	bne.n	801437e <SecureElementAesEncrypt+0x46>
 8014394:	e7e7      	b.n	8014366 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 8014396:	f04f 0802 	mov.w	r8, #2
 801439a:	e7e4      	b.n	8014366 <SecureElementAesEncrypt+0x2e>
 801439c:	f04f 0802 	mov.w	r8, #2
 80143a0:	e7e1      	b.n	8014366 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80143a2:	f04f 0805 	mov.w	r8, #5
 80143a6:	e7de      	b.n	8014366 <SecureElementAesEncrypt+0x2e>

080143a8 <SecureElementSetKey>:
{
 80143a8:	b530      	push	{r4, r5, lr}
 80143aa:	b085      	sub	sp, #20
    if( key == NULL )
 80143ac:	2900      	cmp	r1, #0
 80143ae:	d038      	beq.n	8014422 <SecureElementSetKey+0x7a>
 80143b0:	460d      	mov	r5, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80143b2:	2300      	movs	r3, #0
 80143b4:	2b09      	cmp	r3, #9
 80143b6:	d830      	bhi.n	801441a <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 80143b8:	4a1b      	ldr	r2, [pc, #108]	; (8014428 <SecureElementSetKey+0x80>)
 80143ba:	6811      	ldr	r1, [r2, #0]
 80143bc:	461c      	mov	r4, r3
 80143be:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80143c2:	440a      	add	r2, r1
 80143c4:	7c12      	ldrb	r2, [r2, #16]
 80143c6:	4282      	cmp	r2, r0
 80143c8:	d002      	beq.n	80143d0 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80143ca:	3301      	adds	r3, #1
 80143cc:	b2db      	uxtb	r3, r3
 80143ce:	e7f1      	b.n	80143b4 <SecureElementSetKey+0xc>
            if ( keyID == MC_KEY_0 )
 80143d0:	2880      	cmp	r0, #128	; 0x80
 80143d2:	d00a      	beq.n	80143ea <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 80143d4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80143d8:	3310      	adds	r3, #16
 80143da:	440b      	add	r3, r1
 80143dc:	2210      	movs	r2, #16
 80143de:	4629      	mov	r1, r5
 80143e0:	1c58      	adds	r0, r3, #1
 80143e2:	f000 f8ea 	bl	80145ba <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 80143e6:	2500      	movs	r5, #0
 80143e8:	e018      	b.n	801441c <SecureElementSetKey+0x74>
                uint8_t               decryptedKey[16] = { 0 };
 80143ea:	2300      	movs	r3, #0
 80143ec:	9300      	str	r3, [sp, #0]
 80143ee:	9301      	str	r3, [sp, #4]
 80143f0:	9302      	str	r3, [sp, #8]
 80143f2:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 80143f4:	466b      	mov	r3, sp
 80143f6:	227f      	movs	r2, #127	; 0x7f
 80143f8:	2110      	movs	r1, #16
 80143fa:	4628      	mov	r0, r5
 80143fc:	f7ff ff9c 	bl	8014338 <SecureElementAesEncrypt>
 8014400:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8014402:	4b09      	ldr	r3, [pc, #36]	; (8014428 <SecureElementSetKey+0x80>)
 8014404:	6818      	ldr	r0, [r3, #0]
 8014406:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801440a:	3410      	adds	r4, #16
 801440c:	4420      	add	r0, r4
 801440e:	2210      	movs	r2, #16
 8014410:	4669      	mov	r1, sp
 8014412:	3001      	adds	r0, #1
 8014414:	f000 f8d1 	bl	80145ba <memcpy1>
                return retval;
 8014418:	e000      	b.n	801441c <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801441a:	2503      	movs	r5, #3
}
 801441c:	4628      	mov	r0, r5
 801441e:	b005      	add	sp, #20
 8014420:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8014422:	2502      	movs	r5, #2
 8014424:	e7fa      	b.n	801441c <SecureElementSetKey+0x74>
 8014426:	bf00      	nop
 8014428:	20001470 	.word	0x20001470

0801442c <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 801442c:	b1d0      	cbz	r0, 8014464 <SecureElementDeriveAndStoreKey+0x38>
{
 801442e:	b530      	push	{r4, r5, lr}
 8014430:	b085      	sub	sp, #20
 8014432:	4614      	mov	r4, r2
 8014434:	4605      	mov	r5, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 8014436:	2a7f      	cmp	r2, #127	; 0x7f
 8014438:	d101      	bne.n	801443e <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 801443a:	2904      	cmp	r1, #4
 801443c:	d114      	bne.n	8014468 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 801443e:	2300      	movs	r3, #0
 8014440:	9300      	str	r3, [sp, #0]
 8014442:	9301      	str	r3, [sp, #4]
 8014444:	9302      	str	r3, [sp, #8]
 8014446:	9303      	str	r3, [sp, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8014448:	466b      	mov	r3, sp
 801444a:	460a      	mov	r2, r1
 801444c:	2110      	movs	r1, #16
 801444e:	4628      	mov	r0, r5
 8014450:	f7ff ff72 	bl	8014338 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8014454:	b108      	cbz	r0, 801445a <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8014456:	b005      	add	sp, #20
 8014458:	bd30      	pop	{r4, r5, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 801445a:	4669      	mov	r1, sp
 801445c:	4620      	mov	r0, r4
 801445e:	f7ff ffa3 	bl	80143a8 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8014462:	e7f8      	b.n	8014456 <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 8014464:	2002      	movs	r0, #2
}
 8014466:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8014468:	2003      	movs	r0, #3
 801446a:	e7f4      	b.n	8014456 <SecureElementDeriveAndStoreKey+0x2a>

0801446c <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 801446c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014470:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8014474:	9d07      	ldr	r5, [sp, #28]
 8014476:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8014478:	b37b      	cbz	r3, 80144da <SecureElementProcessJoinAccept+0x6e>
 801447a:	4698      	mov	r8, r3
 801447c:	b37d      	cbz	r5, 80144de <SecureElementProcessJoinAccept+0x72>
 801447e:	b386      	cbz	r6, 80144e2 <SecureElementProcessJoinAccept+0x76>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8014480:	2c21      	cmp	r4, #33	; 0x21
 8014482:	d830      	bhi.n	80144e6 <SecureElementProcessJoinAccept+0x7a>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8014484:	b2a7      	uxth	r7, r4
 8014486:	463a      	mov	r2, r7
 8014488:	4619      	mov	r1, r3
 801448a:	4628      	mov	r0, r5
 801448c:	f000 f895 	bl	80145ba <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8014490:	1e79      	subs	r1, r7, #1
 8014492:	1c6b      	adds	r3, r5, #1
 8014494:	2201      	movs	r2, #1
 8014496:	b289      	uxth	r1, r1
 8014498:	eb08 0002 	add.w	r0, r8, r2
 801449c:	f7ff ff4c 	bl	8014338 <SecureElementAesEncrypt>
 80144a0:	bb20      	cbnz	r0, 80144ec <SecureElementProcessJoinAccept+0x80>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 80144a2:	7aeb      	ldrb	r3, [r5, #11]
 80144a4:	09db      	lsrs	r3, r3, #7
 80144a6:	7033      	strb	r3, [r6, #0]

    uint32_t mic = 0;

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 80144a8:	442c      	add	r4, r5
 80144aa:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 80144ae:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80144b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 80144b6:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80144ba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 80144be:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80144c2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 80144c6:	b99b      	cbnz	r3, 80144f0 <SecureElementProcessJoinAccept+0x84>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 80144c8:	1f39      	subs	r1, r7, #4
 80144ca:	2301      	movs	r3, #1
 80144cc:	b289      	uxth	r1, r1
 80144ce:	4628      	mov	r0, r5
 80144d0:	f7ff ff1c 	bl	801430c <SecureElementVerifyAesCmac>
 80144d4:	b140      	cbz	r0, 80144e8 <SecureElementProcessJoinAccept+0x7c>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 80144d6:	2001      	movs	r0, #1
 80144d8:	e006      	b.n	80144e8 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_NPE;
 80144da:	2002      	movs	r0, #2
 80144dc:	e004      	b.n	80144e8 <SecureElementProcessJoinAccept+0x7c>
 80144de:	2002      	movs	r0, #2
 80144e0:	e002      	b.n	80144e8 <SecureElementProcessJoinAccept+0x7c>
 80144e2:	2002      	movs	r0, #2
 80144e4:	e000      	b.n	80144e8 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80144e6:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 80144e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 80144ec:	2007      	movs	r0, #7
 80144ee:	e7fb      	b.n	80144e8 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 80144f0:	2004      	movs	r0, #4
 80144f2:	e7f9      	b.n	80144e8 <SecureElementProcessJoinAccept+0x7c>

080144f4 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
    if( randomNum == NULL )
 80144f4:	b138      	cbz	r0, 8014506 <SecureElementRandomNumber+0x12>
{
 80144f6:	b510      	push	{r4, lr}
 80144f8:	4604      	mov	r4, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random();
 80144fa:	4b04      	ldr	r3, [pc, #16]	; (801450c <SecureElementRandomNumber+0x18>)
 80144fc:	695b      	ldr	r3, [r3, #20]
 80144fe:	4798      	blx	r3
 8014500:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 8014502:	2000      	movs	r0, #0
}
 8014504:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8014506:	2002      	movs	r0, #2
}
 8014508:	4770      	bx	lr
 801450a:	bf00      	nop
 801450c:	08018400 	.word	0x08018400

08014510 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
 8014510:	b140      	cbz	r0, 8014524 <SecureElementSetDevEui+0x14>
{
 8014512:	b508      	push	{r3, lr}
 8014514:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 8014516:	2208      	movs	r2, #8
 8014518:	4b03      	ldr	r3, [pc, #12]	; (8014528 <SecureElementSetDevEui+0x18>)
 801451a:	6818      	ldr	r0, [r3, #0]
 801451c:	f000 f84d 	bl	80145ba <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8014520:	2000      	movs	r0, #0
}
 8014522:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8014524:	2002      	movs	r0, #2
}
 8014526:	4770      	bx	lr
 8014528:	20001470 	.word	0x20001470

0801452c <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 801452c:	4b01      	ldr	r3, [pc, #4]	; (8014534 <SecureElementGetDevEui+0x8>)
 801452e:	6818      	ldr	r0, [r3, #0]
 8014530:	4770      	bx	lr
 8014532:	bf00      	nop
 8014534:	20001470 	.word	0x20001470

08014538 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
 8014538:	b148      	cbz	r0, 801454e <SecureElementSetJoinEui+0x16>
{
 801453a:	b508      	push	{r3, lr}
 801453c:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 801453e:	4b05      	ldr	r3, [pc, #20]	; (8014554 <SecureElementSetJoinEui+0x1c>)
 8014540:	6818      	ldr	r0, [r3, #0]
 8014542:	2208      	movs	r2, #8
 8014544:	4410      	add	r0, r2
 8014546:	f000 f838 	bl	80145ba <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 801454a:	2000      	movs	r0, #0
}
 801454c:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 801454e:	2002      	movs	r0, #2
}
 8014550:	4770      	bx	lr
 8014552:	bf00      	nop
 8014554:	20001470 	.word	0x20001470

08014558 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 8014558:	4b01      	ldr	r3, [pc, #4]	; (8014560 <SecureElementGetJoinEui+0x8>)
 801455a:	6818      	ldr	r0, [r3, #0]
}
 801455c:	3008      	adds	r0, #8
 801455e:	4770      	bx	lr
 8014560:	20001470 	.word	0x20001470

08014564 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8014564:	4b09      	ldr	r3, [pc, #36]	; (801458c <rand1+0x28>)
 8014566:	6818      	ldr	r0, [r3, #0]
 8014568:	4909      	ldr	r1, [pc, #36]	; (8014590 <rand1+0x2c>)
 801456a:	f243 0239 	movw	r2, #12345	; 0x3039
 801456e:	fb01 2000 	mla	r0, r1, r0, r2
 8014572:	6018      	str	r0, [r3, #0]
 8014574:	2303      	movs	r3, #3
 8014576:	fba3 2300 	umull	r2, r3, r3, r0
 801457a:	1ac2      	subs	r2, r0, r3
 801457c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8014580:	0f9b      	lsrs	r3, r3, #30
 8014582:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 8014586:	1ac0      	subs	r0, r0, r3
 8014588:	4770      	bx	lr
 801458a:	bf00      	nop
 801458c:	200000cc 	.word	0x200000cc
 8014590:	41c64e6d 	.word	0x41c64e6d

08014594 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 8014594:	4b01      	ldr	r3, [pc, #4]	; (801459c <srand1+0x8>)
 8014596:	6018      	str	r0, [r3, #0]
}
 8014598:	4770      	bx	lr
 801459a:	bf00      	nop
 801459c:	200000cc 	.word	0x200000cc

080145a0 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80145a0:	b538      	push	{r3, r4, r5, lr}
 80145a2:	4605      	mov	r5, r0
 80145a4:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80145a6:	f7ff ffdd 	bl	8014564 <rand1>
 80145aa:	1b61      	subs	r1, r4, r5
 80145ac:	3101      	adds	r1, #1
 80145ae:	fb90 f3f1 	sdiv	r3, r0, r1
 80145b2:	fb01 0013 	mls	r0, r1, r3, r0
}
 80145b6:	4428      	add	r0, r5
 80145b8:	bd38      	pop	{r3, r4, r5, pc}

080145ba <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 80145ba:	1e53      	subs	r3, r2, #1
 80145bc:	b29b      	uxth	r3, r3
 80145be:	b12a      	cbz	r2, 80145cc <memcpy1+0x12>
    {
        *dst++ = *src++;
 80145c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80145c4:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 80145c8:	461a      	mov	r2, r3
 80145ca:	e7f6      	b.n	80145ba <memcpy1>
    }
}
 80145cc:	4770      	bx	lr

080145ce <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 80145ce:	1e53      	subs	r3, r2, #1
 80145d0:	4418      	add	r0, r3
    while( size-- )
 80145d2:	1e53      	subs	r3, r2, #1
 80145d4:	b29b      	uxth	r3, r3
 80145d6:	b12a      	cbz	r2, 80145e4 <memcpyr+0x16>
    {
        *dst-- = *src++;
 80145d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80145dc:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 80145e0:	461a      	mov	r2, r3
 80145e2:	e7f6      	b.n	80145d2 <memcpyr+0x4>
    }
}
 80145e4:	4770      	bx	lr

080145e6 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 80145e6:	1e53      	subs	r3, r2, #1
 80145e8:	b29b      	uxth	r3, r3
 80145ea:	b11a      	cbz	r2, 80145f4 <memset1+0xe>
    {
        *dst++ = value;
 80145ec:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 80145f0:	461a      	mov	r2, r3
 80145f2:	e7f8      	b.n	80145e6 <memset1>
    }
}
 80145f4:	4770      	bx	lr
	...

080145f8 <Crc32>:
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 80145f8:	b1d0      	cbz	r0, 8014630 <Crc32+0x38>
{
 80145fa:	b470      	push	{r4, r5, r6}
 80145fc:	4606      	mov	r6, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 80145fe:	2500      	movs	r5, #0
    uint32_t crc = 0xFFFFFFFF;
 8014600:	f04f 30ff 	mov.w	r0, #4294967295
 8014604:	e00b      	b.n	801461e <Crc32+0x26>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8014606:	f340 0400 	sbfx	r4, r0, #0, #1
 801460a:	4a0a      	ldr	r2, [pc, #40]	; (8014634 <Crc32+0x3c>)
 801460c:	4022      	ands	r2, r4
 801460e:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 8014612:	3301      	adds	r3, #1
 8014614:	b29b      	uxth	r3, r3
 8014616:	2b07      	cmp	r3, #7
 8014618:	d9f5      	bls.n	8014606 <Crc32+0xe>
    for( uint16_t i = 0; i < length; ++i )
 801461a:	3501      	adds	r5, #1
 801461c:	b2ad      	uxth	r5, r5
 801461e:	428d      	cmp	r5, r1
 8014620:	d203      	bcs.n	801462a <Crc32+0x32>
        crc ^= ( uint32_t )buffer[i];
 8014622:	5d73      	ldrb	r3, [r6, r5]
 8014624:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 8014626:	2300      	movs	r3, #0
 8014628:	e7f5      	b.n	8014616 <Crc32+0x1e>
        }
    }

    return ~crc;
 801462a:	43c0      	mvns	r0, r0
}
 801462c:	bc70      	pop	{r4, r5, r6}
 801462e:	4770      	bx	lr
        return 0;
 8014630:	2000      	movs	r0, #0
}
 8014632:	4770      	bx	lr
 8014634:	edb88320 	.word	0xedb88320

08014638 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8014638:	2001      	movs	r0, #1
 801463a:	4770      	bx	lr

0801463c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 801463c:	280a      	cmp	r0, #10
 801463e:	d807      	bhi.n	8014650 <RadioGetLoRaBandwidthInHz+0x14>
 8014640:	e8df f000 	tbb	[pc, r0]
 8014644:	17110b20 	.word	0x17110b20
 8014648:	061e1c1a 	.word	0x061e1c1a
 801464c:	0e08      	.short	0x0e08
 801464e:	14          	.byte	0x14
 801464f:	00          	.byte	0x00
        break;
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
        break;
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8014650:	2000      	movs	r0, #0
 8014652:	4770      	bx	lr
        bandwidthInHz = 10417UL;
 8014654:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 8014658:	4770      	bx	lr
        bandwidthInHz = 15625UL;
 801465a:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 801465e:	4770      	bx	lr
        bandwidthInHz = 20833UL;
 8014660:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 8014664:	4770      	bx	lr
        bandwidthInHz = 31250UL;
 8014666:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 801466a:	4770      	bx	lr
        bandwidthInHz = 41667UL;
 801466c:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 8014670:	4770      	bx	lr
        bandwidthInHz = 62500UL;
 8014672:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 8014676:	4770      	bx	lr
        bandwidthInHz = 125000UL;
 8014678:	4804      	ldr	r0, [pc, #16]	; (801468c <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 801467a:	4770      	bx	lr
        bandwidthInHz = 250000UL;
 801467c:	4804      	ldr	r0, [pc, #16]	; (8014690 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 801467e:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8014680:	4804      	ldr	r0, [pc, #16]	; (8014694 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 8014682:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 8014684:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 8014688:	4770      	bx	lr
 801468a:	bf00      	nop
 801468c:	0001e848 	.word	0x0001e848
 8014690:	0003d090 	.word	0x0003d090
 8014694:	0007a120 	.word	0x0007a120

08014698 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8014698:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 801469c:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801469e:	b953      	cbnz	r3, 80146b6 <RadioGetGfskTimeOnAirNumerator+0x1e>
 80146a0:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 80146a2:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80146a4:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80146a6:	b141      	cbz	r1, 80146ba <RadioGetGfskTimeOnAirNumerator+0x22>
 80146a8:	2302      	movs	r3, #2
 80146aa:	f89d 0000 	ldrb.w	r0, [sp]
 80146ae:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 80146b0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80146b4:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80146b6:	2000      	movs	r0, #0
 80146b8:	e7f3      	b.n	80146a2 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80146ba:	2300      	movs	r3, #0
 80146bc:	e7f5      	b.n	80146aa <RadioGetGfskTimeOnAirNumerator+0x12>

080146be <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80146be:	b4f0      	push	{r4, r5, r6, r7}
 80146c0:	f89d 6010 	ldrb.w	r6, [sp, #16]
 80146c4:	f89d 4018 	ldrb.w	r4, [sp, #24]
    int32_t crDenom           = coderate + 4;
 80146c8:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80146ca:	1f4d      	subs	r5, r1, #5
 80146cc:	2d01      	cmp	r5, #1
 80146ce:	d92d      	bls.n	801472c <RadioGetLoRaTimeOnAirNumerator+0x6e>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80146d0:	b918      	cbnz	r0, 80146da <RadioGetLoRaTimeOnAirNumerator+0x1c>
 80146d2:	f1a1 050b 	sub.w	r5, r1, #11
 80146d6:	2d01      	cmp	r5, #1
 80146d8:	d930      	bls.n	801473c <RadioGetLoRaTimeOnAirNumerator+0x7e>
 80146da:	2801      	cmp	r0, #1
 80146dc:	d02a      	beq.n	8014734 <RadioGetLoRaTimeOnAirNumerator+0x76>
    bool    lowDatareOptimize = false;
 80146de:	2700      	movs	r7, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80146e0:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80146e4:	00ed      	lsls	r5, r5, #3
                            ( crcOn ? 16 : 0 ) -
 80146e6:	b36c      	cbz	r4, 8014744 <RadioGetLoRaTimeOnAirNumerator+0x86>
 80146e8:	2410      	movs	r4, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80146ea:	4425      	add	r5, r4
                            ( 4 * datarate ) +
 80146ec:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 80146ee:	eba5 0581 	sub.w	r5, r5, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 80146f2:	b34e      	cbz	r6, 8014748 <RadioGetLoRaTimeOnAirNumerator+0x8a>
 80146f4:	2400      	movs	r4, #0
                            ( 4 * datarate ) +
 80146f6:	442c      	add	r4, r5

    if( datarate <= 6 )
 80146f8:	2906      	cmp	r1, #6
 80146fa:	d903      	bls.n	8014704 <RadioGetLoRaTimeOnAirNumerator+0x46>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 80146fc:	3408      	adds	r4, #8

        if( lowDatareOptimize == true )
 80146fe:	b10f      	cbz	r7, 8014704 <RadioGetLoRaTimeOnAirNumerator+0x46>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8014700:	1e88      	subs	r0, r1, #2
 8014702:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 8014704:	2c00      	cmp	r4, #0
 8014706:	db21      	blt.n	801474c <RadioGetLoRaTimeOnAirNumerator+0x8e>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8014708:	4404      	add	r4, r0
 801470a:	3c01      	subs	r4, #1
 801470c:	fb94 f4f0 	sdiv	r4, r4, r0
 8014710:	fb02 3304 	mla	r3, r2, r4, r3
    int32_t intermediate =
 8014714:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 8014718:	2906      	cmp	r1, #6
 801471a:	d801      	bhi.n	8014720 <RadioGetLoRaTimeOnAirNumerator+0x62>
    {
        intermediate += 2;
 801471c:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8014720:	0080      	lsls	r0, r0, #2
 8014722:	3001      	adds	r0, #1
 8014724:	3902      	subs	r1, #2
}
 8014726:	4088      	lsls	r0, r1
 8014728:	bcf0      	pop	{r4, r5, r6, r7}
 801472a:	4770      	bx	lr
        if( preambleLen < 12 )
 801472c:	2b0b      	cmp	r3, #11
 801472e:	d8cf      	bhi.n	80146d0 <RadioGetLoRaTimeOnAirNumerator+0x12>
            preambleLen = 12;
 8014730:	230c      	movs	r3, #12
 8014732:	e7cd      	b.n	80146d0 <RadioGetLoRaTimeOnAirNumerator+0x12>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8014734:	290c      	cmp	r1, #12
 8014736:	d003      	beq.n	8014740 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 8014738:	2700      	movs	r7, #0
 801473a:	e7d1      	b.n	80146e0 <RadioGetLoRaTimeOnAirNumerator+0x22>
        lowDatareOptimize = true;
 801473c:	2701      	movs	r7, #1
 801473e:	e7cf      	b.n	80146e0 <RadioGetLoRaTimeOnAirNumerator+0x22>
 8014740:	2701      	movs	r7, #1
 8014742:	e7cd      	b.n	80146e0 <RadioGetLoRaTimeOnAirNumerator+0x22>
                            ( crcOn ? 16 : 0 ) -
 8014744:	2400      	movs	r4, #0
 8014746:	e7d0      	b.n	80146ea <RadioGetLoRaTimeOnAirNumerator+0x2c>
                            ( fixLen ? 0 : 20 );
 8014748:	2414      	movs	r4, #20
 801474a:	e7d4      	b.n	80146f6 <RadioGetLoRaTimeOnAirNumerator+0x38>
        ceilNumerator = 0;
 801474c:	2400      	movs	r4, #0
 801474e:	e7db      	b.n	8014708 <RadioGetLoRaTimeOnAirNumerator+0x4a>

08014750 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8014750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014752:	b085      	sub	sp, #20
 8014754:	460e      	mov	r6, r1
 8014756:	4615      	mov	r5, r2
 8014758:	4619      	mov	r1, r3
 801475a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801475e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8014762:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8014766:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 801476a:	b148      	cbz	r0, 8014780 <RadioTimeOnAir+0x30>
 801476c:	2801      	cmp	r0, #1
 801476e:	d012      	beq.n	8014796 <RadioTimeOnAir+0x46>
 8014770:	2501      	movs	r5, #1
 8014772:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8014774:	1960      	adds	r0, r4, r5
 8014776:	3801      	subs	r0, #1
}
 8014778:	fbb0 f0f5 	udiv	r0, r0, r5
 801477c:	b005      	add	sp, #20
 801477e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8014780:	f8cd c004 	str.w	ip, [sp, #4]
 8014784:	9700      	str	r7, [sp, #0]
 8014786:	4628      	mov	r0, r5
 8014788:	f7ff ff86 	bl	8014698 <RadioGetGfskTimeOnAirNumerator>
 801478c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8014790:	fb04 f400 	mul.w	r4, r4, r0
        break;
 8014794:	e7ee      	b.n	8014774 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8014796:	f8cd c008 	str.w	ip, [sp, #8]
 801479a:	9701      	str	r7, [sp, #4]
 801479c:	9300      	str	r3, [sp, #0]
 801479e:	4613      	mov	r3, r2
 80147a0:	460a      	mov	r2, r1
 80147a2:	4629      	mov	r1, r5
 80147a4:	4630      	mov	r0, r6
 80147a6:	f7ff ff8a 	bl	80146be <RadioGetLoRaTimeOnAirNumerator>
 80147aa:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80147ae:	fb04 f400 	mul.w	r4, r4, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80147b2:	4b03      	ldr	r3, [pc, #12]	; (80147c0 <RadioTimeOnAir+0x70>)
 80147b4:	5d98      	ldrb	r0, [r3, r6]
 80147b6:	f7ff ff41 	bl	801463c <RadioGetLoRaBandwidthInHz>
 80147ba:	4605      	mov	r5, r0
        break;
 80147bc:	e7da      	b.n	8014774 <RadioTimeOnAir+0x24>
 80147be:	bf00      	nop
 80147c0:	080183fc 	.word	0x080183fc

080147c4 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 80147c4:	b508      	push	{r3, lr}
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80147c6:	4b03      	ldr	r3, [pc, #12]	; (80147d4 <RadioOnTxTimeoutProcess+0x10>)
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	b113      	cbz	r3, 80147d2 <RadioOnTxTimeoutProcess+0xe>
 80147cc:	685b      	ldr	r3, [r3, #4]
 80147ce:	b103      	cbz	r3, 80147d2 <RadioOnTxTimeoutProcess+0xe>
    {
        RadioEvents->TxTimeout( );
 80147d0:	4798      	blx	r3
    }
}
 80147d2:	bd08      	pop	{r3, pc}
 80147d4:	20001574 	.word	0x20001574

080147d8 <RadioOnTxTimeoutIrq>:
{
 80147d8:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 80147da:	f7ff fff3 	bl	80147c4 <RadioOnTxTimeoutProcess>
}
 80147de:	bd08      	pop	{r3, pc}

080147e0 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80147e0:	b508      	push	{r3, lr}
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80147e2:	4b03      	ldr	r3, [pc, #12]	; (80147f0 <RadioOnRxTimeoutProcess+0x10>)
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	b113      	cbz	r3, 80147ee <RadioOnRxTimeoutProcess+0xe>
 80147e8:	68db      	ldr	r3, [r3, #12]
 80147ea:	b103      	cbz	r3, 80147ee <RadioOnRxTimeoutProcess+0xe>
    {
        RadioEvents->RxTimeout( );
 80147ec:	4798      	blx	r3
    }
}
 80147ee:	bd08      	pop	{r3, pc}
 80147f0:	20001574 	.word	0x20001574

080147f4 <RadioOnRxTimeoutIrq>:
{
 80147f4:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 80147f6:	f7ff fff3 	bl	80147e0 <RadioOnRxTimeoutProcess>
}
 80147fa:	bd08      	pop	{r3, pc}

080147fc <payload_integration>:
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
    SUBGRF_SetTxContinuousWave( );
}

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80147fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;

    for (i = 0; i < size; i++)
 80147fe:	2300      	movs	r3, #0
 8014800:	4616      	mov	r6, r2
 8014802:	429a      	cmp	r2, r3
 8014804:	dd06      	ble.n	8014814 <payload_integration+0x18>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8014806:	5ccc      	ldrb	r4, [r1, r3]
 8014808:	43e4      	mvns	r4, r4
 801480a:	54cc      	strb	r4, [r1, r3]
        /* init outBuffer */
        outBuffer[i] = 0;
 801480c:	2400      	movs	r4, #0
 801480e:	54c4      	strb	r4, [r0, r3]
    for (i = 0; i < size; i++)
 8014810:	3301      	adds	r3, #1
 8014812:	e7f5      	b.n	8014800 <payload_integration+0x4>
    }

    for (i = 0; i < (size * 8); i++)
 8014814:	2300      	movs	r3, #0
    uint8_t prevInt = 0;
 8014816:	461f      	mov	r7, r3
 8014818:	e013      	b.n	8014842 <payload_integration+0x46>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
        index_byte = i / 8;
 801481a:	f103 0c07 	add.w	ip, r3, #7
 801481e:	e021      	b.n	8014864 <payload_integration+0x68>
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
        index_byte_out = ( i + 1 ) / 8;
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8014820:	fa5f fc8c 	uxtb.w	ip, ip
 8014824:	f811 c00c 	ldrb.w	ip, [r1, ip]
 8014828:	fa4c f505 	asr.w	r5, ip, r5
 801482c:	f005 0501 	and.w	r5, r5, #1
        /* integration */
        prevInt ^= currBit;
 8014830:	406f      	eors	r7, r5
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8014832:	f3ce 05c7 	ubfx	r5, lr, #3, #8
 8014836:	fa07 fc04 	lsl.w	ip, r7, r4
 801483a:	5d44      	ldrb	r4, [r0, r5]
 801483c:	ea44 040c 	orr.w	r4, r4, ip
 8014840:	5544      	strb	r4, [r0, r5]
    for (i = 0; i < (size * 8); i++)
 8014842:	ebb3 0fc6 	cmp.w	r3, r6, lsl #3
 8014846:	da23      	bge.n	8014890 <payload_integration+0x94>
        index_bit = 7 - ( i % 8 );
 8014848:	425d      	negs	r5, r3
 801484a:	f003 0407 	and.w	r4, r3, #7
 801484e:	f005 0507 	and.w	r5, r5, #7
 8014852:	bf58      	it	pl
 8014854:	426c      	negpl	r4, r5
 8014856:	b2e5      	uxtb	r5, r4
 8014858:	f1c5 0507 	rsb	r5, r5, #7
 801485c:	b2ed      	uxtb	r5, r5
        index_byte = i / 8;
 801485e:	469c      	mov	ip, r3
 8014860:	2b00      	cmp	r3, #0
 8014862:	dbda      	blt.n	801481a <payload_integration+0x1e>
 8014864:	ea4f 0cec 	mov.w	ip, ip, asr #3
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8014868:	3301      	adds	r3, #1
 801486a:	f1d3 0e00 	rsbs	lr, r3, #0
 801486e:	f003 0407 	and.w	r4, r3, #7
 8014872:	f00e 0e07 	and.w	lr, lr, #7
 8014876:	bf58      	it	pl
 8014878:	f1ce 0400 	rsbpl	r4, lr, #0
 801487c:	b2e4      	uxtb	r4, r4
 801487e:	f1c4 0407 	rsb	r4, r4, #7
 8014882:	b2e4      	uxtb	r4, r4
        index_byte_out = ( i + 1 ) / 8;
 8014884:	469e      	mov	lr, r3
 8014886:	2b00      	cmp	r3, #0
 8014888:	daca      	bge.n	8014820 <payload_integration+0x24>
 801488a:	f103 0e07 	add.w	lr, r3, #7
 801488e:	e7c7      	b.n	8014820 <payload_integration+0x24>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8014890:	01bb      	lsls	r3, r7, #6
 8014892:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
 8014896:	b25b      	sxtb	r3, r3
 8014898:	b91f      	cbnz	r7, 80148a2 <payload_integration+0xa6>
 801489a:	2120      	movs	r1, #32
 801489c:	430b      	orrs	r3, r1
 801489e:	5483      	strb	r3, [r0, r2]
}
 80148a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 80148a2:	2100      	movs	r1, #0
 80148a4:	e7fa      	b.n	801489c <payload_integration+0xa0>
	...

080148a8 <RadioSetMaxPayloadLength>:
{
 80148a8:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 80148aa:	2801      	cmp	r0, #1
 80148ac:	d004      	beq.n	80148b8 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80148ae:	4b0a      	ldr	r3, [pc, #40]	; (80148d8 <RadioSetMaxPayloadLength+0x30>)
 80148b0:	7d5b      	ldrb	r3, [r3, #21]
 80148b2:	2b01      	cmp	r3, #1
 80148b4:	d008      	beq.n	80148c8 <RadioSetMaxPayloadLength+0x20>
}
 80148b6:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80148b8:	4b08      	ldr	r3, [pc, #32]	; (80148dc <RadioSetMaxPayloadLength+0x34>)
 80148ba:	7019      	strb	r1, [r3, #0]
 80148bc:	4806      	ldr	r0, [pc, #24]	; (80148d8 <RadioSetMaxPayloadLength+0x30>)
 80148be:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80148c0:	300e      	adds	r0, #14
 80148c2:	f001 fd37 	bl	8016334 <SUBGRF_SetPacketParams>
 80148c6:	e7f6      	b.n	80148b6 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80148c8:	4b04      	ldr	r3, [pc, #16]	; (80148dc <RadioSetMaxPayloadLength+0x34>)
 80148ca:	7019      	strb	r1, [r3, #0]
 80148cc:	4802      	ldr	r0, [pc, #8]	; (80148d8 <RadioSetMaxPayloadLength+0x30>)
 80148ce:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80148d0:	300e      	adds	r0, #14
 80148d2:	f001 fd2f 	bl	8016334 <SUBGRF_SetPacketParams>
}
 80148d6:	e7ee      	b.n	80148b6 <RadioSetMaxPayloadLength+0xe>
 80148d8:	20002500 	.word	0x20002500
 80148dc:	200000d0 	.word	0x200000d0

080148e0 <RadioRead>:
{
 80148e0:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister(addr);
 80148e2:	f001 fbdf 	bl	80160a4 <SUBGRF_ReadRegister>
}
 80148e6:	bd08      	pop	{r3, pc}

080148e8 <RadioWrite>:
{
 80148e8:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister(addr, data );
 80148ea:	f001 faeb 	bl	8015ec4 <SUBGRF_WriteRegister>
}
 80148ee:	bd08      	pop	{r3, pc}

080148f0 <RadioTxCw>:
{
 80148f0:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80148f2:	f001 fe35 	bl	8016560 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80148f6:	2101      	movs	r1, #1
 80148f8:	f001 fe1e 	bl	8016538 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80148fc:	f001 f970 	bl	8015be0 <SUBGRF_SetTxContinuousWave>
}
 8014900:	bd08      	pop	{r3, pc}
	...

08014904 <RadioTxPrbs>:
{
 8014904:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8014906:	2101      	movs	r1, #1
 8014908:	4b07      	ldr	r3, [pc, #28]	; (8014928 <RadioTxPrbs+0x24>)
 801490a:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 801490e:	f001 fe13 	bl	8016538 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 8014912:	212d      	movs	r1, #45	; 0x2d
 8014914:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8014918:	f7ff ffe6 	bl	80148e8 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 801491c:	f001 f967 	bl	8015bee <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8014920:	4802      	ldr	r0, [pc, #8]	; (801492c <RadioTxPrbs+0x28>)
 8014922:	f001 f8f9 	bl	8015b18 <SUBGRF_SetTx>
}
 8014926:	bd08      	pop	{r3, pc}
 8014928:	20002500 	.word	0x20002500
 801492c:	000fffff 	.word	0x000fffff

08014930 <RadioSetRxDutyCycle>:
{
 8014930:	b538      	push	{r3, r4, r5, lr}
 8014932:	4604      	mov	r4, r0
 8014934:	460d      	mov	r5, r1
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8014936:	2100      	movs	r1, #0
 8014938:	4b04      	ldr	r3, [pc, #16]	; (801494c <RadioSetRxDutyCycle+0x1c>)
 801493a:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 801493e:	f001 fdfb 	bl	8016538 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8014942:	4629      	mov	r1, r5
 8014944:	4620      	mov	r0, r4
 8014946:	f001 f91b 	bl	8015b80 <SUBGRF_SetRxDutyCycle>
}
 801494a:	bd38      	pop	{r3, r4, r5, pc}
 801494c:	20002500 	.word	0x20002500

08014950 <RadioRxBoosted>:
{
 8014950:	b538      	push	{r3, r4, r5, lr}
 8014952:	4604      	mov	r4, r0
    if (1UL==RFW_Is_Init())
 8014954:	f001 feda 	bl	801670c <RFW_Is_Init>
 8014958:	2801      	cmp	r0, #1
 801495a:	d014      	beq.n	8014986 <RadioRxBoosted+0x36>
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801495c:	2300      	movs	r3, #0
 801495e:	461a      	mov	r2, r3
 8014960:	f240 2162 	movw	r1, #610	; 0x262
 8014964:	4608      	mov	r0, r1
 8014966:	f001 f9ec 	bl	8015d42 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 801496a:	b97c      	cbnz	r4, 801498c <RadioRxBoosted+0x3c>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 801496c:	4c0f      	ldr	r4, [pc, #60]	; (80149ac <RadioRxBoosted+0x5c>)
 801496e:	2100      	movs	r1, #0
 8014970:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8014974:	f001 fde0 	bl	8016538 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8014978:	7863      	ldrb	r3, [r4, #1]
 801497a:	b183      	cbz	r3, 801499e <RadioRxBoosted+0x4e>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801497c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8014980:	f001 fab0 	bl	8015ee4 <SUBGRF_SetRxBoosted>
}
 8014984:	bd38      	pop	{r3, r4, r5, pc}
      RFW_ReceiveInit();
 8014986:	f001 fec9 	bl	801671c <RFW_ReceiveInit>
 801498a:	e7ee      	b.n	801496a <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 801498c:	4d08      	ldr	r5, [pc, #32]	; (80149b0 <RadioRxBoosted+0x60>)
 801498e:	4621      	mov	r1, r4
 8014990:	4628      	mov	r0, r5
 8014992:	f002 fb7d 	bl	8017090 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8014996:	4628      	mov	r0, r5
 8014998:	f002 fb34 	bl	8017004 <UTIL_TIMER_Start>
 801499c:	e7e6      	b.n	801496c <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801499e:	4b03      	ldr	r3, [pc, #12]	; (80149ac <RadioRxBoosted+0x5c>)
 80149a0:	6898      	ldr	r0, [r3, #8]
 80149a2:	0180      	lsls	r0, r0, #6
 80149a4:	f001 fa9e 	bl	8015ee4 <SUBGRF_SetRxBoosted>
}
 80149a8:	e7ec      	b.n	8014984 <RadioRxBoosted+0x34>
 80149aa:	bf00      	nop
 80149ac:	20002500 	.word	0x20002500
 80149b0:	20002570 	.word	0x20002570

080149b4 <RadioStandby>:
{
 80149b4:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 80149b6:	2000      	movs	r0, #0
 80149b8:	f001 f894 	bl	8015ae4 <SUBGRF_SetStandby>
}
 80149bc:	bd08      	pop	{r3, pc}

080149be <RadioGetStatus>:
{
 80149be:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 80149c0:	f001 f88a 	bl	8015ad8 <SUBGRF_GetOperatingMode>
 80149c4:	2805      	cmp	r0, #5
 80149c6:	d007      	beq.n	80149d8 <RadioGetStatus+0x1a>
 80149c8:	2807      	cmp	r0, #7
 80149ca:	d007      	beq.n	80149dc <RadioGetStatus+0x1e>
 80149cc:	2804      	cmp	r0, #4
 80149ce:	d001      	beq.n	80149d4 <RadioGetStatus+0x16>
            return RF_IDLE;
 80149d0:	2000      	movs	r0, #0
}
 80149d2:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 80149d4:	2002      	movs	r0, #2
 80149d6:	e7fc      	b.n	80149d2 <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 80149d8:	2001      	movs	r0, #1
 80149da:	e7fa      	b.n	80149d2 <RadioGetStatus+0x14>
            return RF_CAD;
 80149dc:	2003      	movs	r0, #3
 80149de:	e7f8      	b.n	80149d2 <RadioGetStatus+0x14>

080149e0 <RadioIrqProcess>:
{
 80149e0:	b530      	push	{r4, r5, lr}
 80149e2:	b083      	sub	sp, #12
    uint8_t size = 0;
 80149e4:	2300      	movs	r3, #0
 80149e6:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 80149ea:	9300      	str	r3, [sp, #0]
    switch ( SubgRf.RadioIrq )
 80149ec:	4b9c      	ldr	r3, [pc, #624]	; (8014c60 <RadioIrqProcess+0x280>)
 80149ee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80149f2:	2b20      	cmp	r3, #32
 80149f4:	d829      	bhi.n	8014a4a <RadioIrqProcess+0x6a>
 80149f6:	b21a      	sxth	r2, r3
 80149f8:	2a00      	cmp	r2, #0
 80149fa:	f000 80eb 	beq.w	8014bd4 <RadioIrqProcess+0x1f4>
 80149fe:	3b01      	subs	r3, #1
 8014a00:	2b1f      	cmp	r3, #31
 8014a02:	f200 80e7 	bhi.w	8014bd4 <RadioIrqProcess+0x1f4>
 8014a06:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014a0a:	005f      	.short	0x005f
 8014a0c:	00e50075 	.word	0x00e50075
 8014a10:	00e500df 	.word	0x00e500df
 8014a14:	00e500e5 	.word	0x00e500e5
 8014a18:	00e500e7 	.word	0x00e500e7
 8014a1c:	00e500e5 	.word	0x00e500e5
 8014a20:	00e500e5 	.word	0x00e500e5
 8014a24:	00e500e5 	.word	0x00e500e5
 8014a28:	00e500f4 	.word	0x00e500f4
 8014a2c:	00e500e5 	.word	0x00e500e5
 8014a30:	00e500e5 	.word	0x00e500e5
 8014a34:	00e500e5 	.word	0x00e500e5
 8014a38:	00e500e5 	.word	0x00e500e5
 8014a3c:	00e500e5 	.word	0x00e500e5
 8014a40:	00e500e5 	.word	0x00e500e5
 8014a44:	00e500e5 	.word	0x00e500e5
 8014a48:	00fb      	.short	0x00fb
 8014a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014a4e:	f000 80a3 	beq.w	8014b98 <RadioIrqProcess+0x1b8>
 8014a52:	d924      	bls.n	8014a9e <RadioIrqProcess+0xbe>
 8014a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014a58:	f040 80bc 	bne.w	8014bd4 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8014a5c:	4b81      	ldr	r3, [pc, #516]	; (8014c64 <RadioIrqProcess+0x284>)
 8014a5e:	2201      	movs	r2, #1
 8014a60:	2100      	movs	r1, #0
 8014a62:	2002      	movs	r0, #2
 8014a64:	f001 ff32 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8014a68:	f001 f836 	bl	8015ad8 <SUBGRF_GetOperatingMode>
 8014a6c:	2804      	cmp	r0, #4
 8014a6e:	f000 809e 	beq.w	8014bae <RadioIrqProcess+0x1ce>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8014a72:	f001 f831 	bl	8015ad8 <SUBGRF_GetOperatingMode>
 8014a76:	2805      	cmp	r0, #5
 8014a78:	f040 80ac 	bne.w	8014bd4 <RadioIrqProcess+0x1f4>
            TimerStop( &RxTimeoutTimer );
 8014a7c:	487a      	ldr	r0, [pc, #488]	; (8014c68 <RadioIrqProcess+0x288>)
 8014a7e:	f002 fa5f 	bl	8016f40 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8014a82:	2000      	movs	r0, #0
 8014a84:	f001 f82e 	bl	8015ae4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8014a88:	4b78      	ldr	r3, [pc, #480]	; (8014c6c <RadioIrqProcess+0x28c>)
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	f000 80a1 	beq.w	8014bd4 <RadioIrqProcess+0x1f4>
 8014a92:	68db      	ldr	r3, [r3, #12]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	f000 809d 	beq.w	8014bd4 <RadioIrqProcess+0x1f4>
                RadioEvents->RxTimeout( );
 8014a9a:	4798      	blx	r3
 8014a9c:	e09a      	b.n	8014bd4 <RadioIrqProcess+0x1f4>
    switch ( SubgRf.RadioIrq )
 8014a9e:	2b40      	cmp	r3, #64	; 0x40
 8014aa0:	f000 80c7 	beq.w	8014c32 <RadioIrqProcess+0x252>
 8014aa4:	2b80      	cmp	r3, #128	; 0x80
 8014aa6:	f040 8095 	bne.w	8014bd4 <RadioIrqProcess+0x1f4>
        SUBGRF_SetStandby( STDBY_RC );
 8014aaa:	2000      	movs	r0, #0
 8014aac:	f001 f81a 	bl	8015ae4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8014ab0:	4b6e      	ldr	r3, [pc, #440]	; (8014c6c <RadioIrqProcess+0x28c>)
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	f000 808d 	beq.w	8014bd4 <RadioIrqProcess+0x1f4>
 8014aba:	699b      	ldr	r3, [r3, #24]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	f000 8089 	beq.w	8014bd4 <RadioIrqProcess+0x1f4>
            RadioEvents->CadDone( false );
 8014ac2:	2000      	movs	r0, #0
 8014ac4:	4798      	blx	r3
 8014ac6:	e085      	b.n	8014bd4 <RadioIrqProcess+0x1f4>
        TimerStop( &TxTimeoutTimer );
 8014ac8:	4869      	ldr	r0, [pc, #420]	; (8014c70 <RadioIrqProcess+0x290>)
 8014aca:	f002 fa39 	bl	8016f40 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8014ace:	2000      	movs	r0, #0
 8014ad0:	f001 f808 	bl	8015ae4 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 8014ad4:	f001 fe1c 	bl	8016710 <RFW_Is_LongPacketModeEnabled>
 8014ad8:	2801      	cmp	r0, #1
 8014ada:	d008      	beq.n	8014aee <RadioIrqProcess+0x10e>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8014adc:	4b63      	ldr	r3, [pc, #396]	; (8014c6c <RadioIrqProcess+0x28c>)
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d077      	beq.n	8014bd4 <RadioIrqProcess+0x1f4>
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d074      	beq.n	8014bd4 <RadioIrqProcess+0x1f4>
            RadioEvents->TxDone( );
 8014aea:	4798      	blx	r3
 8014aec:	e072      	b.n	8014bd4 <RadioIrqProcess+0x1f4>
            RFW_DeInit_TxLongPacket( );
 8014aee:	f001 fe18 	bl	8016722 <RFW_DeInit_TxLongPacket>
 8014af2:	e7f3      	b.n	8014adc <RadioIrqProcess+0xfc>
        TimerStop( &RxTimeoutTimer );
 8014af4:	485c      	ldr	r0, [pc, #368]	; (8014c68 <RadioIrqProcess+0x288>)
 8014af6:	f002 fa23 	bl	8016f40 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8014afa:	4b59      	ldr	r3, [pc, #356]	; (8014c60 <RadioIrqProcess+0x280>)
 8014afc:	785b      	ldrb	r3, [r3, #1]
 8014afe:	b1f3      	cbz	r3, 8014b3e <RadioIrqProcess+0x15e>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 8014b00:	22ff      	movs	r2, #255	; 0xff
 8014b02:	f10d 0107 	add.w	r1, sp, #7
 8014b06:	485b      	ldr	r0, [pc, #364]	; (8014c74 <RadioIrqProcess+0x294>)
 8014b08:	f001 fcfc 	bl	8016504 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8014b0c:	485a      	ldr	r0, [pc, #360]	; (8014c78 <RadioIrqProcess+0x298>)
 8014b0e:	f001 f99d 	bl	8015e4c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8014b12:	4b56      	ldr	r3, [pc, #344]	; (8014c6c <RadioIrqProcess+0x28c>)
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d05c      	beq.n	8014bd4 <RadioIrqProcess+0x1f4>
 8014b1a:	689c      	ldr	r4, [r3, #8]
 8014b1c:	2c00      	cmp	r4, #0
 8014b1e:	d059      	beq.n	8014bd4 <RadioIrqProcess+0x1f4>
            switch ( SubgRf.PacketStatus.packetType )
 8014b20:	4b4f      	ldr	r3, [pc, #316]	; (8014c60 <RadioIrqProcess+0x280>)
 8014b22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014b26:	2b01      	cmp	r3, #1
 8014b28:	d11d      	bne.n	8014b66 <RadioIrqProcess+0x186>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8014b2a:	4a4d      	ldr	r2, [pc, #308]	; (8014c60 <RadioIrqProcess+0x280>)
 8014b2c:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 8014b30:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 8014b34:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014b38:	484e      	ldr	r0, [pc, #312]	; (8014c74 <RadioIrqProcess+0x294>)
 8014b3a:	47a0      	blx	r4
                break;
 8014b3c:	e04a      	b.n	8014bd4 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 8014b3e:	2000      	movs	r0, #0
 8014b40:	f000 ffd0 	bl	8015ae4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8014b44:	2100      	movs	r1, #0
 8014b46:	f640 1002 	movw	r0, #2306	; 0x902
 8014b4a:	f001 f9bb 	bl	8015ec4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 8014b4e:	f640 1044 	movw	r0, #2372	; 0x944
 8014b52:	f001 faa7 	bl	80160a4 <SUBGRF_ReadRegister>
 8014b56:	f040 0102 	orr.w	r1, r0, #2
 8014b5a:	b2c9      	uxtb	r1, r1
 8014b5c:	f640 1044 	movw	r0, #2372	; 0x944
 8014b60:	f001 f9b0 	bl	8015ec4 <SUBGRF_WriteRegister>
 8014b64:	e7cc      	b.n	8014b00 <RadioIrqProcess+0x120>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8014b66:	4c3e      	ldr	r4, [pc, #248]	; (8014c60 <RadioIrqProcess+0x280>)
 8014b68:	4669      	mov	r1, sp
 8014b6a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8014b6c:	f001 fd80 	bl	8016670 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8014b70:	4b3e      	ldr	r3, [pc, #248]	; (8014c6c <RadioIrqProcess+0x28c>)
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	689d      	ldr	r5, [r3, #8]
 8014b76:	9b00      	ldr	r3, [sp, #0]
 8014b78:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8014b7c:	4a3f      	ldr	r2, [pc, #252]	; (8014c7c <RadioIrqProcess+0x29c>)
 8014b7e:	fb82 1203 	smull	r1, r2, r2, r3
 8014b82:	17db      	asrs	r3, r3, #31
 8014b84:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8014b88:	b25b      	sxtb	r3, r3
 8014b8a:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 8014b8e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014b92:	4838      	ldr	r0, [pc, #224]	; (8014c74 <RadioIrqProcess+0x294>)
 8014b94:	47a8      	blx	r5
                break;
 8014b96:	e01d      	b.n	8014bd4 <RadioIrqProcess+0x1f4>
        SUBGRF_SetStandby( STDBY_RC );
 8014b98:	2000      	movs	r0, #0
 8014b9a:	f000 ffa3 	bl	8015ae4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8014b9e:	4b33      	ldr	r3, [pc, #204]	; (8014c6c <RadioIrqProcess+0x28c>)
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	b1bb      	cbz	r3, 8014bd4 <RadioIrqProcess+0x1f4>
 8014ba4:	699b      	ldr	r3, [r3, #24]
 8014ba6:	b1ab      	cbz	r3, 8014bd4 <RadioIrqProcess+0x1f4>
            RadioEvents->CadDone( true );
 8014ba8:	2001      	movs	r0, #1
 8014baa:	4798      	blx	r3
 8014bac:	e012      	b.n	8014bd4 <RadioIrqProcess+0x1f4>
            TimerStop( &TxTimeoutTimer );
 8014bae:	4830      	ldr	r0, [pc, #192]	; (8014c70 <RadioIrqProcess+0x290>)
 8014bb0:	f002 f9c6 	bl	8016f40 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8014bb4:	2000      	movs	r0, #0
 8014bb6:	f000 ff95 	bl	8015ae4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8014bba:	4b2c      	ldr	r3, [pc, #176]	; (8014c6c <RadioIrqProcess+0x28c>)
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	b14b      	cbz	r3, 8014bd4 <RadioIrqProcess+0x1f4>
 8014bc0:	685b      	ldr	r3, [r3, #4]
 8014bc2:	b13b      	cbz	r3, 8014bd4 <RadioIrqProcess+0x1f4>
                RadioEvents->TxTimeout( );
 8014bc4:	4798      	blx	r3
 8014bc6:	e005      	b.n	8014bd4 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8014bc8:	4b2d      	ldr	r3, [pc, #180]	; (8014c80 <RadioIrqProcess+0x2a0>)
 8014bca:	2201      	movs	r2, #1
 8014bcc:	2100      	movs	r1, #0
 8014bce:	2002      	movs	r0, #2
 8014bd0:	f001 fe7c 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
}
 8014bd4:	b003      	add	sp, #12
 8014bd6:	bd30      	pop	{r4, r5, pc}
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8014bd8:	4b2a      	ldr	r3, [pc, #168]	; (8014c84 <RadioIrqProcess+0x2a4>)
 8014bda:	2201      	movs	r2, #1
 8014bdc:	2100      	movs	r1, #0
 8014bde:	2002      	movs	r0, #2
 8014be0:	f001 fe74 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 8014be4:	f001 fd92 	bl	801670c <RFW_Is_Init>
 8014be8:	2801      	cmp	r0, #1
 8014bea:	d1f3      	bne.n	8014bd4 <RadioIrqProcess+0x1f4>
            RFW_ReceivePayload( );
 8014bec:	f001 fd9a 	bl	8016724 <RFW_ReceivePayload>
 8014bf0:	e7f0      	b.n	8014bd4 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8014bf2:	4b25      	ldr	r3, [pc, #148]	; (8014c88 <RadioIrqProcess+0x2a8>)
 8014bf4:	2201      	movs	r2, #1
 8014bf6:	2100      	movs	r1, #0
 8014bf8:	2002      	movs	r0, #2
 8014bfa:	f001 fe67 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
        break;
 8014bfe:	e7e9      	b.n	8014bd4 <RadioIrqProcess+0x1f4>
        TimerStop( &RxTimeoutTimer );
 8014c00:	4819      	ldr	r0, [pc, #100]	; (8014c68 <RadioIrqProcess+0x288>)
 8014c02:	f002 f99d 	bl	8016f40 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8014c06:	4b16      	ldr	r3, [pc, #88]	; (8014c60 <RadioIrqProcess+0x280>)
 8014c08:	785b      	ldrb	r3, [r3, #1]
 8014c0a:	b173      	cbz	r3, 8014c2a <RadioIrqProcess+0x24a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8014c0c:	4b17      	ldr	r3, [pc, #92]	; (8014c6c <RadioIrqProcess+0x28c>)
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d0df      	beq.n	8014bd4 <RadioIrqProcess+0x1f4>
 8014c14:	68db      	ldr	r3, [r3, #12]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d0dc      	beq.n	8014bd4 <RadioIrqProcess+0x1f4>
            RadioEvents->RxTimeout( );
 8014c1a:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8014c1c:	4b1b      	ldr	r3, [pc, #108]	; (8014c8c <RadioIrqProcess+0x2ac>)
 8014c1e:	2201      	movs	r2, #1
 8014c20:	2100      	movs	r1, #0
 8014c22:	2002      	movs	r0, #2
 8014c24:	f001 fe52 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
 8014c28:	e7d4      	b.n	8014bd4 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 8014c2a:	2000      	movs	r0, #0
 8014c2c:	f000 ff5a 	bl	8015ae4 <SUBGRF_SetStandby>
 8014c30:	e7ec      	b.n	8014c0c <RadioIrqProcess+0x22c>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8014c32:	4b17      	ldr	r3, [pc, #92]	; (8014c90 <RadioIrqProcess+0x2b0>)
 8014c34:	2201      	movs	r2, #1
 8014c36:	2100      	movs	r1, #0
 8014c38:	2002      	movs	r0, #2
 8014c3a:	f001 fe47 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8014c3e:	4b08      	ldr	r3, [pc, #32]	; (8014c60 <RadioIrqProcess+0x280>)
 8014c40:	785b      	ldrb	r3, [r3, #1]
 8014c42:	b143      	cbz	r3, 8014c56 <RadioIrqProcess+0x276>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8014c44:	4b09      	ldr	r3, [pc, #36]	; (8014c6c <RadioIrqProcess+0x28c>)
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d0c3      	beq.n	8014bd4 <RadioIrqProcess+0x1f4>
 8014c4c:	691b      	ldr	r3, [r3, #16]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d0c0      	beq.n	8014bd4 <RadioIrqProcess+0x1f4>
            RadioEvents->RxError( );
 8014c52:	4798      	blx	r3
}
 8014c54:	e7be      	b.n	8014bd4 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 8014c56:	2000      	movs	r0, #0
 8014c58:	f000 ff44 	bl	8015ae4 <SUBGRF_SetStandby>
 8014c5c:	e7f2      	b.n	8014c44 <RadioIrqProcess+0x264>
 8014c5e:	bf00      	nop
 8014c60:	20002500 	.word	0x20002500
 8014c64:	08018390 	.word	0x08018390
 8014c68:	20002570 	.word	0x20002570
 8014c6c:	20001574 	.word	0x20001574
 8014c70:	20002558 	.word	0x20002558
 8014c74:	20001474 	.word	0x20001474
 8014c78:	20002524 	.word	0x20002524
 8014c7c:	10624dd3 	.word	0x10624dd3
 8014c80:	080183a4 	.word	0x080183a4
 8014c84:	080183b0 	.word	0x080183b0
 8014c88:	080183bc 	.word	0x080183bc
 8014c8c:	080183c8 	.word	0x080183c8
 8014c90:	080183d4 	.word	0x080183d4

08014c94 <RadioOnDioIrq>:
{
 8014c94:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 8014c96:	4b03      	ldr	r3, [pc, #12]	; (8014ca4 <RadioOnDioIrq+0x10>)
 8014c98:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 8014c9c:	f7ff fea0 	bl	80149e0 <RadioIrqProcess>
}
 8014ca0:	bd08      	pop	{r3, pc}
 8014ca2:	bf00      	nop
 8014ca4:	20002500 	.word	0x20002500

08014ca8 <RadioGetWakeupTime>:
{
 8014ca8:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8014caa:	f001 fc70 	bl	801658e <SUBGRF_GetRadioWakeUpTime>
}
 8014cae:	3003      	adds	r0, #3
 8014cb0:	bd08      	pop	{r3, pc}

08014cb2 <RadioReadRegisters>:
{
 8014cb2:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 8014cb4:	f001 fbb0 	bl	8016418 <SUBGRF_ReadRegisters>
}
 8014cb8:	bd08      	pop	{r3, pc}

08014cba <RadioWriteRegisters>:
{
 8014cba:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 8014cbc:	f001 faf8 	bl	80162b0 <SUBGRF_WriteRegisters>
}
 8014cc0:	bd08      	pop	{r3, pc}

08014cc2 <RadioRssi>:
{
 8014cc2:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 8014cc4:	f001 f8b4 	bl	8015e30 <SUBGRF_GetRssiInst>
}
 8014cc8:	b200      	sxth	r0, r0
 8014cca:	bd08      	pop	{r3, pc}

08014ccc <RadioSetTxContinuousWave>:
{
 8014ccc:	b538      	push	{r3, r4, r5, lr}
 8014cce:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8014cd0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8014cd4:	fb04 f402 	mul.w	r4, r4, r2
    SUBGRF_SetRfFrequency( freq );
 8014cd8:	f001 f86a 	bl	8015db0 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8014cdc:	4628      	mov	r0, r5
 8014cde:	f001 fc3f 	bl	8016560 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8014ce2:	2101      	movs	r1, #1
 8014ce4:	f001 fc28 	bl	8016538 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8014ce8:	f000 ff7a 	bl	8015be0 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8014cec:	4d04      	ldr	r5, [pc, #16]	; (8014d00 <RadioSetTxContinuousWave+0x34>)
 8014cee:	4621      	mov	r1, r4
 8014cf0:	4628      	mov	r0, r5
 8014cf2:	f002 f9cd 	bl	8017090 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8014cf6:	4628      	mov	r0, r5
 8014cf8:	f002 f984 	bl	8017004 <UTIL_TIMER_Start>
}
 8014cfc:	bd38      	pop	{r3, r4, r5, pc}
 8014cfe:	bf00      	nop
 8014d00:	20002558 	.word	0x20002558

08014d04 <RadioSetChannel>:
{
 8014d04:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 8014d06:	f001 f853 	bl	8015db0 <SUBGRF_SetRfFrequency>
}
 8014d0a:	bd08      	pop	{r3, pc}

08014d0c <RadioStartCad>:
{
 8014d0c:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8014d0e:	2100      	movs	r1, #0
 8014d10:	4b07      	ldr	r3, [pc, #28]	; (8014d30 <RadioStartCad+0x24>)
 8014d12:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8014d16:	f001 fc0f 	bl	8016538 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	461a      	mov	r2, r3
 8014d1e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8014d22:	4608      	mov	r0, r1
 8014d24:	f001 f80d 	bl	8015d42 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8014d28:	f000 ff4e 	bl	8015bc8 <SUBGRF_SetCad>
}
 8014d2c:	bd08      	pop	{r3, pc}
 8014d2e:	bf00      	nop
 8014d30:	20002500 	.word	0x20002500

08014d34 <RadioRx>:
{
 8014d34:	b538      	push	{r3, r4, r5, lr}
 8014d36:	4604      	mov	r4, r0
    if ( 1UL == RFW_Is_Init( ) )
 8014d38:	f001 fce8 	bl	801670c <RFW_Is_Init>
 8014d3c:	2801      	cmp	r0, #1
 8014d3e:	d014      	beq.n	8014d6a <RadioRx+0x36>
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8014d40:	2300      	movs	r3, #0
 8014d42:	461a      	mov	r2, r3
 8014d44:	f240 2162 	movw	r1, #610	; 0x262
 8014d48:	4608      	mov	r0, r1
 8014d4a:	f000 fffa 	bl	8015d42 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8014d4e:	b97c      	cbnz	r4, 8014d70 <RadioRx+0x3c>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8014d50:	4c0f      	ldr	r4, [pc, #60]	; (8014d90 <RadioRx+0x5c>)
 8014d52:	2100      	movs	r1, #0
 8014d54:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8014d58:	f001 fbee 	bl	8016538 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8014d5c:	7863      	ldrb	r3, [r4, #1]
 8014d5e:	b183      	cbz	r3, 8014d82 <RadioRx+0x4e>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8014d60:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8014d64:	f000 fef2 	bl	8015b4c <SUBGRF_SetRx>
}
 8014d68:	bd38      	pop	{r3, r4, r5, pc}
      RFW_ReceiveInit( );
 8014d6a:	f001 fcd7 	bl	801671c <RFW_ReceiveInit>
 8014d6e:	e7ee      	b.n	8014d4e <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8014d70:	4d08      	ldr	r5, [pc, #32]	; (8014d94 <RadioRx+0x60>)
 8014d72:	4621      	mov	r1, r4
 8014d74:	4628      	mov	r0, r5
 8014d76:	f002 f98b 	bl	8017090 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8014d7a:	4628      	mov	r0, r5
 8014d7c:	f002 f942 	bl	8017004 <UTIL_TIMER_Start>
 8014d80:	e7e6      	b.n	8014d50 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8014d82:	4b03      	ldr	r3, [pc, #12]	; (8014d90 <RadioRx+0x5c>)
 8014d84:	6898      	ldr	r0, [r3, #8]
 8014d86:	0180      	lsls	r0, r0, #6
 8014d88:	f000 fee0 	bl	8015b4c <SUBGRF_SetRx>
}
 8014d8c:	e7ec      	b.n	8014d68 <RadioRx+0x34>
 8014d8e:	bf00      	nop
 8014d90:	20002500 	.word	0x20002500
 8014d94:	20002570 	.word	0x20002570

08014d98 <RadioSleep>:
{
 8014d98:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 8014d9a:	f04f 0004 	mov.w	r0, #4
 8014d9e:	f001 f9db 	bl	8016158 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8014da2:	2002      	movs	r0, #2
 8014da4:	f7ed fba6 	bl	80024f4 <HAL_Delay>
}
 8014da8:	bd08      	pop	{r3, pc}
	...

08014dac <RadioSend>:
{
 8014dac:	b570      	push	{r4, r5, r6, lr}
 8014dae:	b082      	sub	sp, #8
 8014db0:	4605      	mov	r5, r0
 8014db2:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8014db4:	2300      	movs	r3, #0
 8014db6:	461a      	mov	r2, r3
 8014db8:	f240 2101 	movw	r1, #513	; 0x201
 8014dbc:	4608      	mov	r0, r1
 8014dbe:	f000 ffc0 	bl	8015d42 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8014dc2:	4e5a      	ldr	r6, [pc, #360]	; (8014f2c <RadioSend+0x180>)
 8014dc4:	2101      	movs	r1, #1
 8014dc6:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8014dca:	f001 fbb5 	bl	8016538 <SUBGRF_SetSwitch>
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8014dce:	7833      	ldrb	r3, [r6, #0]
 8014dd0:	2b01      	cmp	r3, #1
 8014dd2:	d103      	bne.n	8014ddc <RadioSend+0x30>
 8014dd4:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 8014dd8:	2b06      	cmp	r3, #6
 8014dda:	d012      	beq.n	8014e02 <RadioSend+0x56>
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8014ddc:	f640 0089 	movw	r0, #2185	; 0x889
 8014de0:	f001 f960 	bl	80160a4 <SUBGRF_ReadRegister>
 8014de4:	f040 0104 	orr.w	r1, r0, #4
 8014de8:	b2c9      	uxtb	r1, r1
 8014dea:	f640 0089 	movw	r0, #2185	; 0x889
 8014dee:	f001 f869 	bl	8015ec4 <SUBGRF_WriteRegister>
    switch(SubgRf.Modem)
 8014df2:	4b4e      	ldr	r3, [pc, #312]	; (8014f2c <RadioSend+0x180>)
 8014df4:	781b      	ldrb	r3, [r3, #0]
 8014df6:	2b03      	cmp	r3, #3
 8014df8:	d818      	bhi.n	8014e2c <RadioSend+0x80>
 8014dfa:	e8df f003 	tbb	[pc, r3]
 8014dfe:	0d22      	.short	0x0d22
 8014e00:	5a4d      	.short	0x5a4d
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8014e02:	f640 0089 	movw	r0, #2185	; 0x889
 8014e06:	f001 f94d 	bl	80160a4 <SUBGRF_ReadRegister>
 8014e0a:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8014e0e:	f640 0089 	movw	r0, #2185	; 0x889
 8014e12:	f001 f857 	bl	8015ec4 <SUBGRF_WriteRegister>
 8014e16:	e7ec      	b.n	8014df2 <RadioSend+0x46>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8014e18:	4844      	ldr	r0, [pc, #272]	; (8014f2c <RadioSend+0x180>)
 8014e1a:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014e1c:	300e      	adds	r0, #14
 8014e1e:	f001 fa89 	bl	8016334 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8014e22:	2200      	movs	r2, #0
 8014e24:	4621      	mov	r1, r4
 8014e26:	4628      	mov	r0, r5
 8014e28:	f001 fb53 	bl	80164d2 <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8014e2c:	4c40      	ldr	r4, [pc, #256]	; (8014f30 <RadioSend+0x184>)
 8014e2e:	4b3f      	ldr	r3, [pc, #252]	; (8014f2c <RadioSend+0x180>)
 8014e30:	6859      	ldr	r1, [r3, #4]
 8014e32:	4620      	mov	r0, r4
 8014e34:	f002 f92c 	bl	8017090 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8014e38:	4620      	mov	r0, r4
 8014e3a:	f002 f8e3 	bl	8017004 <UTIL_TIMER_Start>
}
 8014e3e:	b002      	add	sp, #8
 8014e40:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8014e42:	f001 fc63 	bl	801670c <RFW_Is_Init>
 8014e46:	2801      	cmp	r0, #1
 8014e48:	d00a      	beq.n	8014e60 <RadioSend+0xb4>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8014e4a:	4838      	ldr	r0, [pc, #224]	; (8014f2c <RadioSend+0x180>)
 8014e4c:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014e4e:	300e      	adds	r0, #14
 8014e50:	f001 fa70 	bl	8016334 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8014e54:	2200      	movs	r2, #0
 8014e56:	4621      	mov	r1, r4
 8014e58:	4628      	mov	r0, r5
 8014e5a:	f001 fb3a 	bl	80164d2 <SUBGRF_SendPayload>
 8014e5e:	e7e5      	b.n	8014e2c <RadioSend+0x80>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8014e60:	f10d 0207 	add.w	r2, sp, #7
 8014e64:	4621      	mov	r1, r4
 8014e66:	4628      	mov	r0, r5
 8014e68:	f001 fc55 	bl	8016716 <RFW_TransmitInit>
 8014e6c:	b968      	cbnz	r0, 8014e8a <RadioSend+0xde>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8014e6e:	482f      	ldr	r0, [pc, #188]	; (8014f2c <RadioSend+0x180>)
 8014e70:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014e74:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014e76:	300e      	adds	r0, #14
 8014e78:	f001 fa5c 	bl	8016334 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014e82:	4628      	mov	r0, r5
 8014e84:	f001 fb25 	bl	80164d2 <SUBGRF_SendPayload>
 8014e88:	e7d0      	b.n	8014e2c <RadioSend+0x80>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8014e8a:	4b2a      	ldr	r3, [pc, #168]	; (8014f34 <RadioSend+0x188>)
 8014e8c:	2201      	movs	r2, #1
 8014e8e:	2100      	movs	r1, #0
 8014e90:	2002      	movs	r0, #2
 8014e92:	f001 fd1b 	bl	80168cc <UTIL_ADV_TRACE_COND_FSend>
                return;
 8014e96:	e7d2      	b.n	8014e3e <RadioSend+0x92>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8014e98:	4824      	ldr	r0, [pc, #144]	; (8014f2c <RadioSend+0x180>)
 8014e9a:	2302      	movs	r3, #2
 8014e9c:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8014e9e:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014ea0:	300e      	adds	r0, #14
 8014ea2:	f001 fa47 	bl	8016334 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	4621      	mov	r1, r4
 8014eaa:	4628      	mov	r0, r5
 8014eac:	f001 fb11 	bl	80164d2 <SUBGRF_SendPayload>
            break;
 8014eb0:	e7bc      	b.n	8014e2c <RadioSend+0x80>
            payload_integration( RadioBuffer, buffer, size );
 8014eb2:	4622      	mov	r2, r4
 8014eb4:	4629      	mov	r1, r5
 8014eb6:	4820      	ldr	r0, [pc, #128]	; (8014f38 <RadioSend+0x18c>)
 8014eb8:	f7ff fca0 	bl	80147fc <payload_integration>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8014ebc:	4e1b      	ldr	r6, [pc, #108]	; (8014f2c <RadioSend+0x180>)
 8014ebe:	2302      	movs	r3, #2
 8014ec0:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8014ec2:	1c65      	adds	r5, r4, #1
 8014ec4:	b2ed      	uxtb	r5, r5
 8014ec6:	76b5      	strb	r5, [r6, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014ec8:	f106 000e 	add.w	r0, r6, #14
 8014ecc:	f001 fa32 	bl	8016334 <SUBGRF_SetPacketParams>
            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8014ed0:	2100      	movs	r1, #0
 8014ed2:	20f1      	movs	r0, #241	; 0xf1
 8014ed4:	f7ff fd08 	bl	80148e8 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8014ed8:	2100      	movs	r1, #0
 8014eda:	20f0      	movs	r0, #240	; 0xf0
 8014edc:	f7ff fd04 	bl	80148e8 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8014ee0:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8014ee2:	2b64      	cmp	r3, #100	; 0x64
 8014ee4:	d019      	beq.n	8014f1a <RadioSend+0x16e>
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 8014ee6:	21e1      	movs	r1, #225	; 0xe1
 8014ee8:	20f3      	movs	r0, #243	; 0xf3
 8014eea:	f7ff fcfd 	bl	80148e8 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 8014eee:	2104      	movs	r1, #4
 8014ef0:	20f2      	movs	r0, #242	; 0xf2
 8014ef2:	f7ff fcf9 	bl	80148e8 <RadioWrite>
            uint16_t bitNum = ( size * 8 ) + 2;
 8014ef6:	00e1      	lsls	r1, r4, #3
 8014ef8:	1c8c      	adds	r4, r1, #2
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8014efa:	0a09      	lsrs	r1, r1, #8
 8014efc:	20f4      	movs	r0, #244	; 0xf4
 8014efe:	f7ff fcf3 	bl	80148e8 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 8014f02:	f004 01fe 	and.w	r1, r4, #254	; 0xfe
 8014f06:	20f5      	movs	r0, #245	; 0xf5
 8014f08:	f7ff fcee 	bl	80148e8 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8014f0c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8014f10:	4629      	mov	r1, r5
 8014f12:	4809      	ldr	r0, [pc, #36]	; (8014f38 <RadioSend+0x18c>)
 8014f14:	f001 fadd 	bl	80164d2 <SUBGRF_SendPayload>
            break;
 8014f18:	e788      	b.n	8014e2c <RadioSend+0x80>
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 8014f1a:	2170      	movs	r1, #112	; 0x70
 8014f1c:	20f3      	movs	r0, #243	; 0xf3
 8014f1e:	f7ff fce3 	bl	80148e8 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 8014f22:	211d      	movs	r1, #29
 8014f24:	20f2      	movs	r0, #242	; 0xf2
 8014f26:	f7ff fcdf 	bl	80148e8 <RadioWrite>
 8014f2a:	e7e4      	b.n	8014ef6 <RadioSend+0x14a>
 8014f2c:	20002500 	.word	0x20002500
 8014f30:	20002558 	.word	0x20002558
 8014f34:	080183e4 	.word	0x080183e4
 8014f38:	20001474 	.word	0x20001474

08014f3c <RadioSetModem>:
{
 8014f3c:	b510      	push	{r4, lr}
 8014f3e:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8014f40:	4b19      	ldr	r3, [pc, #100]	; (8014fa8 <RadioSetModem+0x6c>)
 8014f42:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem(modem);
 8014f44:	f001 fbef 	bl	8016726 <RFW_SetRadioModem>
    switch( modem )
 8014f48:	3c01      	subs	r4, #1
 8014f4a:	2c03      	cmp	r4, #3
 8014f4c:	d803      	bhi.n	8014f56 <RadioSetModem+0x1a>
 8014f4e:	e8df f004 	tbb	[pc, r4]
 8014f52:	1509      	.short	0x1509
 8014f54:	231c      	.short	0x231c
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8014f56:	2000      	movs	r0, #0
 8014f58:	f001 f804 	bl	8015f64 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8014f5c:	4b12      	ldr	r3, [pc, #72]	; (8014fa8 <RadioSetModem+0x6c>)
 8014f5e:	2200      	movs	r2, #0
 8014f60:	735a      	strb	r2, [r3, #13]
        break;
 8014f62:	e011      	b.n	8014f88 <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8014f64:	2001      	movs	r0, #1
 8014f66:	f000 fffd 	bl	8015f64 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8014f6a:	4b0f      	ldr	r3, [pc, #60]	; (8014fa8 <RadioSetModem+0x6c>)
 8014f6c:	7b5a      	ldrb	r2, [r3, #13]
 8014f6e:	7b18      	ldrb	r0, [r3, #12]
 8014f70:	4282      	cmp	r2, r0
 8014f72:	d009      	beq.n	8014f88 <RadioSetModem+0x4c>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8014f74:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8014f76:	f000 fa83 	bl	8015480 <RadioSetPublicNetwork>
 8014f7a:	e005      	b.n	8014f88 <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8014f7c:	2002      	movs	r0, #2
 8014f7e:	f000 fff1 	bl	8015f64 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8014f82:	4b09      	ldr	r3, [pc, #36]	; (8014fa8 <RadioSetModem+0x6c>)
 8014f84:	2200      	movs	r2, #0
 8014f86:	735a      	strb	r2, [r3, #13]
}
 8014f88:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8014f8a:	2002      	movs	r0, #2
 8014f8c:	f000 ffea 	bl	8015f64 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8014f90:	4b05      	ldr	r3, [pc, #20]	; (8014fa8 <RadioSetModem+0x6c>)
 8014f92:	2200      	movs	r2, #0
 8014f94:	735a      	strb	r2, [r3, #13]
        break;
 8014f96:	e7f7      	b.n	8014f88 <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8014f98:	2000      	movs	r0, #0
 8014f9a:	f000 ffe3 	bl	8015f64 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8014f9e:	4b02      	ldr	r3, [pc, #8]	; (8014fa8 <RadioSetModem+0x6c>)
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	735a      	strb	r2, [r3, #13]
}
 8014fa4:	e7f0      	b.n	8014f88 <RadioSetModem+0x4c>
 8014fa6:	bf00      	nop
 8014fa8:	20002500 	.word	0x20002500

08014fac <RadioSetTxGenericConfig>:
    }
    return status;
}

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8014fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fb0:	b086      	sub	sp, #24
 8014fb2:	4605      	mov	r5, r0
 8014fb4:	460c      	mov	r4, r1
 8014fb6:	4617      	mov	r7, r2
 8014fb8:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 8014fba:	2300      	movs	r3, #0
 8014fbc:	9304      	str	r3, [sp, #16]
 8014fbe:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8014fc0:	f001 fba3 	bl	801670a <RFW_DeInit>
    switch( modem )
 8014fc4:	2d01      	cmp	r5, #1
 8014fc6:	f000 8085 	beq.w	80150d4 <RadioSetTxGenericConfig+0x128>
 8014fca:	2d02      	cmp	r5, #2
 8014fcc:	f000 80ed 	beq.w	80151aa <RadioSetTxGenericConfig+0x1fe>
 8014fd0:	b165      	cbz	r5, 8014fec <RadioSetTxGenericConfig+0x40>
        break;
    default:
        break;
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8014fd2:	4638      	mov	r0, r7
 8014fd4:	f001 fac4 	bl	8016560 <SUBGRF_SetRfTxPower>
 8014fd8:	4c84      	ldr	r4, [pc, #528]	; (80151ec <RadioSetTxGenericConfig+0x240>)
 8014fda:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8014fde:	f001 fb99 	bl	8016714 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8014fe2:	6066      	str	r6, [r4, #4]
    return 0;
 8014fe4:	2000      	movs	r0, #0
}
 8014fe6:	b006      	add	sp, #24
 8014fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8014fec:	68a3      	ldr	r3, [r4, #8]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	f000 80f0 	beq.w	80151d4 <RadioSetTxGenericConfig+0x228>
 8014ff4:	6923      	ldr	r3, [r4, #16]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	f000 80ef 	beq.w	80151da <RadioSetTxGenericConfig+0x22e>
        if( config->fsk.SyncWordLength > 8 )
 8014ffc:	7d20      	ldrb	r0, [r4, #20]
 8014ffe:	2808      	cmp	r0, #8
 8015000:	f200 80ee 	bhi.w	80151e0 <RadioSetTxGenericConfig+0x234>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8015004:	2100      	movs	r1, #0
 8015006:	e006      	b.n	8015016 <RadioSetTxGenericConfig+0x6a>
                syncword[i] = config->fsk.SyncWord[i];
 8015008:	69a3      	ldr	r3, [r4, #24]
 801500a:	5c5a      	ldrb	r2, [r3, r1]
 801500c:	ab06      	add	r3, sp, #24
 801500e:	440b      	add	r3, r1
 8015010:	f803 2c08 	strb.w	r2, [r3, #-8]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8015014:	3101      	adds	r1, #1
 8015016:	4288      	cmp	r0, r1
 8015018:	dcf6      	bgt.n	8015008 <RadioSetTxGenericConfig+0x5c>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801501a:	4d74      	ldr	r5, [pc, #464]	; (80151ec <RadioSetTxGenericConfig+0x240>)
 801501c:	f04f 0800 	mov.w	r8, #0
 8015020:	f885 8038 	strb.w	r8, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8015024:	68a3      	ldr	r3, [r4, #8]
 8015026:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8015028:	7823      	ldrb	r3, [r4, #0]
 801502a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801502e:	6860      	ldr	r0, [r4, #4]
 8015030:	f001 fb04 	bl	801663c <SUBGRF_GetFskBandwidthRegValue>
 8015034:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8015038:	68e3      	ldr	r3, [r4, #12]
 801503a:	642b      	str	r3, [r5, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801503c:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8015040:	6923      	ldr	r3, [r4, #16]
 8015042:	00db      	lsls	r3, r3, #3
 8015044:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8015046:	2304      	movs	r3, #4
 8015048:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801504a:	7d23      	ldrb	r3, [r4, #20]
 801504c:	00db      	lsls	r3, r3, #3
 801504e:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8015050:	f885 8014 	strb.w	r8, [r5, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8015054:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8015058:	2b02      	cmp	r3, #2
 801505a:	d008      	beq.n	801506e <RadioSetTxGenericConfig+0xc2>
 801505c:	7fa2      	ldrb	r2, [r4, #30]
 801505e:	2a02      	cmp	r2, #2
 8015060:	d005      	beq.n	801506e <RadioSetTxGenericConfig+0xc2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8015062:	7fe0      	ldrb	r0, [r4, #31]
 8015064:	4961      	ldr	r1, [pc, #388]	; (80151ec <RadioSetTxGenericConfig+0x240>)
 8015066:	75c8      	strb	r0, [r1, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8015068:	760b      	strb	r3, [r1, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801506a:	754a      	strb	r2, [r1, #21]
 801506c:	e018      	b.n	80150a0 <RadioSetTxGenericConfig+0xf4>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801506e:	7fe2      	ldrb	r2, [r4, #31]
 8015070:	f102 030f 	add.w	r3, r2, #15
 8015074:	b2db      	uxtb	r3, r3
 8015076:	2b01      	cmp	r3, #1
 8015078:	d901      	bls.n	801507e <RadioSetTxGenericConfig+0xd2>
 801507a:	2a01      	cmp	r2, #1
 801507c:	d127      	bne.n	80150ce <RadioSetTxGenericConfig+0x122>
            ConfigGeneric.rtx = CONFIG_TX;
 801507e:	2301      	movs	r3, #1
 8015080:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 8015084:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8015086:	4a5a      	ldr	r2, [pc, #360]	; (80151f0 <RadioSetTxGenericConfig+0x244>)
 8015088:	4b5a      	ldr	r3, [pc, #360]	; (80151f4 <RadioSetTxGenericConfig+0x248>)
 801508a:	6819      	ldr	r1, [r3, #0]
 801508c:	a801      	add	r0, sp, #4
 801508e:	f001 fb39 	bl	8016704 <RFW_Init>
 8015092:	b9e0      	cbnz	r0, 80150ce <RadioSetTxGenericConfig+0x122>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8015094:	4b55      	ldr	r3, [pc, #340]	; (80151ec <RadioSetTxGenericConfig+0x240>)
 8015096:	2200      	movs	r2, #0
 8015098:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801509a:	2101      	movs	r1, #1
 801509c:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801509e:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80150a0:	f7ff fc88 	bl	80149b4 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80150a4:	2000      	movs	r0, #0
 80150a6:	f7ff ff49 	bl	8014f3c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80150aa:	4d53      	ldr	r5, [pc, #332]	; (80151f8 <RadioSetTxGenericConfig+0x24c>)
 80150ac:	4628      	mov	r0, r5
 80150ae:	f000 ff71 	bl	8015f94 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80150b2:	f1a5 002a 	sub.w	r0, r5, #42	; 0x2a
 80150b6:	f001 f93d 	bl	8016334 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80150ba:	a804      	add	r0, sp, #16
 80150bc:	f001 f908 	bl	80162d0 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80150c0:	8ba0      	ldrh	r0, [r4, #28]
 80150c2:	f001 f86b 	bl	801619c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 80150c6:	8c20      	ldrh	r0, [r4, #32]
 80150c8:	f001 f91f 	bl	801630a <SUBGRF_SetCrcPolynomial>
        break;
 80150cc:	e781      	b.n	8014fd2 <RadioSetTxGenericConfig+0x26>
                return -1;
 80150ce:	f04f 30ff 	mov.w	r0, #4294967295
 80150d2:	e788      	b.n	8014fe6 <RadioSetTxGenericConfig+0x3a>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80150d4:	4b45      	ldr	r3, [pc, #276]	; (80151ec <RadioSetTxGenericConfig+0x240>)
 80150d6:	2201      	movs	r2, #1
 80150d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80150dc:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80150e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80150e4:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 80150e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80150ec:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 80150f0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80150f4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 80150f8:	2b01      	cmp	r3, #1
 80150fa:	d036      	beq.n	801516a <RadioSetTxGenericConfig+0x1be>
 80150fc:	2b02      	cmp	r3, #2
 80150fe:	d039      	beq.n	8015174 <RadioSetTxGenericConfig+0x1c8>
 8015100:	b373      	cbz	r3, 8015160 <RadioSetTxGenericConfig+0x1b4>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8015102:	4d3a      	ldr	r5, [pc, #232]	; (80151ec <RadioSetTxGenericConfig+0x240>)
 8015104:	f04f 0801 	mov.w	r8, #1
 8015108:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801510c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 801510e:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8015110:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8015114:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8015116:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801511a:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801511e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8015122:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 8015126:	f7ff fc45 	bl	80149b4 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801512a:	4640      	mov	r0, r8
 801512c:	f7ff ff06 	bl	8014f3c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8015130:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8015134:	f000 ff2e 	bl	8015f94 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015138:	f105 000e 	add.w	r0, r5, #14
 801513c:	f001 f8fa 	bl	8016334 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8015140:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 8015144:	2b06      	cmp	r3, #6
 8015146:	d025      	beq.n	8015194 <RadioSetTxGenericConfig+0x1e8>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8015148:	f640 0089 	movw	r0, #2185	; 0x889
 801514c:	f000 ffaa 	bl	80160a4 <SUBGRF_ReadRegister>
 8015150:	f040 0104 	orr.w	r1, r0, #4
 8015154:	b2c9      	uxtb	r1, r1
 8015156:	f640 0089 	movw	r0, #2185	; 0x889
 801515a:	f000 feb3 	bl	8015ec4 <SUBGRF_WriteRegister>
 801515e:	e738      	b.n	8014fd2 <RadioSetTxGenericConfig+0x26>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8015160:	4b22      	ldr	r3, [pc, #136]	; (80151ec <RadioSetTxGenericConfig+0x240>)
 8015162:	2200      	movs	r2, #0
 8015164:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8015168:	e7cb      	b.n	8015102 <RadioSetTxGenericConfig+0x156>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801516a:	4b20      	ldr	r3, [pc, #128]	; (80151ec <RadioSetTxGenericConfig+0x240>)
 801516c:	2201      	movs	r2, #1
 801516e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8015172:	e7c6      	b.n	8015102 <RadioSetTxGenericConfig+0x156>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8015174:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8015178:	3b0b      	subs	r3, #11
 801517a:	b2db      	uxtb	r3, r3
 801517c:	2b01      	cmp	r3, #1
 801517e:	d904      	bls.n	801518a <RadioSetTxGenericConfig+0x1de>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8015180:	4b1a      	ldr	r3, [pc, #104]	; (80151ec <RadioSetTxGenericConfig+0x240>)
 8015182:	2200      	movs	r2, #0
 8015184:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8015188:	e7bb      	b.n	8015102 <RadioSetTxGenericConfig+0x156>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801518a:	4b18      	ldr	r3, [pc, #96]	; (80151ec <RadioSetTxGenericConfig+0x240>)
 801518c:	2201      	movs	r2, #1
 801518e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8015192:	e7b6      	b.n	8015102 <RadioSetTxGenericConfig+0x156>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8015194:	f640 0089 	movw	r0, #2185	; 0x889
 8015198:	f000 ff84 	bl	80160a4 <SUBGRF_ReadRegister>
 801519c:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80151a0:	f640 0089 	movw	r0, #2185	; 0x889
 80151a4:	f000 fe8e 	bl	8015ec4 <SUBGRF_WriteRegister>
 80151a8:	e713      	b.n	8014fd2 <RadioSetTxGenericConfig+0x26>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80151aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80151ac:	3b01      	subs	r3, #1
 80151ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80151b2:	d218      	bcs.n	80151e6 <RadioSetTxGenericConfig+0x23a>
        RadioSetModem( MODEM_BPSK );
 80151b4:	2002      	movs	r0, #2
 80151b6:	f7ff fec1 	bl	8014f3c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80151ba:	480c      	ldr	r0, [pc, #48]	; (80151ec <RadioSetTxGenericConfig+0x240>)
 80151bc:	2302      	movs	r3, #2
 80151be:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80151c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80151c4:	6483      	str	r3, [r0, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80151c6:	2316      	movs	r3, #22
 80151c8:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80151cc:	3038      	adds	r0, #56	; 0x38
 80151ce:	f000 fee1 	bl	8015f94 <SUBGRF_SetModulationParams>
        break;
 80151d2:	e6fe      	b.n	8014fd2 <RadioSetTxGenericConfig+0x26>
            return -1;
 80151d4:	f04f 30ff 	mov.w	r0, #4294967295
 80151d8:	e705      	b.n	8014fe6 <RadioSetTxGenericConfig+0x3a>
 80151da:	f04f 30ff 	mov.w	r0, #4294967295
 80151de:	e702      	b.n	8014fe6 <RadioSetTxGenericConfig+0x3a>
            return -1;
 80151e0:	f04f 30ff 	mov.w	r0, #4294967295
 80151e4:	e6ff      	b.n	8014fe6 <RadioSetTxGenericConfig+0x3a>
            return -1;
 80151e6:	f04f 30ff 	mov.w	r0, #4294967295
 80151ea:	e6fc      	b.n	8014fe6 <RadioSetTxGenericConfig+0x3a>
 80151ec:	20002500 	.word	0x20002500
 80151f0:	20002558 	.word	0x20002558
 80151f4:	20001574 	.word	0x20001574
 80151f8:	20002538 	.word	0x20002538

080151fc <RadioSetRxGenericConfig>:
{
 80151fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151fe:	b087      	sub	sp, #28
 8015200:	4607      	mov	r7, r0
 8015202:	460c      	mov	r4, r1
 8015204:	4615      	mov	r5, r2
 8015206:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 8015208:	2300      	movs	r3, #0
 801520a:	9304      	str	r3, [sp, #16]
 801520c:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801520e:	f001 fa7c 	bl	801670a <RFW_DeInit>
    if( rxContinuous != 0 )
 8015212:	b105      	cbz	r5, 8015216 <RadioSetRxGenericConfig+0x1a>
        symbTimeout = 0;
 8015214:	2600      	movs	r6, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8015216:	3d00      	subs	r5, #0
 8015218:	bf18      	it	ne
 801521a:	2501      	movne	r5, #1
 801521c:	4b94      	ldr	r3, [pc, #592]	; (8015470 <RadioSetRxGenericConfig+0x274>)
 801521e:	705d      	strb	r5, [r3, #1]
    switch( modem )
 8015220:	b12f      	cbz	r7, 801522e <RadioSetRxGenericConfig+0x32>
 8015222:	2f01      	cmp	r7, #1
 8015224:	f000 8094 	beq.w	8015350 <RadioSetRxGenericConfig+0x154>
 8015228:	2000      	movs	r0, #0
}
 801522a:	b007      	add	sp, #28
 801522c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801522e:	68e3      	ldr	r3, [r4, #12]
 8015230:	2b00      	cmp	r3, #0
 8015232:	f000 8110 	beq.w	8015456 <RadioSetRxGenericConfig+0x25a>
 8015236:	6923      	ldr	r3, [r4, #16]
 8015238:	2b00      	cmp	r3, #0
 801523a:	f000 810f 	beq.w	801545c <RadioSetRxGenericConfig+0x260>
        if( config->fsk.SyncWordLength > 8 )
 801523e:	7d63      	ldrb	r3, [r4, #21]
 8015240:	2b08      	cmp	r3, #8
 8015242:	f200 810e 	bhi.w	8015462 <RadioSetRxGenericConfig+0x266>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8015246:	2200      	movs	r2, #0
 8015248:	e006      	b.n	8015258 <RadioSetRxGenericConfig+0x5c>
                syncword[i] = config->fsk.SyncWord[i];
 801524a:	69a1      	ldr	r1, [r4, #24]
 801524c:	5c88      	ldrb	r0, [r1, r2]
 801524e:	a906      	add	r1, sp, #24
 8015250:	4411      	add	r1, r2
 8015252:	f801 0c08 	strb.w	r0, [r1, #-8]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8015256:	3201      	adds	r2, #1
 8015258:	4293      	cmp	r3, r2
 801525a:	dcf6      	bgt.n	801524a <RadioSetRxGenericConfig+0x4e>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801525c:	6820      	ldr	r0, [r4, #0]
 801525e:	3800      	subs	r0, #0
 8015260:	bf18      	it	ne
 8015262:	2001      	movne	r0, #1
 8015264:	f000 fcca 	bl	8015bfc <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8015268:	4d81      	ldr	r5, [pc, #516]	; (8015470 <RadioSetRxGenericConfig+0x274>)
 801526a:	2700      	movs	r7, #0
 801526c:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8015270:	68e3      	ldr	r3, [r4, #12]
 8015272:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8015274:	7923      	ldrb	r3, [r4, #4]
 8015276:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801527a:	68a0      	ldr	r0, [r4, #8]
 801527c:	f001 f9de 	bl	801663c <SUBGRF_GetFskBandwidthRegValue>
 8015280:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8015284:	73af      	strb	r7, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8015286:	6923      	ldr	r3, [r4, #16]
 8015288:	00db      	lsls	r3, r3, #3
 801528a:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801528c:	7d23      	ldrb	r3, [r4, #20]
 801528e:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8015290:	7d63      	ldrb	r3, [r4, #21]
 8015292:	00db      	lsls	r3, r3, #3
 8015294:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8015296:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 801529a:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801529c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80152a0:	b973      	cbnz	r3, 80152c0 <RadioSetRxGenericConfig+0xc4>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80152a2:	69e1      	ldr	r1, [r4, #28]
 80152a4:	75a9      	strb	r1, [r5, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80152a6:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 80152aa:	2a02      	cmp	r2, #2
 80152ac:	d012      	beq.n	80152d4 <RadioSetRxGenericConfig+0xd8>
 80152ae:	2b02      	cmp	r3, #2
 80152b0:	d010      	beq.n	80152d4 <RadioSetRxGenericConfig+0xd8>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80152b2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 80152b6:	496e      	ldr	r1, [pc, #440]	; (8015470 <RadioSetRxGenericConfig+0x274>)
 80152b8:	75c8      	strb	r0, [r1, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80152ba:	760a      	strb	r2, [r1, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80152bc:	754b      	strb	r3, [r1, #21]
 80152be:	e023      	b.n	8015308 <RadioSetRxGenericConfig+0x10c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80152c0:	2b02      	cmp	r3, #2
 80152c2:	d003      	beq.n	80152cc <RadioSetRxGenericConfig+0xd0>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80152c4:	4a6a      	ldr	r2, [pc, #424]	; (8015470 <RadioSetRxGenericConfig+0x274>)
 80152c6:	21ff      	movs	r1, #255	; 0xff
 80152c8:	7591      	strb	r1, [r2, #22]
 80152ca:	e7ec      	b.n	80152a6 <RadioSetRxGenericConfig+0xaa>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80152cc:	4a68      	ldr	r2, [pc, #416]	; (8015470 <RadioSetRxGenericConfig+0x274>)
 80152ce:	21ff      	movs	r1, #255	; 0xff
 80152d0:	7591      	strb	r1, [r2, #22]
 80152d2:	e7e8      	b.n	80152a6 <RadioSetRxGenericConfig+0xaa>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80152d4:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80152d8:	f102 030f 	add.w	r3, r2, #15
 80152dc:	b2db      	uxtb	r3, r3
 80152de:	2b01      	cmp	r3, #1
 80152e0:	d901      	bls.n	80152e6 <RadioSetRxGenericConfig+0xea>
 80152e2:	2a01      	cmp	r2, #1
 80152e4:	d131      	bne.n	801534a <RadioSetRxGenericConfig+0x14e>
          ConfigGeneric.rtx = CONFIG_RX;
 80152e6:	2300      	movs	r3, #0
 80152e8:	f88d 300c 	strb.w	r3, [sp, #12]
          ConfigGeneric.RxConfig = config;
 80152ec:	9402      	str	r4, [sp, #8]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80152ee:	4a61      	ldr	r2, [pc, #388]	; (8015474 <RadioSetRxGenericConfig+0x278>)
 80152f0:	4b61      	ldr	r3, [pc, #388]	; (8015478 <RadioSetRxGenericConfig+0x27c>)
 80152f2:	6819      	ldr	r1, [r3, #0]
 80152f4:	a801      	add	r0, sp, #4
 80152f6:	f001 fa05 	bl	8016704 <RFW_Init>
 80152fa:	bb30      	cbnz	r0, 801534a <RadioSetRxGenericConfig+0x14e>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80152fc:	4b5c      	ldr	r3, [pc, #368]	; (8015470 <RadioSetRxGenericConfig+0x274>)
 80152fe:	2200      	movs	r2, #0
 8015300:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8015302:	2101      	movs	r1, #1
 8015304:	75d9      	strb	r1, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8015306:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8015308:	f7ff fb54 	bl	80149b4 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801530c:	2000      	movs	r0, #0
 801530e:	f7ff fe15 	bl	8014f3c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8015312:	4d5a      	ldr	r5, [pc, #360]	; (801547c <RadioSetRxGenericConfig+0x280>)
 8015314:	4628      	mov	r0, r5
 8015316:	f000 fe3d 	bl	8015f94 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801531a:	f1a5 002a 	sub.w	r0, r5, #42	; 0x2a
 801531e:	f001 f809 	bl	8016334 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8015322:	a804      	add	r0, sp, #16
 8015324:	f000 ffd4 	bl	80162d0 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8015328:	8c20      	ldrh	r0, [r4, #32]
 801532a:	f000 ff37 	bl	801619c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801532e:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8015330:	f000 ffeb 	bl	801630a <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8015334:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8015338:	fb03 f606 	mul.w	r6, r3, r6
 801533c:	68e3      	ldr	r3, [r4, #12]
 801533e:	fbb6 f6f3 	udiv	r6, r6, r3
 8015342:	f845 6c30 	str.w	r6, [r5, #-48]
    return status;
 8015346:	2000      	movs	r0, #0
        break;
 8015348:	e76f      	b.n	801522a <RadioSetRxGenericConfig+0x2e>
            return -1;
 801534a:	f04f 30ff 	mov.w	r0, #4294967295
 801534e:	e76c      	b.n	801522a <RadioSetRxGenericConfig+0x2e>
        if( config->lora.PreambleLen == 0 )
 8015350:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8015352:	2b00      	cmp	r3, #0
 8015354:	f000 8088 	beq.w	8015468 <RadioSetRxGenericConfig+0x26c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8015358:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 801535c:	2b01      	cmp	r3, #1
 801535e:	d053      	beq.n	8015408 <RadioSetRxGenericConfig+0x20c>
            MaxPayloadLength = 0xFF;
 8015360:	27ff      	movs	r7, #255	; 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8015362:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8015364:	3800      	subs	r0, #0
 8015366:	bf18      	it	ne
 8015368:	2001      	movne	r0, #1
 801536a:	f000 fc47 	bl	8015bfc <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801536e:	b2f0      	uxtb	r0, r6
 8015370:	f000 fdd6 	bl	8015f20 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8015374:	4b3e      	ldr	r3, [pc, #248]	; (8015470 <RadioSetRxGenericConfig+0x274>)
 8015376:	2201      	movs	r2, #1
 8015378:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801537c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8015380:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8015384:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8015388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801538c:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 8015390:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8015394:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 8015398:	2b01      	cmp	r3, #1
 801539a:	d03c      	beq.n	8015416 <RadioSetRxGenericConfig+0x21a>
 801539c:	2b02      	cmp	r3, #2
 801539e:	d03f      	beq.n	8015420 <RadioSetRxGenericConfig+0x224>
 80153a0:	b3a3      	cbz	r3, 801540c <RadioSetRxGenericConfig+0x210>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80153a2:	4d33      	ldr	r5, [pc, #204]	; (8015470 <RadioSetRxGenericConfig+0x274>)
 80153a4:	2601      	movs	r6, #1
 80153a6:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80153a8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80153aa:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80153ac:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80153b0:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80153b2:	77ef      	strb	r7, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80153b4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80153b8:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80153bc:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80153c0:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 80153c4:	f7ff faf6 	bl	80149b4 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80153c8:	4630      	mov	r0, r6
 80153ca:	f7ff fdb7 	bl	8014f3c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80153ce:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80153d2:	f000 fddf 	bl	8015f94 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80153d6:	f105 000e 	add.w	r0, r5, #14
 80153da:	f000 ffab 	bl	8016334 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80153de:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80153e2:	42b3      	cmp	r3, r6
 80153e4:	d02c      	beq.n	8015440 <RadioSetRxGenericConfig+0x244>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80153e6:	f240 7036 	movw	r0, #1846	; 0x736
 80153ea:	f000 fe5b 	bl	80160a4 <SUBGRF_ReadRegister>
 80153ee:	f040 0104 	orr.w	r1, r0, #4
 80153f2:	b2c9      	uxtb	r1, r1
 80153f4:	f240 7036 	movw	r0, #1846	; 0x736
 80153f8:	f000 fd64 	bl	8015ec4 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80153fc:	4b1c      	ldr	r3, [pc, #112]	; (8015470 <RadioSetRxGenericConfig+0x274>)
 80153fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015402:	609a      	str	r2, [r3, #8]
    return status;
 8015404:	2000      	movs	r0, #0
        break;
 8015406:	e710      	b.n	801522a <RadioSetRxGenericConfig+0x2e>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8015408:	7f27      	ldrb	r7, [r4, #28]
 801540a:	e7aa      	b.n	8015362 <RadioSetRxGenericConfig+0x166>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801540c:	4b18      	ldr	r3, [pc, #96]	; (8015470 <RadioSetRxGenericConfig+0x274>)
 801540e:	2200      	movs	r2, #0
 8015410:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8015414:	e7c5      	b.n	80153a2 <RadioSetRxGenericConfig+0x1a6>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8015416:	4b16      	ldr	r3, [pc, #88]	; (8015470 <RadioSetRxGenericConfig+0x274>)
 8015418:	2201      	movs	r2, #1
 801541a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801541e:	e7c0      	b.n	80153a2 <RadioSetRxGenericConfig+0x1a6>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8015420:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8015424:	3b0b      	subs	r3, #11
 8015426:	b2db      	uxtb	r3, r3
 8015428:	2b01      	cmp	r3, #1
 801542a:	d904      	bls.n	8015436 <RadioSetRxGenericConfig+0x23a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801542c:	4b10      	ldr	r3, [pc, #64]	; (8015470 <RadioSetRxGenericConfig+0x274>)
 801542e:	2200      	movs	r2, #0
 8015430:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8015434:	e7b5      	b.n	80153a2 <RadioSetRxGenericConfig+0x1a6>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8015436:	4b0e      	ldr	r3, [pc, #56]	; (8015470 <RadioSetRxGenericConfig+0x274>)
 8015438:	2201      	movs	r2, #1
 801543a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801543e:	e7b0      	b.n	80153a2 <RadioSetRxGenericConfig+0x1a6>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8015440:	f240 7036 	movw	r0, #1846	; 0x736
 8015444:	f000 fe2e 	bl	80160a4 <SUBGRF_ReadRegister>
 8015448:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 801544c:	f240 7036 	movw	r0, #1846	; 0x736
 8015450:	f000 fd38 	bl	8015ec4 <SUBGRF_WriteRegister>
 8015454:	e7d2      	b.n	80153fc <RadioSetRxGenericConfig+0x200>
            return -1;
 8015456:	f04f 30ff 	mov.w	r0, #4294967295
 801545a:	e6e6      	b.n	801522a <RadioSetRxGenericConfig+0x2e>
 801545c:	f04f 30ff 	mov.w	r0, #4294967295
 8015460:	e6e3      	b.n	801522a <RadioSetRxGenericConfig+0x2e>
            return -1;
 8015462:	f04f 30ff 	mov.w	r0, #4294967295
 8015466:	e6e0      	b.n	801522a <RadioSetRxGenericConfig+0x2e>
            return -1;
 8015468:	f04f 30ff 	mov.w	r0, #4294967295
 801546c:	e6dd      	b.n	801522a <RadioSetRxGenericConfig+0x2e>
 801546e:	bf00      	nop
 8015470:	20002500 	.word	0x20002500
 8015474:	20002570 	.word	0x20002570
 8015478:	20001574 	.word	0x20001574
 801547c:	20002538 	.word	0x20002538

08015480 <RadioSetPublicNetwork>:
{
 8015480:	b510      	push	{r4, lr}
 8015482:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8015484:	4b0e      	ldr	r3, [pc, #56]	; (80154c0 <RadioSetPublicNetwork+0x40>)
 8015486:	7318      	strb	r0, [r3, #12]
 8015488:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 801548a:	2001      	movs	r0, #1
 801548c:	f7ff fd56 	bl	8014f3c <RadioSetModem>
    if( enable == true )
 8015490:	b154      	cbz	r4, 80154a8 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8015492:	2134      	movs	r1, #52	; 0x34
 8015494:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8015498:	f000 fd14 	bl	8015ec4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801549c:	2144      	movs	r1, #68	; 0x44
 801549e:	f240 7041 	movw	r0, #1857	; 0x741
 80154a2:	f000 fd0f 	bl	8015ec4 <SUBGRF_WriteRegister>
}
 80154a6:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80154a8:	2114      	movs	r1, #20
 80154aa:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80154ae:	f000 fd09 	bl	8015ec4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80154b2:	2124      	movs	r1, #36	; 0x24
 80154b4:	f240 7041 	movw	r0, #1857	; 0x741
 80154b8:	f000 fd04 	bl	8015ec4 <SUBGRF_WriteRegister>
}
 80154bc:	e7f3      	b.n	80154a6 <RadioSetPublicNetwork+0x26>
 80154be:	bf00      	nop
 80154c0:	20002500 	.word	0x20002500

080154c4 <RadioSetTxConfig>:
{
 80154c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154c8:	b083      	sub	sp, #12
 80154ca:	4604      	mov	r4, r0
 80154cc:	460d      	mov	r5, r1
 80154ce:	4691      	mov	r9, r2
 80154d0:	461f      	mov	r7, r3
 80154d2:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80154d6:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 80154da:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80154de:	f001 f914 	bl	801670a <RFW_DeInit>
    switch( modem )
 80154e2:	2c01      	cmp	r4, #1
 80154e4:	d05a      	beq.n	801559c <RadioSetTxConfig+0xd8>
 80154e6:	2c03      	cmp	r4, #3
 80154e8:	f000 80ab 	beq.w	8015642 <RadioSetTxConfig+0x17e>
 80154ec:	b164      	cbz	r4, 8015508 <RadioSetTxConfig+0x44>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80154ee:	4628      	mov	r0, r5
 80154f0:	f001 f836 	bl	8016560 <SUBGRF_SetRfTxPower>
 80154f4:	4c5b      	ldr	r4, [pc, #364]	; (8015664 <RadioSetTxConfig+0x1a0>)
 80154f6:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 80154fa:	f001 f90b 	bl	8016714 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80154fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015500:	6063      	str	r3, [r4, #4]
}
 8015502:	b003      	add	sp, #12
 8015504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8015508:	4c56      	ldr	r4, [pc, #344]	; (8015664 <RadioSetTxConfig+0x1a0>)
 801550a:	f04f 0b00 	mov.w	fp, #0
 801550e:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8015512:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015514:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8015516:	230b      	movs	r3, #11
 8015518:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801551c:	4638      	mov	r0, r7
 801551e:	f001 f88d 	bl	801663c <SUBGRF_GetFskBandwidthRegValue>
 8015522:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8015526:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801552a:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801552e:	00f6      	lsls	r6, r6, #3
 8015530:	8226      	strh	r6, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8015532:	2304      	movs	r3, #4
 8015534:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8015536:	2318      	movs	r3, #24
 8015538:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801553a:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801553e:	f088 0801 	eor.w	r8, r8, #1
 8015542:	f884 8015 	strb.w	r8, [r4, #21]
            if( crcOn == true )
 8015546:	f1ba 0f00 	cmp.w	sl, #0
 801554a:	d023      	beq.n	8015594 <RadioSetTxConfig+0xd0>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801554c:	22f2      	movs	r2, #242	; 0xf2
 801554e:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8015550:	4c44      	ldr	r4, [pc, #272]	; (8015664 <RadioSetTxConfig+0x1a0>)
 8015552:	2301      	movs	r3, #1
 8015554:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8015556:	f7ff fa2d 	bl	80149b4 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801555a:	4626      	mov	r6, r4
 801555c:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 8015560:	3800      	subs	r0, #0
 8015562:	bf18      	it	ne
 8015564:	2001      	movne	r0, #1
 8015566:	f7ff fce9 	bl	8014f3c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801556a:	4630      	mov	r0, r6
 801556c:	f000 fd12 	bl	8015f94 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015570:	f104 000e 	add.w	r0, r4, #14
 8015574:	f000 fede 	bl	8016334 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8015578:	4a3b      	ldr	r2, [pc, #236]	; (8015668 <RadioSetTxConfig+0x1a4>)
 801557a:	466b      	mov	r3, sp
 801557c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015580:	e883 0003 	stmia.w	r3, {r0, r1}
 8015584:	4618      	mov	r0, r3
 8015586:	f000 fea3 	bl	80162d0 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801558a:	f240 10ff 	movw	r0, #511	; 0x1ff
 801558e:	f000 fe05 	bl	801619c <SUBGRF_SetWhiteningSeed>
            break;
 8015592:	e7ac      	b.n	80154ee <RadioSetTxConfig+0x2a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8015594:	4b33      	ldr	r3, [pc, #204]	; (8015664 <RadioSetTxConfig+0x1a0>)
 8015596:	2201      	movs	r2, #1
 8015598:	75da      	strb	r2, [r3, #23]
 801559a:	e7d9      	b.n	8015550 <RadioSetTxConfig+0x8c>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801559c:	4a31      	ldr	r2, [pc, #196]	; (8015664 <RadioSetTxConfig+0x1a0>)
 801559e:	2301      	movs	r3, #1
 80155a0:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80155a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80155a6:	b2db      	uxtb	r3, r3
 80155a8:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80155ac:	492f      	ldr	r1, [pc, #188]	; (801566c <RadioSetTxConfig+0x1a8>)
 80155ae:	5dc9      	ldrb	r1, [r1, r7]
 80155b0:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80155b4:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 80155b8:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80155bc:	b91f      	cbnz	r7, 80155c6 <RadioSetTxConfig+0x102>
 80155be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80155c0:	3a0b      	subs	r2, #11
 80155c2:	2a01      	cmp	r2, #1
 80155c4:	d92f      	bls.n	8015626 <RadioSetTxConfig+0x162>
 80155c6:	2f01      	cmp	r7, #1
 80155c8:	d02a      	beq.n	8015620 <RadioSetTxConfig+0x15c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80155ca:	4a26      	ldr	r2, [pc, #152]	; (8015664 <RadioSetTxConfig+0x1a0>)
 80155cc:	2100      	movs	r1, #0
 80155ce:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80155d2:	4a24      	ldr	r2, [pc, #144]	; (8015664 <RadioSetTxConfig+0x1a0>)
 80155d4:	2101      	movs	r1, #1
 80155d6:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80155d8:	3b05      	subs	r3, #5
 80155da:	b2db      	uxtb	r3, r3
 80155dc:	428b      	cmp	r3, r1
 80155de:	d927      	bls.n	8015630 <RadioSetTxConfig+0x16c>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80155e0:	4b20      	ldr	r3, [pc, #128]	; (8015664 <RadioSetTxConfig+0x1a0>)
 80155e2:	839e      	strh	r6, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80155e4:	4c1f      	ldr	r4, [pc, #124]	; (8015664 <RadioSetTxConfig+0x1a0>)
 80155e6:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80155ea:	4b21      	ldr	r3, [pc, #132]	; (8015670 <RadioSetTxConfig+0x1ac>)
 80155ec:	781b      	ldrb	r3, [r3, #0]
 80155ee:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80155f0:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80155f4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80155f8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 80155fc:	f7ff f9da 	bl	80149b4 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8015600:	4626      	mov	r6, r4
 8015602:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 8015606:	3800      	subs	r0, #0
 8015608:	bf18      	it	ne
 801560a:	2001      	movne	r0, #1
 801560c:	f7ff fc96 	bl	8014f3c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8015610:	4630      	mov	r0, r6
 8015612:	f000 fcbf 	bl	8015f94 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015616:	f104 000e 	add.w	r0, r4, #14
 801561a:	f000 fe8b 	bl	8016334 <SUBGRF_SetPacketParams>
            break;
 801561e:	e766      	b.n	80154ee <RadioSetTxConfig+0x2a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8015620:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015622:	2a0c      	cmp	r2, #12
 8015624:	d1d1      	bne.n	80155ca <RadioSetTxConfig+0x106>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8015626:	4a0f      	ldr	r2, [pc, #60]	; (8015664 <RadioSetTxConfig+0x1a0>)
 8015628:	2101      	movs	r1, #1
 801562a:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 801562e:	e7d0      	b.n	80155d2 <RadioSetTxConfig+0x10e>
                if( preambleLen < 12 )
 8015630:	2e0b      	cmp	r6, #11
 8015632:	d803      	bhi.n	801563c <RadioSetTxConfig+0x178>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8015634:	4613      	mov	r3, r2
 8015636:	220c      	movs	r2, #12
 8015638:	839a      	strh	r2, [r3, #28]
 801563a:	e7d3      	b.n	80155e4 <RadioSetTxConfig+0x120>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801563c:	4b09      	ldr	r3, [pc, #36]	; (8015664 <RadioSetTxConfig+0x1a0>)
 801563e:	839e      	strh	r6, [r3, #28]
 8015640:	e7d0      	b.n	80155e4 <RadioSetTxConfig+0x120>
            RadioSetModem(MODEM_SIGFOX_TX);
 8015642:	2003      	movs	r0, #3
 8015644:	f7ff fc7a 	bl	8014f3c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8015648:	4806      	ldr	r0, [pc, #24]	; (8015664 <RadioSetTxConfig+0x1a0>)
 801564a:	2302      	movs	r3, #2
 801564c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8015650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015652:	6483      	str	r3, [r0, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8015654:	2316      	movs	r3, #22
 8015656:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801565a:	3038      	adds	r0, #56	; 0x38
 801565c:	f000 fc9a 	bl	8015f94 <SUBGRF_SetModulationParams>
            break;
 8015660:	e745      	b.n	80154ee <RadioSetTxConfig+0x2a>
 8015662:	bf00      	nop
 8015664:	20002500 	.word	0x20002500
 8015668:	0801768c 	.word	0x0801768c
 801566c:	080183fc 	.word	0x080183fc
 8015670:	200000d0 	.word	0x200000d0

08015674 <RadioSetRxConfig>:
{
 8015674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015678:	b087      	sub	sp, #28
 801567a:	4604      	mov	r4, r0
 801567c:	460e      	mov	r6, r1
 801567e:	4615      	mov	r5, r2
 8015680:	9301      	str	r3, [sp, #4]
 8015682:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
 8015686:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 801568a:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801568e:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
 8015692:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
    SubgRf.RxContinuous = rxContinuous;
 8015696:	4baf      	ldr	r3, [pc, #700]	; (8015954 <RadioSetRxConfig+0x2e0>)
 8015698:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801569c:	f001 f835 	bl	801670a <RFW_DeInit>
    if( rxContinuous == true )
 80156a0:	f1b8 0f00 	cmp.w	r8, #0
 80156a4:	d001      	beq.n	80156aa <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 80156a6:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 80156aa:	b16f      	cbz	r7, 80156c8 <RadioSetRxConfig+0x54>
        MaxPayloadLength = payloadLen;
 80156ac:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80156b0:	4ba9      	ldr	r3, [pc, #676]	; (8015958 <RadioSetRxConfig+0x2e4>)
 80156b2:	701a      	strb	r2, [r3, #0]
    switch( modem )
 80156b4:	2c01      	cmp	r4, #1
 80156b6:	f000 80d6 	beq.w	8015866 <RadioSetRxConfig+0x1f2>
 80156ba:	2c04      	cmp	r4, #4
 80156bc:	d008      	beq.n	80156d0 <RadioSetRxConfig+0x5c>
 80156be:	2c00      	cmp	r4, #0
 80156c0:	d07c      	beq.n	80157bc <RadioSetRxConfig+0x148>
}
 80156c2:	b007      	add	sp, #28
 80156c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 80156c8:	4ba3      	ldr	r3, [pc, #652]	; (8015958 <RadioSetRxConfig+0x2e4>)
 80156ca:	22ff      	movs	r2, #255	; 0xff
 80156cc:	701a      	strb	r2, [r3, #0]
 80156ce:	e7f1      	b.n	80156b4 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80156d0:	2001      	movs	r0, #1
 80156d2:	f000 fa93 	bl	8015bfc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80156d6:	4c9f      	ldr	r4, [pc, #636]	; (8015954 <RadioSetRxConfig+0x2e0>)
 80156d8:	2700      	movs	r7, #0
 80156da:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80156de:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80156e0:	2309      	movs	r3, #9
 80156e2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80156e6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80156ea:	6423      	str	r3, [r4, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80156ec:	4630      	mov	r0, r6
 80156ee:	f000 ffa5 	bl	801663c <SUBGRF_GetFskBandwidthRegValue>
 80156f2:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80156f6:	73a7      	strb	r7, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80156f8:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80156fc:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8015700:	74a7      	strb	r7, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8015702:	2310      	movs	r3, #16
 8015704:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8015706:	7527      	strb	r7, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8015708:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801570a:	4b93      	ldr	r3, [pc, #588]	; (8015958 <RadioSetRxConfig+0x2e4>)
 801570c:	781b      	ldrb	r3, [r3, #0]
 801570e:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8015710:	2301      	movs	r3, #1
 8015712:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8015714:	7627      	strb	r7, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8015716:	2004      	movs	r0, #4
 8015718:	f7ff fc10 	bl	8014f3c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801571c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8015720:	f000 fc38 	bl	8015f94 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015724:	f104 000e 	add.w	r0, r4, #14
 8015728:	f000 fe04 	bl	8016334 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801572c:	ab02      	add	r3, sp, #8
 801572e:	4a8b      	ldr	r2, [pc, #556]	; (801595c <RadioSetRxConfig+0x2e8>)
 8015730:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015734:	e883 0003 	stmia.w	r3, {r0, r1}
 8015738:	4618      	mov	r0, r3
 801573a:	f000 fdc9 	bl	80162d0 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801573e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8015742:	f000 fd2b 	bl	801619c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8015746:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801574a:	f7ff f8c9 	bl	80148e0 <RadioRead>
            RadioWrite(0x8b8, modReg);
 801574e:	f000 01ef 	and.w	r1, r0, #239	; 0xef
 8015752:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8015756:	f7ff f8c7 	bl	80148e8 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 801575a:	2104      	movs	r1, #4
 801575c:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8015760:	f7ff f8c2 	bl	80148e8 <RadioWrite>
            modReg= RadioRead(0x89b);
 8015764:	f640 009b 	movw	r0, #2203	; 0x89b
 8015768:	f7ff f8ba 	bl	80148e0 <RadioRead>
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801576c:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8015770:	f041 0108 	orr.w	r1, r1, #8
 8015774:	f640 009b 	movw	r0, #2203	; 0x89b
 8015778:	f7ff f8b6 	bl	80148e8 <RadioWrite>
            modReg= RadioRead(0x6d1);
 801577c:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8015780:	f7ff f8ae 	bl	80148e0 <RadioRead>
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8015784:	f000 01e7 	and.w	r1, r0, #231	; 0xe7
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8015788:	f041 0118 	orr.w	r1, r1, #24
 801578c:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8015790:	f7ff f8aa 	bl	80148e8 <RadioWrite>
            modReg= RadioRead(0x6ac);
 8015794:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8015798:	f7ff f8a2 	bl	80148e0 <RadioRead>
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801579c:	f000 018f 	and.w	r1, r0, #143	; 0x8f
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 80157a0:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 80157a4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80157a8:	f7ff f89e 	bl	80148e8 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80157ac:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80157b0:	fb03 fa0a 	mul.w	sl, r3, sl
 80157b4:	fbba f5f5 	udiv	r5, sl, r5
 80157b8:	60a5      	str	r5, [r4, #8]
            break;
 80157ba:	e782      	b.n	80156c2 <RadioSetRxConfig+0x4e>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80157bc:	2000      	movs	r0, #0
 80157be:	f000 fa1d 	bl	8015bfc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80157c2:	4c64      	ldr	r4, [pc, #400]	; (8015954 <RadioSetRxConfig+0x2e0>)
 80157c4:	f04f 0800 	mov.w	r8, #0
 80157c8:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80157cc:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80157ce:	230b      	movs	r3, #11
 80157d0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80157d4:	4630      	mov	r0, r6
 80157d6:	f000 ff31 	bl	801663c <SUBGRF_GetFskBandwidthRegValue>
 80157da:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80157de:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80157e2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80157e6:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80157ea:	2304      	movs	r3, #4
 80157ec:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80157ee:	2318      	movs	r3, #24
 80157f0:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80157f2:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80157f6:	f087 0701 	eor.w	r7, r7, #1
 80157fa:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80157fc:	4b56      	ldr	r3, [pc, #344]	; (8015958 <RadioSetRxConfig+0x2e4>)
 80157fe:	781b      	ldrb	r3, [r3, #0]
 8015800:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8015802:	f1bb 0f00 	cmp.w	fp, #0
 8015806:	d02a      	beq.n	801585e <RadioSetRxConfig+0x1ea>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8015808:	22f2      	movs	r2, #242	; 0xf2
 801580a:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801580c:	4c51      	ldr	r4, [pc, #324]	; (8015954 <RadioSetRxConfig+0x2e0>)
 801580e:	2301      	movs	r3, #1
 8015810:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8015812:	f7ff f8cf 	bl	80149b4 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8015816:	4626      	mov	r6, r4
 8015818:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 801581c:	3800      	subs	r0, #0
 801581e:	bf18      	it	ne
 8015820:	2001      	movne	r0, #1
 8015822:	f7ff fb8b 	bl	8014f3c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8015826:	4630      	mov	r0, r6
 8015828:	f000 fbb4 	bl	8015f94 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801582c:	f104 000e 	add.w	r0, r4, #14
 8015830:	f000 fd80 	bl	8016334 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8015834:	4a4a      	ldr	r2, [pc, #296]	; (8015960 <RadioSetRxConfig+0x2ec>)
 8015836:	ab04      	add	r3, sp, #16
 8015838:	e892 0003 	ldmia.w	r2, {r0, r1}
 801583c:	e883 0003 	stmia.w	r3, {r0, r1}
 8015840:	4618      	mov	r0, r3
 8015842:	f000 fd45 	bl	80162d0 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8015846:	f240 10ff 	movw	r0, #511	; 0x1ff
 801584a:	f000 fca7 	bl	801619c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801584e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8015852:	fb03 fa0a 	mul.w	sl, r3, sl
 8015856:	fbba f5f5 	udiv	r5, sl, r5
 801585a:	60a5      	str	r5, [r4, #8]
            break;
 801585c:	e731      	b.n	80156c2 <RadioSetRxConfig+0x4e>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801585e:	4b3d      	ldr	r3, [pc, #244]	; (8015954 <RadioSetRxConfig+0x2e0>)
 8015860:	2201      	movs	r2, #1
 8015862:	75da      	strb	r2, [r3, #23]
 8015864:	e7d2      	b.n	801580c <RadioSetRxConfig+0x198>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8015866:	2000      	movs	r0, #0
 8015868:	f000 f9c8 	bl	8015bfc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801586c:	4a39      	ldr	r2, [pc, #228]	; (8015954 <RadioSetRxConfig+0x2e0>)
 801586e:	2301      	movs	r3, #1
 8015870:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8015874:	b2eb      	uxtb	r3, r5
 8015876:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801587a:	493a      	ldr	r1, [pc, #232]	; (8015964 <RadioSetRxConfig+0x2f0>)
 801587c:	5d89      	ldrb	r1, [r1, r6]
 801587e:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8015882:	9901      	ldr	r1, [sp, #4]
 8015884:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8015888:	b91e      	cbnz	r6, 8015892 <RadioSetRxConfig+0x21e>
 801588a:	f1a5 020b 	sub.w	r2, r5, #11
 801588e:	2a01      	cmp	r2, #1
 8015890:	d945      	bls.n	801591e <RadioSetRxConfig+0x2aa>
 8015892:	2e01      	cmp	r6, #1
 8015894:	d041      	beq.n	801591a <RadioSetRxConfig+0x2a6>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8015896:	4a2f      	ldr	r2, [pc, #188]	; (8015954 <RadioSetRxConfig+0x2e0>)
 8015898:	2100      	movs	r1, #0
 801589a:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801589e:	4a2d      	ldr	r2, [pc, #180]	; (8015954 <RadioSetRxConfig+0x2e0>)
 80158a0:	2101      	movs	r1, #1
 80158a2:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80158a4:	3b05      	subs	r3, #5
 80158a6:	b2db      	uxtb	r3, r3
 80158a8:	428b      	cmp	r3, r1
 80158aa:	d93d      	bls.n	8015928 <RadioSetRxConfig+0x2b4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80158ac:	4b29      	ldr	r3, [pc, #164]	; (8015954 <RadioSetRxConfig+0x2e0>)
 80158ae:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80158b2:	4c28      	ldr	r4, [pc, #160]	; (8015954 <RadioSetRxConfig+0x2e0>)
 80158b4:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80158b6:	4b28      	ldr	r3, [pc, #160]	; (8015958 <RadioSetRxConfig+0x2e4>)
 80158b8:	781b      	ldrb	r3, [r3, #0]
 80158ba:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80158bc:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80158c0:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80158c4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 80158c8:	f7ff f874 	bl	80149b4 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80158cc:	4625      	mov	r5, r4
 80158ce:	f815 0f38 	ldrb.w	r0, [r5, #56]!
 80158d2:	3800      	subs	r0, #0
 80158d4:	bf18      	it	ne
 80158d6:	2001      	movne	r0, #1
 80158d8:	f7ff fb30 	bl	8014f3c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80158dc:	4628      	mov	r0, r5
 80158de:	f000 fb59 	bl	8015f94 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80158e2:	f104 000e 	add.w	r0, r4, #14
 80158e6:	f000 fd25 	bl	8016334 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80158ea:	fa5f f08a 	uxtb.w	r0, sl
 80158ee:	f000 fb17 	bl	8015f20 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80158f2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80158f6:	2b01      	cmp	r3, #1
 80158f8:	d021      	beq.n	801593e <RadioSetRxConfig+0x2ca>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80158fa:	f240 7036 	movw	r0, #1846	; 0x736
 80158fe:	f000 fbd1 	bl	80160a4 <SUBGRF_ReadRegister>
 8015902:	f040 0104 	orr.w	r1, r0, #4
 8015906:	b2c9      	uxtb	r1, r1
 8015908:	f240 7036 	movw	r0, #1846	; 0x736
 801590c:	f000 fada 	bl	8015ec4 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8015910:	4b10      	ldr	r3, [pc, #64]	; (8015954 <RadioSetRxConfig+0x2e0>)
 8015912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015916:	609a      	str	r2, [r3, #8]
}
 8015918:	e6d3      	b.n	80156c2 <RadioSetRxConfig+0x4e>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801591a:	2d0c      	cmp	r5, #12
 801591c:	d1bb      	bne.n	8015896 <RadioSetRxConfig+0x222>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801591e:	4a0d      	ldr	r2, [pc, #52]	; (8015954 <RadioSetRxConfig+0x2e0>)
 8015920:	2101      	movs	r1, #1
 8015922:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8015926:	e7ba      	b.n	801589e <RadioSetRxConfig+0x22a>
                if( preambleLen < 12 )
 8015928:	f1b9 0f0b 	cmp.w	r9, #11
 801592c:	d803      	bhi.n	8015936 <RadioSetRxConfig+0x2c2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801592e:	4613      	mov	r3, r2
 8015930:	220c      	movs	r2, #12
 8015932:	839a      	strh	r2, [r3, #28]
 8015934:	e7bd      	b.n	80158b2 <RadioSetRxConfig+0x23e>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8015936:	4b07      	ldr	r3, [pc, #28]	; (8015954 <RadioSetRxConfig+0x2e0>)
 8015938:	f8a3 901c 	strh.w	r9, [r3, #28]
 801593c:	e7b9      	b.n	80158b2 <RadioSetRxConfig+0x23e>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 801593e:	f240 7036 	movw	r0, #1846	; 0x736
 8015942:	f000 fbaf 	bl	80160a4 <SUBGRF_ReadRegister>
 8015946:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 801594a:	f240 7036 	movw	r0, #1846	; 0x736
 801594e:	f000 fab9 	bl	8015ec4 <SUBGRF_WriteRegister>
 8015952:	e7dd      	b.n	8015910 <RadioSetRxConfig+0x29c>
 8015954:	20002500 	.word	0x20002500
 8015958:	200000d0 	.word	0x200000d0
 801595c:	08017694 	.word	0x08017694
 8015960:	0801768c 	.word	0x0801768c
 8015964:	080183fc 	.word	0x080183fc

08015968 <RadioRandom>:
{
 8015968:	b508      	push	{r3, lr}
    RadioSetModem( MODEM_LORA );
 801596a:	2001      	movs	r0, #1
 801596c:	f7ff fae6 	bl	8014f3c <RadioSetModem>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8015970:	2300      	movs	r3, #0
 8015972:	461a      	mov	r2, r3
 8015974:	4619      	mov	r1, r3
 8015976:	4618      	mov	r0, r3
 8015978:	f000 f9e3 	bl	8015d42 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 801597c:	f000 fd5c 	bl	8016438 <SUBGRF_GetRandom>
}
 8015980:	bd08      	pop	{r3, pc}

08015982 <RadioIsChannelFree>:
{
 8015982:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015984:	b08b      	sub	sp, #44	; 0x2c
 8015986:	4604      	mov	r4, r0
 8015988:	460f      	mov	r7, r1
 801598a:	4616      	mov	r6, r2
 801598c:	461d      	mov	r5, r3
    RadioStandby( );
 801598e:	f7ff f811 	bl	80149b4 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8015992:	2000      	movs	r0, #0
 8015994:	f7ff fad2 	bl	8014f3c <RadioSetModem>
    RadioSetChannel( freq );
 8015998:	4620      	mov	r0, r4
 801599a:	f7ff f9b3 	bl	8014d04 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801599e:	2301      	movs	r3, #1
 80159a0:	9309      	str	r3, [sp, #36]	; 0x24
 80159a2:	2400      	movs	r4, #0
 80159a4:	9408      	str	r4, [sp, #32]
 80159a6:	9407      	str	r4, [sp, #28]
 80159a8:	9406      	str	r4, [sp, #24]
 80159aa:	9405      	str	r4, [sp, #20]
 80159ac:	9404      	str	r4, [sp, #16]
 80159ae:	9403      	str	r4, [sp, #12]
 80159b0:	9402      	str	r4, [sp, #8]
 80159b2:	2303      	movs	r3, #3
 80159b4:	9301      	str	r3, [sp, #4]
 80159b6:	9700      	str	r7, [sp, #0]
 80159b8:	4623      	mov	r3, r4
 80159ba:	f44f 7216 	mov.w	r2, #600	; 0x258
 80159be:	4639      	mov	r1, r7
 80159c0:	4620      	mov	r0, r4
 80159c2:	f7ff fe57 	bl	8015674 <RadioSetRxConfig>
    RadioRx( 0 );
 80159c6:	4620      	mov	r0, r4
 80159c8:	f7ff f9b4 	bl	8014d34 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80159cc:	f7ff f96c 	bl	8014ca8 <RadioGetWakeupTime>
 80159d0:	f7ec fd90 	bl	80024f4 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 80159d4:	f001 fa74 	bl	8016ec0 <UTIL_TIMER_GetCurrentTime>
 80159d8:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80159da:	4620      	mov	r0, r4
 80159dc:	f001 fa7a 	bl	8016ed4 <UTIL_TIMER_GetElapsedTime>
 80159e0:	42a8      	cmp	r0, r5
 80159e2:	d206      	bcs.n	80159f2 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 80159e4:	2000      	movs	r0, #0
 80159e6:	f7ff f96c 	bl	8014cc2 <RadioRssi>
        if( rssi > rssiThresh )
 80159ea:	42b0      	cmp	r0, r6
 80159ec:	ddf5      	ble.n	80159da <RadioIsChannelFree+0x58>
            status = false;
 80159ee:	2400      	movs	r4, #0
 80159f0:	e000      	b.n	80159f4 <RadioIsChannelFree+0x72>
    bool status = true;
 80159f2:	2401      	movs	r4, #1
    RadioStandby( );
 80159f4:	f7fe ffde 	bl	80149b4 <RadioStandby>
}
 80159f8:	4620      	mov	r0, r4
 80159fa:	b00b      	add	sp, #44	; 0x2c
 80159fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08015a00 <RadioInit>:
{
 8015a00:	b570      	push	{r4, r5, r6, lr}
 8015a02:	b082      	sub	sp, #8
    RadioEvents = events;
 8015a04:	4b1d      	ldr	r3, [pc, #116]	; (8015a7c <RadioInit+0x7c>)
 8015a06:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8015a08:	4b1d      	ldr	r3, [pc, #116]	; (8015a80 <RadioInit+0x80>)
 8015a0a:	2400      	movs	r4, #0
 8015a0c:	705c      	strb	r4, [r3, #1]
    SubgRf.TxTimeout = 0;
 8015a0e:	605c      	str	r4, [r3, #4]
    SubgRf.RxTimeout = 0;
 8015a10:	609c      	str	r4, [r3, #8]
    SUBGRF_Init( RadioOnDioIrq );
 8015a12:	481c      	ldr	r0, [pc, #112]	; (8015a84 <RadioInit+0x84>)
 8015a14:	f000 fb6a 	bl	80160ec <SUBGRF_Init>
    RadioSetPublicNetwork( false );
 8015a18:	4620      	mov	r0, r4
 8015a1a:	f7ff fd31 	bl	8015480 <RadioSetPublicNetwork>
    SUBGRF_SetRegulatorMode(  );
 8015a1e:	f000 f8fa 	bl	8015c16 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8015a22:	4621      	mov	r1, r4
 8015a24:	4620      	mov	r0, r4
 8015a26:	f000 f9f5 	bl	8015e14 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8015a2a:	2204      	movs	r2, #4
 8015a2c:	4621      	mov	r1, r4
 8015a2e:	2001      	movs	r0, #1
 8015a30:	f000 fbcd 	bl	80161ce <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8015a34:	4623      	mov	r3, r4
 8015a36:	4622      	mov	r2, r4
 8015a38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015a3c:	4608      	mov	r0, r1
 8015a3e:	f000 f980 	bl	8015d42 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 8015a42:	f7ff f9a9 	bl	8014d98 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8015a46:	4e10      	ldr	r6, [pc, #64]	; (8015a88 <RadioInit+0x88>)
 8015a48:	9400      	str	r4, [sp, #0]
 8015a4a:	4b10      	ldr	r3, [pc, #64]	; (8015a8c <RadioInit+0x8c>)
 8015a4c:	4622      	mov	r2, r4
 8015a4e:	f04f 31ff 	mov.w	r1, #4294967295
 8015a52:	4630      	mov	r0, r6
 8015a54:	f001 fa16 	bl	8016e84 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8015a58:	4d0d      	ldr	r5, [pc, #52]	; (8015a90 <RadioInit+0x90>)
 8015a5a:	9400      	str	r4, [sp, #0]
 8015a5c:	4b0d      	ldr	r3, [pc, #52]	; (8015a94 <RadioInit+0x94>)
 8015a5e:	4622      	mov	r2, r4
 8015a60:	f04f 31ff 	mov.w	r1, #4294967295
 8015a64:	4628      	mov	r0, r5
 8015a66:	f001 fa0d 	bl	8016e84 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8015a6a:	4630      	mov	r0, r6
 8015a6c:	f001 fa68 	bl	8016f40 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8015a70:	4628      	mov	r0, r5
 8015a72:	f001 fa65 	bl	8016f40 <UTIL_TIMER_Stop>
}
 8015a76:	b002      	add	sp, #8
 8015a78:	bd70      	pop	{r4, r5, r6, pc}
 8015a7a:	bf00      	nop
 8015a7c:	20001574 	.word	0x20001574
 8015a80:	20002500 	.word	0x20002500
 8015a84:	08014c95 	.word	0x08014c95
 8015a88:	20002558 	.word	0x20002558
 8015a8c:	080147d9 	.word	0x080147d9
 8015a90:	20002570 	.word	0x20002570
 8015a94:	080147f5 	.word	0x080147f5

08015a98 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8015a98:	b510      	push	{r4, lr}
 8015a9a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015a9c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015aa0:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8015aa2:	460a      	mov	r2, r1
 8015aa4:	4601      	mov	r1, r0
 8015aa6:	4803      	ldr	r0, [pc, #12]	; (8015ab4 <SUBGRF_WriteCommand+0x1c>)
 8015aa8:	f7ef fe56 	bl	8005758 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015aac:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 8015ab0:	bd10      	pop	{r4, pc}
 8015ab2:	bf00      	nop
 8015ab4:	200024e0 	.word	0x200024e0

08015ab8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8015ab8:	b510      	push	{r4, lr}
 8015aba:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015abc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015ac0:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8015ac2:	460a      	mov	r2, r1
 8015ac4:	4601      	mov	r1, r0
 8015ac6:	4803      	ldr	r0, [pc, #12]	; (8015ad4 <SUBGRF_ReadCommand+0x1c>)
 8015ac8:	f7ef fe9c 	bl	8005804 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015acc:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 8015ad0:	bd10      	pop	{r4, pc}
 8015ad2:	bf00      	nop
 8015ad4:	200024e0 	.word	0x200024e0

08015ad8 <SUBGRF_GetOperatingMode>:
}
 8015ad8:	4b01      	ldr	r3, [pc, #4]	; (8015ae0 <SUBGRF_GetOperatingMode+0x8>)
 8015ada:	7818      	ldrb	r0, [r3, #0]
 8015adc:	4770      	bx	lr
 8015ade:	bf00      	nop
 8015ae0:	2000157e 	.word	0x2000157e

08015ae4 <SUBGRF_SetStandby>:
{
 8015ae4:	b500      	push	{lr}
 8015ae6:	b083      	sub	sp, #12
 8015ae8:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8015aec:	2201      	movs	r2, #1
 8015aee:	f10d 0107 	add.w	r1, sp, #7
 8015af2:	2080      	movs	r0, #128	; 0x80
 8015af4:	f7ff ffd0 	bl	8015a98 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8015af8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015afc:	b92b      	cbnz	r3, 8015b0a <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 8015afe:	4b05      	ldr	r3, [pc, #20]	; (8015b14 <SUBGRF_SetStandby+0x30>)
 8015b00:	2201      	movs	r2, #1
 8015b02:	701a      	strb	r2, [r3, #0]
}
 8015b04:	b003      	add	sp, #12
 8015b06:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 8015b0a:	4b02      	ldr	r3, [pc, #8]	; (8015b14 <SUBGRF_SetStandby+0x30>)
 8015b0c:	2202      	movs	r2, #2
 8015b0e:	701a      	strb	r2, [r3, #0]
}
 8015b10:	e7f8      	b.n	8015b04 <SUBGRF_SetStandby+0x20>
 8015b12:	bf00      	nop
 8015b14:	2000157e 	.word	0x2000157e

08015b18 <SUBGRF_SetTx>:
{
 8015b18:	b500      	push	{lr}
 8015b1a:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8015b1c:	4b0a      	ldr	r3, [pc, #40]	; (8015b48 <SUBGRF_SetTx+0x30>)
 8015b1e:	2204      	movs	r2, #4
 8015b20:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8015b22:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8015b26:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8015b2a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8015b2e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8015b32:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8015b36:	2203      	movs	r2, #3
 8015b38:	a901      	add	r1, sp, #4
 8015b3a:	2083      	movs	r0, #131	; 0x83
 8015b3c:	f7ff ffac 	bl	8015a98 <SUBGRF_WriteCommand>
}
 8015b40:	b003      	add	sp, #12
 8015b42:	f85d fb04 	ldr.w	pc, [sp], #4
 8015b46:	bf00      	nop
 8015b48:	2000157e 	.word	0x2000157e

08015b4c <SUBGRF_SetRx>:
{
 8015b4c:	b500      	push	{lr}
 8015b4e:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8015b50:	4b0a      	ldr	r3, [pc, #40]	; (8015b7c <SUBGRF_SetRx+0x30>)
 8015b52:	2205      	movs	r2, #5
 8015b54:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8015b56:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8015b5a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8015b5e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8015b62:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8015b66:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8015b6a:	2203      	movs	r2, #3
 8015b6c:	a901      	add	r1, sp, #4
 8015b6e:	2082      	movs	r0, #130	; 0x82
 8015b70:	f7ff ff92 	bl	8015a98 <SUBGRF_WriteCommand>
}
 8015b74:	b003      	add	sp, #12
 8015b76:	f85d fb04 	ldr.w	pc, [sp], #4
 8015b7a:	bf00      	nop
 8015b7c:	2000157e 	.word	0x2000157e

08015b80 <SUBGRF_SetRxDutyCycle>:
{
 8015b80:	b500      	push	{lr}
 8015b82:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8015b84:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8015b88:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8015b8c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8015b90:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8015b94:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8015b98:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8015b9c:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8015ba0:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8015ba4:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8015ba8:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8015bac:	2206      	movs	r2, #6
 8015bae:	4669      	mov	r1, sp
 8015bb0:	2094      	movs	r0, #148	; 0x94
 8015bb2:	f7ff ff71 	bl	8015a98 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8015bb6:	4b03      	ldr	r3, [pc, #12]	; (8015bc4 <SUBGRF_SetRxDutyCycle+0x44>)
 8015bb8:	2206      	movs	r2, #6
 8015bba:	701a      	strb	r2, [r3, #0]
}
 8015bbc:	b003      	add	sp, #12
 8015bbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8015bc2:	bf00      	nop
 8015bc4:	2000157e 	.word	0x2000157e

08015bc8 <SUBGRF_SetCad>:
{
 8015bc8:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8015bca:	2200      	movs	r2, #0
 8015bcc:	4611      	mov	r1, r2
 8015bce:	20c5      	movs	r0, #197	; 0xc5
 8015bd0:	f7ff ff62 	bl	8015a98 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8015bd4:	4b01      	ldr	r3, [pc, #4]	; (8015bdc <SUBGRF_SetCad+0x14>)
 8015bd6:	2207      	movs	r2, #7
 8015bd8:	701a      	strb	r2, [r3, #0]
}
 8015bda:	bd08      	pop	{r3, pc}
 8015bdc:	2000157e 	.word	0x2000157e

08015be0 <SUBGRF_SetTxContinuousWave>:
{
 8015be0:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8015be2:	2200      	movs	r2, #0
 8015be4:	4611      	mov	r1, r2
 8015be6:	20d1      	movs	r0, #209	; 0xd1
 8015be8:	f7ff ff56 	bl	8015a98 <SUBGRF_WriteCommand>
}
 8015bec:	bd08      	pop	{r3, pc}

08015bee <SUBGRF_SetTxInfinitePreamble>:
{
 8015bee:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8015bf0:	2200      	movs	r2, #0
 8015bf2:	4611      	mov	r1, r2
 8015bf4:	20d2      	movs	r0, #210	; 0xd2
 8015bf6:	f7ff ff4f 	bl	8015a98 <SUBGRF_WriteCommand>
}
 8015bfa:	bd08      	pop	{r3, pc}

08015bfc <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8015bfc:	b500      	push	{lr}
 8015bfe:	b083      	sub	sp, #12
 8015c00:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8015c04:	2201      	movs	r2, #1
 8015c06:	f10d 0107 	add.w	r1, sp, #7
 8015c0a:	209f      	movs	r0, #159	; 0x9f
 8015c0c:	f7ff ff44 	bl	8015a98 <SUBGRF_WriteCommand>
}
 8015c10:	b003      	add	sp, #12
 8015c12:	f85d fb04 	ldr.w	pc, [sp], #4

08015c16 <SUBGRF_SetRegulatorMode>:
{
 8015c16:	b500      	push	{lr}
 8015c18:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8015c1a:	f7ec f90b 	bl	8001e34 <RBI_IsDCDC>
 8015c1e:	2801      	cmp	r0, #1
 8015c20:	d00b      	beq.n	8015c3a <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8015c22:	2300      	movs	r3, #0
 8015c24:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8015c28:	2201      	movs	r2, #1
 8015c2a:	f10d 0107 	add.w	r1, sp, #7
 8015c2e:	2096      	movs	r0, #150	; 0x96
 8015c30:	f7ff ff32 	bl	8015a98 <SUBGRF_WriteCommand>
}
 8015c34:	b003      	add	sp, #12
 8015c36:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8015c3a:	2301      	movs	r3, #1
 8015c3c:	f88d 3007 	strb.w	r3, [sp, #7]
 8015c40:	e7f2      	b.n	8015c28 <SUBGRF_SetRegulatorMode+0x12>

08015c42 <SUBGRF_Calibrate>:
{
 8015c42:	b500      	push	{lr}
 8015c44:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8015c46:	f3c0 1280 	ubfx	r2, r0, #6, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8015c4a:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8015c4e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8015c50:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8015c54:	f3c0 1200 	ubfx	r2, r0, #4, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8015c58:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8015c5c:	f3c0 02c0 	ubfx	r2, r0, #3, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8015c60:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8015c64:	f3c0 0280 	ubfx	r2, r0, #2, #1
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8015c68:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8015c6c:	f3c0 0240 	ubfx	r2, r0, #1, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8015c70:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8015c74:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8015c78:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8015c7a:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8015c7e:	2201      	movs	r2, #1
 8015c80:	f10d 0107 	add.w	r1, sp, #7
 8015c84:	2089      	movs	r0, #137	; 0x89
 8015c86:	f7ff ff07 	bl	8015a98 <SUBGRF_WriteCommand>
}
 8015c8a:	b003      	add	sp, #12
 8015c8c:	f85d fb04 	ldr.w	pc, [sp], #4

08015c90 <SUBGRF_CalibrateImage>:
{
 8015c90:	b500      	push	{lr}
 8015c92:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8015c94:	4b1c      	ldr	r3, [pc, #112]	; (8015d08 <SUBGRF_CalibrateImage+0x78>)
 8015c96:	4298      	cmp	r0, r3
 8015c98:	d90d      	bls.n	8015cb6 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 8015c9a:	23e1      	movs	r3, #225	; 0xe1
 8015c9c:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8015ca0:	23e9      	movs	r3, #233	; 0xe9
 8015ca2:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8015ca6:	2202      	movs	r2, #2
 8015ca8:	a901      	add	r1, sp, #4
 8015caa:	2098      	movs	r0, #152	; 0x98
 8015cac:	f7ff fef4 	bl	8015a98 <SUBGRF_WriteCommand>
}
 8015cb0:	b003      	add	sp, #12
 8015cb2:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 8015cb6:	4b15      	ldr	r3, [pc, #84]	; (8015d0c <SUBGRF_CalibrateImage+0x7c>)
 8015cb8:	4298      	cmp	r0, r3
 8015cba:	d906      	bls.n	8015cca <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8015cbc:	23d7      	movs	r3, #215	; 0xd7
 8015cbe:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8015cc2:	23db      	movs	r3, #219	; 0xdb
 8015cc4:	f88d 3005 	strb.w	r3, [sp, #5]
 8015cc8:	e7ed      	b.n	8015ca6 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 8015cca:	4b11      	ldr	r3, [pc, #68]	; (8015d10 <SUBGRF_CalibrateImage+0x80>)
 8015ccc:	4298      	cmp	r0, r3
 8015cce:	d906      	bls.n	8015cde <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8015cd0:	23c1      	movs	r3, #193	; 0xc1
 8015cd2:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 8015cd6:	23c5      	movs	r3, #197	; 0xc5
 8015cd8:	f88d 3005 	strb.w	r3, [sp, #5]
 8015cdc:	e7e3      	b.n	8015ca6 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 8015cde:	4b0d      	ldr	r3, [pc, #52]	; (8015d14 <SUBGRF_CalibrateImage+0x84>)
 8015ce0:	4298      	cmp	r0, r3
 8015ce2:	d906      	bls.n	8015cf2 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8015ce4:	2375      	movs	r3, #117	; 0x75
 8015ce6:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 8015cea:	2381      	movs	r3, #129	; 0x81
 8015cec:	f88d 3005 	strb.w	r3, [sp, #5]
 8015cf0:	e7d9      	b.n	8015ca6 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 8015cf2:	4b09      	ldr	r3, [pc, #36]	; (8015d18 <SUBGRF_CalibrateImage+0x88>)
 8015cf4:	4298      	cmp	r0, r3
 8015cf6:	d9d6      	bls.n	8015ca6 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 8015cf8:	236b      	movs	r3, #107	; 0x6b
 8015cfa:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8015cfe:	236f      	movs	r3, #111	; 0x6f
 8015d00:	f88d 3005 	strb.w	r3, [sp, #5]
 8015d04:	e7cf      	b.n	8015ca6 <SUBGRF_CalibrateImage+0x16>
 8015d06:	bf00      	nop
 8015d08:	35a4e900 	.word	0x35a4e900
 8015d0c:	32a9f880 	.word	0x32a9f880
 8015d10:	2de54480 	.word	0x2de54480
 8015d14:	1b6b0b00 	.word	0x1b6b0b00
 8015d18:	1954fc40 	.word	0x1954fc40

08015d1c <SUBGRF_SetPaConfig>:
{
 8015d1c:	b500      	push	{lr}
 8015d1e:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8015d20:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8015d24:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8015d28:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8015d2c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8015d30:	2204      	movs	r2, #4
 8015d32:	eb0d 0102 	add.w	r1, sp, r2
 8015d36:	2095      	movs	r0, #149	; 0x95
 8015d38:	f7ff feae 	bl	8015a98 <SUBGRF_WriteCommand>
}
 8015d3c:	b003      	add	sp, #12
 8015d3e:	f85d fb04 	ldr.w	pc, [sp], #4

08015d42 <SUBGRF_SetDioIrqParams>:
{
 8015d42:	b510      	push	{r4, lr}
 8015d44:	b082      	sub	sp, #8
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8015d46:	0a04      	lsrs	r4, r0, #8
 8015d48:	f88d 4000 	strb.w	r4, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8015d4c:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8015d50:	0a08      	lsrs	r0, r1, #8
 8015d52:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8015d56:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8015d5a:	0a11      	lsrs	r1, r2, #8
 8015d5c:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8015d60:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8015d64:	0a1a      	lsrs	r2, r3, #8
 8015d66:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8015d6a:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8015d6e:	2208      	movs	r2, #8
 8015d70:	4669      	mov	r1, sp
 8015d72:	4610      	mov	r0, r2
 8015d74:	f7ff fe90 	bl	8015a98 <SUBGRF_WriteCommand>
}
 8015d78:	b002      	add	sp, #8
 8015d7a:	bd10      	pop	{r4, pc}

08015d7c <SUBGRF_SetTcxoMode>:
{
 8015d7c:	b500      	push	{lr}
 8015d7e:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8015d80:	f000 0007 	and.w	r0, r0, #7
 8015d84:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8015d88:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8015d8c:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8015d90:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8015d94:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8015d98:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8015d9c:	2204      	movs	r2, #4
 8015d9e:	eb0d 0102 	add.w	r1, sp, r2
 8015da2:	2097      	movs	r0, #151	; 0x97
 8015da4:	f7ff fe78 	bl	8015a98 <SUBGRF_WriteCommand>
}
 8015da8:	b003      	add	sp, #12
 8015daa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015db0 <SUBGRF_SetRfFrequency>:
{
 8015db0:	b510      	push	{r4, lr}
 8015db2:	b082      	sub	sp, #8
 8015db4:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8015db6:	4b12      	ldr	r3, [pc, #72]	; (8015e00 <SUBGRF_SetRfFrequency+0x50>)
 8015db8:	781b      	ldrb	r3, [r3, #0]
 8015dba:	b1d3      	cbz	r3, 8015df2 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8015dbc:	4a11      	ldr	r2, [pc, #68]	; (8015e04 <SUBGRF_SetRfFrequency+0x54>)
 8015dbe:	2300      	movs	r3, #0
 8015dc0:	0660      	lsls	r0, r4, #25
 8015dc2:	09e1      	lsrs	r1, r4, #7
 8015dc4:	f7ea feca 	bl	8000b5c <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8015dc8:	0e03      	lsrs	r3, r0, #24
 8015dca:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8015dce:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8015dd2:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8015dd6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8015dda:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8015dde:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8015de2:	2204      	movs	r2, #4
 8015de4:	eb0d 0102 	add.w	r1, sp, r2
 8015de8:	2086      	movs	r0, #134	; 0x86
 8015dea:	f7ff fe55 	bl	8015a98 <SUBGRF_WriteCommand>
}
 8015dee:	b002      	add	sp, #8
 8015df0:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8015df2:	f7ff ff4d 	bl	8015c90 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8015df6:	4b02      	ldr	r3, [pc, #8]	; (8015e00 <SUBGRF_SetRfFrequency+0x50>)
 8015df8:	2201      	movs	r2, #1
 8015dfa:	701a      	strb	r2, [r3, #0]
 8015dfc:	e7de      	b.n	8015dbc <SUBGRF_SetRfFrequency+0xc>
 8015dfe:	bf00      	nop
 8015e00:	2000157c 	.word	0x2000157c
 8015e04:	01e84800 	.word	0x01e84800

08015e08 <SUBGRF_GetPacketType>:
}
 8015e08:	4b01      	ldr	r3, [pc, #4]	; (8015e10 <SUBGRF_GetPacketType+0x8>)
 8015e0a:	7818      	ldrb	r0, [r3, #0]
 8015e0c:	4770      	bx	lr
 8015e0e:	bf00      	nop
 8015e10:	2000157f 	.word	0x2000157f

08015e14 <SUBGRF_SetBufferBaseAddress>:
{
 8015e14:	b500      	push	{lr}
 8015e16:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8015e18:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8015e1c:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8015e20:	2202      	movs	r2, #2
 8015e22:	a901      	add	r1, sp, #4
 8015e24:	208f      	movs	r0, #143	; 0x8f
 8015e26:	f7ff fe37 	bl	8015a98 <SUBGRF_WriteCommand>
}
 8015e2a:	b003      	add	sp, #12
 8015e2c:	f85d fb04 	ldr.w	pc, [sp], #4

08015e30 <SUBGRF_GetRssiInst>:
{
 8015e30:	b500      	push	{lr}
 8015e32:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8015e34:	2201      	movs	r2, #1
 8015e36:	a901      	add	r1, sp, #4
 8015e38:	2015      	movs	r0, #21
 8015e3a:	f7ff fe3d 	bl	8015ab8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8015e3e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8015e42:	4240      	negs	r0, r0
}
 8015e44:	1040      	asrs	r0, r0, #1
 8015e46:	b003      	add	sp, #12
 8015e48:	f85d fb04 	ldr.w	pc, [sp], #4

08015e4c <SUBGRF_GetPacketStatus>:
{
 8015e4c:	b510      	push	{r4, lr}
 8015e4e:	b082      	sub	sp, #8
 8015e50:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8015e52:	2203      	movs	r2, #3
 8015e54:	a901      	add	r1, sp, #4
 8015e56:	2014      	movs	r0, #20
 8015e58:	f7ff fe2e 	bl	8015ab8 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8015e5c:	f7ff ffd4 	bl	8015e08 <SUBGRF_GetPacketType>
 8015e60:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8015e62:	b148      	cbz	r0, 8015e78 <SUBGRF_GetPacketStatus+0x2c>
 8015e64:	2801      	cmp	r0, #1
 8015e66:	d018      	beq.n	8015e9a <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8015e68:	2214      	movs	r2, #20
 8015e6a:	2100      	movs	r1, #0
 8015e6c:	4620      	mov	r0, r4
 8015e6e:	f000 fe4b 	bl	8016b08 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8015e72:	230f      	movs	r3, #15
 8015e74:	7023      	strb	r3, [r4, #0]
}
 8015e76:	e00e      	b.n	8015e96 <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8015e78:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8015e7c:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8015e7e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8015e82:	425b      	negs	r3, r3
 8015e84:	105b      	asrs	r3, r3, #1
 8015e86:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8015e88:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8015e8c:	425b      	negs	r3, r3
 8015e8e:	105b      	asrs	r3, r3, #1
 8015e90:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8015e92:	2300      	movs	r3, #0
 8015e94:	60a3      	str	r3, [r4, #8]
}
 8015e96:	b002      	add	sp, #8
 8015e98:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8015e9a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8015e9e:	425b      	negs	r3, r3
 8015ea0:	105b      	asrs	r3, r3, #1
 8015ea2:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8015ea4:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8015ea8:	3302      	adds	r3, #2
 8015eaa:	109b      	asrs	r3, r3, #2
 8015eac:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8015eae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8015eb2:	425b      	negs	r3, r3
 8015eb4:	105b      	asrs	r3, r3, #1
 8015eb6:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8015eb8:	4b01      	ldr	r3, [pc, #4]	; (8015ec0 <SUBGRF_GetPacketStatus+0x74>)
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	6123      	str	r3, [r4, #16]
            break;
 8015ebe:	e7ea      	b.n	8015e96 <SUBGRF_GetPacketStatus+0x4a>
 8015ec0:	20001578 	.word	0x20001578

08015ec4 <SUBGRF_WriteRegister>:
{
 8015ec4:	b500      	push	{lr}
 8015ec6:	b083      	sub	sp, #12
 8015ec8:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8015ecc:	2301      	movs	r3, #1
 8015ece:	f10d 0207 	add.w	r2, sp, #7
 8015ed2:	4601      	mov	r1, r0
 8015ed4:	4802      	ldr	r0, [pc, #8]	; (8015ee0 <SUBGRF_WriteRegister+0x1c>)
 8015ed6:	f7ef fb9b 	bl	8005610 <HAL_SUBGHZ_WriteRegisters>
}
 8015eda:	b003      	add	sp, #12
 8015edc:	f85d fb04 	ldr.w	pc, [sp], #4
 8015ee0:	200024e0 	.word	0x200024e0

08015ee4 <SUBGRF_SetRxBoosted>:
{
 8015ee4:	b510      	push	{r4, lr}
 8015ee6:	b082      	sub	sp, #8
 8015ee8:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8015eea:	4b0c      	ldr	r3, [pc, #48]	; (8015f1c <SUBGRF_SetRxBoosted+0x38>)
 8015eec:	2205      	movs	r2, #5
 8015eee:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8015ef0:	2197      	movs	r1, #151	; 0x97
 8015ef2:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8015ef6:	f7ff ffe5 	bl	8015ec4 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8015efa:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8015efe:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8015f02:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8015f06:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8015f0a:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8015f0e:	2203      	movs	r2, #3
 8015f10:	a901      	add	r1, sp, #4
 8015f12:	2082      	movs	r0, #130	; 0x82
 8015f14:	f7ff fdc0 	bl	8015a98 <SUBGRF_WriteCommand>
}
 8015f18:	b002      	add	sp, #8
 8015f1a:	bd10      	pop	{r4, pc}
 8015f1c:	2000157e 	.word	0x2000157e

08015f20 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8015f20:	b500      	push	{lr}
 8015f22:	b083      	sub	sp, #12
 8015f24:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8015f28:	2201      	movs	r2, #1
 8015f2a:	f10d 0107 	add.w	r1, sp, #7
 8015f2e:	20a0      	movs	r0, #160	; 0xa0
 8015f30:	f7ff fdb2 	bl	8015a98 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8015f34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015f38:	2b3f      	cmp	r3, #63	; 0x3f
 8015f3a:	d90f      	bls.n	8015f5c <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8015f3c:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8015f3e:	2200      	movs	r2, #0
        while( mant > 31 )
 8015f40:	2b1f      	cmp	r3, #31
 8015f42:	d903      	bls.n	8015f4c <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
            mant >>= 2;
 8015f44:	089b      	lsrs	r3, r3, #2
            exp++;
 8015f46:	1c51      	adds	r1, r2, #1
 8015f48:	b2ca      	uxtb	r2, r1
 8015f4a:	e7f9      	b.n	8015f40 <SUBGRF_SetLoRaSymbNumTimeout+0x20>
        reg = exp + ( mant << 3 );
 8015f4c:	00d9      	lsls	r1, r3, #3
 8015f4e:	b2c9      	uxtb	r1, r1
 8015f50:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8015f52:	b2c9      	uxtb	r1, r1
 8015f54:	f240 7006 	movw	r0, #1798	; 0x706
 8015f58:	f7ff ffb4 	bl	8015ec4 <SUBGRF_WriteRegister>
}
 8015f5c:	b003      	add	sp, #12
 8015f5e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015f64 <SUBGRF_SetPacketType>:
{
 8015f64:	b500      	push	{lr}
 8015f66:	b083      	sub	sp, #12
 8015f68:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8015f6c:	4b08      	ldr	r3, [pc, #32]	; (8015f90 <SUBGRF_SetPacketType+0x2c>)
 8015f6e:	7018      	strb	r0, [r3, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8015f70:	b140      	cbz	r0, 8015f84 <SUBGRF_SetPacketType+0x20>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8015f72:	2201      	movs	r2, #1
 8015f74:	f10d 0107 	add.w	r1, sp, #7
 8015f78:	208a      	movs	r0, #138	; 0x8a
 8015f7a:	f7ff fd8d 	bl	8015a98 <SUBGRF_WriteCommand>
}
 8015f7e:	b003      	add	sp, #12
 8015f80:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8015f84:	2100      	movs	r1, #0
 8015f86:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8015f8a:	f7ff ff9b 	bl	8015ec4 <SUBGRF_WriteRegister>
 8015f8e:	e7f0      	b.n	8015f72 <SUBGRF_SetPacketType+0xe>
 8015f90:	2000157f 	.word	0x2000157f

08015f94 <SUBGRF_SetModulationParams>:
{
 8015f94:	b510      	push	{r4, lr}
 8015f96:	b082      	sub	sp, #8
 8015f98:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8015f9a:	4b3e      	ldr	r3, [pc, #248]	; (8016094 <SUBGRF_SetModulationParams+0x100>)
 8015f9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015fa0:	ab02      	add	r3, sp, #8
 8015fa2:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8015fa6:	7820      	ldrb	r0, [r4, #0]
 8015fa8:	4b3b      	ldr	r3, [pc, #236]	; (8016098 <SUBGRF_SetModulationParams+0x104>)
 8015faa:	781b      	ldrb	r3, [r3, #0]
 8015fac:	4298      	cmp	r0, r3
 8015fae:	d106      	bne.n	8015fbe <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 8015fb0:	7823      	ldrb	r3, [r4, #0]
 8015fb2:	2b03      	cmp	r3, #3
 8015fb4:	d82c      	bhi.n	8016010 <SUBGRF_SetModulationParams+0x7c>
 8015fb6:	e8df f003 	tbb	[pc, r3]
 8015fba:	4205      	.short	0x4205
 8015fbc:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8015fbe:	f7ff ffd1 	bl	8015f64 <SUBGRF_SetPacketType>
 8015fc2:	e7f5      	b.n	8015fb0 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8015fc4:	6862      	ldr	r2, [r4, #4]
 8015fc6:	4b35      	ldr	r3, [pc, #212]	; (801609c <SUBGRF_SetModulationParams+0x108>)
 8015fc8:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8015fcc:	0c1a      	lsrs	r2, r3, #16
 8015fce:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8015fd2:	0a1a      	lsrs	r2, r3, #8
 8015fd4:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8015fd8:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8015fdc:	7b23      	ldrb	r3, [r4, #12]
 8015fde:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8015fe2:	7b63      	ldrb	r3, [r4, #13]
 8015fe4:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8015fe8:	68a1      	ldr	r1, [r4, #8]
 8015fea:	4a2d      	ldr	r2, [pc, #180]	; (80160a0 <SUBGRF_SetModulationParams+0x10c>)
 8015fec:	2300      	movs	r3, #0
 8015fee:	0648      	lsls	r0, r1, #25
 8015ff0:	09c9      	lsrs	r1, r1, #7
 8015ff2:	f7ea fdb3 	bl	8000b5c <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8015ff6:	0c03      	lsrs	r3, r0, #16
 8015ff8:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8015ffc:	0a03      	lsrs	r3, r0, #8
 8015ffe:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8016002:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8016006:	2208      	movs	r2, #8
 8016008:	4669      	mov	r1, sp
 801600a:	208b      	movs	r0, #139	; 0x8b
 801600c:	f7ff fd44 	bl	8015a98 <SUBGRF_WriteCommand>
}
 8016010:	b002      	add	sp, #8
 8016012:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8016014:	6922      	ldr	r2, [r4, #16]
 8016016:	4b21      	ldr	r3, [pc, #132]	; (801609c <SUBGRF_SetModulationParams+0x108>)
 8016018:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801601c:	0c1a      	lsrs	r2, r3, #16
 801601e:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8016022:	0a1a      	lsrs	r2, r3, #8
 8016024:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8016028:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801602c:	7d23      	ldrb	r3, [r4, #20]
 801602e:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8016032:	2204      	movs	r2, #4
 8016034:	4669      	mov	r1, sp
 8016036:	208b      	movs	r0, #139	; 0x8b
 8016038:	f7ff fd2e 	bl	8015a98 <SUBGRF_WriteCommand>
        break;
 801603c:	e7e8      	b.n	8016010 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801603e:	7e23      	ldrb	r3, [r4, #24]
 8016040:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8016044:	7e63      	ldrb	r3, [r4, #25]
 8016046:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801604a:	7ea3      	ldrb	r3, [r4, #26]
 801604c:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8016050:	7ee3      	ldrb	r3, [r4, #27]
 8016052:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8016056:	2204      	movs	r2, #4
 8016058:	4669      	mov	r1, sp
 801605a:	208b      	movs	r0, #139	; 0x8b
 801605c:	f7ff fd1c 	bl	8015a98 <SUBGRF_WriteCommand>
        break;
 8016060:	e7d6      	b.n	8016010 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8016062:	6862      	ldr	r2, [r4, #4]
 8016064:	4b0d      	ldr	r3, [pc, #52]	; (801609c <SUBGRF_SetModulationParams+0x108>)
 8016066:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801606a:	0c1a      	lsrs	r2, r3, #16
 801606c:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8016070:	0a1a      	lsrs	r2, r3, #8
 8016072:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8016076:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801607a:	7b23      	ldrb	r3, [r4, #12]
 801607c:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8016080:	7b63      	ldrb	r3, [r4, #13]
 8016082:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8016086:	2205      	movs	r2, #5
 8016088:	4669      	mov	r1, sp
 801608a:	208b      	movs	r0, #139	; 0x8b
 801608c:	f7ff fd04 	bl	8015a98 <SUBGRF_WriteCommand>
}
 8016090:	e7be      	b.n	8016010 <SUBGRF_SetModulationParams+0x7c>
 8016092:	bf00      	nop
 8016094:	0801769c 	.word	0x0801769c
 8016098:	2000157f 	.word	0x2000157f
 801609c:	3d090000 	.word	0x3d090000
 80160a0:	01e84800 	.word	0x01e84800

080160a4 <SUBGRF_ReadRegister>:
{
 80160a4:	b500      	push	{lr}
 80160a6:	b083      	sub	sp, #12
 80160a8:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80160aa:	2301      	movs	r3, #1
 80160ac:	f10d 0207 	add.w	r2, sp, #7
 80160b0:	4803      	ldr	r0, [pc, #12]	; (80160c0 <SUBGRF_ReadRegister+0x1c>)
 80160b2:	f7ef fafd 	bl	80056b0 <HAL_SUBGHZ_ReadRegisters>
}
 80160b6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80160ba:	b003      	add	sp, #12
 80160bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80160c0:	200024e0 	.word	0x200024e0

080160c4 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 80160c4:	b510      	push	{r4, lr}
 80160c6:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 80160c8:	f7eb feb4 	bl	8001e34 <RBI_IsDCDC>
 80160cc:	2801      	cmp	r0, #1
 80160ce:	d000      	beq.n	80160d2 <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 80160d0:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80160d2:	f640 1023 	movw	r0, #2339	; 0x923
 80160d6:	f7ff ffe5 	bl	80160a4 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 80160da:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80160de:	4321      	orrs	r1, r4
 80160e0:	f640 1023 	movw	r0, #2339	; 0x923
 80160e4:	f7ff feee 	bl	8015ec4 <SUBGRF_WriteRegister>
}
 80160e8:	e7f2      	b.n	80160d0 <Radio_SMPS_Set+0xc>
	...

080160ec <SUBGRF_Init>:
{
 80160ec:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 80160ee:	b108      	cbz	r0, 80160f4 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 80160f0:	4a16      	ldr	r2, [pc, #88]	; (801614c <SUBGRF_Init+0x60>)
 80160f2:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 80160f4:	f7ec f95c 	bl	80023b0 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80160f8:	2002      	movs	r0, #2
 80160fa:	f7ff ffe3 	bl	80160c4 <Radio_SMPS_Set>
    ImageCalibrated = false;
 80160fe:	2000      	movs	r0, #0
 8016100:	4b13      	ldr	r3, [pc, #76]	; (8016150 <SUBGRF_Init+0x64>)
 8016102:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8016104:	f7ff fcee 	bl	8015ae4 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8016108:	f7eb fe92 	bl	8001e30 <RBI_IsTCXO>
 801610c:	2801      	cmp	r0, #1
 801610e:	d00f      	beq.n	8016130 <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8016110:	2120      	movs	r1, #32
 8016112:	f640 1011 	movw	r0, #2321	; 0x911
 8016116:	f7ff fed5 	bl	8015ec4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801611a:	2120      	movs	r1, #32
 801611c:	f640 1012 	movw	r0, #2322	; 0x912
 8016120:	f7ff fed0 	bl	8015ec4 <SUBGRF_WriteRegister>
    RBI_Init();
 8016124:	f7eb fdee 	bl	8001d04 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8016128:	4b0a      	ldr	r3, [pc, #40]	; (8016154 <SUBGRF_Init+0x68>)
 801612a:	2201      	movs	r2, #1
 801612c:	701a      	strb	r2, [r3, #0]
}
 801612e:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8016130:	2140      	movs	r1, #64	; 0x40
 8016132:	f7ff fe23 	bl	8015d7c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8016136:	2100      	movs	r1, #0
 8016138:	f640 1011 	movw	r0, #2321	; 0x911
 801613c:	f7ff fec2 	bl	8015ec4 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8016140:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8016144:	f7ff fd7d 	bl	8015c42 <SUBGRF_Calibrate>
 8016148:	e7ec      	b.n	8016124 <SUBGRF_Init+0x38>
 801614a:	bf00      	nop
 801614c:	20001580 	.word	0x20001580
 8016150:	2000157c 	.word	0x2000157c
 8016154:	2000157e 	.word	0x2000157e

08016158 <SUBGRF_SetSleep>:
{
 8016158:	b510      	push	{r4, lr}
 801615a:	b082      	sub	sp, #8
 801615c:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801615e:	2000      	movs	r0, #0
 8016160:	f7eb fe06 	bl	8001d70 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8016164:	2002      	movs	r0, #2
 8016166:	f7ff ffad 	bl	80160c4 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801616a:	f3c4 0080 	ubfx	r0, r4, #2, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801616e:	f3c4 0340 	ubfx	r3, r4, #1, #1
 8016172:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8016174:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8016178:	f004 0001 	and.w	r0, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801617c:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801617e:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8016182:	2201      	movs	r2, #1
 8016184:	f10d 0107 	add.w	r1, sp, #7
 8016188:	2084      	movs	r0, #132	; 0x84
 801618a:	f7ff fc85 	bl	8015a98 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801618e:	4b02      	ldr	r3, [pc, #8]	; (8016198 <SUBGRF_SetSleep+0x40>)
 8016190:	2200      	movs	r2, #0
 8016192:	701a      	strb	r2, [r3, #0]
}
 8016194:	b002      	add	sp, #8
 8016196:	bd10      	pop	{r4, pc}
 8016198:	2000157e 	.word	0x2000157e

0801619c <SUBGRF_SetWhiteningSeed>:
{
 801619c:	b510      	push	{r4, lr}
 801619e:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 80161a0:	f7ff fe32 	bl	8015e08 <SUBGRF_GetPacketType>
 80161a4:	b100      	cbz	r0, 80161a8 <SUBGRF_SetWhiteningSeed+0xc>
}
 80161a6:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80161a8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80161ac:	f7ff ff7a 	bl	80160a4 <SUBGRF_ReadRegister>
 80161b0:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80161b4:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80161b8:	4301      	orrs	r1, r0
 80161ba:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80161be:	f7ff fe81 	bl	8015ec4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80161c2:	b2e1      	uxtb	r1, r4
 80161c4:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80161c8:	f7ff fe7c 	bl	8015ec4 <SUBGRF_WriteRegister>
}
 80161cc:	e7eb      	b.n	80161a6 <SUBGRF_SetWhiteningSeed+0xa>

080161ce <SUBGRF_SetTxParams>:
{
 80161ce:	b530      	push	{r4, r5, lr}
 80161d0:	b083      	sub	sp, #12
 80161d2:	460c      	mov	r4, r1
 80161d4:	4615      	mov	r5, r2
    if( paSelect == RFO_LP )
 80161d6:	2801      	cmp	r0, #1
 80161d8:	d127      	bne.n	801622a <SUBGRF_SetTxParams+0x5c>
        if( power == 15 )
 80161da:	290f      	cmp	r1, #15
 80161dc:	d00d      	beq.n	80161fa <SUBGRF_SetTxParams+0x2c>
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 80161de:	2301      	movs	r3, #1
 80161e0:	461a      	mov	r2, r3
 80161e2:	2100      	movs	r1, #0
 80161e4:	2004      	movs	r0, #4
 80161e6:	f7ff fd99 	bl	8015d1c <SUBGRF_SetPaConfig>
        if( power >= 14 )
 80161ea:	2c0d      	cmp	r4, #13
 80161ec:	dc0c      	bgt.n	8016208 <SUBGRF_SetTxParams+0x3a>
        else if( power < -17 )
 80161ee:	f114 0f11 	cmn.w	r4, #17
 80161f2:	da0a      	bge.n	801620a <SUBGRF_SetTxParams+0x3c>
            power = -17;
 80161f4:	f06f 0410 	mvn.w	r4, #16
 80161f8:	e007      	b.n	801620a <SUBGRF_SetTxParams+0x3c>
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 80161fa:	2301      	movs	r3, #1
 80161fc:	461a      	mov	r2, r3
 80161fe:	2100      	movs	r1, #0
 8016200:	2006      	movs	r0, #6
 8016202:	f7ff fd8b 	bl	8015d1c <SUBGRF_SetPaConfig>
 8016206:	e7f0      	b.n	80161ea <SUBGRF_SetTxParams+0x1c>
            power = 14;
 8016208:	240e      	movs	r4, #14
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 801620a:	2118      	movs	r1, #24
 801620c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8016210:	f7ff fe58 	bl	8015ec4 <SUBGRF_WriteRegister>
    buf[0] = power;
 8016214:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = ( uint8_t )rampTime;
 8016218:	f88d 5005 	strb.w	r5, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 801621c:	2202      	movs	r2, #2
 801621e:	a901      	add	r1, sp, #4
 8016220:	208e      	movs	r0, #142	; 0x8e
 8016222:	f7ff fc39 	bl	8015a98 <SUBGRF_WriteCommand>
}
 8016226:	b003      	add	sp, #12
 8016228:	bd30      	pop	{r4, r5, pc}
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 801622a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801622e:	f7ff ff39 	bl	80160a4 <SUBGRF_ReadRegister>
 8016232:	f040 011e 	orr.w	r1, r0, #30
 8016236:	b2c9      	uxtb	r1, r1
 8016238:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801623c:	f7ff fe42 	bl	8015ec4 <SUBGRF_WriteRegister>
        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8016240:	2301      	movs	r3, #1
 8016242:	2200      	movs	r2, #0
 8016244:	2107      	movs	r1, #7
 8016246:	2004      	movs	r0, #4
 8016248:	f7ff fd68 	bl	8015d1c <SUBGRF_SetPaConfig>
        if( power > 22 )
 801624c:	2c16      	cmp	r4, #22
 801624e:	dc05      	bgt.n	801625c <SUBGRF_SetTxParams+0x8e>
        else if( power < -9 )
 8016250:	f114 0f09 	cmn.w	r4, #9
 8016254:	da03      	bge.n	801625e <SUBGRF_SetTxParams+0x90>
            power = -9;
 8016256:	f06f 0408 	mvn.w	r4, #8
 801625a:	e000      	b.n	801625e <SUBGRF_SetTxParams+0x90>
            power = 22;
 801625c:	2416      	movs	r4, #22
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 801625e:	2138      	movs	r1, #56	; 0x38
 8016260:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8016264:	f7ff fe2e 	bl	8015ec4 <SUBGRF_WriteRegister>
 8016268:	e7d4      	b.n	8016214 <SUBGRF_SetTxParams+0x46>
	...

0801626c <SUBGRF_GetRxBufferStatus>:
{
 801626c:	b530      	push	{r4, r5, lr}
 801626e:	b083      	sub	sp, #12
 8016270:	4605      	mov	r5, r0
 8016272:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8016274:	2202      	movs	r2, #2
 8016276:	a901      	add	r1, sp, #4
 8016278:	2013      	movs	r0, #19
 801627a:	f7ff fc1d 	bl	8015ab8 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801627e:	f7ff fdc3 	bl	8015e08 <SUBGRF_GetPacketType>
 8016282:	2801      	cmp	r0, #1
 8016284:	d007      	beq.n	8016296 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8016286:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801628a:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 801628c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8016290:	7023      	strb	r3, [r4, #0]
}
 8016292:	b003      	add	sp, #12
 8016294:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8016296:	4b05      	ldr	r3, [pc, #20]	; (80162ac <SUBGRF_GetRxBufferStatus+0x40>)
 8016298:	781b      	ldrb	r3, [r3, #0]
 801629a:	b2db      	uxtb	r3, r3
 801629c:	2b01      	cmp	r3, #1
 801629e:	d1f2      	bne.n	8016286 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80162a0:	f240 7002 	movw	r0, #1794	; 0x702
 80162a4:	f7ff fefe 	bl	80160a4 <SUBGRF_ReadRegister>
 80162a8:	7028      	strb	r0, [r5, #0]
 80162aa:	e7ef      	b.n	801628c <SUBGRF_GetRxBufferStatus+0x20>
 80162ac:	2000157d 	.word	0x2000157d

080162b0 <SUBGRF_WriteRegisters>:
{
 80162b0:	b510      	push	{r4, lr}
 80162b2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80162b4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80162b8:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80162ba:	460a      	mov	r2, r1
 80162bc:	4601      	mov	r1, r0
 80162be:	4803      	ldr	r0, [pc, #12]	; (80162cc <SUBGRF_WriteRegisters+0x1c>)
 80162c0:	f7ef f9a6 	bl	8005610 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80162c4:	f384 8810 	msr	PRIMASK, r4
}
 80162c8:	bd10      	pop	{r4, pc}
 80162ca:	bf00      	nop
 80162cc:	200024e0 	.word	0x200024e0

080162d0 <SUBGRF_SetSyncWord>:
{
 80162d0:	b508      	push	{r3, lr}
 80162d2:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80162d4:	2208      	movs	r2, #8
 80162d6:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80162da:	f7ff ffe9 	bl	80162b0 <SUBGRF_WriteRegisters>
}
 80162de:	2000      	movs	r0, #0
 80162e0:	bd08      	pop	{r3, pc}

080162e2 <SUBGRF_SetCrcSeed>:
{
 80162e2:	b500      	push	{lr}
 80162e4:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80162e6:	0a03      	lsrs	r3, r0, #8
 80162e8:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80162ec:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 80162f0:	f7ff fd8a 	bl	8015e08 <SUBGRF_GetPacketType>
 80162f4:	b110      	cbz	r0, 80162fc <SUBGRF_SetCrcSeed+0x1a>
}
 80162f6:	b003      	add	sp, #12
 80162f8:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80162fc:	2202      	movs	r2, #2
 80162fe:	a901      	add	r1, sp, #4
 8016300:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8016304:	f7ff ffd4 	bl	80162b0 <SUBGRF_WriteRegisters>
}
 8016308:	e7f5      	b.n	80162f6 <SUBGRF_SetCrcSeed+0x14>

0801630a <SUBGRF_SetCrcPolynomial>:
{
 801630a:	b500      	push	{lr}
 801630c:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801630e:	0a03      	lsrs	r3, r0, #8
 8016310:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8016314:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8016318:	f7ff fd76 	bl	8015e08 <SUBGRF_GetPacketType>
 801631c:	b110      	cbz	r0, 8016324 <SUBGRF_SetCrcPolynomial+0x1a>
}
 801631e:	b003      	add	sp, #12
 8016320:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8016324:	2202      	movs	r2, #2
 8016326:	a901      	add	r1, sp, #4
 8016328:	f240 60be 	movw	r0, #1726	; 0x6be
 801632c:	f7ff ffc0 	bl	80162b0 <SUBGRF_WriteRegisters>
}
 8016330:	e7f5      	b.n	801631e <SUBGRF_SetCrcPolynomial+0x14>
	...

08016334 <SUBGRF_SetPacketParams>:
{
 8016334:	b510      	push	{r4, lr}
 8016336:	b084      	sub	sp, #16
 8016338:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801633a:	ab01      	add	r3, sp, #4
 801633c:	4a33      	ldr	r2, [pc, #204]	; (801640c <SUBGRF_SetPacketParams+0xd8>)
 801633e:	ca07      	ldmia	r2, {r0, r1, r2}
 8016340:	c303      	stmia	r3!, {r0, r1}
 8016342:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8016344:	7820      	ldrb	r0, [r4, #0]
 8016346:	4b32      	ldr	r3, [pc, #200]	; (8016410 <SUBGRF_SetPacketParams+0xdc>)
 8016348:	781b      	ldrb	r3, [r3, #0]
 801634a:	4298      	cmp	r0, r3
 801634c:	d106      	bne.n	801635c <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 801634e:	7823      	ldrb	r3, [r4, #0]
 8016350:	2b03      	cmp	r3, #3
 8016352:	d82a      	bhi.n	80163aa <SUBGRF_SetPacketParams+0x76>
 8016354:	e8df f003 	tbb	[pc, r3]
 8016358:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 801635c:	f7ff fe02 	bl	8015f64 <SUBGRF_SetPacketType>
 8016360:	e7f5      	b.n	801634e <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8016362:	7a63      	ldrb	r3, [r4, #9]
 8016364:	2bf1      	cmp	r3, #241	; 0xf1
 8016366:	d022      	beq.n	80163ae <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8016368:	2bf2      	cmp	r3, #242	; 0xf2
 801636a:	d02a      	beq.n	80163c2 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801636c:	8862      	ldrh	r2, [r4, #2]
 801636e:	0a11      	lsrs	r1, r2, #8
 8016370:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8016374:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8016378:	7922      	ldrb	r2, [r4, #4]
 801637a:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801637e:	7962      	ldrb	r2, [r4, #5]
 8016380:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8016384:	79a2      	ldrb	r2, [r4, #6]
 8016386:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801638a:	79e2      	ldrb	r2, [r4, #7]
 801638c:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8016390:	7a22      	ldrb	r2, [r4, #8]
 8016392:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8016396:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801639a:	7aa3      	ldrb	r3, [r4, #10]
 801639c:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 80163a0:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80163a2:	a901      	add	r1, sp, #4
 80163a4:	208c      	movs	r0, #140	; 0x8c
 80163a6:	f7ff fb77 	bl	8015a98 <SUBGRF_WriteCommand>
}
 80163aa:	b004      	add	sp, #16
 80163ac:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80163ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80163b2:	f7ff ff96 	bl	80162e2 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80163b6:	f248 0005 	movw	r0, #32773	; 0x8005
 80163ba:	f7ff ffa6 	bl	801630a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80163be:	2302      	movs	r3, #2
 80163c0:	e7d4      	b.n	801636c <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80163c2:	f641 500f 	movw	r0, #7439	; 0x1d0f
 80163c6:	f7ff ff8c 	bl	80162e2 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80163ca:	f241 0021 	movw	r0, #4129	; 0x1021
 80163ce:	f7ff ff9c 	bl	801630a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80163d2:	2306      	movs	r3, #6
 80163d4:	e7ca      	b.n	801636c <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80163d6:	7b23      	ldrb	r3, [r4, #12]
 80163d8:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 80163dc:	2201      	movs	r2, #1
        break;
 80163de:	e7e0      	b.n	80163a2 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80163e0:	89e3      	ldrh	r3, [r4, #14]
 80163e2:	0a1a      	lsrs	r2, r3, #8
 80163e4:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80163e8:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80163ec:	7c23      	ldrb	r3, [r4, #16]
 80163ee:	4a09      	ldr	r2, [pc, #36]	; (8016414 <SUBGRF_SetPacketParams+0xe0>)
 80163f0:	7013      	strb	r3, [r2, #0]
 80163f2:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80163f6:	7c63      	ldrb	r3, [r4, #17]
 80163f8:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80163fc:	7ca3      	ldrb	r3, [r4, #18]
 80163fe:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8016402:	7ce3      	ldrb	r3, [r4, #19]
 8016404:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8016408:	2206      	movs	r2, #6
        break;
 801640a:	e7ca      	b.n	80163a2 <SUBGRF_SetPacketParams+0x6e>
 801640c:	080176a4 	.word	0x080176a4
 8016410:	2000157f 	.word	0x2000157f
 8016414:	2000157d 	.word	0x2000157d

08016418 <SUBGRF_ReadRegisters>:
{
 8016418:	b510      	push	{r4, lr}
 801641a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801641c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016420:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8016422:	460a      	mov	r2, r1
 8016424:	4601      	mov	r1, r0
 8016426:	4803      	ldr	r0, [pc, #12]	; (8016434 <SUBGRF_ReadRegisters+0x1c>)
 8016428:	f7ef f942 	bl	80056b0 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801642c:	f384 8810 	msr	PRIMASK, r4
}
 8016430:	bd10      	pop	{r4, pc}
 8016432:	bf00      	nop
 8016434:	200024e0 	.word	0x200024e0

08016438 <SUBGRF_GetRandom>:
{
 8016438:	b570      	push	{r4, r5, r6, lr}
 801643a:	b082      	sub	sp, #8
    uint32_t number = 0;
 801643c:	2600      	movs	r6, #0
 801643e:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8016440:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8016444:	f7ff fe2e 	bl	80160a4 <SUBGRF_ReadRegister>
 8016448:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801644a:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 801644e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8016452:	f7ff fd37 	bl	8015ec4 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8016456:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801645a:	f7ff fe23 	bl	80160a4 <SUBGRF_ReadRegister>
 801645e:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8016460:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8016464:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8016468:	f7ff fd2c 	bl	8015ec4 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801646c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8016470:	f7ff fb6c 	bl	8015b4c <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8016474:	2204      	movs	r2, #4
 8016476:	eb0d 0102 	add.w	r1, sp, r2
 801647a:	f640 0019 	movw	r0, #2073	; 0x819
 801647e:	f7ff ffcb 	bl	8016418 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8016482:	4630      	mov	r0, r6
 8016484:	f7ff fb2e 	bl	8015ae4 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8016488:	4629      	mov	r1, r5
 801648a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801648e:	f7ff fd19 	bl	8015ec4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8016492:	4621      	mov	r1, r4
 8016494:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8016498:	f7ff fd14 	bl	8015ec4 <SUBGRF_WriteRegister>
}
 801649c:	9801      	ldr	r0, [sp, #4]
 801649e:	b002      	add	sp, #8
 80164a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080164a4 <SUBGRF_WriteBuffer>:
{
 80164a4:	b510      	push	{r4, lr}
 80164a6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80164a8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80164ac:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80164ae:	460a      	mov	r2, r1
 80164b0:	4601      	mov	r1, r0
 80164b2:	4803      	ldr	r0, [pc, #12]	; (80164c0 <SUBGRF_WriteBuffer+0x1c>)
 80164b4:	f7ef fa52 	bl	800595c <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80164b8:	f384 8810 	msr	PRIMASK, r4
}
 80164bc:	bd10      	pop	{r4, pc}
 80164be:	bf00      	nop
 80164c0:	200024e0 	.word	0x200024e0

080164c4 <SUBGRF_SetPayload>:
{
 80164c4:	b508      	push	{r3, lr}
 80164c6:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80164c8:	4601      	mov	r1, r0
 80164ca:	2000      	movs	r0, #0
 80164cc:	f7ff ffea 	bl	80164a4 <SUBGRF_WriteBuffer>
}
 80164d0:	bd08      	pop	{r3, pc}

080164d2 <SUBGRF_SendPayload>:
{
 80164d2:	b510      	push	{r4, lr}
 80164d4:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 80164d6:	f7ff fff5 	bl	80164c4 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80164da:	4620      	mov	r0, r4
 80164dc:	f7ff fb1c 	bl	8015b18 <SUBGRF_SetTx>
}
 80164e0:	bd10      	pop	{r4, pc}
	...

080164e4 <SUBGRF_ReadBuffer>:
{
 80164e4:	b510      	push	{r4, lr}
 80164e6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80164e8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80164ec:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80164ee:	460a      	mov	r2, r1
 80164f0:	4601      	mov	r1, r0
 80164f2:	4803      	ldr	r0, [pc, #12]	; (8016500 <SUBGRF_ReadBuffer+0x1c>)
 80164f4:	f7ef fa7c 	bl	80059f0 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80164f8:	f384 8810 	msr	PRIMASK, r4
}
 80164fc:	bd10      	pop	{r4, pc}
 80164fe:	bf00      	nop
 8016500:	200024e0 	.word	0x200024e0

08016504 <SUBGRF_GetPayload>:
{
 8016504:	b570      	push	{r4, r5, r6, lr}
 8016506:	b082      	sub	sp, #8
 8016508:	4606      	mov	r6, r0
 801650a:	460c      	mov	r4, r1
 801650c:	4615      	mov	r5, r2
    uint8_t offset = 0;
 801650e:	2300      	movs	r3, #0
 8016510:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8016514:	f10d 0107 	add.w	r1, sp, #7
 8016518:	4620      	mov	r0, r4
 801651a:	f7ff fea7 	bl	801626c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801651e:	7822      	ldrb	r2, [r4, #0]
 8016520:	42aa      	cmp	r2, r5
 8016522:	d902      	bls.n	801652a <SUBGRF_GetPayload+0x26>
        return 1;
 8016524:	2001      	movs	r0, #1
}
 8016526:	b002      	add	sp, #8
 8016528:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801652a:	4631      	mov	r1, r6
 801652c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8016530:	f7ff ffd8 	bl	80164e4 <SUBGRF_ReadBuffer>
    return 0;
 8016534:	2000      	movs	r0, #0
 8016536:	e7f6      	b.n	8016526 <SUBGRF_GetPayload+0x22>

08016538 <SUBGRF_SetSwitch>:
{
 8016538:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 801653a:	2901      	cmp	r1, #1
 801653c:	d003      	beq.n	8016546 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801653e:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8016540:	f7eb fc16 	bl	8001d70 <RBI_ConfigRFSwitch>
}
 8016544:	bd10      	pop	{r4, pc}
 8016546:	4604      	mov	r4, r0
 8016548:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 801654a:	2c01      	cmp	r4, #1
 801654c:	d003      	beq.n	8016556 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 801654e:	2c02      	cmp	r4, #2
 8016550:	d1f6      	bne.n	8016540 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8016552:	2003      	movs	r0, #3
 8016554:	e7f4      	b.n	8016540 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8016556:	2004      	movs	r0, #4
 8016558:	f7ff fdb4 	bl	80160c4 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 801655c:	2002      	movs	r0, #2
 801655e:	e7f6      	b.n	801654e <SUBGRF_SetSwitch+0x16>

08016560 <SUBGRF_SetRfTxPower>:
{
 8016560:	b538      	push	{r3, r4, r5, lr}
 8016562:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8016564:	f7eb fc62 	bl	8001e2c <RBI_GetTxConfig>
    switch (TxConfig)
 8016568:	b148      	cbz	r0, 801657e <SUBGRF_SetRfTxPower+0x1e>
 801656a:	2802      	cmp	r0, #2
 801656c:	d10d      	bne.n	801658a <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 801656e:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8016570:	2202      	movs	r2, #2
 8016572:	4621      	mov	r1, r4
 8016574:	4628      	mov	r0, r5
 8016576:	f7ff fe2a 	bl	80161ce <SUBGRF_SetTxParams>
}
 801657a:	4628      	mov	r0, r5
 801657c:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 801657e:	2c0f      	cmp	r4, #15
 8016580:	dc01      	bgt.n	8016586 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8016582:	2501      	movs	r5, #1
 8016584:	e7f4      	b.n	8016570 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8016586:	2502      	movs	r5, #2
 8016588:	e7f2      	b.n	8016570 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 801658a:	2501      	movs	r5, #1
 801658c:	e7f0      	b.n	8016570 <SUBGRF_SetRfTxPower+0x10>

0801658e <SUBGRF_GetRadioWakeUpTime>:
}
 801658e:	2001      	movs	r0, #1
 8016590:	4770      	bx	lr
	...

08016594 <HAL_SUBGHZ_TxCpltCallback>:
{
 8016594:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8016596:	4b02      	ldr	r3, [pc, #8]	; (80165a0 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	2001      	movs	r0, #1
 801659c:	4798      	blx	r3
}
 801659e:	bd08      	pop	{r3, pc}
 80165a0:	20001580 	.word	0x20001580

080165a4 <HAL_SUBGHZ_RxCpltCallback>:
{
 80165a4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80165a6:	4b02      	ldr	r3, [pc, #8]	; (80165b0 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	2002      	movs	r0, #2
 80165ac:	4798      	blx	r3
}
 80165ae:	bd08      	pop	{r3, pc}
 80165b0:	20001580 	.word	0x20001580

080165b4 <HAL_SUBGHZ_CRCErrorCallback>:
{
 80165b4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80165b6:	4b02      	ldr	r3, [pc, #8]	; (80165c0 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	2040      	movs	r0, #64	; 0x40
 80165bc:	4798      	blx	r3
}
 80165be:	bd08      	pop	{r3, pc}
 80165c0:	20001580 	.word	0x20001580

080165c4 <HAL_SUBGHZ_CADStatusCallback>:
{
 80165c4:	b508      	push	{r3, lr}
    switch (cadstatus)
 80165c6:	b111      	cbz	r1, 80165ce <HAL_SUBGHZ_CADStatusCallback+0xa>
 80165c8:	2901      	cmp	r1, #1
 80165ca:	d005      	beq.n	80165d8 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 80165cc:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80165ce:	4b05      	ldr	r3, [pc, #20]	; (80165e4 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	2080      	movs	r0, #128	; 0x80
 80165d4:	4798      	blx	r3
            break;
 80165d6:	e7f9      	b.n	80165cc <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80165d8:	4b02      	ldr	r3, [pc, #8]	; (80165e4 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80165e0:	4798      	blx	r3
}
 80165e2:	e7f3      	b.n	80165cc <HAL_SUBGHZ_CADStatusCallback+0x8>
 80165e4:	20001580 	.word	0x20001580

080165e8 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 80165e8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80165ea:	4b03      	ldr	r3, [pc, #12]	; (80165f8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80165f2:	4798      	blx	r3
}
 80165f4:	bd08      	pop	{r3, pc}
 80165f6:	bf00      	nop
 80165f8:	20001580 	.word	0x20001580

080165fc <HAL_SUBGHZ_HeaderErrorCallback>:
{
 80165fc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80165fe:	4b02      	ldr	r3, [pc, #8]	; (8016608 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	2020      	movs	r0, #32
 8016604:	4798      	blx	r3
}
 8016606:	bd08      	pop	{r3, pc}
 8016608:	20001580 	.word	0x20001580

0801660c <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 801660c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801660e:	4b02      	ldr	r3, [pc, #8]	; (8016618 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	2004      	movs	r0, #4
 8016614:	4798      	blx	r3
}
 8016616:	bd08      	pop	{r3, pc}
 8016618:	20001580 	.word	0x20001580

0801661c <HAL_SUBGHZ_SyncWordValidCallback>:
{
 801661c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801661e:	4b02      	ldr	r3, [pc, #8]	; (8016628 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	2008      	movs	r0, #8
 8016624:	4798      	blx	r3
}
 8016626:	bd08      	pop	{r3, pc}
 8016628:	20001580 	.word	0x20001580

0801662c <HAL_SUBGHZ_HeaderValidCallback>:
{
 801662c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801662e:	4b02      	ldr	r3, [pc, #8]	; (8016638 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	2010      	movs	r0, #16
 8016634:	4798      	blx	r3
}
 8016636:	bd08      	pop	{r3, pc}
 8016638:	20001580 	.word	0x20001580

0801663c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 801663c:	b1a0      	cbz	r0, 8016668 <SUBGRF_GetFskBandwidthRegValue+0x2c>
{
 801663e:	b410      	push	{r4}
 8016640:	4604      	mov	r4, r0
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8016642:	2300      	movs	r3, #0
 8016644:	2b15      	cmp	r3, #21
 8016646:	d80e      	bhi.n	8016666 <SUBGRF_GetFskBandwidthRegValue+0x2a>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8016648:	4619      	mov	r1, r3
 801664a:	4a08      	ldr	r2, [pc, #32]	; (801666c <SUBGRF_GetFskBandwidthRegValue+0x30>)
 801664c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8016650:	42a2      	cmp	r2, r4
 8016652:	d802      	bhi.n	801665a <SUBGRF_GetFskBandwidthRegValue+0x1e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8016654:	3301      	adds	r3, #1
 8016656:	b2db      	uxtb	r3, r3
 8016658:	e7f4      	b.n	8016644 <SUBGRF_GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
 801665a:	4b04      	ldr	r3, [pc, #16]	; (801666c <SUBGRF_GetFskBandwidthRegValue+0x30>)
 801665c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8016660:	7918      	ldrb	r0, [r3, #4]
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
}
 8016662:	bc10      	pop	{r4}
 8016664:	4770      	bx	lr
    while( 1 );
 8016666:	e7fe      	b.n	8016666 <SUBGRF_GetFskBandwidthRegValue+0x2a>
        return( 0x1F );
 8016668:	201f      	movs	r0, #31
}
 801666a:	4770      	bx	lr
 801666c:	08018484 	.word	0x08018484

08016670 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8016670:	b570      	push	{r4, r5, r6, lr}
 8016672:	b082      	sub	sp, #8
 8016674:	4604      	mov	r4, r0
 8016676:	460d      	mov	r5, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8016678:	4b1d      	ldr	r3, [pc, #116]	; (80166f0 <SUBGRF_GetCFO+0x80>)
 801667a:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 801667c:	f640 0007 	movw	r0, #2055	; 0x807
 8016680:	f7ff fd10 	bl	80160a4 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8016684:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8016688:	aa02      	add	r2, sp, #8
 801668a:	4413      	add	r3, r2
 801668c:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8016690:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8016694:	3b01      	subs	r3, #1
 8016696:	fa02 f003 	lsl.w	r0, r2, r3
 801669a:	4b16      	ldr	r3, [pc, #88]	; (80166f4 <SUBGRF_GetCFO+0x84>)
 801669c:	fbb3 f3f0 	udiv	r3, r3, r0
  uint32_t cf_osr = cf_fs / bitRate;
 80166a0:	fbb3 f0f4 	udiv	r0, r3, r4
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 80166a4:	2807      	cmp	r0, #7
 80166a6:	d921      	bls.n	80166ec <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 80166a8:	2401      	movs	r4, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 80166aa:	fb00 f004 	mul.w	r0, r0, r4
 80166ae:	2803      	cmp	r0, #3
 80166b0:	d800      	bhi.n	80166b4 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 80166b2:	2404      	movs	r4, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 80166b4:	fb03 f404 	mul.w	r4, r3, r4
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 80166b8:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 80166bc:	f7ff fcf2 	bl	80160a4 <SUBGRF_ReadRegister>
 80166c0:	0200      	lsls	r0, r0, #8
 80166c2:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 80166c6:	f240 60b1 	movw	r0, #1713	; 0x6b1
 80166ca:	f7ff fceb 	bl	80160a4 <SUBGRF_ReadRegister>
 80166ce:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 80166d0:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80166d4:	d003      	beq.n	80166de <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 80166d6:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 80166da:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80166de:	0963      	lsrs	r3, r4, #5
 80166e0:	fb03 f300 	mul.w	r3, r3, r0
 80166e4:	11db      	asrs	r3, r3, #7
 80166e6:	602b      	str	r3, [r5, #0]
}
 80166e8:	b002      	add	sp, #8
 80166ea:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 80166ec:	2402      	movs	r4, #2
 80166ee:	e7dc      	b.n	80166aa <SUBGRF_GetCFO+0x3a>
 80166f0:	0c0a0804 	.word	0x0c0a0804
 80166f4:	01e84800 	.word	0x01e84800

080166f8 <RFW_TransmitLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 80166f8:	f04f 30ff 	mov.w	r0, #4294967295
 80166fc:	4770      	bx	lr

080166fe <RFW_ReceiveLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 80166fe:	f04f 30ff 	mov.w	r0, #4294967295
 8016702:	4770      	bx	lr

08016704 <RFW_Init>:
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
#endif
}
 8016704:	f04f 30ff 	mov.w	r0, #4294967295
 8016708:	4770      	bx	lr

0801670a <RFW_DeInit>:
void RFW_DeInit( void)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801670a:	4770      	bx	lr

0801670c <RFW_Is_Init>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
#endif
}
 801670c:	2000      	movs	r0, #0
 801670e:	4770      	bx	lr

08016710 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
#endif
}
 8016710:	2000      	movs	r0, #0
 8016712:	4770      	bx	lr

08016714 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8016714:	4770      	bx	lr

08016716 <RFW_TransmitInit>:
    
    status= 0;
  }
#endif
  return status;
}
 8016716:	f04f 30ff 	mov.w	r0, #4294967295
 801671a:	4770      	bx	lr

0801671c <RFW_ReceiveInit>:
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
#endif
}
 801671c:	f04f 30ff 	mov.w	r0, #4294967295
 8016720:	4770      	bx	lr

08016722 <RFW_DeInit_TxLongPacket>:
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8016722:	4770      	bx	lr

08016724 <RFW_ReceivePayload>:
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8016724:	4770      	bx	lr

08016726 <RFW_SetRadioModem>:
void RFW_SetRadioModem(RadioModems_t Modem)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8016726:	4770      	bx	lr

08016728 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8016728:	b470      	push	{r4, r5, r6}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801672a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801672e:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8016730:	4b1b      	ldr	r3, [pc, #108]	; (80167a0 <TRACE_AllocateBufer+0x78>)
 8016732:	8a5c      	ldrh	r4, [r3, #18]
 8016734:	8a1a      	ldrh	r2, [r3, #16]
 8016736:	4294      	cmp	r4, r2
 8016738:	d010      	beq.n	801675c <TRACE_AllocateBufer+0x34>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801673a:	4294      	cmp	r4, r2
 801673c:	d91d      	bls.n	801677a <TRACE_AllocateBufer+0x52>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801673e:	f5c4 6380 	rsb	r3, r4, #1024	; 0x400
 8016742:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8016744:	4283      	cmp	r3, r0
 8016746:	d81a      	bhi.n	801677e <TRACE_AllocateBufer+0x56>
 8016748:	4282      	cmp	r2, r0
 801674a:	d918      	bls.n	801677e <TRACE_AllocateBufer+0x56>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801674c:	4b14      	ldr	r3, [pc, #80]	; (80167a0 <TRACE_AllocateBufer+0x78>)
 801674e:	2601      	movs	r6, #1
 8016750:	709e      	strb	r6, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8016752:	801c      	strh	r4, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8016754:	2400      	movs	r4, #0
 8016756:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8016758:	4613      	mov	r3, r2
 801675a:	e010      	b.n	801677e <TRACE_AllocateBufer+0x56>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801675c:	f5c4 6380 	rsb	r3, r4, #1024	; 0x400
 8016760:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8016762:	4298      	cmp	r0, r3
 8016764:	d30b      	bcc.n	801677e <TRACE_AllocateBufer+0x56>
 8016766:	4282      	cmp	r2, r0
 8016768:	d909      	bls.n	801677e <TRACE_AllocateBufer+0x56>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801676a:	4b0d      	ldr	r3, [pc, #52]	; (80167a0 <TRACE_AllocateBufer+0x78>)
 801676c:	2601      	movs	r6, #1
 801676e:	709e      	strb	r6, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8016770:	801c      	strh	r4, [r3, #0]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8016772:	2400      	movs	r4, #0
 8016774:	825c      	strh	r4, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8016776:	4613      	mov	r3, r2
 8016778:	e001      	b.n	801677e <TRACE_AllocateBufer+0x56>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801677a:	1b13      	subs	r3, r2, r4
 801677c:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801677e:	4283      	cmp	r3, r0
 8016780:	d90b      	bls.n	801679a <TRACE_AllocateBufer+0x72>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8016782:	4a07      	ldr	r2, [pc, #28]	; (80167a0 <TRACE_AllocateBufer+0x78>)
 8016784:	8a53      	ldrh	r3, [r2, #18]
 8016786:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8016788:	4403      	add	r3, r0
 801678a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801678e:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8016790:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016792:	f385 8810 	msr	PRIMASK, r5
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8016796:	bc70      	pop	{r4, r5, r6}
 8016798:	4770      	bx	lr
  int16_t ret = -1;
 801679a:	f04f 30ff 	mov.w	r0, #4294967295
 801679e:	e7f8      	b.n	8016792 <TRACE_AllocateBufer+0x6a>
 80167a0:	20001984 	.word	0x20001984

080167a4 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80167a4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80167a8:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 80167aa:	4a03      	ldr	r2, [pc, #12]	; (80167b8 <TRACE_Lock+0x14>)
 80167ac:	8ad3      	ldrh	r3, [r2, #22]
 80167ae:	3301      	adds	r3, #1
 80167b0:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80167b2:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80167b6:	4770      	bx	lr
 80167b8:	20001984 	.word	0x20001984

080167bc <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80167bc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80167c0:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 80167c2:	4a03      	ldr	r2, [pc, #12]	; (80167d0 <TRACE_UnLock+0x14>)
 80167c4:	8ad3      	ldrh	r3, [r2, #22]
 80167c6:	3b01      	subs	r3, #1
 80167c8:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80167ca:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80167ce:	4770      	bx	lr
 80167d0:	20001984 	.word	0x20001984

080167d4 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 80167d4:	4b02      	ldr	r3, [pc, #8]	; (80167e0 <TRACE_IsLocked+0xc>)
 80167d6:	8ad8      	ldrh	r0, [r3, #22]
}
 80167d8:	3800      	subs	r0, #0
 80167da:	bf18      	it	ne
 80167dc:	2001      	movne	r0, #1
 80167de:	4770      	bx	lr
 80167e0:	20001984 	.word	0x20001984

080167e4 <UTIL_ADV_TRACE_Init>:
{
 80167e4:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 80167e6:	2218      	movs	r2, #24
 80167e8:	2100      	movs	r1, #0
 80167ea:	4807      	ldr	r0, [pc, #28]	; (8016808 <UTIL_ADV_TRACE_Init+0x24>)
 80167ec:	f000 f98c 	bl	8016b08 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 80167f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80167f4:	2100      	movs	r1, #0
 80167f6:	4805      	ldr	r0, [pc, #20]	; (801680c <UTIL_ADV_TRACE_Init+0x28>)
 80167f8:	f000 f986 	bl	8016b08 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 80167fc:	4b04      	ldr	r3, [pc, #16]	; (8016810 <UTIL_ADV_TRACE_Init+0x2c>)
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	4804      	ldr	r0, [pc, #16]	; (8016814 <UTIL_ADV_TRACE_Init+0x30>)
 8016802:	4798      	blx	r3
}
 8016804:	bd08      	pop	{r3, pc}
 8016806:	bf00      	nop
 8016808:	20001984 	.word	0x20001984
 801680c:	20001584 	.word	0x20001584
 8016810:	08017984 	.word	0x08017984
 8016814:	08016995 	.word	0x08016995

08016818 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8016818:	4b01      	ldr	r3, [pc, #4]	; (8016820 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 801681a:	6058      	str	r0, [r3, #4]
}
 801681c:	4770      	bx	lr
 801681e:	bf00      	nop
 8016820:	20001984 	.word	0x20001984

08016824 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8016824:	4b01      	ldr	r3, [pc, #4]	; (801682c <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8016826:	7218      	strb	r0, [r3, #8]
}
 8016828:	4770      	bx	lr
 801682a:	bf00      	nop
 801682c:	20001984 	.word	0x20001984

08016830 <TRACE_Send>:
{
 8016830:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016832:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016836:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8016838:	f7ff ffcc 	bl	80167d4 <TRACE_IsLocked>
 801683c:	b118      	cbz	r0, 8016846 <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801683e:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8016842:	2000      	movs	r0, #0
}
 8016844:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8016846:	f7ff ffad 	bl	80167a4 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801684a:	4b1d      	ldr	r3, [pc, #116]	; (80168c0 <TRACE_Send+0x90>)
 801684c:	8a1a      	ldrh	r2, [r3, #16]
 801684e:	8a5b      	ldrh	r3, [r3, #18]
 8016850:	429a      	cmp	r2, r3
 8016852:	d02e      	beq.n	80168b2 <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8016854:	491a      	ldr	r1, [pc, #104]	; (80168c0 <TRACE_Send+0x90>)
 8016856:	7889      	ldrb	r1, [r1, #2]
 8016858:	2901      	cmp	r1, #1
 801685a:	d017      	beq.n	801688c <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801685c:	4a18      	ldr	r2, [pc, #96]	; (80168c0 <TRACE_Send+0x90>)
 801685e:	7892      	ldrb	r2, [r2, #2]
 8016860:	b932      	cbnz	r2, 8016870 <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8016862:	4a17      	ldr	r2, [pc, #92]	; (80168c0 <TRACE_Send+0x90>)
 8016864:	8a12      	ldrh	r2, [r2, #16]
 8016866:	4293      	cmp	r3, r2
 8016868:	d91e      	bls.n	80168a8 <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801686a:	1a9b      	subs	r3, r3, r2
 801686c:	4a14      	ldr	r2, [pc, #80]	; (80168c0 <TRACE_Send+0x90>)
 801686e:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8016870:	4e13      	ldr	r6, [pc, #76]	; (80168c0 <TRACE_Send+0x90>)
 8016872:	8a33      	ldrh	r3, [r6, #16]
 8016874:	4d13      	ldr	r5, [pc, #76]	; (80168c4 <TRACE_Send+0x94>)
 8016876:	441d      	add	r5, r3
 8016878:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 801687c:	f7eb ffca 	bl	8002814 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8016880:	4b11      	ldr	r3, [pc, #68]	; (80168c8 <TRACE_Send+0x98>)
 8016882:	68db      	ldr	r3, [r3, #12]
 8016884:	8ab1      	ldrh	r1, [r6, #20]
 8016886:	4628      	mov	r0, r5
 8016888:	4798      	blx	r3
 801688a:	e7db      	b.n	8016844 <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801688c:	480c      	ldr	r0, [pc, #48]	; (80168c0 <TRACE_Send+0x90>)
 801688e:	8801      	ldrh	r1, [r0, #0]
 8016890:	1a8a      	subs	r2, r1, r2
 8016892:	b292      	uxth	r2, r2
 8016894:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8016896:	2102      	movs	r1, #2
 8016898:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801689a:	2100      	movs	r1, #0
 801689c:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801689e:	2a00      	cmp	r2, #0
 80168a0:	d1dc      	bne.n	801685c <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80168a2:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 80168a4:	8201      	strh	r1, [r0, #16]
 80168a6:	e7d9      	b.n	801685c <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80168a8:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 80168ac:	4a04      	ldr	r2, [pc, #16]	; (80168c0 <TRACE_Send+0x90>)
 80168ae:	8293      	strh	r3, [r2, #20]
 80168b0:	e7de      	b.n	8016870 <TRACE_Send+0x40>
      TRACE_UnLock();
 80168b2:	f7ff ff83 	bl	80167bc <TRACE_UnLock>
 80168b6:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80168ba:	2000      	movs	r0, #0
}
 80168bc:	e7c2      	b.n	8016844 <TRACE_Send+0x14>
 80168be:	bf00      	nop
 80168c0:	20001984 	.word	0x20001984
 80168c4:	20001584 	.word	0x20001584
 80168c8:	08017984 	.word	0x08017984

080168cc <UTIL_ADV_TRACE_COND_FSend>:
{
 80168cc:	b408      	push	{r3}
 80168ce:	b530      	push	{r4, r5, lr}
 80168d0:	b086      	sub	sp, #24
 80168d2:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 80168d4:	2300      	movs	r3, #0
 80168d6:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 80168da:	4b2b      	ldr	r3, [pc, #172]	; (8016988 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 80168dc:	7a1b      	ldrb	r3, [r3, #8]
 80168de:	4283      	cmp	r3, r0
 80168e0:	d34c      	bcc.n	801697c <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 80168e2:	4b29      	ldr	r3, [pc, #164]	; (8016988 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 80168e4:	68db      	ldr	r3, [r3, #12]
 80168e6:	ea31 0303 	bics.w	r3, r1, r3
 80168ea:	d14a      	bne.n	8016982 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 80168ec:	4b26      	ldr	r3, [pc, #152]	; (8016988 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 80168ee:	685b      	ldr	r3, [r3, #4]
 80168f0:	b123      	cbz	r3, 80168fc <UTIL_ADV_TRACE_COND_FSend+0x30>
 80168f2:	b11a      	cbz	r2, 80168fc <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 80168f4:	f10d 0102 	add.w	r1, sp, #2
 80168f8:	a801      	add	r0, sp, #4
 80168fa:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 80168fc:	ab0a      	add	r3, sp, #40	; 0x28
 80168fe:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8016900:	4622      	mov	r2, r4
 8016902:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016906:	4821      	ldr	r0, [pc, #132]	; (801698c <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8016908:	f000 fcba 	bl	8017280 <tiny_vsnprintf_like>
 801690c:	b285      	uxth	r5, r0
  TRACE_Lock();
 801690e:	f7ff ff49 	bl	80167a4 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8016912:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8016916:	4428      	add	r0, r5
 8016918:	4669      	mov	r1, sp
 801691a:	b280      	uxth	r0, r0
 801691c:	f7ff ff04 	bl	8016728 <TRACE_AllocateBufer>
 8016920:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016924:	d025      	beq.n	8016972 <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 8016926:	2300      	movs	r3, #0
 8016928:	e00c      	b.n	8016944 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801692a:	f8bd 2000 	ldrh.w	r2, [sp]
 801692e:	a906      	add	r1, sp, #24
 8016930:	4419      	add	r1, r3
 8016932:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8016936:	4916      	ldr	r1, [pc, #88]	; (8016990 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8016938:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 801693a:	3201      	adds	r2, #1
 801693c:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8016940:	3301      	adds	r3, #1
 8016942:	b29b      	uxth	r3, r3
 8016944:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8016948:	429a      	cmp	r2, r3
 801694a:	d8ee      	bhi.n	801692a <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801694c:	f8bd 0000 	ldrh.w	r0, [sp]
 8016950:	9b05      	ldr	r3, [sp, #20]
 8016952:	4622      	mov	r2, r4
 8016954:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016958:	4c0d      	ldr	r4, [pc, #52]	; (8016990 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 801695a:	4420      	add	r0, r4
 801695c:	f000 fc90 	bl	8017280 <tiny_vsnprintf_like>
    TRACE_UnLock();
 8016960:	f7ff ff2c 	bl	80167bc <TRACE_UnLock>
    return TRACE_Send();
 8016964:	f7ff ff64 	bl	8016830 <TRACE_Send>
}
 8016968:	b006      	add	sp, #24
 801696a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801696e:	b001      	add	sp, #4
 8016970:	4770      	bx	lr
  TRACE_UnLock();
 8016972:	f7ff ff23 	bl	80167bc <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8016976:	f06f 0002 	mvn.w	r0, #2
 801697a:	e7f5      	b.n	8016968 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 801697c:	f06f 0004 	mvn.w	r0, #4
 8016980:	e7f2      	b.n	8016968 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8016982:	f06f 0005 	mvn.w	r0, #5
 8016986:	e7ef      	b.n	8016968 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 8016988:	20001984 	.word	0x20001984
 801698c:	2000199c 	.word	0x2000199c
 8016990:	20001584 	.word	0x20001584

08016994 <TRACE_TxCpltCallback>:
{
 8016994:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016996:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801699a:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801699c:	4b25      	ldr	r3, [pc, #148]	; (8016a34 <TRACE_TxCpltCallback+0xa0>)
 801699e:	789b      	ldrb	r3, [r3, #2]
 80169a0:	2b02      	cmp	r3, #2
 80169a2:	d016      	beq.n	80169d2 <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 80169a4:	4a23      	ldr	r2, [pc, #140]	; (8016a34 <TRACE_TxCpltCallback+0xa0>)
 80169a6:	8a13      	ldrh	r3, [r2, #16]
 80169a8:	8a90      	ldrh	r0, [r2, #20]
 80169aa:	4403      	add	r3, r0
 80169ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80169b0:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 80169b2:	4b20      	ldr	r3, [pc, #128]	; (8016a34 <TRACE_TxCpltCallback+0xa0>)
 80169b4:	8a1a      	ldrh	r2, [r3, #16]
 80169b6:	8a5b      	ldrh	r3, [r3, #18]
 80169b8:	429a      	cmp	r2, r3
 80169ba:	d003      	beq.n	80169c4 <TRACE_TxCpltCallback+0x30>
 80169bc:	481d      	ldr	r0, [pc, #116]	; (8016a34 <TRACE_TxCpltCallback+0xa0>)
 80169be:	8ac0      	ldrh	r0, [r0, #22]
 80169c0:	2801      	cmp	r0, #1
 80169c2:	d00b      	beq.n	80169dc <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80169c4:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 80169c8:	f7eb ff2a 	bl	8002820 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 80169cc:	f7ff fef6 	bl	80167bc <TRACE_UnLock>
}
 80169d0:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80169d2:	4b18      	ldr	r3, [pc, #96]	; (8016a34 <TRACE_TxCpltCallback+0xa0>)
 80169d4:	2200      	movs	r2, #0
 80169d6:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 80169d8:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 80169da:	e7ea      	b.n	80169b2 <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80169dc:	4815      	ldr	r0, [pc, #84]	; (8016a34 <TRACE_TxCpltCallback+0xa0>)
 80169de:	7880      	ldrb	r0, [r0, #2]
 80169e0:	2801      	cmp	r0, #1
 80169e2:	d014      	beq.n	8016a0e <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80169e4:	4a13      	ldr	r2, [pc, #76]	; (8016a34 <TRACE_TxCpltCallback+0xa0>)
 80169e6:	7892      	ldrb	r2, [r2, #2]
 80169e8:	b932      	cbnz	r2, 80169f8 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80169ea:	4a12      	ldr	r2, [pc, #72]	; (8016a34 <TRACE_TxCpltCallback+0xa0>)
 80169ec:	8a12      	ldrh	r2, [r2, #16]
 80169ee:	4293      	cmp	r3, r2
 80169f0:	d91b      	bls.n	8016a2a <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80169f2:	1a9b      	subs	r3, r3, r2
 80169f4:	4a0f      	ldr	r2, [pc, #60]	; (8016a34 <TRACE_TxCpltCallback+0xa0>)
 80169f6:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80169f8:	4b0e      	ldr	r3, [pc, #56]	; (8016a34 <TRACE_TxCpltCallback+0xa0>)
 80169fa:	8a1a      	ldrh	r2, [r3, #16]
 80169fc:	480e      	ldr	r0, [pc, #56]	; (8016a38 <TRACE_TxCpltCallback+0xa4>)
 80169fe:	4410      	add	r0, r2
 8016a00:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8016a04:	4a0d      	ldr	r2, [pc, #52]	; (8016a3c <TRACE_TxCpltCallback+0xa8>)
 8016a06:	68d2      	ldr	r2, [r2, #12]
 8016a08:	8a99      	ldrh	r1, [r3, #20]
 8016a0a:	4790      	blx	r2
 8016a0c:	e7e0      	b.n	80169d0 <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8016a0e:	4c09      	ldr	r4, [pc, #36]	; (8016a34 <TRACE_TxCpltCallback+0xa0>)
 8016a10:	8820      	ldrh	r0, [r4, #0]
 8016a12:	1a82      	subs	r2, r0, r2
 8016a14:	b292      	uxth	r2, r2
 8016a16:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8016a18:	2002      	movs	r0, #2
 8016a1a:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8016a1c:	2000      	movs	r0, #0
 8016a1e:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8016a20:	2a00      	cmp	r2, #0
 8016a22:	d1df      	bne.n	80169e4 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8016a24:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8016a26:	8220      	strh	r0, [r4, #16]
 8016a28:	e7dc      	b.n	80169e4 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8016a2a:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8016a2e:	4a01      	ldr	r2, [pc, #4]	; (8016a34 <TRACE_TxCpltCallback+0xa0>)
 8016a30:	8293      	strh	r3, [r2, #20]
 8016a32:	e7e1      	b.n	80169f8 <TRACE_TxCpltCallback+0x64>
 8016a34:	20001984 	.word	0x20001984
 8016a38:	20001584 	.word	0x20001584
 8016a3c:	08017984 	.word	0x08017984

08016a40 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8016a40:	2300      	movs	r3, #0
 8016a42:	4a02      	ldr	r2, [pc, #8]	; (8016a4c <UTIL_LPM_Init+0xc>)
 8016a44:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8016a46:	4a02      	ldr	r2, [pc, #8]	; (8016a50 <UTIL_LPM_Init+0x10>)
 8016a48:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8016a4a:	4770      	bx	lr
 8016a4c:	20001ba0 	.word	0x20001ba0
 8016a50:	20001b9c 	.word	0x20001b9c

08016a54 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016a54:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016a58:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8016a5a:	b141      	cbz	r1, 8016a6e <UTIL_LPM_SetStopMode+0x1a>
 8016a5c:	2901      	cmp	r1, #1
 8016a5e:	d103      	bne.n	8016a68 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8016a60:	4906      	ldr	r1, [pc, #24]	; (8016a7c <UTIL_LPM_SetStopMode+0x28>)
 8016a62:	680a      	ldr	r2, [r1, #0]
 8016a64:	4310      	orrs	r0, r2
 8016a66:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a68:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8016a6c:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8016a6e:	4903      	ldr	r1, [pc, #12]	; (8016a7c <UTIL_LPM_SetStopMode+0x28>)
 8016a70:	680a      	ldr	r2, [r1, #0]
 8016a72:	ea22 0000 	bic.w	r0, r2, r0
 8016a76:	6008      	str	r0, [r1, #0]
      break;
 8016a78:	e7f6      	b.n	8016a68 <UTIL_LPM_SetStopMode+0x14>
 8016a7a:	bf00      	nop
 8016a7c:	20001ba0 	.word	0x20001ba0

08016a80 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016a80:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016a84:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8016a86:	b141      	cbz	r1, 8016a9a <UTIL_LPM_SetOffMode+0x1a>
 8016a88:	2901      	cmp	r1, #1
 8016a8a:	d103      	bne.n	8016a94 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8016a8c:	4906      	ldr	r1, [pc, #24]	; (8016aa8 <UTIL_LPM_SetOffMode+0x28>)
 8016a8e:	680a      	ldr	r2, [r1, #0]
 8016a90:	4310      	orrs	r0, r2
 8016a92:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a94:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8016a98:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8016a9a:	4903      	ldr	r1, [pc, #12]	; (8016aa8 <UTIL_LPM_SetOffMode+0x28>)
 8016a9c:	680a      	ldr	r2, [r1, #0]
 8016a9e:	ea22 0000 	bic.w	r0, r2, r0
 8016aa2:	6008      	str	r0, [r1, #0]
      break;
 8016aa4:	e7f6      	b.n	8016a94 <UTIL_LPM_SetOffMode+0x14>
 8016aa6:	bf00      	nop
 8016aa8:	20001b9c 	.word	0x20001b9c

08016aac <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8016aac:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016aae:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016ab2:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8016ab4:	4b0c      	ldr	r3, [pc, #48]	; (8016ae8 <UTIL_LPM_EnterLowPower+0x3c>)
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	b13b      	cbz	r3, 8016aca <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8016aba:	4d0c      	ldr	r5, [pc, #48]	; (8016aec <UTIL_LPM_EnterLowPower+0x40>)
 8016abc:	682b      	ldr	r3, [r5, #0]
 8016abe:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8016ac0:	686b      	ldr	r3, [r5, #4]
 8016ac2:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ac4:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8016ac8:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8016aca:	4b09      	ldr	r3, [pc, #36]	; (8016af0 <UTIL_LPM_EnterLowPower+0x44>)
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	b12b      	cbz	r3, 8016adc <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8016ad0:	4d06      	ldr	r5, [pc, #24]	; (8016aec <UTIL_LPM_EnterLowPower+0x40>)
 8016ad2:	68ab      	ldr	r3, [r5, #8]
 8016ad4:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8016ad6:	68eb      	ldr	r3, [r5, #12]
 8016ad8:	4798      	blx	r3
 8016ada:	e7f3      	b.n	8016ac4 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8016adc:	4d03      	ldr	r5, [pc, #12]	; (8016aec <UTIL_LPM_EnterLowPower+0x40>)
 8016ade:	692b      	ldr	r3, [r5, #16]
 8016ae0:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8016ae2:	696b      	ldr	r3, [r5, #20]
 8016ae4:	4798      	blx	r3
 8016ae6:	e7ed      	b.n	8016ac4 <UTIL_LPM_EnterLowPower+0x18>
 8016ae8:	20001ba0 	.word	0x20001ba0
 8016aec:	0801792c 	.word	0x0801792c
 8016af0:	20001b9c 	.word	0x20001b9c

08016af4 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8016af4:	1e53      	subs	r3, r2, #1
 8016af6:	b29b      	uxth	r3, r3
 8016af8:	b12a      	cbz	r2, 8016b06 <UTIL_MEM_cpy_8+0x12>
    {
        *dst8++ = *src8++;
 8016afa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016afe:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8016b02:	461a      	mov	r2, r3
 8016b04:	e7f6      	b.n	8016af4 <UTIL_MEM_cpy_8>
    }
}
 8016b06:	4770      	bx	lr

08016b08 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8016b08:	1e53      	subs	r3, r2, #1
 8016b0a:	b29b      	uxth	r3, r3
 8016b0c:	b11a      	cbz	r2, 8016b16 <UTIL_MEM_set_8+0xe>
  {
    *dst8++ = value;
 8016b0e:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8016b12:	461a      	mov	r2, r3
 8016b14:	e7f8      	b.n	8016b08 <UTIL_MEM_set_8>
  }
}
 8016b16:	4770      	bx	lr

08016b18 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8016b18:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016b1a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016b1e:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8016b20:	4a06      	ldr	r2, [pc, #24]	; (8016b3c <UTIL_SEQ_SetTask+0x24>)
 8016b22:	6813      	ldr	r3, [r2, #0]
 8016b24:	4303      	orrs	r3, r0
 8016b26:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8016b28:	4a05      	ldr	r2, [pc, #20]	; (8016b40 <UTIL_SEQ_SetTask+0x28>)
 8016b2a:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8016b2e:	4318      	orrs	r0, r3
 8016b30:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b34:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8016b38:	bc10      	pop	{r4}
 8016b3a:	4770      	bx	lr
 8016b3c:	20001c40 	.word	0x20001c40
 8016b40:	20001c30 	.word	0x20001c30

08016b44 <UTIL_SEQ_PreIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8016b44:	4770      	bx	lr

08016b46 <UTIL_SEQ_PostIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8016b46:	4770      	bx	lr

08016b48 <SEQ_BitPosition>:
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8016b48:	0c03      	lsrs	r3, r0, #16
 8016b4a:	041b      	lsls	r3, r3, #16
 8016b4c:	b9b3      	cbnz	r3, 8016b7c <SEQ_BitPosition+0x34>
 8016b4e:	0400      	lsls	r0, r0, #16
 8016b50:	2310      	movs	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8016b52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016b56:	d102      	bne.n	8016b5e <SEQ_BitPosition+0x16>
 8016b58:	3308      	adds	r3, #8
 8016b5a:	b2db      	uxtb	r3, r3
 8016b5c:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8016b5e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016b62:	d102      	bne.n	8016b6a <SEQ_BitPosition+0x22>
 8016b64:	3304      	adds	r3, #4
 8016b66:	b2db      	uxtb	r3, r3
 8016b68:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8016b6a:	0f00      	lsrs	r0, r0, #28
 8016b6c:	4a04      	ldr	r2, [pc, #16]	; (8016b80 <SEQ_BitPosition+0x38>)
 8016b6e:	5c10      	ldrb	r0, [r2, r0]
 8016b70:	4418      	add	r0, r3
 8016b72:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8016b74:	f1c0 001f 	rsb	r0, r0, #31
}
 8016b78:	b2c0      	uxtb	r0, r0
 8016b7a:	4770      	bx	lr
  uint8_t n = 0U;
 8016b7c:	2300      	movs	r3, #0
 8016b7e:	e7e8      	b.n	8016b52 <SEQ_BitPosition+0xa>
 8016b80:	08018534 	.word	0x08018534

08016b84 <UTIL_SEQ_Run>:
{
 8016b84:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 8016b86:	4b3b      	ldr	r3, [pc, #236]	; (8016c74 <UTIL_SEQ_Run+0xf0>)
 8016b88:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8016b8a:	4020      	ands	r0, r4
 8016b8c:	6018      	str	r0, [r3, #0]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8016b8e:	e012      	b.n	8016bb6 <UTIL_SEQ_Run+0x32>
      counter++;
 8016b90:	3301      	adds	r3, #1
 8016b92:	e01f      	b.n	8016bd4 <UTIL_SEQ_Run+0x50>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8016b94:	3b01      	subs	r3, #1
 8016b96:	4938      	ldr	r1, [pc, #224]	; (8016c78 <UTIL_SEQ_Run+0xf4>)
 8016b98:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8016b9c:	4002      	ands	r2, r0
 8016b9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d1f6      	bne.n	8016b94 <UTIL_SEQ_Run+0x10>
 8016ba6:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 8016baa:	4b34      	ldr	r3, [pc, #208]	; (8016c7c <UTIL_SEQ_Run+0xf8>)
 8016bac:	681a      	ldr	r2, [r3, #0]
 8016bae:	4b34      	ldr	r3, [pc, #208]	; (8016c80 <UTIL_SEQ_Run+0xfc>)
 8016bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bb4:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8016bb6:	4b33      	ldr	r3, [pc, #204]	; (8016c84 <UTIL_SEQ_Run+0x100>)
 8016bb8:	6819      	ldr	r1, [r3, #0]
 8016bba:	4b33      	ldr	r3, [pc, #204]	; (8016c88 <UTIL_SEQ_Run+0x104>)
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	400b      	ands	r3, r1
 8016bc0:	4a2c      	ldr	r2, [pc, #176]	; (8016c74 <UTIL_SEQ_Run+0xf0>)
 8016bc2:	6812      	ldr	r2, [r2, #0]
 8016bc4:	4213      	tst	r3, r2
 8016bc6:	d033      	beq.n	8016c30 <UTIL_SEQ_Run+0xac>
 8016bc8:	4b30      	ldr	r3, [pc, #192]	; (8016c8c <UTIL_SEQ_Run+0x108>)
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	4830      	ldr	r0, [pc, #192]	; (8016c90 <UTIL_SEQ_Run+0x10c>)
 8016bce:	6800      	ldr	r0, [r0, #0]
 8016bd0:	4003      	ands	r3, r0
 8016bd2:	d12d      	bne.n	8016c30 <UTIL_SEQ_Run+0xac>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8016bd4:	4828      	ldr	r0, [pc, #160]	; (8016c78 <UTIL_SEQ_Run+0xf4>)
 8016bd6:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 8016bda:	4008      	ands	r0, r1
 8016bdc:	4010      	ands	r0, r2
 8016bde:	d0d7      	beq.n	8016b90 <UTIL_SEQ_Run+0xc>
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8016be0:	4a25      	ldr	r2, [pc, #148]	; (8016c78 <UTIL_SEQ_Run+0xf4>)
 8016be2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016be6:	6852      	ldr	r2, [r2, #4]
 8016be8:	4210      	tst	r0, r2
 8016bea:	d105      	bne.n	8016bf8 <UTIL_SEQ_Run+0x74>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8016bec:	4a22      	ldr	r2, [pc, #136]	; (8016c78 <UTIL_SEQ_Run+0xf4>)
 8016bee:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016bf2:	f04f 31ff 	mov.w	r1, #4294967295
 8016bf6:	6051      	str	r1, [r2, #4]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8016bf8:	4d1f      	ldr	r5, [pc, #124]	; (8016c78 <UTIL_SEQ_Run+0xf4>)
 8016bfa:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8016bfe:	686e      	ldr	r6, [r5, #4]
 8016c00:	4030      	ands	r0, r6
 8016c02:	f7ff ffa1 	bl	8016b48 <SEQ_BitPosition>
 8016c06:	4a1d      	ldr	r2, [pc, #116]	; (8016c7c <UTIL_SEQ_Run+0xf8>)
 8016c08:	6010      	str	r0, [r2, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8016c0a:	2301      	movs	r3, #1
 8016c0c:	fa03 f000 	lsl.w	r0, r3, r0
 8016c10:	ea26 0000 	bic.w	r0, r6, r0
 8016c14:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c16:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016c1a:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8016c1c:	6812      	ldr	r2, [r2, #0]
 8016c1e:	4093      	lsls	r3, r2
 8016c20:	43d8      	mvns	r0, r3
 8016c22:	4919      	ldr	r1, [pc, #100]	; (8016c88 <UTIL_SEQ_Run+0x104>)
 8016c24:	680a      	ldr	r2, [r1, #0]
 8016c26:	ea22 0303 	bic.w	r3, r2, r3
 8016c2a:	600b      	str	r3, [r1, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8016c2c:	2302      	movs	r3, #2
 8016c2e:	e7b8      	b.n	8016ba2 <UTIL_SEQ_Run+0x1e>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8016c30:	4b12      	ldr	r3, [pc, #72]	; (8016c7c <UTIL_SEQ_Run+0xf8>)
 8016c32:	f04f 32ff 	mov.w	r2, #4294967295
 8016c36:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8016c38:	f7ff ff84 	bl	8016b44 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c3c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016c40:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8016c42:	4b11      	ldr	r3, [pc, #68]	; (8016c88 <UTIL_SEQ_Run+0x104>)
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	4a0f      	ldr	r2, [pc, #60]	; (8016c84 <UTIL_SEQ_Run+0x100>)
 8016c48:	6812      	ldr	r2, [r2, #0]
 8016c4a:	4013      	ands	r3, r2
 8016c4c:	4a09      	ldr	r2, [pc, #36]	; (8016c74 <UTIL_SEQ_Run+0xf0>)
 8016c4e:	6812      	ldr	r2, [r2, #0]
 8016c50:	4213      	tst	r3, r2
 8016c52:	d105      	bne.n	8016c60 <UTIL_SEQ_Run+0xdc>
 8016c54:	4b0d      	ldr	r3, [pc, #52]	; (8016c8c <UTIL_SEQ_Run+0x108>)
 8016c56:	681a      	ldr	r2, [r3, #0]
 8016c58:	4b0d      	ldr	r3, [pc, #52]	; (8016c90 <UTIL_SEQ_Run+0x10c>)
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	421a      	tst	r2, r3
 8016c5e:	d006      	beq.n	8016c6e <UTIL_SEQ_Run+0xea>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c60:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8016c64:	f7ff ff6f 	bl	8016b46 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8016c68:	4b02      	ldr	r3, [pc, #8]	; (8016c74 <UTIL_SEQ_Run+0xf0>)
 8016c6a:	601c      	str	r4, [r3, #0]
}
 8016c6c:	bd70      	pop	{r4, r5, r6, pc}
	UTIL_SEQ_Idle( );
 8016c6e:	f7eb fdcd 	bl	800280c <UTIL_SEQ_Idle>
 8016c72:	e7f5      	b.n	8016c60 <UTIL_SEQ_Run+0xdc>
 8016c74:	200000d4 	.word	0x200000d4
 8016c78:	20001c30 	.word	0x20001c30
 8016c7c:	20001ba4 	.word	0x20001ba4
 8016c80:	20001bb0 	.word	0x20001bb0
 8016c84:	200000d8 	.word	0x200000d8
 8016c88:	20001c40 	.word	0x20001c40
 8016c8c:	20001ba8 	.word	0x20001ba8
 8016c90:	20001bac 	.word	0x20001bac

08016c94 <UTIL_SEQ_RegTask>:
{
 8016c94:	b538      	push	{r3, r4, r5, lr}
 8016c96:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c98:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016c9c:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8016c9e:	f7ff ff53 	bl	8016b48 <SEQ_BitPosition>
 8016ca2:	4b03      	ldr	r3, [pc, #12]	; (8016cb0 <UTIL_SEQ_RegTask+0x1c>)
 8016ca4:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ca8:	f385 8810 	msr	PRIMASK, r5
}
 8016cac:	bd38      	pop	{r3, r4, r5, pc}
 8016cae:	bf00      	nop
 8016cb0:	20001bb0 	.word	0x20001bb0

08016cb4 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8016cb4:	b082      	sub	sp, #8
 8016cb6:	b082      	sub	sp, #8
 8016cb8:	f10d 0c08 	add.w	ip, sp, #8
 8016cbc:	e90c 0006 	stmdb	ip, {r1, r2}
 8016cc0:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds + b.Seconds;
 8016cc2:	9a00      	ldr	r2, [sp, #0]
 8016cc4:	4413      	add	r3, r2
 8016cc6:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8016cc8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8016ccc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8016cd0:	440a      	add	r2, r1
 8016cd2:	b291      	uxth	r1, r2
 8016cd4:	b212      	sxth	r2, r2
 8016cd6:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8016cd8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8016cdc:	db04      	blt.n	8016ce8 <SysTimeAdd+0x34>
  {
    c.Seconds++;
 8016cde:	3301      	adds	r3, #1
 8016ce0:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8016ce2:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8016ce6:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8016ce8:	b002      	add	sp, #8
 8016cea:	b002      	add	sp, #8
 8016cec:	4770      	bx	lr

08016cee <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8016cee:	b082      	sub	sp, #8
 8016cf0:	b082      	sub	sp, #8
 8016cf2:	f10d 0c08 	add.w	ip, sp, #8
 8016cf6:	e90c 0006 	stmdb	ip, {r1, r2}
 8016cfa:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds - b.Seconds;
 8016cfc:	9a00      	ldr	r2, [sp, #0]
 8016cfe:	1ad3      	subs	r3, r2, r3
 8016d00:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8016d02:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8016d06:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8016d0a:	1a52      	subs	r2, r2, r1
 8016d0c:	b291      	uxth	r1, r2
 8016d0e:	b212      	sxth	r2, r2
 8016d10:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 8016d12:	2a00      	cmp	r2, #0
 8016d14:	db02      	blt.n	8016d1c <SysTimeSub+0x2e>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 8016d16:	b002      	add	sp, #8
 8016d18:	b002      	add	sp, #8
 8016d1a:	4770      	bx	lr
    c.Seconds--;
 8016d1c:	3b01      	subs	r3, #1
 8016d1e:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8016d20:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8016d24:	8081      	strh	r1, [r0, #4]
  return c;
 8016d26:	e7f6      	b.n	8016d16 <SysTimeSub+0x28>

08016d28 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8016d28:	b530      	push	{r4, r5, lr}
 8016d2a:	b089      	sub	sp, #36	; 0x24
 8016d2c:	ac02      	add	r4, sp, #8
 8016d2e:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8016d32:	2300      	movs	r3, #0
 8016d34:	9304      	str	r3, [sp, #16]
 8016d36:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8016d3a:	4d0b      	ldr	r5, [pc, #44]	; (8016d68 <SysTimeSet+0x40>)
 8016d3c:	692b      	ldr	r3, [r5, #16]
 8016d3e:	a805      	add	r0, sp, #20
 8016d40:	4798      	blx	r3
 8016d42:	4603      	mov	r3, r0
 8016d44:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8016d46:	9a05      	ldr	r2, [sp, #20]
 8016d48:	9200      	str	r2, [sp, #0]
 8016d4a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8016d4e:	a806      	add	r0, sp, #24
 8016d50:	f7ff ffcd 	bl	8016cee <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8016d54:	682b      	ldr	r3, [r5, #0]
 8016d56:	9806      	ldr	r0, [sp, #24]
 8016d58:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8016d5a:	68ab      	ldr	r3, [r5, #8]
 8016d5c:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8016d60:	4798      	blx	r3
}
 8016d62:	b009      	add	sp, #36	; 0x24
 8016d64:	bd30      	pop	{r4, r5, pc}
 8016d66:	bf00      	nop
 8016d68:	08017944 	.word	0x08017944

08016d6c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8016d6c:	b530      	push	{r4, r5, lr}
 8016d6e:	b087      	sub	sp, #28
 8016d70:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8016d72:	2300      	movs	r3, #0
 8016d74:	9304      	str	r3, [sp, #16]
 8016d76:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8016d7a:	4d0b      	ldr	r5, [pc, #44]	; (8016da8 <SysTimeGet+0x3c>)
 8016d7c:	692b      	ldr	r3, [r5, #16]
 8016d7e:	a805      	add	r0, sp, #20
 8016d80:	4798      	blx	r3
 8016d82:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8016d84:	68eb      	ldr	r3, [r5, #12]
 8016d86:	4798      	blx	r3
 8016d88:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8016d8c:	686b      	ldr	r3, [r5, #4]
 8016d8e:	4798      	blx	r3
 8016d90:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8016d92:	9b05      	ldr	r3, [sp, #20]
 8016d94:	9300      	str	r3, [sp, #0]
 8016d96:	9b04      	ldr	r3, [sp, #16]
 8016d98:	9a03      	ldr	r2, [sp, #12]
 8016d9a:	4601      	mov	r1, r0
 8016d9c:	4620      	mov	r0, r4
 8016d9e:	f7ff ff89 	bl	8016cb4 <SysTimeAdd>

  return sysTime;
}
 8016da2:	4620      	mov	r0, r4
 8016da4:	b007      	add	sp, #28
 8016da6:	bd30      	pop	{r4, r5, pc}
 8016da8:	08017944 	.word	0x08017944

08016dac <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8016dac:	b530      	push	{r4, r5, lr}
 8016dae:	b083      	sub	sp, #12
 8016db0:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8016db2:	2300      	movs	r3, #0
 8016db4:	9300      	str	r3, [sp, #0]
 8016db6:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8016dba:	4b06      	ldr	r3, [pc, #24]	; (8016dd4 <SysTimeGetMcuTime+0x28>)
 8016dbc:	691b      	ldr	r3, [r3, #16]
 8016dbe:	466d      	mov	r5, sp
 8016dc0:	a801      	add	r0, sp, #4
 8016dc2:	4798      	blx	r3
 8016dc4:	9000      	str	r0, [sp, #0]
  
  return calendarTime;
 8016dc6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016dca:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8016dce:	4620      	mov	r0, r4
 8016dd0:	b003      	add	sp, #12
 8016dd2:	bd30      	pop	{r4, r5, pc}
 8016dd4:	08017944 	.word	0x08017944

08016dd8 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8016dd8:	b530      	push	{r4, r5, lr}
 8016dda:	b089      	sub	sp, #36	; 0x24
 8016ddc:	ac02      	add	r4, sp, #8
 8016dde:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8016de2:	4d0c      	ldr	r5, [pc, #48]	; (8016e14 <SysTimeToMs+0x3c>)
 8016de4:	68eb      	ldr	r3, [r5, #12]
 8016de6:	4798      	blx	r3
 8016de8:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8016dec:	686b      	ldr	r3, [r5, #4]
 8016dee:	4798      	blx	r3
 8016df0:	4603      	mov	r3, r0
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8016df2:	9a07      	ldr	r2, [sp, #28]
 8016df4:	9200      	str	r2, [sp, #0]
 8016df6:	e894 0006 	ldmia.w	r4, {r1, r2}
 8016dfa:	a804      	add	r0, sp, #16
 8016dfc:	f7ff ff77 	bl	8016cee <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8016e00:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 8016e04:	9a04      	ldr	r2, [sp, #16]
 8016e06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016e0a:	fb00 3002 	mla	r0, r0, r2, r3
 8016e0e:	b009      	add	sp, #36	; 0x24
 8016e10:	bd30      	pop	{r4, r5, pc}
 8016e12:	bf00      	nop
 8016e14:	08017944 	.word	0x08017944

08016e18 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8016e18:	b530      	push	{r4, r5, lr}
 8016e1a:	b087      	sub	sp, #28
 8016e1c:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 8016e1e:	4b11      	ldr	r3, [pc, #68]	; (8016e64 <SysTimeFromMs+0x4c>)
 8016e20:	fba3 2301 	umull	r2, r3, r3, r1
 8016e24:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8016e26:	9304      	str	r3, [sp, #16]
 8016e28:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8016e2c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8016e30:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 8016e34:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8016e38:	2300      	movs	r3, #0
 8016e3a:	f8ad 300e 	strh.w	r3, [sp, #14]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8016e3e:	4d0a      	ldr	r5, [pc, #40]	; (8016e68 <SysTimeFromMs+0x50>)
 8016e40:	68eb      	ldr	r3, [r5, #12]
 8016e42:	4798      	blx	r3
 8016e44:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8016e48:	686b      	ldr	r3, [r5, #4]
 8016e4a:	4798      	blx	r3
 8016e4c:	4603      	mov	r3, r0
  return SysTimeAdd( sysTime, DeltaTime );
 8016e4e:	9a03      	ldr	r2, [sp, #12]
 8016e50:	9200      	str	r2, [sp, #0]
 8016e52:	aa06      	add	r2, sp, #24
 8016e54:	e912 0006 	ldmdb	r2, {r1, r2}
 8016e58:	4620      	mov	r0, r4
 8016e5a:	f7ff ff2b 	bl	8016cb4 <SysTimeAdd>
}
 8016e5e:	4620      	mov	r0, r4
 8016e60:	b007      	add	sp, #28
 8016e62:	bd30      	pop	{r4, r5, pc}
 8016e64:	10624dd3 	.word	0x10624dd3
 8016e68:	08017944 	.word	0x08017944

08016e6c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8016e6c:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8016e6e:	4b03      	ldr	r3, [pc, #12]	; (8016e7c <UTIL_TIMER_Init+0x10>)
 8016e70:	2200      	movs	r2, #0
 8016e72:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8016e74:	4b02      	ldr	r3, [pc, #8]	; (8016e80 <UTIL_TIMER_Init+0x14>)
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	4798      	blx	r3
}
 8016e7a:	bd08      	pop	{r3, pc}
 8016e7c:	20001c44 	.word	0x20001c44
 8016e80:	08017958 	.word	0x08017958

08016e84 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8016e84:	b1a8      	cbz	r0, 8016eb2 <UTIL_TIMER_Create+0x2e>
{
 8016e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e88:	4617      	mov	r7, r2
 8016e8a:	461e      	mov	r6, r3
 8016e8c:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8016e8e:	b193      	cbz	r3, 8016eb6 <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8016e90:	2500      	movs	r5, #0
 8016e92:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8016e94:	4b09      	ldr	r3, [pc, #36]	; (8016ebc <UTIL_TIMER_Create+0x38>)
 8016e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e98:	4608      	mov	r0, r1
 8016e9a:	4798      	blx	r3
 8016e9c:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8016e9e:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8016ea0:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8016ea2:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8016ea4:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8016ea6:	9b06      	ldr	r3, [sp, #24]
 8016ea8:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8016eaa:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8016eac:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8016eae:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8016eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8016eb2:	2001      	movs	r0, #1
}
 8016eb4:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8016eb6:	2001      	movs	r0, #1
 8016eb8:	e7fa      	b.n	8016eb0 <UTIL_TIMER_Create+0x2c>
 8016eba:	bf00      	nop
 8016ebc:	08017958 	.word	0x08017958

08016ec0 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8016ec0:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8016ec2:	4c03      	ldr	r4, [pc, #12]	; (8016ed0 <UTIL_TIMER_GetCurrentTime+0x10>)
 8016ec4:	69e3      	ldr	r3, [r4, #28]
 8016ec6:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8016ec8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016eca:	4798      	blx	r3
}
 8016ecc:	bd10      	pop	{r4, pc}
 8016ece:	bf00      	nop
 8016ed0:	08017958 	.word	0x08017958

08016ed4 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8016ed4:	b570      	push	{r4, r5, r6, lr}
 8016ed6:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8016ed8:	4d05      	ldr	r5, [pc, #20]	; (8016ef0 <UTIL_TIMER_GetElapsedTime+0x1c>)
 8016eda:	69eb      	ldr	r3, [r5, #28]
 8016edc:	4798      	blx	r3
 8016ede:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8016ee0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016ee2:	4630      	mov	r0, r6
 8016ee4:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8016ee6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8016ee8:	1a20      	subs	r0, r4, r0
 8016eea:	4798      	blx	r3
}
 8016eec:	bd70      	pop	{r4, r5, r6, pc}
 8016eee:	bf00      	nop
 8016ef0:	08017958 	.word	0x08017958

08016ef4 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8016ef4:	4b05      	ldr	r3, [pc, #20]	; (8016f0c <TimerExists+0x18>)
 8016ef6:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8016ef8:	b11b      	cbz	r3, 8016f02 <TimerExists+0xe>
  {
    if( cur == TimerObject )
 8016efa:	4283      	cmp	r3, r0
 8016efc:	d003      	beq.n	8016f06 <TimerExists+0x12>
    {
      return true;
    }
    cur = cur->Next;
 8016efe:	695b      	ldr	r3, [r3, #20]
 8016f00:	e7fa      	b.n	8016ef8 <TimerExists+0x4>
  }
  return false;
 8016f02:	2000      	movs	r0, #0
 8016f04:	4770      	bx	lr
      return true;
 8016f06:	2001      	movs	r0, #1
}
 8016f08:	4770      	bx	lr
 8016f0a:	bf00      	nop
 8016f0c:	20001c44 	.word	0x20001c44

08016f10 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8016f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f12:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8016f14:	4e09      	ldr	r6, [pc, #36]	; (8016f3c <TimerSetTimeout+0x2c>)
 8016f16:	6a33      	ldr	r3, [r6, #32]
 8016f18:	4798      	blx	r3
 8016f1a:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8016f1c:	2301      	movs	r3, #1
 8016f1e:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8016f20:	6827      	ldr	r7, [r4, #0]
 8016f22:	69b6      	ldr	r6, [r6, #24]
 8016f24:	47b0      	blx	r6
 8016f26:	4428      	add	r0, r5
 8016f28:	4287      	cmp	r7, r0
 8016f2a:	d202      	bcs.n	8016f32 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8016f2c:	47b0      	blx	r6
 8016f2e:	4405      	add	r5, r0
 8016f30:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8016f32:	4b02      	ldr	r3, [pc, #8]	; (8016f3c <TimerSetTimeout+0x2c>)
 8016f34:	689b      	ldr	r3, [r3, #8]
 8016f36:	6820      	ldr	r0, [r4, #0]
 8016f38:	4798      	blx	r3
}
 8016f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f3c:	08017958 	.word	0x08017958

08016f40 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8016f40:	b368      	cbz	r0, 8016f9e <UTIL_TIMER_Stop+0x5e>
{
 8016f42:	b510      	push	{r4, lr}
 8016f44:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f46:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016f4a:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8016f4c:	4b15      	ldr	r3, [pc, #84]	; (8016fa4 <UTIL_TIMER_Stop+0x64>)
 8016f4e:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8016f50:	2301      	movs	r3, #1
 8016f52:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8016f54:	b1e1      	cbz	r1, 8016f90 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8016f56:	2300      	movs	r3, #0
 8016f58:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8016f5a:	4288      	cmp	r0, r1
 8016f5c:	d006      	beq.n	8016f6c <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8016f5e:	460b      	mov	r3, r1
        while( cur != NULL )
 8016f60:	b1b3      	cbz	r3, 8016f90 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8016f62:	4293      	cmp	r3, r2
 8016f64:	d011      	beq.n	8016f8a <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8016f66:	4619      	mov	r1, r3
            cur = cur->Next;
 8016f68:	695b      	ldr	r3, [r3, #20]
 8016f6a:	e7f9      	b.n	8016f60 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8016f6c:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8016f6e:	6948      	ldr	r0, [r1, #20]
 8016f70:	b120      	cbz	r0, 8016f7c <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8016f72:	4b0c      	ldr	r3, [pc, #48]	; (8016fa4 <UTIL_TIMER_Stop+0x64>)
 8016f74:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8016f76:	f7ff ffcb 	bl	8016f10 <TimerSetTimeout>
 8016f7a:	e009      	b.n	8016f90 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8016f7c:	4b0a      	ldr	r3, [pc, #40]	; (8016fa8 <UTIL_TIMER_Stop+0x68>)
 8016f7e:	68db      	ldr	r3, [r3, #12]
 8016f80:	4798      	blx	r3
            TimerListHead = NULL;
 8016f82:	4b08      	ldr	r3, [pc, #32]	; (8016fa4 <UTIL_TIMER_Stop+0x64>)
 8016f84:	2200      	movs	r2, #0
 8016f86:	601a      	str	r2, [r3, #0]
 8016f88:	e002      	b.n	8016f90 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8016f8a:	695b      	ldr	r3, [r3, #20]
 8016f8c:	b123      	cbz	r3, 8016f98 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8016f8e:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f90:	f384 8810 	msr	PRIMASK, r4
}
 8016f94:	2000      	movs	r0, #0
}
 8016f96:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8016f98:	2300      	movs	r3, #0
 8016f9a:	614b      	str	r3, [r1, #20]
 8016f9c:	e7f8      	b.n	8016f90 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8016f9e:	2001      	movs	r0, #1
}
 8016fa0:	4770      	bx	lr
 8016fa2:	bf00      	nop
 8016fa4:	20001c44 	.word	0x20001c44
 8016fa8:	08017958 	.word	0x08017958

08016fac <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8016fac:	4b0d      	ldr	r3, [pc, #52]	; (8016fe4 <TimerInsertTimer+0x38>)
 8016fae:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8016fb0:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8016fb2:	6951      	ldr	r1, [r2, #20]
 8016fb4:	b189      	cbz	r1, 8016fda <TimerInsertTimer+0x2e>
{
 8016fb6:	b410      	push	{r4}
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8016fb8:	6804      	ldr	r4, [r0, #0]
 8016fba:	6819      	ldr	r1, [r3, #0]
 8016fbc:	428c      	cmp	r4, r1
 8016fbe:	d908      	bls.n	8016fd2 <TimerInsertTimer+0x26>
    {
        cur = next;
 8016fc0:	461a      	mov	r2, r3
        next = next->Next;
 8016fc2:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8016fc4:	6951      	ldr	r1, [r2, #20]
 8016fc6:	2900      	cmp	r1, #0
 8016fc8:	d1f6      	bne.n	8016fb8 <TimerInsertTimer+0xc>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 8016fca:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8016fcc:	2300      	movs	r3, #0
 8016fce:	6143      	str	r3, [r0, #20]
 8016fd0:	e001      	b.n	8016fd6 <TimerInsertTimer+0x2a>
        cur->Next = TimerObject;
 8016fd2:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8016fd4:	6143      	str	r3, [r0, #20]
}
 8016fd6:	bc10      	pop	{r4}
 8016fd8:	4770      	bx	lr
  cur->Next = TimerObject;
 8016fda:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8016fdc:	2300      	movs	r3, #0
 8016fde:	6143      	str	r3, [r0, #20]
 8016fe0:	4770      	bx	lr
 8016fe2:	bf00      	nop
 8016fe4:	20001c44 	.word	0x20001c44

08016fe8 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8016fe8:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8016fea:	4b05      	ldr	r3, [pc, #20]	; (8017000 <TimerInsertNewHeadTimer+0x18>)
 8016fec:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8016fee:	b10b      	cbz	r3, 8016ff4 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8016ff0:	2200      	movs	r2, #0
 8016ff2:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8016ff4:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8016ff6:	4b02      	ldr	r3, [pc, #8]	; (8017000 <TimerInsertNewHeadTimer+0x18>)
 8016ff8:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8016ffa:	f7ff ff89 	bl	8016f10 <TimerSetTimeout>
}
 8016ffe:	bd08      	pop	{r3, pc}
 8017000:	20001c44 	.word	0x20001c44

08017004 <UTIL_TIMER_Start>:
{
 8017004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8017006:	2800      	cmp	r0, #0
 8017008:	d036      	beq.n	8017078 <UTIL_TIMER_Start+0x74>
 801700a:	4604      	mov	r4, r0
 801700c:	f7ff ff72 	bl	8016ef4 <TimerExists>
 8017010:	2800      	cmp	r0, #0
 8017012:	d134      	bne.n	801707e <UTIL_TIMER_Start+0x7a>
 8017014:	7a65      	ldrb	r5, [r4, #9]
 8017016:	2d00      	cmp	r5, #0
 8017018:	d133      	bne.n	8017082 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801701a:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801701e:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8017020:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8017022:	4b19      	ldr	r3, [pc, #100]	; (8017088 <UTIL_TIMER_Start+0x84>)
 8017024:	6a1b      	ldr	r3, [r3, #32]
 8017026:	4798      	blx	r3
    if( ticks < minValue )
 8017028:	4287      	cmp	r7, r0
 801702a:	d300      	bcc.n	801702e <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 801702c:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 801702e:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8017030:	2300      	movs	r3, #0
 8017032:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8017034:	2201      	movs	r2, #1
 8017036:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8017038:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 801703a:	4b14      	ldr	r3, [pc, #80]	; (801708c <UTIL_TIMER_Start+0x88>)
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	b183      	cbz	r3, 8017062 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8017040:	4b11      	ldr	r3, [pc, #68]	; (8017088 <UTIL_TIMER_Start+0x84>)
 8017042:	699b      	ldr	r3, [r3, #24]
 8017044:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8017046:	6823      	ldr	r3, [r4, #0]
 8017048:	4418      	add	r0, r3
 801704a:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801704c:	4b0f      	ldr	r3, [pc, #60]	; (801708c <UTIL_TIMER_Start+0x88>)
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	4298      	cmp	r0, r3
 8017054:	d20c      	bcs.n	8017070 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8017056:	4620      	mov	r0, r4
 8017058:	f7ff ffc6 	bl	8016fe8 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801705c:	f386 8810 	msr	PRIMASK, r6
}
 8017060:	e00b      	b.n	801707a <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8017062:	4b09      	ldr	r3, [pc, #36]	; (8017088 <UTIL_TIMER_Start+0x84>)
 8017064:	691b      	ldr	r3, [r3, #16]
 8017066:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8017068:	4620      	mov	r0, r4
 801706a:	f7ff ffbd 	bl	8016fe8 <TimerInsertNewHeadTimer>
 801706e:	e7f5      	b.n	801705c <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8017070:	4620      	mov	r0, r4
 8017072:	f7ff ff9b 	bl	8016fac <TimerInsertTimer>
 8017076:	e7f1      	b.n	801705c <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8017078:	2501      	movs	r5, #1
}
 801707a:	4628      	mov	r0, r5
 801707c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 801707e:	2501      	movs	r5, #1
 8017080:	e7fb      	b.n	801707a <UTIL_TIMER_Start+0x76>
 8017082:	2501      	movs	r5, #1
 8017084:	e7f9      	b.n	801707a <UTIL_TIMER_Start+0x76>
 8017086:	bf00      	nop
 8017088:	08017958 	.word	0x08017958
 801708c:	20001c44 	.word	0x20001c44

08017090 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8017090:	b198      	cbz	r0, 80170ba <UTIL_TIMER_SetPeriod+0x2a>
{
 8017092:	b510      	push	{r4, lr}
 8017094:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8017096:	4b0a      	ldr	r3, [pc, #40]	; (80170c0 <UTIL_TIMER_SetPeriod+0x30>)
 8017098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801709a:	4608      	mov	r0, r1
 801709c:	4798      	blx	r3
 801709e:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 80170a0:	4620      	mov	r0, r4
 80170a2:	f7ff ff27 	bl	8016ef4 <TimerExists>
 80170a6:	b908      	cbnz	r0, 80170ac <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80170a8:	2000      	movs	r0, #0
}
 80170aa:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 80170ac:	4620      	mov	r0, r4
 80170ae:	f7ff ff47 	bl	8016f40 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 80170b2:	4620      	mov	r0, r4
 80170b4:	f7ff ffa6 	bl	8017004 <UTIL_TIMER_Start>
 80170b8:	e7f7      	b.n	80170aa <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 80170ba:	2001      	movs	r0, #1
}
 80170bc:	4770      	bx	lr
 80170be:	bf00      	nop
 80170c0:	08017958 	.word	0x08017958

080170c4 <UTIL_TIMER_IRQ_Handler>:
{
 80170c4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80170c6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80170ca:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 80170cc:	4c1e      	ldr	r4, [pc, #120]	; (8017148 <UTIL_TIMER_IRQ_Handler+0x84>)
 80170ce:	6963      	ldr	r3, [r4, #20]
 80170d0:	4798      	blx	r3
 80170d2:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 80170d4:	6923      	ldr	r3, [r4, #16]
 80170d6:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 80170d8:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 80170da:	4b1c      	ldr	r3, [pc, #112]	; (801714c <UTIL_TIMER_IRQ_Handler+0x88>)
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	b923      	cbnz	r3, 80170ea <UTIL_TIMER_IRQ_Handler+0x26>
 80170e0:	e018      	b.n	8017114 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 80170e2:	2200      	movs	r2, #0
 80170e4:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 80170e6:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 80170e8:	b1a3      	cbz	r3, 8017114 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 80170ea:	681a      	ldr	r2, [r3, #0]
 80170ec:	42a2      	cmp	r2, r4
 80170ee:	d9f8      	bls.n	80170e2 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 80170f0:	1a31      	subs	r1, r6, r0
 80170f2:	440a      	add	r2, r1
 80170f4:	601a      	str	r2, [r3, #0]
 80170f6:	e7f6      	b.n	80170e6 <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 80170f8:	4b14      	ldr	r3, [pc, #80]	; (801714c <UTIL_TIMER_IRQ_Handler+0x88>)
 80170fa:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 80170fc:	6962      	ldr	r2, [r4, #20]
 80170fe:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8017100:	2300      	movs	r3, #0
 8017102:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8017104:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8017106:	68e3      	ldr	r3, [r4, #12]
 8017108:	6920      	ldr	r0, [r4, #16]
 801710a:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801710c:	8963      	ldrh	r3, [r4, #10]
 801710e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017112:	d012      	beq.n	801713a <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8017114:	4b0d      	ldr	r3, [pc, #52]	; (801714c <UTIL_TIMER_IRQ_Handler+0x88>)
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	b13b      	cbz	r3, 801712a <UTIL_TIMER_IRQ_Handler+0x66>
 801711a:	681c      	ldr	r4, [r3, #0]
 801711c:	2c00      	cmp	r4, #0
 801711e:	d0eb      	beq.n	80170f8 <UTIL_TIMER_IRQ_Handler+0x34>
 8017120:	4b09      	ldr	r3, [pc, #36]	; (8017148 <UTIL_TIMER_IRQ_Handler+0x84>)
 8017122:	699b      	ldr	r3, [r3, #24]
 8017124:	4798      	blx	r3
 8017126:	4284      	cmp	r4, r0
 8017128:	d3e6      	bcc.n	80170f8 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801712a:	4b08      	ldr	r3, [pc, #32]	; (801714c <UTIL_TIMER_IRQ_Handler+0x88>)
 801712c:	6818      	ldr	r0, [r3, #0]
 801712e:	b108      	cbz	r0, 8017134 <UTIL_TIMER_IRQ_Handler+0x70>
 8017130:	7a03      	ldrb	r3, [r0, #8]
 8017132:	b133      	cbz	r3, 8017142 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017134:	f385 8810 	msr	PRIMASK, r5
}
 8017138:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 801713a:	4620      	mov	r0, r4
 801713c:	f7ff ff62 	bl	8017004 <UTIL_TIMER_Start>
 8017140:	e7e8      	b.n	8017114 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8017142:	f7ff fee5 	bl	8016f10 <TimerSetTimeout>
 8017146:	e7f5      	b.n	8017134 <UTIL_TIMER_IRQ_Handler+0x70>
 8017148:	08017958 	.word	0x08017958
 801714c:	20001c44 	.word	0x20001c44

08017150 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8017150:	4601      	mov	r1, r0
  int i = 0;
 8017152:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8017154:	680a      	ldr	r2, [r1, #0]
 8017156:	7813      	ldrb	r3, [r2, #0]
 8017158:	3b30      	subs	r3, #48	; 0x30
 801715a:	b2db      	uxtb	r3, r3
 801715c:	2b09      	cmp	r3, #9
 801715e:	d808      	bhi.n	8017172 <ee_skip_atoi+0x22>
 8017160:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017164:	1c53      	adds	r3, r2, #1
 8017166:	600b      	str	r3, [r1, #0]
 8017168:	7813      	ldrb	r3, [r2, #0]
 801716a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 801716e:	3830      	subs	r0, #48	; 0x30
 8017170:	e7f0      	b.n	8017154 <ee_skip_atoi+0x4>
  return i;
}
 8017172:	4770      	bx	lr

08017174 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8017174:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8017178:	b093      	sub	sp, #76	; 0x4c
 801717a:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 801717c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801717e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017182:	d111      	bne.n	80171a8 <ee_number+0x34>
  char *dig = lower_digits;
 8017184:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8017278 <ee_number+0x104>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8017188:	469c      	mov	ip, r3
 801718a:	3b02      	subs	r3, #2
 801718c:	2b22      	cmp	r3, #34	; 0x22
 801718e:	d871      	bhi.n	8017274 <ee_number+0x100>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 8017190:	f015 0401 	ands.w	r4, r5, #1
 8017194:	d00b      	beq.n	80171ae <ee_number+0x3a>
 8017196:	2730      	movs	r7, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8017198:	f015 0f02 	tst.w	r5, #2
 801719c:	d010      	beq.n	80171c0 <ee_number+0x4c>
  {
    if (num < 0)
 801719e:	2a00      	cmp	r2, #0
 80171a0:	db07      	blt.n	80171b2 <ee_number+0x3e>
  sign = 0;
 80171a2:	f04f 0e00 	mov.w	lr, #0
 80171a6:	e00d      	b.n	80171c4 <ee_number+0x50>
  if (type & UPPERCASE)  dig = upper_digits;
 80171a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801727c <ee_number+0x108>
 80171ac:	e7ec      	b.n	8017188 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 80171ae:	2720      	movs	r7, #32
 80171b0:	e7f2      	b.n	8017198 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 80171b2:	4252      	negs	r2, r2
      size--;
 80171b4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80171b6:	3b01      	subs	r3, #1
 80171b8:	931a      	str	r3, [sp, #104]	; 0x68
      sign = '-';
 80171ba:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
 80171be:	e001      	b.n	80171c4 <ee_number+0x50>
  sign = 0;
 80171c0:	f04f 0e00 	mov.w	lr, #0
  }
#endif
  
  i = 0;

  if (num == 0)
 80171c4:	b9da      	cbnz	r2, 80171fe <ee_number+0x8a>
    tmp[i++] = '0';
 80171c6:	2330      	movs	r3, #48	; 0x30
 80171c8:	f88d 3004 	strb.w	r3, [sp, #4]
 80171cc:	2501      	movs	r5, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 80171ce:	42b5      	cmp	r5, r6
 80171d0:	dd00      	ble.n	80171d4 <ee_number+0x60>
 80171d2:	462e      	mov	r6, r5
  size -= precision;
 80171d4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80171d6:	1b9b      	subs	r3, r3, r6
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80171d8:	b30c      	cbz	r4, 801721e <ee_number+0xaa>
  if (sign) ASSIGN_STR(sign);
 80171da:	f1be 0f00 	cmp.w	lr, #0
 80171de:	d003      	beq.n	80171e8 <ee_number+0x74>
 80171e0:	f800 eb01 	strb.w	lr, [r0], #1
 80171e4:	3901      	subs	r1, #1
 80171e6:	d007      	beq.n	80171f8 <ee_number+0x84>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80171ee:	dd20      	ble.n	8017232 <ee_number+0xbe>
 80171f0:	f800 7b01 	strb.w	r7, [r0], #1
 80171f4:	3901      	subs	r1, #1
 80171f6:	d1f7      	bne.n	80171e8 <ee_number+0x74>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 80171f8:	b013      	add	sp, #76	; 0x4c
 80171fa:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
  i = 0;
 80171fe:	2500      	movs	r5, #0
    while (num != 0)
 8017200:	2a00      	cmp	r2, #0
 8017202:	d0e4      	beq.n	80171ce <ee_number+0x5a>
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8017204:	fbb2 f3fc 	udiv	r3, r2, ip
 8017208:	fb0c 2213 	mls	r2, ip, r3, r2
 801720c:	f818 a002 	ldrb.w	sl, [r8, r2]
 8017210:	aa12      	add	r2, sp, #72	; 0x48
 8017212:	442a      	add	r2, r5
 8017214:	f802 ac44 	strb.w	sl, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8017218:	461a      	mov	r2, r3
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801721a:	3501      	adds	r5, #1
 801721c:	e7f0      	b.n	8017200 <ee_number+0x8c>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801721e:	2b00      	cmp	r3, #0
 8017220:	f103 33ff 	add.w	r3, r3, #4294967295
 8017224:	ddd9      	ble.n	80171da <ee_number+0x66>
 8017226:	2220      	movs	r2, #32
 8017228:	f800 2b01 	strb.w	r2, [r0], #1
 801722c:	3901      	subs	r1, #1
 801722e:	d1f6      	bne.n	801721e <ee_number+0xaa>
 8017230:	e7e2      	b.n	80171f8 <ee_number+0x84>
  while (i < precision--) ASSIGN_STR('0');
 8017232:	42ae      	cmp	r6, r5
 8017234:	f106 36ff 	add.w	r6, r6, #4294967295
 8017238:	dd05      	ble.n	8017246 <ee_number+0xd2>
 801723a:	2230      	movs	r2, #48	; 0x30
 801723c:	f800 2b01 	strb.w	r2, [r0], #1
 8017240:	3901      	subs	r1, #1
 8017242:	d1f6      	bne.n	8017232 <ee_number+0xbe>
 8017244:	e7d8      	b.n	80171f8 <ee_number+0x84>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8017246:	2d00      	cmp	r5, #0
 8017248:	f105 35ff 	add.w	r5, r5, #4294967295
 801724c:	dd08      	ble.n	8017260 <ee_number+0xec>
 801724e:	aa12      	add	r2, sp, #72	; 0x48
 8017250:	442a      	add	r2, r5
 8017252:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8017256:	f800 2b01 	strb.w	r2, [r0], #1
 801725a:	3901      	subs	r1, #1
 801725c:	d1f3      	bne.n	8017246 <ee_number+0xd2>
 801725e:	e7cb      	b.n	80171f8 <ee_number+0x84>
  while (size-- > 0) ASSIGN_STR(' ');
 8017260:	2b00      	cmp	r3, #0
 8017262:	f103 33ff 	add.w	r3, r3, #4294967295
 8017266:	ddc7      	ble.n	80171f8 <ee_number+0x84>
 8017268:	2220      	movs	r2, #32
 801726a:	f800 2b01 	strb.w	r2, [r0], #1
 801726e:	3901      	subs	r1, #1
 8017270:	d1f6      	bne.n	8017260 <ee_number+0xec>
 8017272:	e7c1      	b.n	80171f8 <ee_number+0x84>
  if (base < 2 || base > 36) return 0;
 8017274:	2000      	movs	r0, #0
 8017276:	e7bf      	b.n	80171f8 <ee_number+0x84>
 8017278:	0801856c 	.word	0x0801856c
 801727c:	08018544 	.word	0x08018544

08017280 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8017280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017284:	b087      	sub	sp, #28
 8017286:	9205      	str	r2, [sp, #20]
 8017288:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801728a:	1e0f      	subs	r7, r1, #0
 801728c:	f340 80b9 	ble.w	8017402 <tiny_vsnprintf_like+0x182>
 8017290:	4606      	mov	r6, r0
  {
    return 0;
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8017292:	4604      	mov	r4, r0
 8017294:	e004      	b.n	80172a0 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);
    
    if (*fmt != '%')
    {
      *str++ = *fmt;
 8017296:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801729a:	9b05      	ldr	r3, [sp, #20]
 801729c:	3301      	adds	r3, #1
 801729e:	9305      	str	r3, [sp, #20]
 80172a0:	9905      	ldr	r1, [sp, #20]
 80172a2:	780a      	ldrb	r2, [r1, #0]
 80172a4:	b922      	cbnz	r2, 80172b0 <tiny_vsnprintf_like+0x30>
 80172a6:	1ba3      	subs	r3, r4, r6
 80172a8:	1e78      	subs	r0, r7, #1
 80172aa:	4283      	cmp	r3, r0
 80172ac:	f2c0 80a3 	blt.w	80173f6 <tiny_vsnprintf_like+0x176>
    CHECK_STR_SIZE(buf, str, size);
 80172b0:	1ba3      	subs	r3, r4, r6
 80172b2:	f107 38ff 	add.w	r8, r7, #4294967295
 80172b6:	4543      	cmp	r3, r8
 80172b8:	f280 809d 	bge.w	80173f6 <tiny_vsnprintf_like+0x176>
    if (*fmt != '%')
 80172bc:	2a25      	cmp	r2, #37	; 0x25
 80172be:	d1ea      	bne.n	8017296 <tiny_vsnprintf_like+0x16>
                  
    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 80172c0:	1c4b      	adds	r3, r1, #1
 80172c2:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 80172c4:	784b      	ldrb	r3, [r1, #1]
 80172c6:	2b30      	cmp	r3, #48	; 0x30
 80172c8:	d020      	beq.n	801730c <tiny_vsnprintf_like+0x8c>
    flags = 0;
 80172ca:	f04f 0900 	mov.w	r9, #0
    }
#endif
    
    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 80172ce:	3b30      	subs	r3, #48	; 0x30
 80172d0:	b2db      	uxtb	r3, r3
 80172d2:	2b09      	cmp	r3, #9
 80172d4:	d91d      	bls.n	8017312 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 80172d6:	f04f 35ff 	mov.w	r5, #4294967295
#endif
    
    // Default base
    base = 10;

    switch (*fmt)
 80172da:	9b05      	ldr	r3, [sp, #20]
 80172dc:	781a      	ldrb	r2, [r3, #0]
 80172de:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 80172e2:	2b20      	cmp	r3, #32
 80172e4:	d868      	bhi.n	80173b8 <tiny_vsnprintf_like+0x138>
 80172e6:	e8df f003 	tbb	[pc, r3]
 80172ea:	674b      	.short	0x674b
 80172ec:	67676767 	.word	0x67676767
 80172f0:	67676767 	.word	0x67676767
 80172f4:	67631b67 	.word	0x67631b67
 80172f8:	63676767 	.word	0x63676767
 80172fc:	67676767 	.word	0x67676767
 8017300:	67676767 	.word	0x67676767
 8017304:	19672967 	.word	0x19672967
 8017308:	6767      	.short	0x6767
 801730a:	7d          	.byte	0x7d
 801730b:	00          	.byte	0x00
      flags |= ZEROPAD;
 801730c:	f04f 0901 	mov.w	r9, #1
 8017310:	e7dd      	b.n	80172ce <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8017312:	a805      	add	r0, sp, #20
 8017314:	f7ff ff1c 	bl	8017150 <ee_skip_atoi>
 8017318:	4605      	mov	r5, r0
 801731a:	e7de      	b.n	80172da <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 801731c:	230a      	movs	r3, #10
 801731e:	e032      	b.n	8017386 <tiny_vsnprintf_like+0x106>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8017320:	3d01      	subs	r5, #1
 8017322:	2d00      	cmp	r5, #0
 8017324:	dd03      	ble.n	801732e <tiny_vsnprintf_like+0xae>
 8017326:	2320      	movs	r3, #32
 8017328:	f804 3b01 	strb.w	r3, [r4], #1
 801732c:	e7f8      	b.n	8017320 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 801732e:	9b04      	ldr	r3, [sp, #16]
 8017330:	1d1a      	adds	r2, r3, #4
 8017332:	9204      	str	r2, [sp, #16]
 8017334:	781b      	ldrb	r3, [r3, #0]
 8017336:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801733a:	e7ae      	b.n	801729a <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 801733c:	9b04      	ldr	r3, [sp, #16]
 801733e:	1d1a      	adds	r2, r3, #4
 8017340:	9204      	str	r2, [sp, #16]
 8017342:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8017346:	f1b8 0f00 	cmp.w	r8, #0
 801734a:	d00a      	beq.n	8017362 <tiny_vsnprintf_like+0xe2>
#ifdef TINY_PRINTF
        len = strlen(s);
 801734c:	4640      	mov	r0, r8
 801734e:	f7e8 ff13 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8017352:	1e6b      	subs	r3, r5, #1
 8017354:	4285      	cmp	r5, r0
 8017356:	dd07      	ble.n	8017368 <tiny_vsnprintf_like+0xe8>
 8017358:	2220      	movs	r2, #32
 801735a:	f804 2b01 	strb.w	r2, [r4], #1
 801735e:	461d      	mov	r5, r3
 8017360:	e7f7      	b.n	8017352 <tiny_vsnprintf_like+0xd2>
        if (!s) s = "<NULL>";
 8017362:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8017408 <tiny_vsnprintf_like+0x188>
 8017366:	e7f1      	b.n	801734c <tiny_vsnprintf_like+0xcc>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8017368:	2200      	movs	r2, #0
 801736a:	e006      	b.n	801737a <tiny_vsnprintf_like+0xfa>
 801736c:	4643      	mov	r3, r8
 801736e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8017372:	f804 1b01 	strb.w	r1, [r4], #1
 8017376:	3201      	adds	r2, #1
 8017378:	4698      	mov	r8, r3
 801737a:	4282      	cmp	r2, r0
 801737c:	dbf6      	blt.n	801736c <tiny_vsnprintf_like+0xec>
 801737e:	e78c      	b.n	801729a <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 8017380:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8017384:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8017386:	f019 0f02 	tst.w	r9, #2
 801738a:	d02f      	beq.n	80173ec <tiny_vsnprintf_like+0x16c>
      num = va_arg(args, int);
 801738c:	9a04      	ldr	r2, [sp, #16]
 801738e:	1d11      	adds	r1, r2, #4
 8017390:	9104      	str	r1, [sp, #16]
 8017392:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8017394:	1ba1      	subs	r1, r4, r6
 8017396:	f8cd 9008 	str.w	r9, [sp, #8]
 801739a:	f04f 30ff 	mov.w	r0, #4294967295
 801739e:	9001      	str	r0, [sp, #4]
 80173a0:	9500      	str	r5, [sp, #0]
 80173a2:	eba8 0101 	sub.w	r1, r8, r1
 80173a6:	4620      	mov	r0, r4
 80173a8:	f7ff fee4 	bl	8017174 <ee_number>
 80173ac:	4604      	mov	r4, r0
 80173ae:	e774      	b.n	801729a <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 80173b0:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 80173b4:	230a      	movs	r3, #10
 80173b6:	e7e6      	b.n	8017386 <tiny_vsnprintf_like+0x106>
        if (*fmt != '%') *str++ = '%';
 80173b8:	2a25      	cmp	r2, #37	; 0x25
 80173ba:	d002      	beq.n	80173c2 <tiny_vsnprintf_like+0x142>
 80173bc:	2325      	movs	r3, #37	; 0x25
 80173be:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 80173c2:	1ba3      	subs	r3, r4, r6
 80173c4:	4598      	cmp	r8, r3
 80173c6:	dd0f      	ble.n	80173e8 <tiny_vsnprintf_like+0x168>
        if (*fmt)
 80173c8:	9b05      	ldr	r3, [sp, #20]
 80173ca:	781a      	ldrb	r2, [r3, #0]
 80173cc:	b13a      	cbz	r2, 80173de <tiny_vsnprintf_like+0x15e>
          *str++ = *fmt;
 80173ce:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 80173d2:	1ba3      	subs	r3, r4, r6
 80173d4:	4598      	cmp	r8, r3
 80173d6:	f73f af60 	bgt.w	801729a <tiny_vsnprintf_like+0x1a>
    base = 10;
 80173da:	230a      	movs	r3, #10
    if (qualifier == 'l')
 80173dc:	e7d3      	b.n	8017386 <tiny_vsnprintf_like+0x106>
          --fmt;
 80173de:	3b01      	subs	r3, #1
 80173e0:	9305      	str	r3, [sp, #20]
 80173e2:	e7f6      	b.n	80173d2 <tiny_vsnprintf_like+0x152>
        base = 16;
 80173e4:	2310      	movs	r3, #16
 80173e6:	e7ce      	b.n	8017386 <tiny_vsnprintf_like+0x106>
    base = 10;
 80173e8:	230a      	movs	r3, #10
 80173ea:	e7cc      	b.n	8017386 <tiny_vsnprintf_like+0x106>
      num = va_arg(args, unsigned int);
 80173ec:	9a04      	ldr	r2, [sp, #16]
 80173ee:	1d11      	adds	r1, r2, #4
 80173f0:	9104      	str	r1, [sp, #16]
 80173f2:	6812      	ldr	r2, [r2, #0]
 80173f4:	e7ce      	b.n	8017394 <tiny_vsnprintf_like+0x114>
  }

  *str = '\0';
 80173f6:	2300      	movs	r3, #0
 80173f8:	7023      	strb	r3, [r4, #0]
  return str - buf;
 80173fa:	1ba0      	subs	r0, r4, r6
}
 80173fc:	b007      	add	sp, #28
 80173fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8017402:	2000      	movs	r0, #0
 8017404:	e7fa      	b.n	80173fc <tiny_vsnprintf_like+0x17c>
 8017406:	bf00      	nop
 8017408:	08018594 	.word	0x08018594

0801740c <__libc_init_array>:
 801740c:	b570      	push	{r4, r5, r6, lr}
 801740e:	4d0d      	ldr	r5, [pc, #52]	; (8017444 <__libc_init_array+0x38>)
 8017410:	4c0d      	ldr	r4, [pc, #52]	; (8017448 <__libc_init_array+0x3c>)
 8017412:	1b64      	subs	r4, r4, r5
 8017414:	10a4      	asrs	r4, r4, #2
 8017416:	2600      	movs	r6, #0
 8017418:	42a6      	cmp	r6, r4
 801741a:	d109      	bne.n	8017430 <__libc_init_array+0x24>
 801741c:	4d0b      	ldr	r5, [pc, #44]	; (801744c <__libc_init_array+0x40>)
 801741e:	4c0c      	ldr	r4, [pc, #48]	; (8017450 <__libc_init_array+0x44>)
 8017420:	f000 f8ae 	bl	8017580 <_init>
 8017424:	1b64      	subs	r4, r4, r5
 8017426:	10a4      	asrs	r4, r4, #2
 8017428:	2600      	movs	r6, #0
 801742a:	42a6      	cmp	r6, r4
 801742c:	d105      	bne.n	801743a <__libc_init_array+0x2e>
 801742e:	bd70      	pop	{r4, r5, r6, pc}
 8017430:	f855 3b04 	ldr.w	r3, [r5], #4
 8017434:	4798      	blx	r3
 8017436:	3601      	adds	r6, #1
 8017438:	e7ee      	b.n	8017418 <__libc_init_array+0xc>
 801743a:	f855 3b04 	ldr.w	r3, [r5], #4
 801743e:	4798      	blx	r3
 8017440:	3601      	adds	r6, #1
 8017442:	e7f2      	b.n	801742a <__libc_init_array+0x1e>
 8017444:	080185a4 	.word	0x080185a4
 8017448:	080185a4 	.word	0x080185a4
 801744c:	080185a4 	.word	0x080185a4
 8017450:	080185a8 	.word	0x080185a8

08017454 <memcpy>:
 8017454:	440a      	add	r2, r1
 8017456:	4291      	cmp	r1, r2
 8017458:	f100 33ff 	add.w	r3, r0, #4294967295
 801745c:	d100      	bne.n	8017460 <memcpy+0xc>
 801745e:	4770      	bx	lr
 8017460:	b510      	push	{r4, lr}
 8017462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017466:	f803 4f01 	strb.w	r4, [r3, #1]!
 801746a:	4291      	cmp	r1, r2
 801746c:	d1f9      	bne.n	8017462 <memcpy+0xe>
 801746e:	bd10      	pop	{r4, pc}

08017470 <memset>:
 8017470:	4402      	add	r2, r0
 8017472:	4603      	mov	r3, r0
 8017474:	4293      	cmp	r3, r2
 8017476:	d100      	bne.n	801747a <memset+0xa>
 8017478:	4770      	bx	lr
 801747a:	f803 1b01 	strb.w	r1, [r3], #1
 801747e:	e7f9      	b.n	8017474 <memset+0x4>

08017480 <floor>:
 8017480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017484:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8017488:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801748c:	2e13      	cmp	r6, #19
 801748e:	4602      	mov	r2, r0
 8017490:	460b      	mov	r3, r1
 8017492:	4607      	mov	r7, r0
 8017494:	460c      	mov	r4, r1
 8017496:	4605      	mov	r5, r0
 8017498:	dc34      	bgt.n	8017504 <floor+0x84>
 801749a:	2e00      	cmp	r6, #0
 801749c:	da15      	bge.n	80174ca <floor+0x4a>
 801749e:	a334      	add	r3, pc, #208	; (adr r3, 8017570 <floor+0xf0>)
 80174a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174a4:	f7e8 fe76 	bl	8000194 <__adddf3>
 80174a8:	2200      	movs	r2, #0
 80174aa:	2300      	movs	r3, #0
 80174ac:	f7e9 f8a6 	bl	80005fc <__aeabi_dcmpgt>
 80174b0:	b140      	cbz	r0, 80174c4 <floor+0x44>
 80174b2:	2c00      	cmp	r4, #0
 80174b4:	da59      	bge.n	801756a <floor+0xea>
 80174b6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80174ba:	ea57 0503 	orrs.w	r5, r7, r3
 80174be:	d001      	beq.n	80174c4 <floor+0x44>
 80174c0:	4c2d      	ldr	r4, [pc, #180]	; (8017578 <floor+0xf8>)
 80174c2:	2500      	movs	r5, #0
 80174c4:	4623      	mov	r3, r4
 80174c6:	462f      	mov	r7, r5
 80174c8:	e025      	b.n	8017516 <floor+0x96>
 80174ca:	4a2c      	ldr	r2, [pc, #176]	; (801757c <floor+0xfc>)
 80174cc:	fa42 f806 	asr.w	r8, r2, r6
 80174d0:	ea01 0208 	and.w	r2, r1, r8
 80174d4:	4302      	orrs	r2, r0
 80174d6:	d01e      	beq.n	8017516 <floor+0x96>
 80174d8:	a325      	add	r3, pc, #148	; (adr r3, 8017570 <floor+0xf0>)
 80174da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174de:	f7e8 fe59 	bl	8000194 <__adddf3>
 80174e2:	2200      	movs	r2, #0
 80174e4:	2300      	movs	r3, #0
 80174e6:	f7e9 f889 	bl	80005fc <__aeabi_dcmpgt>
 80174ea:	2800      	cmp	r0, #0
 80174ec:	d0ea      	beq.n	80174c4 <floor+0x44>
 80174ee:	2c00      	cmp	r4, #0
 80174f0:	bfbe      	ittt	lt
 80174f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80174f6:	fa43 f606 	asrlt.w	r6, r3, r6
 80174fa:	19a4      	addlt	r4, r4, r6
 80174fc:	ea24 0408 	bic.w	r4, r4, r8
 8017500:	2500      	movs	r5, #0
 8017502:	e7df      	b.n	80174c4 <floor+0x44>
 8017504:	2e33      	cmp	r6, #51	; 0x33
 8017506:	dd0a      	ble.n	801751e <floor+0x9e>
 8017508:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801750c:	d103      	bne.n	8017516 <floor+0x96>
 801750e:	f7e8 fe41 	bl	8000194 <__adddf3>
 8017512:	4607      	mov	r7, r0
 8017514:	460b      	mov	r3, r1
 8017516:	4638      	mov	r0, r7
 8017518:	4619      	mov	r1, r3
 801751a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801751e:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8017522:	f04f 32ff 	mov.w	r2, #4294967295
 8017526:	fa22 f808 	lsr.w	r8, r2, r8
 801752a:	ea18 0f00 	tst.w	r8, r0
 801752e:	d0f2      	beq.n	8017516 <floor+0x96>
 8017530:	a30f      	add	r3, pc, #60	; (adr r3, 8017570 <floor+0xf0>)
 8017532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017536:	f7e8 fe2d 	bl	8000194 <__adddf3>
 801753a:	2200      	movs	r2, #0
 801753c:	2300      	movs	r3, #0
 801753e:	f7e9 f85d 	bl	80005fc <__aeabi_dcmpgt>
 8017542:	2800      	cmp	r0, #0
 8017544:	d0be      	beq.n	80174c4 <floor+0x44>
 8017546:	2c00      	cmp	r4, #0
 8017548:	da02      	bge.n	8017550 <floor+0xd0>
 801754a:	2e14      	cmp	r6, #20
 801754c:	d103      	bne.n	8017556 <floor+0xd6>
 801754e:	3401      	adds	r4, #1
 8017550:	ea25 0508 	bic.w	r5, r5, r8
 8017554:	e7b6      	b.n	80174c4 <floor+0x44>
 8017556:	2301      	movs	r3, #1
 8017558:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801755c:	fa03 f606 	lsl.w	r6, r3, r6
 8017560:	4435      	add	r5, r6
 8017562:	42bd      	cmp	r5, r7
 8017564:	bf38      	it	cc
 8017566:	18e4      	addcc	r4, r4, r3
 8017568:	e7f2      	b.n	8017550 <floor+0xd0>
 801756a:	2500      	movs	r5, #0
 801756c:	462c      	mov	r4, r5
 801756e:	e7a9      	b.n	80174c4 <floor+0x44>
 8017570:	8800759c 	.word	0x8800759c
 8017574:	7e37e43c 	.word	0x7e37e43c
 8017578:	bff00000 	.word	0xbff00000
 801757c:	000fffff 	.word	0x000fffff

08017580 <_init>:
 8017580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017582:	bf00      	nop
 8017584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017586:	bc08      	pop	{r3}
 8017588:	469e      	mov	lr, r3
 801758a:	4770      	bx	lr

0801758c <_fini>:
 801758c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801758e:	bf00      	nop
 8017590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017592:	bc08      	pop	{r3}
 8017594:	469e      	mov	lr, r3
 8017596:	4770      	bx	lr
