
sparrow.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017330  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000104c  08017468  08017468  00027468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080184b4  080184b4  000300e4  2**0
                  CONTENTS
  4 .ARM          00000008  080184b4  080184b4  000284b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080184bc  080184bc  000300e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080184bc  080184bc  000284bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080184c0  080184c0  000284c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  080184c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000238c  20000200  080185a8  00030200  2**9
                  ALLOC
 10 ._user_heap_stack 00000a04  2000258c  080185a8  0003258c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000a44a8  00000000  00000000  0003010e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000f063  00000000  00000000  000d45b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00032441  00000000  00000000  000e3619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003618  00000000  00000000  00115a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003858  00000000  00000000  00119078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030108  00000000  00000000  0011c8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005ed1e  00000000  00000000  0014c9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f60c4  00000000  00000000  001ab6f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002a17ba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009fec  00000000  00000000  002a1810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000200 	.word	0x20000200
 8000154:	00000000 	.word	0x00000000
 8000158:	08017450 	.word	0x08017450

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000204 	.word	0x20000204
 8000174:	08017450 	.word	0x08017450

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b96c 	b.w	8000b6c <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9e08      	ldr	r6, [sp, #32]
 80008b2:	460d      	mov	r5, r1
 80008b4:	4604      	mov	r4, r0
 80008b6:	468e      	mov	lr, r1
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	f040 8082 	bne.w	80009c2 <__udivmoddi4+0x116>
 80008be:	428a      	cmp	r2, r1
 80008c0:	4617      	mov	r7, r2
 80008c2:	d946      	bls.n	8000952 <__udivmoddi4+0xa6>
 80008c4:	fab2 f282 	clz	r2, r2
 80008c8:	b14a      	cbz	r2, 80008de <__udivmoddi4+0x32>
 80008ca:	f1c2 0120 	rsb	r1, r2, #32
 80008ce:	fa05 f302 	lsl.w	r3, r5, r2
 80008d2:	fa20 f101 	lsr.w	r1, r0, r1
 80008d6:	4097      	lsls	r7, r2
 80008d8:	ea41 0e03 	orr.w	lr, r1, r3
 80008dc:	4094      	lsls	r4, r2
 80008de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008e2:	0c23      	lsrs	r3, r4, #16
 80008e4:	fbbe fcf8 	udiv	ip, lr, r8
 80008e8:	b2b9      	uxth	r1, r7
 80008ea:	fb08 ee1c 	mls	lr, r8, ip, lr
 80008ee:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80008f2:	fb0c f001 	mul.w	r0, ip, r1
 80008f6:	4298      	cmp	r0, r3
 80008f8:	d90a      	bls.n	8000910 <__udivmoddi4+0x64>
 80008fa:	18fb      	adds	r3, r7, r3
 80008fc:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000900:	f080 8116 	bcs.w	8000b30 <__udivmoddi4+0x284>
 8000904:	4298      	cmp	r0, r3
 8000906:	f240 8113 	bls.w	8000b30 <__udivmoddi4+0x284>
 800090a:	f1ac 0c02 	sub.w	ip, ip, #2
 800090e:	443b      	add	r3, r7
 8000910:	1a1b      	subs	r3, r3, r0
 8000912:	b2a4      	uxth	r4, r4
 8000914:	fbb3 f0f8 	udiv	r0, r3, r8
 8000918:	fb08 3310 	mls	r3, r8, r0, r3
 800091c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000920:	fb00 f101 	mul.w	r1, r0, r1
 8000924:	42a1      	cmp	r1, r4
 8000926:	d909      	bls.n	800093c <__udivmoddi4+0x90>
 8000928:	193c      	adds	r4, r7, r4
 800092a:	f100 33ff 	add.w	r3, r0, #4294967295
 800092e:	f080 8101 	bcs.w	8000b34 <__udivmoddi4+0x288>
 8000932:	42a1      	cmp	r1, r4
 8000934:	f240 80fe 	bls.w	8000b34 <__udivmoddi4+0x288>
 8000938:	3802      	subs	r0, #2
 800093a:	443c      	add	r4, r7
 800093c:	1a64      	subs	r4, r4, r1
 800093e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000942:	2100      	movs	r1, #0
 8000944:	b11e      	cbz	r6, 800094e <__udivmoddi4+0xa2>
 8000946:	40d4      	lsrs	r4, r2
 8000948:	2300      	movs	r3, #0
 800094a:	e9c6 4300 	strd	r4, r3, [r6]
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	b902      	cbnz	r2, 8000956 <__udivmoddi4+0xaa>
 8000954:	deff      	udf	#255	; 0xff
 8000956:	fab2 f282 	clz	r2, r2
 800095a:	2a00      	cmp	r2, #0
 800095c:	d14f      	bne.n	80009fe <__udivmoddi4+0x152>
 800095e:	1bcb      	subs	r3, r1, r7
 8000960:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000964:	fa1f f887 	uxth.w	r8, r7
 8000968:	2101      	movs	r1, #1
 800096a:	fbb3 fcfe 	udiv	ip, r3, lr
 800096e:	0c25      	lsrs	r5, r4, #16
 8000970:	fb0e 331c 	mls	r3, lr, ip, r3
 8000974:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000978:	fb08 f30c 	mul.w	r3, r8, ip
 800097c:	42ab      	cmp	r3, r5
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0xe4>
 8000980:	197d      	adds	r5, r7, r5
 8000982:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0xe2>
 8000988:	42ab      	cmp	r3, r5
 800098a:	f200 80e7 	bhi.w	8000b5c <__udivmoddi4+0x2b0>
 800098e:	4684      	mov	ip, r0
 8000990:	1aed      	subs	r5, r5, r3
 8000992:	b2a3      	uxth	r3, r4
 8000994:	fbb5 f0fe 	udiv	r0, r5, lr
 8000998:	fb0e 5510 	mls	r5, lr, r0, r5
 800099c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80009a0:	fb08 f800 	mul.w	r8, r8, r0
 80009a4:	45a0      	cmp	r8, r4
 80009a6:	d907      	bls.n	80009b8 <__udivmoddi4+0x10c>
 80009a8:	193c      	adds	r4, r7, r4
 80009aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80009ae:	d202      	bcs.n	80009b6 <__udivmoddi4+0x10a>
 80009b0:	45a0      	cmp	r8, r4
 80009b2:	f200 80d7 	bhi.w	8000b64 <__udivmoddi4+0x2b8>
 80009b6:	4618      	mov	r0, r3
 80009b8:	eba4 0408 	sub.w	r4, r4, r8
 80009bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009c0:	e7c0      	b.n	8000944 <__udivmoddi4+0x98>
 80009c2:	428b      	cmp	r3, r1
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x12c>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	f000 80af 	beq.w	8000b2a <__udivmoddi4+0x27e>
 80009cc:	2100      	movs	r1, #0
 80009ce:	e9c6 0500 	strd	r0, r5, [r6]
 80009d2:	4608      	mov	r0, r1
 80009d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d8:	fab3 f183 	clz	r1, r3
 80009dc:	2900      	cmp	r1, #0
 80009de:	d14b      	bne.n	8000a78 <__udivmoddi4+0x1cc>
 80009e0:	42ab      	cmp	r3, r5
 80009e2:	d302      	bcc.n	80009ea <__udivmoddi4+0x13e>
 80009e4:	4282      	cmp	r2, r0
 80009e6:	f200 80b7 	bhi.w	8000b58 <__udivmoddi4+0x2ac>
 80009ea:	1a84      	subs	r4, r0, r2
 80009ec:	eb65 0303 	sbc.w	r3, r5, r3
 80009f0:	2001      	movs	r0, #1
 80009f2:	469e      	mov	lr, r3
 80009f4:	2e00      	cmp	r6, #0
 80009f6:	d0aa      	beq.n	800094e <__udivmoddi4+0xa2>
 80009f8:	e9c6 4e00 	strd	r4, lr, [r6]
 80009fc:	e7a7      	b.n	800094e <__udivmoddi4+0xa2>
 80009fe:	f1c2 0c20 	rsb	ip, r2, #32
 8000a02:	fa01 f302 	lsl.w	r3, r1, r2
 8000a06:	4097      	lsls	r7, r2
 8000a08:	fa20 f00c 	lsr.w	r0, r0, ip
 8000a0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a10:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000a14:	4318      	orrs	r0, r3
 8000a16:	fbbc f1fe 	udiv	r1, ip, lr
 8000a1a:	0c05      	lsrs	r5, r0, #16
 8000a1c:	fb0e cc11 	mls	ip, lr, r1, ip
 8000a20:	fa1f f887 	uxth.w	r8, r7
 8000a24:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a28:	fb01 f308 	mul.w	r3, r1, r8
 8000a2c:	42ab      	cmp	r3, r5
 8000a2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a32:	d909      	bls.n	8000a48 <__udivmoddi4+0x19c>
 8000a34:	197d      	adds	r5, r7, r5
 8000a36:	f101 3cff 	add.w	ip, r1, #4294967295
 8000a3a:	f080 808b 	bcs.w	8000b54 <__udivmoddi4+0x2a8>
 8000a3e:	42ab      	cmp	r3, r5
 8000a40:	f240 8088 	bls.w	8000b54 <__udivmoddi4+0x2a8>
 8000a44:	3902      	subs	r1, #2
 8000a46:	443d      	add	r5, r7
 8000a48:	1aeb      	subs	r3, r5, r3
 8000a4a:	b285      	uxth	r5, r0
 8000a4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000a58:	fb00 f308 	mul.w	r3, r0, r8
 8000a5c:	42ab      	cmp	r3, r5
 8000a5e:	d907      	bls.n	8000a70 <__udivmoddi4+0x1c4>
 8000a60:	197d      	adds	r5, r7, r5
 8000a62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a66:	d271      	bcs.n	8000b4c <__udivmoddi4+0x2a0>
 8000a68:	42ab      	cmp	r3, r5
 8000a6a:	d96f      	bls.n	8000b4c <__udivmoddi4+0x2a0>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	443d      	add	r5, r7
 8000a70:	1aeb      	subs	r3, r5, r3
 8000a72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a76:	e778      	b.n	800096a <__udivmoddi4+0xbe>
 8000a78:	f1c1 0c20 	rsb	ip, r1, #32
 8000a7c:	408b      	lsls	r3, r1
 8000a7e:	fa22 f70c 	lsr.w	r7, r2, ip
 8000a82:	431f      	orrs	r7, r3
 8000a84:	fa20 f40c 	lsr.w	r4, r0, ip
 8000a88:	fa05 f301 	lsl.w	r3, r5, r1
 8000a8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a90:	fa25 f50c 	lsr.w	r5, r5, ip
 8000a94:	431c      	orrs	r4, r3
 8000a96:	0c23      	lsrs	r3, r4, #16
 8000a98:	fbb5 f9fe 	udiv	r9, r5, lr
 8000a9c:	fa1f f887 	uxth.w	r8, r7
 8000aa0:	fb0e 5519 	mls	r5, lr, r9, r5
 8000aa4:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000aa8:	fb09 fa08 	mul.w	sl, r9, r8
 8000aac:	45aa      	cmp	sl, r5
 8000aae:	fa02 f201 	lsl.w	r2, r2, r1
 8000ab2:	fa00 f301 	lsl.w	r3, r0, r1
 8000ab6:	d908      	bls.n	8000aca <__udivmoddi4+0x21e>
 8000ab8:	197d      	adds	r5, r7, r5
 8000aba:	f109 30ff 	add.w	r0, r9, #4294967295
 8000abe:	d247      	bcs.n	8000b50 <__udivmoddi4+0x2a4>
 8000ac0:	45aa      	cmp	sl, r5
 8000ac2:	d945      	bls.n	8000b50 <__udivmoddi4+0x2a4>
 8000ac4:	f1a9 0902 	sub.w	r9, r9, #2
 8000ac8:	443d      	add	r5, r7
 8000aca:	eba5 050a 	sub.w	r5, r5, sl
 8000ace:	b2a4      	uxth	r4, r4
 8000ad0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000ad4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000ad8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000adc:	fb00 f808 	mul.w	r8, r0, r8
 8000ae0:	45a0      	cmp	r8, r4
 8000ae2:	d907      	bls.n	8000af4 <__udivmoddi4+0x248>
 8000ae4:	193c      	adds	r4, r7, r4
 8000ae6:	f100 35ff 	add.w	r5, r0, #4294967295
 8000aea:	d22d      	bcs.n	8000b48 <__udivmoddi4+0x29c>
 8000aec:	45a0      	cmp	r8, r4
 8000aee:	d92b      	bls.n	8000b48 <__udivmoddi4+0x29c>
 8000af0:	3802      	subs	r0, #2
 8000af2:	443c      	add	r4, r7
 8000af4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000af8:	eba4 0408 	sub.w	r4, r4, r8
 8000afc:	fba0 8902 	umull	r8, r9, r0, r2
 8000b00:	454c      	cmp	r4, r9
 8000b02:	46c6      	mov	lr, r8
 8000b04:	464d      	mov	r5, r9
 8000b06:	d319      	bcc.n	8000b3c <__udivmoddi4+0x290>
 8000b08:	d016      	beq.n	8000b38 <__udivmoddi4+0x28c>
 8000b0a:	b15e      	cbz	r6, 8000b24 <__udivmoddi4+0x278>
 8000b0c:	ebb3 020e 	subs.w	r2, r3, lr
 8000b10:	eb64 0405 	sbc.w	r4, r4, r5
 8000b14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000b18:	40ca      	lsrs	r2, r1
 8000b1a:	ea4c 0202 	orr.w	r2, ip, r2
 8000b1e:	40cc      	lsrs	r4, r1
 8000b20:	e9c6 2400 	strd	r2, r4, [r6]
 8000b24:	2100      	movs	r1, #0
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	4631      	mov	r1, r6
 8000b2c:	4630      	mov	r0, r6
 8000b2e:	e70e      	b.n	800094e <__udivmoddi4+0xa2>
 8000b30:	46ac      	mov	ip, r5
 8000b32:	e6ed      	b.n	8000910 <__udivmoddi4+0x64>
 8000b34:	4618      	mov	r0, r3
 8000b36:	e701      	b.n	800093c <__udivmoddi4+0x90>
 8000b38:	4543      	cmp	r3, r8
 8000b3a:	d2e6      	bcs.n	8000b0a <__udivmoddi4+0x25e>
 8000b3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b40:	eb69 0507 	sbc.w	r5, r9, r7
 8000b44:	3801      	subs	r0, #1
 8000b46:	e7e0      	b.n	8000b0a <__udivmoddi4+0x25e>
 8000b48:	4628      	mov	r0, r5
 8000b4a:	e7d3      	b.n	8000af4 <__udivmoddi4+0x248>
 8000b4c:	4660      	mov	r0, ip
 8000b4e:	e78f      	b.n	8000a70 <__udivmoddi4+0x1c4>
 8000b50:	4681      	mov	r9, r0
 8000b52:	e7ba      	b.n	8000aca <__udivmoddi4+0x21e>
 8000b54:	4661      	mov	r1, ip
 8000b56:	e777      	b.n	8000a48 <__udivmoddi4+0x19c>
 8000b58:	4608      	mov	r0, r1
 8000b5a:	e74b      	b.n	80009f4 <__udivmoddi4+0x148>
 8000b5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b60:	443d      	add	r5, r7
 8000b62:	e715      	b.n	8000990 <__udivmoddi4+0xe4>
 8000b64:	3802      	subs	r0, #2
 8000b66:	443c      	add	r4, r7
 8000b68:	e726      	b.n	80009b8 <__udivmoddi4+0x10c>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_idiv0>:
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <OnTxTimerEvent>:
}

// TX timer callback function
// context ptr of timer context
static void OnTxTimerEvent(void *context)
{
 8000b70:	b508      	push	{r3, lr}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimer), CFG_SEQ_Prio_0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2002      	movs	r0, #2
 8000b76:	f015 ff35 	bl	80169e4 <UTIL_SEQ_SetTask>
}
 8000b7a:	bd08      	pop	{r3, pc}

08000b7c <OnMacProcessNotify>:
    }
}

// Will be called each time a Radio IRQ is handled by the MAC layer
static void OnMacProcessNotify(void)
{
 8000b7c:	b508      	push	{r3, lr}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2001      	movs	r0, #1
 8000b82:	f015 ff2f 	bl	80169e4 <UTIL_SEQ_SetTask>
}
 8000b86:	bd08      	pop	{r3, pc}

08000b88 <OnRxTimerLedEvent>:
{
 8000b88:	b508      	push	{r3, lr}
    ledIndicateReceiveInProgress(false);
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f000 fc4e 	bl	800142c <ledIndicateReceiveInProgress>
}
 8000b90:	bd08      	pop	{r3, pc}
	...

08000b94 <OnRxData>:
{
 8000b94:	b570      	push	{r4, r5, r6, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	460c      	mov	r4, r1
    if ((appData != NULL) || (params != NULL)) {
 8000b9a:	4605      	mov	r5, r0
 8000b9c:	b378      	cbz	r0, 8000bfe <OnRxData+0x6a>
        ledIndicateReceiveInProgress(true);
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	f000 fc44 	bl	800142c <ledIndicateReceiveInProgress>
        UTIL_TIMER_Start(&RxLedTimer);
 8000ba4:	4823      	ldr	r0, [pc, #140]	; (8000c34 <OnRxData+0xa0>)
 8000ba6:	f016 f993 	bl	8016ed0 <UTIL_TIMER_Start>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 8000baa:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <OnRxData+0xa4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	4611      	mov	r1, r2
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f015 fdf1 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 8000bb6:	f994 200c 	ldrsb.w	r2, [r4, #12]
 8000bba:	782b      	ldrb	r3, [r5, #0]
 8000bbc:	f994 1002 	ldrsb.w	r1, [r4, #2]
 8000bc0:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8000bc4:	f994 6004 	ldrsb.w	r6, [r4, #4]
 8000bc8:	9605      	str	r6, [sp, #20]
 8000bca:	9004      	str	r0, [sp, #16]
 8000bcc:	9103      	str	r1, [sp, #12]
 8000bce:	9302      	str	r3, [sp, #8]
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <OnRxData+0xa8>)
 8000bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bd6:	9301      	str	r3, [sp, #4]
 8000bd8:	68a3      	ldr	r3, [r4, #8]
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <OnRxData+0xac>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	4611      	mov	r1, r2
 8000be2:	2003      	movs	r0, #3
 8000be4:	f015 fdd8 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n");
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <OnRxData+0xb0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	4611      	mov	r1, r2
 8000bee:	2002      	movs	r0, #2
 8000bf0:	f015 fdd2 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
        switch (appData->Port) {
 8000bf4:	782b      	ldrb	r3, [r5, #0]
 8000bf6:	2b03      	cmp	r3, #3
 8000bf8:	d004      	beq.n	8000c04 <OnRxData+0x70>
}
 8000bfa:	b006      	add	sp, #24
 8000bfc:	bd70      	pop	{r4, r5, r6, pc}
    if ((appData != NULL) || (params != NULL)) {
 8000bfe:	2900      	cmp	r1, #0
 8000c00:	d1cd      	bne.n	8000b9e <OnRxData+0xa>
    }
 8000c02:	e7fa      	b.n	8000bfa <OnRxData+0x66>
            if (appData->BufferSize == 1) {
 8000c04:	786b      	ldrb	r3, [r5, #1]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d1f7      	bne.n	8000bfa <OnRxData+0x66>
                switch (appData->Buffer[0]) {
 8000c0a:	686b      	ldr	r3, [r5, #4]
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d007      	beq.n	8000c22 <OnRxData+0x8e>
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d009      	beq.n	8000c2a <OnRxData+0x96>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d1ef      	bne.n	8000bfa <OnRxData+0x66>
                    LmHandlerRequestClass(CLASS_A);
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f006 fa94 	bl	8007148 <LmHandlerRequestClass>
                    break;
 8000c20:	e7eb      	b.n	8000bfa <OnRxData+0x66>
                    LmHandlerRequestClass(CLASS_B);
 8000c22:	2001      	movs	r0, #1
 8000c24:	f006 fa90 	bl	8007148 <LmHandlerRequestClass>
                    break;
 8000c28:	e7e7      	b.n	8000bfa <OnRxData+0x66>
                    LmHandlerRequestClass(CLASS_C);
 8000c2a:	2002      	movs	r0, #2
 8000c2c:	f006 fa8c 	bl	8007148 <LmHandlerRequestClass>
}
 8000c30:	e7e3      	b.n	8000bfa <OnRxData+0x66>
 8000c32:	bf00      	nop
 8000c34:	20000328 	.word	0x20000328
 8000c38:	08017580 	.word	0x08017580
 8000c3c:	08017810 	.word	0x08017810
 8000c40:	080175b4 	.word	0x080175b4
 8000c44:	080177b0 	.word	0x080177b0

08000c48 <OnTxData>:
    if ((params != NULL)) {
 8000c48:	2800      	cmp	r0, #0
 8000c4a:	d045      	beq.n	8000cd8 <OnTxData+0x90>
{
 8000c4c:	b510      	push	{r4, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	4604      	mov	r4, r0
        if (params->IsMcpsConfirm != 0) {
 8000c52:	7803      	ldrb	r3, [r0, #0]
 8000c54:	b90b      	cbnz	r3, 8000c5a <OnTxData+0x12>
}
 8000c56:	b004      	add	sp, #16
 8000c58:	bd10      	pop	{r4, pc}
            ledIndicateTransmitInProgress(true);
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f000 fbf0 	bl	8001440 <ledIndicateTransmitInProgress>
            UTIL_TIMER_Start(&TxLedTimer);
 8000c60:	481e      	ldr	r0, [pc, #120]	; (8000cdc <OnTxData+0x94>)
 8000c62:	f016 f935 	bl	8016ed0 <UTIL_TIMER_Start>
            APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <OnTxData+0x98>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	2002      	movs	r0, #2
 8000c6e:	f015 fd93 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
            APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8000c72:	7b23      	ldrb	r3, [r4, #12]
 8000c74:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8000c78:	f994 1014 	ldrsb.w	r1, [r4, #20]
 8000c7c:	9103      	str	r1, [sp, #12]
 8000c7e:	9202      	str	r2, [sp, #8]
 8000c80:	9301      	str	r3, [sp, #4]
 8000c82:	68a3      	ldr	r3, [r4, #8]
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <OnTxData+0x9c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f015 fd83 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
            APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <OnTxData+0xa0>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	4611      	mov	r1, r2
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f015 fd7d 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
            if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG) {
 8000c9e:	78a3      	ldrb	r3, [r4, #2]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d112      	bne.n	8000cca <OnTxData+0x82>
                APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8000ca4:	78e3      	ldrb	r3, [r4, #3]
 8000ca6:	b173      	cbz	r3, 8000cc6 <OnTxData+0x7e>
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <OnTxData+0xa4>)
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <OnTxData+0xa8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	2003      	movs	r0, #3
 8000cb4:	f015 fd70 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
            APP_LOG(TS_OFF, VLEVEL_M, "\r\n");
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <OnTxData+0xac>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	4611      	mov	r1, r2
 8000cbe:	2002      	movs	r0, #2
 8000cc0:	f015 fd6a 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
}
 8000cc4:	e7c7      	b.n	8000c56 <OnTxData+0xe>
                APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <OnTxData+0xb0>)
 8000cc8:	e7ef      	b.n	8000caa <OnTxData+0x62>
                APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <OnTxData+0xb4>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4611      	mov	r1, r2
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	f015 fd61 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
 8000cd6:	e7ef      	b.n	8000cb8 <OnTxData+0x70>
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000340 	.word	0x20000340
 8000ce0:	08017608 	.word	0x08017608
 8000ce4:	0801763c 	.word	0x0801763c
 8000ce8:	08017670 	.word	0x08017670
 8000cec:	08017604 	.word	0x08017604
 8000cf0:	08017680 	.word	0x08017680
 8000cf4:	080177b0 	.word	0x080177b0
 8000cf8:	080175fc 	.word	0x080175fc
 8000cfc:	08017694 	.word	0x08017694

08000d00 <OnTxTimerLedEvent>:
{
 8000d00:	b508      	push	{r3, lr}
    ledIndicateTransmitInProgress(false);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 fb9c 	bl	8001440 <ledIndicateTransmitInProgress>
}
 8000d08:	bd08      	pop	{r3, pc}

08000d0a <OnJoinTimerLedEvent>:
{
 8000d0a:	b508      	push	{r3, lr}
    ledToggleJoin();
 8000d0c:	f000 fb81 	bl	8001412 <ledToggleJoin>
}
 8000d10:	bd08      	pop	{r3, pc}
	...

08000d14 <startSensorTimer>:
{
 8000d14:	b530      	push	{r4, r5, lr}
 8000d16:	b083      	sub	sp, #12
    uint32_t seconds = success ? sensorSecsSuccess : sensorSecsFailure;
 8000d18:	b1c0      	cbz	r0, 8000d4c <startSensorTimer+0x38>
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <startSensorTimer+0x40>)
 8000d1c:	681d      	ldr	r5, [r3, #0]
    APP_PRINTF("sensor will next be sampled in %d seconds\r\n", seconds);
 8000d1e:	9500      	str	r5, [sp, #0]
 8000d20:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <startSensorTimer+0x44>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	4611      	mov	r1, r2
 8000d26:	4610      	mov	r0, r2
 8000d28:	f015 fd36 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
    UTIL_TIMER_Stop(&TxTimer);
 8000d2c:	4c0b      	ldr	r4, [pc, #44]	; (8000d5c <startSensorTimer+0x48>)
 8000d2e:	4620      	mov	r0, r4
 8000d30:	f016 f86c 	bl	8016e0c <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, seconds * 1000);
 8000d34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d38:	fb01 f105 	mul.w	r1, r1, r5
 8000d3c:	4620      	mov	r0, r4
 8000d3e:	f016 f90d 	bl	8016f5c <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8000d42:	4620      	mov	r0, r4
 8000d44:	f016 f8c4 	bl	8016ed0 <UTIL_TIMER_Start>
}
 8000d48:	b003      	add	sp, #12
 8000d4a:	bd30      	pop	{r4, r5, pc}
    uint32_t seconds = success ? sensorSecsSuccess : sensorSecsFailure;
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <startSensorTimer+0x4c>)
 8000d4e:	681d      	ldr	r5, [r3, #0]
 8000d50:	e7e5      	b.n	8000d1e <startSensorTimer+0xa>
 8000d52:	bf00      	nop
 8000d54:	20000050 	.word	0x20000050
 8000d58:	080176a4 	.word	0x080176a4
 8000d5c:	20000358 	.word	0x20000358
 8000d60:	2000004c 	.word	0x2000004c

08000d64 <App_Init>:
{
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	b084      	sub	sp, #16
 8000d6a:	4680      	mov	r8, r0
    APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8000d6c:	2400      	movs	r4, #0
 8000d6e:	9402      	str	r4, [sp, #8]
 8000d70:	2501      	movs	r5, #1
 8000d72:	9501      	str	r5, [sp, #4]
 8000d74:	9500      	str	r5, [sp, #0]
 8000d76:	4b37      	ldr	r3, [pc, #220]	; (8000e54 <App_Init+0xf0>)
 8000d78:	4622      	mov	r2, r4
 8000d7a:	4621      	mov	r1, r4
 8000d7c:	2002      	movs	r0, #2
 8000d7e:	f015 fd0b 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8000d82:	9402      	str	r4, [sp, #8]
 8000d84:	2303      	movs	r3, #3
 8000d86:	9301      	str	r3, [sp, #4]
 8000d88:	2602      	movs	r6, #2
 8000d8a:	9600      	str	r6, [sp, #0]
 8000d8c:	4b32      	ldr	r3, [pc, #200]	; (8000e58 <App_Init+0xf4>)
 8000d8e:	4622      	mov	r2, r4
 8000d90:	4621      	mov	r1, r4
 8000d92:	4630      	mov	r0, r6
 8000d94:	f015 fd00 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 8000d98:	9402      	str	r4, [sp, #8]
 8000d9a:	9501      	str	r5, [sp, #4]
 8000d9c:	9500      	str	r5, [sp, #0]
 8000d9e:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <App_Init+0xf8>)
 8000da0:	4622      	mov	r2, r4
 8000da2:	4621      	mov	r1, r4
 8000da4:	4630      	mov	r0, r6
 8000da6:	f015 fcf7 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
    UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8000daa:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8000e88 <App_Init+0x124>
 8000dae:	9400      	str	r4, [sp, #0]
 8000db0:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <App_Init+0xfc>)
 8000db2:	4622      	mov	r2, r4
 8000db4:	f04f 31ff 	mov.w	r1, #4294967295
 8000db8:	4650      	mov	r0, sl
 8000dba:	f015 ffc9 	bl	8016d50 <UTIL_TIMER_Create>
    UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8000dbe:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8000e8c <App_Init+0x128>
 8000dc2:	9400      	str	r4, [sp, #0]
 8000dc4:	4b27      	ldr	r3, [pc, #156]	; (8000e64 <App_Init+0x100>)
 8000dc6:	4622      	mov	r2, r4
 8000dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dcc:	4648      	mov	r0, r9
 8000dce:	f015 ffbf 	bl	8016d50 <UTIL_TIMER_Create>
    UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8000dd2:	4f25      	ldr	r7, [pc, #148]	; (8000e68 <App_Init+0x104>)
 8000dd4:	9400      	str	r4, [sp, #0]
 8000dd6:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <App_Init+0x108>)
 8000dd8:	462a      	mov	r2, r5
 8000dda:	f04f 31ff 	mov.w	r1, #4294967295
 8000dde:	4638      	mov	r0, r7
 8000de0:	f015 ffb6 	bl	8016d50 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 8000de4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000de8:	4650      	mov	r0, sl
 8000dea:	f016 f8b7 	bl	8016f5c <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 8000dee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000df2:	4648      	mov	r0, r9
 8000df4:	f016 f8b2 	bl	8016f5c <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 8000df8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	f016 f8ad 	bl	8016f5c <UTIL_TIMER_SetPeriod>
    UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8000e02:	4a1b      	ldr	r2, [pc, #108]	; (8000e70 <App_Init+0x10c>)
 8000e04:	4621      	mov	r1, r4
 8000e06:	4628      	mov	r0, r5
 8000e08:	f015 feaa 	bl	8016b60 <UTIL_SEQ_RegTask>
    UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimer), UTIL_SEQ_RFU, SendTxData);
 8000e0c:	4a19      	ldr	r2, [pc, #100]	; (8000e74 <App_Init+0x110>)
 8000e0e:	4621      	mov	r1, r4
 8000e10:	4630      	mov	r0, r6
 8000e12:	f015 fea5 	bl	8016b60 <UTIL_SEQ_RegTask>
    LoraInfo_Init();
 8000e16:	f000 fb1b 	bl	8001450 <LoraInfo_Init>
    LmHandlerParams.ActiveRegion = selectedRegion;
 8000e1a:	4d17      	ldr	r5, [pc, #92]	; (8000e78 <App_Init+0x114>)
 8000e1c:	f885 8000 	strb.w	r8, [r5]
    LmHandlerInit(&LmHandlerCallbacks);
 8000e20:	4816      	ldr	r0, [pc, #88]	; (8000e7c <App_Init+0x118>)
 8000e22:	f006 fbf7 	bl	8007614 <LmHandlerInit>
    LmHandlerConfigure(&LmHandlerParams);
 8000e26:	4628      	mov	r0, r5
 8000e28:	f006 f896 	bl	8006f58 <LmHandlerConfigure>
    UTIL_TIMER_Start(&JoinLedTimer);
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	f016 f84f 	bl	8016ed0 <UTIL_TIMER_Start>
    LmHandlerJoin(ActivationType);
 8000e32:	4630      	mov	r0, r6
 8000e34:	f006 f9ea 	bl	800720c <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8000e38:	9400      	str	r4, [sp, #0]
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <App_Init+0x11c>)
 8000e3c:	4622      	mov	r2, r4
 8000e3e:	f04f 31ff 	mov.w	r1, #4294967295
 8000e42:	4810      	ldr	r0, [pc, #64]	; (8000e84 <App_Init+0x120>)
 8000e44:	f015 ff84 	bl	8016d50 <UTIL_TIMER_Create>
    startSensorTimer(false);
 8000e48:	4620      	mov	r0, r4
 8000e4a:	f7ff ff63 	bl	8000d14 <startSensorTimer>
}
 8000e4e:	b004      	add	sp, #16
 8000e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e54:	080176d0 	.word	0x080176d0
 8000e58:	080176f0 	.word	0x080176f0
 8000e5c:	08017710 	.word	0x08017710
 8000e60:	08000d01 	.word	0x08000d01
 8000e64:	08000b89 	.word	0x08000b89
 8000e68:	20000310 	.word	0x20000310
 8000e6c:	08000d0b 	.word	0x08000d0b
 8000e70:	08007115 	.word	0x08007115
 8000e74:	08000f11 	.word	0x08000f11
 8000e78:	2000003c 	.word	0x2000003c
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	08000b71 	.word	0x08000b71
 8000e84:	20000358 	.word	0x20000358
 8000e88:	20000340 	.word	0x20000340
 8000e8c:	20000328 	.word	0x20000328

08000e90 <OnJoinRequest>:
    if (joinParams != NULL) {
 8000e90:	b380      	cbz	r0, 8000ef4 <OnJoinRequest+0x64>
{
 8000e92:	b510      	push	{r4, lr}
 8000e94:	4604      	mov	r4, r0
        if (joinParams->Status == LORAMAC_HANDLER_SUCCESS) {
 8000e96:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8000e9a:	b9db      	cbnz	r3, 8000ed4 <OnJoinRequest+0x44>
            UTIL_TIMER_Stop(&JoinLedTimer);
 8000e9c:	4816      	ldr	r0, [pc, #88]	; (8000ef8 <OnJoinRequest+0x68>)
 8000e9e:	f015 ffb5 	bl	8016e0c <UTIL_TIMER_Stop>
            ledJoined();
 8000ea2:	f000 fa95 	bl	80013d0 <ledJoined>
            APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <OnJoinRequest+0x6c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	4611      	mov	r1, r2
 8000eac:	2002      	movs	r0, #2
 8000eae:	f015 fc73 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
            if (joinParams->Mode == ACTIVATION_TYPE_ABP) {
 8000eb2:	78a3      	ldrb	r3, [r4, #2]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d006      	beq.n	8000ec6 <OnJoinRequest+0x36>
                APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <OnJoinRequest+0x70>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	f015 fc6a 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
 8000ec4:	e015      	b.n	8000ef2 <OnJoinRequest+0x62>
                APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <OnJoinRequest+0x74>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	4611      	mov	r1, r2
 8000ecc:	2002      	movs	r0, #2
 8000ece:	f015 fc63 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
 8000ed2:	e00e      	b.n	8000ef2 <OnJoinRequest+0x62>
            APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <OnJoinRequest+0x78>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	4611      	mov	r1, r2
 8000eda:	2002      	movs	r0, #2
 8000edc:	f015 fc5c 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
            startSensorTimer(false);
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f7ff ff17 	bl	8000d14 <startSensorTimer>
            APP_LOG(TS_OFF, VLEVEL_M, "\r\n");
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <OnJoinRequest+0x7c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	4611      	mov	r1, r2
 8000eec:	2002      	movs	r0, #2
 8000eee:	f015 fc53 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
}
 8000ef2:	bd10      	pop	{r4, pc}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000310 	.word	0x20000310
 8000efc:	08017730 	.word	0x08017730
 8000f00:	08017768 	.word	0x08017768
 8000f04:	08017748 	.word	0x08017748
 8000f08:	08017788 	.word	0x08017788
 8000f0c:	080177b0 	.word	0x080177b0

08000f10 <SendTxData>:
{
 8000f10:	b500      	push	{lr}
 8000f12:	b085      	sub	sp, #20
    bool success = sensorGetData(AppDataBuffer, sizeof(AppDataBuffer), &AppData.BufferSize, &sensorSecsSuccess, &sensorSecsFailure);
 8000f14:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <SendTxData+0x70>)
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <SendTxData+0x74>)
 8000f1a:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <SendTxData+0x78>)
 8000f1c:	21f2      	movs	r1, #242	; 0xf2
 8000f1e:	481b      	ldr	r0, [pc, #108]	; (8000f8c <SendTxData+0x7c>)
 8000f20:	f001 fbbc 	bl	800269c <sensorGetData>
    if (!success || AppData.BufferSize == 0) {
 8000f24:	b110      	cbz	r0, 8000f2c <SendTxData+0x1c>
 8000f26:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <SendTxData+0x80>)
 8000f28:	785b      	ldrb	r3, [r3, #1]
 8000f2a:	b92b      	cbnz	r3, 8000f38 <SendTxData+0x28>
        startSensorTimer(false);
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f7ff fef1 	bl	8000d14 <startSensorTimer>
}
 8000f32:	b005      	add	sp, #20
 8000f34:	f85d fb04 	ldr.w	pc, [sp], #4
    AppData.Port = LORAWAN_USER_APP_PORT;
 8000f38:	4815      	ldr	r0, [pc, #84]	; (8000f90 <SendTxData+0x80>)
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	7003      	strb	r3, [r0, #0]
    UTIL_TIMER_Time_t nextTxIn = 0;
 8000f3e:	2100      	movs	r1, #0
 8000f40:	9103      	str	r1, [sp, #12]
    if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false)) {
 8000f42:	460b      	mov	r3, r1
 8000f44:	aa03      	add	r2, sp, #12
 8000f46:	f006 f9ab 	bl	80072a0 <LmHandlerSend>
 8000f4a:	b128      	cbz	r0, 8000f58 <SendTxData+0x48>
    } else if (nextTxIn > 0) {
 8000f4c:	9b03      	ldr	r3, [sp, #12]
 8000f4e:	b953      	cbnz	r3, 8000f66 <SendTxData+0x56>
    startSensorTimer(true);
 8000f50:	2001      	movs	r0, #1
 8000f52:	f7ff fedf 	bl	8000d14 <startSensorTimer>
 8000f56:	e7ec      	b.n	8000f32 <SendTxData+0x22>
        APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <SendTxData+0x84>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4610      	mov	r0, r2
 8000f60:	f015 fc1a 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
 8000f64:	e7f4      	b.n	8000f50 <SendTxData+0x40>
        APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8000f66:	4a0c      	ldr	r2, [pc, #48]	; (8000f98 <SendTxData+0x88>)
 8000f68:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6c:	099b      	lsrs	r3, r3, #6
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <SendTxData+0x8c>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	2100      	movs	r1, #0
 8000f76:	4610      	mov	r0, r2
 8000f78:	f015 fc0e 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
 8000f7c:	e7e8      	b.n	8000f50 <SendTxData+0x40>
 8000f7e:	bf00      	nop
 8000f80:	2000004c 	.word	0x2000004c
 8000f84:	20000050 	.word	0x20000050
 8000f88:	20000001 	.word	0x20000001
 8000f8c:	2000021c 	.word	0x2000021c
 8000f90:	20000000 	.word	0x20000000
 8000f94:	080177a4 	.word	0x080177a4
 8000f98:	10624dd3 	.word	0x10624dd3
 8000f9c:	080177b4 	.word	0x080177b4

08000fa0 <MX_AppISR>:
}

// ISR for interrupts to be processed by the app
void MX_AppISR(uint16_t GPIO_Pin)
{
}
 8000fa0:	4770      	bx	lr

08000fa2 <tristate>:
// Get the value of a tri-state GPIO
#define TRISTATE_FLOAT  0
#define TRISTATE_HIGH   1
#define TRISTATE_LOW    2
int tristate(uint16_t pin, GPIO_TypeDef *port)
{
 8000fa2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	4605      	mov	r5, r0
 8000faa:	460c      	mov	r4, r1
    GPIO_InitTypeDef  gpio_init_structure = {0};
 8000fac:	2600      	movs	r6, #0
 8000fae:	9605      	str	r6, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000fb0:	9602      	str	r6, [sp, #8]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb6:	2702      	movs	r7, #2
 8000fb8:	9704      	str	r7, [sp, #16]
    gpio_init_structure.Pin = pin;
 8000fba:	9001      	str	r0, [sp, #4]
    HAL_GPIO_Init(port, &gpio_init_structure);
 8000fbc:	a901      	add	r1, sp, #4
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	f002 faba 	bl	8003538 <HAL_GPIO_Init>
    bool pulledHigh = (GPIO_PIN_SET == HAL_GPIO_ReadPin(port, pin));
 8000fc4:	4629      	mov	r1, r5
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	f002 fb6e 	bl	80036a8 <HAL_GPIO_ReadPin>
 8000fcc:	4680      	mov	r8, r0
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000fce:	9602      	str	r6, [sp, #8]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000fd0:	9703      	str	r7, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd2:	9704      	str	r7, [sp, #16]
    gpio_init_structure.Pin = pin;
 8000fd4:	9501      	str	r5, [sp, #4]
    HAL_GPIO_Init(port, &gpio_init_structure);
 8000fd6:	a901      	add	r1, sp, #4
 8000fd8:	4620      	mov	r0, r4
 8000fda:	f002 faad 	bl	8003538 <HAL_GPIO_Init>
    bool pulledLow = (GPIO_PIN_RESET == HAL_GPIO_ReadPin(port, pin));
 8000fde:	4629      	mov	r1, r5
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	f002 fb61 	bl	80036a8 <HAL_GPIO_ReadPin>
 8000fe6:	4681      	mov	r9, r0
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000fe8:	9602      	str	r6, [sp, #8]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000fea:	9603      	str	r6, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fec:	9704      	str	r7, [sp, #16]
    gpio_init_structure.Pin = pin;
 8000fee:	9501      	str	r5, [sp, #4]
    HAL_GPIO_Init(port, &gpio_init_structure);
 8000ff0:	a901      	add	r1, sp, #4
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	f002 faa0 	bl	8003538 <HAL_GPIO_Init>
    bool high = (GPIO_PIN_SET == HAL_GPIO_ReadPin(port, pin));
 8000ff8:	4629      	mov	r1, r5
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	f002 fb54 	bl	80036a8 <HAL_GPIO_ReadPin>
 8001000:	4607      	mov	r7, r0
    gpio_init_structure.Mode = GPIO_MODE_ANALOG;
 8001002:	2303      	movs	r3, #3
 8001004:	9302      	str	r3, [sp, #8]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001006:	9603      	str	r6, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	9604      	str	r6, [sp, #16]
    gpio_init_structure.Pin = pin;
 800100a:	9501      	str	r5, [sp, #4]
    HAL_GPIO_Init(port, &gpio_init_structure);
 800100c:	a901      	add	r1, sp, #4
 800100e:	4620      	mov	r0, r4
 8001010:	f002 fa92 	bl	8003538 <HAL_GPIO_Init>
    if (pulledHigh && pulledLow) {
 8001014:	f1b8 0f01 	cmp.w	r8, #1
 8001018:	d005      	beq.n	8001026 <tristate+0x84>
        return TRISTATE_FLOAT;
    }
    return (high ? TRISTATE_HIGH : TRISTATE_LOW);
 800101a:	2f01      	cmp	r7, #1
 800101c:	d008      	beq.n	8001030 <tristate+0x8e>
 800101e:	2002      	movs	r0, #2
}
 8001020:	b007      	add	sp, #28
 8001022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (pulledHigh && pulledLow) {
 8001026:	f1b9 0f00 	cmp.w	r9, #0
 800102a:	d1f6      	bne.n	800101a <tristate+0x78>
        return TRISTATE_FLOAT;
 800102c:	2000      	movs	r0, #0
 800102e:	e7f7      	b.n	8001020 <tristate+0x7e>
    return (high ? TRISTATE_HIGH : TRISTATE_LOW);
 8001030:	2001      	movs	r0, #1
 8001032:	e7f5      	b.n	8001020 <tristate+0x7e>

08001034 <ioInit>:

// Initialize app hardware I/O
void ioInit(void)
{
 8001034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001038:	b086      	sub	sp, #24
    GPIO_InitTypeDef  gpio_init_structure = {0};
 800103a:	2300      	movs	r3, #0
 800103c:	9305      	str	r3, [sp, #20]
    // an invalid switch combination they aren't a constant current draw on the system.
    // This switch design methodology allows for a selection of any of 9 unique
    // frequency plans based on the switches.  We have chosen what we view to be the
    // the most common plans globally, but the developer can feel free to reassign
    // these as is appropriate for their product or market.
    RegionSwitchSelection = LORAMAC_REGION_US915;
 800103e:	2508      	movs	r5, #8
 8001040:	4a5a      	ldr	r2, [pc, #360]	; (80011ac <ioInit+0x178>)
 8001042:	7015      	strb	r5, [r2, #0]
#if (CURRENT_BOARD != BOARD_NUCLEO)
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2401      	movs	r4, #1
 8001046:	9402      	str	r4, [sp, #8]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001048:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Pin = LED_RED_Pin;
 800104c:	9401      	str	r4, [sp, #4]
    HAL_GPIO_Init(LED_RED_GPIO_Port, &gpio_init_structure);
 800104e:	a901      	add	r1, sp, #4
 8001050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001054:	f002 fa70 	bl	8003538 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001058:	4622      	mov	r2, r4
 800105a:	4621      	mov	r1, r4
 800105c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001060:	f002 fb29 	bl	80036b6 <HAL_GPIO_WritePin>
    int gpio0 = tristate(RFSEL_1_Pin, RFSEL_1_GPIO_Port);
 8001064:	4e52      	ldr	r6, [pc, #328]	; (80011b0 <ioInit+0x17c>)
 8001066:	4631      	mov	r1, r6
 8001068:	2020      	movs	r0, #32
 800106a:	f7ff ff9a 	bl	8000fa2 <tristate>
 800106e:	4604      	mov	r4, r0
    int gpio1 = tristate(RFSEL_0_Pin, RFSEL_0_GPIO_Port);
 8001070:	4631      	mov	r1, r6
 8001072:	4628      	mov	r0, r5
 8001074:	f7ff ff95 	bl	8000fa2 <tristate>
    if (gpio0 == TRISTATE_FLOAT && gpio1 == TRISTATE_FLOAT) {
 8001078:	2c00      	cmp	r4, #0
 800107a:	d13c      	bne.n	80010f6 <ioInit+0xc2>
 800107c:	2800      	cmp	r0, #0
 800107e:	d13a      	bne.n	80010f6 <ioInit+0xc2>
        // 0 OFF OFF OFF OFF
        RegionSwitchSelection = LORAMAC_REGION_US915;
 8001080:	4b4a      	ldr	r3, [pc, #296]	; (80011ac <ioInit+0x178>)
 8001082:	701d      	strb	r5, [r3, #0]
        RegionSwitchSelection = LORAMAC_REGION_EU433;
    }
#endif

    // Init LEDs
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2501      	movs	r5, #1
 8001086:	9502      	str	r5, [sp, #8]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001088:	2400      	movs	r4, #0
 800108a:	9403      	str	r4, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	9404      	str	r4, [sp, #16]
    gpio_init_structure.Pin = LED_BLUE_Pin;
 800108e:	2602      	movs	r6, #2
 8001090:	9601      	str	r6, [sp, #4]
    HAL_GPIO_Init(LED_BLUE_GPIO_Port, &gpio_init_structure);
 8001092:	a901      	add	r1, sp, #4
 8001094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001098:	f002 fa4e 	bl	8003538 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800109c:	4622      	mov	r2, r4
 800109e:	4631      	mov	r1, r6
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a4:	f002 fb07 	bl	80036b6 <HAL_GPIO_WritePin>
    gpio_init_structure.Pin = LED_GREEN_Pin;
 80010a8:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 80010ac:	f8cd 8004 	str.w	r8, [sp, #4]
    HAL_GPIO_Init(LED_GREEN_GPIO_Port, &gpio_init_structure);
 80010b0:	4f3f      	ldr	r7, [pc, #252]	; (80011b0 <ioInit+0x17c>)
 80010b2:	a901      	add	r1, sp, #4
 80010b4:	4638      	mov	r0, r7
 80010b6:	f002 fa3f 	bl	8003538 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80010ba:	4622      	mov	r2, r4
 80010bc:	4641      	mov	r1, r8
 80010be:	4638      	mov	r0, r7
 80010c0:	f002 faf9 	bl	80036b6 <HAL_GPIO_WritePin>
    gpio_init_structure.Pin = LED_RED_Pin;
 80010c4:	9501      	str	r5, [sp, #4]
    HAL_GPIO_Init(LED_RED_GPIO_Port, &gpio_init_structure);
 80010c6:	a901      	add	r1, sp, #4
 80010c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010cc:	f002 fa34 	bl	8003538 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80010d0:	4622      	mov	r2, r4
 80010d2:	4629      	mov	r1, r5
 80010d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d8:	f002 faed 	bl	80036b6 <HAL_GPIO_WritePin>

    // Init button, and determine whether or not it was held down at boot
    gpio_init_structure.Pin = BUTTON1_Pin;
 80010dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e0:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010e2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010e6:	9302      	str	r3, [sp, #8]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e8:	9604      	str	r6, [sp, #16]
    gpio_init_structure.Pull = BUTTON1_ACTIVE_HIGH ? GPIO_PULLDOWN : GPIO_PULLUP;
 80010ea:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(BUTTON1_GPIO_Port, &gpio_init_structure);
 80010ec:	a901      	add	r1, sp, #4
 80010ee:	4831      	ldr	r0, [pc, #196]	; (80011b4 <ioInit+0x180>)
 80010f0:	f002 fa22 	bl	8003538 <HAL_GPIO_Init>
    for (int i=0; i<250; i++) {
 80010f4:	e03e      	b.n	8001174 <ioInit+0x140>
    } else if (gpio0 == TRISTATE_HIGH && gpio1 == TRISTATE_FLOAT) {
 80010f6:	2c01      	cmp	r4, #1
 80010f8:	d015      	beq.n	8001126 <ioInit+0xf2>
    } else if (gpio0 == TRISTATE_LOW && gpio1 == TRISTATE_FLOAT) {
 80010fa:	2c02      	cmp	r4, #2
 80010fc:	d019      	beq.n	8001132 <ioInit+0xfe>
    } else if (gpio0 == TRISTATE_FLOAT && gpio1 == TRISTATE_HIGH) {
 80010fe:	b90c      	cbnz	r4, 8001104 <ioInit+0xd0>
 8001100:	2801      	cmp	r0, #1
 8001102:	d01c      	beq.n	800113e <ioInit+0x10a>
    } else if (gpio0 == TRISTATE_HIGH && gpio1 == TRISTATE_HIGH) {
 8001104:	2c01      	cmp	r4, #1
 8001106:	d01e      	beq.n	8001146 <ioInit+0x112>
    } else if (gpio0 == TRISTATE_LOW && gpio1 == TRISTATE_HIGH) {
 8001108:	2c02      	cmp	r4, #2
 800110a:	d022      	beq.n	8001152 <ioInit+0x11e>
    } else if (gpio0 == TRISTATE_FLOAT && gpio1 == TRISTATE_LOW) {
 800110c:	b90c      	cbnz	r4, 8001112 <ioInit+0xde>
 800110e:	2802      	cmp	r0, #2
 8001110:	d025      	beq.n	800115e <ioInit+0x12a>
    } else if (gpio0 == TRISTATE_HIGH && gpio1 == TRISTATE_LOW) {
 8001112:	2c01      	cmp	r4, #1
 8001114:	d027      	beq.n	8001166 <ioInit+0x132>
    } else if (gpio0 == TRISTATE_LOW && gpio1 == TRISTATE_LOW) {
 8001116:	2c02      	cmp	r4, #2
 8001118:	d1b4      	bne.n	8001084 <ioInit+0x50>
 800111a:	2802      	cmp	r0, #2
 800111c:	d1b2      	bne.n	8001084 <ioInit+0x50>
        RegionSwitchSelection = LORAMAC_REGION_EU433;
 800111e:	4b23      	ldr	r3, [pc, #140]	; (80011ac <ioInit+0x178>)
 8001120:	2204      	movs	r2, #4
 8001122:	701a      	strb	r2, [r3, #0]
 8001124:	e7ae      	b.n	8001084 <ioInit+0x50>
    } else if (gpio0 == TRISTATE_HIGH && gpio1 == TRISTATE_FLOAT) {
 8001126:	2800      	cmp	r0, #0
 8001128:	d1e7      	bne.n	80010fa <ioInit+0xc6>
        RegionSwitchSelection = LORAMAC_REGION_AS923;
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <ioInit+0x178>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
 8001130:	e7a8      	b.n	8001084 <ioInit+0x50>
    } else if (gpio0 == TRISTATE_LOW && gpio1 == TRISTATE_FLOAT) {
 8001132:	2800      	cmp	r0, #0
 8001134:	d1e3      	bne.n	80010fe <ioInit+0xca>
        RegionSwitchSelection = LORAMAC_REGION_KR920;
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <ioInit+0x178>)
 8001138:	2206      	movs	r2, #6
 800113a:	701a      	strb	r2, [r3, #0]
 800113c:	e7a2      	b.n	8001084 <ioInit+0x50>
        RegionSwitchSelection = LORAMAC_REGION_IN865;
 800113e:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <ioInit+0x178>)
 8001140:	2207      	movs	r2, #7
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	e79e      	b.n	8001084 <ioInit+0x50>
    } else if (gpio0 == TRISTATE_HIGH && gpio1 == TRISTATE_HIGH) {
 8001146:	2801      	cmp	r0, #1
 8001148:	d1de      	bne.n	8001108 <ioInit+0xd4>
        RegionSwitchSelection = LORAMAC_REGION_EU868;
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <ioInit+0x178>)
 800114c:	2205      	movs	r2, #5
 800114e:	701a      	strb	r2, [r3, #0]
 8001150:	e798      	b.n	8001084 <ioInit+0x50>
    } else if (gpio0 == TRISTATE_LOW && gpio1 == TRISTATE_HIGH) {
 8001152:	2801      	cmp	r0, #1
 8001154:	d1da      	bne.n	800110c <ioInit+0xd8>
        RegionSwitchSelection = LORAMAC_REGION_RU864;
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <ioInit+0x178>)
 8001158:	2209      	movs	r2, #9
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	e792      	b.n	8001084 <ioInit+0x50>
        RegionSwitchSelection = LORAMAC_REGION_AU915;
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <ioInit+0x178>)
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
 8001164:	e78e      	b.n	8001084 <ioInit+0x50>
    } else if (gpio0 == TRISTATE_HIGH && gpio1 == TRISTATE_LOW) {
 8001166:	2802      	cmp	r0, #2
 8001168:	d1d5      	bne.n	8001116 <ioInit+0xe2>
        RegionSwitchSelection = LORAMAC_REGION_CN470;
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <ioInit+0x178>)
 800116c:	2202      	movs	r2, #2
 800116e:	701a      	strb	r2, [r3, #0]
 8001170:	e788      	b.n	8001084 <ioInit+0x50>
    for (int i=0; i<250; i++) {
 8001172:	3401      	adds	r4, #1
 8001174:	2cf9      	cmp	r4, #249	; 0xf9
 8001176:	dc0e      	bgt.n	8001196 <ioInit+0x162>
        HAL_Delay(1);
 8001178:	2001      	movs	r0, #1
 800117a:	f001 f90b 	bl	8002394 <HAL_Delay>
        buttonHeldAtBoot = (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == (BUTTON1_ACTIVE_HIGH ? GPIO_PIN_SET : GPIO_PIN_RESET));
 800117e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001182:	480c      	ldr	r0, [pc, #48]	; (80011b4 <ioInit+0x180>)
 8001184:	f002 fa90 	bl	80036a8 <HAL_GPIO_ReadPin>
 8001188:	fab0 f080 	clz	r0, r0
 800118c:	0940      	lsrs	r0, r0, #5
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <ioInit+0x184>)
 8001190:	7018      	strb	r0, [r3, #0]
        if (!buttonHeldAtBoot) {
 8001192:	2800      	cmp	r0, #0
 8001194:	d1ed      	bne.n	8001172 <ioInit+0x13e>
            break;
        }
    }
    HAL_NVIC_SetPriority(BUTTON1_EXTI_IRQn, BUTTONx_IT_PRIORITY, 0x00);
 8001196:	2200      	movs	r2, #0
 8001198:	210f      	movs	r1, #15
 800119a:	2029      	movs	r0, #41	; 0x29
 800119c:	f001 ffd2 	bl	8003144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BUTTON1_EXTI_IRQn);
 80011a0:	2029      	movs	r0, #41	; 0x29
 80011a2:	f002 f803 	bl	80031ac <HAL_NVIC_EnableIRQ>

}
 80011a6:	b006      	add	sp, #24
 80011a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011ac:	20000054 	.word	0x20000054
 80011b0:	48000400 	.word	0x48000400
 80011b4:	48000800 	.word	0x48000800
 80011b8:	20000370 	.word	0x20000370

080011bc <MX_AppMain>:
{
 80011bc:	b508      	push	{r3, lr}
    ioInit();
 80011be:	f7ff ff39 	bl	8001034 <ioInit>
    SystemApp_Init();
 80011c2:	f001 f86d 	bl	80022a0 <SystemApp_Init>
    App_Init(RegionSwitchSelection);
 80011c6:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <MX_AppMain+0x1c>)
 80011c8:	7818      	ldrb	r0, [r3, #0]
 80011ca:	f7ff fdcb 	bl	8000d64 <App_Init>
        UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80011ce:	f04f 30ff 	mov.w	r0, #4294967295
 80011d2:	f015 fc3d 	bl	8016a50 <UTIL_SEQ_Run>
    while (1) {
 80011d6:	e7fa      	b.n	80011ce <MX_AppMain+0x12>
 80011d8:	20000054 	.word	0x20000054

080011dc <binBegin>:
float real16_to_real32(uint16_t x);

// Begin, with 0-4 flag bytes
void binBegin(uint8_t *buf, uint8_t len, uint8_t flagbytes)
{
    binMaxFlags = flagbytes*8;
 80011dc:	00d2      	lsls	r2, r2, #3
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <binBegin+0x28>)
 80011e0:	701a      	strb	r2, [r3, #0]
    binRecord = buf;
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <binBegin+0x2c>)
 80011e4:	6018      	str	r0, [r3, #0]
    binRecordAllocLen = len;
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <binBegin+0x30>)
 80011e8:	7019      	strb	r1, [r3, #0]
    binRecordLen = 0;
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <binBegin+0x34>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
    binFlags = 0;
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <binBegin+0x38>)
 80011f2:	2000      	movs	r0, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	e9c3 0100 	strd	r0, r1, [r3]
    binSuccess = true;
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <binBegin+0x3c>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000380 	.word	0x20000380
 8001208:	20000384 	.word	0x20000384
 800120c:	20000388 	.word	0x20000388
 8001210:	20000389 	.word	0x20000389
 8001214:	20000378 	.word	0x20000378
 8001218:	2000038a 	.word	0x2000038a

0800121c <binAppendByte>:
    }
    binFlagsFound++;
}
void binAppendByte(uint8_t databyte)
{
    if ((binRecordLen + sizeof(uint8_t)) > binRecordAllocLen) {
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <binAppendByte+0x28>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	1c59      	adds	r1, r3, #1
 8001222:	4a09      	ldr	r2, [pc, #36]	; (8001248 <binAppendByte+0x2c>)
 8001224:	7812      	ldrb	r2, [r2, #0]
 8001226:	4291      	cmp	r1, r2
 8001228:	d808      	bhi.n	800123c <binAppendByte+0x20>
{
 800122a:	b410      	push	{r4}
        binSuccess = false;
        return;
    }
    binRecord[binRecordLen++] = databyte;
 800122c:	4a07      	ldr	r2, [pc, #28]	; (800124c <binAppendByte+0x30>)
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	1c5c      	adds	r4, r3, #1
 8001232:	4904      	ldr	r1, [pc, #16]	; (8001244 <binAppendByte+0x28>)
 8001234:	700c      	strb	r4, [r1, #0]
 8001236:	54d0      	strb	r0, [r2, r3]
}
 8001238:	bc10      	pop	{r4}
 800123a:	4770      	bx	lr
        binSuccess = false;
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <binAppendByte+0x34>)
 800123e:	2200      	movs	r2, #0
 8001240:	701a      	strb	r2, [r3, #0]
        return;
 8001242:	4770      	bx	lr
 8001244:	20000389 	.word	0x20000389
 8001248:	20000388 	.word	0x20000388
 800124c:	20000384 	.word	0x20000384
 8001250:	2000038a 	.word	0x2000038a

08001254 <binAppendInt8>:
void binAppendInt8(int8_t value)
{
 8001254:	b508      	push	{r3, lr}
    binAppendByte(value & 0x0ff);
 8001256:	b2c0      	uxtb	r0, r0
 8001258:	f7ff ffe0 	bl	800121c <binAppendByte>
}
 800125c:	bd08      	pop	{r3, pc}

0800125e <binAppendInt16>:
void binAppendInt16(int16_t value)
{
 800125e:	b510      	push	{r4, lr}
 8001260:	4604      	mov	r4, r0
    binAppendByte(value & 0x0ff);
 8001262:	b2c0      	uxtb	r0, r0
 8001264:	f7ff ffda 	bl	800121c <binAppendByte>
    value = value >> 8;
    binAppendByte(value & 0x0ff);
 8001268:	f3c4 2007 	ubfx	r0, r4, #8, #8
 800126c:	f7ff ffd6 	bl	800121c <binAppendByte>
}
 8001270:	bd10      	pop	{r4, pc}

08001272 <binAppendInt24>:
void binAppendInt24(int32_t value)
{
 8001272:	b510      	push	{r4, lr}
 8001274:	4604      	mov	r4, r0
    binAppendByte(value & 0x0ff);
 8001276:	b2c0      	uxtb	r0, r0
 8001278:	f7ff ffd0 	bl	800121c <binAppendByte>
    value = value >> 8;
    binAppendByte(value & 0x0ff);
 800127c:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001280:	f7ff ffcc 	bl	800121c <binAppendByte>
    value = value >> 8;
    binAppendByte(value & 0x0ff);
 8001284:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001288:	f7ff ffc8 	bl	800121c <binAppendByte>
}
 800128c:	bd10      	pop	{r4, pc}

0800128e <binAppendInt32>:
void binAppendInt32(int32_t value)
{
 800128e:	b510      	push	{r4, lr}
 8001290:	4604      	mov	r4, r0
    binAppendByte(value & 0x0ff);
 8001292:	b2c0      	uxtb	r0, r0
 8001294:	f7ff ffc2 	bl	800121c <binAppendByte>
    value = value >> 8;
    binAppendByte(value & 0x0ff);
 8001298:	f3c4 2007 	ubfx	r0, r4, #8, #8
 800129c:	f7ff ffbe 	bl	800121c <binAppendByte>
    value = value >> 8;
    binAppendByte(value & 0x0ff);
 80012a0:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80012a4:	f7ff ffba 	bl	800121c <binAppendByte>
    value = value >> 8;
    binAppendByte(value & 0x0ff);
 80012a8:	0e20      	lsrs	r0, r4, #24
 80012aa:	f7ff ffb7 	bl	800121c <binAppendByte>
}
 80012ae:	bd10      	pop	{r4, pc}

080012b0 <binAppendInt64>:
void binAppendInt64(int64_t value)
{
 80012b0:	b538      	push	{r3, r4, r5, lr}
 80012b2:	4605      	mov	r5, r0
 80012b4:	460c      	mov	r4, r1
    binAppendByte(value & 0x0ff);
 80012b6:	b2c0      	uxtb	r0, r0
 80012b8:	f7ff ffb0 	bl	800121c <binAppendByte>
    value = value >> 8;
    binAppendByte(value & 0x0ff);
 80012bc:	f3c5 2007 	ubfx	r0, r5, #8, #8
 80012c0:	f7ff ffac 	bl	800121c <binAppendByte>
    value = value >> 8;
    binAppendByte(value & 0x0ff);
 80012c4:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80012c8:	f7ff ffa8 	bl	800121c <binAppendByte>
    value = value >> 8;
    binAppendByte(value & 0x0ff);
 80012cc:	0e28      	lsrs	r0, r5, #24
 80012ce:	f7ff ffa5 	bl	800121c <binAppendByte>
    value = value >> 8;
    binAppendByte(value & 0x0ff);
 80012d2:	b2e0      	uxtb	r0, r4
 80012d4:	f7ff ffa2 	bl	800121c <binAppendByte>
    value = value >> 8;
    binAppendByte(value & 0x0ff);
 80012d8:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80012dc:	f7ff ff9e 	bl	800121c <binAppendByte>
    value = value >> 8;
    binAppendByte(value & 0x0ff);
 80012e0:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80012e4:	f7ff ff9a 	bl	800121c <binAppendByte>
    value = value >> 8;
    binAppendByte(value & 0x0ff);
 80012e8:	0e20      	lsrs	r0, r4, #24
 80012ea:	f7ff ff97 	bl	800121c <binAppendByte>
}
 80012ee:	bd38      	pop	{r3, r4, r5, pc}

080012f0 <binEnd>:
{
 80012f0:	b508      	push	{r3, lr}
    if (binMaxFlags == 64) {
 80012f2:	4b14      	ldr	r3, [pc, #80]	; (8001344 <binEnd+0x54>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b40      	cmp	r3, #64	; 0x40
 80012f8:	d00b      	beq.n	8001312 <binEnd+0x22>
    } else if (binMaxFlags == 32) {
 80012fa:	2b20      	cmp	r3, #32
 80012fc:	d00f      	beq.n	800131e <binEnd+0x2e>
    } else if (binMaxFlags == 16) {
 80012fe:	2b10      	cmp	r3, #16
 8001300:	d012      	beq.n	8001328 <binEnd+0x38>
    } else if (binMaxFlags == 8) {
 8001302:	2b08      	cmp	r3, #8
 8001304:	d016      	beq.n	8001334 <binEnd+0x44>
    return binSuccess ? binRecordLen : 0;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <binEnd+0x58>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b1cb      	cbz	r3, 8001340 <binEnd+0x50>
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <binEnd+0x5c>)
 800130e:	7818      	ldrb	r0, [r3, #0]
}
 8001310:	bd08      	pop	{r3, pc}
        binAppendInt64(binFlags);
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <binEnd+0x60>)
 8001314:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001318:	f7ff ffca 	bl	80012b0 <binAppendInt64>
 800131c:	e7f3      	b.n	8001306 <binEnd+0x16>
        binAppendInt32((int32_t)binFlags);
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <binEnd+0x60>)
 8001320:	6818      	ldr	r0, [r3, #0]
 8001322:	f7ff ffb4 	bl	800128e <binAppendInt32>
 8001326:	e7ee      	b.n	8001306 <binEnd+0x16>
        binAppendInt16((int16_t)binFlags);
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <binEnd+0x60>)
 800132a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800132e:	f7ff ff96 	bl	800125e <binAppendInt16>
 8001332:	e7e8      	b.n	8001306 <binEnd+0x16>
        binAppendInt8((int8_t)binFlags);
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <binEnd+0x60>)
 8001336:	f993 0000 	ldrsb.w	r0, [r3]
 800133a:	f7ff ff8b 	bl	8001254 <binAppendInt8>
 800133e:	e7e2      	b.n	8001306 <binEnd+0x16>
    return binSuccess ? binRecordLen : 0;
 8001340:	2000      	movs	r0, #0
 8001342:	e7e5      	b.n	8001310 <binEnd+0x20>
 8001344:	20000380 	.word	0x20000380
 8001348:	2000038a 	.word	0x2000038a
 800134c:	20000389 	.word	0x20000389
 8001350:	20000378 	.word	0x20000378

08001354 <as_uint32>:
uint32_t as_uint32(float x)
{
    uint32_t a;
    memcpy(&a, &x, sizeof(a));
    return a;
}
 8001354:	4770      	bx	lr

08001356 <real32_to_real16>:
}

// IEEE-754 16-bit floating-point format (without infinity):
// 1-5-10, exp-15, +-131008.0, +-6.1035156E-5, +-5.9604645E-8, 3.311 digits
uint16_t real32_to_real16(float x)
{
 8001356:	b508      	push	{r3, lr}
    // round-to-nearest-even: add last bit after truncated mantissa
    uint32_t b = as_uint32(x)+0x00001000;
 8001358:	f7ff fffc 	bl	8001354 <as_uint32>
 800135c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
    // exponent
    uint32_t e = (b&0x7F800000)>>23;
 8001360:	f3c0 52c7 	ubfx	r2, r0, #23, #8
    // mantissa; in line below: 0x007FF000 = 0x00800000-0x00001000 = decimal indicator flag - initial rounding
    uint32_t m = b&0x007FFFFF;
 8001364:	f3c0 0316 	ubfx	r3, r0, #0, #23
    // sign : normalized : denormalized : saturate
    return (b&0x80000000)>>16 | (e>112)*((((e-112)<<10)&0x7C00)|m>>13) | ((e<113)&(e>101))*((((0x007FF000+m)>>(125-e))+1)>>1) | (e>143)*0x7FFF;
 8001368:	0c00      	lsrs	r0, r0, #16
 800136a:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
 800136e:	2a70      	cmp	r2, #112	; 0x70
 8001370:	d91c      	bls.n	80013ac <real32_to_real16+0x56>
 8001372:	f1a2 0170 	sub.w	r1, r2, #112	; 0x70
 8001376:	0289      	lsls	r1, r1, #10
 8001378:	f401 41f8 	and.w	r1, r1, #31744	; 0x7c00
 800137c:	ea41 3153 	orr.w	r1, r1, r3, lsr #13
 8001380:	4308      	orrs	r0, r1
 8001382:	f1a2 0166 	sub.w	r1, r2, #102	; 0x66
 8001386:	290a      	cmp	r1, #10
 8001388:	d812      	bhi.n	80013b0 <real32_to_real16+0x5a>
 800138a:	f503 03ff 	add.w	r3, r3, #8355840	; 0x7f8000
 800138e:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8001392:	f1c2 017d 	rsb	r1, r2, #125	; 0x7d
 8001396:	40cb      	lsrs	r3, r1
 8001398:	3301      	adds	r3, #1
 800139a:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800139e:	4318      	orrs	r0, r3
 80013a0:	2a8f      	cmp	r2, #143	; 0x8f
 80013a2:	d907      	bls.n	80013b4 <real32_to_real16+0x5e>
 80013a4:	f647 73ff 	movw	r3, #32767	; 0x7fff
}
 80013a8:	4318      	orrs	r0, r3
 80013aa:	bd08      	pop	{r3, pc}
    return (b&0x80000000)>>16 | (e>112)*((((e-112)<<10)&0x7C00)|m>>13) | ((e<113)&(e>101))*((((0x007FF000+m)>>(125-e))+1)>>1) | (e>143)*0x7FFF;
 80013ac:	2100      	movs	r1, #0
 80013ae:	e7e7      	b.n	8001380 <real32_to_real16+0x2a>
 80013b0:	2300      	movs	r3, #0
 80013b2:	e7f4      	b.n	800139e <real32_to_real16+0x48>
 80013b4:	2300      	movs	r3, #0
 80013b6:	e7f7      	b.n	80013a8 <real32_to_real16+0x52>

080013b8 <binAppendReal16>:
{
 80013b8:	b510      	push	{r4, lr}
    uint16_t value = real32_to_real16(number);
 80013ba:	f7ff ffcc 	bl	8001356 <real32_to_real16>
 80013be:	4604      	mov	r4, r0
    binAppendByte(value & 0x0ff);
 80013c0:	b2c0      	uxtb	r0, r0
 80013c2:	f7ff ff2b 	bl	800121c <binAppendByte>
    binAppendByte(value & 0x0ff);
 80013c6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80013ca:	f7ff ff27 	bl	800121c <binAppendByte>
}
 80013ce:	bd10      	pop	{r4, pc}

080013d0 <ledJoined>:
#include "main.h"
#include "app.h"

// Indicate that we've joined
void ledJoined()
{
 80013d0:	b510      	push	{r4, lr}
    for (int i=0; i<3; i++) {
 80013d2:	2400      	movs	r4, #0
 80013d4:	e012      	b.n	80013fc <ledJoined+0x2c>
        HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80013d6:	2201      	movs	r2, #1
 80013d8:	2102      	movs	r1, #2
 80013da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013de:	f002 f96a 	bl	80036b6 <HAL_GPIO_WritePin>
        HAL_Delay(250);
 80013e2:	20fa      	movs	r0, #250	; 0xfa
 80013e4:	f000 ffd6 	bl	8002394 <HAL_Delay>
        HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2102      	movs	r1, #2
 80013ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f0:	f002 f961 	bl	80036b6 <HAL_GPIO_WritePin>
        HAL_Delay(250);
 80013f4:	20fa      	movs	r0, #250	; 0xfa
 80013f6:	f000 ffcd 	bl	8002394 <HAL_Delay>
    for (int i=0; i<3; i++) {
 80013fa:	3401      	adds	r4, #1
 80013fc:	2c02      	cmp	r4, #2
 80013fe:	ddea      	ble.n	80013d6 <ledJoined+0x6>
    }

}
 8001400:	bd10      	pop	{r4, pc}

08001402 <ledIndicateJoinInProgress>:

// Indicate that a join is in progress
void ledIndicateJoinInProgress(bool on)
{
 8001402:	b508      	push	{r3, lr}
 8001404:	4602      	mov	r2, r0
    HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001406:	2102      	movs	r1, #2
 8001408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140c:	f002 f953 	bl	80036b6 <HAL_GPIO_WritePin>
}
 8001410:	bd08      	pop	{r3, pc}

08001412 <ledToggleJoin>:

// Toggle join status
void ledToggleJoin()
{
 8001412:	b508      	push	{r3, lr}
    bool on = HAL_GPIO_ReadPin(LED_BLUE_GPIO_Port, LED_BLUE_Pin) == GPIO_PIN_SET;
 8001414:	2102      	movs	r1, #2
 8001416:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141a:	f002 f945 	bl	80036a8 <HAL_GPIO_ReadPin>
    ledIndicateJoinInProgress(!on);
 800141e:	3801      	subs	r0, #1
 8001420:	bf18      	it	ne
 8001422:	2001      	movne	r0, #1
 8001424:	f7ff ffed 	bl	8001402 <ledIndicateJoinInProgress>
}
 8001428:	bd08      	pop	{r3, pc}
	...

0800142c <ledIndicateReceiveInProgress>:

// Indicate that a receive is in progress
void ledIndicateReceiveInProgress(bool on)
{
 800142c:	b508      	push	{r3, lr}
 800142e:	4602      	mov	r2, r0
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001430:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001434:	4801      	ldr	r0, [pc, #4]	; (800143c <ledIndicateReceiveInProgress+0x10>)
 8001436:	f002 f93e 	bl	80036b6 <HAL_GPIO_WritePin>
}
 800143a:	bd08      	pop	{r3, pc}
 800143c:	48000400 	.word	0x48000400

08001440 <ledIndicateTransmitInProgress>:

// Indicate that a receive is in progress
void ledIndicateTransmitInProgress(bool on)
{
 8001440:	b508      	push	{r3, lr}
 8001442:	4602      	mov	r2, r0
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001444:	2101      	movs	r1, #1
 8001446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144a:	f002 f934 	bl	80036b6 <HAL_GPIO_WritePin>
}
 800144e:	bd08      	pop	{r3, pc}

08001450 <LoraInfo_Init>:
// Init lora info structure
void LoraInfo_Init(void)
{
    loraInfo.ActivationMode = 0;
    loraInfo.Region = 0;
    loraInfo.ClassB = 0;
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <LoraInfo_Init+0x14>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
    loraInfo.Kms = 0;
 8001456:	60da      	str	r2, [r3, #12]
#endif
#ifdef  REGION_US915
    loraInfo.Region |= (1 << LORAMAC_REGION_US915) ;
#endif
#ifdef  REGION_RU864
    loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
 8001458:	f240 32bf 	movw	r2, #959	; 0x3bf
 800145c:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif // LORAMAC_CLASSB_ENABLED 

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    loraInfo.Kms = 0;
    loraInfo.ActivationMode = 3;
 800145e:	2203      	movs	r2, #3
 8001460:	601a      	str	r2, [r3, #0]
#else // LORAWAN_KMS == 1
    loraInfo.Kms = 1;
    loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif // LORAWAN_KMS 

}
 8001462:	4770      	bx	lr
 8001464:	2000038c 	.word	0x2000038c

08001468 <LoraInfo_GetPtr>:

// Get a pointer to the info structure
LoraInfo_t *LoraInfo_GetPtr(void)
{
    return &loraInfo;
}
 8001468:	4800      	ldr	r0, [pc, #0]	; (800146c <LoraInfo_GetPtr+0x4>)
 800146a:	4770      	bx	lr
 800146c:	2000038c 	.word	0x2000038c

08001470 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

// ADC init function
void MX_ADC_Init(void)
{
 8001470:	b508      	push	{r3, lr}

    // Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    hadc.Instance = ADC;
 8001472:	4813      	ldr	r0, [pc, #76]	; (80014c0 <MX_ADC_Init+0x50>)
 8001474:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <MX_ADC_Init+0x54>)
 8001476:	6003      	str	r3, [r0, #0]
    hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001478:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800147c:	6043      	str	r3, [r0, #4]
    hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800147e:	2300      	movs	r3, #0
 8001480:	6083      	str	r3, [r0, #8]
    hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001482:	60c3      	str	r3, [r0, #12]
    hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001484:	6103      	str	r3, [r0, #16]
    hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001486:	2204      	movs	r2, #4
 8001488:	6142      	str	r2, [r0, #20]
    hadc.Init.LowPowerAutoWait = DISABLE;
 800148a:	7603      	strb	r3, [r0, #24]
    hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800148c:	7643      	strb	r3, [r0, #25]
    hadc.Init.ContinuousConvMode = DISABLE;
 800148e:	7683      	strb	r3, [r0, #26]
    hadc.Init.NbrOfConversion = 1;
 8001490:	2201      	movs	r2, #1
 8001492:	61c2      	str	r2, [r0, #28]
    hadc.Init.DiscontinuousConvMode = DISABLE;
 8001494:	f880 3020 	strb.w	r3, [r0, #32]
    hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001498:	6243      	str	r3, [r0, #36]	; 0x24
    hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800149a:	6283      	str	r3, [r0, #40]	; 0x28
    hadc.Init.DMAContinuousRequests = DISABLE;
 800149c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014a4:	6302      	str	r2, [r0, #48]	; 0x30
    hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80014a6:	2207      	movs	r2, #7
 80014a8:	6342      	str	r2, [r0, #52]	; 0x34
    hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80014aa:	6382      	str	r2, [r0, #56]	; 0x38
    hadc.Init.OversamplingMode = DISABLE;
 80014ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80014b0:	64c3      	str	r3, [r0, #76]	; 0x4c
    if (HAL_ADC_Init(&hadc) != HAL_OK) {
 80014b2:	f001 f9b3 	bl	800281c <HAL_ADC_Init>
 80014b6:	b900      	cbnz	r0, 80014ba <MX_ADC_Init+0x4a>
        Error_Handler();
    }

}
 80014b8:	bd08      	pop	{r3, pc}
        Error_Handler();
 80014ba:	f000 fec5 	bl	8002248 <Error_Handler>
}
 80014be:	e7fb      	b.n	80014b8 <MX_ADC_Init+0x48>
 80014c0:	20001c4c 	.word	0x20001c4c
 80014c4:	40012400 	.word	0x40012400

080014c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

    if(adcHandle->Instance==ADC) {
 80014c8:	6802      	ldr	r2, [r0, #0]
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_ADC_MspInit+0x28>)
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d000      	beq.n	80014d2 <HAL_ADC_MspInit+0xa>
 80014d0:	4770      	bx	lr
{
 80014d2:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80014d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014de:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80014e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014e6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80014e8:	9b01      	ldr	r3, [sp, #4]
        __HAL_RCC_ADC_CLK_ENABLE();
    }
}
 80014ea:	b002      	add	sp, #8
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40012400 	.word	0x40012400

080014f4 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
    if(adcHandle->Instance==ADC) {
 80014f4:	6802      	ldr	r2, [r0, #0]
 80014f6:	4b05      	ldr	r3, [pc, #20]	; (800150c <HAL_ADC_MspDeInit+0x18>)
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d000      	beq.n	80014fe <HAL_ADC_MspDeInit+0xa>
        __HAL_RCC_ADC_CLK_DISABLE();
    }
}
 80014fc:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80014fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001502:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001504:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001508:	6613      	str	r3, [r2, #96]	; 0x60
 800150a:	e7f7      	b.n	80014fc <HAL_ADC_MspDeInit+0x8>
 800150c:	40012400 	.word	0x40012400

08001510 <ADC_ReadChannels>:
    return batteryLevelmV;
}

// Read ADC channels
static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001510:	b530      	push	{r4, r5, lr}
 8001512:	b085      	sub	sp, #20
 8001514:	4604      	mov	r4, r0
    uint32_t ADCxConvertedValues = 0;
    ADC_ChannelConfTypeDef sConfig = {0};
 8001516:	2300      	movs	r3, #0
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	9302      	str	r3, [sp, #8]
 800151c:	9303      	str	r3, [sp, #12]

    MX_ADC_Init();
 800151e:	f7ff ffa7 	bl	8001470 <MX_ADC_Init>

    // Start Calibration
    if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK) {
 8001522:	4816      	ldr	r0, [pc, #88]	; (800157c <ADC_ReadChannels+0x6c>)
 8001524:	f001 fdac 	bl	8003080 <HAL_ADCEx_Calibration_Start>
 8001528:	b9f8      	cbnz	r0, 800156a <ADC_ReadChannels+0x5a>
        Error_Handler();
    }

    // Configure Regular Channel
    sConfig.Channel = channel;
 800152a:	9401      	str	r4, [sp, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 800152c:	2300      	movs	r3, #0
 800152e:	9302      	str	r3, [sp, #8]
    sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001530:	9303      	str	r3, [sp, #12]
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8001532:	a901      	add	r1, sp, #4
 8001534:	4811      	ldr	r0, [pc, #68]	; (800157c <ADC_ReadChannels+0x6c>)
 8001536:	f001 fb09 	bl	8002b4c <HAL_ADC_ConfigChannel>
 800153a:	b9c8      	cbnz	r0, 8001570 <ADC_ReadChannels+0x60>
        Error_Handler();
    }

    if (HAL_ADC_Start(&hadc) != HAL_OK) {
 800153c:	480f      	ldr	r0, [pc, #60]	; (800157c <ADC_ReadChannels+0x6c>)
 800153e:	f001 fcaf 	bl	8002ea0 <HAL_ADC_Start>
 8001542:	b9c0      	cbnz	r0, 8001576 <ADC_ReadChannels+0x66>
        Error_Handler();
    }
    // Wait for end of conversion
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001544:	4c0d      	ldr	r4, [pc, #52]	; (800157c <ADC_ReadChannels+0x6c>)
 8001546:	f04f 31ff 	mov.w	r1, #4294967295
 800154a:	4620      	mov	r0, r4
 800154c:	f001 fa9c 	bl	8002a88 <HAL_ADC_PollForConversion>

    // Wait for end of conversion
    HAL_ADC_Stop(&hadc) ;   // it calls also ADC_Disable()
 8001550:	4620      	mov	r0, r4
 8001552:	f001 fd75 	bl	8003040 <HAL_ADC_Stop>

    ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001556:	4620      	mov	r0, r4
 8001558:	f001 faf5 	bl	8002b46 <HAL_ADC_GetValue>
 800155c:	4605      	mov	r5, r0

    HAL_ADC_DeInit(&hadc);
 800155e:	4620      	mov	r0, r4
 8001560:	f001 fd1a 	bl	8002f98 <HAL_ADC_DeInit>

    return ADCxConvertedValues;
}
 8001564:	4628      	mov	r0, r5
 8001566:	b005      	add	sp, #20
 8001568:	bd30      	pop	{r4, r5, pc}
        Error_Handler();
 800156a:	f000 fe6d 	bl	8002248 <Error_Handler>
 800156e:	e7dc      	b.n	800152a <ADC_ReadChannels+0x1a>
        Error_Handler();
 8001570:	f000 fe6a 	bl	8002248 <Error_Handler>
 8001574:	e7e2      	b.n	800153c <ADC_ReadChannels+0x2c>
        Error_Handler();
 8001576:	f000 fe67 	bl	8002248 <Error_Handler>
 800157a:	e7e3      	b.n	8001544 <ADC_ReadChannels+0x34>
 800157c:	20001c4c 	.word	0x20001c4c

08001580 <SYS_InitMeasurement>:
    hadc.Instance = ADC;
 8001580:	4b01      	ldr	r3, [pc, #4]	; (8001588 <SYS_InitMeasurement+0x8>)
 8001582:	4a02      	ldr	r2, [pc, #8]	; (800158c <SYS_InitMeasurement+0xc>)
 8001584:	601a      	str	r2, [r3, #0]
}
 8001586:	4770      	bx	lr
 8001588:	20001c4c 	.word	0x20001c4c
 800158c:	40012400 	.word	0x40012400

08001590 <SYS_GetBatteryLevel>:
{
 8001590:	b508      	push	{r3, lr}
    measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001592:	480d      	ldr	r0, [pc, #52]	; (80015c8 <SYS_GetBatteryLevel+0x38>)
 8001594:	f7ff ffbc 	bl	8001510 <ADC_ReadChannels>
    if (measuredLevel == 0) {
 8001598:	b198      	cbz	r0, 80015c2 <SYS_GetBatteryLevel+0x32>
 800159a:	4603      	mov	r3, r0
        if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU) {
 800159c:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <SYS_GetBatteryLevel+0x3c>)
 800159e:	8812      	ldrh	r2, [r2, #0]
 80015a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015a4:	428a      	cmp	r2, r1
 80015a6:	d007      	beq.n	80015b8 <SYS_GetBatteryLevel+0x28>
            batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80015a8:	f640 40e4 	movw	r0, #3300	; 0xce4
 80015ac:	fb00 f002 	mul.w	r0, r0, r2
 80015b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80015b4:	b280      	uxth	r0, r0
 80015b6:	e005      	b.n	80015c4 <SYS_GetBatteryLevel+0x34>
            batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80015b8:	4805      	ldr	r0, [pc, #20]	; (80015d0 <SYS_GetBatteryLevel+0x40>)
 80015ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80015be:	b280      	uxth	r0, r0
 80015c0:	e000      	b.n	80015c4 <SYS_GetBatteryLevel+0x34>
        batteryLevelmV = 0;
 80015c2:	2000      	movs	r0, #0
}
 80015c4:	bd08      	pop	{r3, pc}
 80015c6:	bf00      	nop
 80015c8:	b4002000 	.word	0xb4002000
 80015cc:	1fff75aa 	.word	0x1fff75aa
 80015d0:	004c08d8 	.word	0x004c08d8

080015d4 <SYS_GetTemperatureLevel>:
{
 80015d4:	b510      	push	{r4, lr}
    uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80015d6:	f7ff ffdb 	bl	8001590 <SYS_GetBatteryLevel>
 80015da:	4604      	mov	r4, r0
    measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 80015dc:	481a      	ldr	r0, [pc, #104]	; (8001648 <SYS_GetTemperatureLevel+0x74>)
 80015de:	f7ff ff97 	bl	8001510 <ADC_ReadChannels>
    if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0) {
 80015e2:	4b1a      	ldr	r3, [pc, #104]	; (800164c <SYS_GetTemperatureLevel+0x78>)
 80015e4:	881a      	ldrh	r2, [r3, #0]
 80015e6:	3b20      	subs	r3, #32
 80015e8:	8819      	ldrh	r1, [r3, #0]
 80015ea:	428a      	cmp	r2, r1
 80015ec:	d012      	beq.n	8001614 <SYS_GetTemperatureLevel+0x40>
        temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 80015ee:	fb00 f004 	mul.w	r0, r0, r4
 80015f2:	0883      	lsrs	r3, r0, #2
 80015f4:	4816      	ldr	r0, [pc, #88]	; (8001650 <SYS_GetTemperatureLevel+0x7c>)
 80015f6:	fba0 3003 	umull	r3, r0, r0, r3
 80015fa:	ebc1 1350 	rsb	r3, r1, r0, lsr #5
 80015fe:	2064      	movs	r0, #100	; 0x64
 8001600:	fb00 f003 	mul.w	r0, r0, r3
 8001604:	1a52      	subs	r2, r2, r1
 8001606:	fb90 f0f2 	sdiv	r0, r0, r2
 800160a:	301e      	adds	r0, #30
 800160c:	b200      	sxth	r0, r0
    temperatureDegreeC <<= 8;
 800160e:	0200      	lsls	r0, r0, #8
}
 8001610:	b200      	sxth	r0, r0
 8001612:	bd10      	pop	{r4, pc}
        temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001614:	fb00 f004 	mul.w	r0, r0, r4
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <SYS_GetTemperatureLevel+0x80>)
 800161a:	fba3 2300 	umull	r2, r3, r3, r0
 800161e:	1ac0      	subs	r0, r0, r3
 8001620:	eb03 0050 	add.w	r0, r3, r0, lsr #1
 8001624:	0ac0      	lsrs	r0, r0, #11
 8001626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162a:	fb03 f300 	mul.w	r3, r3, r0
 800162e:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 8001632:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8001636:	4a08      	ldr	r2, [pc, #32]	; (8001658 <SYS_GetTemperatureLevel+0x84>)
 8001638:	fb82 1203 	smull	r1, r2, r2, r3
 800163c:	17d8      	asrs	r0, r3, #31
 800163e:	ebc0 20a2 	rsb	r0, r0, r2, asr #10
 8001642:	301e      	adds	r0, #30
 8001644:	b200      	sxth	r0, r0
 8001646:	e7e2      	b.n	800160e <SYS_GetTemperatureLevel+0x3a>
 8001648:	b0001000 	.word	0xb0001000
 800164c:	1fff75c8 	.word	0x1fff75c8
 8001650:	09ee009f 	.word	0x09ee009f
 8001654:	00100101 	.word	0x00100101
 8001658:	68db8bad 	.word	0x68db8bad

0800165c <MX_DBG_TxCpltCallback>:
// Optional callbacks
static void (*dbgRxCallback)(uint8_t *rxChar, uint16_t size, uint8_t error) = NULL;

// Register a TX completion callback
void MX_DBG_TxCpltCallback(void (*cb)(void *))
{
 800165c:	b508      	push	{r3, lr}
 800165e:	4601      	mov	r1, r0
#if (DEBUGGER_ON_USART2||DEBUGGER_ON_LPUART1)
#if DEBUGGER_ON_USART2
    MX_UART_TxCpltCallback(&huart2, cb);
#endif
#if DEBUGGER_ON_LPUART1
    MX_UART_TxCpltCallback(&hlpuart1, cb);
 8001660:	4801      	ldr	r0, [pc, #4]	; (8001668 <MX_DBG_TxCpltCallback+0xc>)
 8001662:	f000 f9cb 	bl	80019fc <MX_UART_TxCpltCallback>
#endif
#endif
}
 8001666:	bd08      	pop	{r3, pc}
 8001668:	20001f50 	.word	0x20001f50

0800166c <MX_DBG_RxCallback>:

// Set the optional rx callback
void MX_DBG_RxCallback(void (*cb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
    dbgRxCallback = cb;
 800166c:	4b01      	ldr	r3, [pc, #4]	; (8001674 <MX_DBG_RxCallback+0x8>)
 800166e:	6018      	str	r0, [r3, #0]
}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	200003a8 	.word	0x200003a8

08001678 <MX_DBG_Active>:

// See if the debugger is active
bool MX_DBG_Active()
{
    return ((CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) != 0);
 8001678:	4b02      	ldr	r3, [pc, #8]	; (8001684 <MX_DBG_Active+0xc>)
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	f000 0001 	and.w	r0, r0, #1
}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000edf0 	.word	0xe000edf0

08001688 <MX_DBG>:

// Output a message to the console, a line at a time because
// the STM32CubeIDE doesn't recognize \n as doing an implicit
// carriage return.
void MX_DBG(const char *message, size_t length, uint32_t timeout)
{
 8001688:	b508      	push	{r3, lr}
#if (DEBUGGER_ON_USART2||DEBUGGER_ON_LPUART1)
#if DEBUGGER_ON_USART2
    MX_USART2_UART_Transmit((uint8_t *)message, length, timeout);
#endif
#if DEBUGGER_ON_LPUART1
    MX_LPUART1_UART_Transmit((uint8_t *)message, length, timeout);
 800168a:	f000 fa73 	bl	8001b74 <MX_LPUART1_UART_Transmit>
        __dwrite(_LLIO_STDOUT, (const unsigned char *)message, length);
    }
#endif
#endif

}
 800168e:	bd08      	pop	{r3, pc}

08001690 <MX_DBG_Suspend>:

// Prepare for going into stop2 mode
void MX_DBG_Suspend()
{
 8001690:	b508      	push	{r3, lr}
#if DEBUGGER_ON_USART2
    MX_USART2_UART_Suspend();
#endif
#if DEBUGGER_ON_LPUART1
    MX_LPUART1_UART_Suspend();
 8001692:	f000 fa3b 	bl	8001b0c <MX_LPUART1_UART_Suspend>
#endif
}
 8001696:	bd08      	pop	{r3, pc}

08001698 <MX_DBG_Available>:
}

// Get pending received bytes and reset the counter.
bool MX_DBG_Available(void)
{
    uint32_t drainIndex = dbgReceiveDrainIndex;
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <MX_DBG_Available+0x14>)
 800169a:	681b      	ldr	r3, [r3, #0]
    if (dbgReceiveFillIndex != drainIndex) {
 800169c:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <MX_DBG_Available+0x18>)
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d101      	bne.n	80016a8 <MX_DBG_Available+0x10>
        return true;
    }
    return false;
 80016a4:	2000      	movs	r0, #0
 80016a6:	4770      	bx	lr
        return true;
 80016a8:	2001      	movs	r0, #1
}
 80016aa:	4770      	bx	lr
 80016ac:	2000039c 	.word	0x2000039c
 80016b0:	200003a0 	.word	0x200003a0

080016b4 <MX_DBG_Receive>:

// Get pending received bytes and reset the counter.
uint8_t MX_DBG_Receive(bool *underrun, bool *overrun)
{
    if (overrun != NULL) {
 80016b4:	b129      	cbz	r1, 80016c2 <MX_DBG_Receive+0xe>
 80016b6:	460a      	mov	r2, r1
        *overrun = dbgReceiveOverrun;
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <MX_DBG_Receive+0x50>)
 80016ba:	7819      	ldrb	r1, [r3, #0]
 80016bc:	7011      	strb	r1, [r2, #0]
        dbgReceiveOverrun = false;
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
    }
    uint32_t drainIndex = dbgReceiveDrainIndex;
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_DBG_Receive+0x54>)
 80016c4:	681b      	ldr	r3, [r3, #0]
    if (dbgReceiveFillIndex == drainIndex) {
 80016c6:	4a11      	ldr	r2, [pc, #68]	; (800170c <MX_DBG_Receive+0x58>)
 80016c8:	6812      	ldr	r2, [r2, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d015      	beq.n	80016fa <MX_DBG_Receive+0x46>
{
 80016ce:	b082      	sub	sp, #8
        if (underrun != NULL) {
            *underrun = true;
        }
        return 0;
    }
    if (underrun != NULL) {
 80016d0:	b108      	cbz	r0, 80016d6 <MX_DBG_Receive+0x22>
        *underrun = false;
 80016d2:	2300      	movs	r3, #0
 80016d4:	7003      	strb	r3, [r0, #0]
    }
    uint32_t nextIndex = dbgReceiveDrainIndex + 1;
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_DBG_Receive+0x54>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	1c53      	adds	r3, r2, #1
    if (nextIndex >= sizeof(dbgReceiveBuffer)) {
 80016dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016e0:	d300      	bcc.n	80016e4 <MX_DBG_Receive+0x30>
        nextIndex = 0;
 80016e2:	2300      	movs	r3, #0
    }
    volatile uint8_t databyte = dbgReceiveBuffer[dbgReceiveDrainIndex];
 80016e4:	490a      	ldr	r1, [pc, #40]	; (8001710 <MX_DBG_Receive+0x5c>)
 80016e6:	5c8a      	ldrb	r2, [r1, r2]
 80016e8:	f88d 2007 	strb.w	r2, [sp, #7]
    dbgReceiveDrainIndex = nextIndex;
 80016ec:	4a06      	ldr	r2, [pc, #24]	; (8001708 <MX_DBG_Receive+0x54>)
 80016ee:	6013      	str	r3, [r2, #0]
    return databyte;
 80016f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80016f4:	b2c0      	uxtb	r0, r0
}
 80016f6:	b002      	add	sp, #8
 80016f8:	4770      	bx	lr
        if (underrun != NULL) {
 80016fa:	b108      	cbz	r0, 8001700 <MX_DBG_Receive+0x4c>
            *underrun = true;
 80016fc:	2301      	movs	r3, #1
 80016fe:	7003      	strb	r3, [r0, #0]
        return 0;
 8001700:	2000      	movs	r0, #0
}
 8001702:	4770      	bx	lr
 8001704:	200003a4 	.word	0x200003a4
 8001708:	2000039c 	.word	0x2000039c
 800170c:	200003a0 	.word	0x200003a0
 8001710:	20001cb0 	.word	0x20001cb0

08001714 <dbgRestartReceive>:

// ISR for debug character receive
#if (DEBUGGER_ON_USART2||DEBUGGER_ON_LPUART1)
void dbgRestartReceive(UART_HandleTypeDef *huart)
{
 8001714:	b508      	push	{r3, lr}
    // Use zero/nonzero as an indicator of a valid byte having been received
    dbgReceiveBuffer[dbgReceiveFillIndex] = 0;
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <dbgRestartReceive+0x18>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4905      	ldr	r1, [pc, #20]	; (8001730 <dbgRestartReceive+0x1c>)
 800171c:	2200      	movs	r2, #0
 800171e:	54ca      	strb	r2, [r1, r3]
#else
    HAL_UART_Receive_IT(huart, &dbgReceiveBuffer[dbgReceiveFillIndex], 1);
#endif
#endif
#if DEBUGGER_ON_LPUART1
    HAL_UART_Receive_IT(huart, &dbgReceiveBuffer[dbgReceiveFillIndex], 1);
 8001720:	2201      	movs	r2, #1
 8001722:	4419      	add	r1, r3
 8001724:	f005 faa2 	bl	8006c6c <HAL_UART_Receive_IT>
#endif
}
 8001728:	bd08      	pop	{r3, pc}
 800172a:	bf00      	nop
 800172c:	200003a0 	.word	0x200003a0
 8001730:	20001cb0 	.word	0x20001cb0

08001734 <MX_DBG_Resume>:
{
 8001734:	b508      	push	{r3, lr}
    MX_LPUART1_UART_Resume();
 8001736:	f000 fa1b 	bl	8001b70 <MX_LPUART1_UART_Resume>
    dbgRestartReceive(&hlpuart1);
 800173a:	4802      	ldr	r0, [pc, #8]	; (8001744 <MX_DBG_Resume+0x10>)
 800173c:	f7ff ffea 	bl	8001714 <dbgRestartReceive>
}
 8001740:	bd08      	pop	{r3, pc}
 8001742:	bf00      	nop
 8001744:	20001f50 	.word	0x20001f50

08001748 <dbgReceivedByteISR>:
void dbgReceivedByteISR(UART_HandleTypeDef *huart)
{
 8001748:	b500      	push	{lr}
 800174a:	b083      	sub	sp, #12

    // Ingest the byte
    uint32_t nextIndex = dbgReceiveFillIndex + 1;
 800174c:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <dbgReceivedByteISR+0x60>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	3301      	adds	r3, #1
    if (nextIndex >= sizeof(dbgReceiveBuffer)) {
 8001752:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001756:	d300      	bcc.n	800175a <dbgReceivedByteISR+0x12>
        nextIndex = 0;
 8001758:	2300      	movs	r3, #0
    }
    if (nextIndex == dbgReceiveDrainIndex) {
 800175a:	4a14      	ldr	r2, [pc, #80]	; (80017ac <dbgReceivedByteISR+0x64>)
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d00a      	beq.n	8001778 <dbgReceivedByteISR+0x30>
        dbgReceiveOverrun = true;
    } else {
        dbgReceiveFillIndex = nextIndex;
 8001762:	4a11      	ldr	r2, [pc, #68]	; (80017a8 <dbgReceivedByteISR+0x60>)
 8001764:	6013      	str	r3, [r2, #0]
    }
    dbgRestartReceive(huart);
 8001766:	f7ff ffd5 	bl	8001714 <dbgRestartReceive>

    // Notify someone
    if (dbgRxCallback == NULL) {
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <dbgReceivedByteISR+0x68>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	b9a3      	cbnz	r3, 800179a <dbgReceivedByteISR+0x52>
        MX_AppISR(0);
 8001770:	2000      	movs	r0, #0
 8001772:	f7ff fc15 	bl	8000fa0 <MX_AppISR>
 8001776:	e014      	b.n	80017a2 <dbgReceivedByteISR+0x5a>
        dbgReceiveOverrun = true;
 8001778:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <dbgReceivedByteISR+0x6c>)
 800177a:	2201      	movs	r2, #1
 800177c:	701a      	strb	r2, [r3, #0]
 800177e:	e7f2      	b.n	8001766 <dbgReceivedByteISR+0x1e>
    } else {
        while (MX_DBG_Available()) {
            uint8_t ch = MX_DBG_Receive(NULL, NULL);
 8001780:	2100      	movs	r1, #0
 8001782:	4608      	mov	r0, r1
 8001784:	f7ff ff96 	bl	80016b4 <MX_DBG_Receive>
 8001788:	f88d 0007 	strb.w	r0, [sp, #7]
            dbgRxCallback(&ch, 1, 0);
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <dbgReceivedByteISR+0x68>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2200      	movs	r2, #0
 8001792:	2101      	movs	r1, #1
 8001794:	f10d 0007 	add.w	r0, sp, #7
 8001798:	4798      	blx	r3
        while (MX_DBG_Available()) {
 800179a:	f7ff ff7d 	bl	8001698 <MX_DBG_Available>
 800179e:	2800      	cmp	r0, #0
 80017a0:	d1ee      	bne.n	8001780 <dbgReceivedByteISR+0x38>
        }
    }

}
 80017a2:	b003      	add	sp, #12
 80017a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80017a8:	200003a0 	.word	0x200003a0
 80017ac:	2000039c 	.word	0x2000039c
 80017b0:	200003a8 	.word	0x200003a8
 80017b4:	200003a4 	.word	0x200003a4

080017b8 <MX_DBG_Init>:

}

// Init debugging
void MX_DBG_Init(void)
{
 80017b8:	b510      	push	{r4, lr}
 80017ba:	b086      	sub	sp, #24

    // Initialize debug output
#if DEBUGGER_ON_LPUART1

    // Init UART
    MX_LPUART1_UART_Init();
 80017bc:	f000 f96a 	bl	8001a94 <MX_LPUART1_UART_Init>

    // Register a receive callback and initiate the receive
    HAL_UART_RegisterCallback(&hlpuart1, HAL_UART_RX_COMPLETE_CB_ID, dbgReceivedByteISR);
 80017c0:	4c1b      	ldr	r4, [pc, #108]	; (8001830 <MX_DBG_Init+0x78>)
 80017c2:	4a1c      	ldr	r2, [pc, #112]	; (8001834 <MX_DBG_Init+0x7c>)
 80017c4:	2103      	movs	r1, #3
 80017c6:	4620      	mov	r0, r4
 80017c8:	f004 fc3a 	bl	8006040 <HAL_UART_RegisterCallback>
    dbgRestartReceive(&hlpuart1);
 80017cc:	4620      	mov	r0, r4
 80017ce:	f7ff ffa1 	bl	8001714 <dbgRestartReceive>
    HAL_GPIO_WritePin(DBG_LINE4_GPIO_Port, DBG_LINE4_Pin, GPIO_PIN_RESET);

#endif  // Radio debugging

    // Enable or disable debug mode
    if (MX_DBG_Active()) {
 80017d2:	f7ff ff51 	bl	8001678 <MX_DBG_Active>
 80017d6:	b170      	cbz	r0, 80017f6 <MX_DBG_Init+0x3e>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 80017d8:	4a17      	ldr	r2, [pc, #92]	; (8001838 <MX_DBG_Init+0x80>)
 80017da:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80017de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);    // RM0453 Table 93 38.3.4
        HAL_DBGMCU_EnableDBGSleepMode();
 80017e6:	f000 ffe9 	bl	80027bc <HAL_DBGMCU_EnableDBGSleepMode>
        HAL_DBGMCU_EnableDBGStopMode();
 80017ea:	f000 fff7 	bl	80027dc <HAL_DBGMCU_EnableDBGStopMode>
        HAL_DBGMCU_EnableDBGStandbyMode();
 80017ee:	f001 f805 	bl	80027fc <HAL_DBGMCU_EnableDBGStandbyMode>
        HAL_DBGMCU_DisableDBGSleepMode();
        HAL_DBGMCU_DisableDBGStopMode();
        HAL_DBGMCU_DisableDBGStandbyMode();
    }

}
 80017f2:	b006      	add	sp, #24
 80017f4:	bd10      	pop	{r4, pc}
        GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f6:	2300      	movs	r3, #0
 80017f8:	9304      	str	r3, [sp, #16]
 80017fa:	9305      	str	r3, [sp, #20]
        GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 80017fc:	2203      	movs	r2, #3
 80017fe:	9202      	str	r2, [sp, #8]
        GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001800:	9303      	str	r3, [sp, #12]
        GPIO_InitStruct.Pin    = SWCLK_Pin;
 8001802:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001806:	9301      	str	r3, [sp, #4]
        HAL_GPIO_Init(SWCLK_GPIO_Port, &GPIO_InitStruct);
 8001808:	a901      	add	r1, sp, #4
 800180a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180e:	f001 fe93 	bl	8003538 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin    = SWDIO_Pin;
 8001812:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001816:	9301      	str	r3, [sp, #4]
        HAL_GPIO_Init(SWDIO_GPIO_Port, &GPIO_InitStruct);
 8001818:	a901      	add	r1, sp, #4
 800181a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181e:	f001 fe8b 	bl	8003538 <HAL_GPIO_Init>
        HAL_DBGMCU_DisableDBGSleepMode();
 8001822:	f000 ffd3 	bl	80027cc <HAL_DBGMCU_DisableDBGSleepMode>
        HAL_DBGMCU_DisableDBGStopMode();
 8001826:	f000 ffe1 	bl	80027ec <HAL_DBGMCU_DisableDBGStopMode>
        HAL_DBGMCU_DisableDBGStandbyMode();
 800182a:	f000 ffef 	bl	800280c <HAL_DBGMCU_DisableDBGStandbyMode>
}
 800182e:	e7e0      	b.n	80017f2 <MX_DBG_Init+0x3a>
 8001830:	20001f50 	.word	0x20001f50
 8001834:	08001749 	.word	0x08001749
 8001838:	58000800 	.word	0x58000800

0800183c <SystemClock_Config>:

}

// System Clock Configuration
void SystemClock_Config(void)
{
 800183c:	b510      	push	{r4, lr}
 800183e:	b09a      	sub	sp, #104	; 0x68
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001840:	2248      	movs	r2, #72	; 0x48
 8001842:	2100      	movs	r1, #0
 8001844:	a808      	add	r0, sp, #32
 8001846:	f015 fd79 	bl	801733c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800184a:	2400      	movs	r4, #0
 800184c:	9401      	str	r4, [sp, #4]
 800184e:	9402      	str	r4, [sp, #8]
 8001850:	9403      	str	r4, [sp, #12]
 8001852:	9404      	str	r4, [sp, #16]
 8001854:	9405      	str	r4, [sp, #20]
 8001856:	9406      	str	r4, [sp, #24]
 8001858:	9407      	str	r4, [sp, #28]

    // Configure LSE Drive Capability
    HAL_PWR_EnableBkUpAccess();
 800185a:	f002 faa5 	bl	8003da8 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800185e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001862:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001866:	f023 0318 	bic.w	r3, r3, #24
 800186a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);

    // Configure the main internal regulator output voltage
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800186e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001872:	6813      	ldr	r3, [r2, #0]
 8001874:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001878:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	6813      	ldr	r3, [r2, #0]
 8001880:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	9b00      	ldr	r3, [sp, #0]

    // Initializes the CPU, AHB and APB busses clocks
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001888:	232c      	movs	r3, #44	; 0x2c
 800188a:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800188c:	2381      	movs	r3, #129	; 0x81
 800188e:	930b      	str	r3, [sp, #44]	; 0x2c
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001890:	2301      	movs	r3, #1
 8001892:	9310      	str	r3, [sp, #64]	; 0x40
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001894:	9411      	str	r4, [sp, #68]	; 0x44
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001896:	22b0      	movs	r2, #176	; 0xb0
 8001898:	9212      	str	r2, [sp, #72]	; 0x48
    RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800189a:	940f      	str	r4, [sp, #60]	; 0x3c
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800189c:	930e      	str	r3, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800189e:	9413      	str	r4, [sp, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018a0:	a808      	add	r0, sp, #32
 80018a2:	f002 fc19 	bl	80040d8 <HAL_RCC_OscConfig>
 80018a6:	b9a0      	cbnz	r0, 80018d2 <SystemClock_Config+0x96>
        Error_Handler();
    }

    // Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80018a8:	234f      	movs	r3, #79	; 0x4f
 80018aa:	9301      	str	r3, [sp, #4]
                                  |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                                  |RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80018ac:	2300      	movs	r3, #0
 80018ae:	9302      	str	r3, [sp, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b0:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018b2:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b4:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80018b6:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80018b8:	2102      	movs	r1, #2
 80018ba:	a801      	add	r0, sp, #4
 80018bc:	f002 ff48 	bl	8004750 <HAL_RCC_ClockConfig>
 80018c0:	b950      	cbnz	r0, 80018d8 <SystemClock_Config+0x9c>
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80018c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018c6:	6893      	ldr	r3, [r2, #8]
 80018c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80018cc:	6093      	str	r3, [r2, #8]
    }

    // Ensure that MSI is wake-up system clock
    __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);

}
 80018ce:	b01a      	add	sp, #104	; 0x68
 80018d0:	bd10      	pop	{r4, pc}
        Error_Handler();
 80018d2:	f000 fcb9 	bl	8002248 <Error_Handler>
 80018d6:	e7e7      	b.n	80018a8 <SystemClock_Config+0x6c>
        Error_Handler();
 80018d8:	f000 fcb6 	bl	8002248 <Error_Handler>
 80018dc:	e7f1      	b.n	80018c2 <SystemClock_Config+0x86>
	...

080018e0 <MX_GPIO_Init>:

// Initialize for GPIO
void MX_GPIO_Init(void)
{
 80018e0:	b500      	push	{lr}
 80018e2:	b08b      	sub	sp, #44	; 0x2c
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018ea:	f042 0201 	orr.w	r2, r2, #1
 80018ee:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018f2:	f002 0201 	and.w	r2, r2, #1
 80018f6:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 80018f8:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018fc:	f042 0202 	orr.w	r2, r2, #2
 8001900:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001902:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001904:	f002 0202 	and.w	r2, r2, #2
 8001908:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 800190a:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800190c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800190e:	f042 0204 	orr.w	r2, r2, #4
 8001912:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001914:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001916:	f002 0204 	and.w	r2, r2, #4
 800191a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800191c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800191e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001920:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001924:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800192c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800192e:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
    __HAL_RCC_GPIOH_CLK_ENABLE();

    // Default all pins to analog except SWD pins.  (This has a hard-wired
    // assumption that SWDIO_GPIO_Port and SWCLK_GPIO_Port are GPIOA.)
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	2300      	movs	r3, #0
 8001932:	9308      	str	r3, [sp, #32]
 8001934:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001936:	2203      	movs	r2, #3
 8001938:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_All & (~(SWDIO_Pin|SWCLK_Pin));
 800193c:	f649 73ff 	movw	r3, #40959	; 0x9fff
 8001940:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001942:	a905      	add	r1, sp, #20
 8001944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001948:	f001 fdf6 	bl	8003538 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_All;
 800194c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001950:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001952:	a905      	add	r1, sp, #20
 8001954:	4806      	ldr	r0, [pc, #24]	; (8001970 <MX_GPIO_Init+0x90>)
 8001956:	f001 fdef 	bl	8003538 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800195a:	a905      	add	r1, sp, #20
 800195c:	4805      	ldr	r0, [pc, #20]	; (8001974 <MX_GPIO_Init+0x94>)
 800195e:	f001 fdeb 	bl	8003538 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001962:	a905      	add	r1, sp, #20
 8001964:	4804      	ldr	r0, [pc, #16]	; (8001978 <MX_GPIO_Init+0x98>)
 8001966:	f001 fde7 	bl	8003538 <HAL_GPIO_Init>

}
 800196a:	b00b      	add	sp, #44	; 0x2c
 800196c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001970:	48000400 	.word	0x48000400
 8001974:	48000800 	.word	0x48000800
 8001978:	48001c00 	.word	0x48001c00

0800197c <MX_DMA_Init>:

// Enable DMA controller clock
void MX_DMA_Init(void)
{
 800197c:	b084      	sub	sp, #16
  SET_BIT(RCC->AHB1ENR, Periphs);
 800197e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001982:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001984:	f042 0204 	orr.w	r2, r2, #4
 8001988:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800198a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800198c:	f002 0204 	and.w	r2, r2, #4
 8001990:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8001992:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001994:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001996:	f042 0201 	orr.w	r2, r2, #1
 800199a:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800199c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800199e:	f002 0201 	and.w	r2, r2, #1
 80019a2:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80019a4:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80019a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019a8:	f042 0202 	orr.w	r2, r2, #2
 80019ac:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80019ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80019b6:	9b01      	ldr	r3, [sp, #4]
    // DMA controller clock enable
    __HAL_RCC_DMAMUX1_CLK_ENABLE();
    __HAL_RCC_DMA1_CLK_ENABLE();
    __HAL_RCC_DMA2_CLK_ENABLE();

}
 80019b8:	b004      	add	sp, #16
 80019ba:	4770      	bx	lr

080019bc <main>:
{
 80019bc:	b510      	push	{r4, lr}
    memcpy(vector_t, (uint8_t *) FLASH_BASE, sizeof(vector_t));
 80019be:	4c0d      	ldr	r4, [pc, #52]	; (80019f4 <main+0x38>)
 80019c0:	f44f 729c 	mov.w	r2, #312	; 0x138
 80019c4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80019c8:	4620      	mov	r0, r4
 80019ca:	f015 fca9 	bl	8017320 <memcpy>
    SCB->VTOR = (uint32_t) vector_t;
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <main+0x3c>)
 80019d0:	609c      	str	r4, [r3, #8]
    HAL_Init();
 80019d2:	f000 febb 	bl	800274c <HAL_Init>
    SystemClock_Config();
 80019d6:	f7ff ff31 	bl	800183c <SystemClock_Config>
    MX_GPIO_Init();
 80019da:	f7ff ff81 	bl	80018e0 <MX_GPIO_Init>
    MX_DMA_Init();
 80019de:	f7ff ffcd 	bl	800197c <MX_DMA_Init>
    MX_DBG_Init();
 80019e2:	f7ff fee9 	bl	80017b8 <MX_DBG_Init>
    MX_UTIL_Init();
 80019e6:	f000 fe35 	bl	8002654 <MX_UTIL_Init>
    MX_AppMain();
 80019ea:	f7ff fbe7 	bl	80011bc <MX_AppMain>
}
 80019ee:	2000      	movs	r0, #0
 80019f0:	bd10      	pop	{r4, pc}
 80019f2:	bf00      	nop
 80019f4:	20000400 	.word	0x20000400
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <MX_UART_TxCpltCallback>:
}

// Register a completion callback
void MX_UART_TxCpltCallback(UART_HandleTypeDef *huart, void (*cb)(void *))
{
    if (huart == &huart1) {
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <MX_UART_TxCpltCallback+0x28>)
 80019fe:	4298      	cmp	r0, r3
 8001a00:	d006      	beq.n	8001a10 <MX_UART_TxCpltCallback+0x14>
        TxCpltCallback_USART1 = cb;
    }
    if (huart == &huart2) {
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <MX_UART_TxCpltCallback+0x2c>)
 8001a04:	4298      	cmp	r0, r3
 8001a06:	d006      	beq.n	8001a16 <MX_UART_TxCpltCallback+0x1a>
        TxCpltCallback_USART2 = cb;
    }
    if (huart == &hlpuart1) {
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <MX_UART_TxCpltCallback+0x30>)
 8001a0a:	4298      	cmp	r0, r3
 8001a0c:	d006      	beq.n	8001a1c <MX_UART_TxCpltCallback+0x20>
        TxCpltCallback_LPUART1 = cb;
    }
}
 8001a0e:	4770      	bx	lr
        TxCpltCallback_USART1 = cb;
 8001a10:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <MX_UART_TxCpltCallback+0x34>)
 8001a12:	6019      	str	r1, [r3, #0]
 8001a14:	e7f5      	b.n	8001a02 <MX_UART_TxCpltCallback+0x6>
        TxCpltCallback_USART2 = cb;
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <MX_UART_TxCpltCallback+0x38>)
 8001a18:	6019      	str	r1, [r3, #0]
 8001a1a:	e7f5      	b.n	8001a08 <MX_UART_TxCpltCallback+0xc>
        TxCpltCallback_LPUART1 = cb;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <MX_UART_TxCpltCallback+0x3c>)
 8001a1e:	6019      	str	r1, [r3, #0]
}
 8001a20:	e7f5      	b.n	8001a0e <MX_UART_TxCpltCallback+0x12>
 8001a22:	bf00      	nop
 8001a24:	200021f8 	.word	0x200021f8
 8001a28:	20002324 	.word	0x20002324
 8001a2c:	20001f50 	.word	0x20001f50
 8001a30:	200003b0 	.word	0x200003b0
 8001a34:	200003b4 	.word	0x200003b4
 8001a38:	200003ac 	.word	0x200003ac

08001a3c <HAL_UART_TxCpltCallback>:

// Transmit complete callback for serial ports
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a3c:	b510      	push	{r4, lr}
 8001a3e:	4604      	mov	r4, r0
    if (huart == &huart1 && TxCpltCallback_USART1 != NULL) {
 8001a40:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <HAL_UART_TxCpltCallback+0x40>)
 8001a42:	4298      	cmp	r0, r3
 8001a44:	d006      	beq.n	8001a54 <HAL_UART_TxCpltCallback+0x18>
        TxCpltCallback_USART1(huart);
    }
    if (huart == &huart2 && TxCpltCallback_USART2 != NULL) {
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_UART_TxCpltCallback+0x44>)
 8001a48:	429c      	cmp	r4, r3
 8001a4a:	d009      	beq.n	8001a60 <HAL_UART_TxCpltCallback+0x24>
        TxCpltCallback_USART2(huart);
    }
    if (huart == &hlpuart1 && TxCpltCallback_LPUART1 != NULL) {
 8001a4c:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <HAL_UART_TxCpltCallback+0x48>)
 8001a4e:	429c      	cmp	r4, r3
 8001a50:	d00d      	beq.n	8001a6e <HAL_UART_TxCpltCallback+0x32>
        TxCpltCallback_LPUART1(huart);
    }
}
 8001a52:	bd10      	pop	{r4, pc}
    if (huart == &huart1 && TxCpltCallback_USART1 != NULL) {
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <HAL_UART_TxCpltCallback+0x4c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f4      	beq.n	8001a46 <HAL_UART_TxCpltCallback+0xa>
        TxCpltCallback_USART1(huart);
 8001a5c:	4798      	blx	r3
 8001a5e:	e7f2      	b.n	8001a46 <HAL_UART_TxCpltCallback+0xa>
    if (huart == &huart2 && TxCpltCallback_USART2 != NULL) {
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_UART_TxCpltCallback+0x50>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f1      	beq.n	8001a4c <HAL_UART_TxCpltCallback+0x10>
        TxCpltCallback_USART2(huart);
 8001a68:	4620      	mov	r0, r4
 8001a6a:	4798      	blx	r3
 8001a6c:	e7ee      	b.n	8001a4c <HAL_UART_TxCpltCallback+0x10>
    if (huart == &hlpuart1 && TxCpltCallback_LPUART1 != NULL) {
 8001a6e:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <HAL_UART_TxCpltCallback+0x54>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0ed      	beq.n	8001a52 <HAL_UART_TxCpltCallback+0x16>
        TxCpltCallback_LPUART1(huart);
 8001a76:	4620      	mov	r0, r4
 8001a78:	4798      	blx	r3
}
 8001a7a:	e7ea      	b.n	8001a52 <HAL_UART_TxCpltCallback+0x16>
 8001a7c:	200021f8 	.word	0x200021f8
 8001a80:	20002324 	.word	0x20002324
 8001a84:	20001f50 	.word	0x20001f50
 8001a88:	200003b0 	.word	0x200003b0
 8001a8c:	200003b4 	.word	0x200003b4
 8001a90:	200003ac 	.word	0x200003ac

08001a94 <MX_LPUART1_UART_Init>:

}

// LPUART1 Initialization Function
void MX_LPUART1_UART_Init(void)
{
 8001a94:	b508      	push	{r3, lr}

    hlpuart1.Instance = LPUART1;
 8001a96:	481a      	ldr	r0, [pc, #104]	; (8001b00 <MX_LPUART1_UART_Init+0x6c>)
 8001a98:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <MX_LPUART1_UART_Init+0x70>)
 8001a9a:	6003      	str	r3, [r0, #0]
    hlpuart1.Init.BaudRate = LPUART1_BAUDRATE;
 8001a9c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001aa0:	6043      	str	r3, [r0, #4]
    hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	6083      	str	r3, [r0, #8]
    hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001aa6:	60c3      	str	r3, [r0, #12]
    hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001aa8:	6103      	str	r3, [r0, #16]
    hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001aaa:	220c      	movs	r2, #12
 8001aac:	6142      	str	r2, [r0, #20]
    hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aae:	6183      	str	r3, [r0, #24]
    hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ab0:	6203      	str	r3, [r0, #32]
    hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ab2:	6243      	str	r3, [r0, #36]	; 0x24
    hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ab4:	6283      	str	r3, [r0, #40]	; 0x28
    hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001ab6:	6643      	str	r3, [r0, #100]	; 0x64
    if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 8001ab8:	f005 f802 	bl	8006ac0 <HAL_UART_Init>
 8001abc:	b998      	cbnz	r0, 8001ae6 <MX_LPUART1_UART_Init+0x52>
        Error_Handler();
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8001abe:	2100      	movs	r1, #0
 8001ac0:	480f      	ldr	r0, [pc, #60]	; (8001b00 <MX_LPUART1_UART_Init+0x6c>)
 8001ac2:	f005 f949 	bl	8006d58 <HAL_UARTEx_SetTxFifoThreshold>
 8001ac6:	b988      	cbnz	r0, 8001aec <MX_LPUART1_UART_Init+0x58>
        Error_Handler();
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8001ac8:	2100      	movs	r1, #0
 8001aca:	480d      	ldr	r0, [pc, #52]	; (8001b00 <MX_LPUART1_UART_Init+0x6c>)
 8001acc:	f005 f969 	bl	8006da2 <HAL_UARTEx_SetRxFifoThreshold>
 8001ad0:	b978      	cbnz	r0, 8001af2 <MX_LPUART1_UART_Init+0x5e>
        Error_Handler();
    }
    if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 8001ad2:	480b      	ldr	r0, [pc, #44]	; (8001b00 <MX_LPUART1_UART_Init+0x6c>)
 8001ad4:	f005 f921 	bl	8006d1a <HAL_UARTEx_DisableFifoMode>
 8001ad8:	b970      	cbnz	r0, 8001af8 <MX_LPUART1_UART_Init+0x64>
        Error_Handler();
    }

    peripherals |= PERIPHERAL_LPUART1;
 8001ada:	4a0b      	ldr	r2, [pc, #44]	; (8001b08 <MX_LPUART1_UART_Init+0x74>)
 8001adc:	6813      	ldr	r3, [r2, #0]
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	6013      	str	r3, [r2, #0]

}
 8001ae4:	bd08      	pop	{r3, pc}
        Error_Handler();
 8001ae6:	f000 fbaf 	bl	8002248 <Error_Handler>
 8001aea:	e7e8      	b.n	8001abe <MX_LPUART1_UART_Init+0x2a>
        Error_Handler();
 8001aec:	f000 fbac 	bl	8002248 <Error_Handler>
 8001af0:	e7ea      	b.n	8001ac8 <MX_LPUART1_UART_Init+0x34>
        Error_Handler();
 8001af2:	f000 fba9 	bl	8002248 <Error_Handler>
 8001af6:	e7ec      	b.n	8001ad2 <MX_LPUART1_UART_Init+0x3e>
        Error_Handler();
 8001af8:	f000 fba6 	bl	8002248 <Error_Handler>
 8001afc:	e7ed      	b.n	8001ada <MX_LPUART1_UART_Init+0x46>
 8001afe:	bf00      	nop
 8001b00:	20001f50 	.word	0x20001f50
 8001b04:	40008000 	.word	0x40008000
 8001b08:	200003b8 	.word	0x200003b8

08001b0c <MX_LPUART1_UART_Suspend>:
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_ORE(USART_TypeDef *LPUARTx)
{
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 8001b0c:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <MX_LPUART1_UART_Suspend+0x58>)
 8001b0e:	2208      	movs	r2, #8
 8001b10:	621a      	str	r2, [r3, #32]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_BUSY) == (USART_ISR_BUSY)) ? 1UL : 0UL);
 8001b12:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <MX_LPUART1_UART_Suspend+0x58>)
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001b1a:	d1fa      	bne.n	8001b12 <MX_LPUART1_UART_Suspend+0x6>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <MX_LPUART1_UART_Suspend+0x58>)
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001b24:	d0fa      	beq.n	8001b1c <MX_LPUART1_UART_Suspend+0x10>
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_WKUP(USART_TypeDef *LPUARTx)
{
  WRITE_REG(LPUARTx->ICR, USART_ICR_WUCF);
 8001b26:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <MX_LPUART1_UART_Suspend+0x58>)
 8001b28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b2c:	621a      	str	r2, [r3, #32]
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_WKUP(USART_TypeDef *LPUARTx)
{
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_WUFIE);
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <MX_LPUART1_UART_Suspend+0x5c>)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b30:	e852 3f00 	ldrex	r3, [r2]
 8001b34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b38:	e842 3100 	strex	r1, r3, [r2]
 8001b3c:	2900      	cmp	r1, #0
 8001b3e:	d1f6      	bne.n	8001b2e <MX_LPUART1_UART_Suspend+0x22>
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_UESM);
 8001b40:	4a08      	ldr	r2, [pc, #32]	; (8001b64 <MX_LPUART1_UART_Suspend+0x58>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b42:	e852 3f00 	ldrex	r3, [r2]
 8001b46:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b4a:	e842 3100 	strex	r1, r3, [r2]
 8001b4e:	2900      	cmp	r1, #0
 8001b50:	d1f6      	bne.n	8001b40 <MX_LPUART1_UART_Suspend+0x34>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001b52:	4a06      	ldr	r2, [pc, #24]	; (8001b6c <MX_LPUART1_UART_Suspend+0x60>)
 8001b54:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8001b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    LL_LPUART_EnableInStopMode(LPUART1);

    // Unmask wakeup with Interrupt request from LPUART1
    LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_28);

}
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40008000 	.word	0x40008000
 8001b68:	40008008 	.word	0x40008008
 8001b6c:	58000800 	.word	0x58000800

08001b70 <MX_LPUART1_UART_Resume>:

// LPUART1 resume function
void MX_LPUART1_UART_Resume(void)
{
}
 8001b70:	4770      	bx	lr
	...

08001b74 <MX_LPUART1_UART_Transmit>:

// Transmit to LPUART1
void MX_LPUART1_UART_Transmit(uint8_t *buf, uint32_t len, uint32_t timeoutMs)
{
 8001b74:	b538      	push	{r3, r4, r5, lr}
 8001b76:	4615      	mov	r5, r2

    // Transmit
    HAL_UART_Transmit_IT(&hlpuart1, buf, len);
 8001b78:	b28a      	uxth	r2, r1
 8001b7a:	4601      	mov	r1, r0
 8001b7c:	4809      	ldr	r0, [pc, #36]	; (8001ba4 <MX_LPUART1_UART_Transmit+0x30>)
 8001b7e:	f004 fae1 	bl	8006144 <HAL_UART_Transmit_IT>

    // Wait, so that the caller won't mess with the buffer while the HAL is using it
    for (uint32_t i=0; i<timeoutMs; i++) {
 8001b82:	2400      	movs	r4, #0
 8001b84:	42ac      	cmp	r4, r5
 8001b86:	d20b      	bcs.n	8001ba0 <MX_LPUART1_UART_Transmit+0x2c>
        HAL_UART_StateTypeDef state = HAL_UART_GetState(&hlpuart1);
 8001b88:	4806      	ldr	r0, [pc, #24]	; (8001ba4 <MX_LPUART1_UART_Transmit+0x30>)
 8001b8a:	f004 fcdf 	bl	800654c <HAL_UART_GetState>
        if ((state & HAL_UART_STATE_BUSY_TX) != HAL_UART_STATE_BUSY_TX) {
 8001b8e:	f000 0021 	and.w	r0, r0, #33	; 0x21
 8001b92:	2821      	cmp	r0, #33	; 0x21
 8001b94:	d104      	bne.n	8001ba0 <MX_LPUART1_UART_Transmit+0x2c>
            break;
        }
        HAL_Delay(1);
 8001b96:	2001      	movs	r0, #1
 8001b98:	f000 fbfc 	bl	8002394 <HAL_Delay>
    for (uint32_t i=0; i<timeoutMs; i++) {
 8001b9c:	3401      	adds	r4, #1
 8001b9e:	e7f1      	b.n	8001b84 <MX_LPUART1_UART_Transmit+0x10>
    }

}
 8001ba0:	bd38      	pop	{r3, r4, r5, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20001f50 	.word	0x20001f50

08001ba8 <RBI_Init>:

#include "board.h"
#include "radio_conf.h"

int32_t RBI_Init(void)
{
 8001ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001baa:	b087      	sub	sp, #28

    // should be calling BSP_RADIO_Init() but not supported by MX

    GPIO_InitTypeDef  gpio_init_structure = {0};
 8001bac:	2400      	movs	r4, #0
 8001bae:	9405      	str	r4, [sp, #20]

    // Configure the Radio Switch pin
    gpio_init_structure.Pin   = FE_CTRL1_Pin;
 8001bb0:	f44f 7580 	mov.w	r5, #256	; 0x100
 8001bb4:	9501      	str	r5, [sp, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	9302      	str	r3, [sp, #8]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001bba:	9403      	str	r4, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	9304      	str	r3, [sp, #16]

    HAL_GPIO_Init(FE_CTRL1_GPIO_Port, &gpio_init_structure);
 8001bc0:	a901      	add	r1, sp, #4
 8001bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc6:	f001 fcb7 	bl	8003538 <HAL_GPIO_Init>

    gpio_init_structure.Pin = FE_CTRL2_Pin;
 8001bca:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001bce:	9701      	str	r7, [sp, #4]
    HAL_GPIO_Init(FE_CTRL2_GPIO_Port, &gpio_init_structure);
 8001bd0:	a901      	add	r1, sp, #4
 8001bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd6:	f001 fcaf 	bl	8003538 <HAL_GPIO_Init>

    gpio_init_structure.Pin = FE_CTRL3_Pin;
 8001bda:	9501      	str	r5, [sp, #4]
    HAL_GPIO_Init(FE_CTRL3_GPIO_Port, &gpio_init_structure);
 8001bdc:	4e0c      	ldr	r6, [pc, #48]	; (8001c10 <RBI_Init+0x68>)
 8001bde:	a901      	add	r1, sp, #4
 8001be0:	4630      	mov	r0, r6
 8001be2:	f001 fca9 	bl	8003538 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(FE_CTRL2_GPIO_Port, FE_CTRL2_Pin, GPIO_PIN_RESET);
 8001be6:	4622      	mov	r2, r4
 8001be8:	4639      	mov	r1, r7
 8001bea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bee:	f001 fd62 	bl	80036b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FE_CTRL1_GPIO_Port, FE_CTRL1_Pin, GPIO_PIN_RESET);
 8001bf2:	4622      	mov	r2, r4
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bfa:	f001 fd5c 	bl	80036b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FE_CTRL3_GPIO_Port, FE_CTRL3_Pin, GPIO_PIN_RESET);
 8001bfe:	4622      	mov	r2, r4
 8001c00:	4629      	mov	r1, r5
 8001c02:	4630      	mov	r0, r6
 8001c04:	f001 fd57 	bl	80036b6 <HAL_GPIO_WritePin>

    return 0;

}
 8001c08:	4620      	mov	r0, r4
 8001c0a:	b007      	add	sp, #28
 8001c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	48000400 	.word	0x48000400

08001c14 <RBI_ConfigRFSwitch>:
    return 0;

}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8001c14:	b508      	push	{r3, lr}

    switch (Config) {
 8001c16:	2803      	cmp	r0, #3
 8001c18:	d817      	bhi.n	8001c4a <RBI_ConfigRFSwitch+0x36>
 8001c1a:	e8df f000 	tbb	[pc, r0]
 8001c1e:	1802      	.short	0x1802
 8001c20:	422d      	.short	0x422d
    case RBI_SWITCH_OFF: {
        // Turn off switch
        HAL_GPIO_WritePin(FE_CTRL3_GPIO_Port, FE_CTRL3_Pin, GPIO_PIN_RESET);
 8001c22:	2200      	movs	r2, #0
 8001c24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c28:	4828      	ldr	r0, [pc, #160]	; (8001ccc <RBI_ConfigRFSwitch+0xb8>)
 8001c2a:	f001 fd44 	bl	80036b6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FE_CTRL1_GPIO_Port, FE_CTRL1_Pin, GPIO_PIN_RESET);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c38:	f001 fd3d 	bl	80036b6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FE_CTRL2_GPIO_Port, FE_CTRL2_Pin, GPIO_PIN_RESET);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c46:	f001 fd36 	bl	80036b6 <HAL_GPIO_WritePin>
        break;
    }

    return 0;

}
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(FE_CTRL3_GPIO_Port, FE_CTRL3_Pin, GPIO_PIN_SET);
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c54:	481d      	ldr	r0, [pc, #116]	; (8001ccc <RBI_ConfigRFSwitch+0xb8>)
 8001c56:	f001 fd2e 	bl	80036b6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FE_CTRL1_GPIO_Port, FE_CTRL1_Pin, GPIO_PIN_SET);
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c64:	f001 fd27 	bl	80036b6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FE_CTRL2_GPIO_Port, FE_CTRL2_Pin, GPIO_PIN_RESET);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c72:	f001 fd20 	bl	80036b6 <HAL_GPIO_WritePin>
        break;
 8001c76:	e7e8      	b.n	8001c4a <RBI_ConfigRFSwitch+0x36>
        HAL_GPIO_WritePin(FE_CTRL3_GPIO_Port, FE_CTRL3_Pin, GPIO_PIN_SET);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c7e:	4813      	ldr	r0, [pc, #76]	; (8001ccc <RBI_ConfigRFSwitch+0xb8>)
 8001c80:	f001 fd19 	bl	80036b6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FE_CTRL1_GPIO_Port, FE_CTRL1_Pin, GPIO_PIN_SET);
 8001c84:	2201      	movs	r2, #1
 8001c86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c8e:	f001 fd12 	bl	80036b6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FE_CTRL2_GPIO_Port, FE_CTRL2_Pin, GPIO_PIN_SET);
 8001c92:	2201      	movs	r2, #1
 8001c94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9c:	f001 fd0b 	bl	80036b6 <HAL_GPIO_WritePin>
        break;
 8001ca0:	e7d3      	b.n	8001c4a <RBI_ConfigRFSwitch+0x36>
        HAL_GPIO_WritePin(FE_CTRL3_GPIO_Port, FE_CTRL3_Pin, GPIO_PIN_SET);
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ca8:	4808      	ldr	r0, [pc, #32]	; (8001ccc <RBI_ConfigRFSwitch+0xb8>)
 8001caa:	f001 fd04 	bl	80036b6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FE_CTRL1_GPIO_Port, FE_CTRL1_Pin, GPIO_PIN_RESET);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb8:	f001 fcfd 	bl	80036b6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FE_CTRL2_GPIO_Port, FE_CTRL2_Pin, GPIO_PIN_SET);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc6:	f001 fcf6 	bl	80036b6 <HAL_GPIO_WritePin>
        break;
 8001cca:	e7be      	b.n	8001c4a <RBI_ConfigRFSwitch+0x36>
 8001ccc:	48000400 	.word	0x48000400

08001cd0 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
    return RBI_CONF_RFO;
}
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	4770      	bx	lr

08001cd4 <RBI_IsTCXO>:
}

int32_t RBI_IsTCXO(void)
{
    return IS_TCXO_SUPPORTED;
}
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	4770      	bx	lr

08001cd8 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
    return IS_DCDC_SUPPORTED;
}
 8001cd8:	2001      	movs	r0, #1
 8001cda:	4770      	bx	lr

08001cdc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

// RTC init
void MX_RTC_Init(void)
{
 8001cdc:	b500      	push	{lr}
 8001cde:	b08d      	sub	sp, #52	; 0x34

    RTC_AlarmTypeDef sAlarm = {0};
 8001ce0:	222c      	movs	r2, #44	; 0x2c
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	a801      	add	r0, sp, #4
 8001ce6:	f015 fb29 	bl	801733c <memset>

    hrtc.Instance = RTC;
 8001cea:	4819      	ldr	r0, [pc, #100]	; (8001d50 <MX_RTC_Init+0x74>)
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <MX_RTC_Init+0x78>)
 8001cee:	6003      	str	r3, [r0, #0]
    hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001cf0:	231f      	movs	r3, #31
 8001cf2:	6083      	str	r3, [r0, #8]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	6103      	str	r3, [r0, #16]
    hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001cf8:	6143      	str	r3, [r0, #20]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001cfa:	6183      	str	r3, [r0, #24]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d00:	61c2      	str	r2, [r0, #28]
    hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001d02:	6203      	str	r3, [r0, #32]
    hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d08:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001d0a:	f003 f87d 	bl	8004e08 <HAL_RTC_Init>
 8001d0e:	b9a8      	cbnz	r0, 8001d3c <MX_RTC_Init+0x60>
        Error_Handler();
    }

    // Initialize RTC and set the Time and Date
    if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK) {
 8001d10:	480f      	ldr	r0, [pc, #60]	; (8001d50 <MX_RTC_Init+0x74>)
 8001d12:	f003 f9b3 	bl	800507c <HAL_RTCEx_SetSSRU_IT>
 8001d16:	b9a0      	cbnz	r0, 8001d42 <MX_RTC_Init+0x66>
        Error_Handler();
    }

    // Enable the Alarm A
    sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001d18:	2200      	movs	r2, #0
 8001d1a:	9208      	str	r2, [sp, #32]
    sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d1c:	9202      	str	r2, [sp, #8]
    sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d1e:	9206      	str	r2, [sp, #24]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001d20:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001d24:	9307      	str	r3, [sp, #28]
    sAlarm.Alarm = RTC_ALARM_A;
 8001d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d2a:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK) {
 8001d2c:	a901      	add	r1, sp, #4
 8001d2e:	4808      	ldr	r0, [pc, #32]	; (8001d50 <MX_RTC_Init+0x74>)
 8001d30:	f003 f8c8 	bl	8004ec4 <HAL_RTC_SetAlarm_IT>
 8001d34:	b940      	cbnz	r0, 8001d48 <MX_RTC_Init+0x6c>
        Error_Handler();
    }

}
 8001d36:	b00d      	add	sp, #52	; 0x34
 8001d38:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 8001d3c:	f000 fa84 	bl	8002248 <Error_Handler>
 8001d40:	e7e6      	b.n	8001d10 <MX_RTC_Init+0x34>
        Error_Handler();
 8001d42:	f000 fa81 	bl	8002248 <Error_Handler>
 8001d46:	e7e7      	b.n	8001d18 <MX_RTC_Init+0x3c>
        Error_Handler();
 8001d48:	f000 fa7e 	bl	8002248 <Error_Handler>
}
 8001d4c:	e7f3      	b.n	8001d36 <MX_RTC_Init+0x5a>
 8001d4e:	bf00      	nop
 8001d50:	200024ac 	.word	0x200024ac
 8001d54:	40002800 	.word	0x40002800

08001d58 <HAL_RTC_MspInit>:

// MSP init
void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001d58:	b510      	push	{r4, lr}
 8001d5a:	b090      	sub	sp, #64	; 0x40
 8001d5c:	4604      	mov	r4, r0

    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d5e:	2238      	movs	r2, #56	; 0x38
 8001d60:	2100      	movs	r1, #0
 8001d62:	a802      	add	r0, sp, #8
 8001d64:	f015 faea 	bl	801733c <memset>
    if(rtcHandle->Instance==RTC) {
 8001d68:	6822      	ldr	r2, [r4, #0]
 8001d6a:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <HAL_RTC_MspInit+0x7c>)
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RTC_MspInit+0x1c>
        HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
        HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
        HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);

    }
}
 8001d70:	b010      	add	sp, #64	; 0x40
 8001d72:	bd10      	pop	{r4, pc}
        PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d78:	9302      	str	r3, [sp, #8]
        PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d7e:	930f      	str	r3, [sp, #60]	; 0x3c
        if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001d80:	a802      	add	r0, sp, #8
 8001d82:	f002 fe39 	bl	80049f8 <HAL_RCCEx_PeriphCLKConfig>
 8001d86:	bb08      	cbnz	r0, 8001dcc <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d8c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001d90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d9e:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001da8:	9b01      	ldr	r3, [sp, #4]
        HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	4611      	mov	r1, r2
 8001dae:	2002      	movs	r0, #2
 8001db0:	f001 f9c8 	bl	8003144 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001db4:	2002      	movs	r0, #2
 8001db6:	f001 f9f9 	bl	80031ac <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	202a      	movs	r0, #42	; 0x2a
 8001dc0:	f001 f9c0 	bl	8003144 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001dc4:	202a      	movs	r0, #42	; 0x2a
 8001dc6:	f001 f9f1 	bl	80031ac <HAL_NVIC_EnableIRQ>
}
 8001dca:	e7d1      	b.n	8001d70 <HAL_RTC_MspInit+0x18>
            Error_Handler();
 8001dcc:	f000 fa3c 	bl	8002248 <Error_Handler>
 8001dd0:	e7da      	b.n	8001d88 <HAL_RTC_MspInit+0x30>
 8001dd2:	bf00      	nop
 8001dd4:	40002800 	.word	0x40002800

08001dd8 <PWR_EnterOffMode>:
    PWR_ExitOffMode,
};

void PWR_EnterOffMode(void)
{
}
 8001dd8:	4770      	bx	lr

08001dda <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
}
 8001dda:	4770      	bx	lr

08001ddc <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001ddc:	b508      	push	{r3, lr}

    // Suspend
    MX_DBG_Suspend();
 8001dde:	f7ff fc57 	bl	8001690 <MX_DBG_Suspend>

    // Suspend sysTick : work around for degugger problem in dual core (tickets 71085,  72038, 71087 )
    HAL_SuspendTick();
 8001de2:	f000 fcc9 	bl	8002778 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001de6:	2001      	movs	r0, #1
 8001de8:	4b02      	ldr	r3, [pc, #8]	; (8001df4 <PWR_EnterStopMode+0x18>)
 8001dea:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88

    // Clear Status Flag before entering STOP/STANDBY Mode
    LL_PWR_ClearFlag_C1STOP_C1STB();

    HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001dee:	f002 f83f 	bl	8003e70 <HAL_PWREx_EnterSTOP2Mode>

}
 8001df2:	bd08      	pop	{r3, pc}
 8001df4:	58000400 	.word	0x58000400

08001df8 <PWR_ExitSleepMode>:
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);

}

void PWR_ExitSleepMode(void)
{
 8001df8:	b508      	push	{r3, lr}

    // Suspend sysTick
    HAL_ResumeTick();
 8001dfa:	f000 fcc5 	bl	8002788 <HAL_ResumeTick>

}
 8001dfe:	bd08      	pop	{r3, pc}

08001e00 <PWR_ExitStopMode>:
{
 8001e00:	b508      	push	{r3, lr}
    HAL_ResumeTick();
 8001e02:	f000 fcc1 	bl	8002788 <HAL_ResumeTick>
    MX_DBG_Resume();
 8001e06:	f7ff fc95 	bl	8001734 <MX_DBG_Resume>
}
 8001e0a:	bd08      	pop	{r3, pc}

08001e0c <PWR_EnterSleepMode>:
{
 8001e0c:	b508      	push	{r3, lr}
    HAL_SuspendTick();
 8001e0e:	f000 fcb3 	bl	8002778 <HAL_SuspendTick>
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001e12:	2101      	movs	r1, #1
 8001e14:	2000      	movs	r0, #0
 8001e16:	f001 ffcf 	bl	8003db8 <HAL_PWR_EnterSLEEPMode>
}
 8001e1a:	bd08      	pop	{r3, pc}

08001e1c <HAL_MspInit>:
extern DMA_HandleTypeDef hdma_usart2_tx;

// Initializes the Global MSP.
void HAL_MspInit(void)
{
}
 8001e1c:	4770      	bx	lr
	...

08001e20 <HAL_UART_MspInit>:

}

// UART MSP Initialization
void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e22:	b097      	sub	sp, #92	; 0x5c
 8001e24:	4604      	mov	r4, r0

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e26:	2100      	movs	r1, #0
 8001e28:	9111      	str	r1, [sp, #68]	; 0x44
 8001e2a:	9112      	str	r1, [sp, #72]	; 0x48
 8001e2c:	9113      	str	r1, [sp, #76]	; 0x4c
 8001e2e:	9114      	str	r1, [sp, #80]	; 0x50
 8001e30:	9115      	str	r1, [sp, #84]	; 0x54
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e32:	2238      	movs	r2, #56	; 0x38
 8001e34:	a803      	add	r0, sp, #12
 8001e36:	f015 fa81 	bl	801733c <memset>

    if (uartHandle->Instance==USART1) {
 8001e3a:	6822      	ldr	r2, [r4, #0]
 8001e3c:	4b80      	ldr	r3, [pc, #512]	; (8002040 <HAL_UART_MspInit+0x220>)
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d00a      	beq.n	8001e58 <HAL_UART_MspInit+0x38>
        HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
        HAL_NVIC_EnableIRQ(USART1_IRQn);

    }

    if (uartHandle->Instance==USART2) {
 8001e42:	6822      	ldr	r2, [r4, #0]
 8001e44:	4b7f      	ldr	r3, [pc, #508]	; (8002044 <HAL_UART_MspInit+0x224>)
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d071      	beq.n	8001f2e <HAL_UART_MspInit+0x10e>
        HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
        HAL_NVIC_EnableIRQ(USART2_IRQn);

    }

    if (uartHandle->Instance==LPUART1) {
 8001e4a:	6822      	ldr	r2, [r4, #0]
 8001e4c:	4b7e      	ldr	r3, [pc, #504]	; (8002048 <HAL_UART_MspInit+0x228>)
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	f000 80c2 	beq.w	8001fd8 <HAL_UART_MspInit+0x1b8>
        HAL_NVIC_SetPriority(LPUART1_IRQn, 2, 0);
        HAL_NVIC_EnableIRQ(LPUART1_IRQn);

    }

}
 8001e54:	b017      	add	sp, #92	; 0x5c
 8001e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
        PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	9303      	str	r3, [sp, #12]
        PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001e5c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001e60:	9304      	str	r3, [sp, #16]
        if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001e62:	a803      	add	r0, sp, #12
 8001e64:	f002 fdc8 	bl	80049f8 <HAL_RCCEx_PeriphCLKConfig>
 8001e68:	2800      	cmp	r0, #0
 8001e6a:	d154      	bne.n	8001f16 <HAL_UART_MspInit+0xf6>
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e76:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e7e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001e80:	9b00      	ldr	r3, [sp, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	9312      	str	r3, [sp, #72]	; 0x48
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2500      	movs	r5, #0
 8001e88:	9513      	str	r5, [sp, #76]	; 0x4c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	9314      	str	r3, [sp, #80]	; 0x50
        GPIO_InitStruct.Alternate = USART1_GPIO_AF;
 8001e8e:	2307      	movs	r3, #7
 8001e90:	9315      	str	r3, [sp, #84]	; 0x54
        GPIO_InitStruct.Pin = USART1_RX_Pin;
 8001e92:	2680      	movs	r6, #128	; 0x80
 8001e94:	9611      	str	r6, [sp, #68]	; 0x44
        HAL_GPIO_Init(USART1_RX_GPIO_Port, &GPIO_InitStruct);
 8001e96:	4f6d      	ldr	r7, [pc, #436]	; (800204c <HAL_UART_MspInit+0x22c>)
 8001e98:	a911      	add	r1, sp, #68	; 0x44
 8001e9a:	4638      	mov	r0, r7
 8001e9c:	f001 fb4c 	bl	8003538 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = USART1_TX_Pin;
 8001ea0:	2340      	movs	r3, #64	; 0x40
 8001ea2:	9311      	str	r3, [sp, #68]	; 0x44
        HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8001ea4:	a911      	add	r1, sp, #68	; 0x44
 8001ea6:	4638      	mov	r0, r7
 8001ea8:	f001 fb46 	bl	8003538 <HAL_GPIO_Init>
        hdma_usart1_tx.Instance = USART1_TX_DMA_Channel;
 8001eac:	4868      	ldr	r0, [pc, #416]	; (8002050 <HAL_UART_MspInit+0x230>)
 8001eae:	4b69      	ldr	r3, [pc, #420]	; (8002054 <HAL_UART_MspInit+0x234>)
 8001eb0:	6003      	str	r3, [r0, #0]
        hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001eb2:	2312      	movs	r3, #18
 8001eb4:	6043      	str	r3, [r0, #4]
        hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001eb6:	2310      	movs	r3, #16
 8001eb8:	6083      	str	r3, [r0, #8]
        hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eba:	60c5      	str	r5, [r0, #12]
        hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ebc:	6106      	str	r6, [r0, #16]
        hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ebe:	6145      	str	r5, [r0, #20]
        hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ec0:	6185      	str	r5, [r0, #24]
        hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001ec2:	61c5      	str	r5, [r0, #28]
        hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ec4:	6205      	str	r5, [r0, #32]
        if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK) {
 8001ec6:	f001 f9c7 	bl	8003258 <HAL_DMA_Init>
 8001eca:	bb38      	cbnz	r0, 8001f1c <HAL_UART_MspInit+0xfc>
        if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK) {
 8001ecc:	2110      	movs	r1, #16
 8001ece:	4860      	ldr	r0, [pc, #384]	; (8002050 <HAL_UART_MspInit+0x230>)
 8001ed0:	f001 fb1f 	bl	8003512 <HAL_DMA_ConfigChannelAttributes>
 8001ed4:	bb28      	cbnz	r0, 8001f22 <HAL_UART_MspInit+0x102>
        __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001ed6:	4b5e      	ldr	r3, [pc, #376]	; (8002050 <HAL_UART_MspInit+0x230>)
 8001ed8:	67a3      	str	r3, [r4, #120]	; 0x78
 8001eda:	629c      	str	r4, [r3, #40]	; 0x28
        hdma_usart1_rx.Instance = USART1_RX_DMA_Channel;;
 8001edc:	485e      	ldr	r0, [pc, #376]	; (8002058 <HAL_UART_MspInit+0x238>)
 8001ede:	4b5f      	ldr	r3, [pc, #380]	; (800205c <HAL_UART_MspInit+0x23c>)
 8001ee0:	6003      	str	r3, [r0, #0]
        hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001ee2:	2311      	movs	r3, #17
 8001ee4:	6043      	str	r3, [r0, #4]
        hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	6083      	str	r3, [r0, #8]
        hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eea:	60c3      	str	r3, [r0, #12]
        hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001eec:	2280      	movs	r2, #128	; 0x80
 8001eee:	6102      	str	r2, [r0, #16]
        hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ef0:	6143      	str	r3, [r0, #20]
        hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ef2:	6183      	str	r3, [r0, #24]
        hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001ef4:	61c3      	str	r3, [r0, #28]
        hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ef6:	6203      	str	r3, [r0, #32]
        if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK) {
 8001ef8:	f001 f9ae 	bl	8003258 <HAL_DMA_Init>
 8001efc:	b9a0      	cbnz	r0, 8001f28 <HAL_UART_MspInit+0x108>
        __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001efe:	4b56      	ldr	r3, [pc, #344]	; (8002058 <HAL_UART_MspInit+0x238>)
 8001f00:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001f02:	629c      	str	r4, [r3, #40]	; 0x28
        HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8001f04:	2200      	movs	r2, #0
 8001f06:	2102      	movs	r1, #2
 8001f08:	2024      	movs	r0, #36	; 0x24
 8001f0a:	f001 f91b 	bl	8003144 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f0e:	2024      	movs	r0, #36	; 0x24
 8001f10:	f001 f94c 	bl	80031ac <HAL_NVIC_EnableIRQ>
 8001f14:	e795      	b.n	8001e42 <HAL_UART_MspInit+0x22>
            Error_Handler();
 8001f16:	f000 f997 	bl	8002248 <Error_Handler>
 8001f1a:	e7a7      	b.n	8001e6c <HAL_UART_MspInit+0x4c>
            Error_Handler();
 8001f1c:	f000 f994 	bl	8002248 <Error_Handler>
 8001f20:	e7d4      	b.n	8001ecc <HAL_UART_MspInit+0xac>
            Error_Handler();
 8001f22:	f000 f991 	bl	8002248 <Error_Handler>
 8001f26:	e7d6      	b.n	8001ed6 <HAL_UART_MspInit+0xb6>
            Error_Handler();
 8001f28:	f000 f98e 	bl	8002248 <Error_Handler>
 8001f2c:	e7e7      	b.n	8001efe <HAL_UART_MspInit+0xde>
        PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	9303      	str	r3, [sp, #12]
        PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001f32:	4b4b      	ldr	r3, [pc, #300]	; (8002060 <HAL_UART_MspInit+0x240>)
 8001f34:	9305      	str	r3, [sp, #20]
        if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001f36:	a803      	add	r0, sp, #12
 8001f38:	f002 fd5e 	bl	80049f8 <HAL_RCCEx_PeriphCLKConfig>
 8001f3c:	2800      	cmp	r0, #0
 8001f3e:	d142      	bne.n	8001fc6 <HAL_UART_MspInit+0x1a6>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f46:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f4a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001f54:	9b01      	ldr	r3, [sp, #4]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	9312      	str	r3, [sp, #72]	; 0x48
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2500      	movs	r5, #0
 8001f5c:	9513      	str	r5, [sp, #76]	; 0x4c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	9314      	str	r3, [sp, #80]	; 0x50
        GPIO_InitStruct.Alternate = USART2_GPIO_AF;
 8001f62:	2307      	movs	r3, #7
 8001f64:	9315      	str	r3, [sp, #84]	; 0x54
        GPIO_InitStruct.Pin = USART2_RX_Pin;
 8001f66:	2308      	movs	r3, #8
 8001f68:	9311      	str	r3, [sp, #68]	; 0x44
        HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8001f6a:	a911      	add	r1, sp, #68	; 0x44
 8001f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f70:	f001 fae2 	bl	8003538 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = USART2_TX_Pin;
 8001f74:	2304      	movs	r3, #4
 8001f76:	9311      	str	r3, [sp, #68]	; 0x44
        HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8001f78:	a911      	add	r1, sp, #68	; 0x44
 8001f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f7e:	f001 fadb 	bl	8003538 <HAL_GPIO_Init>
        hdma_usart2_tx.Instance = USART2_TX_DMA_Channel;
 8001f82:	4838      	ldr	r0, [pc, #224]	; (8002064 <HAL_UART_MspInit+0x244>)
 8001f84:	4b38      	ldr	r3, [pc, #224]	; (8002068 <HAL_UART_MspInit+0x248>)
 8001f86:	6003      	str	r3, [r0, #0]
        hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001f88:	2314      	movs	r3, #20
 8001f8a:	6043      	str	r3, [r0, #4]
        hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f8c:	2310      	movs	r3, #16
 8001f8e:	6083      	str	r3, [r0, #8]
        hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f90:	60c5      	str	r5, [r0, #12]
        hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f92:	2380      	movs	r3, #128	; 0x80
 8001f94:	6103      	str	r3, [r0, #16]
        hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f96:	6145      	str	r5, [r0, #20]
        hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f98:	6185      	str	r5, [r0, #24]
        hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001f9a:	61c5      	str	r5, [r0, #28]
        hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f9c:	6205      	str	r5, [r0, #32]
        if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK) {
 8001f9e:	f001 f95b 	bl	8003258 <HAL_DMA_Init>
 8001fa2:	b998      	cbnz	r0, 8001fcc <HAL_UART_MspInit+0x1ac>
        if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK) {
 8001fa4:	2110      	movs	r1, #16
 8001fa6:	482f      	ldr	r0, [pc, #188]	; (8002064 <HAL_UART_MspInit+0x244>)
 8001fa8:	f001 fab3 	bl	8003512 <HAL_DMA_ConfigChannelAttributes>
 8001fac:	b988      	cbnz	r0, 8001fd2 <HAL_UART_MspInit+0x1b2>
        __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001fae:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <HAL_UART_MspInit+0x244>)
 8001fb0:	67a3      	str	r3, [r4, #120]	; 0x78
 8001fb2:	629c      	str	r4, [r3, #40]	; 0x28
        HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2102      	movs	r1, #2
 8001fb8:	2025      	movs	r0, #37	; 0x25
 8001fba:	f001 f8c3 	bl	8003144 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fbe:	2025      	movs	r0, #37	; 0x25
 8001fc0:	f001 f8f4 	bl	80031ac <HAL_NVIC_EnableIRQ>
 8001fc4:	e741      	b.n	8001e4a <HAL_UART_MspInit+0x2a>
            Error_Handler();
 8001fc6:	f000 f93f 	bl	8002248 <Error_Handler>
 8001fca:	e7b9      	b.n	8001f40 <HAL_UART_MspInit+0x120>
            Error_Handler();
 8001fcc:	f000 f93c 	bl	8002248 <Error_Handler>
 8001fd0:	e7e8      	b.n	8001fa4 <HAL_UART_MspInit+0x184>
            Error_Handler();
 8001fd2:	f000 f939 	bl	8002248 <Error_Handler>
 8001fd6:	e7ea      	b.n	8001fae <HAL_UART_MspInit+0x18e>
        PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001fd8:	2320      	movs	r3, #32
 8001fda:	9303      	str	r3, [sp, #12]
        PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 8001fdc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fe0:	9307      	str	r3, [sp, #28]
        if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001fe2:	a803      	add	r0, sp, #12
 8001fe4:	f002 fd08 	bl	80049f8 <HAL_RCCEx_PeriphCLKConfig>
 8001fe8:	bb38      	cbnz	r0, 800203a <HAL_UART_MspInit+0x21a>
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ff0:	f042 0201 	orr.w	r2, r2, #1
 8001ff4:	65da      	str	r2, [r3, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001ffe:	9b02      	ldr	r3, [sp, #8]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2400      	movs	r4, #0
 8002002:	9413      	str	r4, [sp, #76]	; 0x4c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	9414      	str	r4, [sp, #80]	; 0x50
        GPIO_InitStruct.Alternate = LPUART1_GPIO_AF;
 8002006:	2608      	movs	r6, #8
 8002008:	9615      	str	r6, [sp, #84]	; 0x54
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2502      	movs	r5, #2
 800200c:	9512      	str	r5, [sp, #72]	; 0x48
        GPIO_InitStruct.Pin = LPUART1_TX_Pin;
 800200e:	2304      	movs	r3, #4
 8002010:	9311      	str	r3, [sp, #68]	; 0x44
        HAL_GPIO_Init(LPUART1_TX_GPIO_Port, &GPIO_InitStruct);
 8002012:	a911      	add	r1, sp, #68	; 0x44
 8002014:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002018:	f001 fa8e 	bl	8003538 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = LPUART1_RX_Pin;
 800201c:	9611      	str	r6, [sp, #68]	; 0x44
        HAL_GPIO_Init(LPUART1_RX_GPIO_Port, &GPIO_InitStruct);
 800201e:	a911      	add	r1, sp, #68	; 0x44
 8002020:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002024:	f001 fa88 	bl	8003538 <HAL_GPIO_Init>
        HAL_NVIC_SetPriority(LPUART1_IRQn, 2, 0);
 8002028:	4622      	mov	r2, r4
 800202a:	4629      	mov	r1, r5
 800202c:	2026      	movs	r0, #38	; 0x26
 800202e:	f001 f889 	bl	8003144 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002032:	2026      	movs	r0, #38	; 0x26
 8002034:	f001 f8ba 	bl	80031ac <HAL_NVIC_EnableIRQ>
}
 8002038:	e70c      	b.n	8001e54 <HAL_UART_MspInit+0x34>
            Error_Handler();
 800203a:	f000 f905 	bl	8002248 <Error_Handler>
 800203e:	e7d4      	b.n	8001fea <HAL_UART_MspInit+0x1ca>
 8002040:	40013800 	.word	0x40013800
 8002044:	40004400 	.word	0x40004400
 8002048:	40008000 	.word	0x40008000
 800204c:	48000400 	.word	0x48000400
 8002050:	200020d8 	.word	0x200020d8
 8002054:	4002001c 	.word	0x4002001c
 8002058:	20002138 	.word	0x20002138
 800205c:	40020008 	.word	0x40020008
 8002060:	000c0004 	.word	0x000c0004
 8002064:	20002198 	.word	0x20002198
 8002068:	40020044 	.word	0x40020044

0800206c <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800206c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002070:	4905      	ldr	r1, [pc, #20]	; (8002088 <__NVIC_SystemReset+0x1c>)
 8002072:	68ca      	ldr	r2, [r1, #12]
 8002074:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <__NVIC_SystemReset+0x20>)
 800207a:	4313      	orrs	r3, r2
 800207c:	60cb      	str	r3, [r1, #12]
 800207e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002082:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002084:	e7fd      	b.n	8002082 <__NVIC_SystemReset+0x16>
 8002086:	bf00      	nop
 8002088:	e000ed00 	.word	0xe000ed00
 800208c:	05fa0004 	.word	0x05fa0004

08002090 <MX_Breakpoint>:
void EXTI15_10_IRQHandler(void);
void GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin);

// For panic breakpoint
void MX_Breakpoint()
{
 8002090:	b508      	push	{r3, lr}
    if (MX_DBG_Active()) {
 8002092:	f7ff faf1 	bl	8001678 <MX_DBG_Active>
 8002096:	b100      	cbz	r0, 800209a <MX_Breakpoint+0xa>
        asm ("BKPT 0");
 8002098:	be00      	bkpt	0x0000
    }
}
 800209a:	bd08      	pop	{r3, pc}

0800209c <NMI_Handler>:

// Cortex core interrupt handlers
void NMI_Handler(void)
{
 800209c:	b508      	push	{r3, lr}
    MX_Breakpoint();
 800209e:	f7ff fff7 	bl	8002090 <MX_Breakpoint>
    NVIC_SystemReset();
 80020a2:	f7ff ffe3 	bl	800206c <__NVIC_SystemReset>

080020a6 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
 80020a6:	b508      	push	{r3, lr}
    MX_Breakpoint();
 80020a8:	f7ff fff2 	bl	8002090 <MX_Breakpoint>
    NVIC_SystemReset();
 80020ac:	f7ff ffde 	bl	800206c <__NVIC_SystemReset>

080020b0 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
 80020b0:	b508      	push	{r3, lr}
    MX_Breakpoint();
 80020b2:	f7ff ffed 	bl	8002090 <MX_Breakpoint>
    NVIC_SystemReset();
 80020b6:	f7ff ffd9 	bl	800206c <__NVIC_SystemReset>

080020ba <BusFault_Handler>:
}
void BusFault_Handler(void)
{
 80020ba:	b508      	push	{r3, lr}
    MX_Breakpoint();
 80020bc:	f7ff ffe8 	bl	8002090 <MX_Breakpoint>
    NVIC_SystemReset();
 80020c0:	f7ff ffd4 	bl	800206c <__NVIC_SystemReset>

080020c4 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
 80020c4:	b508      	push	{r3, lr}
    MX_Breakpoint();
 80020c6:	f7ff ffe3 	bl	8002090 <MX_Breakpoint>
}
 80020ca:	bd08      	pop	{r3, pc}

080020cc <SVC_Handler>:
void SVC_Handler(void)
{
}
 80020cc:	4770      	bx	lr

080020ce <DebugMon_Handler>:
void DebugMon_Handler(void)
{
}
 80020ce:	4770      	bx	lr

080020d0 <PendSV_Handler>:
void PendSV_Handler(void)
{
}
 80020d0:	4770      	bx	lr

080020d2 <SysTick_Handler>:
void SysTick_Handler(void)
{
}
 80020d2:	4770      	bx	lr

080020d4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:
// Peripheral interrupt handlers
// please refer to the startup file (startup_stm32wlxx.s)

// This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80020d4:	b508      	push	{r3, lr}
    HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80020d6:	4802      	ldr	r0, [pc, #8]	; (80020e0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 80020d8:	f002 fffc 	bl	80050d4 <HAL_RTCEx_SSRUIRQHandler>
}
 80020dc:	bd08      	pop	{r3, pc}
 80020de:	bf00      	nop
 80020e0:	200024ac 	.word	0x200024ac

080020e4 <DMA2_Channel1_IRQHandler>:

// DMA Handlers
void SPI1_RX_DMA_IRQHandler(void)
{
 80020e4:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80020e6:	4802      	ldr	r0, [pc, #8]	; (80020f0 <DMA2_Channel1_IRQHandler+0xc>)
 80020e8:	f001 f99c 	bl	8003424 <HAL_DMA_IRQHandler>
}
 80020ec:	bd08      	pop	{r3, pc}
 80020ee:	bf00      	nop
 80020f0:	200023ec 	.word	0x200023ec

080020f4 <DMA2_Channel2_IRQHandler>:
void SPI1_TX_DMA_IRQHandler(void)
{
 80020f4:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80020f6:	4802      	ldr	r0, [pc, #8]	; (8002100 <DMA2_Channel2_IRQHandler+0xc>)
 80020f8:	f001 f994 	bl	8003424 <HAL_DMA_IRQHandler>
}
 80020fc:	bd08      	pop	{r3, pc}
 80020fe:	bf00      	nop
 8002100:	2000244c 	.word	0x2000244c

08002104 <DMA1_Channel5_IRQHandler>:
void I2C2_RX_DMA_IRQHandler(void)
{
 8002104:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002106:	4802      	ldr	r0, [pc, #8]	; (8002110 <DMA1_Channel5_IRQHandler+0xc>)
 8002108:	f001 f98c 	bl	8003424 <HAL_DMA_IRQHandler>
}
 800210c:	bd08      	pop	{r3, pc}
 800210e:	bf00      	nop
 8002110:	20002018 	.word	0x20002018

08002114 <DMA1_Channel6_IRQHandler>:
void I2C2_TX_DMA_IRQHandler(void)
{
 8002114:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002116:	4802      	ldr	r0, [pc, #8]	; (8002120 <DMA1_Channel6_IRQHandler+0xc>)
 8002118:	f001 f984 	bl	8003424 <HAL_DMA_IRQHandler>
}
 800211c:	bd08      	pop	{r3, pc}
 800211e:	bf00      	nop
 8002120:	20002078 	.word	0x20002078

08002124 <DMA1_Channel1_IRQHandler>:
void USART1_RX_DMA_IRQHandler(void)
{
 8002124:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002126:	4802      	ldr	r0, [pc, #8]	; (8002130 <DMA1_Channel1_IRQHandler+0xc>)
 8002128:	f001 f97c 	bl	8003424 <HAL_DMA_IRQHandler>
}
 800212c:	bd08      	pop	{r3, pc}
 800212e:	bf00      	nop
 8002130:	20002138 	.word	0x20002138

08002134 <DMA1_Channel2_IRQHandler>:
void USART1_TX_DMA_IRQHandler(void)
{
 8002134:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002136:	4802      	ldr	r0, [pc, #8]	; (8002140 <DMA1_Channel2_IRQHandler+0xc>)
 8002138:	f001 f974 	bl	8003424 <HAL_DMA_IRQHandler>
}
 800213c:	bd08      	pop	{r3, pc}
 800213e:	bf00      	nop
 8002140:	200020d8 	.word	0x200020d8

08002144 <DMA1_Channel4_IRQHandler>:
{
    HAL_DMA_IRQHandler(&hdma_usart2_rx);
}
#endif
void USART2_TX_DMA_IRQHandler(void)
{
 8002144:	b508      	push	{r3, lr}
    HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002146:	4802      	ldr	r0, [pc, #8]	; (8002150 <DMA1_Channel4_IRQHandler+0xc>)
 8002148:	f001 f96c 	bl	8003424 <HAL_DMA_IRQHandler>
}
 800214c:	bd08      	pop	{r3, pc}
 800214e:	bf00      	nop
 8002150:	20002198 	.word	0x20002198

08002154 <I2C2_EV_IRQHandler>:

// I2C2 Event Interrupt
void I2C2_EV_IRQHandler(void)
{
 8002154:	b508      	push	{r3, lr}
    HAL_I2C_EV_IRQHandler(&hi2c2);
 8002156:	4802      	ldr	r0, [pc, #8]	; (8002160 <I2C2_EV_IRQHandler+0xc>)
 8002158:	f001 fb18 	bl	800378c <HAL_I2C_EV_IRQHandler>
}
 800215c:	bd08      	pop	{r3, pc}
 800215e:	bf00      	nop
 8002160:	20001f04 	.word	0x20001f04

08002164 <I2C2_ER_IRQHandler>:

// I2C2 Error Interrupt
void I2C2_ER_IRQHandler(void)
{
 8002164:	b508      	push	{r3, lr}
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8002166:	4802      	ldr	r0, [pc, #8]	; (8002170 <I2C2_ER_IRQHandler+0xc>)
 8002168:	f001 fddb 	bl	8003d22 <HAL_I2C_ER_IRQHandler>
}
 800216c:	bd08      	pop	{r3, pc}
 800216e:	bf00      	nop
 8002170:	20001f04 	.word	0x20001f04

08002174 <SPI1_IRQHandler>:

// SPI1 Interrupt
void SPI1_IRQHandler(void)
{
 8002174:	b508      	push	{r3, lr}
    HAL_SPI_IRQHandler(&hspi1);
 8002176:	4802      	ldr	r0, [pc, #8]	; (8002180 <SPI1_IRQHandler+0xc>)
 8002178:	f002 ffd0 	bl	800511c <HAL_SPI_IRQHandler>
}
 800217c:	bd08      	pop	{r3, pc}
 800217e:	bf00      	nop
 8002180:	200022c0 	.word	0x200022c0

08002184 <USART1_IRQHandler>:

// USART1 Interrupt
void USART1_IRQHandler(void)
{
 8002184:	b508      	push	{r3, lr}
    HAL_UART_IRQHandler(&huart1);
 8002186:	4802      	ldr	r0, [pc, #8]	; (8002190 <USART1_IRQHandler+0xc>)
 8002188:	f004 f840 	bl	800620c <HAL_UART_IRQHandler>
}
 800218c:	bd08      	pop	{r3, pc}
 800218e:	bf00      	nop
 8002190:	200021f8 	.word	0x200021f8

08002194 <USART2_IRQHandler>:

// USART2 Interrupt
void USART2_IRQHandler(void)
{
 8002194:	b508      	push	{r3, lr}
    HAL_UART_IRQHandler(&huart2);
 8002196:	4802      	ldr	r0, [pc, #8]	; (80021a0 <USART2_IRQHandler+0xc>)
 8002198:	f004 f838 	bl	800620c <HAL_UART_IRQHandler>
}
 800219c:	bd08      	pop	{r3, pc}
 800219e:	bf00      	nop
 80021a0:	20002324 	.word	0x20002324

080021a4 <LPUART1_IRQHandler>:

// LPUART1 Interrupt
void LPUART1_IRQHandler(void)
{
 80021a4:	b508      	push	{r3, lr}
    HAL_UART_IRQHandler(&hlpuart1);
 80021a6:	4802      	ldr	r0, [pc, #8]	; (80021b0 <LPUART1_IRQHandler+0xc>)
 80021a8:	f004 f830 	bl	800620c <HAL_UART_IRQHandler>
}
 80021ac:	bd08      	pop	{r3, pc}
 80021ae:	bf00      	nop
 80021b0:	20001f50 	.word	0x20001f50

080021b4 <HAL_GPIO_EXTI_Callback>:

// Method called when an external interrupt happens
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021b4:	b508      	push	{r3, lr}
    MX_AppISR(GPIO_Pin);
 80021b6:	f7fe fef3 	bl	8000fa0 <MX_AppISR>
}
 80021ba:	bd08      	pop	{r3, pc}

080021bc <GPIO_EXTI_IRQHandler>:

void GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021bc:	b508      	push	{r3, lr}
    if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) {
 80021be:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <GPIO_EXTI_IRQHandler+0x1c>)
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	4203      	tst	r3, r0
 80021c4:	d100      	bne.n	80021c8 <GPIO_EXTI_IRQHandler+0xc>
        uint16_t GPIO_Line = GPIO_Pin & EXTI->PR1;
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
        HAL_GPIO_EXTI_Callback(GPIO_Line);
    }
}
 80021c6:	bd08      	pop	{r3, pc}
        uint16_t GPIO_Line = GPIO_Pin & EXTI->PR1;
 80021c8:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <GPIO_EXTI_IRQHandler+0x1c>)
 80021ca:	68da      	ldr	r2, [r3, #12]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021cc:	60d8      	str	r0, [r3, #12]
        HAL_GPIO_EXTI_Callback(GPIO_Line);
 80021ce:	4010      	ands	r0, r2
 80021d0:	f7ff fff0 	bl	80021b4 <HAL_GPIO_EXTI_Callback>
}
 80021d4:	e7f7      	b.n	80021c6 <GPIO_EXTI_IRQHandler+0xa>
 80021d6:	bf00      	nop
 80021d8:	58000800 	.word	0x58000800

080021dc <EXTI0_IRQHandler>:
void EXTI0_IRQHandler( void )
{
 80021dc:	b508      	push	{r3, lr}
    GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80021de:	2001      	movs	r0, #1
 80021e0:	f7ff ffec 	bl	80021bc <GPIO_EXTI_IRQHandler>
}
 80021e4:	bd08      	pop	{r3, pc}

080021e6 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler( void )
{
 80021e6:	b508      	push	{r3, lr}
    GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80021e8:	2002      	movs	r0, #2
 80021ea:	f7ff ffe7 	bl	80021bc <GPIO_EXTI_IRQHandler>
}
 80021ee:	bd08      	pop	{r3, pc}

080021f0 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler( void )
{
 80021f0:	b508      	push	{r3, lr}
    GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80021f2:	2004      	movs	r0, #4
 80021f4:	f7ff ffe2 	bl	80021bc <GPIO_EXTI_IRQHandler>
}
 80021f8:	bd08      	pop	{r3, pc}

080021fa <EXTI3_IRQHandler>:
void EXTI3_IRQHandler( void )
{
 80021fa:	b508      	push	{r3, lr}
    GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80021fc:	2008      	movs	r0, #8
 80021fe:	f7ff ffdd 	bl	80021bc <GPIO_EXTI_IRQHandler>
}
 8002202:	bd08      	pop	{r3, pc}

08002204 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler( void )
{
 8002204:	b508      	push	{r3, lr}
    GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002206:	2010      	movs	r0, #16
 8002208:	f7ff ffd8 	bl	80021bc <GPIO_EXTI_IRQHandler>
}
 800220c:	bd08      	pop	{r3, pc}

0800220e <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler( void )
{
 800220e:	b508      	push	{r3, lr}
    GPIO_EXTI_IRQHandler(GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5);
 8002210:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 8002214:	f7ff ffd2 	bl	80021bc <GPIO_EXTI_IRQHandler>
}
 8002218:	bd08      	pop	{r3, pc}

0800221a <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler( void )
{
 800221a:	b508      	push	{r3, lr}
    GPIO_EXTI_IRQHandler(GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10);
 800221c:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 8002220:	f7ff ffcc 	bl	80021bc <GPIO_EXTI_IRQHandler>
}
 8002224:	bd08      	pop	{r3, pc}
	...

08002228 <RTC_Alarm_IRQHandler>:

// RTC Alarms (A and B) Interrupt.
void RTC_Alarm_IRQHandler(void)
{
 8002228:	b508      	push	{r3, lr}
    HAL_RTC_AlarmIRQHandler(&hrtc);
 800222a:	4802      	ldr	r0, [pc, #8]	; (8002234 <RTC_Alarm_IRQHandler+0xc>)
 800222c:	f002 fd66 	bl	8004cfc <HAL_RTC_AlarmIRQHandler>
}
 8002230:	bd08      	pop	{r3, pc}
 8002232:	bf00      	nop
 8002234:	200024ac 	.word	0x200024ac

08002238 <SUBGHZ_Radio_IRQHandler>:

// SubGHZ Radio Interrupt
void SUBGHZ_Radio_IRQHandler(void)
{
 8002238:	b508      	push	{r3, lr}
    HAL_SUBGHZ_IRQHandler(&hsubghz);
 800223a:	4802      	ldr	r0, [pc, #8]	; (8002244 <SUBGHZ_Radio_IRQHandler+0xc>)
 800223c:	f003 fa94 	bl	8005768 <HAL_SUBGHZ_IRQHandler>
}
 8002240:	bd08      	pop	{r3, pc}
 8002242:	bf00      	nop
 8002244:	200024e4 	.word	0x200024e4

08002248 <Error_Handler>:

// Error handling
void Error_Handler(void)
{
 8002248:	b508      	push	{r3, lr}
    MX_Breakpoint();
 800224a:	f7ff ff21 	bl	8002090 <MX_Breakpoint>
    NVIC_SystemReset();
 800224e:	f7ff ff0d 	bl	800206c <__NVIC_SystemReset>
	...

08002254 <MX_SUBGHZ_Init>:
// Handle
SUBGHZ_HandleTypeDef hsubghz;

// SUBGHZ init function
void MX_SUBGHZ_Init(void)
{
 8002254:	b508      	push	{r3, lr}
    hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002256:	4805      	ldr	r0, [pc, #20]	; (800226c <MX_SUBGHZ_Init+0x18>)
 8002258:	2308      	movs	r3, #8
 800225a:	6003      	str	r3, [r0, #0]
    if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK) {
 800225c:	f003 f80c 	bl	8005278 <HAL_SUBGHZ_Init>
 8002260:	b900      	cbnz	r0, 8002264 <MX_SUBGHZ_Init+0x10>
        Error_Handler();
    }
}
 8002262:	bd08      	pop	{r3, pc}
        Error_Handler();
 8002264:	f7ff fff0 	bl	8002248 <Error_Handler>
}
 8002268:	e7fb      	b.n	8002262 <MX_SUBGHZ_Init+0xe>
 800226a:	bf00      	nop
 800226c:	200024e4 	.word	0x200024e4

08002270 <HAL_SUBGHZ_MspInit>:

// MSP Init
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002270:	b500      	push	{lr}
 8002272:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002278:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800227a:	f042 0201 	orr.w	r2, r2, #1
 800227e:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002288:	9b01      	ldr	r3, [sp, #4]

    // SUBGHZ clock enable
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    // SUBGHZ interrupt Init
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	4611      	mov	r1, r2
 800228e:	2032      	movs	r0, #50	; 0x32
 8002290:	f000 ff58 	bl	8003144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002294:	2032      	movs	r0, #50	; 0x32
 8002296:	f000 ff89 	bl	80031ac <HAL_NVIC_EnableIRQ>
}
 800229a:	b003      	add	sp, #12
 800229c:	f85d fb04 	ldr.w	pc, [sp], #4

080022a0 <SystemApp_Init>:
#include "utilities_def.h"
#include "main.h"

// Init SystemApp subsystem
void SystemApp_Init(void)
{
 80022a0:	b508      	push	{r3, lr}
    SYS_InitMeasurement();
 80022a2:	f7ff f96d 	bl	8001580 <SYS_InitMeasurement>
}
 80022a6:	bd08      	pop	{r3, pc}

080022a8 <GetBatteryLevel>:

// Get battery voltage in a way required by LoRaWAN
#define LORAWAN_MAX_BAT   254
uint8_t GetBatteryLevel(void)
{
 80022a8:	b508      	push	{r3, lr}
    uint8_t batteryLevel = 0;
    uint16_t batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80022aa:	f7ff f971 	bl	8001590 <SYS_GetBatteryLevel>
    // Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged)
    if (batteryLevelmV > VDD_BAT) {
 80022ae:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80022b2:	4298      	cmp	r0, r3
 80022b4:	d80d      	bhi.n	80022d2 <GetBatteryLevel+0x2a>
        batteryLevel = LORAWAN_MAX_BAT;
    } else if (batteryLevelmV < VDD_MIN) {
 80022b6:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 80022ba:	d30c      	bcc.n	80022d6 <GetBatteryLevel+0x2e>
        batteryLevel = 0;
    } else {
        batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80022bc:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 80022c0:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 80022c4:	0040      	lsls	r0, r0, #1
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <GetBatteryLevel+0x34>)
 80022c8:	fba3 3000 	umull	r3, r0, r3, r0
 80022cc:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 80022d0:	e000      	b.n	80022d4 <GetBatteryLevel+0x2c>
        batteryLevel = LORAWAN_MAX_BAT;
 80022d2:	20fe      	movs	r0, #254	; 0xfe
    }
    return batteryLevel;  // 1 (very low) to 254 (fully charged)
}
 80022d4:	bd08      	pop	{r3, pc}
        batteryLevel = 0;
 80022d6:	2000      	movs	r0, #0
 80022d8:	e7fc      	b.n	80022d4 <GetBatteryLevel+0x2c>
 80022da:	bf00      	nop
 80022dc:	1b4e81b5 	.word	0x1b4e81b5

080022e0 <GetTemperatureLevel>:

// Get temperature in a way required by LoRaWAN
uint16_t GetTemperatureLevel(void)
{
 80022e0:	b508      	push	{r3, lr}
    uint16_t temperatureLevel = 0;
    temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 80022e2:	f7ff f977 	bl	80015d4 <SYS_GetTemperatureLevel>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2800      	cmp	r0, #0
 80022ea:	db02      	blt.n	80022f2 <GetTemperatureLevel+0x12>
    return temperatureLevel;
}
 80022ec:	f3c3 200f 	ubfx	r0, r3, #8, #16
 80022f0:	bd08      	pop	{r3, pc}
    temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 80022f2:	f100 03ff 	add.w	r3, r0, #255	; 0xff
 80022f6:	e7f9      	b.n	80022ec <GetTemperatureLevel+0xc>

080022f8 <GetUniqueId>:

// Get a unique device ID
void GetUniqueId(uint8_t *id)
{
 80022f8:	b538      	push	{r3, r4, r5, lr}
 80022fa:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80022fc:	4b16      	ldr	r3, [pc, #88]	; (8002358 <GetUniqueId+0x60>)
 80022fe:	681b      	ldr	r3, [r3, #0]
    uint32_t val = 0;
    val = LL_FLASH_GetUDN();
    if (val == 0xFFFFFFFF) { // Normally this should not happen
 8002300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002304:	d011      	beq.n	800232a <GetUniqueId+0x32>
        id[3] = (ID_2_val) >> 24;
        id[2] = (ID_2_val) >> 16;
        id[1] = (ID_2_val) >> 8;
        id[0] = (ID_2_val);
    } else {                // Expected
        id[7] = val & 0xFF;
 8002306:	71c3      	strb	r3, [r0, #7]
        id[6] = (val >> 8) & 0xFF;
 8002308:	0a1a      	lsrs	r2, r3, #8
 800230a:	7182      	strb	r2, [r0, #6]
        id[5] = (val >> 16) & 0xFF;
 800230c:	0c1a      	lsrs	r2, r3, #16
 800230e:	7142      	strb	r2, [r0, #5]
        id[4] = (val >> 24) & 0xFF;
 8002310:	0e1b      	lsrs	r3, r3, #24
 8002312:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <GetUniqueId+0x64>)
 8002316:	681a      	ldr	r2, [r3, #0]
        val = LL_FLASH_GetDeviceID();
        id[3] = val & 0xFF;
 8002318:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	0a1a      	lsrs	r2, r3, #8
        val = LL_FLASH_GetSTCompanyID();
        id[2] = val & 0xFF;
 800231e:	7082      	strb	r2, [r0, #2]
        id[1] = (val >> 8) & 0xFF;
 8002320:	0c1a      	lsrs	r2, r3, #16
 8002322:	7042      	strb	r2, [r0, #1]
        id[0] = (val >> 16) & 0xFF;
 8002324:	0e1b      	lsrs	r3, r3, #24
 8002326:	7003      	strb	r3, [r0, #0]
    }
}
 8002328:	bd38      	pop	{r3, r4, r5, pc}
        uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 800232a:	f000 fa35 	bl	8002798 <HAL_GetUIDw0>
 800232e:	4605      	mov	r5, r0
 8002330:	f000 fa3e 	bl	80027b0 <HAL_GetUIDw2>
 8002334:	4405      	add	r5, r0
        uint32_t ID_2_val = HAL_GetUIDw1();
 8002336:	f000 fa35 	bl	80027a4 <HAL_GetUIDw1>
        id[7] = (ID_1_3_val) >> 24;
 800233a:	0e2b      	lsrs	r3, r5, #24
 800233c:	71e3      	strb	r3, [r4, #7]
        id[6] = (ID_1_3_val) >> 16;
 800233e:	0c2b      	lsrs	r3, r5, #16
 8002340:	71a3      	strb	r3, [r4, #6]
        id[5] = (ID_1_3_val) >> 8;
 8002342:	0a2b      	lsrs	r3, r5, #8
 8002344:	7163      	strb	r3, [r4, #5]
        id[4] = (ID_1_3_val);
 8002346:	7125      	strb	r5, [r4, #4]
        id[3] = (ID_2_val) >> 24;
 8002348:	0e03      	lsrs	r3, r0, #24
 800234a:	70e3      	strb	r3, [r4, #3]
        id[2] = (ID_2_val) >> 16;
 800234c:	0c03      	lsrs	r3, r0, #16
 800234e:	70a3      	strb	r3, [r4, #2]
        id[1] = (ID_2_val) >> 8;
 8002350:	0a03      	lsrs	r3, r0, #8
 8002352:	7063      	strb	r3, [r4, #1]
        id[0] = (ID_2_val);
 8002354:	7020      	strb	r0, [r4, #0]
 8002356:	e7e7      	b.n	8002328 <GetUniqueId+0x30>
 8002358:	1fff7580 	.word	0x1fff7580
 800235c:	1fff7584 	.word	0x1fff7584

08002360 <GetDevAddr>:
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <GetDevAddr+0x24>)
 8002362:	6818      	ldr	r0, [r3, #0]
// Get the device address
uint32_t GetDevAddr(void)
{
    uint32_t val = 0;
    val = LL_FLASH_GetUDN();
    if (val == 0xFFFFFFFF) {
 8002364:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002368:	d000      	beq.n	800236c <GetDevAddr+0xc>
        val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
    }
    return val;
}
 800236a:	4770      	bx	lr
{
 800236c:	b510      	push	{r4, lr}
        val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 800236e:	f000 fa13 	bl	8002798 <HAL_GetUIDw0>
 8002372:	4604      	mov	r4, r0
 8002374:	f000 fa16 	bl	80027a4 <HAL_GetUIDw1>
 8002378:	4044      	eors	r4, r0
 800237a:	f000 fa19 	bl	80027b0 <HAL_GetUIDw2>
 800237e:	4060      	eors	r0, r4
}
 8002380:	bd10      	pop	{r4, pc}
 8002382:	bf00      	nop
 8002384:	1fff7580 	.word	0x1fff7580

08002388 <HAL_InitTick>:
// HAL overrides for tick handling
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
    // Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC)
    return HAL_OK;
}
 8002388:	2000      	movs	r0, #0
 800238a:	4770      	bx	lr

0800238c <HAL_GetTick>:
uint32_t HAL_GetTick(void)
{
 800238c:	b508      	push	{r3, lr}
    // TIMER_IF can be based on other counter the SysTick e.g. RTC
    return TIMER_IF_GetTimerValue();
 800238e:	f000 f827 	bl	80023e0 <TIMER_IF_GetTimerValue>
}
 8002392:	bd08      	pop	{r3, pc}

08002394 <HAL_Delay>:
void HAL_Delay(__IO uint32_t Delay)
{
 8002394:	b500      	push	{lr}
 8002396:	b083      	sub	sp, #12
 8002398:	9001      	str	r0, [sp, #4]
    // TIMER_IF can be based on other counter the SysTick e.g. RTC
    TIMER_IF_DelayMs(Delay);
 800239a:	9801      	ldr	r0, [sp, #4]
 800239c:	f000 f8fe 	bl	800259c <TIMER_IF_DelayMs>
}
 80023a0:	b003      	add	sp, #12
 80023a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080023a8 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80023a8:	4b02      	ldr	r3, [pc, #8]	; (80023b4 <TIMER_IF_SetTimerContext+0xc>)
 80023aa:	6898      	ldr	r0, [r3, #8]

// Get rtc timer Value in rtc tick
// Return val the rtc timer value (upcounting)
static inline uint32_t GetTimerTicks(void)
{
    return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80023ac:	43c0      	mvns	r0, r0
    RtcTimerContext = GetTimerTicks();
 80023ae:	4b02      	ldr	r3, [pc, #8]	; (80023b8 <TIMER_IF_SetTimerContext+0x10>)
 80023b0:	6018      	str	r0, [r3, #0]
}
 80023b2:	4770      	bx	lr
 80023b4:	40002800 	.word	0x40002800
 80023b8:	2000053c 	.word	0x2000053c

080023bc <TIMER_IF_GetTimerContext>:
}
 80023bc:	4b01      	ldr	r3, [pc, #4]	; (80023c4 <TIMER_IF_GetTimerContext+0x8>)
 80023be:	6818      	ldr	r0, [r3, #0]
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	2000053c 	.word	0x2000053c

080023c8 <TIMER_IF_GetTimerElapsedTime>:
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <TIMER_IF_GetTimerElapsedTime+0x10>)
 80023ca:	689b      	ldr	r3, [r3, #8]
    return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80023cc:	43db      	mvns	r3, r3
    ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80023ce:	4a03      	ldr	r2, [pc, #12]	; (80023dc <TIMER_IF_GetTimerElapsedTime+0x14>)
 80023d0:	6810      	ldr	r0, [r2, #0]
}
 80023d2:	1a18      	subs	r0, r3, r0
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40002800 	.word	0x40002800
 80023dc:	2000053c 	.word	0x2000053c

080023e0 <TIMER_IF_GetTimerValue>:
    if (RTC_Initialized == true) {
 80023e0:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <TIMER_IF_GetTimerValue+0x14>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	b11b      	cbz	r3, 80023ee <TIMER_IF_GetTimerValue+0xe>
 80023e6:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <TIMER_IF_GetTimerValue+0x18>)
 80023e8:	6898      	ldr	r0, [r3, #8]
    return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80023ea:	43c0      	mvns	r0, r0
 80023ec:	4770      	bx	lr
    uint32_t ret = 0;
 80023ee:	2000      	movs	r0, #0
}
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	20000538 	.word	0x20000538
 80023f8:	40002800 	.word	0x40002800

080023fc <TIMER_IF_GetMinimumTimeout>:
}
 80023fc:	2003      	movs	r0, #3
 80023fe:	4770      	bx	lr

08002400 <TIMER_IF_Convert_ms2Tick>:
{
 8002400:	b508      	push	{r3, lr}
 8002402:	4601      	mov	r1, r0
    ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002404:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002408:	2300      	movs	r3, #0
 800240a:	0280      	lsls	r0, r0, #10
 800240c:	0d89      	lsrs	r1, r1, #22
 800240e:	f7fe fa35 	bl	800087c <__aeabi_uldivmod>
}
 8002412:	bd08      	pop	{r3, pc}

08002414 <TIMER_IF_Convert_Tick2ms>:
{
 8002414:	b410      	push	{r4}
    ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002416:	0142      	lsls	r2, r0, #5
 8002418:	0ec3      	lsrs	r3, r0, #27
 800241a:	1a12      	subs	r2, r2, r0
 800241c:	f163 0300 	sbc.w	r3, r3, #0
 8002420:	0099      	lsls	r1, r3, #2
 8002422:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002426:	0094      	lsls	r4, r2, #2
 8002428:	1822      	adds	r2, r4, r0
 800242a:	f141 0300 	adc.w	r3, r1, #0
 800242e:	00d8      	lsls	r0, r3, #3
 8002430:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 8002434:	00d1      	lsls	r1, r2, #3
 8002436:	0a8a      	lsrs	r2, r1, #10
}
 8002438:	ea42 5080 	orr.w	r0, r2, r0, lsl #22
 800243c:	bc10      	pop	{r4}
 800243e:	4770      	bx	lr

08002440 <TIMER_IF_StopTimer>:
{
 8002440:	b510      	push	{r4, lr}
    __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002442:	4b07      	ldr	r3, [pc, #28]	; (8002460 <TIMER_IF_StopTimer+0x20>)
 8002444:	2201      	movs	r2, #1
 8002446:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002448:	4c06      	ldr	r4, [pc, #24]	; (8002464 <TIMER_IF_StopTimer+0x24>)
 800244a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800244e:	4620      	mov	r0, r4
 8002450:	f002 fc14 	bl	8004c7c <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002454:	f04f 33ff 	mov.w	r3, #4294967295
 8002458:	6323      	str	r3, [r4, #48]	; 0x30
}
 800245a:	2000      	movs	r0, #0
 800245c:	bd10      	pop	{r4, pc}
 800245e:	bf00      	nop
 8002460:	40002800 	.word	0x40002800
 8002464:	200024ac 	.word	0x200024ac

08002468 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8002468:	b508      	push	{r3, lr}
 800246a:	4602      	mov	r2, r0
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 800246c:	2102      	movs	r1, #2
 800246e:	4802      	ldr	r0, [pc, #8]	; (8002478 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8002470:	f002 fe45 	bl	80050fe <HAL_RTCEx_BKUPWrite>
}
 8002474:	bd08      	pop	{r3, pc}
 8002476:	bf00      	nop
 8002478:	200024ac 	.word	0x200024ac

0800247c <TIMER_IF_Init>:
{
 800247c:	b538      	push	{r3, r4, r5, lr}
    if (RTC_Initialized == false) {
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <TIMER_IF_Init+0x40>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	b10b      	cbz	r3, 8002488 <TIMER_IF_Init+0xc>
}
 8002484:	2000      	movs	r0, #0
 8002486:	bd38      	pop	{r3, r4, r5, pc}
        hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002488:	4c0d      	ldr	r4, [pc, #52]	; (80024c0 <TIMER_IF_Init+0x44>)
 800248a:	f04f 35ff 	mov.w	r5, #4294967295
 800248e:	6325      	str	r5, [r4, #48]	; 0x30
        MX_RTC_Init();
 8002490:	f7ff fc24 	bl	8001cdc <MX_RTC_Init>
        TIMER_IF_StopTimer();
 8002494:	f7ff ffd4 	bl	8002440 <TIMER_IF_StopTimer>
        HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800249c:	4620      	mov	r0, r4
 800249e:	f002 fbed 	bl	8004c7c <HAL_RTC_DeactivateAlarm>
        hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80024a2:	6325      	str	r5, [r4, #48]	; 0x30
        HAL_RTCEx_EnableBypassShadow(&hrtc);
 80024a4:	4620      	mov	r0, r4
 80024a6:	f002 fdc9 	bl	800503c <HAL_RTCEx_EnableBypassShadow>
        TIMER_IF_BkUp_Write_MSBticks(0);
 80024aa:	2000      	movs	r0, #0
 80024ac:	f7ff ffdc 	bl	8002468 <TIMER_IF_BkUp_Write_MSBticks>
        TIMER_IF_SetTimerContext();
 80024b0:	f7ff ff7a 	bl	80023a8 <TIMER_IF_SetTimerContext>
        RTC_Initialized = true;
 80024b4:	4b01      	ldr	r3, [pc, #4]	; (80024bc <TIMER_IF_Init+0x40>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	e7e3      	b.n	8002484 <TIMER_IF_Init+0x8>
 80024bc:	20000538 	.word	0x20000538
 80024c0:	200024ac 	.word	0x200024ac

080024c4 <TIMER_IF_BkUp_Write_Seconds>:
{
 80024c4:	b508      	push	{r3, lr}
 80024c6:	4602      	mov	r2, r0
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80024c8:	2100      	movs	r1, #0
 80024ca:	4802      	ldr	r0, [pc, #8]	; (80024d4 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 80024cc:	f002 fe17 	bl	80050fe <HAL_RTCEx_BKUPWrite>
}
 80024d0:	bd08      	pop	{r3, pc}
 80024d2:	bf00      	nop
 80024d4:	200024ac 	.word	0x200024ac

080024d8 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 80024d8:	b508      	push	{r3, lr}
 80024da:	4602      	mov	r2, r0
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80024dc:	2101      	movs	r1, #1
 80024de:	4802      	ldr	r0, [pc, #8]	; (80024e8 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 80024e0:	f002 fe0d 	bl	80050fe <HAL_RTCEx_BKUPWrite>
}
 80024e4:	bd08      	pop	{r3, pc}
 80024e6:	bf00      	nop
 80024e8:	200024ac 	.word	0x200024ac

080024ec <TIMER_IF_StartTimer>:
{
 80024ec:	b510      	push	{r4, lr}
 80024ee:	b08c      	sub	sp, #48	; 0x30
 80024f0:	4604      	mov	r4, r0
    RTC_AlarmTypeDef sAlarm = {0};
 80024f2:	222c      	movs	r2, #44	; 0x2c
 80024f4:	2100      	movs	r1, #0
 80024f6:	a801      	add	r0, sp, #4
 80024f8:	f014 ff20 	bl	801733c <memset>
    TIMER_IF_StopTimer();
 80024fc:	f7ff ffa0 	bl	8002440 <TIMER_IF_StopTimer>
    timeout += RtcTimerContext;
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <TIMER_IF_StartTimer+0x48>)
 8002502:	6818      	ldr	r0, [r3, #0]
 8002504:	4404      	add	r4, r0
    sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002506:	2300      	movs	r3, #0
 8002508:	9308      	str	r3, [sp, #32]
    sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800250a:	43e4      	mvns	r4, r4
 800250c:	9402      	str	r4, [sp, #8]
    sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800250e:	9306      	str	r3, [sp, #24]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002510:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002514:	9307      	str	r3, [sp, #28]
    sAlarm.Alarm = RTC_ALARM_A;
 8002516:	f44f 7380 	mov.w	r3, #256	; 0x100
 800251a:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 800251c:	2201      	movs	r2, #1
 800251e:	a901      	add	r1, sp, #4
 8002520:	4805      	ldr	r0, [pc, #20]	; (8002538 <TIMER_IF_StartTimer+0x4c>)
 8002522:	f002 fccf 	bl	8004ec4 <HAL_RTC_SetAlarm_IT>
 8002526:	b910      	cbnz	r0, 800252e <TIMER_IF_StartTimer+0x42>
}
 8002528:	2000      	movs	r0, #0
 800252a:	b00c      	add	sp, #48	; 0x30
 800252c:	bd10      	pop	{r4, pc}
        Error_Handler();
 800252e:	f7ff fe8b 	bl	8002248 <Error_Handler>
 8002532:	e7f9      	b.n	8002528 <TIMER_IF_StartTimer+0x3c>
 8002534:	2000053c 	.word	0x2000053c
 8002538:	200024ac 	.word	0x200024ac

0800253c <TIMER_IF_BkUp_Read_MSBticks>:
{
 800253c:	b508      	push	{r3, lr}
    MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800253e:	2102      	movs	r1, #2
 8002540:	4801      	ldr	r0, [pc, #4]	; (8002548 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8002542:	f002 fde3 	bl	800510c <HAL_RTCEx_BKUPRead>
}
 8002546:	bd08      	pop	{r3, pc}
 8002548:	200024ac 	.word	0x200024ac

0800254c <TIMER_IF_GetTime>:
{
 800254c:	b538      	push	{r3, r4, r5, lr}
 800254e:	4605      	mov	r5, r0
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <TIMER_IF_GetTime+0x2c>)
 8002552:	689c      	ldr	r4, [r3, #8]
    return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8002554:	43e4      	mvns	r4, r4
    uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002556:	f7ff fff1 	bl	800253c <TIMER_IF_BkUp_Read_MSBticks>
    ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800255a:	2200      	movs	r2, #0
 800255c:	1912      	adds	r2, r2, r4
 800255e:	f140 0300 	adc.w	r3, r0, #0
    seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002562:	0a94      	lsrs	r4, r2, #10
 8002564:	ea44 5483 	orr.w	r4, r4, r3, lsl #22
    *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002568:	f3c2 0009 	ubfx	r0, r2, #0, #10
 800256c:	f7ff ff52 	bl	8002414 <TIMER_IF_Convert_Tick2ms>
 8002570:	8028      	strh	r0, [r5, #0]
}
 8002572:	4620      	mov	r0, r4
 8002574:	bd38      	pop	{r3, r4, r5, pc}
 8002576:	bf00      	nop
 8002578:	40002800 	.word	0x40002800

0800257c <TIMER_IF_BkUp_Read_Seconds>:
{
 800257c:	b508      	push	{r3, lr}
    ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800257e:	2100      	movs	r1, #0
 8002580:	4801      	ldr	r0, [pc, #4]	; (8002588 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8002582:	f002 fdc3 	bl	800510c <HAL_RTCEx_BKUPRead>
}
 8002586:	bd08      	pop	{r3, pc}
 8002588:	200024ac 	.word	0x200024ac

0800258c <TIMER_IF_BkUp_Read_SubSeconds>:
{
 800258c:	b508      	push	{r3, lr}
    ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800258e:	2101      	movs	r1, #1
 8002590:	4801      	ldr	r0, [pc, #4]	; (8002598 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8002592:	f002 fdbb 	bl	800510c <HAL_RTCEx_BKUPRead>
}
 8002596:	bd08      	pop	{r3, pc}
 8002598:	200024ac 	.word	0x200024ac

0800259c <TIMER_IF_DelayMs>:
{
 800259c:	b508      	push	{r3, lr}
    uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800259e:	f7ff ff2f 	bl	8002400 <TIMER_IF_Convert_ms2Tick>
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <TIMER_IF_DelayMs+0x20>)
 80025a4:	689a      	ldr	r2, [r3, #8]
    return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80025a6:	43d2      	mvns	r2, r2
 80025a8:	4b04      	ldr	r3, [pc, #16]	; (80025bc <TIMER_IF_DelayMs+0x20>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	43db      	mvns	r3, r3
    while (((GetTimerTicks() - timeout)) < delayTicks) {
 80025ae:	1a9b      	subs	r3, r3, r2
 80025b0:	4283      	cmp	r3, r0
 80025b2:	d201      	bcs.n	80025b8 <TIMER_IF_DelayMs+0x1c>
        __NOP();
 80025b4:	bf00      	nop
 80025b6:	e7f7      	b.n	80025a8 <TIMER_IF_DelayMs+0xc>
}
 80025b8:	bd08      	pop	{r3, pc}
 80025ba:	bf00      	nop
 80025bc:	40002800 	.word	0x40002800

080025c0 <HAL_RTC_AlarmAEventCallback>:
{
 80025c0:	b508      	push	{r3, lr}
    UTIL_TIMER_IRQ_MAP_PROCESS();
 80025c2:	f014 fce5 	bl	8016f90 <UTIL_TIMER_IRQ_Handler>
}
 80025c6:	bd08      	pop	{r3, pc}

080025c8 <HAL_RTCEx_SSRUEventCallback>:
{
 80025c8:	b508      	push	{r3, lr}
    uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80025ca:	f7ff ffb7 	bl	800253c <TIMER_IF_BkUp_Read_MSBticks>
    TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80025ce:	3001      	adds	r0, #1
 80025d0:	f7ff ff4a 	bl	8002468 <TIMER_IF_BkUp_Write_MSBticks>
}
 80025d4:	bd08      	pop	{r3, pc}

080025d6 <vcom_DeInit>:
    return UTIL_ADV_TRACE_OK;
}

// DeInit virtual comms
UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80025d6:	b508      	push	{r3, lr}
    MX_DBG_Init();
 80025d8:	f7ff f8ee 	bl	80017b8 <MX_DBG_Init>
    return UTIL_ADV_TRACE_OK;
}
 80025dc:	2000      	movs	r0, #0
 80025de:	bd08      	pop	{r3, pc}

080025e0 <vcom_Init>:
{
 80025e0:	b510      	push	{r4, lr}
 80025e2:	4604      	mov	r4, r0
    MX_DBG_Init();
 80025e4:	f7ff f8e8 	bl	80017b8 <MX_DBG_Init>
    MX_DBG_TxCpltCallback(cb);
 80025e8:	4620      	mov	r0, r4
 80025ea:	f7ff f837 	bl	800165c <MX_DBG_TxCpltCallback>
}
 80025ee:	2000      	movs	r0, #0
 80025f0:	bd10      	pop	{r4, pc}

080025f2 <vcom_Trace_DMA>:
    MX_DBG((const char *)p_data, (size_t)size, 0);
}

// Trace with DMA
UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80025f2:	b508      	push	{r3, lr}
    MX_DBG((const char *)p_data, (size_t)size, 0);
 80025f4:	2200      	movs	r2, #0
 80025f6:	f7ff f847 	bl	8001688 <MX_DBG>
    return UTIL_ADV_TRACE_OK;
}
 80025fa:	2000      	movs	r0, #0
 80025fc:	bd08      	pop	{r3, pc}

080025fe <vcom_ReceiveInit>:

// Receive
UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80025fe:	b508      	push	{r3, lr}
    MX_DBG_RxCallback(RxCb);
 8002600:	f7ff f834 	bl	800166c <MX_DBG_RxCallback>
    return UTIL_ADV_TRACE_OK;
}
 8002604:	2000      	movs	r0, #0
 8002606:	bd08      	pop	{r3, pc}

08002608 <tiny_snprintf_like>:
    UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
}

// UTIL_ADV_TRACE_VSNPRINTF wrapper
static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002608:	b40c      	push	{r2, r3}
 800260a:	b500      	push	{lr}
 800260c:	b083      	sub	sp, #12
 800260e:	ab04      	add	r3, sp, #16
 8002610:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list vaArgs;
    va_start(vaArgs, strFormat);
 8002614:	9301      	str	r3, [sp, #4]
    UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002616:	f014 fd99 	bl	801714c <tiny_vsnprintf_like>
    va_end(vaArgs);
}
 800261a:	b003      	add	sp, #12
 800261c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002620:	b002      	add	sp, #8
 8002622:	4770      	bx	lr

08002624 <TimestampNow>:
{
 8002624:	b530      	push	{r4, r5, lr}
 8002626:	b085      	sub	sp, #20
 8002628:	4604      	mov	r4, r0
 800262a:	460d      	mov	r5, r1
    SysTime_t curtime = SysTimeGet();
 800262c:	a802      	add	r0, sp, #8
 800262e:	f014 fb03 	bl	8016c38 <SysTimeGet>
    tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002632:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	9b02      	ldr	r3, [sp, #8]
 800263a:	4a05      	ldr	r2, [pc, #20]	; (8002650 <TimestampNow+0x2c>)
 800263c:	2110      	movs	r1, #16
 800263e:	4620      	mov	r0, r4
 8002640:	f7ff ffe2 	bl	8002608 <tiny_snprintf_like>
    *size = strlen((char *)buff);
 8002644:	4620      	mov	r0, r4
 8002646:	f7fd fd97 	bl	8000178 <strlen>
 800264a:	8028      	strh	r0, [r5, #0]
}
 800264c:	b005      	add	sp, #20
 800264e:	bd30      	pop	{r4, r5, pc}
 8002650:	08017890 	.word	0x08017890

08002654 <MX_UTIL_Init>:
{
 8002654:	b508      	push	{r3, lr}
    UTIL_TIMER_Init();
 8002656:	f014 fb6f 	bl	8016d38 <UTIL_TIMER_Init>
    UTIL_ADV_TRACE_Init();
 800265a:	f014 f829 	bl	80166b0 <UTIL_ADV_TRACE_Init>
    UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800265e:	4806      	ldr	r0, [pc, #24]	; (8002678 <MX_UTIL_Init+0x24>)
 8002660:	f014 f840 	bl	80166e4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
    UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002664:	2002      	movs	r0, #2
 8002666:	f014 f843 	bl	80166f0 <UTIL_ADV_TRACE_SetVerboseLevel>
    UTIL_LPM_Init();
 800266a:	f014 f94f 	bl	801690c <UTIL_LPM_Init>
    UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800266e:	2101      	movs	r1, #1
 8002670:	4608      	mov	r0, r1
 8002672:	f014 f96b 	bl	801694c <UTIL_LPM_SetOffMode>
}
 8002676:	bd08      	pop	{r3, pc}
 8002678:	08002625 	.word	0x08002625

0800267c <UTIL_SEQ_Idle>:
{
 800267c:	b508      	push	{r3, lr}
    UTIL_LPM_EnterLowPower();
 800267e:	f014 f97b 	bl	8016978 <UTIL_LPM_EnterLowPower>
}
 8002682:	bd08      	pop	{r3, pc}

08002684 <UTIL_ADV_TRACE_PreSendHook>:
{
 8002684:	b508      	push	{r3, lr}
    UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002686:	2101      	movs	r1, #1
 8002688:	2002      	movs	r0, #2
 800268a:	f014 f949 	bl	8016920 <UTIL_LPM_SetStopMode>
}
 800268e:	bd08      	pop	{r3, pc}

08002690 <UTIL_ADV_TRACE_PostSendHook>:
{
 8002690:	b508      	push	{r3, lr}
    UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002692:	2100      	movs	r1, #0
 8002694:	2002      	movs	r0, #2
 8002696:	f014 f943 	bl	8016920 <UTIL_LPM_SetStopMode>
}
 800269a:	bd08      	pop	{r3, pc}

0800269c <sensorGetData>:

#include "sensor.h"

// Measure sensor values and retrieve data to be transmitted, returning true if success or false if failure.
bool sensorGetData(uint8_t *buf, uint8_t bufmaxlen, uint8_t *buflen, uint32_t *secsSuccess, uint32_t *secsFailure)
{
 800269c:	b530      	push	{r4, r5, lr}
 800269e:	b083      	sub	sp, #12
 80026a0:	4614      	mov	r4, r2

    // Set callback timings on either success or failure to send this sensor measurement
    *secsFailure = 10;
 80026a2:	9a06      	ldr	r2, [sp, #24]
 80026a4:	250a      	movs	r5, #10
 80026a6:	6015      	str	r5, [r2, #0]
    *secsSuccess = 15;
 80026a8:	220f      	movs	r2, #15
 80026aa:	601a      	str	r2, [r3, #0]
	//   X-Session-Token: <your project's notehub API session token>
	//   X-Format: ttn <or helium>
	//   X-Product: <any product UID within your project>
	//   X-Template: {"a":11,"b":12,"c":13"temp":12.1}
    //
    binBegin(buf, bufmaxlen, 0);
 80026ac:	2200      	movs	r2, #0
 80026ae:	f7fe fd95 	bl	80011dc <binBegin>
    binAppendInt8(1);               // "a"
 80026b2:	2001      	movs	r0, #1
 80026b4:	f7fe fdce 	bl	8001254 <binAppendInt8>
    binAppendInt16(2);              // "b"
 80026b8:	2002      	movs	r0, #2
 80026ba:	f7fe fdd0 	bl	800125e <binAppendInt16>
    static int messagesSent = 0;
    binAppendInt24(messagesSent++); // "c"
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <sensorGetData+0x50>)
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	1c42      	adds	r2, r0, #1
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	f7fe fdd4 	bl	8001272 <binAppendInt24>
    binAppendReal16(-1.23);         // "temp"
 80026ca:	4809      	ldr	r0, [pc, #36]	; (80026f0 <sensorGetData+0x54>)
 80026cc:	f7fe fe74 	bl	80013b8 <binAppendReal16>
    *buflen = binEnd();
 80026d0:	f7fe fe0e 	bl	80012f0 <binEnd>
 80026d4:	7020      	strb	r0, [r4, #0]

    // Done
    APP_PRINTF("sensor retrieved %d bytes\r\n", *buflen);
 80026d6:	9000      	str	r0, [sp, #0]
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <sensorGetData+0x58>)
 80026da:	2200      	movs	r2, #0
 80026dc:	4611      	mov	r1, r2
 80026de:	4610      	mov	r0, r2
 80026e0:	f014 f85a 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
    return true;

}
 80026e4:	2001      	movs	r0, #1
 80026e6:	b003      	add	sp, #12
 80026e8:	bd30      	pop	{r4, r5, pc}
 80026ea:	bf00      	nop
 80026ec:	20000540 	.word	0x20000540
 80026f0:	bf9d70a4 	.word	0xbf9d70a4
 80026f4:	0801789c 	.word	0x0801789c

080026f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026f8:	480d      	ldr	r0, [pc, #52]	; (8002730 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026fc:	f000 f825 	bl	800274a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002700:	480c      	ldr	r0, [pc, #48]	; (8002734 <LoopForever+0x6>)
  ldr r1, =_edata
 8002702:	490d      	ldr	r1, [pc, #52]	; (8002738 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002704:	4a0d      	ldr	r2, [pc, #52]	; (800273c <LoopForever+0xe>)
  movs r3, #0
 8002706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002708:	e002      	b.n	8002710 <LoopCopyDataInit>

0800270a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800270a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800270c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800270e:	3304      	adds	r3, #4

08002710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002714:	d3f9      	bcc.n	800270a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002716:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002718:	4c0a      	ldr	r4, [pc, #40]	; (8002744 <LoopForever+0x16>)
  movs r3, #0
 800271a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800271c:	e001      	b.n	8002722 <LoopFillZerobss>

0800271e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800271e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002720:	3204      	adds	r2, #4

08002722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002724:	d3fb      	bcc.n	800271e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002726:	f014 fdd7 	bl	80172d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800272a:	f7ff f947 	bl	80019bc <main>

0800272e <LoopForever>:

LoopForever:
    b LoopForever
 800272e:	e7fe      	b.n	800272e <LoopForever>
  ldr   r0, =_estack
 8002730:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002738:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 800273c:	080184c4 	.word	0x080184c4
  ldr r2, =_sbss
 8002740:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002744:	2000258c 	.word	0x2000258c

08002748 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002748:	e7fe      	b.n	8002748 <ADC_IRQHandler>

0800274a <SystemInit>:

    // FPU settings
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800274a:	4770      	bx	lr

0800274c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800274c:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800274e:	2003      	movs	r0, #3
 8002750:	f000 fce6 	bl	8003120 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002754:	f001 fcb0 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <HAL_Init+0x28>)
 800275a:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800275c:	200f      	movs	r0, #15
 800275e:	f7ff fe13 	bl	8002388 <HAL_InitTick>
 8002762:	b110      	cbz	r0, 800276a <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002764:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8002766:	4620      	mov	r0, r4
 8002768:	bd10      	pop	{r4, pc}
 800276a:	4604      	mov	r4, r0
    HAL_MspInit();
 800276c:	f7ff fb56 	bl	8001e1c <HAL_MspInit>
 8002770:	e7f9      	b.n	8002766 <HAL_Init+0x1a>
 8002772:	bf00      	nop
 8002774:	20000058 	.word	0x20000058

08002778 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002778:	4a02      	ldr	r2, [pc, #8]	; (8002784 <HAL_SuspendTick+0xc>)
 800277a:	6813      	ldr	r3, [r2, #0]
 800277c:	f023 0302 	bic.w	r3, r3, #2
 8002780:	6013      	str	r3, [r2, #0]
}
 8002782:	4770      	bx	lr
 8002784:	e000e010 	.word	0xe000e010

08002788 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002788:	4a02      	ldr	r2, [pc, #8]	; (8002794 <HAL_ResumeTick+0xc>)
 800278a:	6813      	ldr	r3, [r2, #0]
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	6013      	str	r3, [r2, #0]
}
 8002792:	4770      	bx	lr
 8002794:	e000e010 	.word	0xe000e010

08002798 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8002798:	4b01      	ldr	r3, [pc, #4]	; (80027a0 <HAL_GetUIDw0+0x8>)
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	1fff7590 	.word	0x1fff7590

080027a4 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 80027a4:	4b01      	ldr	r3, [pc, #4]	; (80027ac <HAL_GetUIDw1+0x8>)
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	1fff7594 	.word	0x1fff7594

080027b0 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 80027b0:	4b01      	ldr	r3, [pc, #4]	; (80027b8 <HAL_GetUIDw2+0x8>)
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	1fff7598 	.word	0x1fff7598

080027bc <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80027bc:	4a02      	ldr	r2, [pc, #8]	; (80027c8 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 80027be:	6853      	ldr	r3, [r2, #4]
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 80027c6:	4770      	bx	lr
 80027c8:	e0042000 	.word	0xe0042000

080027cc <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80027cc:	4a02      	ldr	r2, [pc, #8]	; (80027d8 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 80027ce:	6853      	ldr	r3, [r2, #4]
 80027d0:	f023 0301 	bic.w	r3, r3, #1
 80027d4:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 80027d6:	4770      	bx	lr
 80027d8:	e0042000 	.word	0xe0042000

080027dc <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80027dc:	4a02      	ldr	r2, [pc, #8]	; (80027e8 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 80027de:	6853      	ldr	r3, [r2, #4]
 80027e0:	f043 0302 	orr.w	r3, r3, #2
 80027e4:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 80027e6:	4770      	bx	lr
 80027e8:	e0042000 	.word	0xe0042000

080027ec <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80027ec:	4a02      	ldr	r2, [pc, #8]	; (80027f8 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80027ee:	6853      	ldr	r3, [r2, #4]
 80027f0:	f023 0302 	bic.w	r3, r3, #2
 80027f4:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 80027f6:	4770      	bx	lr
 80027f8:	e0042000 	.word	0xe0042000

080027fc <HAL_DBGMCU_EnableDBGStandbyMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80027fc:	4a02      	ldr	r2, [pc, #8]	; (8002808 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80027fe:	6853      	ldr	r3, [r2, #4]
 8002800:	f043 0304 	orr.w	r3, r3, #4
 8002804:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 8002806:	4770      	bx	lr
 8002808:	e0042000 	.word	0xe0042000

0800280c <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800280c:	4a02      	ldr	r2, [pc, #8]	; (8002818 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 800280e:	6853      	ldr	r3, [r2, #4]
 8002810:	f023 0304 	bic.w	r3, r3, #4
 8002814:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 8002816:	4770      	bx	lr
 8002818:	e0042000 	.word	0xe0042000

0800281c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800281c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800281e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002820:	2300      	movs	r3, #0
 8002822:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002824:	2800      	cmp	r0, #0
 8002826:	f000 8121 	beq.w	8002a6c <HAL_ADC_Init+0x250>
 800282a:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800282c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800282e:	b1bb      	cbz	r3, 8002860 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002830:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002832:	6893      	ldr	r3, [r2, #8]
 8002834:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002838:	d11f      	bne.n	800287a <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 800283a:	6893      	ldr	r3, [r2, #8]
 800283c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002840:	f023 0317 	bic.w	r3, r3, #23
 8002844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002848:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800284a:	4b89      	ldr	r3, [pc, #548]	; (8002a70 <HAL_ADC_Init+0x254>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	099b      	lsrs	r3, r3, #6
 8002850:	4a88      	ldr	r2, [pc, #544]	; (8002a74 <HAL_ADC_Init+0x258>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	099b      	lsrs	r3, r3, #6
 8002858:	3301      	adds	r3, #1
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800285e:	e009      	b.n	8002874 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8002860:	f7fe fe32 	bl	80014c8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002864:	2300      	movs	r3, #0
 8002866:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002868:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800286c:	e7e0      	b.n	8002830 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 800286e:	9b01      	ldr	r3, [sp, #4]
 8002870:	3b01      	subs	r3, #1
 8002872:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002874:	9b01      	ldr	r3, [sp, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f9      	bne.n	800286e <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800287a:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800287c:	6893      	ldr	r3, [r2, #8]
 800287e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002882:	d109      	bne.n	8002898 <HAL_ADC_Init+0x7c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002884:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002886:	f043 0310 	orr.w	r3, r3, #16
 800288a:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800288c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002894:	2001      	movs	r0, #1
 8002896:	e000      	b.n	800289a <HAL_ADC_Init+0x7e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002898:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800289a:	6893      	ldr	r3, [r2, #8]
 800289c:	f013 0304 	ands.w	r3, r3, #4
 80028a0:	d000      	beq.n	80028a4 <HAL_ADC_Init+0x88>
 80028a2:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028a4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80028a6:	f011 0f10 	tst.w	r1, #16
 80028aa:	f040 80d8 	bne.w	8002a5e <HAL_ADC_Init+0x242>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f040 80d5 	bne.w	8002a5e <HAL_ADC_Init+0x242>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028b4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80028b6:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80028ba:	f041 0102 	orr.w	r1, r1, #2
 80028be:	65a1      	str	r1, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028c0:	6891      	ldr	r1, [r2, #8]
 80028c2:	f011 0f01 	tst.w	r1, #1
 80028c6:	d131      	bne.n	800292c <HAL_ADC_Init+0x110>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80028c8:	68d1      	ldr	r1, [r2, #12]
 80028ca:	f021 0118 	bic.w	r1, r1, #24
 80028ce:	68a5      	ldr	r5, [r4, #8]
 80028d0:	4329      	orrs	r1, r5
 80028d2:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80028d4:	6862      	ldr	r2, [r4, #4]
 80028d6:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80028da:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80028dc:	4315      	orrs	r5, r2
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80028de:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 80028e2:	2901      	cmp	r1, #1
 80028e4:	d018      	beq.n	8002918 <HAL_ADC_Init+0xfc>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80028e6:	6821      	ldr	r1, [r4, #0]
 80028e8:	690e      	ldr	r6, [r1, #16]
 80028ea:	4a63      	ldr	r2, [pc, #396]	; (8002a78 <HAL_ADC_Init+0x25c>)
 80028ec:	4032      	ands	r2, r6
 80028ee:	432a      	orrs	r2, r5
 80028f0:	610a      	str	r2, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80028f2:	6862      	ldr	r2, [r4, #4]
 80028f4:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 80028f8:	d019      	beq.n	800292e <HAL_ADC_Init+0x112>
 80028fa:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80028fe:	d016      	beq.n	800292e <HAL_ADC_Init+0x112>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002900:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002904:	d013      	beq.n	800292e <HAL_ADC_Init+0x112>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002906:	4e5d      	ldr	r6, [pc, #372]	; (8002a7c <HAL_ADC_Init+0x260>)
 8002908:	6831      	ldr	r1, [r6, #0]
 800290a:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 800290e:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 8002912:	430a      	orrs	r2, r1
 8002914:	6032      	str	r2, [r6, #0]
 8002916:	e00a      	b.n	800292e <HAL_ADC_Init+0x112>
                     hadc->Init.Oversampling.Ratio         |
 8002918:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800291a:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.RightBitShift |
 800291c:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800291e:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.TriggeredMode
 8002920:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002922:	430a      	orrs	r2, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002924:	4315      	orrs	r5, r2
 8002926:	f045 0501 	orr.w	r5, r5, #1
 800292a:	e7dc      	b.n	80028e6 <HAL_ADC_Init+0xca>
  uint32_t tmpCFGR2 = 0UL;
 800292c:	461d      	mov	r5, r3
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800292e:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002930:	7e62      	ldrb	r2, [r4, #25]
 8002932:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002934:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002938:	7ea6      	ldrb	r6, [r4, #26]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800293a:	ea42 3246 	orr.w	r2, r2, r6, lsl #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800293e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002940:	b109      	cbz	r1, 8002946 <HAL_ADC_Init+0x12a>
 8002942:	f44f 5180 	mov.w	r1, #4096	; 0x1000
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002946:	430a      	orrs	r2, r1
                 hadc->Init.DataAlign                                           |
 8002948:	68e1      	ldr	r1, [r4, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800294a:	430a      	orrs	r2, r1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800294c:	6921      	ldr	r1, [r4, #16]
 800294e:	2900      	cmp	r1, #0
 8002950:	db47      	blt.n	80029e2 <HAL_ADC_Init+0x1c6>
 8002952:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 8002956:	430a      	orrs	r2, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002958:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800295c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002960:	f894 1020 	ldrb.w	r1, [r4, #32]
 8002964:	2901      	cmp	r1, #1
 8002966:	d03f      	beq.n	80029e8 <HAL_ADC_Init+0x1cc>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002968:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800296a:	b121      	cbz	r1, 8002976 <HAL_ADC_Init+0x15a>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800296c:	f401 71e0 	and.w	r1, r1, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 8002970:	6aa6      	ldr	r6, [r4, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002972:	4331      	orrs	r1, r6
 8002974:	430a      	orrs	r2, r1
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002976:	6826      	ldr	r6, [r4, #0]
 8002978:	68f1      	ldr	r1, [r6, #12]
 800297a:	f421 31fe 	bic.w	r1, r1, #130048	; 0x1fc00
 800297e:	f421 71f3 	bic.w	r1, r1, #486	; 0x1e6
 8002982:	4311      	orrs	r1, r2
 8002984:	60f1      	str	r1, [r6, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8002986:	6826      	ldr	r6, [r4, #0]
 8002988:	6937      	ldr	r7, [r6, #16]
 800298a:	493d      	ldr	r1, [pc, #244]	; (8002a80 <HAL_ADC_Init+0x264>)
 800298c:	4039      	ands	r1, r7
 800298e:	430d      	orrs	r5, r1
 8002990:	6135      	str	r5, [r6, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002992:	6826      	ldr	r6, [r4, #0]
 8002994:	6b61      	ldr	r1, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 8002996:	6975      	ldr	r5, [r6, #20]
 8002998:	f025 0507 	bic.w	r5, r5, #7
 800299c:	4329      	orrs	r1, r5
 800299e:	6171      	str	r1, [r6, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80029a0:	6825      	ldr	r5, [r4, #0]
 80029a2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80029a4:	6969      	ldr	r1, [r5, #20]
 80029a6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80029aa:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
 80029ae:	6169      	str	r1, [r5, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80029b0:	6921      	ldr	r1, [r4, #16]
 80029b2:	bb31      	cbnz	r1, 8002a02 <HAL_ADC_Init+0x1e6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80029b4:	6821      	ldr	r1, [r4, #0]
 80029b6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80029b8:	f063 030f 	orn	r3, r3, #15
 80029bc:	628b      	str	r3, [r1, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	68d9      	ldr	r1, [r3, #12]
 80029c2:	4b30      	ldr	r3, [pc, #192]	; (8002a84 <HAL_ADC_Init+0x268>)
 80029c4:	400b      	ands	r3, r1
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d040      	beq.n	8002a4c <HAL_ADC_Init+0x230>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80029ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80029cc:	f023 0312 	bic.w	r3, r3, #18
 80029d0:	f043 0310 	orr.w	r3, r3, #16
 80029d4:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80029de:	2001      	movs	r0, #1
 80029e0:	e042      	b.n	8002a68 <HAL_ADC_Init+0x24c>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80029e2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80029e6:	e7b6      	b.n	8002956 <HAL_ADC_Init+0x13a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80029e8:	b916      	cbnz	r6, 80029f0 <HAL_ADC_Init+0x1d4>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80029ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80029ee:	e7bb      	b.n	8002968 <HAL_ADC_Init+0x14c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80029f2:	f041 0120 	orr.w	r1, r1, #32
 80029f6:	65a1      	str	r1, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80029fa:	f041 0101 	orr.w	r1, r1, #1
 80029fe:	65e1      	str	r1, [r4, #92]	; 0x5c
 8002a00:	e7b2      	b.n	8002968 <HAL_ADC_Init+0x14c>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a02:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002a06:	d1da      	bne.n	80029be <HAL_ADC_Init+0x1a2>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002a08:	2b07      	cmp	r3, #7
 8002a0a:	d808      	bhi.n	8002a1e <HAL_ADC_Init+0x202>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002a0c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002a0e:	009d      	lsls	r5, r3, #2
 8002a10:	40e9      	lsrs	r1, r5
 8002a12:	f001 010f 	and.w	r1, r1, #15
 8002a16:	290f      	cmp	r1, #15
 8002a18:	d001      	beq.n	8002a1e <HAL_ADC_Init+0x202>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	e7f4      	b.n	8002a08 <HAL_ADC_Init+0x1ec>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d00e      	beq.n	8002a40 <HAL_ADC_Init+0x224>
        MODIFY_REG(hadc->Instance->CHSELR,
 8002a22:	6825      	ldr	r5, [r4, #0]
 8002a24:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002a26:	69e3      	ldr	r3, [r4, #28]
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	f003 031c 	and.w	r3, r3, #28
 8002a30:	f06f 010f 	mvn.w	r1, #15
 8002a34:	fa01 f303 	lsl.w	r3, r1, r3
 8002a38:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002a3a:	430b      	orrs	r3, r1
 8002a3c:	62ab      	str	r3, [r5, #40]	; 0x28
 8002a3e:	e7be      	b.n	80029be <HAL_ADC_Init+0x1a2>
        SET_BIT(hadc->Instance->CHSELR,
 8002a40:	6821      	ldr	r1, [r4, #0]
 8002a42:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002a44:	f063 030f 	orn	r3, r3, #15
 8002a48:	628b      	str	r3, [r1, #40]	; 0x28
 8002a4a:	e7b8      	b.n	80029be <HAL_ADC_Init+0x1a2>
      ADC_CLEAR_ERRORCODE(hadc);
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8002a50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002a52:	f023 0303 	bic.w	r3, r3, #3
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	65a3      	str	r3, [r4, #88]	; 0x58
 8002a5c:	e004      	b.n	8002a68 <HAL_ADC_Init+0x24c>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002a60:	f043 0310 	orr.w	r3, r3, #16
 8002a64:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a66:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8002a68:	b003      	add	sp, #12
 8002a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	e7fb      	b.n	8002a68 <HAL_ADC_Init+0x24c>
 8002a70:	20000058 	.word	0x20000058
 8002a74:	053e2d63 	.word	0x053e2d63
 8002a78:	1ffffc02 	.word	0x1ffffc02
 8002a7c:	40012708 	.word	0x40012708
 8002a80:	dffffc02 	.word	0xdffffc02
 8002a84:	833fffe7 	.word	0x833fffe7

08002a88 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002a8e:	6946      	ldr	r6, [r0, #20]
 8002a90:	2e08      	cmp	r6, #8
 8002a92:	d005      	beq.n	8002aa0 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002a94:	6803      	ldr	r3, [r0, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f013 0f01 	tst.w	r3, #1
 8002a9c:	d11e      	bne.n	8002adc <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002a9e:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002aa0:	f7ff fc74 	bl	800238c <HAL_GetTick>
 8002aa4:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002aa6:	6823      	ldr	r3, [r4, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	4232      	tst	r2, r6
 8002aac:	d11c      	bne.n	8002ae8 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002aae:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002ab2:	d0f8      	beq.n	8002aa6 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002ab4:	f7ff fc6a 	bl	800238c <HAL_GetTick>
 8002ab8:	1bc3      	subs	r3, r0, r7
 8002aba:	42ab      	cmp	r3, r5
 8002abc:	d801      	bhi.n	8002ac2 <HAL_ADC_PollForConversion+0x3a>
 8002abe:	2d00      	cmp	r5, #0
 8002ac0:	d1f1      	bne.n	8002aa6 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002ac2:	6823      	ldr	r3, [r4, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4233      	tst	r3, r6
 8002ac8:	d1ed      	bne.n	8002aa6 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002aca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002acc:	f043 0304 	orr.w	r3, r3, #4
 8002ad0:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 8002ad8:	2003      	movs	r0, #3
 8002ada:	e028      	b.n	8002b2e <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002adc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002ade:	f043 0320 	orr.w	r3, r3, #32
 8002ae2:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	e022      	b.n	8002b2e <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ae8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aee:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002af6:	d115      	bne.n	8002b24 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002af8:	7ea2      	ldrb	r2, [r4, #26]
 8002afa:	b99a      	cbnz	r2, 8002b24 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	f012 0f08 	tst.w	r2, #8
 8002b02:	d00f      	beq.n	8002b24 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	f012 0f04 	tst.w	r2, #4
 8002b0a:	d111      	bne.n	8002b30 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	f022 020c 	bic.w	r2, r2, #12
 8002b12:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002b14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b1a:	f023 0301 	bic.w	r3, r3, #1
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002b24:	7e20      	ldrb	r0, [r4, #24]
 8002b26:	b960      	cbnz	r0, 8002b42 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b28:	6823      	ldr	r3, [r4, #0]
 8002b2a:	220c      	movs	r2, #12
 8002b2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b32:	f043 0320 	orr.w	r3, r3, #32
 8002b36:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b38:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002b3a:	f043 0301 	orr.w	r3, r3, #1
 8002b3e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002b40:	e7f0      	b.n	8002b24 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8002b42:	2000      	movs	r0, #0
 8002b44:	e7f3      	b.n	8002b2e <HAL_ADC_PollForConversion+0xa6>

08002b46 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002b46:	6803      	ldr	r3, [r0, #0]
 8002b48:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8002b4a:	4770      	bx	lr

08002b4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002b4c:	b470      	push	{r4, r5, r6}
 8002b4e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b50:	2200      	movs	r2, #0
 8002b52:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b54:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002b56:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8002b5a:	2a01      	cmp	r2, #1
 8002b5c:	f000 80ee 	beq.w	8002d3c <HAL_ADC_ConfigChannel+0x1f0>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2201      	movs	r2, #1
 8002b64:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b68:	6802      	ldr	r2, [r0, #0]
 8002b6a:	6890      	ldr	r0, [r2, #8]
 8002b6c:	f010 0f04 	tst.w	r0, #4
 8002b70:	d00a      	beq.n	8002b88 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b72:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b74:	f042 0220 	orr.w	r2, r2, #32
 8002b78:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b7a:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 8002b82:	b003      	add	sp, #12
 8002b84:	bc70      	pop	{r4, r5, r6}
 8002b86:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8002b88:	6848      	ldr	r0, [r1, #4]
 8002b8a:	2802      	cmp	r0, #2
 8002b8c:	f000 8097 	beq.w	8002cbe <HAL_ADC_ConfigChannel+0x172>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b90:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002b94:	d029      	beq.n	8002bea <HAL_ADC_ConfigChannel+0x9e>
 8002b96:	4d6a      	ldr	r5, [pc, #424]	; (8002d40 <HAL_ADC_ConfigChannel+0x1f4>)
 8002b98:	42ac      	cmp	r4, r5
 8002b9a:	d026      	beq.n	8002bea <HAL_ADC_ConfigChannel+0x9e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002b9c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8002b9e:	f000 001f 	and.w	r0, r0, #31
 8002ba2:	250f      	movs	r5, #15
 8002ba4:	4085      	lsls	r5, r0
 8002ba6:	ea24 0505 	bic.w	r5, r4, r5
 8002baa:	680c      	ldr	r4, [r1, #0]
 8002bac:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8002bb0:	2e00      	cmp	r6, #0
 8002bb2:	d133      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0xd0>
 8002bb4:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8002bb8:	fa04 f000 	lsl.w	r0, r4, r0
 8002bbc:	4328      	orrs	r0, r5
 8002bbe:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002bc0:	684c      	ldr	r4, [r1, #4]
 8002bc2:	08a0      	lsrs	r0, r4, #2
 8002bc4:	3001      	adds	r0, #1
 8002bc6:	69dd      	ldr	r5, [r3, #28]
 8002bc8:	42a8      	cmp	r0, r5
 8002bca:	d814      	bhi.n	8002bf6 <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002bcc:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8002bce:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002bd0:	f004 041f 	and.w	r4, r4, #31
 8002bd4:	260f      	movs	r6, #15
 8002bd6:	40a6      	lsls	r6, r4
 8002bd8:	ea20 0006 	bic.w	r0, r0, r6
 8002bdc:	f3c5 6583 	ubfx	r5, r5, #26, #4
 8002be0:	fa05 f404 	lsl.w	r4, r5, r4
 8002be4:	4304      	orrs	r4, r0
 8002be6:	6294      	str	r4, [r2, #40]	; 0x28
}
 8002be8:	e005      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0xaa>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002bea:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002bec:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002bee:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8002bf2:	4320      	orrs	r0, r4
 8002bf4:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002bf6:	681d      	ldr	r5, [r3, #0]
 8002bf8:	680e      	ldr	r6, [r1, #0]
 8002bfa:	6888      	ldr	r0, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8002bfc:	696c      	ldr	r4, [r5, #20]
 8002bfe:	ea24 2406 	bic.w	r4, r4, r6, lsl #8
 8002c02:	ea00 2206 	and.w	r2, r0, r6, lsl #8
 8002c06:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8002c0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c0e:	4322      	orrs	r2, r4
 8002c10:	616a      	str	r2, [r5, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c12:	680a      	ldr	r2, [r1, #0]
 8002c14:	2a00      	cmp	r2, #0
 8002c16:	db09      	blt.n	8002c2c <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c18:	2000      	movs	r0, #0
 8002c1a:	e7af      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x30>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1c:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8002c20:	b114      	cbz	r4, 8002c28 <HAL_ADC_ConfigChannel+0xdc>
  return __builtin_clz(value);
 8002c22:	fab4 f484 	clz	r4, r4
 8002c26:	e7c7      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8002c28:	2420      	movs	r4, #32
 8002c2a:	e7c5      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c2c:	4945      	ldr	r1, [pc, #276]	; (8002d44 <HAL_ADC_ConfigChannel+0x1f8>)
 8002c2e:	6808      	ldr	r0, [r1, #0]
 8002c30:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c34:	4c44      	ldr	r4, [pc, #272]	; (8002d48 <HAL_ADC_ConfigChannel+0x1fc>)
 8002c36:	42a2      	cmp	r2, r4
 8002c38:	d007      	beq.n	8002c4a <HAL_ADC_ConfigChannel+0xfe>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c3a:	4c44      	ldr	r4, [pc, #272]	; (8002d4c <HAL_ADC_ConfigChannel+0x200>)
 8002c3c:	42a2      	cmp	r2, r4
 8002c3e:	d024      	beq.n	8002c8a <HAL_ADC_ConfigChannel+0x13e>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002c40:	4c43      	ldr	r4, [pc, #268]	; (8002d50 <HAL_ADC_ConfigChannel+0x204>)
 8002c42:	42a2      	cmp	r2, r4
 8002c44:	d02e      	beq.n	8002ca4 <HAL_ADC_ConfigChannel+0x158>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c46:	2000      	movs	r0, #0
 8002c48:	e798      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c4a:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8002c4e:	d1f4      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0xee>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c50:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c54:	483b      	ldr	r0, [pc, #236]	; (8002d44 <HAL_ADC_ConfigChannel+0x1f8>)
 8002c56:	6802      	ldr	r2, [r0, #0]
 8002c58:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002c5c:	4311      	orrs	r1, r2
 8002c5e:	6001      	str	r1, [r0, #0]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c60:	4a3c      	ldr	r2, [pc, #240]	; (8002d54 <HAL_ADC_ConfigChannel+0x208>)
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	0992      	lsrs	r2, r2, #6
 8002c66:	493c      	ldr	r1, [pc, #240]	; (8002d58 <HAL_ADC_ConfigChannel+0x20c>)
 8002c68:	fba1 1202 	umull	r1, r2, r1, r2
 8002c6c:	0992      	lsrs	r2, r2, #6
 8002c6e:	3201      	adds	r2, #1
 8002c70:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002c74:	0092      	lsls	r2, r2, #2
 8002c76:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002c78:	e002      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x134>
            wait_loop_index--;
 8002c7a:	9a01      	ldr	r2, [sp, #4]
 8002c7c:	3a01      	subs	r2, #1
 8002c7e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002c80:	9a01      	ldr	r2, [sp, #4]
 8002c82:	2a00      	cmp	r2, #0
 8002c84:	d1f9      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x12e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c86:	2000      	movs	r0, #0
 8002c88:	e778      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c8a:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8002c8e:	d1d7      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0xf4>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c90:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8002c94:	482b      	ldr	r0, [pc, #172]	; (8002d44 <HAL_ADC_ConfigChannel+0x1f8>)
 8002c96:	6802      	ldr	r2, [r0, #0]
 8002c98:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002c9c:	4311      	orrs	r1, r2
 8002c9e:	6001      	str	r1, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca0:	2000      	movs	r0, #0
}
 8002ca2:	e76b      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002ca4:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8002ca8:	d146      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x1ec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002caa:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002cae:	4825      	ldr	r0, [pc, #148]	; (8002d44 <HAL_ADC_ConfigChannel+0x1f8>)
 8002cb0:	6801      	ldr	r1, [r0, #0]
 8002cb2:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cba:	2000      	movs	r0, #0
}
 8002cbc:	e75e      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002cbe:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002cc2:	d002      	beq.n	8002cca <HAL_ADC_ConfigChannel+0x17e>
 8002cc4:	481e      	ldr	r0, [pc, #120]	; (8002d40 <HAL_ADC_ConfigChannel+0x1f4>)
 8002cc6:	4284      	cmp	r4, r0
 8002cc8:	d106      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x18c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002cca:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002ccc:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002cce:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8002cd2:	ea20 0004 	bic.w	r0, r0, r4
 8002cd6:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002cd8:	680a      	ldr	r2, [r1, #0]
 8002cda:	2a00      	cmp	r2, #0
 8002cdc:	db01      	blt.n	8002ce2 <HAL_ADC_ConfigChannel+0x196>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cde:	2000      	movs	r0, #0
 8002ce0:	e74c      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ce2:	4918      	ldr	r1, [pc, #96]	; (8002d44 <HAL_ADC_ConfigChannel+0x1f8>)
 8002ce4:	6809      	ldr	r1, [r1, #0]
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ce6:	4818      	ldr	r0, [pc, #96]	; (8002d48 <HAL_ADC_ConfigChannel+0x1fc>)
 8002ce8:	4282      	cmp	r2, r0
 8002cea:	d007      	beq.n	8002cfc <HAL_ADC_ConfigChannel+0x1b0>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cec:	4817      	ldr	r0, [pc, #92]	; (8002d4c <HAL_ADC_ConfigChannel+0x200>)
 8002cee:	4282      	cmp	r2, r0
 8002cf0:	d00e      	beq.n	8002d10 <HAL_ADC_ConfigChannel+0x1c4>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cf2:	4817      	ldr	r0, [pc, #92]	; (8002d50 <HAL_ADC_ConfigChannel+0x204>)
 8002cf4:	4282      	cmp	r2, r0
 8002cf6:	d015      	beq.n	8002d24 <HAL_ADC_ConfigChannel+0x1d8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	e73f      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cfc:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d00:	4810      	ldr	r0, [pc, #64]	; (8002d44 <HAL_ADC_ConfigChannel+0x1f8>)
 8002d02:	6802      	ldr	r2, [r0, #0]
 8002d04:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002d08:	4311      	orrs	r1, r2
 8002d0a:	6001      	str	r1, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d0c:	2000      	movs	r0, #0
}
 8002d0e:	e735      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d10:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d14:	480b      	ldr	r0, [pc, #44]	; (8002d44 <HAL_ADC_ConfigChannel+0x1f8>)
 8002d16:	6801      	ldr	r1, [r0, #0]
 8002d18:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d20:	2000      	movs	r0, #0
}
 8002d22:	e72b      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d24:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d28:	4806      	ldr	r0, [pc, #24]	; (8002d44 <HAL_ADC_ConfigChannel+0x1f8>)
 8002d2a:	6801      	ldr	r1, [r0, #0]
 8002d2c:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002d30:	430a      	orrs	r2, r1
 8002d32:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d34:	2000      	movs	r0, #0
}
 8002d36:	e721      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x30>
 8002d38:	2000      	movs	r0, #0
 8002d3a:	e71f      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8002d3c:	2002      	movs	r0, #2
 8002d3e:	e720      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x36>
 8002d40:	80000004 	.word	0x80000004
 8002d44:	40012708 	.word	0x40012708
 8002d48:	b0001000 	.word	0xb0001000
 8002d4c:	b8004000 	.word	0xb8004000
 8002d50:	b4002000 	.word	0xb4002000
 8002d54:	20000058 	.word	0x20000058
 8002d58:	053e2d63 	.word	0x053e2d63

08002d5c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002d5c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002d5e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	f012 0f04 	tst.w	r2, #4
 8002d66:	d02a      	beq.n	8002dbe <ADC_ConversionStop+0x62>
 8002d68:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	f012 0f02 	tst.w	r2, #2
 8002d70:	d107      	bne.n	8002d82 <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d78:	f022 0217 	bic.w	r2, r2, #23
 8002d7c:	f042 0210 	orr.w	r2, r2, #16
 8002d80:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d82:	f7ff fb03 	bl	800238c <HAL_GetTick>
 8002d86:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002d88:	6823      	ldr	r3, [r4, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f013 0f04 	tst.w	r3, #4
 8002d90:	d013      	beq.n	8002dba <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002d92:	f7ff fafb 	bl	800238c <HAL_GetTick>
 8002d96:	1b43      	subs	r3, r0, r5
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d9f5      	bls.n	8002d88 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002d9c:	6823      	ldr	r3, [r4, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f013 0f04 	tst.w	r3, #4
 8002da4:	d0f0      	beq.n	8002d88 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002da8:	f043 0310 	orr.w	r3, r3, #16
 8002dac:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dae:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8002db6:	2001      	movs	r0, #1
 8002db8:	e002      	b.n	8002dc0 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002dba:	2000      	movs	r0, #0
 8002dbc:	e000      	b.n	8002dc0 <ADC_ConversionStop+0x64>
 8002dbe:	2000      	movs	r0, #0
}
 8002dc0:	bd38      	pop	{r3, r4, r5, pc}
	...

08002dc4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002dc4:	b530      	push	{r4, r5, lr}
 8002dc6:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dcc:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	f012 0f01 	tst.w	r2, #1
 8002dd4:	d159      	bne.n	8002e8a <ADC_Enable+0xc6>
 8002dd6:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002dd8:	6899      	ldr	r1, [r3, #8]
 8002dda:	4a2d      	ldr	r2, [pc, #180]	; (8002e90 <ADC_Enable+0xcc>)
 8002ddc:	4211      	tst	r1, r2
 8002dde:	d11b      	bne.n	8002e18 <ADC_Enable+0x54>
  MODIFY_REG(ADCx->CR,
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002de6:	f022 0217 	bic.w	r2, r2, #23
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002df0:	4b28      	ldr	r3, [pc, #160]	; (8002e94 <ADC_Enable+0xd0>)
 8002df2:	681b      	ldr	r3, [r3, #0]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002df4:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8002df8:	d018      	beq.n	8002e2c <ADC_Enable+0x68>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dfa:	4b27      	ldr	r3, [pc, #156]	; (8002e98 <ADC_Enable+0xd4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	099b      	lsrs	r3, r3, #6
 8002e00:	4a26      	ldr	r2, [pc, #152]	; (8002e9c <ADC_Enable+0xd8>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	099b      	lsrs	r3, r3, #6
 8002e08:	3301      	adds	r3, #1
 8002e0a:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002e0c:	9b01      	ldr	r3, [sp, #4]
 8002e0e:	b16b      	cbz	r3, 8002e2c <ADC_Enable+0x68>
      {
        wait_loop_index--;
 8002e10:	9b01      	ldr	r3, [sp, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	9301      	str	r3, [sp, #4]
 8002e16:	e7f9      	b.n	8002e0c <ADC_Enable+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e18:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002e1a:	f043 0310 	orr.w	r3, r3, #16
 8002e1e:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e20:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8002e28:	2001      	movs	r0, #1
 8002e2a:	e02f      	b.n	8002e8c <ADC_Enable+0xc8>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002e2c:	7e63      	ldrb	r3, [r4, #25]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <ADC_Enable+0x72>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e32:	2000      	movs	r0, #0
 8002e34:	e02a      	b.n	8002e8c <ADC_Enable+0xc8>
      tickstart = HAL_GetTick();
 8002e36:	f7ff faa9 	bl	800238c <HAL_GetTick>
 8002e3a:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e3c:	6823      	ldr	r3, [r4, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	f012 0f01 	tst.w	r2, #1
 8002e44:	d11f      	bne.n	8002e86 <ADC_Enable+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	f012 0f01 	tst.w	r2, #1
 8002e4c:	d107      	bne.n	8002e5e <ADC_Enable+0x9a>
  MODIFY_REG(ADCx->CR,
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e54:	f022 0217 	bic.w	r2, r2, #23
 8002e58:	f042 0201 	orr.w	r2, r2, #1
 8002e5c:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e5e:	f7ff fa95 	bl	800238c <HAL_GetTick>
 8002e62:	1b40      	subs	r0, r0, r5
 8002e64:	2802      	cmp	r0, #2
 8002e66:	d9e9      	bls.n	8002e3c <ADC_Enable+0x78>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f013 0f01 	tst.w	r3, #1
 8002e70:	d1e4      	bne.n	8002e3c <ADC_Enable+0x78>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e74:	f043 0310 	orr.w	r3, r3, #16
 8002e78:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8002e82:	2001      	movs	r0, #1
 8002e84:	e002      	b.n	8002e8c <ADC_Enable+0xc8>
  return HAL_OK;
 8002e86:	2000      	movs	r0, #0
 8002e88:	e000      	b.n	8002e8c <ADC_Enable+0xc8>
 8002e8a:	2000      	movs	r0, #0
}
 8002e8c:	b003      	add	sp, #12
 8002e8e:	bd30      	pop	{r4, r5, pc}
 8002e90:	80000017 	.word	0x80000017
 8002e94:	40012708 	.word	0x40012708
 8002e98:	20000058 	.word	0x20000058
 8002e9c:	053e2d63 	.word	0x053e2d63

08002ea0 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ea0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f013 0f04 	tst.w	r3, #4
 8002ea8:	d128      	bne.n	8002efc <HAL_ADC_Start+0x5c>
{
 8002eaa:	b510      	push	{r4, lr}
 8002eac:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8002eae:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d024      	beq.n	8002f00 <HAL_ADC_Start+0x60>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8002ebc:	f7ff ff82 	bl	8002dc4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002ec0:	b9c0      	cbnz	r0, 8002ef4 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8002ec2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ec4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed0:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ed6:	6822      	ldr	r2, [r4, #0]
 8002ed8:	211c      	movs	r1, #28
 8002eda:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8002edc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002ee0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002ee2:	6893      	ldr	r3, [r2, #8]
 8002ee4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ee8:	f023 0317 	bic.w	r3, r3, #23
 8002eec:	f043 0304 	orr.w	r3, r3, #4
 8002ef0:	6093      	str	r3, [r2, #8]
}
 8002ef2:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8002efa:	e7fa      	b.n	8002ef2 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8002efc:	2002      	movs	r0, #2
}
 8002efe:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8002f00:	2002      	movs	r0, #2
 8002f02:	e7f6      	b.n	8002ef2 <HAL_ADC_Start+0x52>

08002f04 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002f04:	b538      	push	{r3, r4, r5, lr}
 8002f06:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f08:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002f0a:	6893      	ldr	r3, [r2, #8]
 8002f0c:	f013 0302 	ands.w	r3, r3, #2
 8002f10:	d000      	beq.n	8002f14 <ADC_Disable+0x10>
 8002f12:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f14:	6891      	ldr	r1, [r2, #8]
 8002f16:	f011 0f01 	tst.w	r1, #1
 8002f1a:	d039      	beq.n	8002f90 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d139      	bne.n	8002f94 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f20:	6893      	ldr	r3, [r2, #8]
 8002f22:	f003 0305 	and.w	r3, r3, #5
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d009      	beq.n	8002f3e <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f2c:	f043 0310 	orr.w	r3, r3, #16
 8002f30:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f32:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	e029      	b.n	8002f92 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 8002f3e:	6893      	ldr	r3, [r2, #8]
 8002f40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f44:	f023 0317 	bic.w	r3, r3, #23
 8002f48:	f043 0302 	orr.w	r3, r3, #2
 8002f4c:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	2203      	movs	r2, #3
 8002f52:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f54:	f7ff fa1a 	bl	800238c <HAL_GetTick>
 8002f58:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f013 0f01 	tst.w	r3, #1
 8002f62:	d013      	beq.n	8002f8c <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f64:	f7ff fa12 	bl	800238c <HAL_GetTick>
 8002f68:	1b40      	subs	r0, r0, r5
 8002f6a:	2802      	cmp	r0, #2
 8002f6c:	d9f5      	bls.n	8002f5a <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f6e:	6823      	ldr	r3, [r4, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f013 0f01 	tst.w	r3, #1
 8002f76:	d0f0      	beq.n	8002f5a <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f7a:	f043 0310 	orr.w	r3, r3, #16
 8002f7e:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f80:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8002f88:	2001      	movs	r0, #1
 8002f8a:	e002      	b.n	8002f92 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	e000      	b.n	8002f92 <ADC_Disable+0x8e>
 8002f90:	2000      	movs	r0, #0
}
 8002f92:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002f94:	2000      	movs	r0, #0
 8002f96:	e7fc      	b.n	8002f92 <ADC_Disable+0x8e>

08002f98 <HAL_ADC_DeInit>:
{
 8002f98:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 8002f9a:	2800      	cmp	r0, #0
 8002f9c:	d04a      	beq.n	8003034 <HAL_ADC_DeInit+0x9c>
 8002f9e:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002fa0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002fa2:	f043 0302 	orr.w	r3, r3, #2
 8002fa6:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002fa8:	f7ff fed8 	bl	8002d5c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002fac:	4606      	mov	r6, r0
 8002fae:	2800      	cmp	r0, #0
 8002fb0:	d031      	beq.n	8003016 <HAL_ADC_DeInit+0x7e>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8002fb2:	6822      	ldr	r2, [r4, #0]
 8002fb4:	6853      	ldr	r3, [r2, #4]
 8002fb6:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8002fba:	f023 0303 	bic.w	r3, r3, #3
 8002fbe:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8002fc0:	6823      	ldr	r3, [r4, #0]
 8002fc2:	f240 329f 	movw	r2, #927	; 0x39f
 8002fc6:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8002fc8:	6822      	ldr	r2, [r4, #0]
 8002fca:	68d1      	ldr	r1, [r2, #12]
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	; (8003038 <HAL_ADC_DeInit+0xa0>)
 8002fce:	400b      	ands	r3, r1
 8002fd0:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8002fd2:	6822      	ldr	r2, [r4, #0]
 8002fd4:	6913      	ldr	r3, [r2, #16]
 8002fd6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002fda:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8002fdc:	6822      	ldr	r2, [r4, #0]
 8002fde:	6953      	ldr	r3, [r2, #20]
 8002fe0:	f023 0307 	bic.w	r3, r3, #7
 8002fe4:	6153      	str	r3, [r2, #20]
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8002fe6:	6822      	ldr	r2, [r4, #0]
 8002fe8:	6a13      	ldr	r3, [r2, #32]
 8002fea:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8002fee:	6213      	str	r3, [r2, #32]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8002ff0:	6823      	ldr	r3, [r4, #0]
 8002ff2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ff4:	2500      	movs	r5, #0
 8002ff6:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8002ff8:	4a10      	ldr	r2, [pc, #64]	; (800303c <HAL_ADC_DeInit+0xa4>)
 8002ffa:	6813      	ldr	r3, [r2, #0]
 8002ffc:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003000:	6013      	str	r3, [r2, #0]
  HAL_ADC_MspDeInit(hadc);
 8003002:	4620      	mov	r0, r4
 8003004:	f7fe fa76 	bl	80014f4 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003008:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 800300a:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 800300c:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 800300e:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8003012:	4630      	mov	r0, r6
 8003014:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003016:	4620      	mov	r0, r4
 8003018:	f7ff ff74 	bl	8002f04 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800301c:	4606      	mov	r6, r0
 800301e:	b908      	cbnz	r0, 8003024 <HAL_ADC_DeInit+0x8c>
      hadc->State = HAL_ADC_STATE_READY;
 8003020:	2301      	movs	r3, #1
 8003022:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003024:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003026:	6893      	ldr	r3, [r2, #8]
 8003028:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800302c:	f023 0317 	bic.w	r3, r3, #23
 8003030:	6093      	str	r3, [r2, #8]
}
 8003032:	e7be      	b.n	8002fb2 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8003034:	2601      	movs	r6, #1
 8003036:	e7ec      	b.n	8003012 <HAL_ADC_DeInit+0x7a>
 8003038:	833e0200 	.word	0x833e0200
 800303c:	40012708 	.word	0x40012708

08003040 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003040:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003044:	2b01      	cmp	r3, #1
 8003046:	d019      	beq.n	800307c <HAL_ADC_Stop+0x3c>
{
 8003048:	b510      	push	{r4, lr}
 800304a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800304c:	2301      	movs	r3, #1
 800304e:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003052:	f7ff fe83 	bl	8002d5c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003056:	b118      	cbz	r0, 8003060 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8003058:	2300      	movs	r3, #0
 800305a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 800305e:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003060:	4620      	mov	r0, r4
 8003062:	f7ff ff4f 	bl	8002f04 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003066:	2800      	cmp	r0, #0
 8003068:	d1f6      	bne.n	8003058 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800306a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800306c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003070:	f023 0301 	bic.w	r3, r3, #1
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	65a3      	str	r3, [r4, #88]	; 0x58
 800307a:	e7ed      	b.n	8003058 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 800307c:	2002      	movs	r0, #2
}
 800307e:	4770      	bx	lr

08003080 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003080:	b530      	push	{r4, r5, lr}
 8003082:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003084:	2300      	movs	r3, #0
 8003086:	9301      	str	r3, [sp, #4]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003088:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 800308c:	2b01      	cmp	r3, #1
 800308e:	d045      	beq.n	800311c <HAL_ADCEx_Calibration_Start+0x9c>
 8003090:	4604      	mov	r4, r0
 8003092:	2301      	movs	r3, #1
 8003094:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003098:	f7ff ff34 	bl	8002f04 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800309c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	f012 0f01 	tst.w	r2, #1
 80030a4:	d008      	beq.n	80030b8 <HAL_ADCEx_Calibration_Start+0x38>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030a8:	f043 0310 	orr.w	r3, r3, #16
 80030ac:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80030ae:	2300      	movs	r3, #0
 80030b0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 80030b4:	b003      	add	sp, #12
 80030b6:	bd30      	pop	{r4, r5, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80030b8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80030ba:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 80030be:	f042 0202 	orr.w	r2, r2, #2
 80030c2:	65a2      	str	r2, [r4, #88]	; 0x58
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80030c4:	68dd      	ldr	r5, [r3, #12]
 80030c6:	f005 0503 	and.w	r5, r5, #3
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	f022 0203 	bic.w	r2, r2, #3
 80030d0:	60da      	str	r2, [r3, #12]
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 80030d2:	6821      	ldr	r1, [r4, #0]
 80030d4:	688b      	ldr	r3, [r1, #8]
 80030d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030da:	608b      	str	r3, [r1, #8]
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80030dc:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80030de:	6899      	ldr	r1, [r3, #8]
 80030e0:	2900      	cmp	r1, #0
 80030e2:	db09      	blt.n	80030f8 <HAL_ADCEx_Calibration_Start+0x78>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	432a      	orrs	r2, r5
 80030e8:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80030ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030ec:	f023 0303 	bic.w	r3, r3, #3
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	65a3      	str	r3, [r4, #88]	; 0x58
 80030f6:	e7da      	b.n	80030ae <HAL_ADCEx_Calibration_Start+0x2e>
      wait_loop_index++;
 80030f8:	9b01      	ldr	r3, [sp, #4]
 80030fa:	3301      	adds	r3, #1
 80030fc:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80030fe:	9b01      	ldr	r3, [sp, #4]
 8003100:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003104:	d3ea      	bcc.n	80030dc <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 8003106:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003108:	f023 0312 	bic.w	r3, r3, #18
 800310c:	f043 0310 	orr.w	r3, r3, #16
 8003110:	65a3      	str	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hadc);
 8003112:	2300      	movs	r3, #0
 8003114:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8003118:	2001      	movs	r0, #1
 800311a:	e7cb      	b.n	80030b4 <HAL_ADCEx_Calibration_Start+0x34>
  __HAL_LOCK(hadc);
 800311c:	2002      	movs	r0, #2
 800311e:	e7c9      	b.n	80030b4 <HAL_ADCEx_Calibration_Start+0x34>

08003120 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003120:	4a07      	ldr	r2, [pc, #28]	; (8003140 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003122:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003124:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003128:	041b      	lsls	r3, r3, #16
 800312a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800312c:	0200      	lsls	r0, r0, #8
 800312e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003132:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800313c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800313e:	4770      	bx	lr
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003144:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003146:	4b17      	ldr	r3, [pc, #92]	; (80031a4 <HAL_NVIC_SetPriority+0x60>)
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800314e:	f1c3 0407 	rsb	r4, r3, #7
 8003152:	2c04      	cmp	r4, #4
 8003154:	bf28      	it	cs
 8003156:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003158:	1d1d      	adds	r5, r3, #4
 800315a:	2d06      	cmp	r5, #6
 800315c:	d918      	bls.n	8003190 <HAL_NVIC_SetPriority+0x4c>
 800315e:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003160:	f04f 35ff 	mov.w	r5, #4294967295
 8003164:	fa05 f404 	lsl.w	r4, r5, r4
 8003168:	ea21 0104 	bic.w	r1, r1, r4
 800316c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800316e:	fa05 f303 	lsl.w	r3, r5, r3
 8003172:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003176:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003178:	2800      	cmp	r0, #0
 800317a:	db0b      	blt.n	8003194 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800317c:	0109      	lsls	r1, r1, #4
 800317e:	b2c9      	uxtb	r1, r1
 8003180:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003184:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003188:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800318c:	bc30      	pop	{r4, r5}
 800318e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003190:	2300      	movs	r3, #0
 8003192:	e7e5      	b.n	8003160 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003194:	f000 000f 	and.w	r0, r0, #15
 8003198:	0109      	lsls	r1, r1, #4
 800319a:	b2c9      	uxtb	r1, r1
 800319c:	4b02      	ldr	r3, [pc, #8]	; (80031a8 <HAL_NVIC_SetPriority+0x64>)
 800319e:	5419      	strb	r1, [r3, r0]
 80031a0:	e7f4      	b.n	800318c <HAL_NVIC_SetPriority+0x48>
 80031a2:	bf00      	nop
 80031a4:	e000ed00 	.word	0xe000ed00
 80031a8:	e000ed14 	.word	0xe000ed14

080031ac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80031ac:	2800      	cmp	r0, #0
 80031ae:	db07      	blt.n	80031c0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031b0:	f000 021f 	and.w	r2, r0, #31
 80031b4:	0940      	lsrs	r0, r0, #5
 80031b6:	2301      	movs	r3, #1
 80031b8:	4093      	lsls	r3, r2
 80031ba:	4a02      	ldr	r2, [pc, #8]	; (80031c4 <HAL_NVIC_EnableIRQ+0x18>)
 80031bc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	e000e100 	.word	0xe000e100

080031c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80031c8:	6803      	ldr	r3, [r0, #0]
 80031ca:	4a14      	ldr	r2, [pc, #80]	; (800321c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d816      	bhi.n	80031fe <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80031d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80031d2:	f022 0203 	bic.w	r2, r2, #3
 80031d6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80031da:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 80031de:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	3b08      	subs	r3, #8
 80031e4:	4a0e      	ldr	r2, [pc, #56]	; (8003220 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80031ec:	4a0d      	ldr	r2, [pc, #52]	; (8003224 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 80031ee:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	2201      	movs	r2, #1
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	6503      	str	r3, [r0, #80]	; 0x50
}
 80031fc:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80031fe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003200:	f022 0103 	bic.w	r1, r2, #3
 8003204:	4a08      	ldr	r2, [pc, #32]	; (8003228 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8003206:	440a      	add	r2, r1
 8003208:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800320a:	b2db      	uxtb	r3, r3
 800320c:	3b08      	subs	r3, #8
 800320e:	4a04      	ldr	r2, [pc, #16]	; (8003220 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003210:	fba2 2303 	umull	r2, r3, r2, r3
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	3307      	adds	r3, #7
 8003218:	e7e8      	b.n	80031ec <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 800321a:	bf00      	nop
 800321c:	40020407 	.word	0x40020407
 8003220:	cccccccd 	.word	0xcccccccd
 8003224:	40020880 	.word	0x40020880
 8003228:	4002081c 	.word	0x4002081c

0800322c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800322c:	6843      	ldr	r3, [r0, #4]
 800322e:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003232:	4a07      	ldr	r2, [pc, #28]	; (8003250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8003234:	441a      	add	r2, r3
 8003236:	0092      	lsls	r2, r2, #2
 8003238:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800323a:	4a06      	ldr	r2, [pc, #24]	; (8003254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 800323c:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800323e:	3b01      	subs	r3, #1
 8003240:	f003 0303 	and.w	r3, r3, #3
 8003244:	2201      	movs	r2, #1
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	1000823f 	.word	0x1000823f
 8003254:	40020940 	.word	0x40020940

08003258 <HAL_DMA_Init>:
  if (hdma == NULL)
 8003258:	2800      	cmp	r0, #0
 800325a:	d060      	beq.n	800331e <HAL_DMA_Init+0xc6>
{
 800325c:	b510      	push	{r4, lr}
 800325e:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003260:	6802      	ldr	r2, [r0, #0]
 8003262:	4b30      	ldr	r3, [pc, #192]	; (8003324 <HAL_DMA_Init+0xcc>)
 8003264:	429a      	cmp	r2, r3
 8003266:	d842      	bhi.n	80032ee <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003268:	4b2f      	ldr	r3, [pc, #188]	; (8003328 <HAL_DMA_Init+0xd0>)
 800326a:	4413      	add	r3, r2
 800326c:	492f      	ldr	r1, [pc, #188]	; (800332c <HAL_DMA_Init+0xd4>)
 800326e:	fba1 1303 	umull	r1, r3, r1, r3
 8003272:	091b      	lsrs	r3, r3, #4
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003278:	4b2d      	ldr	r3, [pc, #180]	; (8003330 <HAL_DMA_Init+0xd8>)
 800327a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800327c:	2302      	movs	r3, #2
 800327e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003282:	6813      	ldr	r3, [r2, #0]
 8003284:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328c:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800328e:	6821      	ldr	r1, [r4, #0]
 8003290:	680a      	ldr	r2, [r1, #0]
 8003292:	68a3      	ldr	r3, [r4, #8]
 8003294:	68e0      	ldr	r0, [r4, #12]
 8003296:	4303      	orrs	r3, r0
 8003298:	6920      	ldr	r0, [r4, #16]
 800329a:	4303      	orrs	r3, r0
 800329c:	6960      	ldr	r0, [r4, #20]
 800329e:	4303      	orrs	r3, r0
 80032a0:	69a0      	ldr	r0, [r4, #24]
 80032a2:	4303      	orrs	r3, r0
 80032a4:	69e0      	ldr	r0, [r4, #28]
 80032a6:	4303      	orrs	r3, r0
 80032a8:	6a20      	ldr	r0, [r4, #32]
 80032aa:	4303      	orrs	r3, r0
 80032ac:	4313      	orrs	r3, r2
 80032ae:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80032b0:	4620      	mov	r0, r4
 80032b2:	f7ff ff89 	bl	80031c8 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80032b6:	68a3      	ldr	r3, [r4, #8]
 80032b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032bc:	d022      	beq.n	8003304 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80032be:	6863      	ldr	r3, [r4, #4]
 80032c0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80032c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032c6:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032c8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80032ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80032cc:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80032ce:	6863      	ldr	r3, [r4, #4]
 80032d0:	3b01      	subs	r3, #1
 80032d2:	2b03      	cmp	r3, #3
 80032d4:	d919      	bls.n	800330a <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80032da:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80032dc:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032de:	2000      	movs	r0, #0
 80032e0:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80032e2:	2301      	movs	r3, #1
 80032e4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80032e8:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80032ec:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80032ee:	4b11      	ldr	r3, [pc, #68]	; (8003334 <HAL_DMA_Init+0xdc>)
 80032f0:	4413      	add	r3, r2
 80032f2:	490e      	ldr	r1, [pc, #56]	; (800332c <HAL_DMA_Init+0xd4>)
 80032f4:	fba1 1303 	umull	r1, r3, r1, r3
 80032f8:	091b      	lsrs	r3, r3, #4
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80032fe:	4b0e      	ldr	r3, [pc, #56]	; (8003338 <HAL_DMA_Init+0xe0>)
 8003300:	6403      	str	r3, [r0, #64]	; 0x40
 8003302:	e7bb      	b.n	800327c <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003304:	2300      	movs	r3, #0
 8003306:	6063      	str	r3, [r4, #4]
 8003308:	e7d9      	b.n	80032be <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800330a:	4620      	mov	r0, r4
 800330c:	f7ff ff8e 	bl	800322c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003310:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003316:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003318:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800331a:	605a      	str	r2, [r3, #4]
 800331c:	e7df      	b.n	80032de <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 800331e:	2001      	movs	r0, #1
}
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40020407 	.word	0x40020407
 8003328:	bffdfff8 	.word	0xbffdfff8
 800332c:	cccccccd 	.word	0xcccccccd
 8003330:	40020000 	.word	0x40020000
 8003334:	bffdfbf8 	.word	0xbffdfbf8
 8003338:	40020400 	.word	0x40020400

0800333c <HAL_DMA_Abort>:
  if (NULL == hdma)
 800333c:	4603      	mov	r3, r0
 800333e:	2800      	cmp	r0, #0
 8003340:	d034      	beq.n	80033ac <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003342:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	2a02      	cmp	r2, #2
 800334a:	d006      	beq.n	800335a <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800334c:	2204      	movs	r2, #4
 800334e:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003350:	2200      	movs	r2, #0
 8003352:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8003356:	2001      	movs	r0, #1
 8003358:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800335a:	6801      	ldr	r1, [r0, #0]
 800335c:	680a      	ldr	r2, [r1, #0]
 800335e:	f022 020e 	bic.w	r2, r2, #14
 8003362:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003364:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003366:	680a      	ldr	r2, [r1, #0]
 8003368:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800336c:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800336e:	6801      	ldr	r1, [r0, #0]
 8003370:	680a      	ldr	r2, [r1, #0]
 8003372:	f022 0201 	bic.w	r2, r2, #1
 8003376:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003378:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800337a:	f002 011c 	and.w	r1, r2, #28
 800337e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8003380:	2201      	movs	r2, #1
 8003382:	408a      	lsls	r2, r1
 8003384:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003386:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003388:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800338a:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800338c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800338e:	b132      	cbz	r2, 800339e <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003390:	6811      	ldr	r1, [r2, #0]
 8003392:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003396:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003398:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800339a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800339c:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80033a4:	2000      	movs	r0, #0
 80033a6:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 80033aa:	4770      	bx	lr
    return HAL_ERROR;
 80033ac:	2001      	movs	r0, #1
}
 80033ae:	4770      	bx	lr

080033b0 <HAL_DMA_Abort_IT>:
{
 80033b0:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80033b2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d003      	beq.n	80033c4 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033bc:	2304      	movs	r3, #4
 80033be:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80033c0:	2001      	movs	r0, #1
}
 80033c2:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033c4:	6802      	ldr	r2, [r0, #0]
 80033c6:	6813      	ldr	r3, [r2, #0]
 80033c8:	f023 030e 	bic.w	r3, r3, #14
 80033cc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80033ce:	6802      	ldr	r2, [r0, #0]
 80033d0:	6813      	ldr	r3, [r2, #0]
 80033d2:	f023 0301 	bic.w	r3, r3, #1
 80033d6:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033d8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80033da:	6813      	ldr	r3, [r2, #0]
 80033dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033e0:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80033e4:	f003 021c 	and.w	r2, r3, #28
 80033e8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80033ea:	2301      	movs	r3, #1
 80033ec:	4093      	lsls	r3, r2
 80033ee:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033f0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80033f2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80033f4:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80033f6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80033f8:	b133      	cbz	r3, 8003408 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003400:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003402:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003404:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003406:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003408:	2301      	movs	r3, #1
 800340a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800340e:	2300      	movs	r3, #0
 8003410:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8003414:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003416:	b113      	cbz	r3, 800341e <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8003418:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800341a:	2000      	movs	r0, #0
 800341c:	e7d1      	b.n	80033c2 <HAL_DMA_Abort_IT+0x12>
 800341e:	2000      	movs	r0, #0
 8003420:	e7cf      	b.n	80033c2 <HAL_DMA_Abort_IT+0x12>
	...

08003424 <HAL_DMA_IRQHandler>:
{
 8003424:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003426:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003428:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800342a:	6804      	ldr	r4, [r0, #0]
 800342c:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800342e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003430:	f003 031c 	and.w	r3, r3, #28
 8003434:	2204      	movs	r2, #4
 8003436:	409a      	lsls	r2, r3
 8003438:	420a      	tst	r2, r1
 800343a:	d015      	beq.n	8003468 <HAL_DMA_IRQHandler+0x44>
 800343c:	f015 0f04 	tst.w	r5, #4
 8003440:	d012      	beq.n	8003468 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003442:	6823      	ldr	r3, [r4, #0]
 8003444:	f013 0f20 	tst.w	r3, #32
 8003448:	d103      	bne.n	8003452 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	f023 0304 	bic.w	r3, r3, #4
 8003450:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003452:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003454:	f003 021c 	and.w	r2, r3, #28
 8003458:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800345a:	2304      	movs	r3, #4
 800345c:	4093      	lsls	r3, r2
 800345e:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003460:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003462:	b103      	cbz	r3, 8003466 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8003464:	4798      	blx	r3
}
 8003466:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003468:	2202      	movs	r2, #2
 800346a:	409a      	lsls	r2, r3
 800346c:	420a      	tst	r2, r1
 800346e:	d028      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x9e>
 8003470:	f015 0f02 	tst.w	r5, #2
 8003474:	d025      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	f013 0f20 	tst.w	r3, #32
 800347c:	d106      	bne.n	800348c <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	f023 030a 	bic.w	r3, r3, #10
 8003484:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8003486:	2301      	movs	r3, #1
 8003488:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800348c:	6802      	ldr	r2, [r0, #0]
 800348e:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <HAL_DMA_IRQHandler+0xdc>)
 8003490:	429a      	cmp	r2, r3
 8003492:	d90e      	bls.n	80034b2 <HAL_DMA_IRQHandler+0x8e>
 8003494:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003496:	f003 021c 	and.w	r2, r3, #28
 800349a:	2302      	movs	r3, #2
 800349c:	4093      	lsls	r3, r2
 800349e:	4a19      	ldr	r2, [pc, #100]	; (8003504 <HAL_DMA_IRQHandler+0xe0>)
 80034a0:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 80034a2:	2300      	movs	r3, #0
 80034a4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 80034a8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0db      	beq.n	8003466 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 80034ae:	4798      	blx	r3
 80034b0:	e7d9      	b.n	8003466 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80034b2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80034b4:	f003 021c 	and.w	r2, r3, #28
 80034b8:	2302      	movs	r3, #2
 80034ba:	4093      	lsls	r3, r2
 80034bc:	4a12      	ldr	r2, [pc, #72]	; (8003508 <HAL_DMA_IRQHandler+0xe4>)
 80034be:	6053      	str	r3, [r2, #4]
 80034c0:	e7ef      	b.n	80034a2 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80034c2:	2208      	movs	r2, #8
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	420b      	tst	r3, r1
 80034ca:	d0cc      	beq.n	8003466 <HAL_DMA_IRQHandler+0x42>
 80034cc:	f015 0f08 	tst.w	r5, #8
 80034d0:	d0c9      	beq.n	8003466 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	f023 030e 	bic.w	r3, r3, #14
 80034d8:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034da:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80034dc:	f003 031c 	and.w	r3, r3, #28
 80034e0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80034e2:	2201      	movs	r2, #1
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034ea:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80034ec:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80034f0:	2300      	movs	r3, #0
 80034f2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80034f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0b4      	beq.n	8003466 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80034fc:	4798      	blx	r3
  return;
 80034fe:	e7b2      	b.n	8003466 <HAL_DMA_IRQHandler+0x42>
 8003500:	40020080 	.word	0x40020080
 8003504:	40020400 	.word	0x40020400
 8003508:	40020000 	.word	0x40020000

0800350c <HAL_DMA_GetState>:
  return hdma->State;
 800350c:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 8003510:	4770      	bx	lr

08003512 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8003512:	b178      	cbz	r0, 8003534 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8003514:	6803      	ldr	r3, [r0, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003518:	f011 0f10 	tst.w	r1, #16
 800351c:	d004      	beq.n	8003528 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 800351e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003522:	d004      	beq.n	800352e <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003524:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003528:	601a      	str	r2, [r3, #0]
  return status;
 800352a:	2000      	movs	r0, #0
 800352c:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 800352e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003532:	e7f9      	b.n	8003528 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8003534:	2001      	movs	r0, #1
}
 8003536:	4770      	bx	lr

08003538 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003538:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t position = 0x00u;
 800353a:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800353c:	e05f      	b.n	80035fe <HAL_GPIO_Init+0xc6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800353e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003540:	005f      	lsls	r7, r3, #1
 8003542:	2503      	movs	r5, #3
 8003544:	40bd      	lsls	r5, r7
 8003546:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800354a:	68cd      	ldr	r5, [r1, #12]
 800354c:	40bd      	lsls	r5, r7
 800354e:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8003550:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003552:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003554:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003558:	684d      	ldr	r5, [r1, #4]
 800355a:	f3c5 1400 	ubfx	r4, r5, #4, #1
 800355e:	409c      	lsls	r4, r3
 8003560:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8003562:	6044      	str	r4, [r0, #4]
 8003564:	e059      	b.n	800361a <HAL_GPIO_Init+0xe2>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003566:	08dd      	lsrs	r5, r3, #3
 8003568:	3508      	adds	r5, #8
 800356a:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800356e:	f003 0407 	and.w	r4, r3, #7
 8003572:	00a6      	lsls	r6, r4, #2
 8003574:	240f      	movs	r4, #15
 8003576:	40b4      	lsls	r4, r6
 8003578:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800357c:	690c      	ldr	r4, [r1, #16]
 800357e:	40b4      	lsls	r4, r6
 8003580:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 8003582:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8003586:	e05c      	b.n	8003642 <HAL_GPIO_Init+0x10a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003588:	2402      	movs	r4, #2
 800358a:	e000      	b.n	800358e <HAL_GPIO_Init+0x56>
 800358c:	2400      	movs	r4, #0
 800358e:	40b4      	lsls	r4, r6
 8003590:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003592:	3502      	adds	r5, #2
 8003594:	4e41      	ldr	r6, [pc, #260]	; (800369c <HAL_GPIO_Init+0x164>)
 8003596:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800359a:	4c41      	ldr	r4, [pc, #260]	; (80036a0 <HAL_GPIO_Init+0x168>)
 800359c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80035a0:	43d4      	mvns	r4, r2
 80035a2:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035a6:	684f      	ldr	r7, [r1, #4]
 80035a8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80035ac:	d001      	beq.n	80035b2 <HAL_GPIO_Init+0x7a>
        {
          temp |= iocurrent;
 80035ae:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80035b2:	4d3b      	ldr	r5, [pc, #236]	; (80036a0 <HAL_GPIO_Init+0x168>)
 80035b4:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80035b8:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80035bc:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035c0:	684f      	ldr	r7, [r1, #4]
 80035c2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80035c6:	d001      	beq.n	80035cc <HAL_GPIO_Init+0x94>
        {
          temp |= iocurrent;
 80035c8:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80035cc:	4d34      	ldr	r5, [pc, #208]	; (80036a0 <HAL_GPIO_Init+0x168>)
 80035ce:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035d2:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 80035d4:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035d8:	684f      	ldr	r7, [r1, #4]
 80035da:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80035de:	d001      	beq.n	80035e4 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 80035e0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80035e4:	4d2e      	ldr	r5, [pc, #184]	; (80036a0 <HAL_GPIO_Init+0x168>)
 80035e6:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80035e8:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80035ea:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035ec:	684e      	ldr	r6, [r1, #4]
 80035ee:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80035f2:	d001      	beq.n	80035f8 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 80035f4:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80035f8:	4a29      	ldr	r2, [pc, #164]	; (80036a0 <HAL_GPIO_Init+0x168>)
 80035fa:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 80035fc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035fe:	680a      	ldr	r2, [r1, #0]
 8003600:	fa32 f403 	lsrs.w	r4, r2, r3
 8003604:	d048      	beq.n	8003698 <HAL_GPIO_Init+0x160>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003606:	2401      	movs	r4, #1
 8003608:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 800360a:	4022      	ands	r2, r4
 800360c:	d0f6      	beq.n	80035fc <HAL_GPIO_Init+0xc4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800360e:	684d      	ldr	r5, [r1, #4]
 8003610:	f005 0503 	and.w	r5, r5, #3
 8003614:	3d01      	subs	r5, #1
 8003616:	2d01      	cmp	r5, #1
 8003618:	d991      	bls.n	800353e <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800361a:	684c      	ldr	r4, [r1, #4]
 800361c:	f004 0403 	and.w	r4, r4, #3
 8003620:	2c03      	cmp	r4, #3
 8003622:	d009      	beq.n	8003638 <HAL_GPIO_Init+0x100>
        temp = GPIOx->PUPDR;
 8003624:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003626:	005e      	lsls	r6, r3, #1
 8003628:	2403      	movs	r4, #3
 800362a:	40b4      	lsls	r4, r6
 800362c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003630:	688c      	ldr	r4, [r1, #8]
 8003632:	40b4      	lsls	r4, r6
 8003634:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8003636:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003638:	684c      	ldr	r4, [r1, #4]
 800363a:	f004 0403 	and.w	r4, r4, #3
 800363e:	2c02      	cmp	r4, #2
 8003640:	d091      	beq.n	8003566 <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8003642:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003644:	005e      	lsls	r6, r3, #1
 8003646:	2403      	movs	r4, #3
 8003648:	40b4      	lsls	r4, r6
 800364a:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800364e:	684c      	ldr	r4, [r1, #4]
 8003650:	f004 0403 	and.w	r4, r4, #3
 8003654:	40b4      	lsls	r4, r6
 8003656:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8003658:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800365a:	684c      	ldr	r4, [r1, #4]
 800365c:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8003660:	d0cc      	beq.n	80035fc <HAL_GPIO_Init+0xc4>
        temp = SYSCFG->EXTICR[position >> 2u];
 8003662:	089d      	lsrs	r5, r3, #2
 8003664:	1cae      	adds	r6, r5, #2
 8003666:	4c0d      	ldr	r4, [pc, #52]	; (800369c <HAL_GPIO_Init+0x164>)
 8003668:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800366c:	f003 0403 	and.w	r4, r3, #3
 8003670:	00a6      	lsls	r6, r4, #2
 8003672:	2407      	movs	r4, #7
 8003674:	40b4      	lsls	r4, r6
 8003676:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800367a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800367e:	d085      	beq.n	800358c <HAL_GPIO_Init+0x54>
 8003680:	4c08      	ldr	r4, [pc, #32]	; (80036a4 <HAL_GPIO_Init+0x16c>)
 8003682:	42a0      	cmp	r0, r4
 8003684:	d006      	beq.n	8003694 <HAL_GPIO_Init+0x15c>
 8003686:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800368a:	42a0      	cmp	r0, r4
 800368c:	f43f af7c 	beq.w	8003588 <HAL_GPIO_Init+0x50>
 8003690:	2407      	movs	r4, #7
 8003692:	e77c      	b.n	800358e <HAL_GPIO_Init+0x56>
 8003694:	2401      	movs	r4, #1
 8003696:	e77a      	b.n	800358e <HAL_GPIO_Init+0x56>
  }
}
 8003698:	bcf0      	pop	{r4, r5, r6, r7}
 800369a:	4770      	bx	lr
 800369c:	40010000 	.word	0x40010000
 80036a0:	58000800 	.word	0x58000800
 80036a4:	48000400 	.word	0x48000400

080036a8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80036a8:	6903      	ldr	r3, [r0, #16]
 80036aa:	4219      	tst	r1, r3
 80036ac:	d001      	beq.n	80036b2 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80036ae:	2001      	movs	r0, #1
 80036b0:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036b2:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80036b4:	4770      	bx	lr

080036b6 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036b6:	b10a      	cbz	r2, 80036bc <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036b8:	6181      	str	r1, [r0, #24]
 80036ba:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036bc:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80036be:	4770      	bx	lr

080036c0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036c0:	6803      	ldr	r3, [r0, #0]
 80036c2:	699a      	ldr	r2, [r3, #24]
 80036c4:	f012 0f02 	tst.w	r2, #2
 80036c8:	d001      	beq.n	80036ce <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036ca:	2200      	movs	r2, #0
 80036cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036ce:	6803      	ldr	r3, [r0, #0]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	f012 0f01 	tst.w	r2, #1
 80036d6:	d103      	bne.n	80036e0 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	619a      	str	r2, [r3, #24]
  }
}
 80036e0:	4770      	bx	lr

080036e2 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80036e2:	f011 0f01 	tst.w	r1, #1
 80036e6:	d009      	beq.n	80036fc <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036e8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80036ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036f0:	2b28      	cmp	r3, #40	; 0x28
 80036f2:	d001      	beq.n	80036f8 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036f4:	23f2      	movs	r3, #242	; 0xf2
 80036f6:	e002      	b.n	80036fe <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80036f8:	2342      	movs	r3, #66	; 0x42
 80036fa:	e000      	b.n	80036fe <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 80036fc:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80036fe:	f011 0f02 	tst.w	r1, #2
 8003702:	d028      	beq.n	8003756 <I2C_Disable_IRQ+0x74>
{
 8003704:	b410      	push	{r4}
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003706:	f043 0444 	orr.w	r4, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800370a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800370e:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8003712:	2a28      	cmp	r2, #40	; 0x28
 8003714:	d011      	beq.n	800373a <I2C_Disable_IRQ+0x58>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003716:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800371a:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 800371e:	d10e      	bne.n	800373e <I2C_Disable_IRQ+0x5c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003720:	2910      	cmp	r1, #16
 8003722:	d00f      	beq.n	8003744 <I2C_Disable_IRQ+0x62>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003724:	2920      	cmp	r1, #32
 8003726:	d010      	beq.n	800374a <I2C_Disable_IRQ+0x68>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003728:	2940      	cmp	r1, #64	; 0x40
 800372a:	d011      	beq.n	8003750 <I2C_Disable_IRQ+0x6e>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800372c:	6801      	ldr	r1, [r0, #0]
 800372e:	680a      	ldr	r2, [r1, #0]
 8003730:	ea22 0303 	bic.w	r3, r2, r3
 8003734:	600b      	str	r3, [r1, #0]
}
 8003736:	bc10      	pop	{r4}
 8003738:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800373a:	4623      	mov	r3, r4
 800373c:	e7ed      	b.n	800371a <I2C_Disable_IRQ+0x38>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800373e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003742:	e7ed      	b.n	8003720 <I2C_Disable_IRQ+0x3e>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003744:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003748:	e7ec      	b.n	8003724 <I2C_Disable_IRQ+0x42>
    tmpisr |= I2C_IT_STOPI;
 800374a:	f043 0320 	orr.w	r3, r3, #32
 800374e:	e7eb      	b.n	8003728 <I2C_Disable_IRQ+0x46>
    tmpisr |= I2C_IT_TCI;
 8003750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003754:	e7ea      	b.n	800372c <I2C_Disable_IRQ+0x4a>
  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003756:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 800375a:	d10b      	bne.n	8003774 <I2C_Disable_IRQ+0x92>
  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800375c:	2910      	cmp	r1, #16
 800375e:	d00c      	beq.n	800377a <I2C_Disable_IRQ+0x98>
  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003760:	2920      	cmp	r1, #32
 8003762:	d00d      	beq.n	8003780 <I2C_Disable_IRQ+0x9e>
  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003764:	2940      	cmp	r1, #64	; 0x40
 8003766:	d00e      	beq.n	8003786 <I2C_Disable_IRQ+0xa4>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003768:	6801      	ldr	r1, [r0, #0]
 800376a:	680a      	ldr	r2, [r1, #0]
 800376c:	ea22 0303 	bic.w	r3, r2, r3
 8003770:	600b      	str	r3, [r1, #0]
 8003772:	4770      	bx	lr
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003774:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003778:	e7f0      	b.n	800375c <I2C_Disable_IRQ+0x7a>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800377a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800377e:	e7ef      	b.n	8003760 <I2C_Disable_IRQ+0x7e>
    tmpisr |= I2C_IT_STOPI;
 8003780:	f043 0320 	orr.w	r3, r3, #32
 8003784:	e7ee      	b.n	8003764 <I2C_Disable_IRQ+0x82>
    tmpisr |= I2C_IT_TCI;
 8003786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800378a:	e7ed      	b.n	8003768 <I2C_Disable_IRQ+0x86>

0800378c <HAL_I2C_EV_IRQHandler>:
{
 800378c:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800378e:	6803      	ldr	r3, [r0, #0]
 8003790:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003792:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8003794:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003796:	b103      	cbz	r3, 800379a <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8003798:	4798      	blx	r3
}
 800379a:	bd08      	pop	{r3, pc}

0800379c <HAL_I2C_SlaveTxCpltCallback>:
}
 800379c:	4770      	bx	lr

0800379e <HAL_I2C_SlaveRxCpltCallback>:
}
 800379e:	4770      	bx	lr

080037a0 <I2C_ITSlaveSeqCplt>:
{
 80037a0:	b510      	push	{r4, lr}
 80037a2:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80037a4:	6803      	ldr	r3, [r0, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a8:	2100      	movs	r1, #0
 80037aa:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80037ae:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80037b2:	d00e      	beq.n	80037d2 <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037ba:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80037bc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b29      	cmp	r3, #41	; 0x29
 80037c4:	d00d      	beq.n	80037e2 <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80037c6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b2a      	cmp	r3, #42	; 0x2a
 80037ce:	d018      	beq.n	8003802 <I2C_ITSlaveSeqCplt+0x62>
}
 80037d0:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80037d2:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80037d6:	d0f1      	beq.n	80037bc <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	e7ec      	b.n	80037bc <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80037e2:	2328      	movs	r3, #40	; 0x28
 80037e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80037e8:	2321      	movs	r3, #33	; 0x21
 80037ea:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80037ec:	2101      	movs	r1, #1
 80037ee:	4620      	mov	r0, r4
 80037f0:	f7ff ff77 	bl	80036e2 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80037f4:	2300      	movs	r3, #0
 80037f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80037fa:	4620      	mov	r0, r4
 80037fc:	f7ff ffce 	bl	800379c <HAL_I2C_SlaveTxCpltCallback>
 8003800:	e7e6      	b.n	80037d0 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003802:	2328      	movs	r3, #40	; 0x28
 8003804:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003808:	2322      	movs	r3, #34	; 0x22
 800380a:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800380c:	2102      	movs	r1, #2
 800380e:	4620      	mov	r0, r4
 8003810:	f7ff ff67 	bl	80036e2 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003814:	2300      	movs	r3, #0
 8003816:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800381a:	4620      	mov	r0, r4
 800381c:	f7ff ffbf 	bl	800379e <HAL_I2C_SlaveRxCpltCallback>
}
 8003820:	e7d6      	b.n	80037d0 <I2C_ITSlaveSeqCplt+0x30>

08003822 <HAL_I2C_AddrCallback>:
}
 8003822:	4770      	bx	lr

08003824 <I2C_ITAddrCplt>:
{
 8003824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003826:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003828:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800382c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003830:	2b28      	cmp	r3, #40	; 0x28
 8003832:	d006      	beq.n	8003842 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003834:	6803      	ldr	r3, [r0, #0]
 8003836:	2208      	movs	r2, #8
 8003838:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800383a:	2300      	movs	r3, #0
 800383c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8003840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8003842:	6803      	ldr	r3, [r0, #0]
 8003844:	699e      	ldr	r6, [r3, #24]
 8003846:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800384a:	699a      	ldr	r2, [r3, #24]
 800384c:	0c12      	lsrs	r2, r2, #16
 800384e:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003858:	68df      	ldr	r7, [r3, #12]
 800385a:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800385e:	68c1      	ldr	r1, [r0, #12]
 8003860:	2902      	cmp	r1, #2
 8003862:	d122      	bne.n	80038aa <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003864:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8003868:	f015 0f06 	tst.w	r5, #6
 800386c:	d110      	bne.n	8003890 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 800386e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003870:	3101      	adds	r1, #1
 8003872:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003874:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003876:	2902      	cmp	r1, #2
 8003878:	d1e2      	bne.n	8003840 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 800387a:	2100      	movs	r1, #0
 800387c:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800387e:	2008      	movs	r0, #8
 8003880:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8003882:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003886:	4631      	mov	r1, r6
 8003888:	4620      	mov	r0, r4
 800388a:	f7ff ffca 	bl	8003822 <HAL_I2C_AddrCallback>
 800388e:	e7d7      	b.n	8003840 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003890:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003894:	f7ff ff25 	bl	80036e2 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003898:	2300      	movs	r3, #0
 800389a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800389e:	463a      	mov	r2, r7
 80038a0:	4631      	mov	r1, r6
 80038a2:	4620      	mov	r0, r4
 80038a4:	f7ff ffbd 	bl	8003822 <HAL_I2C_AddrCallback>
 80038a8:	e7ca      	b.n	8003840 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80038aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038ae:	f7ff ff18 	bl	80036e2 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80038b2:	2300      	movs	r3, #0
 80038b4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80038b8:	462a      	mov	r2, r5
 80038ba:	4631      	mov	r1, r6
 80038bc:	4620      	mov	r0, r4
 80038be:	f7ff ffb0 	bl	8003822 <HAL_I2C_AddrCallback>
 80038c2:	e7bd      	b.n	8003840 <I2C_ITAddrCplt+0x1c>

080038c4 <HAL_I2C_ListenCpltCallback>:
}
 80038c4:	4770      	bx	lr
	...

080038c8 <I2C_ITListenCplt>:
{
 80038c8:	b510      	push	{r4, lr}
 80038ca:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038cc:	4b17      	ldr	r3, [pc, #92]	; (800392c <I2C_ITListenCplt+0x64>)
 80038ce:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80038d0:	2300      	movs	r3, #0
 80038d2:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80038d4:	2220      	movs	r2, #32
 80038d6:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038da:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 80038de:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80038e0:	f011 0f04 	tst.w	r1, #4
 80038e4:	d013      	beq.n	800390e <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038e6:	6803      	ldr	r3, [r0, #0]
 80038e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038f0:	3301      	adds	r3, #1
 80038f2:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80038f4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 80038f6:	b153      	cbz	r3, 800390e <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 80038f8:	3b01      	subs	r3, #1
 80038fa:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 80038fc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29b      	uxth	r3, r3
 8003904:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003906:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003908:	f043 0304 	orr.w	r3, r3, #4
 800390c:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800390e:	f248 0103 	movw	r1, #32771	; 0x8003
 8003912:	4620      	mov	r0, r4
 8003914:	f7ff fee5 	bl	80036e2 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	2210      	movs	r2, #16
 800391c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800391e:	2300      	movs	r3, #0
 8003920:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8003924:	4620      	mov	r0, r4
 8003926:	f7ff ffcd 	bl	80038c4 <HAL_I2C_ListenCpltCallback>
}
 800392a:	bd10      	pop	{r4, pc}
 800392c:	ffff0000 	.word	0xffff0000

08003930 <HAL_I2C_ErrorCallback>:
}
 8003930:	4770      	bx	lr

08003932 <HAL_I2C_AbortCpltCallback>:
}
 8003932:	4770      	bx	lr

08003934 <I2C_TreatErrorCallback>:
{
 8003934:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003936:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b60      	cmp	r3, #96	; 0x60
 800393e:	d006      	beq.n	800394e <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003940:	2300      	movs	r3, #0
 8003942:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003944:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003948:	f7ff fff2 	bl	8003930 <HAL_I2C_ErrorCallback>
}
 800394c:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800394e:	2320      	movs	r3, #32
 8003950:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003954:	2300      	movs	r3, #0
 8003956:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003958:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800395c:	f7ff ffe9 	bl	8003932 <HAL_I2C_AbortCpltCallback>
 8003960:	e7f4      	b.n	800394c <I2C_TreatErrorCallback+0x18>
	...

08003964 <I2C_ITError>:
{
 8003964:	b510      	push	{r4, lr}
 8003966:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003968:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800396c:	2000      	movs	r0, #0
 800396e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003972:	4a3b      	ldr	r2, [pc, #236]	; (8003a60 <I2C_ITError+0xfc>)
 8003974:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003976:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8003978:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800397a:	430a      	orrs	r2, r1
 800397c:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800397e:	3b28      	subs	r3, #40	; 0x28
 8003980:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003982:	2b02      	cmp	r3, #2
 8003984:	d819      	bhi.n	80039ba <I2C_ITError+0x56>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003986:	2103      	movs	r1, #3
 8003988:	4620      	mov	r0, r4
 800398a:	f7ff feaa 	bl	80036e2 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800398e:	2328      	movs	r3, #40	; 0x28
 8003990:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003994:	4b33      	ldr	r3, [pc, #204]	; (8003a64 <I2C_ITError+0x100>)
 8003996:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8003998:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800399a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800399c:	b11a      	cbz	r2, 80039a6 <I2C_ITError+0x42>
 800399e:	2b11      	cmp	r3, #17
 80039a0:	d01b      	beq.n	80039da <I2C_ITError+0x76>
 80039a2:	2b21      	cmp	r3, #33	; 0x21
 80039a4:	d019      	beq.n	80039da <I2C_ITError+0x76>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80039a6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80039a8:	b11a      	cbz	r2, 80039b2 <I2C_ITError+0x4e>
 80039aa:	2b12      	cmp	r3, #18
 80039ac:	d036      	beq.n	8003a1c <I2C_ITError+0xb8>
 80039ae:	2b22      	cmp	r3, #34	; 0x22
 80039b0:	d034      	beq.n	8003a1c <I2C_ITError+0xb8>
    I2C_TreatErrorCallback(hi2c);
 80039b2:	4620      	mov	r0, r4
 80039b4:	f7ff ffbe 	bl	8003934 <I2C_TreatErrorCallback>
}
 80039b8:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80039ba:	f248 0103 	movw	r1, #32771	; 0x8003
 80039be:	4620      	mov	r0, r4
 80039c0:	f7ff fe8f 	bl	80036e2 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80039c4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b60      	cmp	r3, #96	; 0x60
 80039cc:	d002      	beq.n	80039d4 <I2C_ITError+0x70>
      hi2c->State         = HAL_I2C_STATE_READY;
 80039ce:	2320      	movs	r3, #32
 80039d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	6363      	str	r3, [r4, #52]	; 0x34
 80039d8:	e7de      	b.n	8003998 <I2C_ITError+0x34>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80039da:	6823      	ldr	r3, [r4, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80039e2:	d003      	beq.n	80039ec <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039ea:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039ec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80039ee:	f7ff fd8d 	bl	800350c <HAL_DMA_GetState>
 80039f2:	2801      	cmp	r0, #1
 80039f4:	d00e      	beq.n	8003a14 <I2C_ITError+0xb0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80039f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039f8:	4a1b      	ldr	r2, [pc, #108]	; (8003a68 <I2C_ITError+0x104>)
 80039fa:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80039fc:	2300      	movs	r3, #0
 80039fe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a02:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003a04:	f7ff fcd4 	bl	80033b0 <HAL_DMA_Abort_IT>
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	d0d5      	beq.n	80039b8 <I2C_ITError+0x54>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a0c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003a0e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003a10:	4798      	blx	r3
 8003a12:	e7d1      	b.n	80039b8 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8003a14:	4620      	mov	r0, r4
 8003a16:	f7ff ff8d 	bl	8003934 <I2C_TreatErrorCallback>
 8003a1a:	e7cd      	b.n	80039b8 <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003a1c:	6823      	ldr	r3, [r4, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003a24:	d003      	beq.n	8003a2e <I2C_ITError+0xca>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a2c:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a2e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003a30:	f7ff fd6c 	bl	800350c <HAL_DMA_GetState>
 8003a34:	2801      	cmp	r0, #1
 8003a36:	d00e      	beq.n	8003a56 <I2C_ITError+0xf2>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a3a:	4a0b      	ldr	r2, [pc, #44]	; (8003a68 <I2C_ITError+0x104>)
 8003a3c:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a44:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003a46:	f7ff fcb3 	bl	80033b0 <HAL_DMA_Abort_IT>
 8003a4a:	2800      	cmp	r0, #0
 8003a4c:	d0b4      	beq.n	80039b8 <I2C_ITError+0x54>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a4e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003a50:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003a52:	4798      	blx	r3
 8003a54:	e7b0      	b.n	80039b8 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8003a56:	4620      	mov	r0, r4
 8003a58:	f7ff ff6c 	bl	8003934 <I2C_TreatErrorCallback>
 8003a5c:	e7ac      	b.n	80039b8 <I2C_ITError+0x54>
 8003a5e:	bf00      	nop
 8003a60:	ffff0000 	.word	0xffff0000
 8003a64:	08003bd5 	.word	0x08003bd5
 8003a68:	08003d8d 	.word	0x08003d8d

08003a6c <I2C_ITSlaveCplt>:
{
 8003a6c:	b570      	push	{r4, r5, r6, lr}
 8003a6e:	4604      	mov	r4, r0
 8003a70:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003a72:	6802      	ldr	r2, [r0, #0]
 8003a74:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003a76:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003a7a:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a7c:	2120      	movs	r1, #32
 8003a7e:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a80:	2b21      	cmp	r3, #33	; 0x21
 8003a82:	d00d      	beq.n	8003aa0 <I2C_ITSlaveCplt+0x34>
 8003a84:	2b29      	cmp	r3, #41	; 0x29
 8003a86:	d00b      	beq.n	8003aa0 <I2C_ITSlaveCplt+0x34>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a88:	2b22      	cmp	r3, #34	; 0x22
 8003a8a:	d001      	beq.n	8003a90 <I2C_ITSlaveCplt+0x24>
 8003a8c:	2b2a      	cmp	r3, #42	; 0x2a
 8003a8e:	d10e      	bne.n	8003aae <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003a90:	f248 0102 	movw	r1, #32770	; 0x8002
 8003a94:	4620      	mov	r0, r4
 8003a96:	f7ff fe24 	bl	80036e2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a9a:	2322      	movs	r3, #34	; 0x22
 8003a9c:	6323      	str	r3, [r4, #48]	; 0x30
 8003a9e:	e006      	b.n	8003aae <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003aa0:	f248 0101 	movw	r1, #32769	; 0x8001
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	f7ff fe1c 	bl	80036e2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003aaa:	2321      	movs	r3, #33	; 0x21
 8003aac:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003aae:	6822      	ldr	r2, [r4, #0]
 8003ab0:	6853      	ldr	r3, [r2, #4]
 8003ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ab6:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8003ab8:	6822      	ldr	r2, [r4, #0]
 8003aba:	6853      	ldr	r3, [r2, #4]
 8003abc:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003ac0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003ac4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f7ff fdf6 	bl	80036c0 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003ad4:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8003ad8:	d040      	beq.n	8003b5c <I2C_ITSlaveCplt+0xf0>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003ada:	6822      	ldr	r2, [r4, #0]
 8003adc:	6813      	ldr	r3, [r2, #0]
 8003ade:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ae2:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8003ae4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ae6:	b11b      	cbz	r3, 8003af0 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003af0:	f015 0f04 	tst.w	r5, #4
 8003af4:	d011      	beq.n	8003b1a <I2C_ITSlaveCplt+0xae>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003af6:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003afa:	6823      	ldr	r3, [r4, #0]
 8003afc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b00:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b04:	3301      	adds	r3, #1
 8003b06:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8003b08:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003b0a:	b133      	cbz	r3, 8003b1a <I2C_ITSlaveCplt+0xae>
      hi2c->XferSize--;
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003b10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8003b1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	b11b      	cbz	r3, 8003b28 <I2C_ITSlaveCplt+0xbc>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b20:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003b22:	f043 0304 	orr.w	r3, r3, #4
 8003b26:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003b2e:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003b32:	bb1b      	cbnz	r3, 8003b7c <I2C_ITSlaveCplt+0x110>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003b34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b36:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b3a:	d12d      	bne.n	8003b98 <I2C_ITSlaveCplt+0x12c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b3c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b22      	cmp	r3, #34	; 0x22
 8003b44:	d038      	beq.n	8003bb8 <I2C_ITSlaveCplt+0x14c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003b46:	2320      	movs	r3, #32
 8003b48:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003b50:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b54:	4620      	mov	r0, r4
 8003b56:	f7ff fe21 	bl	800379c <HAL_I2C_SlaveTxCpltCallback>
}
 8003b5a:	e02c      	b.n	8003bb6 <I2C_ITSlaveCplt+0x14a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003b5c:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8003b60:	d0c6      	beq.n	8003af0 <I2C_ITSlaveCplt+0x84>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003b62:	6822      	ldr	r2, [r4, #0]
 8003b64:	6813      	ldr	r3, [r2, #0]
 8003b66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b6a:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8003b6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0be      	beq.n	8003af0 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003b7a:	e7b9      	b.n	8003af0 <I2C_ITSlaveCplt+0x84>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b7c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003b7e:	4620      	mov	r0, r4
 8003b80:	f7ff fef0 	bl	8003964 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003b84:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b28      	cmp	r3, #40	; 0x28
 8003b8c:	d113      	bne.n	8003bb6 <I2C_ITSlaveCplt+0x14a>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003b8e:	4629      	mov	r1, r5
 8003b90:	4620      	mov	r0, r4
 8003b92:	f7ff fe99 	bl	80038c8 <I2C_ITListenCplt>
 8003b96:	e00e      	b.n	8003bb6 <I2C_ITSlaveCplt+0x14a>
    I2C_ITSlaveSeqCplt(hi2c);
 8003b98:	4620      	mov	r0, r4
 8003b9a:	f7ff fe01 	bl	80037a0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b9e:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <I2C_ITSlaveCplt+0x164>)
 8003ba0:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003ba2:	2320      	movs	r3, #32
 8003ba4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003bac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f7ff fe87 	bl	80038c4 <HAL_I2C_ListenCpltCallback>
}
 8003bb6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8003bb8:	2320      	movs	r3, #32
 8003bba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003bc2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	f7ff fde9 	bl	800379e <HAL_I2C_SlaveRxCpltCallback>
 8003bcc:	e7f3      	b.n	8003bb6 <I2C_ITSlaveCplt+0x14a>
 8003bce:	bf00      	nop
 8003bd0:	ffff0000 	.word	0xffff0000

08003bd4 <I2C_Slave_ISR_IT>:
{
 8003bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8003bd6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8003bd8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	f000 809e 	beq.w	8003d1e <I2C_Slave_ISR_IT+0x14a>
 8003be2:	4604      	mov	r4, r0
 8003be4:	460d      	mov	r5, r1
 8003be6:	4616      	mov	r6, r2
 8003be8:	2301      	movs	r3, #1
 8003bea:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003bee:	f011 0f20 	tst.w	r1, #32
 8003bf2:	d002      	beq.n	8003bfa <I2C_Slave_ISR_IT+0x26>
 8003bf4:	f012 0f20 	tst.w	r2, #32
 8003bf8:	d119      	bne.n	8003c2e <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003bfa:	f015 0f10 	tst.w	r5, #16
 8003bfe:	d03e      	beq.n	8003c7e <I2C_Slave_ISR_IT+0xaa>
 8003c00:	f016 0f10 	tst.w	r6, #16
 8003c04:	d03b      	beq.n	8003c7e <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 8003c06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	bb43      	cbnz	r3, 8003c5e <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003c0c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b28      	cmp	r3, #40	; 0x28
 8003c14:	d00e      	beq.n	8003c34 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003c16:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b29      	cmp	r3, #41	; 0x29
 8003c1e:	d011      	beq.n	8003c44 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	2210      	movs	r2, #16
 8003c24:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8003c26:	2000      	movs	r0, #0
 8003c28:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8003c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003c2e:	f7ff ff1d 	bl	8003a6c <I2C_ITSlaveCplt>
 8003c32:	e7e2      	b.n	8003bfa <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003c34:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8003c38:	d1ed      	bne.n	8003c16 <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f7ff fe43 	bl	80038c8 <I2C_ITListenCplt>
 8003c42:	e7f0      	b.n	8003c26 <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003c44:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8003c48:	d0ea      	beq.n	8003c20 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	2210      	movs	r2, #16
 8003c4e:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8003c50:	4620      	mov	r0, r4
 8003c52:	f7ff fd35 	bl	80036c0 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8003c56:	4620      	mov	r0, r4
 8003c58:	f7ff fda2 	bl	80037a0 <I2C_ITSlaveSeqCplt>
 8003c5c:	e7e3      	b.n	8003c26 <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	2210      	movs	r2, #16
 8003c62:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c66:	f043 0304 	orr.w	r3, r3, #4
 8003c6a:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003c6c:	b117      	cbz	r7, 8003c74 <I2C_Slave_ISR_IT+0xa0>
 8003c6e:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8003c72:	d1d8      	bne.n	8003c26 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003c74:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003c76:	4620      	mov	r0, r4
 8003c78:	f7ff fe74 	bl	8003964 <I2C_ITError>
 8003c7c:	e7d3      	b.n	8003c26 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003c7e:	f015 0f04 	tst.w	r5, #4
 8003c82:	d01f      	beq.n	8003cc4 <I2C_Slave_ISR_IT+0xf0>
 8003c84:	f016 0f04 	tst.w	r6, #4
 8003c88:	d01c      	beq.n	8003cc4 <I2C_Slave_ISR_IT+0xf0>
    if (hi2c->XferCount > 0U)
 8003c8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	b173      	cbz	r3, 8003cae <I2C_Slave_ISR_IT+0xda>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c90:	6823      	ldr	r3, [r4, #0]
 8003c92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c96:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003c9e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003ca4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8003cae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1b7      	bne.n	8003c26 <I2C_Slave_ISR_IT+0x52>
 8003cb6:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8003cba:	d0b4      	beq.n	8003c26 <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	f7ff fd6f 	bl	80037a0 <I2C_ITSlaveSeqCplt>
 8003cc2:	e7b0      	b.n	8003c26 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003cc4:	f015 0f08 	tst.w	r5, #8
 8003cc8:	d002      	beq.n	8003cd0 <I2C_Slave_ISR_IT+0xfc>
 8003cca:	f016 0f08 	tst.w	r6, #8
 8003cce:	d118      	bne.n	8003d02 <I2C_Slave_ISR_IT+0x12e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003cd0:	f015 0f02 	tst.w	r5, #2
 8003cd4:	d0a7      	beq.n	8003c26 <I2C_Slave_ISR_IT+0x52>
 8003cd6:	f016 0f02 	tst.w	r6, #2
 8003cda:	d0a4      	beq.n	8003c26 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 8003cdc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	b1a3      	cbz	r3, 8003d0c <I2C_Slave_ISR_IT+0x138>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ce2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	7812      	ldrb	r2, [r2, #0]
 8003ce8:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003cea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cec:	3301      	adds	r3, #1
 8003cee:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003cf0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003cfa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	8523      	strh	r3, [r4, #40]	; 0x28
 8003d00:	e791      	b.n	8003c26 <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003d02:	4629      	mov	r1, r5
 8003d04:	4620      	mov	r0, r4
 8003d06:	f7ff fd8d 	bl	8003824 <I2C_ITAddrCplt>
 8003d0a:	e78c      	b.n	8003c26 <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003d0c:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8003d10:	d001      	beq.n	8003d16 <I2C_Slave_ISR_IT+0x142>
 8003d12:	2f00      	cmp	r7, #0
 8003d14:	d187      	bne.n	8003c26 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 8003d16:	4620      	mov	r0, r4
 8003d18:	f7ff fd42 	bl	80037a0 <I2C_ITSlaveSeqCplt>
 8003d1c:	e783      	b.n	8003c26 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8003d1e:	2002      	movs	r0, #2
 8003d20:	e784      	b.n	8003c2c <I2C_Slave_ISR_IT+0x58>

08003d22 <HAL_I2C_ER_IRQHandler>:
{
 8003d22:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d24:	6802      	ldr	r2, [r0, #0]
 8003d26:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003d28:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003d2a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003d2e:	d009      	beq.n	8003d44 <HAL_I2C_ER_IRQHandler+0x22>
 8003d30:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003d34:	d006      	beq.n	8003d44 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003d36:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003d38:	f044 0401 	orr.w	r4, r4, #1
 8003d3c:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d3e:	f44f 7480 	mov.w	r4, #256	; 0x100
 8003d42:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003d44:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003d48:	d00a      	beq.n	8003d60 <HAL_I2C_ER_IRQHandler+0x3e>
 8003d4a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003d4e:	d007      	beq.n	8003d60 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003d50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003d52:	f042 0208 	orr.w	r2, r2, #8
 8003d56:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d58:	6802      	ldr	r2, [r0, #0]
 8003d5a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003d5e:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003d60:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003d64:	d00a      	beq.n	8003d7c <HAL_I2C_ER_IRQHandler+0x5a>
 8003d66:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003d6a:	d007      	beq.n	8003d7c <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003d6c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003d6e:	f043 0302 	orr.w	r3, r3, #2
 8003d72:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d74:	6803      	ldr	r3, [r0, #0]
 8003d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d7a:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8003d7c:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003d7e:	f011 0f0b 	tst.w	r1, #11
 8003d82:	d100      	bne.n	8003d86 <HAL_I2C_ER_IRQHandler+0x64>
}
 8003d84:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 8003d86:	f7ff fded 	bl	8003964 <I2C_ITError>
}
 8003d8a:	e7fb      	b.n	8003d84 <HAL_I2C_ER_IRQHandler+0x62>

08003d8c <I2C_DMAAbort>:
{
 8003d8c:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003d8e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->hdmatx != NULL)
 8003d90:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003d92:	b10b      	cbz	r3, 8003d98 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003d94:	2200      	movs	r2, #0
 8003d96:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 8003d98:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003d9a:	b10b      	cbz	r3, 8003da0 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 8003da0:	f7ff fdc8 	bl	8003934 <I2C_TreatErrorCallback>
}
 8003da4:	bd08      	pop	{r3, pc}
	...

08003da8 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003da8:	4a02      	ldr	r2, [pc, #8]	; (8003db4 <HAL_PWR_EnableBkUpAccess+0xc>)
 8003daa:	6813      	ldr	r3, [r2, #0]
 8003dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db0:	6013      	str	r3, [r2, #0]
}
 8003db2:	4770      	bx	lr
 8003db4:	58000400 	.word	0x58000400

08003db8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003db8:	b510      	push	{r4, lr}
 8003dba:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003dbc:	b9a0      	cbnz	r0, 8003de8 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8003dbe:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <HAL_PWR_EnterSLEEPMode+0x44>)
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003dc6:	d10a      	bne.n	8003dde <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003dc8:	4a0d      	ldr	r2, [pc, #52]	; (8003e00 <HAL_PWR_EnterSLEEPMode+0x48>)
 8003dca:	6913      	ldr	r3, [r2, #16]
 8003dcc:	f023 0304 	bic.w	r3, r3, #4
 8003dd0:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003dd2:	2c01      	cmp	r4, #1
 8003dd4:	d010      	beq.n	8003df8 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003dd6:	bf40      	sev
    __WFE();
 8003dd8:	bf20      	wfe
    __WFE();
 8003dda:	bf20      	wfe
  }
}
 8003ddc:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8003dde:	f000 f821 	bl	8003e24 <HAL_PWREx_DisableLowPowerRunMode>
 8003de2:	2800      	cmp	r0, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_PWR_EnterSLEEPMode+0x10>
 8003de6:	e7f9      	b.n	8003ddc <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8003de8:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <HAL_PWR_EnterSLEEPMode+0x44>)
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003df0:	d1ea      	bne.n	8003dc8 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8003df2:	f000 f80f 	bl	8003e14 <HAL_PWREx_EnableLowPowerRunMode>
 8003df6:	e7e7      	b.n	8003dc8 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8003df8:	bf30      	wfi
 8003dfa:	e7ef      	b.n	8003ddc <HAL_PWR_EnterSLEEPMode+0x24>
 8003dfc:	58000400 	.word	0x58000400
 8003e00:	e000ed00 	.word	0xe000ed00

08003e04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8003e04:	4b02      	ldr	r3, [pc, #8]	; (8003e10 <HAL_PWREx_GetVoltageRange+0xc>)
 8003e06:	6818      	ldr	r0, [r3, #0]
}
 8003e08:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	58000400 	.word	0x58000400

08003e14 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8003e14:	4a02      	ldr	r2, [pc, #8]	; (8003e20 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8003e16:	6813      	ldr	r3, [r2, #0]
 8003e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e1c:	6013      	str	r3, [r2, #0]
}
 8003e1e:	4770      	bx	lr
 8003e20:	58000400 	.word	0x58000400

08003e24 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8003e24:	4a0f      	ldr	r2, [pc, #60]	; (8003e64 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8003e26:	6813      	ldr	r3, [r2, #0]
 8003e28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e2c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8003e2e:	4b0e      	ldr	r3, [pc, #56]	; (8003e68 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	2332      	movs	r3, #50	; 0x32
 8003e34:	fb03 f302 	mul.w	r3, r3, r2
 8003e38:	4a0c      	ldr	r2, [pc, #48]	; (8003e6c <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8003e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3e:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003e40:	4a08      	ldr	r2, [pc, #32]	; (8003e64 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8003e42:	6952      	ldr	r2, [r2, #20]
 8003e44:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003e48:	d002      	beq.n	8003e50 <HAL_PWREx_DisableLowPowerRunMode+0x2c>
 8003e4a:	b10b      	cbz	r3, 8003e50 <HAL_PWREx_DisableLowPowerRunMode+0x2c>
  {
    wait_loop_index--;
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	e7f7      	b.n	8003e40 <HAL_PWREx_DisableLowPowerRunMode+0x1c>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8003e50:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003e58:	d101      	bne.n	8003e5e <HAL_PWREx_DisableLowPowerRunMode+0x3a>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	4770      	bx	lr
    return HAL_TIMEOUT;
 8003e5e:	2003      	movs	r0, #3
}
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	58000400 	.word	0x58000400
 8003e68:	20000058 	.word	0x20000058
 8003e6c:	431bde83 	.word	0x431bde83

08003e70 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8003e70:	4a0c      	ldr	r2, [pc, #48]	; (8003ea4 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8003e72:	6813      	ldr	r3, [r2, #0]
 8003e74:	f023 0307 	bic.w	r3, r3, #7
 8003e78:	f043 0302 	orr.w	r3, r3, #2
 8003e7c:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003e7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ea8 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8003e80:	6913      	ldr	r3, [r2, #16]
 8003e82:	f043 0304 	orr.w	r3, r3, #4
 8003e86:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8003e88:	2801      	cmp	r0, #1
 8003e8a:	d008      	beq.n	8003e9e <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003e8c:	bf40      	sev
    __WFE();
 8003e8e:	bf20      	wfe
    __WFE();
 8003e90:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003e92:	4a05      	ldr	r2, [pc, #20]	; (8003ea8 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8003e94:	6913      	ldr	r3, [r2, #16]
 8003e96:	f023 0304 	bic.w	r3, r3, #4
 8003e9a:	6113      	str	r3, [r2, #16]
}
 8003e9c:	4770      	bx	lr
    __WFI();
 8003e9e:	bf30      	wfi
 8003ea0:	e7f7      	b.n	8003e92 <HAL_PWREx_EnterSTOP2Mode+0x22>
 8003ea2:	bf00      	nop
 8003ea4:	58000400 	.word	0x58000400
 8003ea8:	e000ed00 	.word	0xe000ed00

08003eac <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003eac:	b570      	push	{r4, r5, r6, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	4604      	mov	r4, r0
 8003eb2:	460e      	mov	r6, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003eb4:	4b29      	ldr	r3, [pc, #164]	; (8003f5c <RCC_SetFlashLatency+0xb0>)
 8003eb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003eba:	9006      	str	r0, [sp, #24]
 8003ebc:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003ec0:	68d9      	ldr	r1, [r3, #12]
 8003ec2:	6898      	ldr	r0, [r3, #8]
 8003ec4:	9004      	str	r0, [sp, #16]
 8003ec6:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003eca:	ad01      	add	r5, sp, #4
 8003ecc:	3310      	adds	r3, #16
 8003ece:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ed2:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ed6:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003eda:	d01b      	beq.n	8003f14 <RCC_SetFlashLatency+0x68>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003edc:	2300      	movs	r3, #0
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d822      	bhi.n	8003f28 <RCC_SetFlashLatency+0x7c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003ee2:	aa08      	add	r2, sp, #32
 8003ee4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003ee8:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8003eec:	42a2      	cmp	r2, r4
 8003eee:	d215      	bcs.n	8003f1c <RCC_SetFlashLatency+0x70>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	e7f4      	b.n	8003ede <RCC_SetFlashLatency+0x32>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d80e      	bhi.n	8003f18 <RCC_SetFlashLatency+0x6c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003efa:	aa08      	add	r2, sp, #32
 8003efc:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003f00:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8003f04:	42a2      	cmp	r2, r4
 8003f06:	d3f5      	bcc.n	8003ef4 <RCC_SetFlashLatency+0x48>
        latency = FLASH_LATENCY_RANGE[index];
 8003f08:	aa08      	add	r2, sp, #32
 8003f0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003f0e:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8003f12:	e00a      	b.n	8003f2a <RCC_SetFlashLatency+0x7e>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003f14:	2300      	movs	r3, #0
 8003f16:	e7ee      	b.n	8003ef6 <RCC_SetFlashLatency+0x4a>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003f18:	2500      	movs	r5, #0
 8003f1a:	e006      	b.n	8003f2a <RCC_SetFlashLatency+0x7e>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003f1c:	aa08      	add	r2, sp, #32
 8003f1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003f22:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8003f26:	e000      	b.n	8003f2a <RCC_SetFlashLatency+0x7e>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003f28:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f2a:	4a0d      	ldr	r2, [pc, #52]	; (8003f60 <RCC_SetFlashLatency+0xb4>)
 8003f2c:	6813      	ldr	r3, [r2, #0]
 8003f2e:	f023 0307 	bic.w	r3, r3, #7
 8003f32:	432b      	orrs	r3, r5
 8003f34:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003f36:	f7fe fa29 	bl	800238c <HAL_GetTick>
 8003f3a:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003f3c:	4b08      	ldr	r3, [pc, #32]	; (8003f60 <RCC_SetFlashLatency+0xb4>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	42ab      	cmp	r3, r5
 8003f46:	d006      	beq.n	8003f56 <RCC_SetFlashLatency+0xaa>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003f48:	f7fe fa20 	bl	800238c <HAL_GetTick>
 8003f4c:	1b00      	subs	r0, r0, r4
 8003f4e:	2802      	cmp	r0, #2
 8003f50:	d9f4      	bls.n	8003f3c <RCC_SetFlashLatency+0x90>
    {
      return HAL_TIMEOUT;
 8003f52:	2003      	movs	r0, #3
 8003f54:	e000      	b.n	8003f58 <RCC_SetFlashLatency+0xac>
    }
  }
  return HAL_OK;
 8003f56:	2000      	movs	r0, #0
}
 8003f58:	b008      	add	sp, #32
 8003f5a:	bd70      	pop	{r4, r5, r6, pc}
 8003f5c:	08017468 	.word	0x08017468
 8003f60:	58004000 	.word	0x58004000

08003f64 <RCC_SetFlashLatencyFromMSIRange>:
{
 8003f64:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003f66:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8003f6a:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8003f6c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f74:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003f78:	f003 030f 	and.w	r3, r3, #15
 8003f7c:	4a08      	ldr	r2, [pc, #32]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8003f7e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003f82:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003f86:	f7ff ff3d 	bl	8003e04 <HAL_PWREx_GetVoltageRange>
 8003f8a:	4601      	mov	r1, r0
 8003f8c:	4805      	ldr	r0, [pc, #20]	; (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8003f8e:	fba0 3004 	umull	r3, r0, r0, r4
 8003f92:	0c80      	lsrs	r0, r0, #18
 8003f94:	f7ff ff8a 	bl	8003eac <RCC_SetFlashLatency>
}
 8003f98:	bd10      	pop	{r4, pc}
 8003f9a:	bf00      	nop
 8003f9c:	08017918 	.word	0x08017918
 8003fa0:	080178b8 	.word	0x080178b8
 8003fa4:	431bde83 	.word	0x431bde83

08003fa8 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fac:	689a      	ldr	r2, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003fb4:	f012 020c 	ands.w	r2, r2, #12
 8003fb8:	d00a      	beq.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x28>
 8003fba:	2a0c      	cmp	r2, #12
 8003fbc:	d006      	beq.n	8003fcc <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fbe:	2a04      	cmp	r2, #4
 8003fc0:	d047      	beq.n	8004052 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fc2:	2a08      	cmp	r2, #8
 8003fc4:	d03b      	beq.n	800403e <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8003fc6:	2100      	movs	r1, #0
  uint32_t sysclockfreq = 0U;
 8003fc8:	4608      	mov	r0, r1
 8003fca:	e026      	b.n	800401a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d1f6      	bne.n	8003fbe <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f013 0308 	ands.w	r3, r3, #8
 8003fda:	d00d      	beq.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x50>
 8003fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f013 0308 	ands.w	r3, r3, #8
 8003fe6:	d124      	bne.n	8004032 <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003fe8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fec:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003ff0:	492e      	ldr	r1, [pc, #184]	; (80040ac <HAL_RCC_GetSysClockFreq+0x104>)
 8003ff2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003ff6:	e00e      	b.n	8004016 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003ff8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ffc:	6809      	ldr	r1, [r1, #0]
 8003ffe:	f011 0f08 	tst.w	r1, #8
 8004002:	d112      	bne.n	800402a <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800400c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004010:	4926      	ldr	r1, [pc, #152]	; (80040ac <HAL_RCC_GetSysClockFreq+0x104>)
 8004012:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004016:	b1d2      	cbz	r2, 800404e <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8004018:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800401a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004024:	2b0c      	cmp	r3, #12
 8004026:	d01a      	beq.n	800405e <HAL_RCC_GetSysClockFreq+0xb6>
}
 8004028:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800402a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800402e:	6809      	ldr	r1, [r1, #0]
 8004030:	e7ee      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x68>
 8004032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004036:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004038:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800403c:	e7d8      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800403e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004042:	6819      	ldr	r1, [r3, #0]
 8004044:	f411 1180 	ands.w	r1, r1, #1048576	; 0x100000
 8004048:	d106      	bne.n	8004058 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 800404a:	4819      	ldr	r0, [pc, #100]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800404c:	e7e5      	b.n	800401a <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 800404e:	4608      	mov	r0, r1
 8004050:	e7e3      	b.n	800401a <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8004052:	2100      	movs	r1, #0
    sysclockfreq = HSI_VALUE;
 8004054:	4817      	ldr	r0, [pc, #92]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004056:	e7e0      	b.n	800401a <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8004058:	2100      	movs	r1, #0
      sysclockfreq = HSE_VALUE / 2U;
 800405a:	4816      	ldr	r0, [pc, #88]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800405c:	e7dd      	b.n	800401a <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800405e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8004068:	2b02      	cmp	r3, #2
 800406a:	d009      	beq.n	8004080 <HAL_RCC_GetSysClockFreq+0xd8>
 800406c:	2b03      	cmp	r3, #3
 800406e:	d108      	bne.n	8004082 <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800407a:	d115      	bne.n	80040a8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800407c:	490c      	ldr	r1, [pc, #48]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800407e:	e000      	b.n	8004082 <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8004080:	490c      	ldr	r1, [pc, #48]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004082:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004086:	68d0      	ldr	r0, [r2, #12]
 8004088:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800408c:	fb00 f001 	mul.w	r0, r0, r1
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004090:	68d3      	ldr	r3, [r2, #12]
 8004092:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004096:	3301      	adds	r3, #1
 8004098:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800409c:	68d3      	ldr	r3, [r2, #12]
 800409e:	0f5b      	lsrs	r3, r3, #29
 80040a0:	3301      	adds	r3, #1
 80040a2:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80040a6:	e7bf      	b.n	8004028 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 80040a8:	4902      	ldr	r1, [pc, #8]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80040aa:	e7ea      	b.n	8004082 <HAL_RCC_GetSysClockFreq+0xda>
 80040ac:	08017918 	.word	0x08017918
 80040b0:	01e84800 	.word	0x01e84800
 80040b4:	00f42400 	.word	0x00f42400

080040b8 <HAL_RCC_GetHCLKFreq>:
{
 80040b8:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80040ba:	f7ff ff75 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80040be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80040c8:	4a02      	ldr	r2, [pc, #8]	; (80040d4 <HAL_RCC_GetHCLKFreq+0x1c>)
 80040ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80040ce:	fbb0 f0f3 	udiv	r0, r0, r3
 80040d2:	bd08      	pop	{r3, pc}
 80040d4:	080178b8 	.word	0x080178b8

080040d8 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80040d8:	2800      	cmp	r0, #0
 80040da:	f000 8318 	beq.w	800470e <HAL_RCC_OscConfig+0x636>
{
 80040de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e0:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80040e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e6:	689d      	ldr	r5, [r3, #8]
 80040e8:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80040ec:	68de      	ldr	r6, [r3, #12]
 80040ee:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040f2:	6803      	ldr	r3, [r0, #0]
 80040f4:	f013 0f20 	tst.w	r3, #32
 80040f8:	f000 808f 	beq.w	800421a <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80040fc:	b1ed      	cbz	r5, 800413a <HAL_RCC_OscConfig+0x62>
 80040fe:	2d0c      	cmp	r5, #12
 8004100:	d019      	beq.n	8004136 <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004102:	6a23      	ldr	r3, [r4, #32]
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 80bc 	beq.w	8004282 <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800410a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800410e:	6813      	ldr	r3, [r2, #0]
 8004110:	f043 0301 	orr.w	r3, r3, #1
 8004114:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004116:	f7fe f939 	bl	800238c <HAL_GetTick>
 800411a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800411c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f013 0f02 	tst.w	r3, #2
 8004126:	d165      	bne.n	80041f4 <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004128:	f7fe f930 	bl	800238c <HAL_GetTick>
 800412c:	1bc0      	subs	r0, r0, r7
 800412e:	2802      	cmp	r0, #2
 8004130:	d9f4      	bls.n	800411c <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8004132:	2003      	movs	r0, #3
 8004134:	e2f8      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004136:	2e01      	cmp	r6, #1
 8004138:	d1e3      	bne.n	8004102 <HAL_RCC_OscConfig+0x2a>
 800413a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f013 0f02 	tst.w	r3, #2
 8004144:	d003      	beq.n	800414e <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004146:	6a23      	ldr	r3, [r4, #32]
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 82e2 	beq.w	8004712 <HAL_RCC_OscConfig+0x63a>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800414e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f013 0f08 	tst.w	r3, #8
 800415a:	d029      	beq.n	80041b0 <HAL_RCC_OscConfig+0xd8>
 800415c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004166:	4298      	cmp	r0, r3
 8004168:	d92a      	bls.n	80041c0 <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800416a:	f7ff fefb 	bl	8003f64 <RCC_SetFlashLatencyFromMSIRange>
 800416e:	2800      	cmp	r0, #0
 8004170:	f040 82d1 	bne.w	8004716 <HAL_RCC_OscConfig+0x63e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	f042 0208 	orr.w	r2, r2, #8
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004186:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004188:	430a      	orrs	r2, r1
 800418a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800418c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004194:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004198:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800419a:	f7ff ff8d 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 800419e:	4bbc      	ldr	r3, [pc, #752]	; (8004490 <HAL_RCC_OscConfig+0x3b8>)
 80041a0:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80041a2:	4bbc      	ldr	r3, [pc, #752]	; (8004494 <HAL_RCC_OscConfig+0x3bc>)
 80041a4:	6818      	ldr	r0, [r3, #0]
 80041a6:	f7fe f8ef 	bl	8002388 <HAL_InitTick>
        if (status != HAL_OK)
 80041aa:	2800      	cmp	r0, #0
 80041ac:	d035      	beq.n	800421a <HAL_RCC_OscConfig+0x142>
 80041ae:	e2bb      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b8:	091b      	lsrs	r3, r3, #4
 80041ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041be:	e7d2      	b.n	8004166 <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	f042 0208 	orr.w	r2, r2, #8
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80041d2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80041d4:	430a      	orrs	r2, r1
 80041d6:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80041e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80041e4:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80041e8:	f7ff febc 	bl	8003f64 <RCC_SetFlashLatencyFromMSIRange>
 80041ec:	2800      	cmp	r0, #0
 80041ee:	d0d4      	beq.n	800419a <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 80041f0:	2001      	movs	r0, #1
 80041f2:	e299      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	f042 0208 	orr.w	r2, r2, #8
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004206:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004208:	430a      	orrs	r2, r1
 800420a:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800420c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004214:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004218:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	f013 0f01 	tst.w	r3, #1
 8004220:	d051      	beq.n	80042c6 <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004222:	2d08      	cmp	r5, #8
 8004224:	d045      	beq.n	80042b2 <HAL_RCC_OscConfig+0x1da>
 8004226:	2d0c      	cmp	r5, #12
 8004228:	d041      	beq.n	80042ae <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800422a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800422e:	6813      	ldr	r3, [r2, #0]
 8004230:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004234:	68a1      	ldr	r1, [r4, #8]
 8004236:	430b      	orrs	r3, r1
 8004238:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800423a:	6863      	ldr	r3, [r4, #4]
 800423c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004240:	d063      	beq.n	800430a <HAL_RCC_OscConfig+0x232>
 8004242:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004246:	d065      	beq.n	8004314 <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004252:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800425a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800425c:	6863      	ldr	r3, [r4, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d063      	beq.n	800432a <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 8004262:	f7fe f893 	bl	800238c <HAL_GetTick>
 8004266:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004272:	d128      	bne.n	80042c6 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004274:	f7fe f88a 	bl	800238c <HAL_GetTick>
 8004278:	1bc0      	subs	r0, r0, r7
 800427a:	2864      	cmp	r0, #100	; 0x64
 800427c:	d9f4      	bls.n	8004268 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 800427e:	2003      	movs	r0, #3
 8004280:	e252      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004282:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004286:	6813      	ldr	r3, [r2, #0]
 8004288:	f023 0301 	bic.w	r3, r3, #1
 800428c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800428e:	f7fe f87d 	bl	800238c <HAL_GetTick>
 8004292:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f013 0f02 	tst.w	r3, #2
 800429e:	d0bc      	beq.n	800421a <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042a0:	f7fe f874 	bl	800238c <HAL_GetTick>
 80042a4:	1bc0      	subs	r0, r0, r7
 80042a6:	2802      	cmp	r0, #2
 80042a8:	d9f4      	bls.n	8004294 <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 80042aa:	2003      	movs	r0, #3
 80042ac:	e23c      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042ae:	2e03      	cmp	r6, #3
 80042b0:	d1bb      	bne.n	800422a <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80042b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80042bc:	d003      	beq.n	80042c6 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042be:	6863      	ldr	r3, [r4, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 822a 	beq.w	800471a <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	f013 0f02 	tst.w	r3, #2
 80042cc:	d052      	beq.n	8004374 <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80042ce:	2d04      	cmp	r5, #4
 80042d0:	d03d      	beq.n	800434e <HAL_RCC_OscConfig+0x276>
 80042d2:	2d0c      	cmp	r5, #12
 80042d4:	d039      	beq.n	800434a <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042d6:	6923      	ldr	r3, [r4, #16]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8091 	beq.w	8004400 <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80042de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042e2:	6813      	ldr	r3, [r2, #0]
 80042e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80042ea:	f7fe f84f 	bl	800238c <HAL_GetTick>
 80042ee:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80042f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80042fa:	d177      	bne.n	80043ec <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042fc:	f7fe f846 	bl	800238c <HAL_GetTick>
 8004300:	1b80      	subs	r0, r0, r6
 8004302:	2802      	cmp	r0, #2
 8004304:	d9f4      	bls.n	80042f0 <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 8004306:	2003      	movs	r0, #3
 8004308:	e20e      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800430a:	6813      	ldr	r3, [r2, #0]
 800430c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004310:	6013      	str	r3, [r2, #0]
}
 8004312:	e7a3      	b.n	800425c <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800431e:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004326:	601a      	str	r2, [r3, #0]
}
 8004328:	e798      	b.n	800425c <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 800432a:	f7fe f82f 	bl	800238c <HAL_GetTick>
 800432e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800433a:	d0c4      	beq.n	80042c6 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800433c:	f7fe f826 	bl	800238c <HAL_GetTick>
 8004340:	1bc0      	subs	r0, r0, r7
 8004342:	2864      	cmp	r0, #100	; 0x64
 8004344:	d9f4      	bls.n	8004330 <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 8004346:	2003      	movs	r0, #3
 8004348:	e1ee      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800434a:	2e02      	cmp	r6, #2
 800434c:	d1c3      	bne.n	80042d6 <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800434e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004358:	d003      	beq.n	8004362 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800435a:	6923      	ldr	r3, [r4, #16]
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 81de 	beq.w	800471e <HAL_RCC_OscConfig+0x646>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004362:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004364:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004368:	6853      	ldr	r3, [r2, #4]
 800436a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800436e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004372:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	f013 0f08 	tst.w	r3, #8
 800437a:	f000 808d 	beq.w	8004498 <HAL_RCC_OscConfig+0x3c0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800437e:	69a3      	ldr	r3, [r4, #24]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d06c      	beq.n	800445e <HAL_RCC_OscConfig+0x386>
      uint32_t csr_temp = RCC->CSR;
 8004384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004388:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800438c:	69e1      	ldr	r1, [r4, #28]
 800438e:	f003 0210 	and.w	r2, r3, #16
 8004392:	4291      	cmp	r1, r2
 8004394:	d011      	beq.n	80043ba <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004396:	f003 0203 	and.w	r2, r3, #3
 800439a:	2a02      	cmp	r2, #2
 800439c:	f000 81c1 	beq.w	8004722 <HAL_RCC_OscConfig+0x64a>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80043a0:	f013 0f01 	tst.w	r3, #1
 80043a4:	d142      	bne.n	800442c <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80043a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043aa:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80043ae:	f023 0310 	bic.w	r3, r3, #16
 80043b2:	69e1      	ldr	r1, [r4, #28]
 80043b4:	430b      	orrs	r3, r1
 80043b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80043ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043be:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80043c2:	f043 0301 	orr.w	r3, r3, #1
 80043c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80043ca:	f7fd ffdf 	bl	800238c <HAL_GetTick>
 80043ce:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80043d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d8:	f013 0f02 	tst.w	r3, #2
 80043dc:	d15c      	bne.n	8004498 <HAL_RCC_OscConfig+0x3c0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043de:	f7fd ffd5 	bl	800238c <HAL_GetTick>
 80043e2:	1b80      	subs	r0, r0, r6
 80043e4:	2811      	cmp	r0, #17
 80043e6:	d9f3      	bls.n	80043d0 <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 80043e8:	2003      	movs	r0, #3
 80043ea:	e19d      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ec:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80043ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043f2:	6853      	ldr	r3, [r2, #4]
 80043f4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80043f8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80043fc:	6053      	str	r3, [r2, #4]
}
 80043fe:	e7b9      	b.n	8004374 <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004400:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004404:	6813      	ldr	r3, [r2, #0]
 8004406:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800440a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800440c:	f7fd ffbe 	bl	800238c <HAL_GetTick>
 8004410:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800441c:	d0aa      	beq.n	8004374 <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800441e:	f7fd ffb5 	bl	800238c <HAL_GetTick>
 8004422:	1b80      	subs	r0, r0, r6
 8004424:	2802      	cmp	r0, #2
 8004426:	d9f4      	bls.n	8004412 <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 8004428:	2003      	movs	r0, #3
 800442a:	e17d      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800442c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004430:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004434:	f023 0301 	bic.w	r3, r3, #1
 8004438:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 800443c:	f7fd ffa6 	bl	800238c <HAL_GetTick>
 8004440:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800444a:	f013 0f02 	tst.w	r3, #2
 800444e:	d0aa      	beq.n	80043a6 <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004450:	f7fd ff9c 	bl	800238c <HAL_GetTick>
 8004454:	1b80      	subs	r0, r0, r6
 8004456:	2811      	cmp	r0, #17
 8004458:	d9f3      	bls.n	8004442 <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 800445a:	2003      	movs	r0, #3
 800445c:	e164      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800445e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004462:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004466:	f023 0301 	bic.w	r3, r3, #1
 800446a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800446e:	f7fd ff8d 	bl	800238c <HAL_GetTick>
 8004472:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800447c:	f013 0f02 	tst.w	r3, #2
 8004480:	d00a      	beq.n	8004498 <HAL_RCC_OscConfig+0x3c0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004482:	f7fd ff83 	bl	800238c <HAL_GetTick>
 8004486:	1b80      	subs	r0, r0, r6
 8004488:	2811      	cmp	r0, #17
 800448a:	d9f3      	bls.n	8004474 <HAL_RCC_OscConfig+0x39c>
          return HAL_TIMEOUT;
 800448c:	2003      	movs	r0, #3
 800448e:	e14b      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
 8004490:	20000058 	.word	0x20000058
 8004494:	2000005c 	.word	0x2000005c
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004498:	6823      	ldr	r3, [r4, #0]
 800449a:	f013 0f04 	tst.w	r3, #4
 800449e:	f000 80b1 	beq.w	8004604 <HAL_RCC_OscConfig+0x52c>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80044a2:	4ba9      	ldr	r3, [pc, #676]	; (8004748 <HAL_RCC_OscConfig+0x670>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80044aa:	d110      	bne.n	80044ce <HAL_RCC_OscConfig+0x3f6>
      HAL_PWR_EnableBkUpAccess();
 80044ac:	f7ff fc7c 	bl	8003da8 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80044b0:	f7fd ff6c 	bl	800238c <HAL_GetTick>
 80044b4:	4606      	mov	r6, r0
 80044b6:	4ba4      	ldr	r3, [pc, #656]	; (8004748 <HAL_RCC_OscConfig+0x670>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f413 7f80 	tst.w	r3, #256	; 0x100
 80044be:	d106      	bne.n	80044ce <HAL_RCC_OscConfig+0x3f6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c0:	f7fd ff64 	bl	800238c <HAL_GetTick>
 80044c4:	1b80      	subs	r0, r0, r6
 80044c6:	2802      	cmp	r0, #2
 80044c8:	d9f5      	bls.n	80044b6 <HAL_RCC_OscConfig+0x3de>
          return HAL_TIMEOUT;
 80044ca:	2003      	movs	r0, #3
 80044cc:	e12c      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044ce:	68e3      	ldr	r3, [r4, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d061      	beq.n	8004598 <HAL_RCC_OscConfig+0x4c0>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80044d4:	2b85      	cmp	r3, #133	; 0x85
 80044d6:	d001      	beq.n	80044dc <HAL_RCC_OscConfig+0x404>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80044d8:	2b05      	cmp	r3, #5
 80044da:	d107      	bne.n	80044ec <HAL_RCC_OscConfig+0x414>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80044dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044e0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80044e4:	f043 0304 	orr.w	r3, r3, #4
 80044e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80044ec:	f7fd ff4e 	bl	800238c <HAL_GetTick>
 80044f0:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80044f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044f6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80044fa:	f043 0301 	orr.w	r3, r3, #1
 80044fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450a:	f013 0f02 	tst.w	r3, #2
 800450e:	d108      	bne.n	8004522 <HAL_RCC_OscConfig+0x44a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004510:	f7fd ff3c 	bl	800238c <HAL_GetTick>
 8004514:	1b80      	subs	r0, r0, r6
 8004516:	f241 3388 	movw	r3, #5000	; 0x1388
 800451a:	4298      	cmp	r0, r3
 800451c:	d9f1      	bls.n	8004502 <HAL_RCC_OscConfig+0x42a>
          return HAL_TIMEOUT;
 800451e:	2003      	movs	r0, #3
 8004520:	e102      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004522:	68e3      	ldr	r3, [r4, #12]
 8004524:	2b81      	cmp	r3, #129	; 0x81
 8004526:	d001      	beq.n	800452c <HAL_RCC_OscConfig+0x454>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004528:	2b85      	cmp	r3, #133	; 0x85
 800452a:	d11a      	bne.n	8004562 <HAL_RCC_OscConfig+0x48a>
        tickstart = HAL_GetTick();
 800452c:	f7fd ff2e 	bl	800238c <HAL_GetTick>
 8004530:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004532:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004536:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800453a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800454e:	d159      	bne.n	8004604 <HAL_RCC_OscConfig+0x52c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004550:	f7fd ff1c 	bl	800238c <HAL_GetTick>
 8004554:	1b80      	subs	r0, r0, r6
 8004556:	f241 3388 	movw	r3, #5000	; 0x1388
 800455a:	4298      	cmp	r0, r3
 800455c:	d9f1      	bls.n	8004542 <HAL_RCC_OscConfig+0x46a>
            return HAL_TIMEOUT;
 800455e:	2003      	movs	r0, #3
 8004560:	e0e2      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
        tickstart = HAL_GetTick();
 8004562:	f7fd ff13 	bl	800238c <HAL_GetTick>
 8004566:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800456c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004570:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800457c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004580:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004584:	d03e      	beq.n	8004604 <HAL_RCC_OscConfig+0x52c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004586:	f7fd ff01 	bl	800238c <HAL_GetTick>
 800458a:	1b80      	subs	r0, r0, r6
 800458c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004590:	4298      	cmp	r0, r3
 8004592:	d9f1      	bls.n	8004578 <HAL_RCC_OscConfig+0x4a0>
            return HAL_TIMEOUT;
 8004594:	2003      	movs	r0, #3
 8004596:	e0c7      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
      tickstart = HAL_GetTick();
 8004598:	f7fd fef8 	bl	800238c <HAL_GetTick>
 800459c:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800459e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045a2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80045a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80045ba:	d008      	beq.n	80045ce <HAL_RCC_OscConfig+0x4f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045bc:	f7fd fee6 	bl	800238c <HAL_GetTick>
 80045c0:	1b80      	subs	r0, r0, r6
 80045c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80045c6:	4298      	cmp	r0, r3
 80045c8:	d9f1      	bls.n	80045ae <HAL_RCC_OscConfig+0x4d6>
          return HAL_TIMEOUT;
 80045ca:	2003      	movs	r0, #3
 80045cc:	e0ac      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
      tickstart = HAL_GetTick();
 80045ce:	f7fd fedd 	bl	800238c <HAL_GetTick>
 80045d2:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80045d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045d8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80045dc:	f023 0301 	bic.w	r3, r3, #1
 80045e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ec:	f013 0f02 	tst.w	r3, #2
 80045f0:	d008      	beq.n	8004604 <HAL_RCC_OscConfig+0x52c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f2:	f7fd fecb 	bl	800238c <HAL_GetTick>
 80045f6:	1b80      	subs	r0, r0, r6
 80045f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80045fc:	4298      	cmp	r0, r3
 80045fe:	d9f1      	bls.n	80045e4 <HAL_RCC_OscConfig+0x50c>
          return HAL_TIMEOUT;
 8004600:	2003      	movs	r0, #3
 8004602:	e091      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004604:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 808d 	beq.w	8004726 <HAL_RCC_OscConfig+0x64e>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800460c:	2d0c      	cmp	r5, #12
 800460e:	d062      	beq.n	80046d6 <HAL_RCC_OscConfig+0x5fe>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004610:	2b02      	cmp	r3, #2
 8004612:	d01f      	beq.n	8004654 <HAL_RCC_OscConfig+0x57c>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800461e:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	f022 0203 	bic.w	r2, r2, #3
 8004626:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 800462e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004632:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8004634:	f7fd feaa 	bl	800238c <HAL_GetTick>
 8004638:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800463a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004644:	d073      	beq.n	800472e <HAL_RCC_OscConfig+0x656>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004646:	f7fd fea1 	bl	800238c <HAL_GetTick>
 800464a:	1b00      	subs	r0, r0, r4
 800464c:	280a      	cmp	r0, #10
 800464e:	d9f4      	bls.n	800463a <HAL_RCC_OscConfig+0x562>
            return HAL_TIMEOUT;
 8004650:	2003      	movs	r0, #3
 8004652:	e069      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004654:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004658:	6813      	ldr	r3, [r2, #0]
 800465a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800465e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004660:	f7fd fe94 	bl	800238c <HAL_GetTick>
 8004664:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004670:	d12a      	bne.n	80046c8 <HAL_RCC_OscConfig+0x5f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004672:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004676:	68d3      	ldr	r3, [r2, #12]
 8004678:	4934      	ldr	r1, [pc, #208]	; (800474c <HAL_RCC_OscConfig+0x674>)
 800467a:	4019      	ands	r1, r3
 800467c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800467e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004680:	4303      	orrs	r3, r0
 8004682:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004684:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004688:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800468a:	4303      	orrs	r3, r0
 800468c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800468e:	4303      	orrs	r3, r0
 8004690:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004692:	4303      	orrs	r3, r0
 8004694:	430b      	orrs	r3, r1
 8004696:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004698:	6813      	ldr	r3, [r2, #0]
 800469a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800469e:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046a0:	68d3      	ldr	r3, [r2, #12]
 80046a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a6:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80046a8:	f7fd fe70 	bl	800238c <HAL_GetTick>
 80046ac:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80046ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80046b8:	d137      	bne.n	800472a <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ba:	f7fd fe67 	bl	800238c <HAL_GetTick>
 80046be:	1b00      	subs	r0, r0, r4
 80046c0:	280a      	cmp	r0, #10
 80046c2:	d9f4      	bls.n	80046ae <HAL_RCC_OscConfig+0x5d6>
            return HAL_TIMEOUT;
 80046c4:	2003      	movs	r0, #3
 80046c6:	e02f      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c8:	f7fd fe60 	bl	800238c <HAL_GetTick>
 80046cc:	1b40      	subs	r0, r0, r5
 80046ce:	280a      	cmp	r0, #10
 80046d0:	d9c9      	bls.n	8004666 <HAL_RCC_OscConfig+0x58e>
            return HAL_TIMEOUT;
 80046d2:	2003      	movs	r0, #3
 80046d4:	e028      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d02b      	beq.n	8004732 <HAL_RCC_OscConfig+0x65a>
        pll_config = RCC->PLLCFGR;
 80046da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046de:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80046e0:	f003 0103 	and.w	r1, r3, #3
 80046e4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80046e6:	4291      	cmp	r1, r2
 80046e8:	d125      	bne.n	8004736 <HAL_RCC_OscConfig+0x65e>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80046ea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80046ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046f0:	428a      	cmp	r2, r1
 80046f2:	d122      	bne.n	800473a <HAL_RCC_OscConfig+0x662>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80046f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80046f8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80046fa:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80046fe:	d11e      	bne.n	800473e <HAL_RCC_OscConfig+0x666>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004700:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8004704:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004706:	4293      	cmp	r3, r2
 8004708:	d11b      	bne.n	8004742 <HAL_RCC_OscConfig+0x66a>
  return HAL_OK;
 800470a:	2000      	movs	r0, #0
 800470c:	e00c      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
    return HAL_ERROR;
 800470e:	2001      	movs	r0, #1
}
 8004710:	4770      	bx	lr
        return HAL_ERROR;
 8004712:	2001      	movs	r0, #1
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
            return HAL_ERROR;
 8004716:	2001      	movs	r0, #1
 8004718:	e006      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 800471a:	2001      	movs	r0, #1
 800471c:	e004      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 800471e:	2001      	movs	r0, #1
 8004720:	e002      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
          return HAL_ERROR;
 8004722:	2001      	movs	r0, #1
 8004724:	e000      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
  return HAL_OK;
 8004726:	2000      	movs	r0, #0
}
 8004728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 800472a:	2000      	movs	r0, #0
 800472c:	e7fc      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
 800472e:	2000      	movs	r0, #0
 8004730:	e7fa      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
        return HAL_ERROR;
 8004732:	2001      	movs	r0, #1
 8004734:	e7f8      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
          return HAL_ERROR;
 8004736:	2001      	movs	r0, #1
 8004738:	e7f6      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
 800473a:	2001      	movs	r0, #1
 800473c:	e7f4      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
 800473e:	2001      	movs	r0, #1
 8004740:	e7f2      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
 8004742:	2001      	movs	r0, #1
 8004744:	e7f0      	b.n	8004728 <HAL_RCC_OscConfig+0x650>
 8004746:	bf00      	nop
 8004748:	58000400 	.word	0x58000400
 800474c:	11c1808c 	.word	0x11c1808c

08004750 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004750:	2800      	cmp	r0, #0
 8004752:	f000 8127 	beq.w	80049a4 <HAL_RCC_ClockConfig+0x254>
{
 8004756:	b570      	push	{r4, r5, r6, lr}
 8004758:	460c      	mov	r4, r1
 800475a:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800475c:	4b93      	ldr	r3, [pc, #588]	; (80049ac <HAL_RCC_ClockConfig+0x25c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	428b      	cmp	r3, r1
 8004766:	d32d      	bcc.n	80047c4 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004768:	682b      	ldr	r3, [r5, #0]
 800476a:	f013 0f02 	tst.w	r3, #2
 800476e:	d13f      	bne.n	80047f0 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004770:	682b      	ldr	r3, [r5, #0]
 8004772:	f013 0f20 	tst.w	r3, #32
 8004776:	d153      	bne.n	8004820 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004778:	682b      	ldr	r3, [r5, #0]
 800477a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800477e:	d16a      	bne.n	8004856 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004780:	682b      	ldr	r3, [r5, #0]
 8004782:	f013 0f04 	tst.w	r3, #4
 8004786:	f040 8083 	bne.w	8004890 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800478a:	682b      	ldr	r3, [r5, #0]
 800478c:	f013 0f08 	tst.w	r3, #8
 8004790:	f040 8097 	bne.w	80048c2 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	f013 0f01 	tst.w	r3, #1
 800479a:	f000 80de 	beq.w	800495a <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800479e:	686b      	ldr	r3, [r5, #4]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	f000 80a8 	beq.w	80048f6 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047a6:	2b03      	cmp	r3, #3
 80047a8:	f000 80ad 	beq.w	8004906 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f040 80b2 	bne.w	8004916 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80047b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047b6:	6812      	ldr	r2, [r2, #0]
 80047b8:	f012 0f02 	tst.w	r2, #2
 80047bc:	f040 80b1 	bne.w	8004922 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80047c0:	2001      	movs	r0, #1
 80047c2:	e0ee      	b.n	80049a2 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c4:	4a79      	ldr	r2, [pc, #484]	; (80049ac <HAL_RCC_ClockConfig+0x25c>)
 80047c6:	6813      	ldr	r3, [r2, #0]
 80047c8:	f023 0307 	bic.w	r3, r3, #7
 80047cc:	430b      	orrs	r3, r1
 80047ce:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80047d0:	f7fd fddc 	bl	800238c <HAL_GetTick>
 80047d4:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d6:	4b75      	ldr	r3, [pc, #468]	; (80049ac <HAL_RCC_ClockConfig+0x25c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	42a3      	cmp	r3, r4
 80047e0:	d0c2      	beq.n	8004768 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80047e2:	f7fd fdd3 	bl	800238c <HAL_GetTick>
 80047e6:	1b80      	subs	r0, r0, r6
 80047e8:	2802      	cmp	r0, #2
 80047ea:	d9f4      	bls.n	80047d6 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 80047ec:	2003      	movs	r0, #3
 80047ee:	e0d8      	b.n	80049a2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80047f0:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80047f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047f6:	688a      	ldr	r2, [r1, #8]
 80047f8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80047fc:	4313      	orrs	r3, r2
 80047fe:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004800:	f7fd fdc4 	bl	800238c <HAL_GetTick>
 8004804:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004810:	d1ae      	bne.n	8004770 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004812:	f7fd fdbb 	bl	800238c <HAL_GetTick>
 8004816:	1b80      	subs	r0, r0, r6
 8004818:	2802      	cmp	r0, #2
 800481a:	d9f4      	bls.n	8004806 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 800481c:	2003      	movs	r0, #3
 800481e:	e0c0      	b.n	80049a2 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004820:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004822:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004826:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 800482a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8004834:	f7fd fdaa 	bl	800238c <HAL_GetTick>
 8004838:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800483a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800483e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004842:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004846:	d197      	bne.n	8004778 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004848:	f7fd fda0 	bl	800238c <HAL_GetTick>
 800484c:	1b80      	subs	r0, r0, r6
 800484e:	2802      	cmp	r0, #2
 8004850:	d9f3      	bls.n	800483a <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8004852:	2003      	movs	r0, #3
 8004854:	e0a5      	b.n	80049a2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004856:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004858:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800485c:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8004860:	f023 030f 	bic.w	r3, r3, #15
 8004864:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8004868:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 800486c:	f7fd fd8e 	bl	800238c <HAL_GetTick>
 8004870:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004876:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800487a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800487e:	f47f af7f 	bne.w	8004780 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004882:	f7fd fd83 	bl	800238c <HAL_GetTick>
 8004886:	1b80      	subs	r0, r0, r6
 8004888:	2802      	cmp	r0, #2
 800488a:	d9f2      	bls.n	8004872 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 800488c:	2003      	movs	r0, #3
 800488e:	e088      	b.n	80049a2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004890:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004892:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004896:	688a      	ldr	r2, [r1, #8]
 8004898:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800489c:	4313      	orrs	r3, r2
 800489e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80048a0:	f7fd fd74 	bl	800238c <HAL_GetTick>
 80048a4:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80048a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80048b0:	f47f af6b 	bne.w	800478a <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048b4:	f7fd fd6a 	bl	800238c <HAL_GetTick>
 80048b8:	1b80      	subs	r0, r0, r6
 80048ba:	2802      	cmp	r0, #2
 80048bc:	d9f3      	bls.n	80048a6 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 80048be:	2003      	movs	r0, #3
 80048c0:	e06f      	b.n	80049a2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80048c2:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80048c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048c8:	6893      	ldr	r3, [r2, #8]
 80048ca:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80048ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80048d2:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80048d4:	f7fd fd5a 	bl	800238c <HAL_GetTick>
 80048d8:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80048da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80048e4:	f47f af56 	bne.w	8004794 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048e8:	f7fd fd50 	bl	800238c <HAL_GetTick>
 80048ec:	1b80      	subs	r0, r0, r6
 80048ee:	2802      	cmp	r0, #2
 80048f0:	d9f3      	bls.n	80048da <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 80048f2:	2003      	movs	r0, #3
 80048f4:	e055      	b.n	80049a2 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80048f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048fa:	6812      	ldr	r2, [r2, #0]
 80048fc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004900:	d10f      	bne.n	8004922 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004902:	2001      	movs	r0, #1
 8004904:	e04d      	b.n	80049a2 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004906:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800490a:	6812      	ldr	r2, [r2, #0]
 800490c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004910:	d107      	bne.n	8004922 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004912:	2001      	movs	r0, #1
 8004914:	e045      	b.n	80049a2 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004916:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800491a:	6812      	ldr	r2, [r2, #0]
 800491c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004920:	d042      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004922:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004926:	688a      	ldr	r2, [r1, #8]
 8004928:	f022 0203 	bic.w	r2, r2, #3
 800492c:	4313      	orrs	r3, r2
 800492e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004930:	f7fd fd2c 	bl	800238c <HAL_GetTick>
 8004934:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004940:	686a      	ldr	r2, [r5, #4]
 8004942:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004946:	d008      	beq.n	800495a <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004948:	f7fd fd20 	bl	800238c <HAL_GetTick>
 800494c:	1b80      	subs	r0, r0, r6
 800494e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004952:	4298      	cmp	r0, r3
 8004954:	d9ef      	bls.n	8004936 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8004956:	2003      	movs	r0, #3
 8004958:	e023      	b.n	80049a2 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800495a:	4b14      	ldr	r3, [pc, #80]	; (80049ac <HAL_RCC_ClockConfig+0x25c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	42a3      	cmp	r3, r4
 8004964:	d915      	bls.n	8004992 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004966:	4a11      	ldr	r2, [pc, #68]	; (80049ac <HAL_RCC_ClockConfig+0x25c>)
 8004968:	6813      	ldr	r3, [r2, #0]
 800496a:	f023 0307 	bic.w	r3, r3, #7
 800496e:	4323      	orrs	r3, r4
 8004970:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004972:	f7fd fd0b 	bl	800238c <HAL_GetTick>
 8004976:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004978:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <HAL_RCC_ClockConfig+0x25c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	42a3      	cmp	r3, r4
 8004982:	d006      	beq.n	8004992 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004984:	f7fd fd02 	bl	800238c <HAL_GetTick>
 8004988:	1b40      	subs	r0, r0, r5
 800498a:	2802      	cmp	r0, #2
 800498c:	d9f4      	bls.n	8004978 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 800498e:	2003      	movs	r0, #3
 8004990:	e007      	b.n	80049a2 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004992:	f7ff fb91 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 8004996:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <HAL_RCC_ClockConfig+0x260>)
 8004998:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800499a:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <HAL_RCC_ClockConfig+0x264>)
 800499c:	6818      	ldr	r0, [r3, #0]
 800499e:	f7fd fcf3 	bl	8002388 <HAL_InitTick>
}
 80049a2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80049a4:	2001      	movs	r0, #1
}
 80049a6:	4770      	bx	lr
        return HAL_ERROR;
 80049a8:	2001      	movs	r0, #1
 80049aa:	e7fa      	b.n	80049a2 <HAL_RCC_ClockConfig+0x252>
 80049ac:	58004000 	.word	0x58004000
 80049b0:	20000058 	.word	0x20000058
 80049b4:	2000005c 	.word	0x2000005c

080049b8 <HAL_RCC_GetPCLK1Freq>:
{
 80049b8:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80049ba:	f7ff fb7d 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80049be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80049c8:	4a02      	ldr	r2, [pc, #8]	; (80049d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80049ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80049ce:	40d8      	lsrs	r0, r3
 80049d0:	bd08      	pop	{r3, pc}
 80049d2:	bf00      	nop
 80049d4:	080178f8 	.word	0x080178f8

080049d8 <HAL_RCC_GetPCLK2Freq>:
{
 80049d8:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80049da:	f7ff fb6d 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80049de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80049e8:	4a02      	ldr	r2, [pc, #8]	; (80049f4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80049ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80049ee:	40d8      	lsrs	r0, r3
 80049f0:	bd08      	pop	{r3, pc}
 80049f2:	bf00      	nop
 80049f4:	080178f8 	.word	0x080178f8

080049f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049f8:	b570      	push	{r4, r5, r6, lr}
 80049fa:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049fc:	6803      	ldr	r3, [r0, #0]
 80049fe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004a02:	f040 80d6 	bne.w	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004a06:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	f013 0f01 	tst.w	r3, #1
 8004a0e:	d00a      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a10:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004a12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a16:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004a1a:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004a1e:	b292      	uxth	r2, r2
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	f013 0f02 	tst.w	r3, #2
 8004a2c:	d00a      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a2e:	68a2      	ldr	r2, [r4, #8]
 8004a30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a34:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004a38:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004a3c:	b292      	uxth	r2, r2
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	f013 0f20 	tst.w	r3, #32
 8004a4a:	d009      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a4c:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a52:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004a56:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004a66:	d00c      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a68:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004a6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a6e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004a72:	0c02      	lsrs	r2, r0, #16
 8004a74:	0412      	lsls	r2, r2, #16
 8004a76:	ea23 0302 	bic.w	r3, r3, r2
 8004a7a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004a88:	d00c      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004a8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a90:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004a94:	0c02      	lsrs	r2, r0, #16
 8004a96:	0412      	lsls	r2, r2, #16
 8004a98:	ea23 0302 	bic.w	r3, r3, r2
 8004a9c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004aa4:	6823      	ldr	r3, [r4, #0]
 8004aa6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004aaa:	d00c      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004aac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004aae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ab2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004ab6:	0c02      	lsrs	r2, r0, #16
 8004ab8:	0412      	lsls	r2, r2, #16
 8004aba:	ea23 0302 	bic.w	r3, r3, r2
 8004abe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004acc:	d00f      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ace:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004ad0:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004ad4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004ad8:	0919      	lsrs	r1, r3, #4
 8004ada:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004ade:	ea22 0201 	bic.w	r2, r2, r1
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004af4:	d00f      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004af6:	69a3      	ldr	r3, [r4, #24]
 8004af8:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004afc:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004b00:	0919      	lsrs	r1, r3, #4
 8004b02:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004b06:	ea22 0201 	bic.w	r2, r2, r1
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004b1c:	d00f      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x146>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b1e:	69e3      	ldr	r3, [r4, #28]
 8004b20:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004b24:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004b28:	0919      	lsrs	r1, r3, #4
 8004b2a:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004b2e:	ea22 0201 	bic.w	r2, r2, r1
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	f013 0f10 	tst.w	r3, #16
 8004b44:	d00d      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004b46:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004b48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b4c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b50:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004b5a:	68e3      	ldr	r3, [r4, #12]
 8004b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b60:	d07f      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004b68:	d00f      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004b6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b70:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b74:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b80:	b91b      	cbnz	r3, 8004b8a <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004b82:	68cb      	ldr	r3, [r1, #12]
 8004b84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b88:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b8a:	6823      	ldr	r3, [r4, #0]
 8004b8c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004b90:	d00d      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004b94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b98:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004ba6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bac:	d05e      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8004bae:	4628      	mov	r0, r5
 8004bb0:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8004bb2:	f7ff f8f9 	bl	8003da8 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8004bb6:	f7fd fbe9 	bl	800238c <HAL_GetTick>
 8004bba:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004bbc:	4b2e      	ldr	r3, [pc, #184]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004bc4:	d106      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bc6:	f7fd fbe1 	bl	800238c <HAL_GetTick>
 8004bca:	1b40      	subs	r0, r0, r5
 8004bcc:	2802      	cmp	r0, #2
 8004bce:	d9f5      	bls.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        ret = HAL_TIMEOUT;
 8004bd0:	2503      	movs	r5, #3
 8004bd2:	e000      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004bd4:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8004bd6:	2d00      	cmp	r5, #0
 8004bd8:	f47f af16 	bne.w	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be4:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004be8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d024      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x240>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004bf6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004bfa:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004bfe:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004c02:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004c06:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004c0a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004c0e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004c12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004c16:	f012 0f02 	tst.w	r2, #2
 8004c1a:	d10f      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x244>
      if (ret == HAL_OK)
 8004c1c:	2d00      	cmp	r5, #0
 8004c1e:	f47f aef3 	bne.w	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c22:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004c24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c28:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004c2c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004c36:	e6e7      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8004c38:	2200      	movs	r2, #0
 8004c3a:	e7ec      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
        tickstart = HAL_GetTick();
 8004c3c:	f7fd fba6 	bl	800238c <HAL_GetTick>
 8004c40:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4a:	f013 0f02 	tst.w	r3, #2
 8004c4e:	d1e5      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x224>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c50:	f7fd fb9c 	bl	800238c <HAL_GetTick>
 8004c54:	1b80      	subs	r0, r0, r6
 8004c56:	f241 3388 	movw	r3, #5000	; 0x1388
 8004c5a:	4298      	cmp	r0, r3
 8004c5c:	d9f1      	bls.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x24a>
            ret = HAL_TIMEOUT;
 8004c5e:	2503      	movs	r5, #3
 8004c60:	e7dc      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x224>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004c62:	68cb      	ldr	r3, [r1, #12]
 8004c64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c68:	60cb      	str	r3, [r1, #12]
 8004c6a:	e77a      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x16a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c6c:	68cb      	ldr	r3, [r1, #12]
 8004c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c72:	60cb      	str	r3, [r1, #12]
 8004c74:	e79b      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004c76:	bf00      	nop
 8004c78:	58000400 	.word	0x58000400

08004c7c <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c7c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d036      	beq.n	8004cf2 <HAL_RTC_DeactivateAlarm+0x76>
 8004c84:	2301      	movs	r3, #1
 8004c86:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c90:	4b19      	ldr	r3, [pc, #100]	; (8004cf8 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004c92:	22ca      	movs	r2, #202	; 0xca
 8004c94:	625a      	str	r2, [r3, #36]	; 0x24
 8004c96:	2253      	movs	r2, #83	; 0x53
 8004c98:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004c9a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004c9e:	d019      	beq.n	8004cd4 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004ca0:	4b15      	ldr	r3, [pc, #84]	; (8004cf8 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004ca2:	699a      	ldr	r2, [r3, #24]
 8004ca4:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8004ca8:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004caa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004cb0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004cb2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004cb4:	f022 0202 	bic.w	r2, r2, #2
 8004cb8:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004cba:	2202      	movs	r2, #2
 8004cbc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cbe:	4b0e      	ldr	r3, [pc, #56]	; (8004cf8 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004cc0:	22ff      	movs	r2, #255	; 0xff
 8004cc2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004cd4:	699a      	ldr	r2, [r3, #24]
 8004cd6:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8004cda:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8004cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cde:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ce2:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004ce4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004ce6:	f022 0201 	bic.w	r2, r2, #1
 8004cea:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004cec:	2201      	movs	r2, #1
 8004cee:	65da      	str	r2, [r3, #92]	; 0x5c
 8004cf0:	e7e5      	b.n	8004cbe <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 8004cf2:	2002      	movs	r0, #2
}
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40002800 	.word	0x40002800

08004cfc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004cfc:	b538      	push	{r3, r4, r5, lr}
 8004cfe:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004d00:	4b0d      	ldr	r3, [pc, #52]	; (8004d38 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004d02:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8004d04:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004d06:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004d08:	f015 0f01 	tst.w	r5, #1
 8004d0c:	d106      	bne.n	8004d1c <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8004d0e:	f015 0f02 	tst.w	r5, #2
 8004d12:	d109      	bne.n	8004d28 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004d14:	2301      	movs	r3, #1
 8004d16:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8004d1a:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004d1c:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8004d22:	f7fd fc4d 	bl	80025c0 <HAL_RTC_AlarmAEventCallback>
 8004d26:	e7f2      	b.n	8004d0e <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004d28:	4b03      	ldr	r3, [pc, #12]	; (8004d38 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004d2e:	4620      	mov	r0, r4
 8004d30:	f000 f9e4 	bl	80050fc <HAL_RTCEx_AlarmBEventCallback>
 8004d34:	e7ee      	b.n	8004d14 <HAL_RTC_AlarmIRQHandler+0x18>
 8004d36:	bf00      	nop
 8004d38:	40002800 	.word	0x40002800

08004d3c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004d3c:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004d3e:	4a0b      	ldr	r2, [pc, #44]	; (8004d6c <HAL_RTC_WaitForSynchro+0x30>)
 8004d40:	68d3      	ldr	r3, [r2, #12]
 8004d42:	f023 0320 	bic.w	r3, r3, #32
 8004d46:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004d48:	f7fd fb20 	bl	800238c <HAL_GetTick>
 8004d4c:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004d4e:	4b07      	ldr	r3, [pc, #28]	; (8004d6c <HAL_RTC_WaitForSynchro+0x30>)
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	f013 0f20 	tst.w	r3, #32
 8004d56:	d107      	bne.n	8004d68 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d58:	f7fd fb18 	bl	800238c <HAL_GetTick>
 8004d5c:	1b00      	subs	r0, r0, r4
 8004d5e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004d62:	d9f4      	bls.n	8004d4e <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8004d64:	2003      	movs	r0, #3
 8004d66:	e000      	b.n	8004d6a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004d68:	2000      	movs	r0, #0
}
 8004d6a:	bd10      	pop	{r4, pc}
 8004d6c:	40002800 	.word	0x40002800

08004d70 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d70:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004d72:	4b11      	ldr	r3, [pc, #68]	; (8004db8 <RTC_EnterInitMode+0x48>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004d7a:	d002      	beq.n	8004d82 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8004d7c:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8004d7e:	4620      	mov	r0, r4
 8004d80:	bd70      	pop	{r4, r5, r6, pc}
 8004d82:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004d84:	4a0c      	ldr	r2, [pc, #48]	; (8004db8 <RTC_EnterInitMode+0x48>)
 8004d86:	68d3      	ldr	r3, [r2, #12]
 8004d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d8c:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8004d8e:	f7fd fafd 	bl	800238c <HAL_GetTick>
 8004d92:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8004d94:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004d96:	4b08      	ldr	r3, [pc, #32]	; (8004db8 <RTC_EnterInitMode+0x48>)
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004d9e:	d1ee      	bne.n	8004d7e <RTC_EnterInitMode+0xe>
 8004da0:	2c03      	cmp	r4, #3
 8004da2:	d0ec      	beq.n	8004d7e <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004da4:	f7fd faf2 	bl	800238c <HAL_GetTick>
 8004da8:	1b43      	subs	r3, r0, r5
 8004daa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dae:	d9f2      	bls.n	8004d96 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004db0:	2403      	movs	r4, #3
 8004db2:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 8004db6:	e7ee      	b.n	8004d96 <RTC_EnterInitMode+0x26>
 8004db8:	40002800 	.word	0x40002800

08004dbc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004dbc:	b510      	push	{r4, lr}
 8004dbe:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004dc0:	4b10      	ldr	r3, [pc, #64]	; (8004e04 <RTC_ExitInitMode+0x48>)
 8004dc2:	68da      	ldr	r2, [r3, #12]
 8004dc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dc8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	f013 0f20 	tst.w	r3, #32
 8004dd0:	d106      	bne.n	8004de0 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004dd2:	f7ff ffb3 	bl	8004d3c <HAL_RTC_WaitForSynchro>
 8004dd6:	b198      	cbz	r0, 8004e00 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004dd8:	2003      	movs	r0, #3
 8004dda:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004dde:	e00f      	b.n	8004e00 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004de0:	4a08      	ldr	r2, [pc, #32]	; (8004e04 <RTC_ExitInitMode+0x48>)
 8004de2:	6993      	ldr	r3, [r2, #24]
 8004de4:	f023 0320 	bic.w	r3, r3, #32
 8004de8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004dea:	f7ff ffa7 	bl	8004d3c <HAL_RTC_WaitForSynchro>
 8004dee:	b110      	cbz	r0, 8004df6 <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004df0:	2003      	movs	r0, #3
 8004df2:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004df6:	4a03      	ldr	r2, [pc, #12]	; (8004e04 <RTC_ExitInitMode+0x48>)
 8004df8:	6993      	ldr	r3, [r2, #24]
 8004dfa:	f043 0320 	orr.w	r3, r3, #32
 8004dfe:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8004e00:	bd10      	pop	{r4, pc}
 8004e02:	bf00      	nop
 8004e04:	40002800 	.word	0x40002800

08004e08 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	d04a      	beq.n	8004ea2 <HAL_RTC_Init+0x9a>
{
 8004e0c:	b538      	push	{r3, r4, r5, lr}
 8004e0e:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004e10:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8004e14:	b19b      	cbz	r3, 8004e3e <HAL_RTC_Init+0x36>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004e16:	2302      	movs	r3, #2
 8004e18:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e1c:	4b22      	ldr	r3, [pc, #136]	; (8004ea8 <HAL_RTC_Init+0xa0>)
 8004e1e:	22ca      	movs	r2, #202	; 0xca
 8004e20:	625a      	str	r2, [r3, #36]	; 0x24
 8004e22:	2253      	movs	r2, #83	; 0x53
 8004e24:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8004e26:	4620      	mov	r0, r4
 8004e28:	f7ff ffa2 	bl	8004d70 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8004e2c:	b160      	cbz	r0, 8004e48 <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e2e:	4b1e      	ldr	r3, [pc, #120]	; (8004ea8 <HAL_RTC_Init+0xa0>)
 8004e30:	22ff      	movs	r2, #255	; 0xff
 8004e32:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8004e34:	b910      	cbnz	r0, 8004e3c <HAL_RTC_Init+0x34>
      hrtc->State = HAL_RTC_STATE_READY;
 8004e36:	2301      	movs	r3, #1
 8004e38:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8004e3c:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8004e3e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 8004e42:	f7fc ff89 	bl	8001d58 <HAL_RTC_MspInit>
 8004e46:	e7e6      	b.n	8004e16 <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004e48:	4b17      	ldr	r3, [pc, #92]	; (8004ea8 <HAL_RTC_Init+0xa0>)
 8004e4a:	699a      	ldr	r2, [r3, #24]
 8004e4c:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8004e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e54:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004e56:	6999      	ldr	r1, [r3, #24]
 8004e58:	6862      	ldr	r2, [r4, #4]
 8004e5a:	6920      	ldr	r0, [r4, #16]
 8004e5c:	4302      	orrs	r2, r0
 8004e5e:	69a0      	ldr	r0, [r4, #24]
 8004e60:	4302      	orrs	r2, r0
 8004e62:	430a      	orrs	r2, r1
 8004e64:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004e66:	68e2      	ldr	r2, [r4, #12]
 8004e68:	68a1      	ldr	r1, [r4, #8]
 8004e6a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004e6e:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8004e76:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004e78:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004e7a:	4301      	orrs	r1, r0
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 8004e80:	4620      	mov	r0, r4
 8004e82:	f7ff ff9b 	bl	8004dbc <RTC_ExitInitMode>
      if (status == HAL_OK)
 8004e86:	2800      	cmp	r0, #0
 8004e88:	d1d1      	bne.n	8004e2e <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 8004e8a:	4907      	ldr	r1, [pc, #28]	; (8004ea8 <HAL_RTC_Init+0xa0>)
 8004e8c:	698b      	ldr	r3, [r1, #24]
 8004e8e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8004e92:	6a22      	ldr	r2, [r4, #32]
 8004e94:	69e5      	ldr	r5, [r4, #28]
 8004e96:	432a      	orrs	r2, r5
 8004e98:	6965      	ldr	r5, [r4, #20]
 8004e9a:	432a      	orrs	r2, r5
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	618b      	str	r3, [r1, #24]
 8004ea0:	e7c5      	b.n	8004e2e <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ea2:	2001      	movs	r0, #1
}
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40002800 	.word	0x40002800

08004eac <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004eac:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8004eae:	2809      	cmp	r0, #9
 8004eb0:	d903      	bls.n	8004eba <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 8004eb2:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8004eb4:	380a      	subs	r0, #10
 8004eb6:	b2c0      	uxtb	r0, r0
 8004eb8:	e7f9      	b.n	8004eae <RTC_ByteToBcd2+0x2>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	b2db      	uxtb	r3, r3
}
 8004ebe:	4318      	orrs	r0, r3
 8004ec0:	4770      	bx	lr
	...

08004ec4 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8004ec4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	f000 80b0 	beq.w	800502e <HAL_RTC_SetAlarm_IT+0x16a>
{
 8004ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed2:	4605      	mov	r5, r0
 8004ed4:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004edc:	2302      	movs	r3, #2
 8004ede:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8004ee2:	4b54      	ldr	r3, [pc, #336]	; (8005034 <HAL_RTC_SetAlarm_IT+0x170>)
 8004ee4:	68de      	ldr	r6, [r3, #12]
 8004ee6:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8004eea:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8004eee:	d043      	beq.n	8004f78 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8004ef0:	bb12      	cbnz	r2, 8004f38 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004ef8:	d101      	bne.n	8004efe <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8004efe:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004f02:	7820      	ldrb	r0, [r4, #0]
 8004f04:	f7ff ffd2 	bl	8004eac <RTC_ByteToBcd2>
 8004f08:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004f0a:	7860      	ldrb	r0, [r4, #1]
 8004f0c:	f7ff ffce 	bl	8004eac <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004f10:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004f14:	78a0      	ldrb	r0, [r4, #2]
 8004f16:	f7ff ffc9 	bl	8004eac <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004f1a:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004f1c:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004f1e:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004f22:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8004f26:	f7ff ffc1 	bl	8004eac <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004f2a:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004f2e:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004f30:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004f32:	ea48 0000 	orr.w	r0, r8, r0
 8004f36:	e020      	b.n	8004f7a <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8004f38:	6948      	ldr	r0, [r1, #20]
 8004f3a:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 8004f3e:	d009      	beq.n	8004f54 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8004f40:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8004f44:	d006      	beq.n	8004f54 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004f46:	4b3b      	ldr	r3, [pc, #236]	; (8005034 <HAL_RTC_SetAlarm_IT+0x170>)
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004f4e:	d101      	bne.n	8004f54 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004f54:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004f56:	7863      	ldrb	r3, [r4, #1]
 8004f58:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004f5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004f5e:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004f60:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004f62:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004f64:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004f68:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004f6c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004f70:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004f72:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004f74:	4318      	orrs	r0, r3
 8004f76:	e000      	b.n	8004f7a <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8004f78:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f7a:	4b2e      	ldr	r3, [pc, #184]	; (8005034 <HAL_RTC_SetAlarm_IT+0x170>)
 8004f7c:	22ca      	movs	r2, #202	; 0xca
 8004f7e:	625a      	str	r2, [r3, #36]	; 0x24
 8004f80:	2253      	movs	r2, #83	; 0x53
 8004f82:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004f84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f8a:	d02a      	beq.n	8004fe2 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004f8c:	4b29      	ldr	r3, [pc, #164]	; (8005034 <HAL_RTC_SetAlarm_IT+0x170>)
 8004f8e:	699a      	ldr	r2, [r3, #24]
 8004f90:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8004f94:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004f96:	2202      	movs	r2, #2
 8004f98:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8004f9a:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8004f9e:	d040      	beq.n	8005022 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8004fa0:	4b24      	ldr	r3, [pc, #144]	; (8005034 <HAL_RTC_SetAlarm_IT+0x170>)
 8004fa2:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8004fa4:	69a2      	ldr	r2, [r4, #24]
 8004fa6:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8004fa8:	6862      	ldr	r2, [r4, #4]
 8004faa:	4b22      	ldr	r3, [pc, #136]	; (8005034 <HAL_RTC_SetAlarm_IT+0x170>)
 8004fac:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004fae:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004fb0:	f042 0202 	orr.w	r2, r2, #2
 8004fb4:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004fb6:	699a      	ldr	r2, [r3, #24]
 8004fb8:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8004fbc:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004fbe:	4a1e      	ldr	r2, [pc, #120]	; (8005038 <HAL_RTC_SetAlarm_IT+0x174>)
 8004fc0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fcc:	4b19      	ldr	r3, [pc, #100]	; (8005034 <HAL_RTC_SetAlarm_IT+0x170>)
 8004fce:	22ff      	movs	r2, #255	; 0xff
 8004fd0:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8004fd8:	2000      	movs	r0, #0
 8004fda:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8004fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004fe2:	4b14      	ldr	r3, [pc, #80]	; (8005034 <HAL_RTC_SetAlarm_IT+0x170>)
 8004fe4:	699a      	ldr	r2, [r3, #24]
 8004fe6:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8004fea:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004fec:	2201      	movs	r2, #1
 8004fee:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8004ff0:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8004ff4:	d00f      	beq.n	8005016 <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8004ff6:	4b0f      	ldr	r3, [pc, #60]	; (8005034 <HAL_RTC_SetAlarm_IT+0x170>)
 8004ff8:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8004ffa:	69a2      	ldr	r2, [r4, #24]
 8004ffc:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8004ffe:	6862      	ldr	r2, [r4, #4]
 8005000:	4b0c      	ldr	r3, [pc, #48]	; (8005034 <HAL_RTC_SetAlarm_IT+0x170>)
 8005002:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005004:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005006:	f042 0201 	orr.w	r2, r2, #1
 800500a:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800500c:	699a      	ldr	r2, [r3, #24]
 800500e:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8005012:	619a      	str	r2, [r3, #24]
 8005014:	e7d3      	b.n	8004fbe <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8005016:	69a3      	ldr	r3, [r4, #24]
 8005018:	69e2      	ldr	r2, [r4, #28]
 800501a:	4313      	orrs	r3, r2
 800501c:	4a05      	ldr	r2, [pc, #20]	; (8005034 <HAL_RTC_SetAlarm_IT+0x170>)
 800501e:	6453      	str	r3, [r2, #68]	; 0x44
 8005020:	e7ed      	b.n	8004ffe <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005022:	69a3      	ldr	r3, [r4, #24]
 8005024:	69e2      	ldr	r2, [r4, #28]
 8005026:	4313      	orrs	r3, r2
 8005028:	4a02      	ldr	r2, [pc, #8]	; (8005034 <HAL_RTC_SetAlarm_IT+0x170>)
 800502a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800502c:	e7bc      	b.n	8004fa8 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 800502e:	2002      	movs	r0, #2
}
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40002800 	.word	0x40002800
 8005038:	58000800 	.word	0x58000800

0800503c <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800503c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005040:	2b01      	cmp	r3, #1
 8005042:	d017      	beq.n	8005074 <HAL_RTCEx_EnableBypassShadow+0x38>
 8005044:	2101      	movs	r1, #1
 8005046:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800504a:	2302      	movs	r3, #2
 800504c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005050:	4b09      	ldr	r3, [pc, #36]	; (8005078 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8005052:	22ca      	movs	r2, #202	; 0xca
 8005054:	625a      	str	r2, [r3, #36]	; 0x24
 8005056:	2253      	movs	r2, #83	; 0x53
 8005058:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800505a:	699a      	ldr	r2, [r3, #24]
 800505c:	f042 0220 	orr.w	r2, r2, #32
 8005060:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005062:	22ff      	movs	r2, #255	; 0xff
 8005064:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005066:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800506a:	2300      	movs	r3, #0
 800506c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8005070:	4618      	mov	r0, r3
 8005072:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8005074:	2002      	movs	r0, #2
}
 8005076:	4770      	bx	lr
 8005078:	40002800 	.word	0x40002800

0800507c <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800507c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005080:	2b01      	cmp	r3, #1
 8005082:	d020      	beq.n	80050c6 <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8005084:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 8005086:	2101      	movs	r1, #1
 8005088:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800508c:	2302      	movs	r3, #2
 800508e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005092:	4b0e      	ldr	r3, [pc, #56]	; (80050cc <HAL_RTCEx_SetSSRU_IT+0x50>)
 8005094:	22ca      	movs	r2, #202	; 0xca
 8005096:	625a      	str	r2, [r3, #36]	; 0x24
 8005098:	2253      	movs	r2, #83	; 0x53
 800509a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800509c:	699a      	ldr	r2, [r3, #24]
 800509e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050a2:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80050a4:	4c0a      	ldr	r4, [pc, #40]	; (80050d0 <HAL_RTCEx_SetSSRU_IT+0x54>)
 80050a6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80050aa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80050ae:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050b2:	22ff      	movs	r2, #255	; 0xff
 80050b4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80050b6:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80050ba:	2300      	movs	r3, #0
 80050bc:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80050c0:	4618      	mov	r0, r3
}
 80050c2:	bc10      	pop	{r4}
 80050c4:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80050c6:	2002      	movs	r0, #2
}
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40002800 	.word	0x40002800
 80050d0:	58000800 	.word	0x58000800

080050d4 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80050d4:	b510      	push	{r4, lr}
 80050d6:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80050d8:	4b07      	ldr	r3, [pc, #28]	; (80050f8 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80050da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80050e0:	d103      	bne.n	80050ea <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80050e2:	2301      	movs	r3, #1
 80050e4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 80050e8:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 80050ea:	4b03      	ldr	r3, [pc, #12]	; (80050f8 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80050ec:	2240      	movs	r2, #64	; 0x40
 80050ee:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80050f0:	f7fd fa6a 	bl	80025c8 <HAL_RTCEx_SSRUEventCallback>
 80050f4:	e7f5      	b.n	80050e2 <HAL_RTCEx_SSRUIRQHandler+0xe>
 80050f6:	bf00      	nop
 80050f8:	40002800 	.word	0x40002800

080050fc <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80050fc:	4770      	bx	lr

080050fe <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80050fe:	0089      	lsls	r1, r1, #2
 8005100:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005104:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005108:	600a      	str	r2, [r1, #0]
}
 800510a:	4770      	bx	lr

0800510c <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 800510c:	0089      	lsls	r1, r1, #2
 800510e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005112:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005116:	6808      	ldr	r0, [r1, #0]
}
 8005118:	4770      	bx	lr

0800511a <HAL_SPI_ErrorCallback>:
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800511a:	4770      	bx	lr

0800511c <HAL_SPI_IRQHandler>:
{
 800511c:	b530      	push	{r4, r5, lr}
 800511e:	b085      	sub	sp, #20
 8005120:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8005122:	6802      	ldr	r2, [r0, #0]
 8005124:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8005126:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005128:	f3c3 1080 	ubfx	r0, r3, #6, #1
 800512c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005130:	d105      	bne.n	800513e <HAL_SPI_IRQHandler+0x22>
 8005132:	f013 0f01 	tst.w	r3, #1
 8005136:	d002      	beq.n	800513e <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005138:	f011 0f40 	tst.w	r1, #64	; 0x40
 800513c:	d169      	bne.n	8005212 <HAL_SPI_IRQHandler+0xf6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800513e:	f013 0f02 	tst.w	r3, #2
 8005142:	d002      	beq.n	800514a <HAL_SPI_IRQHandler+0x2e>
 8005144:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005148:	d167      	bne.n	800521a <HAL_SPI_IRQHandler+0xfe>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800514a:	f3c3 1540 	ubfx	r5, r3, #5, #1
 800514e:	f013 0f20 	tst.w	r3, #32
 8005152:	d103      	bne.n	800515c <HAL_SPI_IRQHandler+0x40>
 8005154:	b910      	cbnz	r0, 800515c <HAL_SPI_IRQHandler+0x40>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005156:	f413 7f80 	tst.w	r3, #256	; 0x100
 800515a:	d061      	beq.n	8005220 <HAL_SPI_IRQHandler+0x104>
 800515c:	f011 0f20 	tst.w	r1, #32
 8005160:	d05e      	beq.n	8005220 <HAL_SPI_IRQHandler+0x104>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005162:	b178      	cbz	r0, 8005184 <HAL_SPI_IRQHandler+0x68>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005164:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8005168:	b2c0      	uxtb	r0, r0
 800516a:	2803      	cmp	r0, #3
 800516c:	d05a      	beq.n	8005224 <HAL_SPI_IRQHandler+0x108>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800516e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005170:	f040 0004 	orr.w	r0, r0, #4
 8005174:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005176:	2000      	movs	r0, #0
 8005178:	9000      	str	r0, [sp, #0]
 800517a:	68d0      	ldr	r0, [r2, #12]
 800517c:	9000      	str	r0, [sp, #0]
 800517e:	6890      	ldr	r0, [r2, #8]
 8005180:	9000      	str	r0, [sp, #0]
 8005182:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005184:	b165      	cbz	r5, 80051a0 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005186:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005188:	f040 0001 	orr.w	r0, r0, #1
 800518c:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800518e:	2000      	movs	r0, #0
 8005190:	9002      	str	r0, [sp, #8]
 8005192:	6890      	ldr	r0, [r2, #8]
 8005194:	9002      	str	r0, [sp, #8]
 8005196:	6810      	ldr	r0, [r2, #0]
 8005198:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800519c:	6010      	str	r0, [r2, #0]
 800519e:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80051a0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80051a4:	d009      	beq.n	80051ba <HAL_SPI_IRQHandler+0x9e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80051a6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80051a8:	f043 0308 	orr.w	r3, r3, #8
 80051ac:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80051ae:	2300      	movs	r3, #0
 80051b0:	9303      	str	r3, [sp, #12]
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	9303      	str	r3, [sp, #12]
 80051b8:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051ba:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d02f      	beq.n	8005220 <HAL_SPI_IRQHandler+0x104>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80051c0:	6822      	ldr	r2, [r4, #0]
 80051c2:	6853      	ldr	r3, [r2, #4]
 80051c4:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80051c8:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80051ca:	2301      	movs	r3, #1
 80051cc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80051d0:	f011 0f03 	tst.w	r1, #3
 80051d4:	d02e      	beq.n	8005234 <HAL_SPI_IRQHandler+0x118>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80051d6:	6822      	ldr	r2, [r4, #0]
 80051d8:	6853      	ldr	r3, [r2, #4]
 80051da:	f023 0303 	bic.w	r3, r3, #3
 80051de:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 80051e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051e2:	b14b      	cbz	r3, 80051f8 <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80051e4:	4a15      	ldr	r2, [pc, #84]	; (800523c <HAL_SPI_IRQHandler+0x120>)
 80051e6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80051e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051ea:	f7fe f8e1 	bl	80033b0 <HAL_DMA_Abort_IT>
 80051ee:	b118      	cbz	r0, 80051f8 <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80051f0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80051f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051f6:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80051f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80051fa:	b18b      	cbz	r3, 8005220 <HAL_SPI_IRQHandler+0x104>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80051fc:	4a0f      	ldr	r2, [pc, #60]	; (800523c <HAL_SPI_IRQHandler+0x120>)
 80051fe:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005200:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005202:	f7fe f8d5 	bl	80033b0 <HAL_DMA_Abort_IT>
 8005206:	b158      	cbz	r0, 8005220 <HAL_SPI_IRQHandler+0x104>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005208:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800520a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800520e:	6623      	str	r3, [r4, #96]	; 0x60
 8005210:	e006      	b.n	8005220 <HAL_SPI_IRQHandler+0x104>
    hspi->RxISR(hspi);
 8005212:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005214:	4620      	mov	r0, r4
 8005216:	4798      	blx	r3
    return;
 8005218:	e002      	b.n	8005220 <HAL_SPI_IRQHandler+0x104>
    hspi->TxISR(hspi);
 800521a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800521c:	4620      	mov	r0, r4
 800521e:	4798      	blx	r3
}
 8005220:	b005      	add	sp, #20
 8005222:	bd30      	pop	{r4, r5, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005224:	2300      	movs	r3, #0
 8005226:	9301      	str	r3, [sp, #4]
 8005228:	68d3      	ldr	r3, [r2, #12]
 800522a:	9301      	str	r3, [sp, #4]
 800522c:	6893      	ldr	r3, [r2, #8]
 800522e:	9301      	str	r3, [sp, #4]
 8005230:	9b01      	ldr	r3, [sp, #4]
        return;
 8005232:	e7f5      	b.n	8005220 <HAL_SPI_IRQHandler+0x104>
        HAL_SPI_ErrorCallback(hspi);
 8005234:	4620      	mov	r0, r4
 8005236:	f7ff ff70 	bl	800511a <HAL_SPI_ErrorCallback>
    return;
 800523a:	e7f1      	b.n	8005220 <HAL_SPI_IRQHandler+0x104>
 800523c:	08005241 	.word	0x08005241

08005240 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005240:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005242:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800524a:	87c3      	strh	r3, [r0, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800524c:	f7ff ff65 	bl	800511a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005250:	bd08      	pop	{r3, pc}
	...

08005254 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005254:	4b07      	ldr	r3, [pc, #28]	; (8005274 <SUBGHZSPI_Init+0x20>)
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800525c:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800525e:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 8005262:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005264:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8005268:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005270:	601a      	str	r2, [r3, #0]
}
 8005272:	4770      	bx	lr
 8005274:	58010000 	.word	0x58010000

08005278 <HAL_SUBGHZ_Init>:
{
 8005278:	b530      	push	{r4, r5, lr}
 800527a:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 800527c:	2800      	cmp	r0, #0
 800527e:	d04e      	beq.n	800531e <HAL_SUBGHZ_Init+0xa6>
 8005280:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8005282:	7983      	ldrb	r3, [r0, #6]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d03b      	beq.n	8005300 <HAL_SUBGHZ_Init+0x88>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005288:	2302      	movs	r3, #2
 800528a:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800528c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005290:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005294:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005298:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800529c:	4b21      	ldr	r3, [pc, #132]	; (8005324 <HAL_SUBGHZ_Init+0xac>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80052a4:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80052a8:	2264      	movs	r2, #100	; 0x64
 80052aa:	fb02 f303 	mul.w	r3, r2, r3
 80052ae:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 80052b0:	9b01      	ldr	r3, [sp, #4]
 80052b2:	b34b      	cbz	r3, 8005308 <HAL_SUBGHZ_Init+0x90>
    count--;
 80052b4:	9b01      	ldr	r3, [sp, #4]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80052ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052c2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80052c6:	d1f3      	bne.n	80052b0 <HAL_SUBGHZ_Init+0x38>
    status = HAL_OK;
 80052c8:	2500      	movs	r5, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80052ca:	4b17      	ldr	r3, [pc, #92]	; (8005328 <HAL_SUBGHZ_Init+0xb0>)
 80052cc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80052d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(EXTI->IMR2, ExtiLine);
 80052d8:	4914      	ldr	r1, [pc, #80]	; (800532c <HAL_SUBGHZ_Init+0xb4>)
 80052da:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80052de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052e2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ec:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80052ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052f2:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 80052f4:	b15d      	cbz	r5, 800530e <HAL_SUBGHZ_Init+0x96>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80052f6:	2301      	movs	r3, #1
 80052f8:	71a3      	strb	r3, [r4, #6]
}
 80052fa:	4628      	mov	r0, r5
 80052fc:	b003      	add	sp, #12
 80052fe:	bd30      	pop	{r4, r5, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 8005300:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8005302:	f7fc ffb5 	bl	8002270 <HAL_SUBGHZ_MspInit>
 8005306:	e7bf      	b.n	8005288 <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005308:	2501      	movs	r5, #1
 800530a:	60a5      	str	r5, [r4, #8]
      break;
 800530c:	e7dd      	b.n	80052ca <HAL_SUBGHZ_Init+0x52>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800530e:	6820      	ldr	r0, [r4, #0]
 8005310:	f7ff ffa0 	bl	8005254 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005314:	2301      	movs	r3, #1
 8005316:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005318:	2300      	movs	r3, #0
 800531a:	60a3      	str	r3, [r4, #8]
 800531c:	e7eb      	b.n	80052f6 <HAL_SUBGHZ_Init+0x7e>
    return status;
 800531e:	2501      	movs	r5, #1
 8005320:	e7eb      	b.n	80052fa <HAL_SUBGHZ_Init+0x82>
 8005322:	bf00      	nop
 8005324:	20000058 	.word	0x20000058
 8005328:	58000400 	.word	0x58000400
 800532c:	58000800 	.word	0x58000800

08005330 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005330:	b082      	sub	sp, #8
 8005332:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005334:	4b1a      	ldr	r3, [pc, #104]	; (80053a0 <SUBGHZSPI_Transmit+0x70>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800533c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005340:	2064      	movs	r0, #100	; 0x64
 8005342:	fb00 f303 	mul.w	r3, r0, r3
 8005346:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005348:	9b01      	ldr	r3, [sp, #4]
 800534a:	b14b      	cbz	r3, 8005360 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800534c:	9b01      	ldr	r3, [sp, #4]
 800534e:	3b01      	subs	r3, #1
 8005350:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005352:	4b14      	ldr	r3, [pc, #80]	; (80053a4 <SUBGHZSPI_Transmit+0x74>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f013 0f02 	tst.w	r3, #2
 800535a:	d0f5      	beq.n	8005348 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800535c:	2000      	movs	r0, #0
 800535e:	e001      	b.n	8005364 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005360:	2001      	movs	r0, #1
 8005362:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8005364:	4b10      	ldr	r3, [pc, #64]	; (80053a8 <SUBGHZSPI_Transmit+0x78>)
 8005366:	7019      	strb	r1, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005368:	4b0d      	ldr	r3, [pc, #52]	; (80053a0 <SUBGHZSPI_Transmit+0x70>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005370:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005374:	2164      	movs	r1, #100	; 0x64
 8005376:	fb01 f303 	mul.w	r3, r1, r3
 800537a:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800537c:	9b01      	ldr	r3, [sp, #4]
 800537e:	b143      	cbz	r3, 8005392 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005380:	9b01      	ldr	r3, [sp, #4]
 8005382:	3b01      	subs	r3, #1
 8005384:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005386:	4b07      	ldr	r3, [pc, #28]	; (80053a4 <SUBGHZSPI_Transmit+0x74>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f013 0f01 	tst.w	r3, #1
 800538e:	d0f5      	beq.n	800537c <SUBGHZSPI_Transmit+0x4c>
 8005390:	e001      	b.n	8005396 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005392:	2001      	movs	r0, #1
 8005394:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8005396:	4b03      	ldr	r3, [pc, #12]	; (80053a4 <SUBGHZSPI_Transmit+0x74>)
 8005398:	68db      	ldr	r3, [r3, #12]

  return status;
}
 800539a:	b002      	add	sp, #8
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	20000058 	.word	0x20000058
 80053a4:	58010000 	.word	0x58010000
 80053a8:	5801000c 	.word	0x5801000c

080053ac <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80053ac:	b410      	push	{r4}
 80053ae:	b083      	sub	sp, #12
 80053b0:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80053b2:	4b1c      	ldr	r3, [pc, #112]	; (8005424 <SUBGHZSPI_Receive+0x78>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80053ba:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80053be:	2064      	movs	r0, #100	; 0x64
 80053c0:	fb00 f303 	mul.w	r3, r0, r3
 80053c4:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80053c6:	9b01      	ldr	r3, [sp, #4]
 80053c8:	b14b      	cbz	r3, 80053de <SUBGHZSPI_Receive+0x32>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80053ca:	9b01      	ldr	r3, [sp, #4]
 80053cc:	3b01      	subs	r3, #1
 80053ce:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80053d0:	4b15      	ldr	r3, [pc, #84]	; (8005428 <SUBGHZSPI_Receive+0x7c>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f013 0f02 	tst.w	r3, #2
 80053d8:	d0f5      	beq.n	80053c6 <SUBGHZSPI_Receive+0x1a>
  HAL_StatusTypeDef status = HAL_OK;
 80053da:	2000      	movs	r0, #0
 80053dc:	e001      	b.n	80053e2 <SUBGHZSPI_Receive+0x36>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80053de:	2001      	movs	r0, #1
 80053e0:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 80053e2:	4b12      	ldr	r3, [pc, #72]	; (800542c <SUBGHZSPI_Receive+0x80>)
 80053e4:	24ff      	movs	r4, #255	; 0xff
 80053e6:	701c      	strb	r4, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80053e8:	4b0e      	ldr	r3, [pc, #56]	; (8005424 <SUBGHZSPI_Receive+0x78>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80053f0:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80053f4:	2464      	movs	r4, #100	; 0x64
 80053f6:	fb04 f303 	mul.w	r3, r4, r3
 80053fa:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80053fc:	9b01      	ldr	r3, [sp, #4]
 80053fe:	b143      	cbz	r3, 8005412 <SUBGHZSPI_Receive+0x66>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005400:	9b01      	ldr	r3, [sp, #4]
 8005402:	3b01      	subs	r3, #1
 8005404:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005406:	4b08      	ldr	r3, [pc, #32]	; (8005428 <SUBGHZSPI_Receive+0x7c>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f013 0f01 	tst.w	r3, #1
 800540e:	d0f5      	beq.n	80053fc <SUBGHZSPI_Receive+0x50>
 8005410:	e001      	b.n	8005416 <SUBGHZSPI_Receive+0x6a>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005412:	2001      	movs	r0, #1
 8005414:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8005416:	4b04      	ldr	r3, [pc, #16]	; (8005428 <SUBGHZSPI_Receive+0x7c>)
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	700b      	strb	r3, [r1, #0]

  return status;
}
 800541c:	b003      	add	sp, #12
 800541e:	bc10      	pop	{r4}
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	20000058 	.word	0x20000058
 8005428:	58010000 	.word	0x58010000
 800542c:	5801000c 	.word	0x5801000c

08005430 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005430:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8005432:	4b13      	ldr	r3, [pc, #76]	; (8005480 <SUBGHZ_WaitOnBusy+0x50>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800543a:	f3c3 434b 	ubfx	r3, r3, #17, #12
 800543e:	2264      	movs	r2, #100	; 0x64
 8005440:	fb02 f303 	mul.w	r3, r2, r3
 8005444:	9301      	str	r3, [sp, #4]
 8005446:	e006      	b.n	8005456 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8005448:	2302      	movs	r3, #2
 800544a:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 800544c:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 800544e:	b002      	add	sp, #8
 8005450:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8005452:	4213      	tst	r3, r2
 8005454:	d012      	beq.n	800547c <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8005456:	4b0b      	ldr	r3, [pc, #44]	; (8005484 <SUBGHZ_WaitOnBusy+0x54>)
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	f013 0304 	ands.w	r3, r3, #4
 800545e:	d000      	beq.n	8005462 <SUBGHZ_WaitOnBusy+0x32>
 8005460:	2301      	movs	r3, #1
    if (count == 0U)
 8005462:	9a01      	ldr	r2, [sp, #4]
 8005464:	2a00      	cmp	r2, #0
 8005466:	d0ef      	beq.n	8005448 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8005468:	9a01      	ldr	r2, [sp, #4]
 800546a:	3a01      	subs	r2, #1
 800546c:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800546e:	4a05      	ldr	r2, [pc, #20]	; (8005484 <SUBGHZ_WaitOnBusy+0x54>)
 8005470:	6952      	ldr	r2, [r2, #20]
 8005472:	f012 0202 	ands.w	r2, r2, #2
 8005476:	d0ec      	beq.n	8005452 <SUBGHZ_WaitOnBusy+0x22>
 8005478:	2201      	movs	r2, #1
 800547a:	e7ea      	b.n	8005452 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 800547c:	2000      	movs	r0, #0
 800547e:	e7e6      	b.n	800544e <SUBGHZ_WaitOnBusy+0x1e>
 8005480:	20000058 	.word	0x20000058
 8005484:	58000400 	.word	0x58000400

08005488 <SUBGHZ_CheckDeviceReady>:
{
 8005488:	b500      	push	{lr}
 800548a:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800548c:	7903      	ldrb	r3, [r0, #4]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d004      	beq.n	800549c <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8005492:	f7ff ffcd 	bl	8005430 <SUBGHZ_WaitOnBusy>
}
 8005496:	b003      	add	sp, #12
 8005498:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 800549c:	4b0d      	ldr	r3, [pc, #52]	; (80054d4 <SUBGHZ_CheckDeviceReady+0x4c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80054a4:	f3c3 334f 	ubfx	r3, r3, #13, #16
 80054a8:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80054aa:	4a0b      	ldr	r2, [pc, #44]	; (80054d8 <SUBGHZ_CheckDeviceReady+0x50>)
 80054ac:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80054b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 80054b8:	9b01      	ldr	r3, [sp, #4]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 80054be:	9b01      	ldr	r3, [sp, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1f9      	bne.n	80054b8 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80054c4:	4a04      	ldr	r2, [pc, #16]	; (80054d8 <SUBGHZ_CheckDeviceReady+0x50>)
 80054c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80054ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80054d2:	e7de      	b.n	8005492 <SUBGHZ_CheckDeviceReady+0xa>
 80054d4:	20000058 	.word	0x20000058
 80054d8:	58000400 	.word	0x58000400

080054dc <HAL_SUBGHZ_WriteRegisters>:
{
 80054dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054e0:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80054e2:	7980      	ldrb	r0, [r0, #6]
 80054e4:	fa5f f880 	uxtb.w	r8, r0
 80054e8:	f1b8 0f01 	cmp.w	r8, #1
 80054ec:	d13e      	bne.n	800556c <HAL_SUBGHZ_WriteRegisters+0x90>
 80054ee:	460c      	mov	r4, r1
 80054f0:	4617      	mov	r7, r2
 80054f2:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80054f4:	796b      	ldrb	r3, [r5, #5]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d03b      	beq.n	8005572 <HAL_SUBGHZ_WriteRegisters+0x96>
 80054fa:	2301      	movs	r3, #1
 80054fc:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80054fe:	2302      	movs	r3, #2
 8005500:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005502:	4628      	mov	r0, r5
 8005504:	f7ff ffc0 	bl	8005488 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005508:	4a1b      	ldr	r2, [pc, #108]	; (8005578 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 800550a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800550e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8005516:	210d      	movs	r1, #13
 8005518:	4628      	mov	r0, r5
 800551a:	f7ff ff09 	bl	8005330 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800551e:	0a21      	lsrs	r1, r4, #8
 8005520:	4628      	mov	r0, r5
 8005522:	f7ff ff05 	bl	8005330 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005526:	b2e1      	uxtb	r1, r4
 8005528:	4628      	mov	r0, r5
 800552a:	f7ff ff01 	bl	8005330 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800552e:	2400      	movs	r4, #0
 8005530:	e005      	b.n	800553e <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005532:	5d39      	ldrb	r1, [r7, r4]
 8005534:	4628      	mov	r0, r5
 8005536:	f7ff fefb 	bl	8005330 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800553a:	3401      	adds	r4, #1
 800553c:	b2a4      	uxth	r4, r4
 800553e:	42b4      	cmp	r4, r6
 8005540:	d3f7      	bcc.n	8005532 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005542:	4a0d      	ldr	r2, [pc, #52]	; (8005578 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8005544:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800554c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005550:	4628      	mov	r0, r5
 8005552:	f7ff ff6d 	bl	8005430 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005556:	68ab      	ldr	r3, [r5, #8]
 8005558:	b90b      	cbnz	r3, 800555e <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 800555a:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800555e:	2301      	movs	r3, #1
 8005560:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005562:	2300      	movs	r3, #0
 8005564:	716b      	strb	r3, [r5, #5]
}
 8005566:	4640      	mov	r0, r8
 8005568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800556c:	f04f 0802 	mov.w	r8, #2
 8005570:	e7f9      	b.n	8005566 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8005572:	f04f 0802 	mov.w	r8, #2
 8005576:	e7f6      	b.n	8005566 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8005578:	58000400 	.word	0x58000400

0800557c <HAL_SUBGHZ_ReadRegisters>:
{
 800557c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005580:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005582:	7980      	ldrb	r0, [r0, #6]
 8005584:	fa5f f880 	uxtb.w	r8, r0
 8005588:	f1b8 0f01 	cmp.w	r8, #1
 800558c:	d141      	bne.n	8005612 <HAL_SUBGHZ_ReadRegisters+0x96>
 800558e:	460c      	mov	r4, r1
 8005590:	4615      	mov	r5, r2
 8005592:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8005594:	7973      	ldrb	r3, [r6, #5]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d03e      	beq.n	8005618 <HAL_SUBGHZ_ReadRegisters+0x9c>
 800559a:	2301      	movs	r3, #1
 800559c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800559e:	4630      	mov	r0, r6
 80055a0:	f7ff ff72 	bl	8005488 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80055a4:	4a1e      	ldr	r2, [pc, #120]	; (8005620 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 80055a6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80055aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80055b2:	211d      	movs	r1, #29
 80055b4:	4630      	mov	r0, r6
 80055b6:	f7ff febb 	bl	8005330 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80055ba:	0a21      	lsrs	r1, r4, #8
 80055bc:	4630      	mov	r0, r6
 80055be:	f7ff feb7 	bl	8005330 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80055c2:	b2e1      	uxtb	r1, r4
 80055c4:	4630      	mov	r0, r6
 80055c6:	f7ff feb3 	bl	8005330 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80055ca:	2100      	movs	r1, #0
 80055cc:	4630      	mov	r0, r6
 80055ce:	f7ff feaf 	bl	8005330 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80055d2:	2400      	movs	r4, #0
 80055d4:	e006      	b.n	80055e4 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80055d6:	4629      	mov	r1, r5
 80055d8:	4630      	mov	r0, r6
 80055da:	f7ff fee7 	bl	80053ac <SUBGHZSPI_Receive>
      pData++;
 80055de:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80055e0:	3401      	adds	r4, #1
 80055e2:	b2a4      	uxth	r4, r4
 80055e4:	42bc      	cmp	r4, r7
 80055e6:	d3f6      	bcc.n	80055d6 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80055e8:	4a0d      	ldr	r2, [pc, #52]	; (8005620 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 80055ea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80055ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80055f6:	4630      	mov	r0, r6
 80055f8:	f7ff ff1a 	bl	8005430 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80055fc:	68b3      	ldr	r3, [r6, #8]
 80055fe:	b90b      	cbnz	r3, 8005604 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8005600:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005604:	2301      	movs	r3, #1
 8005606:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005608:	2300      	movs	r3, #0
 800560a:	7173      	strb	r3, [r6, #5]
}
 800560c:	4640      	mov	r0, r8
 800560e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005612:	f04f 0802 	mov.w	r8, #2
 8005616:	e7f9      	b.n	800560c <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8005618:	f04f 0802 	mov.w	r8, #2
 800561c:	e7f6      	b.n	800560c <HAL_SUBGHZ_ReadRegisters+0x90>
 800561e:	bf00      	nop
 8005620:	58000400 	.word	0x58000400

08005624 <HAL_SUBGHZ_ExecSetCmd>:
{
 8005624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005628:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800562a:	7980      	ldrb	r0, [r0, #6]
 800562c:	fa5f f980 	uxtb.w	r9, r0
 8005630:	f1b9 0f01 	cmp.w	r9, #1
 8005634:	d143      	bne.n	80056be <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8005636:	4688      	mov	r8, r1
 8005638:	4617      	mov	r7, r2
 800563a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 800563c:	796b      	ldrb	r3, [r5, #5]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d040      	beq.n	80056c4 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8005642:	2301      	movs	r3, #1
 8005644:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005646:	4628      	mov	r0, r5
 8005648:	f7ff ff1e 	bl	8005488 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800564c:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8005650:	d005      	beq.n	800565e <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8005652:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 8005656:	d002      	beq.n	800565e <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8005658:	2300      	movs	r3, #0
 800565a:	712b      	strb	r3, [r5, #4]
 800565c:	e001      	b.n	8005662 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800565e:	2301      	movs	r3, #1
 8005660:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005662:	4a1a      	ldr	r2, [pc, #104]	; (80056cc <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8005664:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005668:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800566c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005670:	4641      	mov	r1, r8
 8005672:	4628      	mov	r0, r5
 8005674:	f7ff fe5c 	bl	8005330 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005678:	2400      	movs	r4, #0
 800567a:	e005      	b.n	8005688 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800567c:	5d39      	ldrb	r1, [r7, r4]
 800567e:	4628      	mov	r0, r5
 8005680:	f7ff fe56 	bl	8005330 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005684:	3401      	adds	r4, #1
 8005686:	b2a4      	uxth	r4, r4
 8005688:	42b4      	cmp	r4, r6
 800568a:	d3f7      	bcc.n	800567c <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800568c:	4a0f      	ldr	r2, [pc, #60]	; (80056cc <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 800568e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005696:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 800569a:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 800569e:	d10a      	bne.n	80056b6 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80056a0:	68ab      	ldr	r3, [r5, #8]
 80056a2:	b90b      	cbnz	r3, 80056a8 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 80056a4:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80056a8:	2301      	movs	r3, #1
 80056aa:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80056ac:	2300      	movs	r3, #0
 80056ae:	716b      	strb	r3, [r5, #5]
}
 80056b0:	4648      	mov	r0, r9
 80056b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80056b6:	4628      	mov	r0, r5
 80056b8:	f7ff feba 	bl	8005430 <SUBGHZ_WaitOnBusy>
 80056bc:	e7f0      	b.n	80056a0 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 80056be:	f04f 0902 	mov.w	r9, #2
 80056c2:	e7f5      	b.n	80056b0 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 80056c4:	f04f 0902 	mov.w	r9, #2
 80056c8:	e7f2      	b.n	80056b0 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 80056ca:	bf00      	nop
 80056cc:	58000400 	.word	0x58000400

080056d0 <HAL_SUBGHZ_ExecGetCmd>:
{
 80056d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056d4:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80056d6:	7980      	ldrb	r0, [r0, #6]
 80056d8:	fa5f f880 	uxtb.w	r8, r0
 80056dc:	f1b8 0f01 	cmp.w	r8, #1
 80056e0:	d139      	bne.n	8005756 <HAL_SUBGHZ_ExecGetCmd+0x86>
 80056e2:	460c      	mov	r4, r1
 80056e4:	4615      	mov	r5, r2
 80056e6:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80056e8:	7973      	ldrb	r3, [r6, #5]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d036      	beq.n	800575c <HAL_SUBGHZ_ExecGetCmd+0x8c>
 80056ee:	2301      	movs	r3, #1
 80056f0:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80056f2:	4630      	mov	r0, r6
 80056f4:	f7ff fec8 	bl	8005488 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80056f8:	4a1a      	ldr	r2, [pc, #104]	; (8005764 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80056fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80056fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005706:	4621      	mov	r1, r4
 8005708:	4630      	mov	r0, r6
 800570a:	f7ff fe11 	bl	8005330 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800570e:	2100      	movs	r1, #0
 8005710:	4630      	mov	r0, r6
 8005712:	f7ff fe0d 	bl	8005330 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005716:	2400      	movs	r4, #0
 8005718:	e006      	b.n	8005728 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800571a:	4629      	mov	r1, r5
 800571c:	4630      	mov	r0, r6
 800571e:	f7ff fe45 	bl	80053ac <SUBGHZSPI_Receive>
      pData++;
 8005722:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005724:	3401      	adds	r4, #1
 8005726:	b2a4      	uxth	r4, r4
 8005728:	42bc      	cmp	r4, r7
 800572a:	d3f6      	bcc.n	800571a <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800572c:	4a0d      	ldr	r2, [pc, #52]	; (8005764 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 800572e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800573a:	4630      	mov	r0, r6
 800573c:	f7ff fe78 	bl	8005430 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005740:	68b3      	ldr	r3, [r6, #8]
 8005742:	b90b      	cbnz	r3, 8005748 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8005744:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005748:	2301      	movs	r3, #1
 800574a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 800574c:	2300      	movs	r3, #0
 800574e:	7173      	strb	r3, [r6, #5]
}
 8005750:	4640      	mov	r0, r8
 8005752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005756:	f04f 0802 	mov.w	r8, #2
 800575a:	e7f9      	b.n	8005750 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 800575c:	f04f 0802 	mov.w	r8, #2
 8005760:	e7f6      	b.n	8005750 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8005762:	bf00      	nop
 8005764:	58000400 	.word	0x58000400

08005768 <HAL_SUBGHZ_IRQHandler>:
{
 8005768:	b530      	push	{r4, r5, lr}
 800576a:	b083      	sub	sp, #12
 800576c:	4605      	mov	r5, r0
  uint8_t tmpisr[2] = {0};
 800576e:	2300      	movs	r3, #0
 8005770:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8005774:	2302      	movs	r3, #2
 8005776:	aa01      	add	r2, sp, #4
 8005778:	2112      	movs	r1, #18
 800577a:	f7ff ffa9 	bl	80056d0 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 800577e:	f89d 4004 	ldrb.w	r4, [sp, #4]
  itsource = (itsource << 8) | tmpisr[1];
 8005782:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005786:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800578a:	f013 0f01 	tst.w	r3, #1
 800578e:	d126      	bne.n	80057de <HAL_SUBGHZ_IRQHandler+0x76>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8005790:	f014 0f02 	tst.w	r4, #2
 8005794:	d127      	bne.n	80057e6 <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8005796:	f014 0f04 	tst.w	r4, #4
 800579a:	d128      	bne.n	80057ee <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800579c:	f014 0f08 	tst.w	r4, #8
 80057a0:	d129      	bne.n	80057f6 <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80057a2:	f014 0f10 	tst.w	r4, #16
 80057a6:	d12a      	bne.n	80057fe <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80057a8:	f014 0f20 	tst.w	r4, #32
 80057ac:	d12b      	bne.n	8005806 <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80057ae:	f014 0f40 	tst.w	r4, #64	; 0x40
 80057b2:	d12c      	bne.n	800580e <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80057b4:	f014 0f80 	tst.w	r4, #128	; 0x80
 80057b8:	d006      	beq.n	80057c8 <HAL_SUBGHZ_IRQHandler+0x60>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80057ba:	f414 7f80 	tst.w	r4, #256	; 0x100
 80057be:	d02a      	beq.n	8005816 <HAL_SUBGHZ_IRQHandler+0xae>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80057c0:	2101      	movs	r1, #1
 80057c2:	4628      	mov	r0, r5
 80057c4:	f010 fe64 	bl	8016490 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80057c8:	f414 7f00 	tst.w	r4, #512	; 0x200
 80057cc:	d128      	bne.n	8005820 <HAL_SUBGHZ_IRQHandler+0xb8>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80057ce:	2302      	movs	r3, #2
 80057d0:	aa01      	add	r2, sp, #4
 80057d2:	4619      	mov	r1, r3
 80057d4:	4628      	mov	r0, r5
 80057d6:	f7ff ff25 	bl	8005624 <HAL_SUBGHZ_ExecSetCmd>
}
 80057da:	b003      	add	sp, #12
 80057dc:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80057de:	4628      	mov	r0, r5
 80057e0:	f010 fe3e 	bl	8016460 <HAL_SUBGHZ_TxCpltCallback>
 80057e4:	e7d4      	b.n	8005790 <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80057e6:	4628      	mov	r0, r5
 80057e8:	f010 fe42 	bl	8016470 <HAL_SUBGHZ_RxCpltCallback>
 80057ec:	e7d3      	b.n	8005796 <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80057ee:	4628      	mov	r0, r5
 80057f0:	f010 fe72 	bl	80164d8 <HAL_SUBGHZ_PreambleDetectedCallback>
 80057f4:	e7d2      	b.n	800579c <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80057f6:	4628      	mov	r0, r5
 80057f8:	f010 fe76 	bl	80164e8 <HAL_SUBGHZ_SyncWordValidCallback>
 80057fc:	e7d1      	b.n	80057a2 <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80057fe:	4628      	mov	r0, r5
 8005800:	f010 fe7a 	bl	80164f8 <HAL_SUBGHZ_HeaderValidCallback>
 8005804:	e7d0      	b.n	80057a8 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8005806:	4628      	mov	r0, r5
 8005808:	f010 fe5e 	bl	80164c8 <HAL_SUBGHZ_HeaderErrorCallback>
 800580c:	e7cf      	b.n	80057ae <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800580e:	4628      	mov	r0, r5
 8005810:	f010 fe36 	bl	8016480 <HAL_SUBGHZ_CRCErrorCallback>
 8005814:	e7ce      	b.n	80057b4 <HAL_SUBGHZ_IRQHandler+0x4c>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8005816:	2100      	movs	r1, #0
 8005818:	4628      	mov	r0, r5
 800581a:	f010 fe39 	bl	8016490 <HAL_SUBGHZ_CADStatusCallback>
 800581e:	e7d3      	b.n	80057c8 <HAL_SUBGHZ_IRQHandler+0x60>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8005820:	4628      	mov	r0, r5
 8005822:	f010 fe47 	bl	80164b4 <HAL_SUBGHZ_RxTxTimeoutCallback>
 8005826:	e7d2      	b.n	80057ce <HAL_SUBGHZ_IRQHandler+0x66>

08005828 <HAL_SUBGHZ_WriteBuffer>:
{
 8005828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800582c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800582e:	7980      	ldrb	r0, [r0, #6]
 8005830:	fa5f f880 	uxtb.w	r8, r0
 8005834:	f1b8 0f01 	cmp.w	r8, #1
 8005838:	d138      	bne.n	80058ac <HAL_SUBGHZ_WriteBuffer+0x84>
 800583a:	460c      	mov	r4, r1
 800583c:	4617      	mov	r7, r2
 800583e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005840:	796b      	ldrb	r3, [r5, #5]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d035      	beq.n	80058b2 <HAL_SUBGHZ_WriteBuffer+0x8a>
 8005846:	2301      	movs	r3, #1
 8005848:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800584a:	4628      	mov	r0, r5
 800584c:	f7ff fe1c 	bl	8005488 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005850:	4a19      	ldr	r2, [pc, #100]	; (80058b8 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8005852:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005856:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800585a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800585e:	210e      	movs	r1, #14
 8005860:	4628      	mov	r0, r5
 8005862:	f7ff fd65 	bl	8005330 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005866:	4621      	mov	r1, r4
 8005868:	4628      	mov	r0, r5
 800586a:	f7ff fd61 	bl	8005330 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800586e:	2400      	movs	r4, #0
 8005870:	e005      	b.n	800587e <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005872:	5d39      	ldrb	r1, [r7, r4]
 8005874:	4628      	mov	r0, r5
 8005876:	f7ff fd5b 	bl	8005330 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800587a:	3401      	adds	r4, #1
 800587c:	b2a4      	uxth	r4, r4
 800587e:	42b4      	cmp	r4, r6
 8005880:	d3f7      	bcc.n	8005872 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005882:	4a0d      	ldr	r2, [pc, #52]	; (80058b8 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8005884:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800588c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005890:	4628      	mov	r0, r5
 8005892:	f7ff fdcd 	bl	8005430 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005896:	68ab      	ldr	r3, [r5, #8]
 8005898:	b90b      	cbnz	r3, 800589e <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 800589a:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800589e:	2301      	movs	r3, #1
 80058a0:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80058a2:	2300      	movs	r3, #0
 80058a4:	716b      	strb	r3, [r5, #5]
}
 80058a6:	4640      	mov	r0, r8
 80058a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80058ac:	f04f 0802 	mov.w	r8, #2
 80058b0:	e7f9      	b.n	80058a6 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 80058b2:	f04f 0802 	mov.w	r8, #2
 80058b6:	e7f6      	b.n	80058a6 <HAL_SUBGHZ_WriteBuffer+0x7e>
 80058b8:	58000400 	.word	0x58000400

080058bc <HAL_SUBGHZ_ReadBuffer>:
{
 80058bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c0:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80058c2:	7980      	ldrb	r0, [r0, #6]
 80058c4:	fa5f f880 	uxtb.w	r8, r0
 80058c8:	f1b8 0f01 	cmp.w	r8, #1
 80058cc:	d13d      	bne.n	800594a <HAL_SUBGHZ_ReadBuffer+0x8e>
 80058ce:	460c      	mov	r4, r1
 80058d0:	4615      	mov	r5, r2
 80058d2:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80058d4:	7973      	ldrb	r3, [r6, #5]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d03a      	beq.n	8005950 <HAL_SUBGHZ_ReadBuffer+0x94>
 80058da:	2301      	movs	r3, #1
 80058dc:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80058de:	4630      	mov	r0, r6
 80058e0:	f7ff fdd2 	bl	8005488 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80058e4:	4a1c      	ldr	r2, [pc, #112]	; (8005958 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 80058e6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80058ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80058f2:	211e      	movs	r1, #30
 80058f4:	4630      	mov	r0, r6
 80058f6:	f7ff fd1b 	bl	8005330 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80058fa:	4621      	mov	r1, r4
 80058fc:	4630      	mov	r0, r6
 80058fe:	f7ff fd17 	bl	8005330 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005902:	2100      	movs	r1, #0
 8005904:	4630      	mov	r0, r6
 8005906:	f7ff fd13 	bl	8005330 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800590a:	2400      	movs	r4, #0
 800590c:	e006      	b.n	800591c <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800590e:	4629      	mov	r1, r5
 8005910:	4630      	mov	r0, r6
 8005912:	f7ff fd4b 	bl	80053ac <SUBGHZSPI_Receive>
      pData++;
 8005916:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005918:	3401      	adds	r4, #1
 800591a:	b2a4      	uxth	r4, r4
 800591c:	42bc      	cmp	r4, r7
 800591e:	d3f6      	bcc.n	800590e <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005920:	4a0d      	ldr	r2, [pc, #52]	; (8005958 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8005922:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800592a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800592e:	4630      	mov	r0, r6
 8005930:	f7ff fd7e 	bl	8005430 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005934:	68b3      	ldr	r3, [r6, #8]
 8005936:	b90b      	cbnz	r3, 800593c <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8005938:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800593c:	2301      	movs	r3, #1
 800593e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005940:	2300      	movs	r3, #0
 8005942:	7173      	strb	r3, [r6, #5]
}
 8005944:	4640      	mov	r0, r8
 8005946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800594a:	f04f 0802 	mov.w	r8, #2
 800594e:	e7f9      	b.n	8005944 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8005950:	f04f 0802 	mov.w	r8, #2
 8005954:	e7f6      	b.n	8005944 <HAL_SUBGHZ_ReadBuffer+0x88>
 8005956:	bf00      	nop
 8005958:	58000400 	.word	0x58000400

0800595c <HAL_UART_TxHalfCpltCallback>:
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800595c:	4770      	bx	lr

0800595e <HAL_UART_RxCpltCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800595e:	4770      	bx	lr

08005960 <HAL_UART_RxHalfCpltCallback>:
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005960:	4770      	bx	lr

08005962 <HAL_UART_ErrorCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005962:	4770      	bx	lr

08005964 <HAL_UART_AbortCpltCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005964:	4770      	bx	lr

08005966 <HAL_UART_AbortTransmitCpltCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8005966:	4770      	bx	lr

08005968 <HAL_UART_AbortReceiveCpltCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005968:	4770      	bx	lr

0800596a <HAL_UARTEx_RxEventCallback>:
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800596a:	4770      	bx	lr

0800596c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800596c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596e:	e852 3f00 	ldrex	r3, [r2]
 8005972:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	e842 3100 	strex	r1, r3, [r2]
 800597a:	2900      	cmp	r1, #0
 800597c:	d1f6      	bne.n	800596c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800597e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	f102 0308 	add.w	r3, r2, #8
 8005984:	e853 3f00 	ldrex	r3, [r3]
 8005988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800598c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005990:	3208      	adds	r2, #8
 8005992:	e842 3100 	strex	r1, r3, [r2]
 8005996:	2900      	cmp	r1, #0
 8005998:	d1f1      	bne.n	800597e <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800599a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800599c:	2b01      	cmp	r3, #1
 800599e:	d006      	beq.n	80059ae <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059a0:	2320      	movs	r3, #32
 80059a2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a6:	2300      	movs	r3, #0
 80059a8:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059aa:	6703      	str	r3, [r0, #112]	; 0x70
}
 80059ac:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ae:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	e852 3f00 	ldrex	r3, [r2]
 80059b4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	e842 3100 	strex	r1, r3, [r2]
 80059bc:	2900      	cmp	r1, #0
 80059be:	d1f6      	bne.n	80059ae <UART_EndRxTransfer+0x42>
 80059c0:	e7ee      	b.n	80059a0 <UART_EndRxTransfer+0x34>

080059c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059c2:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059c4:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80059cc:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80059d0:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 80059d4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059d6:	bd08      	pop	{r3, pc}

080059d8 <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059d8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80059dc:	2b21      	cmp	r3, #33	; 0x21
 80059de:	d000      	beq.n	80059e2 <UART_TxISR_8BIT+0xa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80059e0:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 80059e2:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	b993      	cbnz	r3, 8005a10 <UART_TxISR_8BIT+0x38>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80059ea:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ec:	e852 3f00 	ldrex	r3, [r2]
 80059f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f4:	e842 3100 	strex	r1, r3, [r2]
 80059f8:	2900      	cmp	r1, #0
 80059fa:	d1f6      	bne.n	80059ea <UART_TxISR_8BIT+0x12>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059fc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fe:	e852 3f00 	ldrex	r3, [r2]
 8005a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a06:	e842 3100 	strex	r1, r3, [r2]
 8005a0a:	2900      	cmp	r1, #0
 8005a0c:	d1f6      	bne.n	80059fc <UART_TxISR_8BIT+0x24>
 8005a0e:	4770      	bx	lr
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005a10:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005a12:	781a      	ldrb	r2, [r3, #0]
 8005a14:	6803      	ldr	r3, [r0, #0]
 8005a16:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005a18:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8005a1e:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	3b01      	subs	r3, #1
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 8005a2c:	e7d8      	b.n	80059e0 <UART_TxISR_8BIT+0x8>

08005a2e <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a2e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005a32:	2b21      	cmp	r3, #33	; 0x21
 8005a34:	d000      	beq.n	8005a38 <UART_TxISR_16BIT+0xa>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005a36:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8005a38:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	b993      	cbnz	r3, 8005a66 <UART_TxISR_16BIT+0x38>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005a40:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a42:	e852 3f00 	ldrex	r3, [r2]
 8005a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4a:	e842 3100 	strex	r1, r3, [r2]
 8005a4e:	2900      	cmp	r1, #0
 8005a50:	d1f6      	bne.n	8005a40 <UART_TxISR_16BIT+0x12>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a52:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a54:	e852 3f00 	ldrex	r3, [r2]
 8005a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	e842 3100 	strex	r1, r3, [r2]
 8005a60:	2900      	cmp	r1, #0
 8005a62:	d1f6      	bne.n	8005a52 <UART_TxISR_16BIT+0x24>
 8005a64:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005a66:	6d03      	ldr	r3, [r0, #80]	; 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	6802      	ldr	r2, [r0, #0]
 8005a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a70:	6293      	str	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005a72:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005a74:	3302      	adds	r3, #2
 8005a76:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8005a78:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 8005a86:	e7d6      	b.n	8005a36 <UART_TxISR_16BIT+0x8>

08005a88 <UART_TxISR_8BIT_FIFOEN>:
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a88:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005a8c:	2b21      	cmp	r3, #33	; 0x21
 8005a8e:	d000      	beq.n	8005a92 <UART_TxISR_8BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 8005a90:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005a92:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8005a96:	e017      	b.n	8005ac8 <UART_TxISR_8BIT_FIFOEN+0x40>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005a98:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9a:	f102 0308 	add.w	r3, r2, #8
 8005a9e:	e853 3f00 	ldrex	r3, [r3]
 8005aa2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa6:	3208      	adds	r2, #8
 8005aa8:	e842 3100 	strex	r1, r3, [r2]
 8005aac:	2900      	cmp	r1, #0
 8005aae:	d1f3      	bne.n	8005a98 <UART_TxISR_8BIT_FIFOEN+0x10>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ab0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab2:	e852 3f00 	ldrex	r3, [r2]
 8005ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aba:	e842 3100 	strex	r1, r3, [r2]
 8005abe:	2900      	cmp	r1, #0
 8005ac0:	d1f6      	bne.n	8005ab0 <UART_TxISR_8BIT_FIFOEN+0x28>
 8005ac2:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d0e1      	beq.n	8005a90 <UART_TxISR_8BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 8005acc:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8005ad0:	b292      	uxth	r2, r2
 8005ad2:	2a00      	cmp	r2, #0
 8005ad4:	d0e0      	beq.n	8005a98 <UART_TxISR_8BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005ad6:	6802      	ldr	r2, [r0, #0]
 8005ad8:	69d1      	ldr	r1, [r2, #28]
 8005ada:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005ade:	d0f1      	beq.n	8005ac4 <UART_TxISR_8BIT_FIFOEN+0x3c>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005ae0:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005ae2:	7809      	ldrb	r1, [r1, #0]
 8005ae4:	6291      	str	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr++;
 8005ae6:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8005ae8:	3201      	adds	r2, #1
 8005aea:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8005aec:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8005af0:	b292      	uxth	r2, r2
 8005af2:	3a01      	subs	r2, #1
 8005af4:	b292      	uxth	r2, r2
 8005af6:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
 8005afa:	e7e3      	b.n	8005ac4 <UART_TxISR_8BIT_FIFOEN+0x3c>

08005afc <UART_TxISR_16BIT_FIFOEN>:
{
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005afc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005b00:	2b21      	cmp	r3, #33	; 0x21
 8005b02:	d000      	beq.n	8005b06 <UART_TxISR_16BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 8005b04:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005b06:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8005b0a:	e017      	b.n	8005b3c <UART_TxISR_16BIT_FIFOEN+0x40>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005b0c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0e:	f102 0308 	add.w	r3, r2, #8
 8005b12:	e853 3f00 	ldrex	r3, [r3]
 8005b16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1a:	3208      	adds	r2, #8
 8005b1c:	e842 3100 	strex	r1, r3, [r2]
 8005b20:	2900      	cmp	r1, #0
 8005b22:	d1f3      	bne.n	8005b0c <UART_TxISR_16BIT_FIFOEN+0x10>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b24:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b26:	e852 3f00 	ldrex	r3, [r2]
 8005b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2e:	e842 3100 	strex	r1, r3, [r2]
 8005b32:	2900      	cmp	r1, #0
 8005b34:	d1f6      	bne.n	8005b24 <UART_TxISR_16BIT_FIFOEN+0x28>
 8005b36:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0e1      	beq.n	8005b04 <UART_TxISR_16BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 8005b40:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8005b44:	b292      	uxth	r2, r2
 8005b46:	2a00      	cmp	r2, #0
 8005b48:	d0e0      	beq.n	8005b0c <UART_TxISR_16BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005b4a:	6802      	ldr	r2, [r0, #0]
 8005b4c:	69d1      	ldr	r1, [r2, #28]
 8005b4e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005b52:	d0f1      	beq.n	8005b38 <UART_TxISR_16BIT_FIFOEN+0x3c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8005b54:	6d01      	ldr	r1, [r0, #80]	; 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005b56:	8809      	ldrh	r1, [r1, #0]
 8005b58:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005b5c:	6291      	str	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8005b5e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8005b60:	3202      	adds	r2, #2
 8005b62:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8005b64:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8005b68:	b292      	uxth	r2, r2
 8005b6a:	3a01      	subs	r2, #1
 8005b6c:	b292      	uxth	r2, r2
 8005b6e:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
 8005b72:	e7e1      	b.n	8005b38 <UART_TxISR_16BIT_FIFOEN+0x3c>

08005b74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b74:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b76:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	e852 3f00 	ldrex	r3, [r2]
 8005b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b80:	e842 3100 	strex	r1, r3, [r2]
 8005b84:	2900      	cmp	r1, #0
 8005b86:	d1f6      	bne.n	8005b76 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b88:	2320      	movs	r3, #32
 8005b8a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	6743      	str	r3, [r0, #116]	; 0x74

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8005b92:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8005b96:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b98:	bd08      	pop	{r3, pc}

08005b9a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005b9a:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8005b9c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ba0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005ba4:	2a22      	cmp	r2, #34	; 0x22
 8005ba6:	d005      	beq.n	8005bb4 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ba8:	6802      	ldr	r2, [r0, #0]
 8005baa:	6993      	ldr	r3, [r2, #24]
 8005bac:	f043 0308 	orr.w	r3, r3, #8
 8005bb0:	6193      	str	r3, [r2, #24]
  }
}
 8005bb2:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005bb4:	6802      	ldr	r2, [r0, #0]
 8005bb6:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8005bbc:	400b      	ands	r3, r1
 8005bbe:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8005bc0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8005bc6:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8005bd4:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1e9      	bne.n	8005bb2 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bde:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be0:	e852 3f00 	ldrex	r3, [r2]
 8005be4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be8:	e842 3100 	strex	r1, r3, [r2]
 8005bec:	2900      	cmp	r1, #0
 8005bee:	d1f6      	bne.n	8005bde <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf2:	f102 0308 	add.w	r3, r2, #8
 8005bf6:	e853 3f00 	ldrex	r3, [r3]
 8005bfa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfe:	3208      	adds	r2, #8
 8005c00:	e842 3100 	strex	r1, r3, [r2]
 8005c04:	2900      	cmp	r1, #0
 8005c06:	d1f3      	bne.n	8005bf0 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8005c08:	2320      	movs	r3, #32
 8005c0a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c12:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d003      	beq.n	8005c20 <UART_RxISR_8BIT+0x86>
        huart->RxCpltCallback(huart);
 8005c18:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8005c1c:	4798      	blx	r3
 8005c1e:	e7c8      	b.n	8005bb2 <UART_RxISR_8BIT+0x18>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c20:	2300      	movs	r3, #0
 8005c22:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c24:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c26:	e852 3f00 	ldrex	r3, [r2]
 8005c2a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2e:	e842 3100 	strex	r1, r3, [r2]
 8005c32:	2900      	cmp	r1, #0
 8005c34:	d1f6      	bne.n	8005c24 <UART_RxISR_8BIT+0x8a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c36:	6803      	ldr	r3, [r0, #0]
 8005c38:	69da      	ldr	r2, [r3, #28]
 8005c3a:	f012 0f10 	tst.w	r2, #16
 8005c3e:	d001      	beq.n	8005c44 <UART_RxISR_8BIT+0xaa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c40:	2210      	movs	r2, #16
 8005c42:	621a      	str	r2, [r3, #32]
        huart->RxEventCallback(huart, huart->RxXferSize);
 8005c44:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8005c48:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005c4c:	4798      	blx	r3
 8005c4e:	e7b0      	b.n	8005bb2 <UART_RxISR_8BIT+0x18>

08005c50 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c50:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005c52:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c56:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005c5a:	2b22      	cmp	r3, #34	; 0x22
 8005c5c:	d005      	beq.n	8005c6a <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c5e:	6802      	ldr	r2, [r0, #0]
 8005c60:	6993      	ldr	r3, [r2, #24]
 8005c62:	f043 0308 	orr.w	r3, r3, #8
 8005c66:	6193      	str	r3, [r2, #24]
  }
}
 8005c68:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c6a:	6803      	ldr	r3, [r0, #0]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005c6e:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8005c70:	4013      	ands	r3, r2
 8005c72:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8005c74:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005c76:	3302      	adds	r3, #2
 8005c78:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8005c7a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8005c88:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1ea      	bne.n	8005c68 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c92:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	e852 3f00 	ldrex	r3, [r2]
 8005c98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9c:	e842 3100 	strex	r1, r3, [r2]
 8005ca0:	2900      	cmp	r1, #0
 8005ca2:	d1f6      	bne.n	8005c92 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca6:	f102 0308 	add.w	r3, r2, #8
 8005caa:	e853 3f00 	ldrex	r3, [r3]
 8005cae:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb2:	3208      	adds	r2, #8
 8005cb4:	e842 3100 	strex	r1, r3, [r2]
 8005cb8:	2900      	cmp	r1, #0
 8005cba:	d1f3      	bne.n	8005ca4 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8005cbc:	2320      	movs	r3, #32
 8005cbe:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d003      	beq.n	8005cd4 <UART_RxISR_16BIT+0x84>
        huart->RxCpltCallback(huart);
 8005ccc:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8005cd0:	4798      	blx	r3
 8005cd2:	e7c9      	b.n	8005c68 <UART_RxISR_16BIT+0x18>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cd8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cda:	e852 3f00 	ldrex	r3, [r2]
 8005cde:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce2:	e842 3100 	strex	r1, r3, [r2]
 8005ce6:	2900      	cmp	r1, #0
 8005ce8:	d1f6      	bne.n	8005cd8 <UART_RxISR_16BIT+0x88>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005cea:	6803      	ldr	r3, [r0, #0]
 8005cec:	69da      	ldr	r2, [r3, #28]
 8005cee:	f012 0f10 	tst.w	r2, #16
 8005cf2:	d001      	beq.n	8005cf8 <UART_RxISR_16BIT+0xa8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cf4:	2210      	movs	r2, #16
 8005cf6:	621a      	str	r2, [r3, #32]
        huart->RxEventCallback(huart, huart->RxXferSize);
 8005cf8:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8005cfc:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005d00:	4798      	blx	r3
 8005d02:	e7b1      	b.n	8005c68 <UART_RxISR_16BIT+0x18>

08005d04 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8005d08:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005d0c:	6803      	ldr	r3, [r0, #0]
 8005d0e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005d10:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005d14:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d18:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005d1c:	2a22      	cmp	r2, #34	; 0x22
 8005d1e:	d005      	beq.n	8005d2c <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d20:	699a      	ldr	r2, [r3, #24]
 8005d22:	f042 0208 	orr.w	r2, r2, #8
 8005d26:	619a      	str	r2, [r3, #24]
  }
}
 8005d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d2c:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8005d2e:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d32:	e00e      	b.n	8005d52 <UART_RxISR_8BIT_FIFOEN+0x4e>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d34:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005d38:	b133      	cbz	r3, 8005d48 <UART_RxISR_8BIT_FIFOEN+0x44>
          huart->ErrorCallback(huart);
 8005d3a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8005d3e:	4620      	mov	r0, r4
 8005d40:	4798      	blx	r3
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d42:	2300      	movs	r3, #0
 8005d44:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 8005d48:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d046      	beq.n	8005de0 <UART_RxISR_8BIT_FIFOEN+0xdc>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d52:	2f00      	cmp	r7, #0
 8005d54:	f000 8081 	beq.w	8005e5a <UART_RxISR_8BIT_FIFOEN+0x156>
 8005d58:	f015 0f20 	tst.w	r5, #32
 8005d5c:	d07d      	beq.n	8005e5a <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d62:	b2f3      	uxtb	r3, r6
 8005d64:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005d66:	400b      	ands	r3, r1
 8005d68:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8005d6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8005d70:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	3b01      	subs	r3, #1
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005d7e:	6823      	ldr	r3, [r4, #0]
 8005d80:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005d82:	f015 0f07 	tst.w	r5, #7
 8005d86:	d0df      	beq.n	8005d48 <UART_RxISR_8BIT_FIFOEN+0x44>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d88:	f015 0f01 	tst.w	r5, #1
 8005d8c:	d009      	beq.n	8005da2 <UART_RxISR_8BIT_FIFOEN+0x9e>
 8005d8e:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005d92:	d006      	beq.n	8005da2 <UART_RxISR_8BIT_FIFOEN+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d94:	2201      	movs	r2, #1
 8005d96:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d98:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005da2:	f015 0f02 	tst.w	r5, #2
 8005da6:	d00b      	beq.n	8005dc0 <UART_RxISR_8BIT_FIFOEN+0xbc>
 8005da8:	f018 0f01 	tst.w	r8, #1
 8005dac:	d008      	beq.n	8005dc0 <UART_RxISR_8BIT_FIFOEN+0xbc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	2202      	movs	r2, #2
 8005db2:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005db4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005db8:	f043 0304 	orr.w	r3, r3, #4
 8005dbc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dc0:	f015 0f04 	tst.w	r5, #4
 8005dc4:	d0b6      	beq.n	8005d34 <UART_RxISR_8BIT_FIFOEN+0x30>
 8005dc6:	f018 0f01 	tst.w	r8, #1
 8005dca:	d0b3      	beq.n	8005d34 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	2204      	movs	r2, #4
 8005dd0:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dd2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005dd6:	f043 0302 	orr.w	r3, r3, #2
 8005dda:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005dde:	e7a9      	b.n	8005d34 <UART_RxISR_8BIT_FIFOEN+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005de0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de2:	e852 3f00 	ldrex	r3, [r2]
 8005de6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dea:	e842 3100 	strex	r1, r3, [r2]
 8005dee:	2900      	cmp	r1, #0
 8005df0:	d1f6      	bne.n	8005de0 <UART_RxISR_8BIT_FIFOEN+0xdc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005df2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	f102 0308 	add.w	r3, r2, #8
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e00:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e04:	3208      	adds	r2, #8
 8005e06:	e842 3100 	strex	r1, r3, [r2]
 8005e0a:	2900      	cmp	r1, #0
 8005e0c:	d1f1      	bne.n	8005df2 <UART_RxISR_8BIT_FIFOEN+0xee>
        huart->RxState = HAL_UART_STATE_READY;
 8005e0e:	2320      	movs	r3, #32
 8005e10:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8005e14:	2300      	movs	r3, #0
 8005e16:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e18:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d004      	beq.n	8005e28 <UART_RxISR_8BIT_FIFOEN+0x124>
          huart->RxCpltCallback(huart);
 8005e1e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8005e22:	4620      	mov	r0, r4
 8005e24:	4798      	blx	r3
 8005e26:	e794      	b.n	8005d52 <UART_RxISR_8BIT_FIFOEN+0x4e>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e2c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2e:	e852 3f00 	ldrex	r3, [r2]
 8005e32:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e36:	e842 3100 	strex	r1, r3, [r2]
 8005e3a:	2900      	cmp	r1, #0
 8005e3c:	d1f6      	bne.n	8005e2c <UART_RxISR_8BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	69da      	ldr	r2, [r3, #28]
 8005e42:	f012 0f10 	tst.w	r2, #16
 8005e46:	d001      	beq.n	8005e4c <UART_RxISR_8BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e48:	2210      	movs	r2, #16
 8005e4a:	621a      	str	r2, [r3, #32]
          huart->RxEventCallback(huart, huart->RxXferSize);
 8005e4c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8005e50:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005e54:	4620      	mov	r0, r4
 8005e56:	4798      	blx	r3
 8005e58:	e77b      	b.n	8005d52 <UART_RxISR_8BIT_FIFOEN+0x4e>
    rxdatacount = huart->RxXferCount;
 8005e5a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005e5e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f43f af61 	beq.w	8005d28 <UART_RxISR_8BIT_FIFOEN+0x24>
 8005e66:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	f67f af5c 	bls.w	8005d28 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005e70:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e72:	f102 0308 	add.w	r3, r2, #8
 8005e76:	e853 3f00 	ldrex	r3, [r3]
 8005e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7e:	3208      	adds	r2, #8
 8005e80:	e842 3100 	strex	r1, r3, [r2]
 8005e84:	2900      	cmp	r1, #0
 8005e86:	d1f3      	bne.n	8005e70 <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 8005e88:	4b05      	ldr	r3, [pc, #20]	; (8005ea0 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 8005e8a:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005e8c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8e:	e852 3f00 	ldrex	r3, [r2]
 8005e92:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e96:	e842 3100 	strex	r1, r3, [r2]
 8005e9a:	2900      	cmp	r1, #0
 8005e9c:	d1f6      	bne.n	8005e8c <UART_RxISR_8BIT_FIFOEN+0x188>
 8005e9e:	e743      	b.n	8005d28 <UART_RxISR_8BIT_FIFOEN+0x24>
 8005ea0:	08005b9b 	.word	0x08005b9b

08005ea4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005ea8:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005eac:	6803      	ldr	r3, [r0, #0]
 8005eae:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005eb0:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005eb4:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005eb8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005ebc:	2a22      	cmp	r2, #34	; 0x22
 8005ebe:	d005      	beq.n	8005ecc <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ec0:	699a      	ldr	r2, [r3, #24]
 8005ec2:	f042 0208 	orr.w	r2, r2, #8
 8005ec6:	619a      	str	r2, [r3, #24]
  }
}
 8005ec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ecc:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8005ece:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ed2:	e00e      	b.n	8005ef2 <UART_RxISR_16BIT_FIFOEN+0x4e>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ed4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005ed8:	b133      	cbz	r3, 8005ee8 <UART_RxISR_16BIT_FIFOEN+0x44>
          huart->ErrorCallback(huart);
 8005eda:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8005ede:	4620      	mov	r0, r4
 8005ee0:	4798      	blx	r3
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 8005ee8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d044      	beq.n	8005f7c <UART_RxISR_16BIT_FIFOEN+0xd8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ef2:	2f00      	cmp	r7, #0
 8005ef4:	d07f      	beq.n	8005ff6 <UART_RxISR_16BIT_FIFOEN+0x152>
 8005ef6:	f015 0f20 	tst.w	r5, #32
 8005efa:	d07c      	beq.n	8005ff6 <UART_RxISR_16BIT_FIFOEN+0x152>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005f00:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8005f02:	4033      	ands	r3, r6
 8005f04:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8005f06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f08:	3302      	adds	r3, #2
 8005f0a:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8005f0c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	3b01      	subs	r3, #1
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005f1e:	f015 0f07 	tst.w	r5, #7
 8005f22:	d0e1      	beq.n	8005ee8 <UART_RxISR_16BIT_FIFOEN+0x44>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f24:	f015 0f01 	tst.w	r5, #1
 8005f28:	d009      	beq.n	8005f3e <UART_RxISR_16BIT_FIFOEN+0x9a>
 8005f2a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005f2e:	d006      	beq.n	8005f3e <UART_RxISR_16BIT_FIFOEN+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f30:	2201      	movs	r2, #1
 8005f32:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f34:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f3e:	f015 0f02 	tst.w	r5, #2
 8005f42:	d00b      	beq.n	8005f5c <UART_RxISR_16BIT_FIFOEN+0xb8>
 8005f44:	f018 0f01 	tst.w	r8, #1
 8005f48:	d008      	beq.n	8005f5c <UART_RxISR_16BIT_FIFOEN+0xb8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f50:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005f54:	f043 0304 	orr.w	r3, r3, #4
 8005f58:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f5c:	f015 0f04 	tst.w	r5, #4
 8005f60:	d0b8      	beq.n	8005ed4 <UART_RxISR_16BIT_FIFOEN+0x30>
 8005f62:	f018 0f01 	tst.w	r8, #1
 8005f66:	d0b5      	beq.n	8005ed4 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f68:	6823      	ldr	r3, [r4, #0]
 8005f6a:	2204      	movs	r2, #4
 8005f6c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f6e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005f72:	f043 0302 	orr.w	r3, r3, #2
 8005f76:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005f7a:	e7ab      	b.n	8005ed4 <UART_RxISR_16BIT_FIFOEN+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f7c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	e852 3f00 	ldrex	r3, [r2]
 8005f82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f86:	e842 3100 	strex	r1, r3, [r2]
 8005f8a:	2900      	cmp	r1, #0
 8005f8c:	d1f6      	bne.n	8005f7c <UART_RxISR_16BIT_FIFOEN+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f8e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f90:	f102 0308 	add.w	r3, r2, #8
 8005f94:	e853 3f00 	ldrex	r3, [r3]
 8005f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f9c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa0:	3208      	adds	r2, #8
 8005fa2:	e842 3100 	strex	r1, r3, [r2]
 8005fa6:	2900      	cmp	r1, #0
 8005fa8:	d1f1      	bne.n	8005f8e <UART_RxISR_16BIT_FIFOEN+0xea>
        huart->RxState = HAL_UART_STATE_READY;
 8005faa:	2320      	movs	r3, #32
 8005fac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fb4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d004      	beq.n	8005fc4 <UART_RxISR_16BIT_FIFOEN+0x120>
          huart->RxCpltCallback(huart);
 8005fba:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	4798      	blx	r3
 8005fc2:	e796      	b.n	8005ef2 <UART_RxISR_16BIT_FIFOEN+0x4e>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fc8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fca:	e852 3f00 	ldrex	r3, [r2]
 8005fce:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd2:	e842 3100 	strex	r1, r3, [r2]
 8005fd6:	2900      	cmp	r1, #0
 8005fd8:	d1f6      	bne.n	8005fc8 <UART_RxISR_16BIT_FIFOEN+0x124>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	69da      	ldr	r2, [r3, #28]
 8005fde:	f012 0f10 	tst.w	r2, #16
 8005fe2:	d001      	beq.n	8005fe8 <UART_RxISR_16BIT_FIFOEN+0x144>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fe4:	2210      	movs	r2, #16
 8005fe6:	621a      	str	r2, [r3, #32]
          huart->RxEventCallback(huart, huart->RxXferSize);
 8005fe8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8005fec:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	4798      	blx	r3
 8005ff4:	e77d      	b.n	8005ef2 <UART_RxISR_16BIT_FIFOEN+0x4e>
    rxdatacount = huart->RxXferCount;
 8005ff6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005ffa:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f43f af63 	beq.w	8005ec8 <UART_RxISR_16BIT_FIFOEN+0x24>
 8006002:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8006006:	429a      	cmp	r2, r3
 8006008:	f67f af5e 	bls.w	8005ec8 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800600c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600e:	f102 0308 	add.w	r3, r2, #8
 8006012:	e853 3f00 	ldrex	r3, [r3]
 8006016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601a:	3208      	adds	r2, #8
 800601c:	e842 3100 	strex	r1, r3, [r2]
 8006020:	2900      	cmp	r1, #0
 8006022:	d1f3      	bne.n	800600c <UART_RxISR_16BIT_FIFOEN+0x168>
      huart->RxISR = UART_RxISR_16BIT;
 8006024:	4b05      	ldr	r3, [pc, #20]	; (800603c <UART_RxISR_16BIT_FIFOEN+0x198>)
 8006026:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006028:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602a:	e852 3f00 	ldrex	r3, [r2]
 800602e:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006032:	e842 3100 	strex	r1, r3, [r2]
 8006036:	2900      	cmp	r1, #0
 8006038:	d1f6      	bne.n	8006028 <UART_RxISR_16BIT_FIFOEN+0x184>
 800603a:	e745      	b.n	8005ec8 <UART_RxISR_16BIT_FIFOEN+0x24>
 800603c:	08005c51 	.word	0x08005c51

08006040 <HAL_UART_RegisterCallback>:
{
 8006040:	4603      	mov	r3, r0
  if (pCallback == NULL)
 8006042:	4610      	mov	r0, r2
 8006044:	b1d2      	cbz	r2, 800607c <HAL_UART_RegisterCallback+0x3c>
  __HAL_LOCK(huart);
 8006046:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800604a:	2a01      	cmp	r2, #1
 800604c:	d078      	beq.n	8006140 <HAL_UART_RegisterCallback+0x100>
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  if (huart->gState == HAL_UART_STATE_READY)
 8006054:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006058:	2a20      	cmp	r2, #32
 800605a:	d017      	beq.n	800608c <HAL_UART_RegisterCallback+0x4c>
  else if (huart->gState == HAL_UART_STATE_RESET)
 800605c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006060:	2a00      	cmp	r2, #0
 8006062:	d162      	bne.n	800612a <HAL_UART_RegisterCallback+0xea>
    switch (CallbackID)
 8006064:	290b      	cmp	r1, #11
 8006066:	d058      	beq.n	800611a <HAL_UART_RegisterCallback+0xda>
 8006068:	290c      	cmp	r1, #12
 800606a:	d05a      	beq.n	8006122 <HAL_UART_RegisterCallback+0xe2>
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800606c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006074:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        status =  HAL_ERROR;
 8006078:	2001      	movs	r0, #1
        break;
 800607a:	e05d      	b.n	8006138 <HAL_UART_RegisterCallback+0xf8>
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800607c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006080:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006084:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    return HAL_ERROR;
 8006088:	2001      	movs	r0, #1
 800608a:	4770      	bx	lr
    switch (CallbackID)
 800608c:	290c      	cmp	r1, #12
 800608e:	d83c      	bhi.n	800610a <HAL_UART_RegisterCallback+0xca>
 8006090:	e8df f001 	tbb	[pc, r1]
 8006094:	130f0b07 	.word	0x130f0b07
 8006098:	231f1b17 	.word	0x231f1b17
 800609c:	332f2b27 	.word	0x332f2b27
 80060a0:	37          	.byte	0x37
 80060a1:	00          	.byte	0x00
        huart->TxHalfCpltCallback = pCallback;
 80060a2:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;
 80060a6:	4608      	mov	r0, r1
        break;
 80060a8:	e046      	b.n	8006138 <HAL_UART_RegisterCallback+0xf8>
        huart->TxCpltCallback = pCallback;
 80060aa:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  HAL_StatusTypeDef status = HAL_OK;
 80060ae:	2000      	movs	r0, #0
        break;
 80060b0:	e042      	b.n	8006138 <HAL_UART_RegisterCallback+0xf8>
        huart->RxHalfCpltCallback = pCallback;
 80060b2:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  HAL_StatusTypeDef status = HAL_OK;
 80060b6:	2000      	movs	r0, #0
        break;
 80060b8:	e03e      	b.n	8006138 <HAL_UART_RegisterCallback+0xf8>
        huart->RxCpltCallback = pCallback;
 80060ba:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
  HAL_StatusTypeDef status = HAL_OK;
 80060be:	2000      	movs	r0, #0
        break;
 80060c0:	e03a      	b.n	8006138 <HAL_UART_RegisterCallback+0xf8>
        huart->ErrorCallback = pCallback;
 80060c2:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
  HAL_StatusTypeDef status = HAL_OK;
 80060c6:	2000      	movs	r0, #0
        break;
 80060c8:	e036      	b.n	8006138 <HAL_UART_RegisterCallback+0xf8>
        huart->AbortCpltCallback = pCallback;
 80060ca:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  HAL_StatusTypeDef status = HAL_OK;
 80060ce:	2000      	movs	r0, #0
        break;
 80060d0:	e032      	b.n	8006138 <HAL_UART_RegisterCallback+0xf8>
        huart->AbortTransmitCpltCallback = pCallback;
 80060d2:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
  HAL_StatusTypeDef status = HAL_OK;
 80060d6:	2000      	movs	r0, #0
        break;
 80060d8:	e02e      	b.n	8006138 <HAL_UART_RegisterCallback+0xf8>
        huart->AbortReceiveCpltCallback = pCallback;
 80060da:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
  HAL_StatusTypeDef status = HAL_OK;
 80060de:	2000      	movs	r0, #0
        break;
 80060e0:	e02a      	b.n	8006138 <HAL_UART_RegisterCallback+0xf8>
        huart->WakeupCallback = pCallback;
 80060e2:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
  HAL_StatusTypeDef status = HAL_OK;
 80060e6:	2000      	movs	r0, #0
        break;
 80060e8:	e026      	b.n	8006138 <HAL_UART_RegisterCallback+0xf8>
        huart->RxFifoFullCallback = pCallback;
 80060ea:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
  HAL_StatusTypeDef status = HAL_OK;
 80060ee:	2000      	movs	r0, #0
        break;
 80060f0:	e022      	b.n	8006138 <HAL_UART_RegisterCallback+0xf8>
        huart->TxFifoEmptyCallback = pCallback;
 80060f2:	f8c3 00b8 	str.w	r0, [r3, #184]	; 0xb8
  HAL_StatusTypeDef status = HAL_OK;
 80060f6:	2000      	movs	r0, #0
        break;
 80060f8:	e01e      	b.n	8006138 <HAL_UART_RegisterCallback+0xf8>
        huart->MspInitCallback = pCallback;
 80060fa:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
  HAL_StatusTypeDef status = HAL_OK;
 80060fe:	2000      	movs	r0, #0
        break;
 8006100:	e01a      	b.n	8006138 <HAL_UART_RegisterCallback+0xf8>
        huart->MspDeInitCallback = pCallback;
 8006102:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  HAL_StatusTypeDef status = HAL_OK;
 8006106:	2000      	movs	r0, #0
        break;
 8006108:	e016      	b.n	8006138 <HAL_UART_RegisterCallback+0xf8>
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800610a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800610e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006112:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        status =  HAL_ERROR;
 8006116:	2001      	movs	r0, #1
        break;
 8006118:	e00e      	b.n	8006138 <HAL_UART_RegisterCallback+0xf8>
        huart->MspInitCallback = pCallback;
 800611a:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
  HAL_StatusTypeDef status = HAL_OK;
 800611e:	2000      	movs	r0, #0
        break;
 8006120:	e00a      	b.n	8006138 <HAL_UART_RegisterCallback+0xf8>
        huart->MspDeInitCallback = pCallback;
 8006122:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  HAL_StatusTypeDef status = HAL_OK;
 8006126:	2000      	movs	r0, #0
        break;
 8006128:	e006      	b.n	8006138 <HAL_UART_RegisterCallback+0xf8>
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800612a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800612e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    status =  HAL_ERROR;
 8006136:	2001      	movs	r0, #1
  __HAL_UNLOCK(huart);
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return status;
 800613e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006140:	2002      	movs	r0, #2
}
 8006142:	4770      	bx	lr

08006144 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8006144:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006148:	2b20      	cmp	r3, #32
 800614a:	d14f      	bne.n	80061ec <HAL_UART_Transmit_IT+0xa8>
    if ((pData == NULL) || (Size == 0U))
 800614c:	2900      	cmp	r1, #0
 800614e:	d04f      	beq.n	80061f0 <HAL_UART_Transmit_IT+0xac>
 8006150:	2a00      	cmp	r2, #0
 8006152:	d04f      	beq.n	80061f4 <HAL_UART_Transmit_IT+0xb0>
    __HAL_LOCK(huart);
 8006154:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006158:	2b01      	cmp	r3, #1
 800615a:	d04d      	beq.n	80061f8 <HAL_UART_Transmit_IT+0xb4>
 800615c:	2301      	movs	r3, #1
 800615e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8006162:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006164:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8006168:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800616c:	2300      	movs	r3, #0
 800616e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006172:	2321      	movs	r3, #33	; 0x21
 8006174:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006178:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800617a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800617e:	d013      	beq.n	80061a8 <HAL_UART_Transmit_IT+0x64>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006180:	6883      	ldr	r3, [r0, #8]
 8006182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006186:	d02b      	beq.n	80061e0 <HAL_UART_Transmit_IT+0x9c>
        huart->TxISR = UART_TxISR_8BIT;
 8006188:	4b1c      	ldr	r3, [pc, #112]	; (80061fc <HAL_UART_Transmit_IT+0xb8>)
 800618a:	6743      	str	r3, [r0, #116]	; 0x74
      __HAL_UNLOCK(huart);
 800618c:	2300      	movs	r3, #0
 800618e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006192:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006194:	e852 3f00 	ldrex	r3, [r2]
 8006198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619c:	e842 3100 	strex	r1, r3, [r2]
 80061a0:	2900      	cmp	r1, #0
 80061a2:	d1f6      	bne.n	8006192 <HAL_UART_Transmit_IT+0x4e>
    return HAL_OK;
 80061a4:	2000      	movs	r0, #0
 80061a6:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061a8:	6883      	ldr	r3, [r0, #8]
 80061aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ae:	d011      	beq.n	80061d4 <HAL_UART_Transmit_IT+0x90>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80061b0:	4b13      	ldr	r3, [pc, #76]	; (8006200 <HAL_UART_Transmit_IT+0xbc>)
 80061b2:	6743      	str	r3, [r0, #116]	; 0x74
      __HAL_UNLOCK(huart);
 80061b4:	2300      	movs	r3, #0
 80061b6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80061ba:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061bc:	f102 0308 	add.w	r3, r2, #8
 80061c0:	e853 3f00 	ldrex	r3, [r3]
 80061c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c8:	3208      	adds	r2, #8
 80061ca:	e842 3100 	strex	r1, r3, [r2]
 80061ce:	2900      	cmp	r1, #0
 80061d0:	d1f3      	bne.n	80061ba <HAL_UART_Transmit_IT+0x76>
 80061d2:	e7e7      	b.n	80061a4 <HAL_UART_Transmit_IT+0x60>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061d4:	6903      	ldr	r3, [r0, #16]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1ea      	bne.n	80061b0 <HAL_UART_Transmit_IT+0x6c>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80061da:	4b0a      	ldr	r3, [pc, #40]	; (8006204 <HAL_UART_Transmit_IT+0xc0>)
 80061dc:	6743      	str	r3, [r0, #116]	; 0x74
 80061de:	e7e9      	b.n	80061b4 <HAL_UART_Transmit_IT+0x70>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061e0:	6903      	ldr	r3, [r0, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1d0      	bne.n	8006188 <HAL_UART_Transmit_IT+0x44>
        huart->TxISR = UART_TxISR_16BIT;
 80061e6:	4b08      	ldr	r3, [pc, #32]	; (8006208 <HAL_UART_Transmit_IT+0xc4>)
 80061e8:	6743      	str	r3, [r0, #116]	; 0x74
 80061ea:	e7cf      	b.n	800618c <HAL_UART_Transmit_IT+0x48>
    return HAL_BUSY;
 80061ec:	2002      	movs	r0, #2
 80061ee:	4770      	bx	lr
      return HAL_ERROR;
 80061f0:	2001      	movs	r0, #1
 80061f2:	4770      	bx	lr
 80061f4:	2001      	movs	r0, #1
 80061f6:	4770      	bx	lr
    __HAL_LOCK(huart);
 80061f8:	2002      	movs	r0, #2
}
 80061fa:	4770      	bx	lr
 80061fc:	080059d9 	.word	0x080059d9
 8006200:	08005a89 	.word	0x08005a89
 8006204:	08005afd 	.word	0x08005afd
 8006208:	08005a2f 	.word	0x08005a2f

0800620c <HAL_UART_IRQHandler>:
{
 800620c:	b570      	push	{r4, r5, r6, lr}
 800620e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006210:	6801      	ldr	r1, [r0, #0]
 8006212:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006214:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006216:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006218:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 800621c:	401a      	ands	r2, r3
 800621e:	d108      	bne.n	8006232 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006220:	f013 0f20 	tst.w	r3, #32
 8006224:	d005      	beq.n	8006232 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006226:	f010 0f20 	tst.w	r0, #32
 800622a:	d137      	bne.n	800629c <HAL_UART_IRQHandler+0x90>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800622c:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8006230:	d134      	bne.n	800629c <HAL_UART_IRQHandler+0x90>
  if ((errorflags != 0U)
 8006232:	b12a      	cbz	r2, 8006240 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006234:	4aba      	ldr	r2, [pc, #744]	; (8006520 <HAL_UART_IRQHandler+0x314>)
 8006236:	402a      	ands	r2, r5
 8006238:	d135      	bne.n	80062a6 <HAL_UART_IRQHandler+0x9a>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800623a:	4eba      	ldr	r6, [pc, #744]	; (8006524 <HAL_UART_IRQHandler+0x318>)
 800623c:	4230      	tst	r0, r6
 800623e:	d132      	bne.n	80062a6 <HAL_UART_IRQHandler+0x9a>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006240:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006242:	2a01      	cmp	r2, #1
 8006244:	f000 80c8 	beq.w	80063d8 <HAL_UART_IRQHandler+0x1cc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006248:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800624c:	d003      	beq.n	8006256 <HAL_UART_IRQHandler+0x4a>
 800624e:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8006252:	f040 815c 	bne.w	800650e <HAL_UART_IRQHandler+0x302>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006256:	f013 0f80 	tst.w	r3, #128	; 0x80
 800625a:	d007      	beq.n	800626c <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800625c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006260:	f040 8164 	bne.w	800652c <HAL_UART_IRQHandler+0x320>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006264:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8006268:	f040 8160 	bne.w	800652c <HAL_UART_IRQHandler+0x320>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800626c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006270:	d003      	beq.n	800627a <HAL_UART_IRQHandler+0x6e>
 8006272:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006276:	f040 8160 	bne.w	800653a <HAL_UART_IRQHandler+0x32e>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800627a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800627e:	d003      	beq.n	8006288 <HAL_UART_IRQHandler+0x7c>
 8006280:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006284:	f040 815d 	bne.w	8006542 <HAL_UART_IRQHandler+0x336>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006288:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800628c:	d00a      	beq.n	80062a4 <HAL_UART_IRQHandler+0x98>
 800628e:	2800      	cmp	r0, #0
 8006290:	da08      	bge.n	80062a4 <HAL_UART_IRQHandler+0x98>
    huart->RxFifoFullCallback(huart);
 8006292:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8006296:	4620      	mov	r0, r4
 8006298:	4798      	blx	r3
    return;
 800629a:	e003      	b.n	80062a4 <HAL_UART_IRQHandler+0x98>
      if (huart->RxISR != NULL)
 800629c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800629e:	b10b      	cbz	r3, 80062a4 <HAL_UART_IRQHandler+0x98>
        huart->RxISR(huart);
 80062a0:	4620      	mov	r0, r4
 80062a2:	4798      	blx	r3
}
 80062a4:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062a6:	f013 0f01 	tst.w	r3, #1
 80062aa:	d009      	beq.n	80062c0 <HAL_UART_IRQHandler+0xb4>
 80062ac:	f410 7f80 	tst.w	r0, #256	; 0x100
 80062b0:	d006      	beq.n	80062c0 <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062b2:	2601      	movs	r6, #1
 80062b4:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062b6:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80062ba:	4331      	orrs	r1, r6
 80062bc:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062c0:	f013 0f02 	tst.w	r3, #2
 80062c4:	d00b      	beq.n	80062de <HAL_UART_IRQHandler+0xd2>
 80062c6:	f015 0f01 	tst.w	r5, #1
 80062ca:	d008      	beq.n	80062de <HAL_UART_IRQHandler+0xd2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062cc:	6821      	ldr	r1, [r4, #0]
 80062ce:	2602      	movs	r6, #2
 80062d0:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062d2:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80062d6:	f041 0104 	orr.w	r1, r1, #4
 80062da:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062de:	f013 0f04 	tst.w	r3, #4
 80062e2:	d00b      	beq.n	80062fc <HAL_UART_IRQHandler+0xf0>
 80062e4:	f015 0f01 	tst.w	r5, #1
 80062e8:	d008      	beq.n	80062fc <HAL_UART_IRQHandler+0xf0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062ea:	6821      	ldr	r1, [r4, #0]
 80062ec:	2604      	movs	r6, #4
 80062ee:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062f0:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80062f4:	f041 0102 	orr.w	r1, r1, #2
 80062f8:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062fc:	f013 0f08 	tst.w	r3, #8
 8006300:	d00b      	beq.n	800631a <HAL_UART_IRQHandler+0x10e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006302:	f010 0f20 	tst.w	r0, #32
 8006306:	d100      	bne.n	800630a <HAL_UART_IRQHandler+0xfe>
 8006308:	b13a      	cbz	r2, 800631a <HAL_UART_IRQHandler+0x10e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800630a:	6822      	ldr	r2, [r4, #0]
 800630c:	2108      	movs	r1, #8
 800630e:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006310:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006314:	430a      	orrs	r2, r1
 8006316:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800631a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800631e:	d00c      	beq.n	800633a <HAL_UART_IRQHandler+0x12e>
 8006320:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8006324:	d009      	beq.n	800633a <HAL_UART_IRQHandler+0x12e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006326:	6822      	ldr	r2, [r4, #0]
 8006328:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800632c:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800632e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006332:	f042 0220 	orr.w	r2, r2, #32
 8006336:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800633a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800633e:	2a00      	cmp	r2, #0
 8006340:	d0b0      	beq.n	80062a4 <HAL_UART_IRQHandler+0x98>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006342:	f013 0f20 	tst.w	r3, #32
 8006346:	d009      	beq.n	800635c <HAL_UART_IRQHandler+0x150>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006348:	f010 0f20 	tst.w	r0, #32
 800634c:	d102      	bne.n	8006354 <HAL_UART_IRQHandler+0x148>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800634e:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8006352:	d003      	beq.n	800635c <HAL_UART_IRQHandler+0x150>
        if (huart->RxISR != NULL)
 8006354:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006356:	b10b      	cbz	r3, 800635c <HAL_UART_IRQHandler+0x150>
          huart->RxISR(huart);
 8006358:	4620      	mov	r0, r4
 800635a:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800635c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006360:	6823      	ldr	r3, [r4, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006368:	d102      	bne.n	8006370 <HAL_UART_IRQHandler+0x164>
 800636a:	f012 0f28 	tst.w	r2, #40	; 0x28
 800636e:	d02b      	beq.n	80063c8 <HAL_UART_IRQHandler+0x1bc>
        UART_EndRxTransfer(huart);
 8006370:	4620      	mov	r0, r4
 8006372:	f7ff fafb 	bl	800596c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800637e:	d01e      	beq.n	80063be <HAL_UART_IRQHandler+0x1b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006380:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006382:	f102 0308 	add.w	r3, r2, #8
 8006386:	e853 3f00 	ldrex	r3, [r3]
 800638a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638e:	3208      	adds	r2, #8
 8006390:	e842 3100 	strex	r1, r3, [r2]
 8006394:	2900      	cmp	r1, #0
 8006396:	d1f3      	bne.n	8006380 <HAL_UART_IRQHandler+0x174>
          if (huart->hdmarx != NULL)
 8006398:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800639a:	b15b      	cbz	r3, 80063b4 <HAL_UART_IRQHandler+0x1a8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800639c:	4a62      	ldr	r2, [pc, #392]	; (8006528 <HAL_UART_IRQHandler+0x31c>)
 800639e:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063a0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80063a2:	f7fd f805 	bl	80033b0 <HAL_DMA_Abort_IT>
 80063a6:	2800      	cmp	r0, #0
 80063a8:	f43f af7c 	beq.w	80062a4 <HAL_UART_IRQHandler+0x98>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063ac:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80063ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80063b0:	4798      	blx	r3
 80063b2:	e777      	b.n	80062a4 <HAL_UART_IRQHandler+0x98>
            huart->ErrorCallback(huart);
 80063b4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80063b8:	4620      	mov	r0, r4
 80063ba:	4798      	blx	r3
 80063bc:	e772      	b.n	80062a4 <HAL_UART_IRQHandler+0x98>
          huart->ErrorCallback(huart);
 80063be:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80063c2:	4620      	mov	r0, r4
 80063c4:	4798      	blx	r3
 80063c6:	e76d      	b.n	80062a4 <HAL_UART_IRQHandler+0x98>
        huart->ErrorCallback(huart);
 80063c8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80063cc:	4620      	mov	r0, r4
 80063ce:	4798      	blx	r3
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d0:	2300      	movs	r3, #0
 80063d2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 80063d6:	e765      	b.n	80062a4 <HAL_UART_IRQHandler+0x98>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80063d8:	f013 0f10 	tst.w	r3, #16
 80063dc:	f43f af34 	beq.w	8006248 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80063e0:	f010 0f10 	tst.w	r0, #16
 80063e4:	f43f af30 	beq.w	8006248 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063e8:	2310      	movs	r3, #16
 80063ea:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ec:	6823      	ldr	r3, [r4, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80063f4:	d050      	beq.n	8006498 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063f6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80063f8:	6813      	ldr	r3, [r2, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f43f af50 	beq.w	80062a4 <HAL_UART_IRQHandler+0x98>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006404:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006408:	4299      	cmp	r1, r3
 800640a:	f67f af4b 	bls.w	80062a4 <HAL_UART_IRQHandler+0x98>
        huart->RxXferCount = nb_remaining_rx_data;
 800640e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006412:	6813      	ldr	r3, [r2, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f013 0f20 	tst.w	r3, #32
 800641a:	d131      	bne.n	8006480 <HAL_UART_IRQHandler+0x274>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800641c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641e:	e852 3f00 	ldrex	r3, [r2]
 8006422:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006426:	e842 3100 	strex	r1, r3, [r2]
 800642a:	2900      	cmp	r1, #0
 800642c:	d1f6      	bne.n	800641c <HAL_UART_IRQHandler+0x210>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800642e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	f102 0308 	add.w	r3, r2, #8
 8006434:	e853 3f00 	ldrex	r3, [r3]
 8006438:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643c:	3208      	adds	r2, #8
 800643e:	e842 3100 	strex	r1, r3, [r2]
 8006442:	2900      	cmp	r1, #0
 8006444:	d1f3      	bne.n	800642e <HAL_UART_IRQHandler+0x222>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006446:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006448:	f102 0308 	add.w	r3, r2, #8
 800644c:	e853 3f00 	ldrex	r3, [r3]
 8006450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	3208      	adds	r2, #8
 8006456:	e842 3100 	strex	r1, r3, [r2]
 800645a:	2900      	cmp	r1, #0
 800645c:	d1f3      	bne.n	8006446 <HAL_UART_IRQHandler+0x23a>
          huart->RxState = HAL_UART_STATE_READY;
 800645e:	2320      	movs	r3, #32
 8006460:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006464:	2300      	movs	r3, #0
 8006466:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006468:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	e852 3f00 	ldrex	r3, [r2]
 800646e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006472:	e842 3100 	strex	r1, r3, [r2]
 8006476:	2900      	cmp	r1, #0
 8006478:	d1f6      	bne.n	8006468 <HAL_UART_IRQHandler+0x25c>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800647a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800647c:	f7fc ff5e 	bl	800333c <HAL_DMA_Abort>
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006480:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
 8006484:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006488:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800648c:	b29b      	uxth	r3, r3
 800648e:	1ac9      	subs	r1, r1, r3
 8006490:	b289      	uxth	r1, r1
 8006492:	4620      	mov	r0, r4
 8006494:	4790      	blx	r2
      return;
 8006496:	e705      	b.n	80062a4 <HAL_UART_IRQHandler+0x98>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006498:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800649c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	1ac9      	subs	r1, r1, r3
 80064a4:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 80064a6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f43f aef9 	beq.w	80062a4 <HAL_UART_IRQHandler+0x98>
          &&(nb_rx_data > 0U) )
 80064b2:	2900      	cmp	r1, #0
 80064b4:	f43f aef6 	beq.w	80062a4 <HAL_UART_IRQHandler+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064b8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	e852 3f00 	ldrex	r3, [r2]
 80064be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	e842 3000 	strex	r0, r3, [r2]
 80064c6:	2800      	cmp	r0, #0
 80064c8:	d1f6      	bne.n	80064b8 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064ca:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064cc:	f102 0308 	add.w	r3, r2, #8
 80064d0:	e853 3f00 	ldrex	r3, [r3]
 80064d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064d8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064dc:	3208      	adds	r2, #8
 80064de:	e842 3000 	strex	r0, r3, [r2]
 80064e2:	2800      	cmp	r0, #0
 80064e4:	d1f1      	bne.n	80064ca <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 80064e6:	2320      	movs	r3, #32
 80064e8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ec:	2300      	movs	r3, #0
 80064ee:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80064f0:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f4:	e852 3f00 	ldrex	r3, [r2]
 80064f8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fc:	e842 3000 	strex	r0, r3, [r2]
 8006500:	2800      	cmp	r0, #0
 8006502:	d1f6      	bne.n	80064f2 <HAL_UART_IRQHandler+0x2e6>
        huart->RxEventCallback(huart, nb_rx_data);
 8006504:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8006508:	4620      	mov	r0, r4
 800650a:	4798      	blx	r3
      return;
 800650c:	e6ca      	b.n	80062a4 <HAL_UART_IRQHandler+0x98>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800650e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006512:	620b      	str	r3, [r1, #32]
    huart->WakeupCallback(huart);
 8006514:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8006518:	4620      	mov	r0, r4
 800651a:	4798      	blx	r3
    return;
 800651c:	e6c2      	b.n	80062a4 <HAL_UART_IRQHandler+0x98>
 800651e:	bf00      	nop
 8006520:	10000001 	.word	0x10000001
 8006524:	04000120 	.word	0x04000120
 8006528:	080059c3 	.word	0x080059c3
    if (huart->TxISR != NULL)
 800652c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800652e:	2b00      	cmp	r3, #0
 8006530:	f43f aeb8 	beq.w	80062a4 <HAL_UART_IRQHandler+0x98>
      huart->TxISR(huart);
 8006534:	4620      	mov	r0, r4
 8006536:	4798      	blx	r3
    return;
 8006538:	e6b4      	b.n	80062a4 <HAL_UART_IRQHandler+0x98>
    UART_EndTransmit_IT(huart);
 800653a:	4620      	mov	r0, r4
 800653c:	f7ff fb1a 	bl	8005b74 <UART_EndTransmit_IT>
    return;
 8006540:	e6b0      	b.n	80062a4 <HAL_UART_IRQHandler+0x98>
    huart->TxFifoEmptyCallback(huart);
 8006542:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8006546:	4620      	mov	r0, r4
 8006548:	4798      	blx	r3
    return;
 800654a:	e6ab      	b.n	80062a4 <HAL_UART_IRQHandler+0x98>

0800654c <HAL_UART_GetState>:
  temp1 = huart->gState;
 800654c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
  temp2 = huart->RxState;
 8006550:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
}
 8006554:	4310      	orrs	r0, r2
 8006556:	4770      	bx	lr

08006558 <UART_InitCallbacksToDefault>:
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8006558:	4b12      	ldr	r3, [pc, #72]	; (80065a4 <UART_InitCallbacksToDefault+0x4c>)
 800655a:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800655e:	4b12      	ldr	r3, [pc, #72]	; (80065a8 <UART_InitCallbacksToDefault+0x50>)
 8006560:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8006564:	4b11      	ldr	r3, [pc, #68]	; (80065ac <UART_InitCallbacksToDefault+0x54>)
 8006566:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800656a:	4b11      	ldr	r3, [pc, #68]	; (80065b0 <UART_InitCallbacksToDefault+0x58>)
 800656c:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8006570:	4b10      	ldr	r3, [pc, #64]	; (80065b4 <UART_InitCallbacksToDefault+0x5c>)
 8006572:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8006576:	4b10      	ldr	r3, [pc, #64]	; (80065b8 <UART_InitCallbacksToDefault+0x60>)
 8006578:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800657c:	4b0f      	ldr	r3, [pc, #60]	; (80065bc <UART_InitCallbacksToDefault+0x64>)
 800657e:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8006582:	4b0f      	ldr	r3, [pc, #60]	; (80065c0 <UART_InitCallbacksToDefault+0x68>)
 8006584:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8006588:	4b0e      	ldr	r3, [pc, #56]	; (80065c4 <UART_InitCallbacksToDefault+0x6c>)
 800658a:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800658e:	4b0e      	ldr	r3, [pc, #56]	; (80065c8 <UART_InitCallbacksToDefault+0x70>)
 8006590:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8006594:	4b0d      	ldr	r3, [pc, #52]	; (80065cc <UART_InitCallbacksToDefault+0x74>)
 8006596:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800659a:	4b0d      	ldr	r3, [pc, #52]	; (80065d0 <UART_InitCallbacksToDefault+0x78>)
 800659c:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
}
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	0800595d 	.word	0x0800595d
 80065a8:	08001a3d 	.word	0x08001a3d
 80065ac:	08005961 	.word	0x08005961
 80065b0:	0800595f 	.word	0x0800595f
 80065b4:	08005963 	.word	0x08005963
 80065b8:	08005965 	.word	0x08005965
 80065bc:	08005967 	.word	0x08005967
 80065c0:	08005969 	.word	0x08005969
 80065c4:	08006d15 	.word	0x08006d15
 80065c8:	08006d17 	.word	0x08006d17
 80065cc:	08006d19 	.word	0x08006d19
 80065d0:	0800596b 	.word	0x0800596b

080065d4 <UART_SetConfig>:
{
 80065d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d8:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80065da:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065dc:	6883      	ldr	r3, [r0, #8]
 80065de:	6902      	ldr	r2, [r0, #16]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	6942      	ldr	r2, [r0, #20]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	69c2      	ldr	r2, [r0, #28]
 80065e8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065ea:	6808      	ldr	r0, [r1, #0]
 80065ec:	4aa1      	ldr	r2, [pc, #644]	; (8006874 <UART_SetConfig+0x2a0>)
 80065ee:	4002      	ands	r2, r0
 80065f0:	4313      	orrs	r3, r2
 80065f2:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065f4:	6822      	ldr	r2, [r4, #0]
 80065f6:	6853      	ldr	r3, [r2, #4]
 80065f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80065fc:	68e1      	ldr	r1, [r4, #12]
 80065fe:	430b      	orrs	r3, r1
 8006600:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006602:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006604:	6822      	ldr	r2, [r4, #0]
 8006606:	4b9c      	ldr	r3, [pc, #624]	; (8006878 <UART_SetConfig+0x2a4>)
 8006608:	429a      	cmp	r2, r3
 800660a:	d001      	beq.n	8006610 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 800660c:	6a23      	ldr	r3, [r4, #32]
 800660e:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006610:	6893      	ldr	r3, [r2, #8]
 8006612:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006616:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800661a:	430b      	orrs	r3, r1
 800661c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800661e:	6822      	ldr	r2, [r4, #0]
 8006620:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006622:	f023 030f 	bic.w	r3, r3, #15
 8006626:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006628:	430b      	orrs	r3, r1
 800662a:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800662c:	6822      	ldr	r2, [r4, #0]
 800662e:	4b93      	ldr	r3, [pc, #588]	; (800687c <UART_SetConfig+0x2a8>)
 8006630:	429a      	cmp	r2, r3
 8006632:	d01c      	beq.n	800666e <UART_SetConfig+0x9a>
 8006634:	4b92      	ldr	r3, [pc, #584]	; (8006880 <UART_SetConfig+0x2ac>)
 8006636:	429a      	cmp	r2, r3
 8006638:	d031      	beq.n	800669e <UART_SetConfig+0xca>
 800663a:	4b8f      	ldr	r3, [pc, #572]	; (8006878 <UART_SetConfig+0x2a4>)
 800663c:	429a      	cmp	r2, r3
 800663e:	d04b      	beq.n	80066d8 <UART_SetConfig+0x104>
 8006640:	2310      	movs	r3, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8006642:	498d      	ldr	r1, [pc, #564]	; (8006878 <UART_SetConfig+0x2a4>)
 8006644:	428a      	cmp	r2, r1
 8006646:	d068      	beq.n	800671a <UART_SetConfig+0x146>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006648:	69e0      	ldr	r0, [r4, #28]
 800664a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800664e:	f000 80a7 	beq.w	80067a0 <UART_SetConfig+0x1cc>
    switch (clocksource)
 8006652:	2b08      	cmp	r3, #8
 8006654:	f200 8122 	bhi.w	800689c <UART_SetConfig+0x2c8>
 8006658:	e8df f013 	tbh	[pc, r3, lsl #1]
 800665c:	00f800d5 	.word	0x00f800d5
 8006660:	012000d3 	.word	0x012000d3
 8006664:	012000fb 	.word	0x012000fb
 8006668:	01200120 	.word	0x01200120
 800666c:	00fe      	.short	0x00fe
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800666e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006676:	f003 0303 	and.w	r3, r3, #3
 800667a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800667e:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8006682:	2b03      	cmp	r3, #3
 8006684:	d809      	bhi.n	800669a <UART_SetConfig+0xc6>
 8006686:	e8df f003 	tbb	[pc, r3]
 800668a:	0402      	.short	0x0402
 800668c:	063c      	.short	0x063c
 800668e:	2301      	movs	r3, #1
 8006690:	e7d7      	b.n	8006642 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006692:	2304      	movs	r3, #4
 8006694:	e7d5      	b.n	8006642 <UART_SetConfig+0x6e>
 8006696:	2308      	movs	r3, #8
 8006698:	e7d3      	b.n	8006642 <UART_SetConfig+0x6e>
 800669a:	2310      	movs	r3, #16
 800669c:	e7d1      	b.n	8006642 <UART_SetConfig+0x6e>
 800669e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a6:	f003 030c 	and.w	r3, r3, #12
 80066aa:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80066ae:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80066b2:	2b0c      	cmp	r3, #12
 80066b4:	d80e      	bhi.n	80066d4 <UART_SetConfig+0x100>
 80066b6:	e8df f003 	tbb	[pc, r3]
 80066ba:	0d07      	.short	0x0d07
 80066bc:	0d090d0d 	.word	0x0d090d0d
 80066c0:	0d260d0d 	.word	0x0d260d0d
 80066c4:	0d0d      	.short	0x0d0d
 80066c6:	0b          	.byte	0x0b
 80066c7:	00          	.byte	0x00
 80066c8:	2300      	movs	r3, #0
 80066ca:	e7ba      	b.n	8006642 <UART_SetConfig+0x6e>
 80066cc:	2304      	movs	r3, #4
 80066ce:	e7b8      	b.n	8006642 <UART_SetConfig+0x6e>
 80066d0:	2308      	movs	r3, #8
 80066d2:	e7b6      	b.n	8006642 <UART_SetConfig+0x6e>
 80066d4:	2310      	movs	r3, #16
 80066d6:	e7b4      	b.n	8006642 <UART_SetConfig+0x6e>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80066d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066e8:	d00f      	beq.n	800670a <UART_SetConfig+0x136>
 80066ea:	d805      	bhi.n	80066f8 <UART_SetConfig+0x124>
 80066ec:	b17b      	cbz	r3, 800670e <UART_SetConfig+0x13a>
 80066ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f2:	d10e      	bne.n	8006712 <UART_SetConfig+0x13e>
 80066f4:	2304      	movs	r3, #4
 80066f6:	e7a4      	b.n	8006642 <UART_SetConfig+0x6e>
 80066f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066fc:	d10b      	bne.n	8006716 <UART_SetConfig+0x142>
 80066fe:	2308      	movs	r3, #8
 8006700:	e79f      	b.n	8006642 <UART_SetConfig+0x6e>
 8006702:	2302      	movs	r3, #2
 8006704:	e79d      	b.n	8006642 <UART_SetConfig+0x6e>
 8006706:	2302      	movs	r3, #2
 8006708:	e79b      	b.n	8006642 <UART_SetConfig+0x6e>
 800670a:	2302      	movs	r3, #2
 800670c:	e799      	b.n	8006642 <UART_SetConfig+0x6e>
 800670e:	2300      	movs	r3, #0
 8006710:	e797      	b.n	8006642 <UART_SetConfig+0x6e>
 8006712:	2310      	movs	r3, #16
 8006714:	e795      	b.n	8006642 <UART_SetConfig+0x6e>
 8006716:	2310      	movs	r3, #16
 8006718:	e793      	b.n	8006642 <UART_SetConfig+0x6e>
    switch (clocksource)
 800671a:	2b08      	cmp	r3, #8
 800671c:	f200 809f 	bhi.w	800685e <UART_SetConfig+0x28a>
 8006720:	e8df f003 	tbb	[pc, r3]
 8006724:	9d3c9d08 	.word	0x9d3c9d08
 8006728:	9d9d9d39 	.word	0x9d9d9d39
 800672c:	05          	.byte	0x05
 800672d:	00          	.byte	0x00
  if (UART_INSTANCE_LOWPOWER(huart))
 800672e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006732:	e004      	b.n	800673e <UART_SetConfig+0x16a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006734:	f7fe f940 	bl	80049b8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006738:	2800      	cmp	r0, #0
 800673a:	f000 8092 	beq.w	8006862 <UART_SetConfig+0x28e>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800673e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006740:	4b50      	ldr	r3, [pc, #320]	; (8006884 <UART_SetConfig+0x2b0>)
 8006742:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006746:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800674a:	6865      	ldr	r5, [r4, #4]
 800674c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8006750:	4299      	cmp	r1, r3
 8006752:	f200 8088 	bhi.w	8006866 <UART_SetConfig+0x292>
 8006756:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800675a:	f200 8086 	bhi.w	800686a <UART_SetConfig+0x296>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800675e:	f04f 0800 	mov.w	r8, #0
 8006762:	b292      	uxth	r2, r2
 8006764:	2300      	movs	r3, #0
 8006766:	4641      	mov	r1, r8
 8006768:	f7fa f888 	bl	800087c <__aeabi_uldivmod>
 800676c:	020f      	lsls	r7, r1, #8
 800676e:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8006772:	0206      	lsls	r6, r0, #8
 8006774:	0868      	lsrs	r0, r5, #1
 8006776:	462a      	mov	r2, r5
 8006778:	4643      	mov	r3, r8
 800677a:	1830      	adds	r0, r6, r0
 800677c:	f147 0100 	adc.w	r1, r7, #0
 8006780:	f7fa f87c 	bl	800087c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006784:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006788:	4b3f      	ldr	r3, [pc, #252]	; (8006888 <UART_SetConfig+0x2b4>)
 800678a:	429a      	cmp	r2, r3
 800678c:	d86f      	bhi.n	800686e <UART_SetConfig+0x29a>
          huart->Instance->BRR = usartdiv;
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	60d8      	str	r0, [r3, #12]
 8006792:	4640      	mov	r0, r8
 8006794:	e050      	b.n	8006838 <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetSysClockFreq();
 8006796:	f7fd fc07 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
        break;
 800679a:	e7cd      	b.n	8006738 <UART_SetConfig+0x164>
        pclk = (uint32_t) HSI_VALUE;
 800679c:	483b      	ldr	r0, [pc, #236]	; (800688c <UART_SetConfig+0x2b8>)
 800679e:	e7ce      	b.n	800673e <UART_SetConfig+0x16a>
    switch (clocksource)
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	d875      	bhi.n	8006890 <UART_SetConfig+0x2bc>
 80067a4:	e8df f003 	tbb	[pc, r3]
 80067a8:	74052707 	.word	0x74052707
 80067ac:	7474742a 	.word	0x7474742a
 80067b0:	0b          	.byte	0x0b
 80067b1:	00          	.byte	0x00
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067b2:	4836      	ldr	r0, [pc, #216]	; (800688c <UART_SetConfig+0x2b8>)
 80067b4:	e003      	b.n	80067be <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 80067b6:	f7fe f8ff 	bl	80049b8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d06a      	beq.n	8006894 <UART_SetConfig+0x2c0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80067c0:	4b30      	ldr	r3, [pc, #192]	; (8006884 <UART_SetConfig+0x2b0>)
 80067c2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80067c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80067ca:	6862      	ldr	r2, [r4, #4]
 80067cc:	0853      	lsrs	r3, r2, #1
 80067ce:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80067d2:	fbb0 f0f2 	udiv	r0, r0, r2
 80067d6:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067d8:	f1a0 0210 	sub.w	r2, r0, #16
 80067dc:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d859      	bhi.n	8006898 <UART_SetConfig+0x2c4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067e4:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067e8:	f3c0 0042 	ubfx	r0, r0, #1, #3
 80067ec:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 80067ee:	6823      	ldr	r3, [r4, #0]
 80067f0:	60d8      	str	r0, [r3, #12]
 80067f2:	2000      	movs	r0, #0
 80067f4:	e020      	b.n	8006838 <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetPCLK2Freq();
 80067f6:	f7fe f8ef 	bl	80049d8 <HAL_RCC_GetPCLK2Freq>
        break;
 80067fa:	e7de      	b.n	80067ba <UART_SetConfig+0x1e6>
        pclk = HAL_RCC_GetSysClockFreq();
 80067fc:	f7fd fbd4 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
        break;
 8006800:	e7db      	b.n	80067ba <UART_SetConfig+0x1e6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006802:	4822      	ldr	r0, [pc, #136]	; (800688c <UART_SetConfig+0x2b8>)
 8006804:	e003      	b.n	800680e <UART_SetConfig+0x23a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006806:	f7fe f8d7 	bl	80049b8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800680a:	2800      	cmp	r0, #0
 800680c:	d048      	beq.n	80068a0 <UART_SetConfig+0x2cc>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800680e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006810:	4b1c      	ldr	r3, [pc, #112]	; (8006884 <UART_SetConfig+0x2b0>)
 8006812:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006816:	fbb0 f0f3 	udiv	r0, r0, r3
 800681a:	6863      	ldr	r3, [r4, #4]
 800681c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006820:	fbb0 f0f3 	udiv	r0, r0, r3
 8006824:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006826:	f1a0 0210 	sub.w	r2, r0, #16
 800682a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800682e:	429a      	cmp	r2, r3
 8006830:	d838      	bhi.n	80068a4 <UART_SetConfig+0x2d0>
        huart->Instance->BRR = usartdiv;
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	60d8      	str	r0, [r3, #12]
 8006836:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8006838:	2301      	movs	r3, #1
 800683a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800683e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8006842:	2300      	movs	r3, #0
 8006844:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8006846:	6763      	str	r3, [r4, #116]	; 0x74
}
 8006848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800684c:	f7fe f8c4 	bl	80049d8 <HAL_RCC_GetPCLK2Freq>
        break;
 8006850:	e7db      	b.n	800680a <UART_SetConfig+0x236>
        pclk = HAL_RCC_GetSysClockFreq();
 8006852:	f7fd fba9 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
        break;
 8006856:	e7d8      	b.n	800680a <UART_SetConfig+0x236>
        pclk = (uint32_t) LSE_VALUE;
 8006858:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800685c:	e7d7      	b.n	800680e <UART_SetConfig+0x23a>
  if (UART_INSTANCE_LOWPOWER(huart))
 800685e:	2001      	movs	r0, #1
 8006860:	e7ea      	b.n	8006838 <UART_SetConfig+0x264>
 8006862:	2000      	movs	r0, #0
 8006864:	e7e8      	b.n	8006838 <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 8006866:	2001      	movs	r0, #1
 8006868:	e7e6      	b.n	8006838 <UART_SetConfig+0x264>
 800686a:	2001      	movs	r0, #1
 800686c:	e7e4      	b.n	8006838 <UART_SetConfig+0x264>
          ret = HAL_ERROR;
 800686e:	2001      	movs	r0, #1
 8006870:	e7e2      	b.n	8006838 <UART_SetConfig+0x264>
 8006872:	bf00      	nop
 8006874:	cfff69f3 	.word	0xcfff69f3
 8006878:	40008000 	.word	0x40008000
 800687c:	40013800 	.word	0x40013800
 8006880:	40004400 	.word	0x40004400
 8006884:	08017958 	.word	0x08017958
 8006888:	000ffcff 	.word	0x000ffcff
 800688c:	00f42400 	.word	0x00f42400
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006890:	2001      	movs	r0, #1
 8006892:	e7d1      	b.n	8006838 <UART_SetConfig+0x264>
 8006894:	2000      	movs	r0, #0
 8006896:	e7cf      	b.n	8006838 <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 8006898:	2001      	movs	r0, #1
 800689a:	e7cd      	b.n	8006838 <UART_SetConfig+0x264>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800689c:	2001      	movs	r0, #1
 800689e:	e7cb      	b.n	8006838 <UART_SetConfig+0x264>
 80068a0:	2000      	movs	r0, #0
 80068a2:	e7c9      	b.n	8006838 <UART_SetConfig+0x264>
        ret = HAL_ERROR;
 80068a4:	2001      	movs	r0, #1
 80068a6:	e7c7      	b.n	8006838 <UART_SetConfig+0x264>

080068a8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80068aa:	f013 0f01 	tst.w	r3, #1
 80068ae:	d006      	beq.n	80068be <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068b0:	6802      	ldr	r2, [r0, #0]
 80068b2:	6853      	ldr	r3, [r2, #4]
 80068b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80068b8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80068ba:	430b      	orrs	r3, r1
 80068bc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068be:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80068c0:	f013 0f02 	tst.w	r3, #2
 80068c4:	d006      	beq.n	80068d4 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068c6:	6802      	ldr	r2, [r0, #0]
 80068c8:	6853      	ldr	r3, [r2, #4]
 80068ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ce:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80068d0:	430b      	orrs	r3, r1
 80068d2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80068d6:	f013 0f04 	tst.w	r3, #4
 80068da:	d006      	beq.n	80068ea <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068dc:	6802      	ldr	r2, [r0, #0]
 80068de:	6853      	ldr	r3, [r2, #4]
 80068e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068e4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80068e6:	430b      	orrs	r3, r1
 80068e8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80068ec:	f013 0f08 	tst.w	r3, #8
 80068f0:	d006      	beq.n	8006900 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068f2:	6802      	ldr	r2, [r0, #0]
 80068f4:	6853      	ldr	r3, [r2, #4]
 80068f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068fa:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80068fc:	430b      	orrs	r3, r1
 80068fe:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006900:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006902:	f013 0f10 	tst.w	r3, #16
 8006906:	d006      	beq.n	8006916 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006908:	6802      	ldr	r2, [r0, #0]
 800690a:	6893      	ldr	r3, [r2, #8]
 800690c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006910:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8006912:	430b      	orrs	r3, r1
 8006914:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006916:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006918:	f013 0f20 	tst.w	r3, #32
 800691c:	d006      	beq.n	800692c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800691e:	6802      	ldr	r2, [r0, #0]
 8006920:	6893      	ldr	r3, [r2, #8]
 8006922:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006926:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006928:	430b      	orrs	r3, r1
 800692a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800692c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800692e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006932:	d00a      	beq.n	800694a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006934:	6802      	ldr	r2, [r0, #0]
 8006936:	6853      	ldr	r3, [r2, #4]
 8006938:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800693c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800693e:	430b      	orrs	r3, r1
 8006940:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006942:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006944:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006948:	d00b      	beq.n	8006962 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800694a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800694c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006950:	d006      	beq.n	8006960 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006952:	6802      	ldr	r2, [r0, #0]
 8006954:	6853      	ldr	r3, [r2, #4]
 8006956:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800695a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800695c:	430b      	orrs	r3, r1
 800695e:	6053      	str	r3, [r2, #4]
}
 8006960:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006962:	6802      	ldr	r2, [r0, #0]
 8006964:	6853      	ldr	r3, [r2, #4]
 8006966:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800696a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800696c:	430b      	orrs	r3, r1
 800696e:	6053      	str	r3, [r2, #4]
 8006970:	e7eb      	b.n	800694a <UART_AdvFeatureConfig+0xa2>

08006972 <UART_WaitOnFlagUntilTimeout>:
{
 8006972:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006976:	4605      	mov	r5, r0
 8006978:	460f      	mov	r7, r1
 800697a:	4616      	mov	r6, r2
 800697c:	4699      	mov	r9, r3
 800697e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006982:	682c      	ldr	r4, [r5, #0]
 8006984:	69e4      	ldr	r4, [r4, #28]
 8006986:	ea37 0304 	bics.w	r3, r7, r4
 800698a:	bf0c      	ite	eq
 800698c:	2401      	moveq	r4, #1
 800698e:	2400      	movne	r4, #0
 8006990:	42b4      	cmp	r4, r6
 8006992:	d157      	bne.n	8006a44 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 8006994:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006998:	d0f3      	beq.n	8006982 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800699a:	f7fb fcf7 	bl	800238c <HAL_GetTick>
 800699e:	eba0 0009 	sub.w	r0, r0, r9
 80069a2:	4540      	cmp	r0, r8
 80069a4:	d82f      	bhi.n	8006a06 <UART_WaitOnFlagUntilTimeout+0x94>
 80069a6:	f1b8 0f00 	cmp.w	r8, #0
 80069aa:	d02c      	beq.n	8006a06 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069ac:	682b      	ldr	r3, [r5, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	f012 0f04 	tst.w	r2, #4
 80069b4:	d0e5      	beq.n	8006982 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069b6:	69da      	ldr	r2, [r3, #28]
 80069b8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80069bc:	d0e1      	beq.n	8006982 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069c2:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80069c4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c6:	e852 3f00 	ldrex	r3, [r2]
 80069ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ce:	e842 3100 	strex	r1, r3, [r2]
 80069d2:	2900      	cmp	r1, #0
 80069d4:	d1f6      	bne.n	80069c4 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	f102 0308 	add.w	r3, r2, #8
 80069dc:	e853 3f00 	ldrex	r3, [r3]
 80069e0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e4:	3208      	adds	r2, #8
 80069e6:	e842 3100 	strex	r1, r3, [r2]
 80069ea:	2900      	cmp	r1, #0
 80069ec:	d1f3      	bne.n	80069d6 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 80069ee:	2320      	movs	r3, #32
 80069f0:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80069f4:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069f8:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 80069fc:	2300      	movs	r3, #0
 80069fe:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8006a02:	2003      	movs	r0, #3
 8006a04:	e01f      	b.n	8006a46 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006a06:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a08:	e852 3f00 	ldrex	r3, [r2]
 8006a0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a10:	e842 3100 	strex	r1, r3, [r2]
 8006a14:	2900      	cmp	r1, #0
 8006a16:	d1f6      	bne.n	8006a06 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a18:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	f102 0308 	add.w	r3, r2, #8
 8006a1e:	e853 3f00 	ldrex	r3, [r3]
 8006a22:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	3208      	adds	r2, #8
 8006a28:	e842 3100 	strex	r1, r3, [r2]
 8006a2c:	2900      	cmp	r1, #0
 8006a2e:	d1f3      	bne.n	8006a18 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8006a30:	2320      	movs	r3, #32
 8006a32:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006a36:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8006a40:	2003      	movs	r0, #3
 8006a42:	e000      	b.n	8006a46 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8006a44:	2000      	movs	r0, #0
}
 8006a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006a4a <UART_CheckIdleState>:
{
 8006a4a:	b530      	push	{r4, r5, lr}
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a50:	2300      	movs	r3, #0
 8006a52:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8006a56:	f7fb fc99 	bl	800238c <HAL_GetTick>
 8006a5a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f013 0f08 	tst.w	r3, #8
 8006a64:	d10f      	bne.n	8006a86 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f013 0f04 	tst.w	r3, #4
 8006a6e:	d118      	bne.n	8006aa2 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8006a70:	2320      	movs	r3, #32
 8006a72:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006a76:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8006a7e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006a82:	b003      	add	sp, #12
 8006a84:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a94:	4620      	mov	r0, r4
 8006a96:	f7ff ff6c 	bl	8006972 <UART_WaitOnFlagUntilTimeout>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d0e3      	beq.n	8006a66 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8006a9e:	2003      	movs	r0, #3
 8006aa0:	e7ef      	b.n	8006a82 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aa2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	462b      	mov	r3, r5
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f7ff ff5e 	bl	8006972 <UART_WaitOnFlagUntilTimeout>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	d0da      	beq.n	8006a70 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8006aba:	2003      	movs	r0, #3
 8006abc:	e7e1      	b.n	8006a82 <UART_CheckIdleState+0x38>
	...

08006ac0 <HAL_UART_Init>:
  if (huart == NULL)
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	d03a      	beq.n	8006b3a <HAL_UART_Init+0x7a>
{
 8006ac4:	b510      	push	{r4, lr}
 8006ac6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006ac8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006acc:	b30b      	cbz	r3, 8006b12 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8006ace:	2324      	movs	r3, #36	; 0x24
 8006ad0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8006ad4:	6822      	ldr	r2, [r4, #0]
 8006ad6:	6813      	ldr	r3, [r2, #0]
 8006ad8:	f023 0301 	bic.w	r3, r3, #1
 8006adc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f7ff fd78 	bl	80065d4 <UART_SetConfig>
 8006ae4:	2801      	cmp	r0, #1
 8006ae6:	d013      	beq.n	8006b10 <HAL_UART_Init+0x50>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ae8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006aea:	bb13      	cbnz	r3, 8006b32 <HAL_UART_Init+0x72>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aec:	6822      	ldr	r2, [r4, #0]
 8006aee:	6853      	ldr	r3, [r2, #4]
 8006af0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006af4:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006af6:	6822      	ldr	r2, [r4, #0]
 8006af8:	6893      	ldr	r3, [r2, #8]
 8006afa:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006afe:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006b00:	6822      	ldr	r2, [r4, #0]
 8006b02:	6813      	ldr	r3, [r2, #0]
 8006b04:	f043 0301 	orr.w	r3, r3, #1
 8006b08:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f7ff ff9d 	bl	8006a4a <UART_CheckIdleState>
}
 8006b10:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006b12:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    UART_InitCallbacksToDefault(huart);
 8006b16:	f7ff fd1f 	bl	8006558 <UART_InitCallbacksToDefault>
    if (huart->MspInitCallback == NULL)
 8006b1a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8006b1e:	b123      	cbz	r3, 8006b2a <HAL_UART_Init+0x6a>
    huart->MspInitCallback(huart);
 8006b20:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8006b24:	4620      	mov	r0, r4
 8006b26:	4798      	blx	r3
 8006b28:	e7d1      	b.n	8006ace <HAL_UART_Init+0xe>
      huart->MspInitCallback = HAL_UART_MspInit;
 8006b2a:	4b05      	ldr	r3, [pc, #20]	; (8006b40 <HAL_UART_Init+0x80>)
 8006b2c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 8006b30:	e7f6      	b.n	8006b20 <HAL_UART_Init+0x60>
    UART_AdvFeatureConfig(huart);
 8006b32:	4620      	mov	r0, r4
 8006b34:	f7ff feb8 	bl	80068a8 <UART_AdvFeatureConfig>
 8006b38:	e7d8      	b.n	8006aec <HAL_UART_Init+0x2c>
    return HAL_ERROR;
 8006b3a:	2001      	movs	r0, #1
}
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	08001e21 	.word	0x08001e21

08006b44 <UART_Start_Receive_IT>:
{
 8006b44:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8006b46:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006b48:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006b4c:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006b50:	2300      	movs	r3, #0
 8006b52:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8006b54:	6883      	ldr	r3, [r0, #8]
 8006b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b5a:	d006      	beq.n	8006b6a <UART_Start_Receive_IT+0x26>
 8006b5c:	b9a3      	cbnz	r3, 8006b88 <UART_Start_Receive_IT+0x44>
 8006b5e:	6903      	ldr	r3, [r0, #16]
 8006b60:	b973      	cbnz	r3, 8006b80 <UART_Start_Receive_IT+0x3c>
 8006b62:	23ff      	movs	r3, #255	; 0xff
 8006b64:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006b68:	e014      	b.n	8006b94 <UART_Start_Receive_IT+0x50>
 8006b6a:	6903      	ldr	r3, [r0, #16]
 8006b6c:	b923      	cbnz	r3, 8006b78 <UART_Start_Receive_IT+0x34>
 8006b6e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006b72:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006b76:	e00d      	b.n	8006b94 <UART_Start_Receive_IT+0x50>
 8006b78:	23ff      	movs	r3, #255	; 0xff
 8006b7a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006b7e:	e009      	b.n	8006b94 <UART_Start_Receive_IT+0x50>
 8006b80:	237f      	movs	r3, #127	; 0x7f
 8006b82:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006b86:	e005      	b.n	8006b94 <UART_Start_Receive_IT+0x50>
 8006b88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b8c:	d02d      	beq.n	8006bea <UART_Start_Receive_IT+0xa6>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b94:	2300      	movs	r3, #0
 8006b96:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b9a:	2322      	movs	r3, #34	; 0x22
 8006b9c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba0:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba2:	f101 0308 	add.w	r3, r1, #8
 8006ba6:	e853 3f00 	ldrex	r3, [r3]
 8006baa:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bae:	3108      	adds	r1, #8
 8006bb0:	e841 3400 	strex	r4, r3, [r1]
 8006bb4:	2c00      	cmp	r4, #0
 8006bb6:	d1f3      	bne.n	8006ba0 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006bb8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bbe:	d01e      	beq.n	8006bfe <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bc0:	6883      	ldr	r3, [r0, #8]
 8006bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc6:	d043      	beq.n	8006c50 <UART_Start_Receive_IT+0x10c>
      huart->RxISR = UART_RxISR_8BIT;
 8006bc8:	4b24      	ldr	r3, [pc, #144]	; (8006c5c <UART_Start_Receive_IT+0x118>)
 8006bca:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8006bcc:	2300      	movs	r3, #0
 8006bce:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006bd2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd4:	e852 3f00 	ldrex	r3, [r2]
 8006bd8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bdc:	e842 3100 	strex	r1, r3, [r2]
 8006be0:	2900      	cmp	r1, #0
 8006be2:	d1f6      	bne.n	8006bd2 <UART_Start_Receive_IT+0x8e>
}
 8006be4:	2000      	movs	r0, #0
 8006be6:	bc10      	pop	{r4}
 8006be8:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8006bea:	6903      	ldr	r3, [r0, #16]
 8006bec:	b91b      	cbnz	r3, 8006bf6 <UART_Start_Receive_IT+0xb2>
 8006bee:	237f      	movs	r3, #127	; 0x7f
 8006bf0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006bf4:	e7ce      	b.n	8006b94 <UART_Start_Receive_IT+0x50>
 8006bf6:	233f      	movs	r3, #63	; 0x3f
 8006bf8:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006bfc:	e7ca      	b.n	8006b94 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006bfe:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d8dc      	bhi.n	8006bc0 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c06:	6883      	ldr	r3, [r0, #8]
 8006c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c0c:	d01a      	beq.n	8006c44 <UART_Start_Receive_IT+0x100>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006c0e:	4b14      	ldr	r3, [pc, #80]	; (8006c60 <UART_Start_Receive_IT+0x11c>)
 8006c10:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8006c12:	2300      	movs	r3, #0
 8006c14:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c18:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1a:	e852 3f00 	ldrex	r3, [r2]
 8006c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c22:	e842 3100 	strex	r1, r3, [r2]
 8006c26:	2900      	cmp	r1, #0
 8006c28:	d1f6      	bne.n	8006c18 <UART_Start_Receive_IT+0xd4>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c2a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2c:	f102 0308 	add.w	r3, r2, #8
 8006c30:	e853 3f00 	ldrex	r3, [r3]
 8006c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	3208      	adds	r2, #8
 8006c3a:	e842 3100 	strex	r1, r3, [r2]
 8006c3e:	2900      	cmp	r1, #0
 8006c40:	d1f3      	bne.n	8006c2a <UART_Start_Receive_IT+0xe6>
 8006c42:	e7cf      	b.n	8006be4 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c44:	6903      	ldr	r3, [r0, #16]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1e1      	bne.n	8006c0e <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006c4a:	4b06      	ldr	r3, [pc, #24]	; (8006c64 <UART_Start_Receive_IT+0x120>)
 8006c4c:	6703      	str	r3, [r0, #112]	; 0x70
 8006c4e:	e7e0      	b.n	8006c12 <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c50:	6903      	ldr	r3, [r0, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1b8      	bne.n	8006bc8 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8006c56:	4b04      	ldr	r3, [pc, #16]	; (8006c68 <UART_Start_Receive_IT+0x124>)
 8006c58:	6703      	str	r3, [r0, #112]	; 0x70
 8006c5a:	e7b7      	b.n	8006bcc <UART_Start_Receive_IT+0x88>
 8006c5c:	08005b9b 	.word	0x08005b9b
 8006c60:	08005d05 	.word	0x08005d05
 8006c64:	08005ea5 	.word	0x08005ea5
 8006c68:	08005c51 	.word	0x08005c51

08006c6c <HAL_UART_Receive_IT>:
{
 8006c6c:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c6e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006c72:	2b20      	cmp	r3, #32
 8006c74:	d11e      	bne.n	8006cb4 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8006c76:	b1f9      	cbz	r1, 8006cb8 <HAL_UART_Receive_IT+0x4c>
 8006c78:	b302      	cbz	r2, 8006cbc <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 8006c7a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d01e      	beq.n	8006cc0 <HAL_UART_Receive_IT+0x54>
 8006c82:	2301      	movs	r3, #1
 8006c84:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c8c:	6803      	ldr	r3, [r0, #0]
 8006c8e:	4c0d      	ldr	r4, [pc, #52]	; (8006cc4 <HAL_UART_Receive_IT+0x58>)
 8006c90:	42a3      	cmp	r3, r4
 8006c92:	d00c      	beq.n	8006cae <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006c9a:	d008      	beq.n	8006cae <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c9c:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9e:	e854 3f00 	ldrex	r3, [r4]
 8006ca2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca6:	e844 3500 	strex	r5, r3, [r4]
 8006caa:	2d00      	cmp	r5, #0
 8006cac:	d1f6      	bne.n	8006c9c <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 8006cae:	f7ff ff49 	bl	8006b44 <UART_Start_Receive_IT>
 8006cb2:	e000      	b.n	8006cb6 <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 8006cb4:	2002      	movs	r0, #2
}
 8006cb6:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8006cb8:	2001      	movs	r0, #1
 8006cba:	e7fc      	b.n	8006cb6 <HAL_UART_Receive_IT+0x4a>
 8006cbc:	2001      	movs	r0, #1
 8006cbe:	e7fa      	b.n	8006cb6 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 8006cc0:	2002      	movs	r0, #2
 8006cc2:	e7f8      	b.n	8006cb6 <HAL_UART_Receive_IT+0x4a>
 8006cc4:	40008000 	.word	0x40008000

08006cc8 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006cc8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006cca:	b92b      	cbnz	r3, 8006cd8 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006cd2:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8006cd6:	4770      	bx	lr
{
 8006cd8:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006cda:	6803      	ldr	r3, [r0, #0]
 8006cdc:	689a      	ldr	r2, [r3, #8]
 8006cde:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ce2:	6899      	ldr	r1, [r3, #8]
 8006ce4:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ce6:	4d09      	ldr	r5, [pc, #36]	; (8006d0c <UARTEx_SetNbDataToProcess+0x44>)
 8006ce8:	5c6b      	ldrb	r3, [r5, r1]
 8006cea:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006cec:	4c08      	ldr	r4, [pc, #32]	; (8006d10 <UARTEx_SetNbDataToProcess+0x48>)
 8006cee:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cf0:	fb93 f3f1 	sdiv	r3, r3, r1
 8006cf4:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cf8:	5cab      	ldrb	r3, [r5, r2]
 8006cfa:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006cfc:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cfe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d02:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8006d06:	bc30      	pop	{r4, r5}
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	08017978 	.word	0x08017978
 8006d10:	08017970 	.word	0x08017970

08006d14 <HAL_UARTEx_WakeupCallback>:
}
 8006d14:	4770      	bx	lr

08006d16 <HAL_UARTEx_RxFifoFullCallback>:
}
 8006d16:	4770      	bx	lr

08006d18 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8006d18:	4770      	bx	lr

08006d1a <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8006d1a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d018      	beq.n	8006d54 <HAL_UARTEx_DisableFifoMode+0x3a>
 8006d22:	2301      	movs	r3, #1
 8006d24:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006d28:	2324      	movs	r3, #36	; 0x24
 8006d2a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d2e:	6803      	ldr	r3, [r0, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006d32:	6819      	ldr	r1, [r3, #0]
 8006d34:	f021 0101 	bic.w	r1, r1, #1
 8006d38:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d3a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d42:	6801      	ldr	r1, [r0, #0]
 8006d44:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006d46:	2220      	movs	r2, #32
 8006d48:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006d4c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8006d50:	4618      	mov	r0, r3
 8006d52:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006d54:	2002      	movs	r0, #2
}
 8006d56:	4770      	bx	lr

08006d58 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006d58:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006d5a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d01d      	beq.n	8006d9e <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8006d62:	4604      	mov	r4, r0
 8006d64:	2301      	movs	r3, #1
 8006d66:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006d6a:	2324      	movs	r3, #36	; 0x24
 8006d6c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d70:	6803      	ldr	r3, [r0, #0]
 8006d72:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	f022 0201 	bic.w	r2, r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d7c:	6802      	ldr	r2, [r0, #0]
 8006d7e:	6893      	ldr	r3, [r2, #8]
 8006d80:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006d84:	4319      	orrs	r1, r3
 8006d86:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006d88:	f7ff ff9e 	bl	8006cc8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d8c:	6823      	ldr	r3, [r4, #0]
 8006d8e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006d90:	2320      	movs	r3, #32
 8006d92:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006d96:	2000      	movs	r0, #0
 8006d98:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006d9c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006d9e:	2002      	movs	r0, #2
 8006da0:	e7fc      	b.n	8006d9c <HAL_UARTEx_SetTxFifoThreshold+0x44>

08006da2 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006da2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006da4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d01d      	beq.n	8006de8 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8006dac:	4604      	mov	r4, r0
 8006dae:	2301      	movs	r3, #1
 8006db0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006db4:	2324      	movs	r3, #36	; 0x24
 8006db6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dba:	6803      	ldr	r3, [r0, #0]
 8006dbc:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	f022 0201 	bic.w	r2, r2, #1
 8006dc4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006dc6:	6802      	ldr	r2, [r0, #0]
 8006dc8:	6893      	ldr	r3, [r2, #8]
 8006dca:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8006dce:	4319      	orrs	r1, r3
 8006dd0:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006dd2:	f7ff ff79 	bl	8006cc8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006dda:	2320      	movs	r3, #32
 8006ddc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006de0:	2000      	movs	r0, #0
 8006de2:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006de6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006de8:	2002      	movs	r0, #2
 8006dea:	e7fc      	b.n	8006de6 <HAL_UARTEx_SetRxFifoThreshold+0x44>

08006dec <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 8006dec:	2804      	cmp	r0, #4
 8006dee:	d807      	bhi.n	8006e00 <LmHandlerPackageIsInitialized+0x14>
{
 8006df0:	b508      	push	{r3, lr}
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 8006df2:	4b05      	ldr	r3, [pc, #20]	; (8006e08 <LmHandlerPackageIsInitialized+0x1c>)
 8006df4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	b11b      	cbz	r3, 8006e04 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8006dfc:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 8006dfe:	bd08      	pop	{r3, pc}
        return false;
 8006e00:	2000      	movs	r0, #0
}
 8006e02:	4770      	bx	lr
        return false;
 8006e04:	2000      	movs	r0, #0
 8006e06:	e7fa      	b.n	8006dfe <LmHandlerPackageIsInitialized+0x12>
 8006e08:	2000063c 	.word	0x2000063c

08006e0c <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8006e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0e:	4605      	mov	r5, r0
 8006e10:	460f      	mov	r7, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006e12:	2400      	movs	r4, #0
 8006e14:	e018      	b.n	8006e48 <LmHandlerPackagesNotify+0x3c>
                    }
                    break;
                }
                case PACKAGE_MCPS_INDICATION:
                {
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8006e16:	69da      	ldr	r2, [r3, #28]
 8006e18:	b1a2      	cbz	r2, 8006e44 <LmHandlerPackagesNotify+0x38>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8006e1a:	781a      	ldrb	r2, [r3, #0]
 8006e1c:	78fb      	ldrb	r3, [r7, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d005      	beq.n	8006e2e <LmHandlerPackagesNotify+0x22>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8006e22:	b97c      	cbnz	r4, 8006e44 <LmHandlerPackagesNotify+0x38>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 8006e24:	4b13      	ldr	r3, [pc, #76]	; (8006e74 <LmHandlerPackagesNotify+0x68>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	4798      	blx	r3
 8006e2c:	b150      	cbz	r0, 8006e44 <LmHandlerPackagesNotify+0x38>
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 8006e2e:	4b11      	ldr	r3, [pc, #68]	; (8006e74 <LmHandlerPackagesNotify+0x68>)
 8006e30:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8006e34:	69db      	ldr	r3, [r3, #28]
 8006e36:	4638      	mov	r0, r7
 8006e38:	4798      	blx	r3
 8006e3a:	e003      	b.n	8006e44 <LmHandlerPackagesNotify+0x38>
                    }
                    break;
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	b10b      	cbz	r3, 8006e44 <LmHandlerPackagesNotify+0x38>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 8006e40:	4638      	mov	r0, r7
 8006e42:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006e44:	3401      	adds	r4, #1
 8006e46:	b264      	sxtb	r4, r4
 8006e48:	2c04      	cmp	r4, #4
 8006e4a:	dc11      	bgt.n	8006e70 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 8006e4c:	4626      	mov	r6, r4
 8006e4e:	4b09      	ldr	r3, [pc, #36]	; (8006e74 <LmHandlerPackagesNotify+0x68>)
 8006e50:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d0f5      	beq.n	8006e44 <LmHandlerPackagesNotify+0x38>
            switch( notifyType )
 8006e58:	2d01      	cmp	r5, #1
 8006e5a:	d0dc      	beq.n	8006e16 <LmHandlerPackagesNotify+0xa>
 8006e5c:	2d02      	cmp	r5, #2
 8006e5e:	d0ed      	beq.n	8006e3c <LmHandlerPackagesNotify+0x30>
 8006e60:	2d00      	cmp	r5, #0
 8006e62:	d1ef      	bne.n	8006e44 <LmHandlerPackagesNotify+0x38>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d0ec      	beq.n	8006e44 <LmHandlerPackagesNotify+0x38>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 8006e6a:	4638      	mov	r0, r7
 8006e6c:	4798      	blx	r3
 8006e6e:	e7e9      	b.n	8006e44 <LmHandlerPackagesNotify+0x38>
                    break;
                }
            }
        }
    }
}
 8006e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e72:	bf00      	nop
 8006e74:	2000063c 	.word	0x2000063c

08006e78 <McpsConfirm>:
{
 8006e78:	b510      	push	{r4, lr}
 8006e7a:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 8006e7c:	480c      	ldr	r0, [pc, #48]	; (8006eb0 <McpsConfirm+0x38>)
 8006e7e:	2301      	movs	r3, #1
 8006e80:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mcpsConfirm->Status;
 8006e82:	7863      	ldrb	r3, [r4, #1]
 8006e84:	7043      	strb	r3, [r0, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8006e86:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8006e8a:	7103      	strb	r3, [r0, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8006e8c:	68e3      	ldr	r3, [r4, #12]
 8006e8e:	6083      	str	r3, [r0, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8006e90:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8006e94:	7503      	strb	r3, [r0, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 8006e96:	6923      	ldr	r3, [r4, #16]
 8006e98:	7543      	strb	r3, [r0, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8006e9a:	7923      	ldrb	r3, [r4, #4]
 8006e9c:	70c3      	strb	r3, [r0, #3]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8006e9e:	4b05      	ldr	r3, [pc, #20]	; (8006eb4 <McpsConfirm+0x3c>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8006ea6:	4621      	mov	r1, r4
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	f7ff ffaf 	bl	8006e0c <LmHandlerPackagesNotify>
}
 8006eae:	bd10      	pop	{r4, pc}
 8006eb0:	20000684 	.word	0x20000684
 8006eb4:	20000638 	.word	0x20000638

08006eb8 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 8006eb8:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006eba:	2400      	movs	r4, #0
 8006ebc:	e001      	b.n	8006ec2 <LmHandlerPackagesProcess+0xa>
 8006ebe:	3401      	adds	r4, #1
 8006ec0:	b264      	sxtb	r4, r4
 8006ec2:	2c04      	cmp	r4, #4
 8006ec4:	dc12      	bgt.n	8006eec <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8006ec6:	4b0a      	ldr	r3, [pc, #40]	; (8006ef0 <LmHandlerPackagesProcess+0x38>)
 8006ec8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0f6      	beq.n	8006ebe <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8006ed0:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d0f3      	beq.n	8006ebe <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8006ed6:	b2e0      	uxtb	r0, r4
 8006ed8:	f7ff ff88 	bl	8006dec <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d0ee      	beq.n	8006ebe <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 8006ee0:	4b03      	ldr	r3, [pc, #12]	; (8006ef0 <LmHandlerPackagesProcess+0x38>)
 8006ee2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	4798      	blx	r3
 8006eea:	e7e8      	b.n	8006ebe <LmHandlerPackagesProcess+0x6>
        }
    }
}
 8006eec:	bd38      	pop	{r3, r4, r5, pc}
 8006eee:	bf00      	nop
 8006ef0:	2000063c 	.word	0x2000063c

08006ef4 <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 8006ef4:	b500      	push	{lr}
 8006ef6:	b083      	sub	sp, #12
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8006ef8:	4b05      	ldr	r3, [pc, #20]	; (8006f10 <DisplayClassUpdate+0x1c>)
 8006efa:	5c1b      	ldrb	r3, [r3, r0]
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	4b05      	ldr	r3, [pc, #20]	; (8006f14 <DisplayClassUpdate+0x20>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	4611      	mov	r1, r2
 8006f04:	2002      	movs	r0, #2
 8006f06:	f00f fc47 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
}
 8006f0a:	b003      	add	sp, #12
 8006f0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f10:	0801799c 	.word	0x0801799c
 8006f14:	08017980 	.word	0x08017980

08006f18 <LmHandlerSetSystemMaxRxError>:
{
 8006f18:	b500      	push	{lr}
 8006f1a:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8006f1c:	2322      	movs	r3, #34	; 0x22
 8006f1e:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8006f22:	9002      	str	r0, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8006f24:	a801      	add	r0, sp, #4
 8006f26:	f003 fa6b 	bl	800a400 <LoRaMacMibSetRequestConfirm>
 8006f2a:	b910      	cbnz	r0, 8006f32 <LmHandlerSetSystemMaxRxError+0x1a>
}
 8006f2c:	b00b      	add	sp, #44	; 0x2c
 8006f2e:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8006f32:	f04f 30ff 	mov.w	r0, #4294967295
 8006f36:	e7f9      	b.n	8006f2c <LmHandlerSetSystemMaxRxError+0x14>

08006f38 <LmHandlerDeviceTimeReq>:
{
 8006f38:	b500      	push	{lr}
 8006f3a:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 8006f3c:	230a      	movs	r3, #10
 8006f3e:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 8006f42:	a801      	add	r0, sp, #4
 8006f44:	f003 fcd4 	bl	800a8f0 <LoRaMacMlmeRequest>
    if( status == LORAMAC_STATUS_OK )
 8006f48:	b910      	cbnz	r0, 8006f50 <LmHandlerDeviceTimeReq+0x18>
}
 8006f4a:	b007      	add	sp, #28
 8006f4c:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8006f50:	f04f 30ff 	mov.w	r0, #4294967295
 8006f54:	e7f9      	b.n	8006f4a <LmHandlerDeviceTimeReq+0x12>
	...

08006f58 <LmHandlerConfigure>:
{
 8006f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f5a:	b095      	sub	sp, #84	; 0x54
 8006f5c:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8006f5e:	4c63      	ldr	r4, [pc, #396]	; (80070ec <LmHandlerConfigure+0x194>)
 8006f60:	2210      	movs	r2, #16
 8006f62:	4620      	mov	r0, r4
 8006f64:	f00f fd2c 	bl	80169c0 <UTIL_MEM_cpy_8>
    loraInfo = LoraInfo_GetPtr();
 8006f68:	f7fa fa7e 	bl	8001468 <LoraInfo_GetPtr>
    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 8006f6c:	7822      	ldrb	r2, [r4, #0]
 8006f6e:	2301      	movs	r3, #1
 8006f70:	4093      	lsls	r3, r2
 8006f72:	6841      	ldr	r1, [r0, #4]
 8006f74:	420b      	tst	r3, r1
 8006f76:	f000 80aa 	beq.w	80070ce <LmHandlerConfigure+0x176>
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 8006f7a:	495d      	ldr	r1, [pc, #372]	; (80070f0 <LmHandlerConfigure+0x198>)
 8006f7c:	485d      	ldr	r0, [pc, #372]	; (80070f4 <LmHandlerConfigure+0x19c>)
 8006f7e:	f002 feef 	bl	8009d60 <LoRaMacInitialization>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	f040 80ae 	bne.w	80070e4 <LmHandlerConfigure+0x18c>
    nbNvmData = NvmDataMgmtRestore( );
 8006f88:	f004 fead 	bl	800bce6 <NvmDataMgmtRestore>
    if( nbNvmData > 0 )
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	f000 80a5 	beq.w	80070dc <LmHandlerConfigure+0x184>
        CtxRestoreDone = true;
 8006f92:	4b59      	ldr	r3, [pc, #356]	; (80070f8 <LmHandlerConfigure+0x1a0>)
 8006f94:	2201      	movs	r2, #1
 8006f96:	701a      	strb	r2, [r3, #0]
    mibReq.Type = MIB_DEV_EUI;
 8006f98:	2502      	movs	r5, #2
 8006f9a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    LoRaMacMibGetRequestConfirm( &mibReq );
 8006f9e:	a80b      	add	r0, sp, #44	; 0x2c
 8006fa0:	f003 f916 	bl	800a1d0 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 8006fa4:	4c55      	ldr	r4, [pc, #340]	; (80070fc <LmHandlerConfigure+0x1a4>)
 8006fa6:	2208      	movs	r2, #8
 8006fa8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006faa:	4620      	mov	r0, r4
 8006fac:	f00d fa6b 	bl	8014486 <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    LoRaMacMibGetRequestConfirm( &mibReq );
 8006fb6:	a80b      	add	r0, sp, #44	; 0x2c
 8006fb8:	f003 f90a 	bl	800a1d0 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 8006fbc:	2208      	movs	r2, #8
 8006fbe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006fc0:	18a0      	adds	r0, r4, r2
 8006fc2:	f00d fa60 	bl	8014486 <memcpy1>
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 8006fc6:	4b4e      	ldr	r3, [pc, #312]	; (8007100 <LmHandlerConfigure+0x1a8>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	4798      	blx	r3
 8006fce:	6160      	str	r0, [r4, #20]
    mibReq.Type = MIB_DEV_ADDR;
 8006fd0:	2206      	movs	r2, #6
 8006fd2:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 8006fd6:	900c      	str	r0, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006fd8:	a80b      	add	r0, sp, #44	; 0x2c
 8006fda:	f003 fa11 	bl	800a400 <LoRaMacMibSetRequestConfirm>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8006fde:	7823      	ldrb	r3, [r4, #0]
 8006fe0:	7862      	ldrb	r2, [r4, #1]
 8006fe2:	78a1      	ldrb	r1, [r4, #2]
 8006fe4:	78e0      	ldrb	r0, [r4, #3]
 8006fe6:	7926      	ldrb	r6, [r4, #4]
 8006fe8:	7967      	ldrb	r7, [r4, #5]
 8006fea:	f894 c006 	ldrb.w	ip, [r4, #6]
 8006fee:	f894 e007 	ldrb.w	lr, [r4, #7]
 8006ff2:	f8cd e01c 	str.w	lr, [sp, #28]
 8006ff6:	f8cd c018 	str.w	ip, [sp, #24]
 8006ffa:	9705      	str	r7, [sp, #20]
 8006ffc:	9604      	str	r6, [sp, #16]
 8006ffe:	9003      	str	r0, [sp, #12]
 8007000:	9102      	str	r1, [sp, #8]
 8007002:	9201      	str	r2, [sp, #4]
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	4b3f      	ldr	r3, [pc, #252]	; (8007104 <LmHandlerConfigure+0x1ac>)
 8007008:	2200      	movs	r2, #0
 800700a:	4611      	mov	r1, r2
 800700c:	4628      	mov	r0, r5
 800700e:	f00f fbc3 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8007012:	7a23      	ldrb	r3, [r4, #8]
 8007014:	7a62      	ldrb	r2, [r4, #9]
 8007016:	7aa1      	ldrb	r1, [r4, #10]
 8007018:	7ae0      	ldrb	r0, [r4, #11]
 800701a:	7b26      	ldrb	r6, [r4, #12]
 800701c:	7b67      	ldrb	r7, [r4, #13]
 800701e:	f894 c00e 	ldrb.w	ip, [r4, #14]
 8007022:	f894 e00f 	ldrb.w	lr, [r4, #15]
 8007026:	f8cd e01c 	str.w	lr, [sp, #28]
 800702a:	f8cd c018 	str.w	ip, [sp, #24]
 800702e:	9705      	str	r7, [sp, #20]
 8007030:	9604      	str	r6, [sp, #16]
 8007032:	9003      	str	r0, [sp, #12]
 8007034:	9102      	str	r1, [sp, #8]
 8007036:	9201      	str	r2, [sp, #4]
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	4b33      	ldr	r3, [pc, #204]	; (8007108 <LmHandlerConfigure+0x1b0>)
 800703c:	2200      	movs	r2, #0
 800703e:	4611      	mov	r1, r2
 8007040:	4628      	mov	r0, r5
 8007042:	f00f fba9 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 8007046:	7de3      	ldrb	r3, [r4, #23]
 8007048:	7da2      	ldrb	r2, [r4, #22]
 800704a:	7d61      	ldrb	r1, [r4, #21]
 800704c:	7d20      	ldrb	r0, [r4, #20]
 800704e:	9003      	str	r0, [sp, #12]
 8007050:	9102      	str	r1, [sp, #8]
 8007052:	9201      	str	r2, [sp, #4]
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	4b2d      	ldr	r3, [pc, #180]	; (800710c <LmHandlerConfigure+0x1b4>)
 8007058:	2200      	movs	r2, #0
 800705a:	4611      	mov	r1, r2
 800705c:	4628      	mov	r0, r5
 800705e:	f00f fb9b 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8007062:	260f      	movs	r6, #15
 8007064:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8007068:	2301      	movs	r3, #1
 800706a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 800706e:	a80b      	add	r0, sp, #44	; 0x2c
 8007070:	f003 f9c6 	bl	800a400 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NET_ID;
 8007074:	2305      	movs	r3, #5
 8007076:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800707a:	2400      	movs	r4, #0
 800707c:	940c      	str	r4, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm(&mibReq);
 800707e:	a80b      	add	r0, sp, #44	; 0x2c
 8007080:	f003 f9be 	bl	800a400 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8007084:	2310      	movs	r3, #16
 8007086:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800708a:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 800708e:	a80b      	add	r0, sp, #44	; 0x2c
 8007090:	f003 f9b6 	bl	800a400 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 8007094:	2304      	movs	r3, #4
 8007096:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800709a:	4d14      	ldr	r5, [pc, #80]	; (80070ec <LmHandlerConfigure+0x194>)
 800709c:	78ab      	ldrb	r3, [r5, #2]
 800709e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 80070a2:	a80b      	add	r0, sp, #44	; 0x2c
 80070a4:	f003 f9ac 	bl	800a400 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80070a8:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 80070ac:	a909      	add	r1, sp, #36	; 0x24
 80070ae:	7828      	ldrb	r0, [r5, #0]
 80070b0:	f004 fe27 	bl	800bd02 <RegionGetPhyParam>
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 80070b4:	1b03      	subs	r3, r0, r4
 80070b6:	bf18      	it	ne
 80070b8:	2301      	movne	r3, #1
 80070ba:	716b      	strb	r3, [r5, #5]
    LmHandlerSetSystemMaxRxError( 20 );
 80070bc:	2014      	movs	r0, #20
 80070be:	f7ff ff2b 	bl	8006f18 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 80070c2:	7968      	ldrb	r0, [r5, #5]
 80070c4:	f003 fda4 	bl	800ac10 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 80070c8:	4620      	mov	r0, r4
}
 80070ca:	b015      	add	sp, #84	; 0x54
 80070cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 80070ce:	4b10      	ldr	r3, [pc, #64]	; (8007110 <LmHandlerConfigure+0x1b8>)
 80070d0:	2201      	movs	r2, #1
 80070d2:	2100      	movs	r1, #0
 80070d4:	4608      	mov	r0, r1
 80070d6:	f00f fb5f 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 80070da:	e7fe      	b.n	80070da <LmHandlerConfigure+0x182>
        CtxRestoreDone = false;
 80070dc:	4b06      	ldr	r3, [pc, #24]	; (80070f8 <LmHandlerConfigure+0x1a0>)
 80070de:	2200      	movs	r2, #0
 80070e0:	701a      	strb	r2, [r3, #0]
 80070e2:	e759      	b.n	8006f98 <LmHandlerConfigure+0x40>
            return LORAMAC_HANDLER_ERROR;
 80070e4:	f04f 30ff 	mov.w	r0, #4294967295
 80070e8:	e7ef      	b.n	80070ca <LmHandlerConfigure+0x172>
 80070ea:	bf00      	nop
 80070ec:	20000650 	.word	0x20000650
 80070f0:	20000660 	.word	0x20000660
 80070f4:	20000674 	.word	0x20000674
 80070f8:	20000636 	.word	0x20000636
 80070fc:	20000060 	.word	0x20000060
 8007100:	20000638 	.word	0x20000638
 8007104:	080179ec 	.word	0x080179ec
 8007108:	08017a28 	.word	0x08017a28
 800710c:	08017a64 	.word	0x08017a64
 8007110:	080179a0 	.word	0x080179a0

08007114 <LmHandlerProcess>:
{
 8007114:	b508      	push	{r3, lr}
    LoRaMacProcess( );
 8007116:	f002 fdef 	bl	8009cf8 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 800711a:	f7ff fecd 	bl	8006eb8 <LmHandlerPackagesProcess>
    NvmDataMgmtStore( );
 800711e:	f004 fde0 	bl	800bce2 <NvmDataMgmtStore>
}
 8007122:	bd08      	pop	{r3, pc}

08007124 <LmHandlerJoinStatus>:
{
 8007124:	b500      	push	{lr}
 8007126:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007128:	2301      	movs	r3, #1
 800712a:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800712e:	a801      	add	r0, sp, #4
 8007130:	f003 f84e 	bl	800a1d0 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8007134:	b920      	cbnz	r0, 8007140 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007136:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800713a:	b110      	cbz	r0, 8007142 <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 800713c:	2001      	movs	r0, #1
 800713e:	e000      	b.n	8007142 <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 8007140:	2000      	movs	r0, #0
}
 8007142:	b00b      	add	sp, #44	; 0x2c
 8007144:	f85d fb04 	ldr.w	pc, [sp], #4

08007148 <LmHandlerRequestClass>:
{
 8007148:	b510      	push	{r4, lr}
 800714a:	b08a      	sub	sp, #40	; 0x28
 800714c:	4604      	mov	r4, r0
    if (LoRaMacIsBusy() == true)
 800714e:	f002 fdc1 	bl	8009cd4 <LoRaMacIsBusy>
 8007152:	2800      	cmp	r0, #0
 8007154:	d13d      	bne.n	80071d2 <LmHandlerRequestClass+0x8a>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8007156:	f7ff ffe5 	bl	8007124 <LmHandlerJoinStatus>
 800715a:	2801      	cmp	r0, #1
 800715c:	d13c      	bne.n	80071d8 <LmHandlerRequestClass+0x90>
    mibReq.Type = MIB_DEVICE_CLASS;
 800715e:	2300      	movs	r3, #0
 8007160:	f88d 3004 	strb.w	r3, [sp, #4]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007164:	a801      	add	r0, sp, #4
 8007166:	f003 f833 	bl	800a1d0 <LoRaMacMibGetRequestConfirm>
 800716a:	2800      	cmp	r0, #0
 800716c:	d137      	bne.n	80071de <LmHandlerRequestClass+0x96>
    currentClass = mibReq.Param.Class;
 800716e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if( currentClass != newClass )
 8007172:	42a3      	cmp	r3, r4
 8007174:	d036      	beq.n	80071e4 <LmHandlerRequestClass+0x9c>
        switch( newClass )
 8007176:	2c01      	cmp	r4, #1
 8007178:	d036      	beq.n	80071e8 <LmHandlerRequestClass+0xa0>
 800717a:	2c02      	cmp	r4, #2
 800717c:	d017      	beq.n	80071ae <LmHandlerRequestClass+0x66>
 800717e:	b114      	cbz	r4, 8007186 <LmHandlerRequestClass+0x3e>
 8007180:	2000      	movs	r0, #0
}
 8007182:	b00a      	add	sp, #40	; 0x28
 8007184:	bd10      	pop	{r4, pc}
                if( currentClass != CLASS_A )
 8007186:	b90b      	cbnz	r3, 800718c <LmHandlerRequestClass+0x44>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007188:	2000      	movs	r0, #0
 800718a:	e7fa      	b.n	8007182 <LmHandlerRequestClass+0x3a>
                    mibReq.Param.Class = newClass;
 800718c:	f88d 4008 	strb.w	r4, [sp, #8]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8007190:	a801      	add	r0, sp, #4
 8007192:	f003 f935 	bl	800a400 <LoRaMacMibSetRequestConfirm>
 8007196:	bb50      	cbnz	r0, 80071ee <LmHandlerRequestClass+0xa6>
                        DisplayClassUpdate(newClass);
 8007198:	4620      	mov	r0, r4
 800719a:	f7ff feab 	bl	8006ef4 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800719e:	4b1a      	ldr	r3, [pc, #104]	; (8007208 <LmHandlerRequestClass+0xc0>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a4:	b333      	cbz	r3, 80071f4 <LmHandlerRequestClass+0xac>
                            LmHandlerCallbacks->OnClassChange( newClass );
 80071a6:	4620      	mov	r0, r4
 80071a8:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80071aa:	2000      	movs	r0, #0
 80071ac:	e7e9      	b.n	8007182 <LmHandlerRequestClass+0x3a>
                if( currentClass != CLASS_A )
 80071ae:	bb1b      	cbnz	r3, 80071f8 <LmHandlerRequestClass+0xb0>
                    mibReq.Param.Class = newClass;
 80071b0:	f88d 4008 	strb.w	r4, [sp, #8]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 80071b4:	a801      	add	r0, sp, #4
 80071b6:	f003 f923 	bl	800a400 <LoRaMacMibSetRequestConfirm>
 80071ba:	bb00      	cbnz	r0, 80071fe <LmHandlerRequestClass+0xb6>
                        DisplayClassUpdate(newClass);
 80071bc:	4620      	mov	r0, r4
 80071be:	f7ff fe99 	bl	8006ef4 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 80071c2:	4b11      	ldr	r3, [pc, #68]	; (8007208 <LmHandlerRequestClass+0xc0>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c8:	b1e3      	cbz	r3, 8007204 <LmHandlerRequestClass+0xbc>
                            LmHandlerCallbacks->OnClassChange( newClass );
 80071ca:	4620      	mov	r0, r4
 80071cc:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80071ce:	2000      	movs	r0, #0
 80071d0:	e7d7      	b.n	8007182 <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_BUSY_ERROR;
 80071d2:	f06f 0001 	mvn.w	r0, #1
 80071d6:	e7d4      	b.n	8007182 <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80071d8:	f06f 0002 	mvn.w	r0, #2
 80071dc:	e7d1      	b.n	8007182 <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_ERROR;
 80071de:	f04f 30ff 	mov.w	r0, #4294967295
 80071e2:	e7ce      	b.n	8007182 <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80071e4:	2000      	movs	r0, #0
 80071e6:	e7cc      	b.n	8007182 <LmHandlerRequestClass+0x3a>
                errorStatus = LORAMAC_HANDLER_ERROR;
 80071e8:	f04f 30ff 	mov.w	r0, #4294967295
 80071ec:	e7c9      	b.n	8007182 <LmHandlerRequestClass+0x3a>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 80071ee:	f04f 30ff 	mov.w	r0, #4294967295
 80071f2:	e7c6      	b.n	8007182 <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80071f4:	2000      	movs	r0, #0
 80071f6:	e7c4      	b.n	8007182 <LmHandlerRequestClass+0x3a>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 80071f8:	f04f 30ff 	mov.w	r0, #4294967295
 80071fc:	e7c1      	b.n	8007182 <LmHandlerRequestClass+0x3a>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 80071fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007202:	e7be      	b.n	8007182 <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007204:	2000      	movs	r0, #0
 8007206:	e7bc      	b.n	8007182 <LmHandlerRequestClass+0x3a>
 8007208:	20000638 	.word	0x20000638

0800720c <LmHandlerJoin>:
{
 800720c:	b500      	push	{lr}
 800720e:	b08f      	sub	sp, #60	; 0x3c
    if ( mode == ACTIVATION_TYPE_OTAA )
 8007210:	2802      	cmp	r0, #2
 8007212:	d021      	beq.n	8007258 <LmHandlerJoin+0x4c>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8007214:	4b1d      	ldr	r3, [pc, #116]	; (800728c <LmHandlerJoin+0x80>)
 8007216:	2201      	movs	r2, #1
 8007218:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800721a:	4a1d      	ldr	r2, [pc, #116]	; (8007290 <LmHandlerJoin+0x84>)
 800721c:	f992 2003 	ldrsb.w	r2, [r2, #3]
 8007220:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8007222:	2200      	movs	r2, #0
 8007224:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 8007226:	4b1b      	ldr	r3, [pc, #108]	; (8007294 <LmHandlerJoin+0x88>)
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	b32b      	cbz	r3, 8007278 <LmHandlerJoin+0x6c>
        LoRaMacStart();
 800722c:	f002 ff62 	bl	800a0f4 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007230:	2301      	movs	r3, #1
 8007232:	f88d 3014 	strb.w	r3, [sp, #20]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8007236:	f88d 3018 	strb.w	r3, [sp, #24]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800723a:	a805      	add	r0, sp, #20
 800723c:	f003 f8e0 	bl	800a400 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8007240:	4b15      	ldr	r3, [pc, #84]	; (8007298 <LmHandlerJoin+0x8c>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	4811      	ldr	r0, [pc, #68]	; (800728c <LmHandlerJoin+0x80>)
 8007248:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800724a:	4b11      	ldr	r3, [pc, #68]	; (8007290 <LmHandlerJoin+0x84>)
 800724c:	7858      	ldrb	r0, [r3, #1]
 800724e:	f7ff ff7b 	bl	8007148 <LmHandlerRequestClass>
}
 8007252:	b00f      	add	sp, #60	; 0x3c
 8007254:	f85d fb04 	ldr.w	pc, [sp], #4
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8007258:	4b0c      	ldr	r3, [pc, #48]	; (800728c <LmHandlerJoin+0x80>)
 800725a:	2202      	movs	r2, #2
 800725c:	709a      	strb	r2, [r3, #2]
        LoRaMacStart();
 800725e:	f002 ff49 	bl	800a0f4 <LoRaMacStart>
        mlmeReq.Type = MLME_JOIN;
 8007262:	2301      	movs	r3, #1
 8007264:	f88d 3000 	strb.w	r3, [sp]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8007268:	4b09      	ldr	r3, [pc, #36]	; (8007290 <LmHandlerJoin+0x84>)
 800726a:	78db      	ldrb	r3, [r3, #3]
 800726c:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMlmeRequest( &mlmeReq );
 8007270:	4668      	mov	r0, sp
 8007272:	f003 fb3d 	bl	800a8f0 <LoRaMacMlmeRequest>
 8007276:	e7ec      	b.n	8007252 <LmHandlerJoin+0x46>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8007278:	2327      	movs	r3, #39	; 0x27
 800727a:	f88d 3014 	strb.w	r3, [sp, #20]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800727e:	4b07      	ldr	r3, [pc, #28]	; (800729c <LmHandlerJoin+0x90>)
 8007280:	9306      	str	r3, [sp, #24]
            LoRaMacMibSetRequestConfirm(&mibReq);
 8007282:	a805      	add	r0, sp, #20
 8007284:	f003 f8bc 	bl	800a400 <LoRaMacMibSetRequestConfirm>
 8007288:	e7d0      	b.n	800722c <LmHandlerJoin+0x20>
 800728a:	bf00      	nop
 800728c:	20000078 	.word	0x20000078
 8007290:	20000650 	.word	0x20000650
 8007294:	20000636 	.word	0x20000636
 8007298:	20000638 	.word	0x20000638
 800729c:	01000300 	.word	0x01000300

080072a0 <LmHandlerSend>:
{
 80072a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072a2:	b087      	sub	sp, #28
 80072a4:	4604      	mov	r4, r0
 80072a6:	460e      	mov	r6, r1
 80072a8:	4615      	mov	r5, r2
 80072aa:	461f      	mov	r7, r3
    if (LoRaMacIsBusy() == true)
 80072ac:	f002 fd12 	bl	8009cd4 <LoRaMacIsBusy>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d16c      	bne.n	800738e <LmHandlerSend+0xee>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 80072b4:	f7ff ff36 	bl	8007124 <LmHandlerJoinStatus>
 80072b8:	2801      	cmp	r0, #1
 80072ba:	d13d      	bne.n	8007338 <LmHandlerSend+0x98>
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 80072bc:	4b39      	ldr	r3, [pc, #228]	; (80073a4 <LmHandlerSend+0x104>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	4798      	blx	r3
 80072c4:	b138      	cbz	r0, 80072d6 <LmHandlerSend+0x36>
 80072c6:	7823      	ldrb	r3, [r4, #0]
 80072c8:	4a36      	ldr	r2, [pc, #216]	; (80073a4 <LmHandlerSend+0x104>)
 80072ca:	6812      	ldr	r2, [r2, #0]
 80072cc:	7812      	ldrb	r2, [r2, #0]
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d001      	beq.n	80072d6 <LmHandlerSend+0x36>
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d15e      	bne.n	8007394 <LmHandlerSend+0xf4>
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 80072d6:	4b34      	ldr	r3, [pc, #208]	; (80073a8 <LmHandlerSend+0x108>)
 80072d8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80072dc:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 80072e0:	4669      	mov	r1, sp
 80072e2:	7860      	ldrb	r0, [r4, #1]
 80072e4:	f002 ff0e 	bl	800a104 <LoRaMacQueryTxPossible>
 80072e8:	b368      	cbz	r0, 8007346 <LmHandlerSend+0xa6>
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 80072ea:	2200      	movs	r2, #0
 80072ec:	4b2f      	ldr	r3, [pc, #188]	; (80073ac <LmHandlerSend+0x10c>)
 80072ee:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 80072f0:	f88d 2004 	strb.w	r2, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 80072f4:	9203      	str	r2, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 80072f6:	f8ad 2010 	strh.w	r2, [sp, #16]
    TxParams.AppData = *appData;
 80072fa:	4a2c      	ldr	r2, [pc, #176]	; (80073ac <LmHandlerSend+0x10c>)
 80072fc:	f102 060c 	add.w	r6, r2, #12
 8007300:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007304:	e886 0003 	stmia.w	r6, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8007308:	4b27      	ldr	r3, [pc, #156]	; (80073a8 <LmHandlerSend+0x108>)
 800730a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800730e:	7113      	strb	r3, [r2, #4]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8007310:	4639      	mov	r1, r7
 8007312:	a801      	add	r0, sp, #4
 8007314:	f003 fbc2 	bl	800aa9c <LoRaMacMcpsRequest>
    if (nextTxIn != NULL)
 8007318:	b10d      	cbz	r5, 800731e <LmHandlerSend+0x7e>
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800731a:	9b05      	ldr	r3, [sp, #20]
 800731c:	602b      	str	r3, [r5, #0]
    switch (status)
 800731e:	2811      	cmp	r0, #17
 8007320:	d832      	bhi.n	8007388 <LmHandlerSend+0xe8>
 8007322:	e8df f000 	tbb	[pc, r0]
 8007326:	3a26      	.short	0x3a26
 8007328:	31313131 	.word	0x31313131
 800732c:	31312831 	.word	0x31312831
 8007330:	31312e31 	.word	0x31312e31
 8007334:	2b3a3a3a 	.word	0x2b3a3a3a
        LmHandlerJoin(JoinParams.Mode);
 8007338:	4b1d      	ldr	r3, [pc, #116]	; (80073b0 <LmHandlerSend+0x110>)
 800733a:	7898      	ldrb	r0, [r3, #2]
 800733c:	f7ff ff66 	bl	800720c <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007340:	f06f 0002 	mvn.w	r0, #2
 8007344:	e02b      	b.n	800739e <LmHandlerSend+0xfe>
        TxParams.MsgType = isTxConfirmed;
 8007346:	4b19      	ldr	r3, [pc, #100]	; (80073ac <LmHandlerSend+0x10c>)
 8007348:	709e      	strb	r6, [r3, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800734a:	7823      	ldrb	r3, [r4, #0]
 800734c:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8007350:	7863      	ldrb	r3, [r4, #1]
 8007352:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8007356:	6863      	ldr	r3, [r4, #4]
 8007358:	9303      	str	r3, [sp, #12]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 800735a:	b91e      	cbnz	r6, 8007364 <LmHandlerSend+0xc4>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800735c:	2300      	movs	r3, #0
 800735e:	f88d 3004 	strb.w	r3, [sp, #4]
 8007362:	e7ca      	b.n	80072fa <LmHandlerSend+0x5a>
            mcpsReq.Type = MCPS_CONFIRMED;
 8007364:	2301      	movs	r3, #1
 8007366:	f88d 3004 	strb.w	r3, [sp, #4]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800736a:	2308      	movs	r3, #8
 800736c:	f88d 3013 	strb.w	r3, [sp, #19]
 8007370:	e7c3      	b.n	80072fa <LmHandlerSend+0x5a>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8007372:	2000      	movs	r0, #0
 8007374:	e013      	b.n	800739e <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007376:	f06f 0002 	mvn.w	r0, #2
            break;
 800737a:	e010      	b.n	800739e <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800737c:	f06f 0004 	mvn.w	r0, #4
            break;
 8007380:	e00d      	b.n	800739e <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8007382:	f06f 0005 	mvn.w	r0, #5
            break;
 8007386:	e00a      	b.n	800739e <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8007388:	f04f 30ff 	mov.w	r0, #4294967295
            break;
 800738c:	e007      	b.n	800739e <LmHandlerSend+0xfe>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800738e:	f06f 0001 	mvn.w	r0, #1
 8007392:	e004      	b.n	800739e <LmHandlerSend+0xfe>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 8007394:	f06f 0003 	mvn.w	r0, #3
 8007398:	e001      	b.n	800739e <LmHandlerSend+0xfe>
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800739a:	f06f 0001 	mvn.w	r0, #1
}
 800739e:	b007      	add	sp, #28
 80073a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073a2:	bf00      	nop
 80073a4:	2000063c 	.word	0x2000063c
 80073a8:	20000650 	.word	0x20000650
 80073ac:	20000684 	.word	0x20000684
 80073b0:	20000078 	.word	0x20000078

080073b4 <MlmeIndication>:
{
 80073b4:	b510      	push	{r4, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 80073ba:	4b17      	ldr	r3, [pc, #92]	; (8007418 <MlmeIndication+0x64>)
 80073bc:	2200      	movs	r2, #0
 80073be:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 80073c0:	7842      	ldrb	r2, [r0, #1]
 80073c2:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 80073c4:	f9b1 0000 	ldrsh.w	r0, [r1]
 80073c8:	70d8      	strb	r0, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 80073ca:	f991 0002 	ldrsb.w	r0, [r1, #2]
 80073ce:	7118      	strb	r0, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 80073d0:	f991 1003 	ldrsb.w	r1, [r1, #3]
 80073d4:	7319      	strb	r1, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 80073d6:	2a0e      	cmp	r2, #14
 80073d8:	d005      	beq.n	80073e6 <MlmeIndication+0x32>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 80073da:	4b10      	ldr	r3, [pc, #64]	; (800741c <MlmeIndication+0x68>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	490d      	ldr	r1, [pc, #52]	; (8007418 <MlmeIndication+0x64>)
 80073e2:	2000      	movs	r0, #0
 80073e4:	4798      	blx	r3
    switch( mlmeIndication->MlmeIndication )
 80073e6:	7823      	ldrb	r3, [r4, #0]
 80073e8:	2b07      	cmp	r3, #7
 80073ea:	d001      	beq.n	80073f0 <MlmeIndication+0x3c>
}
 80073ec:	b002      	add	sp, #8
 80073ee:	bd10      	pop	{r4, pc}
            LmHandlerAppData_t appData =
 80073f0:	2300      	movs	r3, #0
 80073f2:	f88d 3000 	strb.w	r3, [sp]
 80073f6:	f88d 3001 	strb.w	r3, [sp, #1]
 80073fa:	9301      	str	r3, [sp, #4]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 80073fc:	4b08      	ldr	r3, [pc, #32]	; (8007420 <MlmeIndication+0x6c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	4798      	blx	r3
 8007404:	2800      	cmp	r0, #0
 8007406:	d1f1      	bne.n	80073ec <MlmeIndication+0x38>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 8007408:	2301      	movs	r3, #1
 800740a:	2200      	movs	r2, #0
 800740c:	4611      	mov	r1, r2
 800740e:	4668      	mov	r0, sp
 8007410:	f7ff ff46 	bl	80072a0 <LmHandlerSend>
}
 8007414:	e7ea      	b.n	80073ec <MlmeIndication+0x38>
 8007416:	bf00      	nop
 8007418:	20000088 	.word	0x20000088
 800741c:	20000638 	.word	0x20000638
 8007420:	2000063c 	.word	0x2000063c

08007424 <LmHandlerGetCurrentClass>:
    if (deviceClass == NULL)
 8007424:	b170      	cbz	r0, 8007444 <LmHandlerGetCurrentClass+0x20>
{
 8007426:	b510      	push	{r4, lr}
 8007428:	b08a      	sub	sp, #40	; 0x28
 800742a:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 800742c:	2300      	movs	r3, #0
 800742e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 8007432:	a801      	add	r0, sp, #4
 8007434:	f002 fecc 	bl	800a1d0 <LoRaMacMibGetRequestConfirm>
 8007438:	b938      	cbnz	r0, 800744a <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 800743a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800743e:	7023      	strb	r3, [r4, #0]
}
 8007440:	b00a      	add	sp, #40	; 0x28
 8007442:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8007444:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007448:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800744a:	f04f 30ff 	mov.w	r0, #4294967295
 800744e:	e7f7      	b.n	8007440 <LmHandlerGetCurrentClass+0x1c>

08007450 <McpsIndication>:
{
 8007450:	b530      	push	{r4, r5, lr}
 8007452:	b087      	sub	sp, #28
 8007454:	460b      	mov	r3, r1
    DeviceClass_t deviceClass = CLASS_A;
 8007456:	2200      	movs	r2, #0
 8007458:	f88d 200f 	strb.w	r2, [sp, #15]
    RxParams.IsMcpsIndication = 1;
 800745c:	4922      	ldr	r1, [pc, #136]	; (80074e8 <McpsIndication+0x98>)
 800745e:	2201      	movs	r2, #1
 8007460:	700a      	strb	r2, [r1, #0]
    RxParams.Status = mcpsIndication->Status;
 8007462:	7842      	ldrb	r2, [r0, #1]
 8007464:	704a      	strb	r2, [r1, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8007466:	bb62      	cbnz	r2, 80074c2 <McpsIndication+0x72>
 8007468:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800746a:	f990 2004 	ldrsb.w	r2, [r0, #4]
 800746e:	708a      	strb	r2, [r1, #2]
    RxParams.Rssi = RxStatus->Rssi;
 8007470:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007474:	70ca      	strb	r2, [r1, #3]
    RxParams.Snr = RxStatus->Snr;
 8007476:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800747a:	710a      	strb	r2, [r1, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800747c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8007480:	730b      	strb	r3, [r1, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8007482:	6903      	ldr	r3, [r0, #16]
 8007484:	608b      	str	r3, [r1, #8]
    appData.Port = mcpsIndication->Port;
 8007486:	78c3      	ldrb	r3, [r0, #3]
 8007488:	f88d 3010 	strb.w	r3, [sp, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800748c:	7b03      	ldrb	r3, [r0, #12]
 800748e:	f88d 3011 	strb.w	r3, [sp, #17]
    appData.Buffer = mcpsIndication->Buffer;
 8007492:	6883      	ldr	r3, [r0, #8]
 8007494:	9305      	str	r3, [sp, #20]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8007496:	4d15      	ldr	r5, [pc, #84]	; (80074ec <McpsIndication+0x9c>)
 8007498:	682b      	ldr	r3, [r5, #0]
 800749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749c:	a804      	add	r0, sp, #16
 800749e:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 80074a0:	682b      	ldr	r3, [r5, #0]
 80074a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a4:	b113      	cbz	r3, 80074ac <McpsIndication+0x5c>
 80074a6:	7e22      	ldrb	r2, [r4, #24]
 80074a8:	b102      	cbz	r2, 80074ac <McpsIndication+0x5c>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 80074aa:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 80074ac:	4621      	mov	r1, r4
 80074ae:	2001      	movs	r0, #1
 80074b0:	f7ff fcac 	bl	8006e0c <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass(&deviceClass);
 80074b4:	f10d 000f 	add.w	r0, sp, #15
 80074b8:	f7ff ffb4 	bl	8007424 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 80074bc:	7963      	ldrb	r3, [r4, #5]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d001      	beq.n	80074c6 <McpsIndication+0x76>
}
 80074c2:	b007      	add	sp, #28
 80074c4:	bd30      	pop	{r4, r5, pc}
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 80074c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1f9      	bne.n	80074c2 <McpsIndication+0x72>
        LmHandlerAppData_t appData =
 80074ce:	2100      	movs	r1, #0
 80074d0:	f88d 1004 	strb.w	r1, [sp, #4]
 80074d4:	f88d 1005 	strb.w	r1, [sp, #5]
 80074d8:	9102      	str	r1, [sp, #8]
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 80074da:	2301      	movs	r3, #1
 80074dc:	460a      	mov	r2, r1
 80074de:	a801      	add	r0, sp, #4
 80074e0:	f7ff fede 	bl	80072a0 <LmHandlerSend>
 80074e4:	e7ed      	b.n	80074c2 <McpsIndication+0x72>
 80074e6:	bf00      	nop
 80074e8:	20000088 	.word	0x20000088
 80074ec:	20000638 	.word	0x20000638

080074f0 <LmHandlerGetTxDatarate>:
    if (txDatarate == NULL)
 80074f0:	b180      	cbz	r0, 8007514 <LmHandlerGetTxDatarate+0x24>
{
 80074f2:	b510      	push	{r4, lr}
 80074f4:	b08a      	sub	sp, #40	; 0x28
 80074f6:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 80074f8:	231f      	movs	r3, #31
 80074fa:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 80074fe:	a801      	add	r0, sp, #4
 8007500:	f002 fe66 	bl	800a1d0 <LoRaMacMibGetRequestConfirm>
 8007504:	b948      	cbnz	r0, 800751a <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8007506:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 800750a:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800750c:	4a04      	ldr	r2, [pc, #16]	; (8007520 <LmHandlerGetTxDatarate+0x30>)
 800750e:	70d3      	strb	r3, [r2, #3]
}
 8007510:	b00a      	add	sp, #40	; 0x28
 8007512:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8007514:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007518:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800751a:	f04f 30ff 	mov.w	r0, #4294967295
 800751e:	e7f7      	b.n	8007510 <LmHandlerGetTxDatarate+0x20>
 8007520:	20000650 	.word	0x20000650

08007524 <MlmeConfirm>:
{
 8007524:	b510      	push	{r4, lr}
 8007526:	b08a      	sub	sp, #40	; 0x28
 8007528:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 800752a:	481d      	ldr	r0, [pc, #116]	; (80075a0 <MlmeConfirm+0x7c>)
 800752c:	2300      	movs	r3, #0
 800752e:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mlmeConfirm->Status;
 8007530:	7863      	ldrb	r3, [r4, #1]
 8007532:	7043      	strb	r3, [r0, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8007534:	4b1b      	ldr	r3, [pc, #108]	; (80075a4 <MlmeConfirm+0x80>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6a1b      	ldr	r3, [r3, #32]
 800753a:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800753c:	4621      	mov	r1, r4
 800753e:	2002      	movs	r0, #2
 8007540:	f7ff fc64 	bl	8006e0c <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 8007544:	7823      	ldrb	r3, [r4, #0]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d003      	beq.n	8007552 <MlmeConfirm+0x2e>
 800754a:	2b04      	cmp	r3, #4
 800754c:	d020      	beq.n	8007590 <MlmeConfirm+0x6c>
}
 800754e:	b00a      	add	sp, #40	; 0x28
 8007550:	bd10      	pop	{r4, pc}
            mibReq.Type = MIB_DEV_ADDR;
 8007552:	2306      	movs	r3, #6
 8007554:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007558:	a801      	add	r0, sp, #4
 800755a:	f002 fe39 	bl	800a1d0 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800755e:	9a02      	ldr	r2, [sp, #8]
 8007560:	4b11      	ldr	r3, [pc, #68]	; (80075a8 <MlmeConfirm+0x84>)
 8007562:	615a      	str	r2, [r3, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8007564:	4811      	ldr	r0, [pc, #68]	; (80075ac <MlmeConfirm+0x88>)
 8007566:	f7ff ffc3 	bl	80074f0 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800756a:	7863      	ldrb	r3, [r4, #1]
 800756c:	b143      	cbz	r3, 8007580 <MlmeConfirm+0x5c>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800756e:	4b0f      	ldr	r3, [pc, #60]	; (80075ac <MlmeConfirm+0x88>)
 8007570:	22ff      	movs	r2, #255	; 0xff
 8007572:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8007574:	4b0b      	ldr	r3, [pc, #44]	; (80075a4 <MlmeConfirm+0x80>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	69db      	ldr	r3, [r3, #28]
 800757a:	480c      	ldr	r0, [pc, #48]	; (80075ac <MlmeConfirm+0x88>)
 800757c:	4798      	blx	r3
        break;
 800757e:	e7e6      	b.n	800754e <MlmeConfirm+0x2a>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8007580:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <MlmeConfirm+0x88>)
 8007582:	2200      	movs	r2, #0
 8007584:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8007586:	4b0a      	ldr	r3, [pc, #40]	; (80075b0 <MlmeConfirm+0x8c>)
 8007588:	7858      	ldrb	r0, [r3, #1]
 800758a:	f7ff fddd 	bl	8007148 <LmHandlerRequestClass>
 800758e:	e7f1      	b.n	8007574 <MlmeConfirm+0x50>
            RxParams.LinkCheck = true;
 8007590:	4b08      	ldr	r3, [pc, #32]	; (80075b4 <MlmeConfirm+0x90>)
 8007592:	2201      	movs	r2, #1
 8007594:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8007596:	7a22      	ldrb	r2, [r4, #8]
 8007598:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800759a:	7a62      	ldrb	r2, [r4, #9]
 800759c:	73da      	strb	r2, [r3, #15]
}
 800759e:	e7d6      	b.n	800754e <MlmeConfirm+0x2a>
 80075a0:	20000684 	.word	0x20000684
 80075a4:	20000638 	.word	0x20000638
 80075a8:	20000060 	.word	0x20000060
 80075ac:	20000078 	.word	0x20000078
 80075b0:	20000650 	.word	0x20000650
 80075b4:	20000088 	.word	0x20000088

080075b8 <LmHandlerPackageRegister>:
    switch( id )
 80075b8:	b9e0      	cbnz	r0, 80075f4 <LmHandlerPackageRegister+0x3c>
{
 80075ba:	b538      	push	{r3, r4, r5, lr}
 80075bc:	460c      	mov	r4, r1
 80075be:	4605      	mov	r5, r0
            package = LmhpCompliancePackageFactory( );
 80075c0:	f000 fa20 	bl	8007a04 <LmhpCompliancePackageFactory>
    if( package != NULL )
 80075c4:	b198      	cbz	r0, 80075ee <LmHandlerPackageRegister+0x36>
        LmHandlerPackages[id] = package;
 80075c6:	4a0d      	ldr	r2, [pc, #52]	; (80075fc <LmHandlerPackageRegister+0x44>)
 80075c8:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 80075cc:	4a0c      	ldr	r2, [pc, #48]	; (8007600 <LmHandlerPackageRegister+0x48>)
 80075ce:	6242      	str	r2, [r0, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 80075d0:	4a0c      	ldr	r2, [pc, #48]	; (8007604 <LmHandlerPackageRegister+0x4c>)
 80075d2:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 80075d4:	4a0c      	ldr	r2, [pc, #48]	; (8007608 <LmHandlerPackageRegister+0x50>)
 80075d6:	62c2      	str	r2, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 80075d8:	4a0c      	ldr	r2, [pc, #48]	; (800760c <LmHandlerPackageRegister+0x54>)
 80075da:	6812      	ldr	r2, [r2, #0]
 80075dc:	6912      	ldr	r2, [r2, #16]
 80075de:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 80075e0:	6843      	ldr	r3, [r0, #4]
 80075e2:	22f2      	movs	r2, #242	; 0xf2
 80075e4:	490a      	ldr	r1, [pc, #40]	; (8007610 <LmHandlerPackageRegister+0x58>)
 80075e6:	4620      	mov	r0, r4
 80075e8:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 80075ea:	2000      	movs	r0, #0
}
 80075ec:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_HANDLER_ERROR;
 80075ee:	f04f 30ff 	mov.w	r0, #4294967295
 80075f2:	e7fb      	b.n	80075ec <LmHandlerPackageRegister+0x34>
 80075f4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	2000063c 	.word	0x2000063c
 8007600:	0800720d 	.word	0x0800720d
 8007604:	080072a1 	.word	0x080072a1
 8007608:	08006f39 	.word	0x08006f39
 800760c:	20000638 	.word	0x20000638
 8007610:	20000544 	.word	0x20000544

08007614 <LmHandlerInit>:
{
 8007614:	b508      	push	{r3, lr}
    LmHandlerCallbacks = handlerCallbacks;
 8007616:	4b0f      	ldr	r3, [pc, #60]	; (8007654 <LmHandlerInit+0x40>)
 8007618:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800761a:	4b0f      	ldr	r3, [pc, #60]	; (8007658 <LmHandlerInit+0x44>)
 800761c:	4a0f      	ldr	r2, [pc, #60]	; (800765c <LmHandlerInit+0x48>)
 800761e:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8007620:	4a0f      	ldr	r2, [pc, #60]	; (8007660 <LmHandlerInit+0x4c>)
 8007622:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8007624:	4a0f      	ldr	r2, [pc, #60]	; (8007664 <LmHandlerInit+0x50>)
 8007626:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8007628:	4a0f      	ldr	r2, [pc, #60]	; (8007668 <LmHandlerInit+0x54>)
 800762a:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800762c:	6802      	ldr	r2, [r0, #0]
 800762e:	4b0f      	ldr	r3, [pc, #60]	; (800766c <LmHandlerInit+0x58>)
 8007630:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 8007632:	6842      	ldr	r2, [r0, #4]
 8007634:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8007636:	6882      	ldr	r2, [r0, #8]
 8007638:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800763a:	4a0d      	ldr	r2, [pc, #52]	; (8007670 <LmHandlerInit+0x5c>)
 800763c:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800763e:	6902      	ldr	r2, [r0, #16]
 8007640:	611a      	str	r2, [r3, #16]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8007642:	490c      	ldr	r1, [pc, #48]	; (8007674 <LmHandlerInit+0x60>)
 8007644:	2000      	movs	r0, #0
 8007646:	f7ff ffb7 	bl	80075b8 <LmHandlerPackageRegister>
 800764a:	b900      	cbnz	r0, 800764e <LmHandlerInit+0x3a>
}
 800764c:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_ERROR;
 800764e:	f04f 30ff 	mov.w	r0, #4294967295
 8007652:	e7fb      	b.n	800764c <LmHandlerInit+0x38>
 8007654:	20000638 	.word	0x20000638
 8007658:	20000674 	.word	0x20000674
 800765c:	08006e79 	.word	0x08006e79
 8007660:	08007451 	.word	0x08007451
 8007664:	08007525 	.word	0x08007525
 8007668:	080073b5 	.word	0x080073b5
 800766c:	20000660 	.word	0x20000660
 8007670:	0800bce1 	.word	0x0800bce1
 8007674:	2000007c 	.word	0x2000007c

08007678 <LmhpComplianceInit>:
    return &LmhpCompliancePackage;
}

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8007678:	4603      	mov	r3, r0
 800767a:	b140      	cbz	r0, 800768e <LmhpComplianceInit+0x16>
 800767c:	b139      	cbz	r1, 800768e <LmhpComplianceInit+0x16>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800767e:	4807      	ldr	r0, [pc, #28]	; (800769c <LmhpComplianceInit+0x24>)
 8007680:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 8007682:	4b07      	ldr	r3, [pc, #28]	; (80076a0 <LmhpComplianceInit+0x28>)
 8007684:	6099      	str	r1, [r3, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8007686:	715a      	strb	r2, [r3, #5]
        ComplianceTestState.Initialized = true;
 8007688:	2201      	movs	r2, #1
 800768a:	701a      	strb	r2, [r3, #0]
 800768c:	4770      	bx	lr
    }
    else
    {
        LmhpComplianceParams = NULL;
 800768e:	2300      	movs	r3, #0
 8007690:	4a02      	ldr	r2, [pc, #8]	; (800769c <LmhpComplianceInit+0x24>)
 8007692:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 8007694:	4a02      	ldr	r2, [pc, #8]	; (80076a0 <LmhpComplianceInit+0x28>)
 8007696:	7013      	strb	r3, [r2, #0]
    }
}
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	200006c8 	.word	0x200006c8
 80076a0:	2000069c 	.word	0x2000069c

080076a4 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 80076a4:	4b01      	ldr	r3, [pc, #4]	; (80076ac <LmhpComplianceIsInitialized+0x8>)
 80076a6:	7818      	ldrb	r0, [r3, #0]
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	2000069c 	.word	0x2000069c

080076b0 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 80076b0:	4b02      	ldr	r3, [pc, #8]	; (80076bc <LmhpComplianceIsRunning+0xc>)
 80076b2:	7818      	ldrb	r0, [r3, #0]
 80076b4:	b100      	cbz	r0, 80076b8 <LmhpComplianceIsRunning+0x8>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 80076b6:	7858      	ldrb	r0, [r3, #1]
}
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	2000069c 	.word	0x2000069c

080076c0 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
    if (ComplianceTestState.Initialized == false)
 80076c0:	4b08      	ldr	r3, [pc, #32]	; (80076e4 <LmhpComplianceOnMcpsConfirm+0x24>)
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	b12b      	cbz	r3, 80076d2 <LmhpComplianceOnMcpsConfirm+0x12>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 80076c6:	4b07      	ldr	r3, [pc, #28]	; (80076e4 <LmhpComplianceOnMcpsConfirm+0x24>)
 80076c8:	785b      	ldrb	r3, [r3, #1]
 80076ca:	b113      	cbz	r3, 80076d2 <LmhpComplianceOnMcpsConfirm+0x12>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 80076cc:	7803      	ldrb	r3, [r0, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d000      	beq.n	80076d4 <LmhpComplianceOnMcpsConfirm+0x14>
        (mcpsConfirm->AckReceived != 0))
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
    }
}
 80076d2:	4770      	bx	lr
        (mcpsConfirm->AckReceived != 0))
 80076d4:	7903      	ldrb	r3, [r0, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d0fb      	beq.n	80076d2 <LmhpComplianceOnMcpsConfirm+0x12>
        ComplianceTestState.DownLinkCounter++;
 80076da:	4a02      	ldr	r2, [pc, #8]	; (80076e4 <LmhpComplianceOnMcpsConfirm+0x24>)
 80076dc:	8993      	ldrh	r3, [r2, #12]
 80076de:	3301      	adds	r3, #1
 80076e0:	8193      	strh	r3, [r2, #12]
 80076e2:	e7f6      	b.n	80076d2 <LmhpComplianceOnMcpsConfirm+0x12>
 80076e4:	2000069c 	.word	0x2000069c

080076e8 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
    if( ComplianceTestState.Initialized == false )
 80076e8:	4b08      	ldr	r3, [pc, #32]	; (800770c <LmhpComplianceOnMlmeConfirm+0x24>)
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	b12b      	cbz	r3, 80076fa <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 80076ee:	4b07      	ldr	r3, [pc, #28]	; (800770c <LmhpComplianceOnMlmeConfirm+0x24>)
 80076f0:	785b      	ldrb	r3, [r3, #1]
 80076f2:	b113      	cbz	r3, 80076fa <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 80076f4:	7803      	ldrb	r3, [r0, #0]
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	d000      	beq.n	80076fc <LmhpComplianceOnMlmeConfirm+0x14>
    {
        ComplianceTestState.LinkCheck = true;
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
    }
}
 80076fa:	4770      	bx	lr
        ComplianceTestState.LinkCheck = true;
 80076fc:	4b03      	ldr	r3, [pc, #12]	; (800770c <LmhpComplianceOnMlmeConfirm+0x24>)
 80076fe:	2201      	movs	r2, #1
 8007700:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8007702:	7a02      	ldrb	r2, [r0, #8]
 8007704:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8007706:	7a42      	ldrb	r2, [r0, #9]
 8007708:	741a      	strb	r2, [r3, #16]
 800770a:	e7f6      	b.n	80076fa <LmhpComplianceOnMlmeConfirm+0x12>
 800770c:	2000069c 	.word	0x2000069c

08007710 <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 8007710:	4770      	bx	lr
	...

08007714 <LmhpComplianceTxProcess>:
    if( ComplianceTestState.Initialized == false )
 8007714:	4b23      	ldr	r3, [pc, #140]	; (80077a4 <LmhpComplianceTxProcess+0x90>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d03e      	beq.n	800779a <LmhpComplianceTxProcess+0x86>
    if( ComplianceTestState.IsRunning == false )
 800771c:	4b21      	ldr	r3, [pc, #132]	; (80077a4 <LmhpComplianceTxProcess+0x90>)
 800771e:	785b      	ldrb	r3, [r3, #1]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d03d      	beq.n	80077a0 <LmhpComplianceTxProcess+0x8c>
{
 8007724:	b530      	push	{r4, r5, lr}
 8007726:	b083      	sub	sp, #12
    if( ComplianceTestState.LinkCheck == true )
 8007728:	4b1e      	ldr	r3, [pc, #120]	; (80077a4 <LmhpComplianceTxProcess+0x90>)
 800772a:	7b9b      	ldrb	r3, [r3, #14]
 800772c:	b313      	cbz	r3, 8007774 <LmhpComplianceTxProcess+0x60>
        ComplianceTestState.LinkCheck = false;
 800772e:	4b1d      	ldr	r3, [pc, #116]	; (80077a4 <LmhpComplianceTxProcess+0x90>)
 8007730:	2200      	movs	r2, #0
 8007732:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 8007734:	2203      	movs	r2, #3
 8007736:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 8007738:	689a      	ldr	r2, [r3, #8]
 800773a:	2105      	movs	r1, #5
 800773c:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800773e:	7bd9      	ldrb	r1, [r3, #15]
 8007740:	7051      	strb	r1, [r2, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8007742:	7c19      	ldrb	r1, [r3, #16]
 8007744:	7091      	strb	r1, [r2, #2]
        ComplianceTestState.State = 1;
 8007746:	2201      	movs	r2, #1
 8007748:	709a      	strb	r2, [r3, #2]
    LmHandlerAppData_t appData =
 800774a:	23e0      	movs	r3, #224	; 0xe0
 800774c:	f88d 3000 	strb.w	r3, [sp]
        .BufferSize = ComplianceTestState.DataBufferSize,
 8007750:	4c14      	ldr	r4, [pc, #80]	; (80077a4 <LmhpComplianceTxProcess+0x90>)
 8007752:	79a3      	ldrb	r3, [r4, #6]
    LmHandlerAppData_t appData =
 8007754:	f88d 3001 	strb.w	r3, [sp, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 8007758:	68a3      	ldr	r3, [r4, #8]
    LmHandlerAppData_t appData =
 800775a:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 800775c:	4812      	ldr	r0, [pc, #72]	; (80077a8 <LmhpComplianceTxProcess+0x94>)
 800775e:	f00f fbb7 	bl	8016ed0 <UTIL_TIMER_Start>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 8007762:	4b12      	ldr	r3, [pc, #72]	; (80077ac <LmhpComplianceTxProcess+0x98>)
 8007764:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8007766:	2301      	movs	r3, #1
 8007768:	2200      	movs	r2, #0
 800776a:	78e1      	ldrb	r1, [r4, #3]
 800776c:	4668      	mov	r0, sp
 800776e:	47a8      	blx	r5
}
 8007770:	b003      	add	sp, #12
 8007772:	bd30      	pop	{r4, r5, pc}
        switch( ComplianceTestState.State )
 8007774:	4b0b      	ldr	r3, [pc, #44]	; (80077a4 <LmhpComplianceTxProcess+0x90>)
 8007776:	789b      	ldrb	r3, [r3, #2]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d005      	beq.n	8007788 <LmhpComplianceTxProcess+0x74>
 800777c:	2b04      	cmp	r3, #4
 800777e:	d1e4      	bne.n	800774a <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.State = 1;
 8007780:	4b08      	ldr	r3, [pc, #32]	; (80077a4 <LmhpComplianceTxProcess+0x90>)
 8007782:	2201      	movs	r2, #1
 8007784:	709a      	strb	r2, [r3, #2]
            break;
 8007786:	e7e0      	b.n	800774a <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.DataBufferSize = 2;
 8007788:	4b06      	ldr	r3, [pc, #24]	; (80077a4 <LmhpComplianceTxProcess+0x90>)
 800778a:	2202      	movs	r2, #2
 800778c:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800778e:	899a      	ldrh	r2, [r3, #12]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	0a11      	lsrs	r1, r2, #8
 8007794:	7019      	strb	r1, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8007796:	705a      	strb	r2, [r3, #1]
            break;
 8007798:	e7d7      	b.n	800774a <LmhpComplianceTxProcess+0x36>
        return LORAMAC_HANDLER_ERROR;
 800779a:	f04f 30ff 	mov.w	r0, #4294967295
 800779e:	4770      	bx	lr
        return LORAMAC_HANDLER_SUCCESS;
 80077a0:	2000      	movs	r0, #0
}
 80077a2:	4770      	bx	lr
 80077a4:	2000069c 	.word	0x2000069c
 80077a8:	200006b0 	.word	0x200006b0
 80077ac:	20000098 	.word	0x20000098

080077b0 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 80077b0:	4b8d      	ldr	r3, [pc, #564]	; (80079e8 <LmhpComplianceOnMcpsIndication+0x238>)
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 8116 	beq.w	80079e6 <LmhpComplianceOnMcpsIndication+0x236>
    if( mcpsIndication->RxData == false )
 80077ba:	7b43      	ldrb	r3, [r0, #13]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 8112 	beq.w	80079e6 <LmhpComplianceOnMcpsIndication+0x236>
    if ((ComplianceTestState.IsRunning == true) &&
 80077c2:	4b89      	ldr	r3, [pc, #548]	; (80079e8 <LmhpComplianceOnMcpsIndication+0x238>)
 80077c4:	785b      	ldrb	r3, [r3, #1]
 80077c6:	b12b      	cbz	r3, 80077d4 <LmhpComplianceOnMcpsIndication+0x24>
        (mcpsIndication->AckReceived == 0))
 80077c8:	7b82      	ldrb	r2, [r0, #14]
    if ((ComplianceTestState.IsRunning == true) &&
 80077ca:	b91a      	cbnz	r2, 80077d4 <LmhpComplianceOnMcpsIndication+0x24>
        ComplianceTestState.DownLinkCounter++;
 80077cc:	4986      	ldr	r1, [pc, #536]	; (80079e8 <LmhpComplianceOnMcpsIndication+0x238>)
 80077ce:	898a      	ldrh	r2, [r1, #12]
 80077d0:	3201      	adds	r2, #1
 80077d2:	818a      	strh	r2, [r1, #12]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 80077d4:	78c2      	ldrb	r2, [r0, #3]
 80077d6:	2ae0      	cmp	r2, #224	; 0xe0
 80077d8:	f040 8105 	bne.w	80079e6 <LmhpComplianceOnMcpsIndication+0x236>
{
 80077dc:	b510      	push	{r4, lr}
 80077de:	b08c      	sub	sp, #48	; 0x30
    if( ComplianceTestState.IsRunning == false )
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d140      	bne.n	8007866 <LmhpComplianceOnMcpsIndication+0xb6>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 80077e4:	7b03      	ldrb	r3, [r0, #12]
 80077e6:	2b04      	cmp	r3, #4
 80077e8:	d001      	beq.n	80077ee <LmhpComplianceOnMcpsIndication+0x3e>
}
 80077ea:	b00c      	add	sp, #48	; 0x30
 80077ec:	bd10      	pop	{r4, pc}
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80077ee:	6883      	ldr	r3, [r0, #8]
 80077f0:	781a      	ldrb	r2, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 80077f2:	2a01      	cmp	r2, #1
 80077f4:	d1f9      	bne.n	80077ea <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 80077f6:	785a      	ldrb	r2, [r3, #1]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80077f8:	2a01      	cmp	r2, #1
 80077fa:	d1f6      	bne.n	80077ea <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 80077fc:	789a      	ldrb	r2, [r3, #2]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 80077fe:	2a01      	cmp	r2, #1
 8007800:	d1f3      	bne.n	80077ea <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 8007802:	78db      	ldrb	r3, [r3, #3]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8007804:	2b01      	cmp	r3, #1
 8007806:	d1f0      	bne.n	80077ea <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 8007808:	4b77      	ldr	r3, [pc, #476]	; (80079e8 <LmhpComplianceOnMcpsIndication+0x238>)
 800780a:	2400      	movs	r4, #0
 800780c:	70dc      	strb	r4, [r3, #3]
            ComplianceTestState.Port = 224;
 800780e:	22e0      	movs	r2, #224	; 0xe0
 8007810:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 8007812:	2202      	movs	r2, #2
 8007814:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 8007816:	819c      	strh	r4, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 8007818:	739c      	strb	r4, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800781a:	73dc      	strb	r4, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800781c:	741c      	strb	r4, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800781e:	2201      	movs	r2, #1
 8007820:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 8007822:	709a      	strb	r2, [r3, #2]
            mibReq.Type = MIB_ADR;
 8007824:	2304      	movs	r3, #4
 8007826:	f88d 300c 	strb.w	r3, [sp, #12]
            mibReq.Param.AdrEnable = true;
 800782a:	f88d 2010 	strb.w	r2, [sp, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800782e:	a803      	add	r0, sp, #12
 8007830:	f002 fde6 	bl	800a400 <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 8007834:	4620      	mov	r0, r4
 8007836:	f003 f9eb 	bl	800ac10 <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800783a:	4b6c      	ldr	r3, [pc, #432]	; (80079ec <LmhpComplianceOnMcpsIndication+0x23c>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	b103      	cbz	r3, 8007844 <LmhpComplianceOnMcpsIndication+0x94>
                LmhpComplianceParams->StopPeripherals( );
 8007842:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8007844:	4c6a      	ldr	r4, [pc, #424]	; (80079f0 <LmhpComplianceOnMcpsIndication+0x240>)
 8007846:	2200      	movs	r2, #0
 8007848:	9200      	str	r2, [sp, #0]
 800784a:	4b6a      	ldr	r3, [pc, #424]	; (80079f4 <LmhpComplianceOnMcpsIndication+0x244>)
 800784c:	f04f 31ff 	mov.w	r1, #4294967295
 8007850:	4620      	mov	r0, r4
 8007852:	f00f fa7d 	bl	8016d50 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8007856:	f241 3188 	movw	r1, #5000	; 0x1388
 800785a:	4620      	mov	r0, r4
 800785c:	f00f fb7e 	bl	8016f5c <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 8007860:	f7ff ff58 	bl	8007714 <LmhpComplianceTxProcess>
 8007864:	e7c1      	b.n	80077ea <LmhpComplianceOnMcpsIndication+0x3a>
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8007866:	6882      	ldr	r2, [r0, #8]
 8007868:	7813      	ldrb	r3, [r2, #0]
 800786a:	495f      	ldr	r1, [pc, #380]	; (80079e8 <LmhpComplianceOnMcpsIndication+0x238>)
 800786c:	708b      	strb	r3, [r1, #2]
        switch( ComplianceTestState.State )
 800786e:	2b0a      	cmp	r3, #10
 8007870:	d8bb      	bhi.n	80077ea <LmhpComplianceOnMcpsIndication+0x3a>
 8007872:	e8df f003 	tbb	[pc, r3]
 8007876:	2206      	.short	0x2206
 8007878:	47312b26 	.word	0x47312b26
 800787c:	a49d6d4e 	.word	0xa49d6d4e
 8007880:	ae          	.byte	0xae
 8007881:	00          	.byte	0x00
                TimerStop( &ComplianceTxNextPacketTimer );
 8007882:	485b      	ldr	r0, [pc, #364]	; (80079f0 <LmhpComplianceOnMcpsIndication+0x240>)
 8007884:	f00f fac2 	bl	8016e0c <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8007888:	4b57      	ldr	r3, [pc, #348]	; (80079e8 <LmhpComplianceOnMcpsIndication+0x238>)
 800788a:	2200      	movs	r2, #0
 800788c:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800788e:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 8007890:	2304      	movs	r3, #4
 8007892:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8007896:	4c55      	ldr	r4, [pc, #340]	; (80079ec <LmhpComplianceOnMcpsIndication+0x23c>)
 8007898:	6823      	ldr	r3, [r4, #0]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80078a0:	a803      	add	r0, sp, #12
 80078a2:	f002 fdad 	bl	800a400 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	7858      	ldrb	r0, [r3, #1]
 80078aa:	f003 f9b1 	bl	800ac10 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d099      	beq.n	80077ea <LmhpComplianceOnMcpsIndication+0x3a>
                    LmhpComplianceParams->StartPeripherals( );
 80078b6:	4798      	blx	r3
            break;
 80078b8:	e797      	b.n	80077ea <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.DataBufferSize = 2;
 80078ba:	4b4b      	ldr	r3, [pc, #300]	; (80079e8 <LmhpComplianceOnMcpsIndication+0x238>)
 80078bc:	2202      	movs	r2, #2
 80078be:	719a      	strb	r2, [r3, #6]
            break;
 80078c0:	e793      	b.n	80077ea <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = true;
 80078c2:	4b49      	ldr	r3, [pc, #292]	; (80079e8 <LmhpComplianceOnMcpsIndication+0x238>)
 80078c4:	2201      	movs	r2, #1
 80078c6:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 80078c8:	709a      	strb	r2, [r3, #2]
            break;
 80078ca:	e78e      	b.n	80077ea <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 80078cc:	4b46      	ldr	r3, [pc, #280]	; (80079e8 <LmhpComplianceOnMcpsIndication+0x238>)
 80078ce:	2200      	movs	r2, #0
 80078d0:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 80078d2:	2201      	movs	r2, #1
 80078d4:	709a      	strb	r2, [r3, #2]
            break;
 80078d6:	e788      	b.n	80077ea <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 80078d8:	7b01      	ldrb	r1, [r0, #12]
 80078da:	4b43      	ldr	r3, [pc, #268]	; (80079e8 <LmhpComplianceOnMcpsIndication+0x238>)
 80078dc:	7199      	strb	r1, [r3, #6]
            ComplianceTestState.DataBuffer[0] = 4;
 80078de:	689c      	ldr	r4, [r3, #8]
 80078e0:	2304      	movs	r3, #4
 80078e2:	7023      	strb	r3, [r4, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 80078e4:	2301      	movs	r3, #1
 80078e6:	e005      	b.n	80078f4 <LmhpComplianceOnMcpsIndication+0x144>
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 80078e8:	6882      	ldr	r2, [r0, #8]
 80078ea:	5cd2      	ldrb	r2, [r2, r3]
 80078ec:	3201      	adds	r2, #1
 80078ee:	54e2      	strb	r2, [r4, r3]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 80078f0:	3301      	adds	r3, #1
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	4a3c      	ldr	r2, [pc, #240]	; (80079e8 <LmhpComplianceOnMcpsIndication+0x238>)
 80078f6:	7952      	ldrb	r2, [r2, #5]
 80078f8:	428a      	cmp	r2, r1
 80078fa:	bf28      	it	cs
 80078fc:	460a      	movcs	r2, r1
 80078fe:	429a      	cmp	r2, r3
 8007900:	d8f2      	bhi.n	80078e8 <LmhpComplianceOnMcpsIndication+0x138>
 8007902:	e772      	b.n	80077ea <LmhpComplianceOnMcpsIndication+0x3a>
                mlmeReq.Type = MLME_LINK_CHECK;
 8007904:	2304      	movs	r3, #4
 8007906:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 800790a:	a803      	add	r0, sp, #12
 800790c:	f002 fff0 	bl	800a8f0 <LoRaMacMlmeRequest>
            break;
 8007910:	e76b      	b.n	80077ea <LmhpComplianceOnMcpsIndication+0x3a>
                TimerStop(&ComplianceTxNextPacketTimer);
 8007912:	4837      	ldr	r0, [pc, #220]	; (80079f0 <LmhpComplianceOnMcpsIndication+0x240>)
 8007914:	f00f fa7a 	bl	8016e0c <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8007918:	4b33      	ldr	r3, [pc, #204]	; (80079e8 <LmhpComplianceOnMcpsIndication+0x238>)
 800791a:	2200      	movs	r2, #0
 800791c:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800791e:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 8007920:	2304      	movs	r3, #4
 8007922:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8007926:	4c31      	ldr	r4, [pc, #196]	; (80079ec <LmhpComplianceOnMcpsIndication+0x23c>)
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8007930:	a803      	add	r0, sp, #12
 8007932:	f002 fd65 	bl	800a400 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8007936:	6823      	ldr	r3, [r4, #0]
 8007938:	7858      	ldrb	r0, [r3, #1]
 800793a:	f003 f969 	bl	800ac10 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800793e:	6823      	ldr	r3, [r4, #0]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	b103      	cbz	r3, 8007946 <LmhpComplianceOnMcpsIndication+0x196>
                    LmhpComplianceParams->StartPeripherals( );
 8007944:	4798      	blx	r3
                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 8007946:	4b2c      	ldr	r3, [pc, #176]	; (80079f8 <LmhpComplianceOnMcpsIndication+0x248>)
 8007948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794a:	2002      	movs	r0, #2
 800794c:	4798      	blx	r3
            break;
 800794e:	e74c      	b.n	80077ea <LmhpComplianceOnMcpsIndication+0x3a>
                if( mcpsIndication->BufferSize == 3 )
 8007950:	7b03      	ldrb	r3, [r0, #12]
 8007952:	2b03      	cmp	r3, #3
 8007954:	d008      	beq.n	8007968 <LmhpComplianceOnMcpsIndication+0x1b8>
                else if( mcpsIndication->BufferSize == 7 )
 8007956:	2b07      	cmp	r3, #7
 8007958:	d010      	beq.n	800797c <LmhpComplianceOnMcpsIndication+0x1cc>
                LoRaMacMlmeRequest( &mlmeReq );
 800795a:	a803      	add	r0, sp, #12
 800795c:	f002 ffc8 	bl	800a8f0 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 8007960:	4b21      	ldr	r3, [pc, #132]	; (80079e8 <LmhpComplianceOnMcpsIndication+0x238>)
 8007962:	2201      	movs	r2, #1
 8007964:	709a      	strb	r2, [r3, #2]
            break;
 8007966:	e740      	b.n	80077ea <LmhpComplianceOnMcpsIndication+0x3a>
                    mlmeReq.Type = MLME_TXCW;
 8007968:	2305      	movs	r3, #5
 800796a:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800796e:	7851      	ldrb	r1, [r2, #1]
 8007970:	7893      	ldrb	r3, [r2, #2]
 8007972:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007976:	f8ad 3010 	strh.w	r3, [sp, #16]
 800797a:	e7ee      	b.n	800795a <LmhpComplianceOnMcpsIndication+0x1aa>
                    mlmeReq.Type = MLME_TXCW_1;
 800797c:	2306      	movs	r3, #6
 800797e:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8007982:	7851      	ldrb	r1, [r2, #1]
 8007984:	7893      	ldrb	r3, [r2, #2]
 8007986:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800798a:	f8ad 3010 	strh.w	r3, [sp, #16]
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800798e:	78d1      	ldrb	r1, [r2, #3]
 8007990:	7913      	ldrb	r3, [r2, #4]
 8007992:	021b      	lsls	r3, r3, #8
 8007994:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007998:	7952      	ldrb	r2, [r2, #5]
 800799a:	4313      	orrs	r3, r2
 800799c:	2264      	movs	r2, #100	; 0x64
 800799e:	fb02 f303 	mul.w	r3, r2, r3
 80079a2:	9305      	str	r3, [sp, #20]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 80079a4:	6883      	ldr	r3, [r0, #8]
 80079a6:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80079aa:	f88d 3018 	strb.w	r3, [sp, #24]
 80079ae:	e7d4      	b.n	800795a <LmhpComplianceOnMcpsIndication+0x1aa>
                mlmeReq.Type = MLME_DEVICE_TIME;
 80079b0:	230a      	movs	r3, #10
 80079b2:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 80079b6:	a803      	add	r0, sp, #12
 80079b8:	f002 ff9a 	bl	800a8f0 <LoRaMacMlmeRequest>
            break;
 80079bc:	e715      	b.n	80077ea <LmhpComplianceOnMcpsIndication+0x3a>
                mibReq.Type = MIB_DEVICE_CLASS;
 80079be:	2300      	movs	r3, #0
 80079c0:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 80079c4:	7853      	ldrb	r3, [r2, #1]
 80079c6:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80079ca:	a803      	add	r0, sp, #12
 80079cc:	f002 fd18 	bl	800a400 <LoRaMacMibSetRequestConfirm>
            break;
 80079d0:	e70b      	b.n	80077ea <LmhpComplianceOnMcpsIndication+0x3a>
                mlmeReq.Type = MLME_PING_SLOT_INFO;
 80079d2:	230d      	movs	r3, #13
 80079d4:	f88d 300c 	strb.w	r3, [sp, #12]
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 80079d8:	7853      	ldrb	r3, [r2, #1]
 80079da:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMlmeRequest( &mlmeReq );
 80079de:	a803      	add	r0, sp, #12
 80079e0:	f002 ff86 	bl	800a8f0 <LoRaMacMlmeRequest>
            break;
 80079e4:	e701      	b.n	80077ea <LmhpComplianceOnMcpsIndication+0x3a>
 80079e6:	4770      	bx	lr
 80079e8:	2000069c 	.word	0x2000069c
 80079ec:	200006c8 	.word	0x200006c8
 80079f0:	200006b0 	.word	0x200006b0
 80079f4:	080079fd 	.word	0x080079fd
 80079f8:	20000098 	.word	0x20000098

080079fc <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 80079fc:	b508      	push	{r3, lr}
    LmhpComplianceTxProcess( );
 80079fe:	f7ff fe89 	bl	8007714 <LmhpComplianceTxProcess>
}
 8007a02:	bd08      	pop	{r3, pc}

08007a04 <LmhpCompliancePackageFactory>:
}
 8007a04:	4800      	ldr	r0, [pc, #0]	; (8007a08 <LmhpCompliancePackageFactory+0x4>)
 8007a06:	4770      	bx	lr
 8007a08:	20000098 	.word	0x20000098

08007a0c <OnRadioRxError>:
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
 8007a0c:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8007a0e:	4a06      	ldr	r2, [pc, #24]	; (8007a28 <OnRadioRxError+0x1c>)
 8007a10:	7813      	ldrb	r3, [r2, #0]
 8007a12:	f043 0302 	orr.w	r3, r3, #2
 8007a16:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007a18:	4b04      	ldr	r3, [pc, #16]	; (8007a2c <OnRadioRxError+0x20>)
 8007a1a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007a1e:	b113      	cbz	r3, 8007a26 <OnRadioRxError+0x1a>
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	b103      	cbz	r3, 8007a26 <OnRadioRxError+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007a24:	4798      	blx	r3
    }
}
 8007a26:	bd08      	pop	{r3, pc}
 8007a28:	200006cc 	.word	0x200006cc
 8007a2c:	200006d0 	.word	0x200006d0

08007a30 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007a30:	4b07      	ldr	r3, [pc, #28]	; (8007a50 <UpdateRxSlotIdleState+0x20>)
 8007a32:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d004      	beq.n	8007a44 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8007a3a:	4b06      	ldr	r3, [pc, #24]	; (8007a54 <UpdateRxSlotIdleState+0x24>)
 8007a3c:	2206      	movs	r2, #6
 8007a3e:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
 8007a42:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007a44:	4b03      	ldr	r3, [pc, #12]	; (8007a54 <UpdateRxSlotIdleState+0x24>)
 8007a46:	2202      	movs	r2, #2
 8007a48:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	20000bd8 	.word	0x20000bd8
 8007a54:	200006d0 	.word	0x200006d0

08007a58 <LoRaMacEnableRequests>:
}


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 8007a58:	4b01      	ldr	r3, [pc, #4]	; (8007a60 <LoRaMacEnableRequests+0x8>)
 8007a5a:	f883 0482 	strb.w	r0, [r3, #1154]	; 0x482
}
 8007a5e:	4770      	bx	lr
 8007a60:	200006d0 	.word	0x200006d0

08007a64 <LoRaMacHandleIndicationEvents>:
        }
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 8007a64:	b530      	push	{r4, r5, lr}
 8007a66:	b089      	sub	sp, #36	; 0x24
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8007a68:	4b22      	ldr	r3, [pc, #136]	; (8007af4 <LoRaMacHandleIndicationEvents+0x90>)
 8007a6a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8007a6e:	f013 0f08 	tst.w	r3, #8
 8007a72:	d00e      	beq.n	8007a92 <LoRaMacHandleIndicationEvents+0x2e>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8007a74:	481f      	ldr	r0, [pc, #124]	; (8007af4 <LoRaMacHandleIndicationEvents+0x90>)
 8007a76:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 8007a7a:	f36f 03c3 	bfc	r3, #3, #1
 8007a7e:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8007a82:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 8007a8c:	f500 608c 	add.w	r0, r0, #1120	; 0x460
 8007a90:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8007a92:	4b18      	ldr	r3, [pc, #96]	; (8007af4 <LoRaMacHandleIndicationEvents+0x90>)
 8007a94:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8007a98:	f013 0f10 	tst.w	r3, #16
 8007a9c:	d013      	beq.n	8007ac6 <LoRaMacHandleIndicationEvents+0x62>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8007a9e:	2307      	movs	r3, #7
 8007aa0:	f88d 3004 	strb.w	r3, [sp, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007aa4:	2500      	movs	r5, #0
 8007aa6:	f88d 5005 	strb.w	r5, [sp, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 8007aaa:	4c12      	ldr	r4, [pc, #72]	; (8007af4 <LoRaMacHandleIndicationEvents+0x90>)
 8007aac:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	f204 417c 	addw	r1, r4, #1148	; 0x47c
 8007ab6:	a801      	add	r0, sp, #4
 8007ab8:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8007aba:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 8007abe:	f365 1304 	bfi	r3, r5, #4, #1
 8007ac2:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007ac6:	4b0b      	ldr	r3, [pc, #44]	; (8007af4 <LoRaMacHandleIndicationEvents+0x90>)
 8007ac8:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8007acc:	f013 0f02 	tst.w	r3, #2
 8007ad0:	d00e      	beq.n	8007af0 <LoRaMacHandleIndicationEvents+0x8c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8007ad2:	4808      	ldr	r0, [pc, #32]	; (8007af4 <LoRaMacHandleIndicationEvents+0x90>)
 8007ad4:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 8007ad8:	f36f 0341 	bfc	r3, #1, #1
 8007adc:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8007ae0:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 8007aea:	f200 401c 	addw	r0, r0, #1052	; 0x41c
 8007aee:	4798      	blx	r3
    }
}
 8007af0:	b009      	add	sp, #36	; 0x24
 8007af2:	bd30      	pop	{r4, r5, pc}
 8007af4:	200006d0 	.word	0x200006d0

08007af8 <LoRaMacCheckForRxAbort>:
}

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8007af8:	4b05      	ldr	r3, [pc, #20]	; (8007b10 <LoRaMacCheckForRxAbort+0x18>)
 8007afa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8007afe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007b02:	d004      	beq.n	8007b0e <LoRaMacCheckForRxAbort+0x16>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007b04:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 8007b08:	4a01      	ldr	r2, [pc, #4]	; (8007b10 <LoRaMacCheckForRxAbort+0x18>)
 8007b0a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8007b0e:	4770      	bx	lr
 8007b10:	200006d0 	.word	0x200006d0

08007b14 <SetMlmeScheduleUplinkIndication>:
    return false;
}

static void SetMlmeScheduleUplinkIndication( void )
{
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8007b14:	4a03      	ldr	r2, [pc, #12]	; (8007b24 <SetMlmeScheduleUplinkIndication+0x10>)
 8007b16:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8007b1a:	f043 0310 	orr.w	r3, r3, #16
 8007b1e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 8007b22:	4770      	bx	lr
 8007b24:	200006d0 	.word	0x200006d0

08007b28 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8007b28:	4b06      	ldr	r3, [pc, #24]	; (8007b44 <CalculateBackOff+0x1c>)
 8007b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2c:	b94b      	cbnz	r3, 8007b42 <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8007b2e:	4905      	ldr	r1, [pc, #20]	; (8007b44 <CalculateBackOff+0x1c>)
 8007b30:	f8b1 2102 	ldrh.w	r2, [r1, #258]	; 0x102
 8007b34:	4b04      	ldr	r3, [pc, #16]	; (8007b48 <CalculateBackOff+0x20>)
 8007b36:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8007b3a:	3a01      	subs	r2, #1
 8007b3c:	fb03 f302 	mul.w	r3, r3, r2
 8007b40:	630b      	str	r3, [r1, #48]	; 0x30
    }
}
 8007b42:	4770      	bx	lr
 8007b44:	20000bd8 	.word	0x20000bd8
 8007b48:	200006d0 	.word	0x200006d0

08007b4c <SetTxContinuousWave1>:

    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8007b4c:	b510      	push	{r4, lr}
 8007b4e:	4604      	mov	r4, r0
 8007b50:	4608      	mov	r0, r1
 8007b52:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8007b54:	4b06      	ldr	r3, [pc, #24]	; (8007b70 <SetTxContinuousWave1+0x24>)
 8007b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b58:	4622      	mov	r2, r4
 8007b5a:	b249      	sxtb	r1, r1
 8007b5c:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8007b5e:	4a05      	ldr	r2, [pc, #20]	; (8007b74 <SetTxContinuousWave1+0x28>)
 8007b60:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8007b64:	f043 0302 	orr.w	r3, r3, #2
 8007b68:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	bd10      	pop	{r4, pc}
 8007b70:	08018318 	.word	0x08018318
 8007b74:	200006d0 	.word	0x200006d0

08007b78 <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
    return &Nvm;
}
 8007b78:	4800      	ldr	r0, [pc, #0]	; (8007b7c <GetNvmData+0x4>)
 8007b7a:	4770      	bx	lr
 8007b7c:	20000bd8 	.word	0x20000bd8

08007b80 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8007b80:	4602      	mov	r2, r0
 8007b82:	b1f8      	cbz	r0, 8007bc4 <DetermineFrameType+0x44>
 8007b84:	b301      	cbz	r1, 8007bc8 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8007b86:	7b03      	ldrb	r3, [r0, #12]
 8007b88:	f013 030f 	ands.w	r3, r3, #15
 8007b8c:	d005      	beq.n	8007b9a <DetermineFrameType+0x1a>
 8007b8e:	f890 0020 	ldrb.w	r0, [r0, #32]
 8007b92:	b110      	cbz	r0, 8007b9a <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 8007b94:	2000      	movs	r0, #0
 8007b96:	7008      	strb	r0, [r1, #0]
 8007b98:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8007b9a:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 8007b9e:	b910      	cbnz	r0, 8007ba6 <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	700b      	strb	r3, [r1, #0]
 8007ba4:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8007ba6:	b92b      	cbnz	r3, 8007bb4 <DetermineFrameType+0x34>
 8007ba8:	f892 0020 	ldrb.w	r0, [r2, #32]
 8007bac:	b910      	cbnz	r0, 8007bb4 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 8007bae:	2302      	movs	r3, #2
 8007bb0:	700b      	strb	r3, [r1, #0]
 8007bb2:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8007bb4:	b953      	cbnz	r3, 8007bcc <DetermineFrameType+0x4c>
 8007bb6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007bba:	b14a      	cbz	r2, 8007bd0 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 8007bbc:	2203      	movs	r2, #3
 8007bbe:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 8007bc0:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 8007bc2:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007bc4:	2003      	movs	r0, #3
 8007bc6:	4770      	bx	lr
 8007bc8:	2003      	movs	r0, #3
 8007bca:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 8007bcc:	2017      	movs	r0, #23
 8007bce:	4770      	bx	lr
 8007bd0:	2017      	movs	r0, #23
}
 8007bd2:	4770      	bx	lr

08007bd4 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8007bd4:	4b0f      	ldr	r3, [pc, #60]	; (8007c14 <CheckRetransUnconfirmedUplink+0x40>)
 8007bd6:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8007bda:	4b0f      	ldr	r3, [pc, #60]	; (8007c18 <CheckRetransUnconfirmedUplink+0x44>)
 8007bdc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d20f      	bcs.n	8007c04 <CheckRetransUnconfirmedUplink+0x30>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007be4:	4b0b      	ldr	r3, [pc, #44]	; (8007c14 <CheckRetransUnconfirmedUplink+0x40>)
 8007be6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8007bea:	f013 0f02 	tst.w	r3, #2
 8007bee:	d00b      	beq.n	8007c08 <CheckRetransUnconfirmedUplink+0x34>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8007bf0:	4b09      	ldr	r3, [pc, #36]	; (8007c18 <CheckRetransUnconfirmedUplink+0x44>)
 8007bf2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007bf6:	b14b      	cbz	r3, 8007c0c <CheckRetransUnconfirmedUplink+0x38>
        {
            return true;
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8007bf8:	4b06      	ldr	r3, [pc, #24]	; (8007c14 <CheckRetransUnconfirmedUplink+0x40>)
 8007bfa:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8007bfe:	b13b      	cbz	r3, 8007c10 <CheckRetransUnconfirmedUplink+0x3c>
            {
                return true;
            }
        }
    }
    return false;
 8007c00:	2000      	movs	r0, #0
 8007c02:	4770      	bx	lr
        return true;
 8007c04:	2001      	movs	r0, #1
 8007c06:	4770      	bx	lr
    return false;
 8007c08:	2000      	movs	r0, #0
 8007c0a:	4770      	bx	lr
            return true;
 8007c0c:	2001      	movs	r0, #1
 8007c0e:	4770      	bx	lr
                return true;
 8007c10:	2001      	movs	r0, #1
}
 8007c12:	4770      	bx	lr
 8007c14:	200006d0 	.word	0x200006d0
 8007c18:	20000bd8 	.word	0x20000bd8

08007c1c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8007c1c:	4b0a      	ldr	r3, [pc, #40]	; (8007c48 <CheckRetransConfirmedUplink+0x2c>)
 8007c1e:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 8007c22:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d209      	bcs.n	8007c3e <CheckRetransConfirmedUplink+0x22>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007c2a:	4b07      	ldr	r3, [pc, #28]	; (8007c48 <CheckRetransConfirmedUplink+0x2c>)
 8007c2c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8007c30:	f013 0f02 	tst.w	r3, #2
 8007c34:	d005      	beq.n	8007c42 <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8007c36:	4b04      	ldr	r3, [pc, #16]	; (8007c48 <CheckRetransConfirmedUplink+0x2c>)
 8007c38:	f893 043c 	ldrb.w	r0, [r3, #1084]	; 0x43c
 8007c3c:	4770      	bx	lr
        return true;
 8007c3e:	2001      	movs	r0, #1
 8007c40:	4770      	bx	lr
        {
            return true;
        }
    }
    return false;
 8007c42:	2000      	movs	r0, #0
}
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	200006d0 	.word	0x200006d0

08007c4c <StopRetransmission>:

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8007c4c:	4b11      	ldr	r3, [pc, #68]	; (8007c94 <StopRetransmission+0x48>)
 8007c4e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8007c52:	f013 0f02 	tst.w	r3, #2
 8007c56:	d004      	beq.n	8007c62 <StopRetransmission+0x16>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8007c58:	4b0e      	ldr	r3, [pc, #56]	; (8007c94 <StopRetransmission+0x48>)
 8007c5a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d907      	bls.n	8007c72 <StopRetransmission+0x26>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8007c62:	4b0d      	ldr	r3, [pc, #52]	; (8007c98 <StopRetransmission+0x4c>)
 8007c64:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8007c68:	b11b      	cbz	r3, 8007c72 <StopRetransmission+0x26>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 8007c6a:	4a0b      	ldr	r2, [pc, #44]	; (8007c98 <StopRetransmission+0x4c>)
 8007c6c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8007c6e:	3301      	adds	r3, #1
 8007c70:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8007c72:	4b08      	ldr	r3, [pc, #32]	; (8007c94 <StopRetransmission+0x48>)
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8007c7a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 8007c7e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007c82:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8007c86:	f022 0202 	bic.w	r2, r2, #2
 8007c8a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 8007c8e:	2001      	movs	r0, #1
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	200006d0 	.word	0x200006d0
 8007c98:	20000bd8 	.word	0x20000bd8

08007c9c <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8007c9c:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8007c9e:	4b04      	ldr	r3, [pc, #16]	; (8007cb0 <CallNvmDataChangeCallback+0x14>)
 8007ca0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007ca4:	b113      	cbz	r3, 8007cac <CallNvmDataChangeCallback+0x10>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8007ca6:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8007ca8:	b103      	cbz	r3, 8007cac <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8007caa:	4798      	blx	r3
    }
}
 8007cac:	bd08      	pop	{r3, pc}
 8007cae:	bf00      	nop
 8007cb0:	200006d0 	.word	0x200006d0

08007cb4 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8007cb4:	4b04      	ldr	r3, [pc, #16]	; (8007cc8 <IsRequestPending+0x14>)
 8007cb6:	f893 0481 	ldrb.w	r0, [r3, #1153]	; 0x481
 8007cba:	f010 0005 	ands.w	r0, r0, #5
 8007cbe:	d100      	bne.n	8007cc2 <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 8007cc0:	4770      	bx	lr
        return 1;
 8007cc2:	2001      	movs	r0, #1
 8007cc4:	e7fc      	b.n	8007cc0 <IsRequestPending+0xc>
 8007cc6:	bf00      	nop
 8007cc8:	200006d0 	.word	0x200006d0

08007ccc <AckTimeoutRetriesProcess>:
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8007ccc:	4a13      	ldr	r2, [pc, #76]	; (8007d1c <AckTimeoutRetriesProcess+0x50>)
 8007cce:	f892 3412 	ldrb.w	r3, [r2, #1042]	; 0x412
 8007cd2:	f892 2411 	ldrb.w	r2, [r2, #1041]	; 0x411
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d207      	bcs.n	8007cea <AckTimeoutRetriesProcess+0x1e>
        MacCtx.AckTimeoutRetriesCounter++;
 8007cda:	3301      	adds	r3, #1
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	4a0f      	ldr	r2, [pc, #60]	; (8007d1c <AckTimeoutRetriesProcess+0x50>)
 8007ce0:	f882 3412 	strb.w	r3, [r2, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8007ce4:	f013 0f01 	tst.w	r3, #1
 8007ce8:	d100      	bne.n	8007cec <AckTimeoutRetriesProcess+0x20>
 8007cea:	4770      	bx	lr
{
 8007cec:	b510      	push	{r4, lr}
 8007cee:	b084      	sub	sp, #16
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8007cf0:	2322      	movs	r3, #34	; 0x22
 8007cf2:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007cf6:	4c0a      	ldr	r4, [pc, #40]	; (8007d20 <AckTimeoutRetriesProcess+0x54>)
 8007cf8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8007cfc:	f88d 300a 	strb.w	r3, [sp, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007d00:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
 8007d04:	f88d 3009 	strb.w	r3, [sp, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007d08:	a902      	add	r1, sp, #8
 8007d0a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8007d0e:	f003 fff8 	bl	800bd02 <RegionGetPhyParam>
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8007d12:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
}
 8007d16:	b004      	add	sp, #16
 8007d18:	bd10      	pop	{r4, pc}
 8007d1a:	bf00      	nop
 8007d1c:	200006d0 	.word	0x200006d0
 8007d20:	20000bd8 	.word	0x20000bd8

08007d24 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8007d24:	b500      	push	{lr}
 8007d26:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007d28:	4b0c      	ldr	r3, [pc, #48]	; (8007d5c <GetMaxAppPayloadWithoutFOptsLength+0x38>)
 8007d2a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8007d2e:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 8007d32:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8007d36:	220d      	movs	r2, #13
 8007d38:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8007d3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d40:	b113      	cbz	r3, 8007d48 <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8007d42:	230e      	movs	r3, #14
 8007d44:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007d48:	a902      	add	r1, sp, #8
 8007d4a:	4b04      	ldr	r3, [pc, #16]	; (8007d5c <GetMaxAppPayloadWithoutFOptsLength+0x38>)
 8007d4c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8007d50:	f003 ffd7 	bl	800bd02 <RegionGetPhyParam>
}
 8007d54:	b2c0      	uxtb	r0, r0
 8007d56:	b005      	add	sp, #20
 8007d58:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d5c:	20000bd8 	.word	0x20000bd8

08007d60 <ValidatePayloadLength>:
{
 8007d60:	b538      	push	{r3, r4, r5, lr}
 8007d62:	4605      	mov	r5, r0
 8007d64:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8007d66:	4608      	mov	r0, r1
 8007d68:	f7ff ffdc 	bl	8007d24 <GetMaxAppPayloadWithoutFOptsLength>
 8007d6c:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 8007d6e:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d303      	bcc.n	8007d7c <ValidatePayloadLength+0x1c>
 8007d74:	2aff      	cmp	r2, #255	; 0xff
 8007d76:	d903      	bls.n	8007d80 <ValidatePayloadLength+0x20>
    return false;
 8007d78:	2000      	movs	r0, #0
 8007d7a:	e000      	b.n	8007d7e <ValidatePayloadLength+0x1e>
 8007d7c:	2000      	movs	r0, #0
}
 8007d7e:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 8007d80:	2001      	movs	r0, #1
 8007d82:	e7fc      	b.n	8007d7e <ValidatePayloadLength+0x1e>

08007d84 <ProcessRadioTxDone>:
{
 8007d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d86:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007d88:	4b39      	ldr	r3, [pc, #228]	; (8007e70 <ProcessRadioTxDone+0xec>)
 8007d8a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d002      	beq.n	8007d98 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 8007d92:	4b38      	ldr	r3, [pc, #224]	; (8007e74 <ProcessRadioTxDone+0xf0>)
 8007d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d96:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8007d98:	4c37      	ldr	r4, [pc, #220]	; (8007e78 <ProcessRadioTxDone+0xf4>)
 8007d9a:	f504 7560 	add.w	r5, r4, #896	; 0x380
 8007d9e:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 8007da2:	4628      	mov	r0, r5
 8007da4:	f00f f8da 	bl	8016f5c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8007da8:	4628      	mov	r0, r5
 8007daa:	f00f f891 	bl	8016ed0 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8007dae:	f504 7566 	add.w	r5, r4, #920	; 0x398
 8007db2:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8007db6:	4628      	mov	r0, r5
 8007db8:	f00f f8d0 	bl	8016f5c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	f00f f887 	bl	8016ed0 <UTIL_TIMER_Start>
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8007dc2:	4b2b      	ldr	r3, [pc, #172]	; (8007e70 <ProcessRadioTxDone+0xec>)
 8007dc4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d002      	beq.n	8007dd2 <ProcessRadioTxDone+0x4e>
 8007dcc:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8007dd0:	b1a3      	cbz	r3, 8007dfc <ProcessRadioTxDone+0x78>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8007dd2:	2316      	movs	r3, #22
 8007dd4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007dd8:	a90a      	add	r1, sp, #40	; 0x28
 8007dda:	4b25      	ldr	r3, [pc, #148]	; (8007e70 <ProcessRadioTxDone+0xec>)
 8007ddc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8007de0:	f003 ff8f 	bl	800bd02 <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8007de4:	4c24      	ldr	r4, [pc, #144]	; (8007e78 <ProcessRadioTxDone+0xf4>)
 8007de6:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8007dea:	f504 747e 	add.w	r4, r4, #1016	; 0x3f8
 8007dee:	4401      	add	r1, r0
 8007df0:	4620      	mov	r0, r4
 8007df2:	f00f f8b3 	bl	8016f5c <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8007df6:	4620      	mov	r0, r4
 8007df8:	f00f f86a 	bl	8016ed0 <UTIL_TIMER_Start>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8007dfc:	4b1f      	ldr	r3, [pc, #124]	; (8007e7c <ProcessRadioTxDone+0xf8>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4c1b      	ldr	r4, [pc, #108]	; (8007e70 <ProcessRadioTxDone+0xec>)
 8007e02:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 8007e04:	4f1c      	ldr	r7, [pc, #112]	; (8007e78 <ProcessRadioTxDone+0xf4>)
 8007e06:	f897 2415 	ldrb.w	r2, [r7, #1045]	; 0x415
 8007e0a:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8007e0e:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8007e10:	ae0c      	add	r6, sp, #48	; 0x30
 8007e12:	4630      	mov	r0, r6
 8007e14:	f00e ff30 	bl	8016c78 <SysTimeGetMcuTime>
 8007e18:	ad02      	add	r5, sp, #8
 8007e1a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8007e24:	e896 0006 	ldmia.w	r6, {r1, r2}
 8007e28:	4628      	mov	r0, r5
 8007e2a:	f00e fec6 	bl	8016bba <SysTimeSub>
 8007e2e:	ab07      	add	r3, sp, #28
 8007e30:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007e34:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8007e38:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8007e3c:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007e44:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 8007e48:	b90b      	cbnz	r3, 8007e4e <ProcessRadioTxDone+0xca>
        txDone.Joined  = false;
 8007e4a:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8007e4e:	a904      	add	r1, sp, #16
 8007e50:	4b07      	ldr	r3, [pc, #28]	; (8007e70 <ProcessRadioTxDone+0xec>)
 8007e52:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8007e56:	f003 ff94 	bl	800bd82 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 8007e5a:	4b07      	ldr	r3, [pc, #28]	; (8007e78 <ProcessRadioTxDone+0xf4>)
 8007e5c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8007e60:	b91b      	cbnz	r3, 8007e6a <ProcessRadioTxDone+0xe6>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007e62:	4b05      	ldr	r3, [pc, #20]	; (8007e78 <ProcessRadioTxDone+0xf4>)
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
}
 8007e6a:	b00f      	add	sp, #60	; 0x3c
 8007e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	20000bd8 	.word	0x20000bd8
 8007e74:	08018318 	.word	0x08018318
 8007e78:	200006d0 	.word	0x200006d0
 8007e7c:	200024f0 	.word	0x200024f0

08007e80 <OnAckTimeoutTimerEvent>:
{
 8007e80:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 8007e82:	4c10      	ldr	r4, [pc, #64]	; (8007ec4 <OnAckTimeoutTimerEvent+0x44>)
 8007e84:	f504 707e 	add.w	r0, r4, #1016	; 0x3f8
 8007e88:	f00e ffc0 	bl	8016e0c <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 8007e8c:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8007e90:	b113      	cbz	r3, 8007e98 <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 8007e92:	2201      	movs	r2, #1
 8007e94:	f884 2413 	strb.w	r2, [r4, #1043]	; 0x413
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8007e98:	4b0b      	ldr	r3, [pc, #44]	; (8007ec8 <OnAckTimeoutTimerEvent+0x48>)
 8007e9a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d007      	beq.n	8007eb2 <OnAckTimeoutTimerEvent+0x32>
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007ea2:	4b08      	ldr	r3, [pc, #32]	; (8007ec4 <OnAckTimeoutTimerEvent+0x44>)
 8007ea4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007ea8:	b113      	cbz	r3, 8007eb0 <OnAckTimeoutTimerEvent+0x30>
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	b103      	cbz	r3, 8007eb0 <OnAckTimeoutTimerEvent+0x30>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007eae:	4798      	blx	r3
}
 8007eb0:	bd10      	pop	{r4, pc}
        MacCtx.MacFlags.Bits.MacDone = 1;
 8007eb2:	4a04      	ldr	r2, [pc, #16]	; (8007ec4 <OnAckTimeoutTimerEvent+0x44>)
 8007eb4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8007eb8:	f043 0320 	orr.w	r3, r3, #32
 8007ebc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8007ec0:	e7ef      	b.n	8007ea2 <OnAckTimeoutTimerEvent+0x22>
 8007ec2:	bf00      	nop
 8007ec4:	200006d0 	.word	0x200006d0
 8007ec8:	20000bd8 	.word	0x20000bd8

08007ecc <PrepareRxDoneAbort>:
{
 8007ecc:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8007ece:	4b0c      	ldr	r3, [pc, #48]	; (8007f00 <PrepareRxDoneAbort+0x34>)
 8007ed0:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8007ed4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007ed8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 8007edc:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8007ee0:	b94b      	cbnz	r3, 8007ef6 <PrepareRxDoneAbort+0x2a>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8007ee2:	4a07      	ldr	r2, [pc, #28]	; (8007f00 <PrepareRxDoneAbort+0x34>)
 8007ee4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 8007ee8:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 8007eec:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 8007ef0:	f7ff fd9e 	bl	8007a30 <UpdateRxSlotIdleState>
}
 8007ef4:	bd08      	pop	{r3, pc}
        OnAckTimeoutTimerEvent( NULL );
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	f7ff ffc2 	bl	8007e80 <OnAckTimeoutTimerEvent>
 8007efc:	e7f1      	b.n	8007ee2 <PrepareRxDoneAbort+0x16>
 8007efe:	bf00      	nop
 8007f00:	200006d0 	.word	0x200006d0

08007f04 <LoRaMacCheckForBeaconAcquisition>:
{
 8007f04:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8007f06:	200c      	movs	r0, #12
 8007f08:	f003 f98c 	bl	800b224 <LoRaMacConfirmQueueIsCmdActive>
 8007f0c:	b188      	cbz	r0, 8007f32 <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8007f0e:	4b0b      	ldr	r3, [pc, #44]	; (8007f3c <LoRaMacCheckForBeaconAcquisition+0x38>)
 8007f10:	f893 0481 	ldrb.w	r0, [r3, #1153]	; 0x481
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8007f14:	f010 0f01 	tst.w	r0, #1
 8007f18:	d10d      	bne.n	8007f36 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8007f1a:	f010 0004 	ands.w	r0, r0, #4
 8007f1e:	d009      	beq.n	8007f34 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007f20:	461a      	mov	r2, r3
 8007f22:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8007f26:	f023 0302 	bic.w	r3, r3, #2
 8007f2a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8007f2e:	2001      	movs	r0, #1
 8007f30:	e000      	b.n	8007f34 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 8007f32:	2000      	movs	r0, #0
}
 8007f34:	bd08      	pop	{r3, pc}
    return 0x00;
 8007f36:	2000      	movs	r0, #0
 8007f38:	e7fc      	b.n	8007f34 <LoRaMacCheckForBeaconAcquisition+0x30>
 8007f3a:	bf00      	nop
 8007f3c:	200006d0 	.word	0x200006d0

08007f40 <GetFCntDown>:
{
 8007f40:	b570      	push	{r4, r5, r6, lr}
 8007f42:	9c05      	ldr	r4, [sp, #20]
 8007f44:	9d06      	ldr	r5, [sp, #24]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8007f46:	b1fa      	cbz	r2, 8007f88 <GetFCntDown+0x48>
 8007f48:	4616      	mov	r6, r2
 8007f4a:	b1fc      	cbz	r4, 8007f8c <GetFCntDown+0x4c>
 8007f4c:	b305      	cbz	r5, 8007f90 <GetFCntDown+0x50>
    switch( addrID )
 8007f4e:	b188      	cbz	r0, 8007f74 <GetFCntDown+0x34>
 8007f50:	2801      	cmp	r0, #1
 8007f52:	d11f      	bne.n	8007f94 <GetFCntDown+0x54>
            if( lrWanVersion.Fields.Minor == 1 )
 8007f54:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007f58:	2a01      	cmp	r2, #1
 8007f5a:	d002      	beq.n	8007f62 <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	7023      	strb	r3, [r4, #0]
 8007f60:	e00a      	b.n	8007f78 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8007f62:	b121      	cbz	r1, 8007f6e <GetFCntDown+0x2e>
 8007f64:	2903      	cmp	r1, #3
 8007f66:	d002      	beq.n	8007f6e <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	7023      	strb	r3, [r4, #0]
 8007f6c:	e004      	b.n	8007f78 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 8007f6e:	2302      	movs	r3, #2
 8007f70:	7023      	strb	r3, [r4, #0]
 8007f72:	e001      	b.n	8007f78 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 8007f74:	2304      	movs	r3, #4
 8007f76:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8007f78:	462b      	mov	r3, r5
 8007f7a:	89f2      	ldrh	r2, [r6, #14]
 8007f7c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8007f80:	7820      	ldrb	r0, [r4, #0]
 8007f82:	f003 fb71 	bl	800b668 <LoRaMacCryptoGetFCntDown>
}
 8007f86:	bd70      	pop	{r4, r5, r6, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8007f88:	200a      	movs	r0, #10
 8007f8a:	e7fc      	b.n	8007f86 <GetFCntDown+0x46>
 8007f8c:	200a      	movs	r0, #10
 8007f8e:	e7fa      	b.n	8007f86 <GetFCntDown+0x46>
 8007f90:	200a      	movs	r0, #10
 8007f92:	e7f8      	b.n	8007f86 <GetFCntDown+0x46>
    switch( addrID )
 8007f94:	2005      	movs	r0, #5
 8007f96:	e7f6      	b.n	8007f86 <GetFCntDown+0x46>

08007f98 <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8007f98:	2801      	cmp	r0, #1
 8007f9a:	d900      	bls.n	8007f9e <RemoveMacCommands+0x6>
 8007f9c:	4770      	bx	lr
{
 8007f9e:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 8007fa0:	2a01      	cmp	r2, #1
 8007fa2:	d105      	bne.n	8007fb0 <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 8007fa4:	f011 0f20 	tst.w	r1, #32
 8007fa8:	d004      	beq.n	8007fb4 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8007faa:	f002 ffd7 	bl	800af5c <LoRaMacCommandsRemoveStickyAnsCmds>
 8007fae:	e001      	b.n	8007fb4 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8007fb0:	f002 ffd4 	bl	800af5c <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8007fb4:	bd08      	pop	{r3, pc}
	...

08007fb8 <ProcessMacCommands>:
{
 8007fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fbc:	b08f      	sub	sp, #60	; 0x3c
 8007fbe:	4605      	mov	r5, r0
 8007fc0:	460c      	mov	r4, r1
 8007fc2:	4616      	mov	r6, r2
 8007fc4:	4698      	mov	r8, r3
    uint8_t status = 0;
 8007fc6:	2700      	movs	r7, #0
 8007fc8:	f88d 702f 	strb.w	r7, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8007fcc:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
    while( macIndex < commandsSize )
 8007fd0:	42b4      	cmp	r4, r6
 8007fd2:	f080 82b8 	bcs.w	8008546 <ProcessMacCommands+0x58e>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8007fd6:	5d28      	ldrb	r0, [r5, r4]
 8007fd8:	f003 f828 	bl	800b02c <LoRaMacCommandsGetCmdSize>
 8007fdc:	4420      	add	r0, r4
 8007fde:	42b0      	cmp	r0, r6
 8007fe0:	f300 82b1 	bgt.w	8008546 <ProcessMacCommands+0x58e>
        switch( payload[macIndex++] )
 8007fe4:	f104 0901 	add.w	r9, r4, #1
 8007fe8:	fa5f f989 	uxtb.w	r9, r9
 8007fec:	5d29      	ldrb	r1, [r5, r4]
 8007fee:	3902      	subs	r1, #2
 8007ff0:	2911      	cmp	r1, #17
 8007ff2:	f200 82a8 	bhi.w	8008546 <ProcessMacCommands+0x58e>
 8007ff6:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007ffa:	0012      	.short	0x0012
 8007ffc:	00920029 	.word	0x00920029
 8008000:	00ed00a6 	.word	0x00ed00a6
 8008004:	013c0105 	.word	0x013c0105
 8008008:	01ab0155 	.word	0x01ab0155
 800800c:	02a602a6 	.word	0x02a602a6
 8008010:	02a601db 	.word	0x02a601db
 8008014:	023202a6 	.word	0x023202a6
 8008018:	02690249 	.word	0x02690249
 800801c:	0285      	.short	0x0285
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800801e:	2004      	movs	r0, #4
 8008020:	f003 f900 	bl	800b224 <LoRaMacConfirmQueueIsCmdActive>
 8008024:	b908      	cbnz	r0, 800802a <ProcessMacCommands+0x72>
        switch( payload[macIndex++] )
 8008026:	464c      	mov	r4, r9
 8008028:	e7d2      	b.n	8007fd0 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800802a:	2104      	movs	r1, #4
 800802c:	2000      	movs	r0, #0
 800802e:	f003 f8ad 	bl	800b18c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8008032:	1ca3      	adds	r3, r4, #2
 8008034:	b2db      	uxtb	r3, r3
 8008036:	f815 1009 	ldrb.w	r1, [r5, r9]
 800803a:	4ac1      	ldr	r2, [pc, #772]	; (8008340 <ProcessMacCommands+0x388>)
 800803c:	f882 1454 	strb.w	r1, [r2, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8008040:	3403      	adds	r4, #3
 8008042:	b2e4      	uxtb	r4, r4
 8008044:	5ceb      	ldrb	r3, [r5, r3]
 8008046:	f882 3455 	strb.w	r3, [r2, #1109]	; 0x455
 800804a:	e7c1      	b.n	8007fd0 <ProcessMacCommands+0x18>
                int8_t linkAdrDatarate = DR_0;
 800804c:	2300      	movs	r3, #0
 800804e:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 8008052:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 8008056:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 800805a:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 800805e:	b10f      	cbz	r7, 8008064 <ProcessMacCommands+0xac>
                break;
 8008060:	464c      	mov	r4, r9
 8008062:	e7b5      	b.n	8007fd0 <ProcessMacCommands+0x18>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8008064:	f109 33ff 	add.w	r3, r9, #4294967295
 8008068:	442b      	add	r3, r5
 800806a:	9308      	str	r3, [sp, #32]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800806c:	eba6 0309 	sub.w	r3, r6, r9
 8008070:	3301      	adds	r3, #1
 8008072:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8008076:	48b3      	ldr	r0, [pc, #716]	; (8008344 <ProcessMacCommands+0x38c>)
 8008078:	f890 30fe 	ldrb.w	r3, [r0, #254]	; 0xfe
 800807c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008080:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8008084:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8008088:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
 800808c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8008090:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
 8008094:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8008098:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800809c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 80080a0:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80080a4:	9307      	str	r3, [sp, #28]
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80080a6:	ab05      	add	r3, sp, #20
 80080a8:	9301      	str	r3, [sp, #4]
 80080aa:	ab03      	add	r3, sp, #12
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	f10d 030b 	add.w	r3, sp, #11
 80080b2:	f10d 020a 	add.w	r2, sp, #10
 80080b6:	a907      	add	r1, sp, #28
 80080b8:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80080bc:	f003 ffcc 	bl	800c058 <RegionLinkAdrReq>
 80080c0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                    if( ( status & 0x07 ) == 0x07 )
 80080c4:	f000 0007 	and.w	r0, r0, #7
 80080c8:	2807      	cmp	r0, #7
 80080ca:	d001      	beq.n	80080d0 <ProcessMacCommands+0x118>
{
 80080cc:	2400      	movs	r4, #0
 80080ce:	e015      	b.n	80080fc <ProcessMacCommands+0x144>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 80080d0:	4b9c      	ldr	r3, [pc, #624]	; (8008344 <ProcessMacCommands+0x38c>)
 80080d2:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80080d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 80080da:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80080de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80080e2:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80080e6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80080ea:	e7ef      	b.n	80080cc <ProcessMacCommands+0x114>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80080ec:	2201      	movs	r2, #1
 80080ee:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 80080f2:	2003      	movs	r0, #3
 80080f4:	f002 fed2 	bl	800ae9c <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80080f8:	3401      	adds	r4, #1
 80080fa:	b2e4      	uxtb	r4, r4
 80080fc:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8008100:	4b91      	ldr	r3, [pc, #580]	; (8008348 <ProcessMacCommands+0x390>)
 8008102:	fba3 1302 	umull	r1, r3, r3, r2
 8008106:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
 800810a:	d3ef      	bcc.n	80080ec <ProcessMacCommands+0x134>
                    macIndex += linkAdrNbBytesParsed - 1;
 800810c:	4491      	add	r9, r2
 800810e:	fa5f f989 	uxtb.w	r9, r9
 8008112:	f109 39ff 	add.w	r9, r9, #4294967295
 8008116:	fa5f f989 	uxtb.w	r9, r9
                    adrBlockFound = true;
 800811a:	2701      	movs	r7, #1
 800811c:	e7a0      	b.n	8008060 <ProcessMacCommands+0xa8>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800811e:	3402      	adds	r4, #2
 8008120:	b2e4      	uxtb	r4, r4
 8008122:	f815 3009 	ldrb.w	r3, [r5, r9]
 8008126:	f003 030f 	and.w	r3, r3, #15
 800812a:	4986      	ldr	r1, [pc, #536]	; (8008344 <ProcessMacCommands+0x38c>)
 800812c:	f881 30ff 	strb.w	r3, [r1, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8008130:	2201      	movs	r2, #1
 8008132:	fa02 f303 	lsl.w	r3, r2, r3
 8008136:	f8a1 3102 	strh.w	r3, [r1, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800813a:	2200      	movs	r2, #0
 800813c:	a90b      	add	r1, sp, #44	; 0x2c
 800813e:	2004      	movs	r0, #4
 8008140:	f002 feac 	bl	800ae9c <LoRaMacCommandsAddCmd>
                break;
 8008144:	e744      	b.n	8007fd0 <ProcessMacCommands+0x18>
                status = 0x07;
 8008146:	2307      	movs	r3, #7
 8008148:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800814c:	f815 3009 	ldrb.w	r3, [r5, r9]
 8008150:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008154:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8008158:	f915 3009 	ldrsb.w	r3, [r5, r9]
 800815c:	f003 030f 	and.w	r3, r3, #15
 8008160:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 8008164:	1ca3      	adds	r3, r4, #2
 8008166:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8008168:	1ce1      	adds	r1, r4, #3
 800816a:	b2c9      	uxtb	r1, r1
 800816c:	5ceb      	ldrb	r3, [r5, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800816e:	1d22      	adds	r2, r4, #4
 8008170:	b2d2      	uxtb	r2, r2
 8008172:	5c69      	ldrb	r1, [r5, r1]
 8008174:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008178:	3405      	adds	r4, #5
 800817a:	b2e4      	uxtb	r4, r4
 800817c:	5caa      	ldrb	r2, [r5, r2]
 800817e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                rxParamSetupReq.Frequency *= 100;
 8008182:	2264      	movs	r2, #100	; 0x64
 8008184:	fb02 f303 	mul.w	r3, r2, r3
 8008188:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800818a:	a907      	add	r1, sp, #28
 800818c:	4b6d      	ldr	r3, [pc, #436]	; (8008344 <ProcessMacCommands+0x38c>)
 800818e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008192:	f003 ffa9 	bl	800c0e8 <RegionRxParamSetupReq>
 8008196:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 800819a:	f000 0307 	and.w	r3, r0, #7
 800819e:	2b07      	cmp	r3, #7
 80081a0:	d009      	beq.n	80081b6 <ProcessMacCommands+0x1fe>
                macCmdPayload[0] = status;
 80081a2:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80081a6:	2201      	movs	r2, #1
 80081a8:	a90b      	add	r1, sp, #44	; 0x2c
 80081aa:	2005      	movs	r0, #5
 80081ac:	f002 fe76 	bl	800ae9c <LoRaMacCommandsAddCmd>
                SetMlmeScheduleUplinkIndication( );
 80081b0:	f7ff fcb0 	bl	8007b14 <SetMlmeScheduleUplinkIndication>
                break;
 80081b4:	e70c      	b.n	8007fd0 <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80081b6:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80081ba:	4b62      	ldr	r3, [pc, #392]	; (8008344 <ProcessMacCommands+0x38c>)
 80081bc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80081c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80081c4:	9a08      	ldr	r2, [sp, #32]
 80081c6:	665a      	str	r2, [r3, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80081c8:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80081ca:	f89d 201d 	ldrb.w	r2, [sp, #29]
 80081ce:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 80081d2:	e7e6      	b.n	80081a2 <ProcessMacCommands+0x1ea>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80081d4:	4b5a      	ldr	r3, [pc, #360]	; (8008340 <ProcessMacCommands+0x388>)
 80081d6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80081da:	b17b      	cbz	r3, 80081fc <ProcessMacCommands+0x244>
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	b17b      	cbz	r3, 8008200 <ProcessMacCommands+0x248>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80081e0:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 80081e2:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80081e6:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 80081ea:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80081ee:	2202      	movs	r2, #2
 80081f0:	a90b      	add	r1, sp, #44	; 0x2c
 80081f2:	2006      	movs	r0, #6
 80081f4:	f002 fe52 	bl	800ae9c <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 80081f8:	464c      	mov	r4, r9
                break;
 80081fa:	e6e9      	b.n	8007fd0 <ProcessMacCommands+0x18>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80081fc:	20ff      	movs	r0, #255	; 0xff
 80081fe:	e7f0      	b.n	80081e2 <ProcessMacCommands+0x22a>
 8008200:	20ff      	movs	r0, #255	; 0xff
 8008202:	e7ee      	b.n	80081e2 <ProcessMacCommands+0x22a>
                status = 0x03;
 8008204:	2303      	movs	r3, #3
 8008206:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 800820a:	1ca3      	adds	r3, r4, #2
 800820c:	b2db      	uxtb	r3, r3
 800820e:	f915 2009 	ldrsb.w	r2, [r5, r9]
 8008212:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 8008216:	aa07      	add	r2, sp, #28
 8008218:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800821a:	1ce2      	adds	r2, r4, #3
 800821c:	b2d2      	uxtb	r2, r2
 800821e:	5ceb      	ldrb	r3, [r5, r3]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008220:	1d21      	adds	r1, r4, #4
 8008222:	b2c9      	uxtb	r1, r1
 8008224:	5caa      	ldrb	r2, [r5, r2]
 8008226:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800822a:	1d62      	adds	r2, r4, #5
 800822c:	b2d2      	uxtb	r2, r2
 800822e:	5c69      	ldrb	r1, [r5, r1]
 8008230:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                chParam.Frequency *= 100;
 8008234:	2164      	movs	r1, #100	; 0x64
 8008236:	fb01 f303 	mul.w	r3, r1, r3
 800823a:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 800823c:	2300      	movs	r3, #0
 800823e:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 8008240:	3406      	adds	r4, #6
 8008242:	b2e4      	uxtb	r4, r4
 8008244:	56ab      	ldrsb	r3, [r5, r2]
 8008246:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800824a:	a905      	add	r1, sp, #20
 800824c:	4b3d      	ldr	r3, [pc, #244]	; (8008344 <ProcessMacCommands+0x38c>)
 800824e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008252:	f003 ff79 	bl	800c148 <RegionNewChannelReq>
 8008256:	b2c3      	uxtb	r3, r0
 8008258:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800825c:	2800      	cmp	r0, #0
 800825e:	f6ff aeb7 	blt.w	8007fd0 <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 8008262:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8008266:	2201      	movs	r2, #1
 8008268:	a90b      	add	r1, sp, #44	; 0x2c
 800826a:	2007      	movs	r0, #7
 800826c:	f002 fe16 	bl	800ae9c <LoRaMacCommandsAddCmd>
                break;
 8008270:	e6ae      	b.n	8007fd0 <ProcessMacCommands+0x18>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8008272:	3402      	adds	r4, #2
 8008274:	b2e4      	uxtb	r4, r4
 8008276:	f815 3009 	ldrb.w	r3, [r5, r9]
                if( delay == 0 )
 800827a:	f013 020f 	ands.w	r2, r3, #15
 800827e:	d100      	bne.n	8008282 <ProcessMacCommands+0x2ca>
                    delay++;
 8008280:	3201      	adds	r2, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8008282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008286:	fb03 f302 	mul.w	r3, r3, r2
 800828a:	4a2e      	ldr	r2, [pc, #184]	; (8008344 <ProcessMacCommands+0x38c>)
 800828c:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800828e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8008292:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8008294:	2200      	movs	r2, #0
 8008296:	a90b      	add	r1, sp, #44	; 0x2c
 8008298:	2008      	movs	r0, #8
 800829a:	f002 fdff 	bl	800ae9c <LoRaMacCommandsAddCmd>
                SetMlmeScheduleUplinkIndication( );
 800829e:	f7ff fc39 	bl	8007b14 <SetMlmeScheduleUplinkIndication>
                break;
 80082a2:	e695      	b.n	8007fd0 <ProcessMacCommands+0x18>
                uint8_t eirpDwellTime = payload[macIndex++];
 80082a4:	3402      	adds	r4, #2
 80082a6:	b2e4      	uxtb	r4, r4
 80082a8:	f815 3009 	ldrb.w	r3, [r5, r9]
                txParamSetupReq.UplinkDwellTime = 0;
 80082ac:	2200      	movs	r2, #0
 80082ae:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 80082b2:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80082b6:	f013 0f20 	tst.w	r3, #32
 80082ba:	d002      	beq.n	80082c2 <ProcessMacCommands+0x30a>
                    txParamSetupReq.DownlinkDwellTime = 1;
 80082bc:	2201      	movs	r2, #1
 80082be:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80082c2:	f013 0f10 	tst.w	r3, #16
 80082c6:	d002      	beq.n	80082ce <ProcessMacCommands+0x316>
                    txParamSetupReq.UplinkDwellTime = 1;
 80082c8:	2201      	movs	r2, #1
 80082ca:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80082ce:	f003 030f 	and.w	r3, r3, #15
 80082d2:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80082d6:	a903      	add	r1, sp, #12
 80082d8:	4b1a      	ldr	r3, [pc, #104]	; (8008344 <ProcessMacCommands+0x38c>)
 80082da:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80082de:	f003 ff63 	bl	800c1a8 <RegionTxParamSetupReq>
 80082e2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80082e6:	f43f ae73 	beq.w	8007fd0 <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80082ea:	f89d a00c 	ldrb.w	sl, [sp, #12]
 80082ee:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8008344 <ProcessMacCommands+0x38c>
 80082f2:	f889 a074 	strb.w	sl, [r9, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80082f6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80082fa:	f889 3075 	strb.w	r3, [r9, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80082fe:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8008302:	4a12      	ldr	r2, [pc, #72]	; (800834c <ProcessMacCommands+0x394>)
 8008304:	5cd0      	ldrb	r0, [r2, r3]
 8008306:	f7f8 fa61 	bl	80007cc <__aeabi_ui2f>
 800830a:	f8c9 0078 	str.w	r0, [r9, #120]	; 0x78
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800830e:	2302      	movs	r3, #2
 8008310:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008314:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008318:	a907      	add	r1, sp, #28
 800831a:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
 800831e:	f003 fcf0 	bl	800bd02 <RegionGetPhyParam>
 8008322:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8008324:	b240      	sxtb	r0, r0
 8008326:	f999 3039 	ldrsb.w	r3, [r9, #57]	; 0x39
 800832a:	4298      	cmp	r0, r3
 800832c:	bfb8      	it	lt
 800832e:	4618      	movlt	r0, r3
 8008330:	f889 0039 	strb.w	r0, [r9, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8008334:	2200      	movs	r2, #0
 8008336:	a90b      	add	r1, sp, #44	; 0x2c
 8008338:	2009      	movs	r0, #9
 800833a:	f002 fdaf 	bl	800ae9c <LoRaMacCommandsAddCmd>
                break;
 800833e:	e647      	b.n	8007fd0 <ProcessMacCommands+0x18>
 8008340:	200006d0 	.word	0x200006d0
 8008344:	20000bd8 	.word	0x20000bd8
 8008348:	cccccccd 	.word	0xcccccccd
 800834c:	08017acc 	.word	0x08017acc
                status = 0x03;
 8008350:	2303      	movs	r3, #3
 8008352:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 8008356:	1ca3      	adds	r3, r4, #2
 8008358:	b2db      	uxtb	r3, r3
 800835a:	f815 2009 	ldrb.w	r2, [r5, r9]
 800835e:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8008362:	1ce1      	adds	r1, r4, #3
 8008364:	b2c9      	uxtb	r1, r1
 8008366:	5ceb      	ldrb	r3, [r5, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008368:	1d22      	adds	r2, r4, #4
 800836a:	b2d2      	uxtb	r2, r2
 800836c:	5c69      	ldrb	r1, [r5, r1]
 800836e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008372:	3405      	adds	r4, #5
 8008374:	b2e4      	uxtb	r4, r4
 8008376:	5caa      	ldrb	r2, [r5, r2]
 8008378:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                dlChannelReq.Rx1Frequency *= 100;
 800837c:	2264      	movs	r2, #100	; 0x64
 800837e:	fb02 f303 	mul.w	r3, r2, r3
 8008382:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8008384:	a907      	add	r1, sp, #28
 8008386:	4b71      	ldr	r3, [pc, #452]	; (800854c <ProcessMacCommands+0x594>)
 8008388:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800838c:	f003 ff3c 	bl	800c208 <RegionDlChannelReq>
 8008390:	b2c3      	uxtb	r3, r0
 8008392:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 8008396:	2800      	cmp	r0, #0
 8008398:	f6ff ae1a 	blt.w	8007fd0 <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 800839c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80083a0:	2201      	movs	r2, #1
 80083a2:	a90b      	add	r1, sp, #44	; 0x2c
 80083a4:	200a      	movs	r0, #10
 80083a6:	f002 fd79 	bl	800ae9c <LoRaMacCommandsAddCmd>
                    SetMlmeScheduleUplinkIndication( );
 80083aa:	f7ff fbb3 	bl	8007b14 <SetMlmeScheduleUplinkIndication>
                break;
 80083ae:	e60f      	b.n	8007fd0 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80083b0:	200a      	movs	r0, #10
 80083b2:	f002 ff37 	bl	800b224 <LoRaMacConfirmQueueIsCmdActive>
 80083b6:	b908      	cbnz	r0, 80083bc <ProcessMacCommands+0x404>
        switch( payload[macIndex++] )
 80083b8:	464c      	mov	r4, r9
 80083ba:	e609      	b.n	8007fd0 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80083bc:	210a      	movs	r1, #10
 80083be:	2000      	movs	r0, #0
 80083c0:	f002 fee4 	bl	800b18c <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 80083c4:	2300      	movs	r3, #0
 80083c6:	f8ad 3012 	strh.w	r3, [sp, #18]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80083ca:	1ca1      	adds	r1, r4, #2
 80083cc:	b2c9      	uxtb	r1, r1
 80083ce:	f815 3009 	ldrb.w	r3, [r5, r9]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80083d2:	1ce2      	adds	r2, r4, #3
 80083d4:	b2d2      	uxtb	r2, r2
 80083d6:	5c69      	ldrb	r1, [r5, r1]
 80083d8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80083dc:	1d21      	adds	r1, r4, #4
 80083de:	b2c9      	uxtb	r1, r1
 80083e0:	5caa      	ldrb	r2, [r5, r2]
 80083e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80083e6:	1d62      	adds	r2, r4, #5
 80083e8:	b2d2      	uxtb	r2, r2
 80083ea:	5c69      	ldrb	r1, [r5, r1]
 80083ec:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80083f0:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80083f2:	3406      	adds	r4, #6
 80083f4:	b2e4      	uxtb	r4, r4
 80083f6:	5ca9      	ldrb	r1, [r5, r2]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80083f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80083fc:	fb02 f201 	mul.w	r2, r2, r1
 8008400:	0a12      	lsrs	r2, r2, #8
 8008402:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 8008406:	f10d 0914 	add.w	r9, sp, #20
 800840a:	9904      	ldr	r1, [sp, #16]
 800840c:	4618      	mov	r0, r3
 800840e:	e889 0003 	stmia.w	r9, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8008412:	4a4f      	ldr	r2, [pc, #316]	; (8008550 <ProcessMacCommands+0x598>)
 8008414:	441a      	add	r2, r3
 8008416:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 8008418:	f10d 0b1c 	add.w	fp, sp, #28
 800841c:	4658      	mov	r0, fp
 800841e:	f00e fc0b 	bl	8016c38 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8008422:	f8df a130 	ldr.w	sl, [pc, #304]	; 8008554 <ProcessMacCommands+0x59c>
 8008426:	f8da 333c 	ldr.w	r3, [sl, #828]	; 0x33c
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	f8da 3338 	ldr.w	r3, [sl, #824]	; 0x338
 8008430:	e899 0006 	ldmia.w	r9, {r1, r2}
 8008434:	a80c      	add	r0, sp, #48	; 0x30
 8008436:	f00e fbc0 	bl	8016bba <SysTimeSub>
 800843a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800843c:	9300      	str	r3, [sp, #0]
 800843e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008440:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8008444:	4648      	mov	r0, r9
 8008446:	f00e fb9b 	bl	8016b80 <SysTimeAdd>
                    SysTimeSet( sysTime );
 800844a:	e899 0003 	ldmia.w	r9, {r0, r1}
 800844e:	f00e fbd1 	bl	8016bf4 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8008452:	f002 fc8c 	bl	800ad6e <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8008456:	2301      	movs	r3, #1
 8008458:	f88a 3434 	strb.w	r3, [sl, #1076]	; 0x434
 800845c:	e5b8      	b.n	8007fd0 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800845e:	200d      	movs	r0, #13
 8008460:	f002 fee0 	bl	800b224 <LoRaMacConfirmQueueIsCmdActive>
 8008464:	b908      	cbnz	r0, 800846a <ProcessMacCommands+0x4b2>
        switch( payload[macIndex++] )
 8008466:	464c      	mov	r4, r9
 8008468:	e5b2      	b.n	8007fd0 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800846a:	210d      	movs	r1, #13
 800846c:	2000      	movs	r0, #0
 800846e:	f002 fe8d 	bl	800b18c <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8008472:	4b38      	ldr	r3, [pc, #224]	; (8008554 <ProcessMacCommands+0x59c>)
 8008474:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8008478:	3b04      	subs	r3, #4
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b01      	cmp	r3, #1
 800847e:	d801      	bhi.n	8008484 <ProcessMacCommands+0x4cc>
        switch( payload[macIndex++] )
 8008480:	464c      	mov	r4, r9
 8008482:	e5a5      	b.n	8007fd0 <ProcessMacCommands+0x18>
                        LoRaMacClassBPingSlotInfoAns( );
 8008484:	f002 fc6f 	bl	800ad66 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 8008488:	464c      	mov	r4, r9
 800848a:	e5a1      	b.n	8007fd0 <ProcessMacCommands+0x18>
                frequency = ( uint32_t )payload[macIndex++];
 800848c:	1ca2      	adds	r2, r4, #2
 800848e:	b2d2      	uxtb	r2, r2
 8008490:	f815 3009 	ldrb.w	r3, [r5, r9]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008494:	1ce1      	adds	r1, r4, #3
 8008496:	b2c9      	uxtb	r1, r1
 8008498:	5caa      	ldrb	r2, [r5, r2]
 800849a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800849e:	1d22      	adds	r2, r4, #4
 80084a0:	b2d2      	uxtb	r2, r2
 80084a2:	5c69      	ldrb	r1, [r5, r1]
 80084a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 80084a8:	3405      	adds	r4, #5
 80084aa:	b2e4      	uxtb	r4, r4
 80084ac:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80084ae:	2164      	movs	r1, #100	; 0x64
 80084b0:	fb01 f103 	mul.w	r1, r1, r3
 80084b4:	f000 000f 	and.w	r0, r0, #15
 80084b8:	f002 fc56 	bl	800ad68 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 80084bc:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 80084c0:	2201      	movs	r2, #1
 80084c2:	a90b      	add	r1, sp, #44	; 0x2c
 80084c4:	2011      	movs	r0, #17
 80084c6:	f002 fce9 	bl	800ae9c <LoRaMacCommandsAddCmd>
                break;
 80084ca:	e581      	b.n	8007fd0 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80084cc:	200e      	movs	r0, #14
 80084ce:	f002 fea9 	bl	800b224 <LoRaMacConfirmQueueIsCmdActive>
 80084d2:	b908      	cbnz	r0, 80084d8 <ProcessMacCommands+0x520>
        switch( payload[macIndex++] )
 80084d4:	464c      	mov	r4, r9
 80084d6:	e57b      	b.n	8007fd0 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80084d8:	210e      	movs	r1, #14
 80084da:	2000      	movs	r0, #0
 80084dc:	f002 fe56 	bl	800b18c <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80084e0:	1ca2      	adds	r2, r4, #2
 80084e2:	b2d2      	uxtb	r2, r2
 80084e4:	f815 0009 	ldrb.w	r0, [r5, r9]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80084e8:	1ce3      	adds	r3, r4, #3
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	f815 c002 	ldrb.w	ip, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 80084f0:	3404      	adds	r4, #4
 80084f2:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80084f4:	4a18      	ldr	r2, [pc, #96]	; (8008558 <ProcessMacCommands+0x5a0>)
 80084f6:	6812      	ldr	r2, [r2, #0]
 80084f8:	5ce9      	ldrb	r1, [r5, r3]
 80084fa:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 80084fe:	f002 fc35 	bl	800ad6c <LoRaMacClassBBeaconTimingAns>
 8008502:	e565      	b.n	8007fd0 <ProcessMacCommands+0x18>
                    frequency = ( uint32_t )payload[macIndex++];
 8008504:	1ca1      	adds	r1, r4, #2
 8008506:	b2c9      	uxtb	r1, r1
 8008508:	f815 3009 	ldrb.w	r3, [r5, r9]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800850c:	1ce2      	adds	r2, r4, #3
 800850e:	b2d2      	uxtb	r2, r2
 8008510:	5c68      	ldrb	r0, [r5, r1]
 8008512:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008516:	3404      	adds	r4, #4
 8008518:	b2e4      	uxtb	r4, r4
 800851a:	5ca8      	ldrb	r0, [r5, r2]
 800851c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8008520:	2064      	movs	r0, #100	; 0x64
 8008522:	fb00 f003 	mul.w	r0, r0, r3
 8008526:	f002 fc23 	bl	800ad70 <LoRaMacClassBBeaconFreqReq>
 800852a:	b140      	cbz	r0, 800853e <ProcessMacCommands+0x586>
                        macCmdPayload[0] = 1;
 800852c:	2301      	movs	r3, #1
 800852e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8008532:	2201      	movs	r2, #1
 8008534:	a90b      	add	r1, sp, #44	; 0x2c
 8008536:	2013      	movs	r0, #19
 8008538:	f002 fcb0 	bl	800ae9c <LoRaMacCommandsAddCmd>
                break;
 800853c:	e548      	b.n	8007fd0 <ProcessMacCommands+0x18>
                        macCmdPayload[0] = 0;
 800853e:	2300      	movs	r3, #0
 8008540:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8008544:	e7f5      	b.n	8008532 <ProcessMacCommands+0x57a>
}
 8008546:	b00f      	add	sp, #60	; 0x3c
 8008548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854c:	20000bd8 	.word	0x20000bd8
 8008550:	12d53d80 	.word	0x12d53d80
 8008554:	200006d0 	.word	0x200006d0
 8008558:	200024f4 	.word	0x200024f4

0800855c <ProcessRadioRxDone>:
{
 800855c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008560:	b0a3      	sub	sp, #140	; 0x8c
    uint8_t *payload = RxDoneParams.Payload;
 8008562:	4bbd      	ldr	r3, [pc, #756]	; (8008858 <ProcessRadioRxDone+0x2fc>)
 8008564:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 8008566:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 8008568:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 800856c:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	9306      	str	r3, [sp, #24]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8008574:	4ab9      	ldr	r2, [pc, #740]	; (800885c <ProcessRadioRxDone+0x300>)
 8008576:	f8d2 80cc 	ldr.w	r8, [r2, #204]	; 0xcc
    MacCtx.McpsConfirm.AckReceived = false;
 800857a:	4cb9      	ldr	r4, [pc, #740]	; (8008860 <ProcessRadioRxDone+0x304>)
 800857c:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 8008580:	f8a4 947c 	strh.w	r9, [r4, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 8008584:	f884 747e 	strb.w	r7, [r4, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8008588:	f894 2480 	ldrb.w	r2, [r4, #1152]	; 0x480
 800858c:	f884 247f 	strb.w	r2, [r4, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 8008590:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 8008594:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 8008598:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800859c:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 80085a0:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 80085a4:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 80085a8:	f884 342a 	strb.w	r3, [r4, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 80085ac:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80085b0:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 80085b4:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80085b8:	f884 3434 	strb.w	r3, [r4, #1076]	; 0x434
    Radio.Sleep( );
 80085bc:	4ba9      	ldr	r3, [pc, #676]	; (8008864 <ProcessRadioRxDone+0x308>)
 80085be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c0:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 80085c2:	f504 7066 	add.w	r0, r4, #920	; 0x398
 80085c6:	f00e fc21 	bl	8016e0c <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 80085ca:	4629      	mov	r1, r5
 80085cc:	4630      	mov	r0, r6
 80085ce:	f002 fbb7 	bl	800ad40 <LoRaMacClassBRxBeacon>
 80085d2:	b998      	cbnz	r0, 80085fc <ProcessRadioRxDone+0xa0>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80085d4:	4ba1      	ldr	r3, [pc, #644]	; (800885c <ProcessRadioRxDone+0x300>)
 80085d6:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d013      	beq.n	8008606 <ProcessRadioRxDone+0xaa>
    macHdr.Value = payload[pktHeaderLen++];
 80085de:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 80085e0:	0963      	lsrs	r3, r4, #5
 80085e2:	3b01      	subs	r3, #1
 80085e4:	2b06      	cmp	r3, #6
 80085e6:	f200 827c 	bhi.w	8008ae2 <ProcessRadioRxDone+0x586>
 80085ea:	e8df f013 	tbh	[pc, r3, lsl #1]
 80085ee:	0029      	.short	0x0029
 80085f0:	00a7027a 	.word	0x00a7027a
 80085f4:	00a3027a 	.word	0x00a3027a
 80085f8:	0254027a 	.word	0x0254027a
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 80085fc:	f8a4 9472 	strh.w	r9, [r4, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8008600:	f884 7474 	strb.w	r7, [r4, #1140]	; 0x474
        return;
 8008604:	e282      	b.n	8008b0c <ProcessRadioRxDone+0x5b0>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008606:	f002 fb9f 	bl	800ad48 <LoRaMacClassBIsPingExpected>
 800860a:	b150      	cbz	r0, 8008622 <ProcessRadioRxDone+0xc6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800860c:	2000      	movs	r0, #0
 800860e:	f002 fb90 	bl	800ad32 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008612:	2000      	movs	r0, #0
 8008614:	f002 fb92 	bl	800ad3c <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8008618:	4b91      	ldr	r3, [pc, #580]	; (8008860 <ProcessRadioRxDone+0x304>)
 800861a:	2204      	movs	r2, #4
 800861c:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 8008620:	e7dd      	b.n	80085de <ProcessRadioRxDone+0x82>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008622:	f002 fb93 	bl	800ad4c <LoRaMacClassBIsMulticastExpected>
 8008626:	2800      	cmp	r0, #0
 8008628:	d0d9      	beq.n	80085de <ProcessRadioRxDone+0x82>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800862a:	2000      	movs	r0, #0
 800862c:	f002 fb82 	bl	800ad34 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008630:	2000      	movs	r0, #0
 8008632:	f002 fb84 	bl	800ad3e <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008636:	4b8a      	ldr	r3, [pc, #552]	; (8008860 <ProcessRadioRxDone+0x304>)
 8008638:	2205      	movs	r2, #5
 800863a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800863e:	e7ce      	b.n	80085de <ProcessRadioRxDone+0x82>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8008640:	2d10      	cmp	r5, #16
 8008642:	d95a      	bls.n	80086fa <ProcessRadioRxDone+0x19e>
            macMsgJoinAccept.Buffer = payload;
 8008644:	9607      	str	r6, [sp, #28]
            macMsgJoinAccept.BufSize = size;
 8008646:	b2ed      	uxtb	r5, r5
 8008648:	f88d 5020 	strb.w	r5, [sp, #32]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800864c:	4b83      	ldr	r3, [pc, #524]	; (800885c <ProcessRadioRxDone+0x300>)
 800864e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8008652:	2b00      	cmp	r3, #0
 8008654:	d158      	bne.n	8008708 <ProcessRadioRxDone+0x1ac>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8008656:	f00b fee5 	bl	8014424 <SecureElementGetJoinEui>
 800865a:	4601      	mov	r1, r0
 800865c:	aa07      	add	r2, sp, #28
 800865e:	20ff      	movs	r0, #255	; 0xff
 8008660:	f003 f976 	bl	800b950 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8008664:	2800      	cmp	r0, #0
 8008666:	d15b      	bne.n	8008720 <ProcessRadioRxDone+0x1c4>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8008668:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800866c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8008670:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008674:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
 8008678:	4b78      	ldr	r3, [pc, #480]	; (800885c <ProcessRadioRxDone+0x300>)
 800867a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800867e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8008682:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008684:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8008688:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800868c:	f3c2 1102 	ubfx	r1, r2, #4, #3
 8008690:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008694:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8008698:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800869c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 80086a0:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80086a4:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 80086a6:	b90a      	cbnz	r2, 80086ac <ProcessRadioRxDone+0x150>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 80086a8:	2201      	movs	r2, #1
 80086aa:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 80086ac:	4c6b      	ldr	r4, [pc, #428]	; (800885c <ProcessRadioRxDone+0x300>)
 80086ae:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80086b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80086b4:	fb03 f302 	mul.w	r3, r3, r2
 80086b8:	6523      	str	r3, [r4, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80086ba:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80086be:	6563      	str	r3, [r4, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 80086c0:	2300      	movs	r3, #0
 80086c2:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
                applyCFList.Payload = macMsgJoinAccept.CFList;
 80086c6:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 80086ca:	9320      	str	r3, [sp, #128]	; 0x80
                applyCFList.Size = size - 17;
 80086cc:	3d11      	subs	r5, #17
 80086ce:	f88d 5084 	strb.w	r5, [sp, #132]	; 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 80086d2:	a920      	add	r1, sp, #128	; 0x80
 80086d4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80086d8:	f003 fbd9 	bl	800be8e <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80086dc:	2302      	movs	r3, #2
 80086de:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80086e2:	2001      	movs	r0, #1
 80086e4:	f002 fd9e 	bl	800b224 <LoRaMacConfirmQueueIsCmdActive>
 80086e8:	b9a8      	cbnz	r0, 8008716 <ProcessRadioRxDone+0x1ba>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 80086ea:	4a5d      	ldr	r2, [pc, #372]	; (8008860 <ProcessRadioRxDone+0x304>)
 80086ec:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80086f0:	f043 0308 	orr.w	r3, r3, #8
 80086f4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 80086f8:	e1e7      	b.n	8008aca <ProcessRadioRxDone+0x56e>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80086fa:	4b59      	ldr	r3, [pc, #356]	; (8008860 <ProcessRadioRxDone+0x304>)
 80086fc:	2201      	movs	r2, #1
 80086fe:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8008702:	f7ff fbe3 	bl	8007ecc <PrepareRxDoneAbort>
                return;
 8008706:	e201      	b.n	8008b0c <ProcessRadioRxDone+0x5b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008708:	4b55      	ldr	r3, [pc, #340]	; (8008860 <ProcessRadioRxDone+0x304>)
 800870a:	2201      	movs	r2, #1
 800870c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8008710:	f7ff fbdc 	bl	8007ecc <PrepareRxDoneAbort>
                return;
 8008714:	e1fa      	b.n	8008b0c <ProcessRadioRxDone+0x5b0>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8008716:	2101      	movs	r1, #1
 8008718:	2000      	movs	r0, #0
 800871a:	f002 fd37 	bl	800b18c <LoRaMacConfirmQueueSetStatus>
 800871e:	e7e4      	b.n	80086ea <ProcessRadioRxDone+0x18e>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008720:	2001      	movs	r0, #1
 8008722:	f002 fd7f 	bl	800b224 <LoRaMacConfirmQueueIsCmdActive>
 8008726:	2800      	cmp	r0, #0
 8008728:	d0df      	beq.n	80086ea <ProcessRadioRxDone+0x18e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800872a:	2101      	movs	r1, #1
 800872c:	2007      	movs	r0, #7
 800872e:	f002 fd2d 	bl	800b18c <LoRaMacConfirmQueueSetStatus>
 8008732:	e7da      	b.n	80086ea <ProcessRadioRxDone+0x18e>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008734:	4b4a      	ldr	r3, [pc, #296]	; (8008860 <ProcessRadioRxDone+0x304>)
 8008736:	2201      	movs	r2, #1
 8008738:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800873c:	4b47      	ldr	r3, [pc, #284]	; (800885c <ProcessRadioRxDone+0x300>)
 800873e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8008742:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8008746:	4a46      	ldr	r2, [pc, #280]	; (8008860 <ProcessRadioRxDone+0x304>)
 8008748:	f992 2420 	ldrsb.w	r2, [r2, #1056]	; 0x420
 800874c:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8008750:	220d      	movs	r2, #13
 8008752:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8008756:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800875a:	b113      	cbz	r3, 8008762 <ProcessRadioRxDone+0x206>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800875c:	230e      	movs	r3, #14
 800875e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008762:	a91e      	add	r1, sp, #120	; 0x78
 8008764:	4b3d      	ldr	r3, [pc, #244]	; (800885c <ProcessRadioRxDone+0x300>)
 8008766:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800876a:	f003 faca 	bl	800bd02 <RegionGetPhyParam>
 800876e:	901d      	str	r0, [sp, #116]	; 0x74
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8008770:	f1a5 030d 	sub.w	r3, r5, #13
 8008774:	b21b      	sxth	r3, r3
 8008776:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800877a:	b200      	sxth	r0, r0
 800877c:	4283      	cmp	r3, r0
 800877e:	dc01      	bgt.n	8008784 <ProcessRadioRxDone+0x228>
 8008780:	2d0b      	cmp	r5, #11
 8008782:	d806      	bhi.n	8008792 <ProcessRadioRxDone+0x236>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008784:	4b36      	ldr	r3, [pc, #216]	; (8008860 <ProcessRadioRxDone+0x304>)
 8008786:	2201      	movs	r2, #1
 8008788:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800878c:	f7ff fb9e 	bl	8007ecc <PrepareRxDoneAbort>
                return;
 8008790:	e1bc      	b.n	8008b0c <ProcessRadioRxDone+0x5b0>
            macMsgData.Buffer = payload;
 8008792:	9611      	str	r6, [sp, #68]	; 0x44
            macMsgData.BufSize = size;
 8008794:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8008798:	4b33      	ldr	r3, [pc, #204]	; (8008868 <ProcessRadioRxDone+0x30c>)
 800879a:	931a      	str	r3, [sp, #104]	; 0x68
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800879c:	23ff      	movs	r3, #255	; 0xff
 800879e:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 80087a2:	a811      	add	r0, sp, #68	; 0x44
 80087a4:	f003 f998 	bl	800bad8 <LoRaMacParserData>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	d146      	bne.n	800883a <ProcessRadioRxDone+0x2de>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 80087ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80087ae:	4b2c      	ldr	r3, [pc, #176]	; (8008860 <ProcessRadioRxDone+0x304>)
 80087b0:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 80087b4:	f10d 0116 	add.w	r1, sp, #22
 80087b8:	a811      	add	r0, sp, #68	; 0x44
 80087ba:	f7ff f9e1 	bl	8007b80 <DetermineFrameType>
 80087be:	4605      	mov	r5, r0
 80087c0:	2800      	cmp	r0, #0
 80087c2:	d141      	bne.n	8008848 <ProcessRadioRxDone+0x2ec>
            downLinkCounter = 0;
 80087c4:	2300      	movs	r3, #0
 80087c6:	9306      	str	r3, [sp, #24]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d04e      	beq.n	800886c <ProcessRadioRxDone+0x310>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 80087ce:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 80087d0:	2d01      	cmp	r5, #1
 80087d2:	d108      	bne.n	80087e6 <ProcessRadioRxDone+0x28a>
 80087d4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80087d8:	2b03      	cmp	r3, #3
 80087da:	d174      	bne.n	80088c6 <ProcessRadioRxDone+0x36a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 80087dc:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80087e0:	f013 0f60 	tst.w	r3, #96	; 0x60
 80087e4:	d16f      	bne.n	80088c6 <ProcessRadioRxDone+0x36a>
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 80087e6:	2315      	movs	r3, #21
 80087e8:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80087ec:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800885c <ProcessRadioRxDone+0x300>
 80087f0:	a91e      	add	r1, sp, #120	; 0x78
 80087f2:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
 80087f6:	f003 fa84 	bl	800bd02 <RegionGetPhyParam>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 80087fa:	ab06      	add	r3, sp, #24
 80087fc:	9302      	str	r3, [sp, #8]
 80087fe:	f10d 0317 	add.w	r3, sp, #23
 8008802:	9301      	str	r3, [sp, #4]
 8008804:	b280      	uxth	r0, r0
 8008806:	9000      	str	r0, [sp, #0]
 8008808:	f8d9 310c 	ldr.w	r3, [r9, #268]	; 0x10c
 800880c:	aa11      	add	r2, sp, #68	; 0x44
 800880e:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8008812:	4630      	mov	r0, r6
 8008814:	f7ff fb94 	bl	8007f40 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008818:	2800      	cmp	r0, #0
 800881a:	d075      	beq.n	8008908 <ProcessRadioRxDone+0x3ac>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800881c:	2807      	cmp	r0, #7
 800881e:	d059      	beq.n	80088d4 <ProcessRadioRxDone+0x378>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8008820:	2808      	cmp	r0, #8
 8008822:	d06c      	beq.n	80088fe <ProcessRadioRxDone+0x3a2>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008824:	4b0e      	ldr	r3, [pc, #56]	; (8008860 <ProcessRadioRxDone+0x304>)
 8008826:	2201      	movs	r2, #1
 8008828:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800882c:	4b0c      	ldr	r3, [pc, #48]	; (8008860 <ProcessRadioRxDone+0x304>)
 800882e:	9a06      	ldr	r2, [sp, #24]
 8008830:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 8008834:	f7ff fb4a 	bl	8007ecc <PrepareRxDoneAbort>
                return;
 8008838:	e168      	b.n	8008b0c <ProcessRadioRxDone+0x5b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800883a:	4b09      	ldr	r3, [pc, #36]	; (8008860 <ProcessRadioRxDone+0x304>)
 800883c:	2201      	movs	r2, #1
 800883e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8008842:	f7ff fb43 	bl	8007ecc <PrepareRxDoneAbort>
                return;
 8008846:	e161      	b.n	8008b0c <ProcessRadioRxDone+0x5b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008848:	4b05      	ldr	r3, [pc, #20]	; (8008860 <ProcessRadioRxDone+0x304>)
 800884a:	2201      	movs	r2, #1
 800884c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8008850:	f7ff fb3c 	bl	8007ecc <PrepareRxDoneAbort>
                return;
 8008854:	e15a      	b.n	8008b0c <ProcessRadioRxDone+0x5b0>
 8008856:	bf00      	nop
 8008858:	200024f4 	.word	0x200024f4
 800885c:	20000bd8 	.word	0x20000bd8
 8008860:	200006d0 	.word	0x200006d0
 8008864:	08018318 	.word	0x08018318
 8008868:	20000908 	.word	0x20000908
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800886c:	4618      	mov	r0, r3
 800886e:	49ab      	ldr	r1, [pc, #684]	; (8008b1c <ProcessRadioRxDone+0x5c0>)
 8008870:	222c      	movs	r2, #44	; 0x2c
 8008872:	fb02 1203 	mla	r2, r2, r3, r1
 8008876:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 800887a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800887c:	428a      	cmp	r2, r1
 800887e:	d002      	beq.n	8008886 <ProcessRadioRxDone+0x32a>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008880:	3301      	adds	r3, #1
 8008882:	b2db      	uxtb	r3, r3
 8008884:	e7a1      	b.n	80087ca <ProcessRadioRxDone+0x26e>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8008886:	4ea5      	ldr	r6, [pc, #660]	; (8008b1c <ProcessRadioRxDone+0x5c0>)
 8008888:	212c      	movs	r1, #44	; 0x2c
 800888a:	fb01 6103 	mla	r1, r1, r3, r6
 800888e:	f891 10d2 	ldrb.w	r1, [r1, #210]	; 0xd2
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008892:	2900      	cmp	r1, #0
 8008894:	d0f4      	beq.n	8008880 <ProcessRadioRxDone+0x324>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8008896:	4633      	mov	r3, r6
 8008898:	212c      	movs	r1, #44	; 0x2c
 800889a:	fb01 6000 	mla	r0, r1, r0, r6
 800889e:	f890 60d3 	ldrb.w	r6, [r0, #211]	; 0xd3
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 80088a2:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
 80088a6:	6809      	ldr	r1, [r1, #0]
 80088a8:	9106      	str	r1, [sp, #24]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80088aa:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d002      	beq.n	80088b8 <ProcessRadioRxDone+0x35c>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 80088b2:	4690      	mov	r8, r2
                    multicast = 1;
 80088b4:	2501      	movs	r5, #1
 80088b6:	e78b      	b.n	80087d0 <ProcessRadioRxDone+0x274>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80088b8:	4b99      	ldr	r3, [pc, #612]	; (8008b20 <ProcessRadioRxDone+0x5c4>)
 80088ba:	2103      	movs	r1, #3
 80088bc:	f883 147f 	strb.w	r1, [r3, #1151]	; 0x47f
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 80088c0:	4690      	mov	r8, r2
                    multicast = 1;
 80088c2:	2501      	movs	r5, #1
 80088c4:	e784      	b.n	80087d0 <ProcessRadioRxDone+0x274>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80088c6:	4b96      	ldr	r3, [pc, #600]	; (8008b20 <ProcessRadioRxDone+0x5c4>)
 80088c8:	2201      	movs	r2, #1
 80088ca:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 80088ce:	f7ff fafd 	bl	8007ecc <PrepareRxDoneAbort>
                return;
 80088d2:	e11b      	b.n	8008b0c <ProcessRadioRxDone+0x5b0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 80088d4:	4b92      	ldr	r3, [pc, #584]	; (8008b20 <ProcessRadioRxDone+0x5c4>)
 80088d6:	2208      	movs	r2, #8
 80088d8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 80088dc:	f899 310e 	ldrb.w	r3, [r9, #270]	; 0x10e
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1a3      	bne.n	800882c <ProcessRadioRxDone+0x2d0>
 80088e4:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 80088e8:	2ca0      	cmp	r4, #160	; 0xa0
 80088ea:	d19f      	bne.n	800882c <ProcessRadioRxDone+0x2d0>
 80088ec:	f8d9 2034 	ldr.w	r2, [r9, #52]	; 0x34
 80088f0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d19a      	bne.n	800882c <ProcessRadioRxDone+0x2d0>
                        Nvm.MacGroup1.SrvAckRequested = true;
 80088f6:	2201      	movs	r2, #1
 80088f8:	f889 203a 	strb.w	r2, [r9, #58]	; 0x3a
 80088fc:	e796      	b.n	800882c <ProcessRadioRxDone+0x2d0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 80088fe:	4b88      	ldr	r3, [pc, #544]	; (8008b20 <ProcessRadioRxDone+0x5c4>)
 8008900:	220a      	movs	r2, #10
 8008902:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8008906:	e791      	b.n	800882c <ProcessRadioRxDone+0x2d0>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8008908:	ab11      	add	r3, sp, #68	; 0x44
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	9b06      	ldr	r3, [sp, #24]
 800890e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8008912:	4641      	mov	r1, r8
 8008914:	4630      	mov	r0, r6
 8008916:	f002 ff6f 	bl	800b7f8 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800891a:	2800      	cmp	r0, #0
 800891c:	d13a      	bne.n	8008994 <ProcessRadioRxDone+0x438>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800891e:	4b80      	ldr	r3, [pc, #512]	; (8008b20 <ProcessRadioRxDone+0x5c4>)
 8008920:	2100      	movs	r1, #0
 8008922:	f883 141d 	strb.w	r1, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 8008926:	f883 541e 	strb.w	r5, [r3, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800892a:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800892e:	f3c2 1000 	ubfx	r0, r2, #4, #1
 8008932:	f883 0421 	strb.w	r0, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 8008936:	f8c3 1424 	str.w	r1, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800893a:	f883 1428 	strb.w	r1, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800893e:	9806      	ldr	r0, [sp, #24]
 8008940:	f8c3 042c 	str.w	r0, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008944:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8008948:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800894c:	f883 1439 	strb.w	r1, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008950:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8008954:	f893 047f 	ldrb.w	r0, [r3, #1151]	; 0x47f
 8008958:	2801      	cmp	r0, #1
 800895a:	d929      	bls.n	80089b0 <ProcessRadioRxDone+0x454>
            if( multicast == 1 )
 800895c:	2d01      	cmp	r5, #1
 800895e:	d02a      	beq.n	80089b6 <ProcessRadioRxDone+0x45a>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8008960:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8008964:	2ca0      	cmp	r4, #160	; 0xa0
 8008966:	d02b      	beq.n	80089c0 <ProcessRadioRxDone+0x464>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8008968:	2300      	movs	r3, #0
 800896a:	4a6c      	ldr	r2, [pc, #432]	; (8008b1c <ProcessRadioRxDone+0x5c0>)
 800896c:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008970:	4a6b      	ldr	r2, [pc, #428]	; (8008b20 <ProcessRadioRxDone+0x5c4>)
 8008972:	f882 341c 	strb.w	r3, [r2, #1052]	; 0x41c
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8008976:	4b6a      	ldr	r3, [pc, #424]	; (8008b20 <ProcessRadioRxDone+0x5c4>)
 8008978:	f893 2438 	ldrb.w	r2, [r3, #1080]	; 0x438
 800897c:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8008980:	f7ff fb0a 	bl	8007f98 <RemoveMacCommands>
            switch( fType )
 8008984:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8008988:	2b03      	cmp	r3, #3
 800898a:	d87d      	bhi.n	8008a88 <ProcessRadioRxDone+0x52c>
 800898c:	e8df f003 	tbb	[pc, r3]
 8008990:	6c5c4a27 	.word	0x6c5c4a27
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8008994:	2802      	cmp	r0, #2
 8008996:	d006      	beq.n	80089a6 <ProcessRadioRxDone+0x44a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8008998:	4b61      	ldr	r3, [pc, #388]	; (8008b20 <ProcessRadioRxDone+0x5c4>)
 800899a:	220c      	movs	r2, #12
 800899c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 80089a0:	f7ff fa94 	bl	8007ecc <PrepareRxDoneAbort>
                return;
 80089a4:	e0b2      	b.n	8008b0c <ProcessRadioRxDone+0x5b0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 80089a6:	4b5e      	ldr	r3, [pc, #376]	; (8008b20 <ProcessRadioRxDone+0x5c4>)
 80089a8:	220b      	movs	r2, #11
 80089aa:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 80089ae:	e7f7      	b.n	80089a0 <ProcessRadioRxDone+0x444>
                Nvm.MacGroup1.AdrAckCounter = 0;
 80089b0:	4b5a      	ldr	r3, [pc, #360]	; (8008b1c <ProcessRadioRxDone+0x5c0>)
 80089b2:	6299      	str	r1, [r3, #40]	; 0x28
 80089b4:	e7d2      	b.n	800895c <ProcessRadioRxDone+0x400>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 80089b6:	4b5a      	ldr	r3, [pc, #360]	; (8008b20 <ProcessRadioRxDone+0x5c4>)
 80089b8:	2202      	movs	r2, #2
 80089ba:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 80089be:	e7da      	b.n	8008976 <ProcessRadioRxDone+0x41a>
                    Nvm.MacGroup1.SrvAckRequested = true;
 80089c0:	4b56      	ldr	r3, [pc, #344]	; (8008b1c <ProcessRadioRxDone+0x5c0>)
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 80089c8:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 80089cc:	b913      	cbnz	r3, 80089d4 <ProcessRadioRxDone+0x478>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 80089ce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80089d0:	4b52      	ldr	r3, [pc, #328]	; (8008b1c <ProcessRadioRxDone+0x5c0>)
 80089d2:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80089d4:	4b52      	ldr	r3, [pc, #328]	; (8008b20 <ProcessRadioRxDone+0x5c4>)
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 80089dc:	e7cb      	b.n	8008976 <ProcessRadioRxDone+0x41a>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80089de:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80089e2:	4c4f      	ldr	r4, [pc, #316]	; (8008b20 <ProcessRadioRxDone+0x5c4>)
 80089e4:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	463b      	mov	r3, r7
 80089ec:	f002 020f 	and.w	r2, r2, #15
 80089f0:	2100      	movs	r1, #0
 80089f2:	a815      	add	r0, sp, #84	; 0x54
 80089f4:	f7ff fae0 	bl	8007fb8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80089f8:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80089fc:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8008a00:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008a02:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8008a06:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8008a0a:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008a14:	4a42      	ldr	r2, [pc, #264]	; (8008b20 <ProcessRadioRxDone+0x5c4>)
 8008a16:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008a1a:	f043 0302 	orr.w	r3, r3, #2
 8008a1e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8008a22:	e052      	b.n	8008aca <ProcessRadioRxDone+0x56e>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8008a24:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8008a28:	4c3d      	ldr	r4, [pc, #244]	; (8008b20 <ProcessRadioRxDone+0x5c4>)
 8008a2a:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	463b      	mov	r3, r7
 8008a32:	f002 020f 	and.w	r2, r2, #15
 8008a36:	2100      	movs	r1, #0
 8008a38:	a815      	add	r0, sp, #84	; 0x54
 8008a3a:	f7ff fabd 	bl	8007fb8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008a3e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8008a42:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    break;
 8008a46:	e7e5      	b.n	8008a14 <ProcessRadioRxDone+0x4b8>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8008a48:	4c35      	ldr	r4, [pc, #212]	; (8008b20 <ProcessRadioRxDone+0x5c4>)
 8008a4a:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8008a4e:	9300      	str	r3, [sp, #0]
 8008a50:	463b      	mov	r3, r7
 8008a52:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8008a56:	2100      	movs	r1, #0
 8008a58:	981a      	ldr	r0, [sp, #104]	; 0x68
 8008a5a:	f7ff faad 	bl	8007fb8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008a5e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8008a62:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    break;
 8008a66:	e7d5      	b.n	8008a14 <ProcessRadioRxDone+0x4b8>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008a68:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8008a6c:	4b2c      	ldr	r3, [pc, #176]	; (8008b20 <ProcessRadioRxDone+0x5c4>)
 8008a6e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8008a72:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008a74:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8008a78:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8008a7c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8008a80:	2201      	movs	r2, #1
 8008a82:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 8008a86:	e7c5      	b.n	8008a14 <ProcessRadioRxDone+0x4b8>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008a88:	4b25      	ldr	r3, [pc, #148]	; (8008b20 <ProcessRadioRxDone+0x5c4>)
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 8008a90:	f7ff fa1c 	bl	8007ecc <PrepareRxDoneAbort>
                    break;
 8008a94:	e7be      	b.n	8008a14 <ProcessRadioRxDone+0x4b8>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8008a96:	1e6a      	subs	r2, r5, #1
 8008a98:	4c21      	ldr	r4, [pc, #132]	; (8008b20 <ProcessRadioRxDone+0x5c4>)
 8008a9a:	f504 770e 	add.w	r7, r4, #568	; 0x238
 8008a9e:	b292      	uxth	r2, r2
 8008aa0:	1c71      	adds	r1, r6, #1
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	f00b fcef 	bl	8014486 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	f884 341d 	strb.w	r3, [r4, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8008ab4:	f8c4 7424 	str.w	r7, [r4, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8008ab8:	3d01      	subs	r5, #1
 8008aba:	f884 5428 	strb.w	r5, [r4, #1064]	; 0x428
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008abe:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 8008ac2:	f043 0302 	orr.w	r3, r3, #2
 8008ac6:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
    if( MacCtx.NodeAckRequested == true )
 8008aca:	4b15      	ldr	r3, [pc, #84]	; (8008b20 <ProcessRadioRxDone+0x5c4>)
 8008acc:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8008ad0:	b173      	cbz	r3, 8008af0 <ProcessRadioRxDone+0x594>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8008ad2:	4b13      	ldr	r3, [pc, #76]	; (8008b20 <ProcessRadioRxDone+0x5c4>)
 8008ad4:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8008ad8:	b17b      	cbz	r3, 8008afa <ProcessRadioRxDone+0x59e>
            OnAckTimeoutTimerEvent( NULL );
 8008ada:	2000      	movs	r0, #0
 8008adc:	f7ff f9d0 	bl	8007e80 <OnAckTimeoutTimerEvent>
 8008ae0:	e00b      	b.n	8008afa <ProcessRadioRxDone+0x59e>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008ae2:	4b0f      	ldr	r3, [pc, #60]	; (8008b20 <ProcessRadioRxDone+0x5c4>)
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 8008aea:	f7ff f9ef 	bl	8007ecc <PrepareRxDoneAbort>
            break;
 8008aee:	e7ec      	b.n	8008aca <ProcessRadioRxDone+0x56e>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8008af0:	4b0a      	ldr	r3, [pc, #40]	; (8008b1c <ProcessRadioRxDone+0x5c0>)
 8008af2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d00b      	beq.n	8008b12 <ProcessRadioRxDone+0x5b6>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008afa:	4a09      	ldr	r2, [pc, #36]	; (8008b20 <ProcessRadioRxDone+0x5c4>)
 8008afc:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008b00:	f043 0320 	orr.w	r3, r3, #32
 8008b04:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 8008b08:	f7fe ff92 	bl	8007a30 <UpdateRxSlotIdleState>
}
 8008b0c:	b023      	add	sp, #140	; 0x8c
 8008b0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            OnAckTimeoutTimerEvent( NULL );
 8008b12:	2000      	movs	r0, #0
 8008b14:	f7ff f9b4 	bl	8007e80 <OnAckTimeoutTimerEvent>
 8008b18:	e7ef      	b.n	8008afa <ProcessRadioRxDone+0x59e>
 8008b1a:	bf00      	nop
 8008b1c:	20000bd8 	.word	0x20000bd8
 8008b20:	200006d0 	.word	0x200006d0

08008b24 <ProcessRadioTxTimeout>:
{
 8008b24:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008b26:	4b0f      	ldr	r3, [pc, #60]	; (8008b64 <ProcessRadioTxTimeout+0x40>)
 8008b28:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	d002      	beq.n	8008b36 <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 8008b30:	4b0d      	ldr	r3, [pc, #52]	; (8008b68 <ProcessRadioTxTimeout+0x44>)
 8008b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b34:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8008b36:	f7fe ff7b 	bl	8007a30 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8008b3a:	4c0c      	ldr	r4, [pc, #48]	; (8008b6c <ProcessRadioTxTimeout+0x48>)
 8008b3c:	2002      	movs	r0, #2
 8008b3e:	f884 0439 	strb.w	r0, [r4, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8008b42:	f002 fb51 	bl	800b1e8 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8008b46:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8008b4a:	b113      	cbz	r3, 8008b52 <ProcessRadioTxTimeout+0x2e>
        MacCtx.AckTimeoutRetry = true;
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	f884 2413 	strb.w	r2, [r4, #1043]	; 0x413
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008b52:	4a06      	ldr	r2, [pc, #24]	; (8008b6c <ProcessRadioTxTimeout+0x48>)
 8008b54:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008b58:	f043 0320 	orr.w	r3, r3, #32
 8008b5c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 8008b60:	bd10      	pop	{r4, pc}
 8008b62:	bf00      	nop
 8008b64:	20000bd8 	.word	0x20000bd8
 8008b68:	08018318 	.word	0x08018318
 8008b6c:	200006d0 	.word	0x200006d0

08008b70 <CheckForClassBCollision>:
{
 8008b70:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008b72:	f002 f8e7 	bl	800ad44 <LoRaMacClassBIsBeaconExpected>
 8008b76:	b978      	cbnz	r0, 8008b98 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008b78:	4b09      	ldr	r3, [pc, #36]	; (8008ba0 <CheckForClassBCollision+0x30>)
 8008b7a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d001      	beq.n	8008b86 <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 8008b82:	2000      	movs	r0, #0
}
 8008b84:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008b86:	f002 f8df 	bl	800ad48 <LoRaMacClassBIsPingExpected>
 8008b8a:	b938      	cbnz	r0, 8008b9c <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008b8c:	f002 f8de 	bl	800ad4c <LoRaMacClassBIsMulticastExpected>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	d0f7      	beq.n	8008b84 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8008b94:	200f      	movs	r0, #15
 8008b96:	e7f5      	b.n	8008b84 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8008b98:	200e      	movs	r0, #14
 8008b9a:	e7f3      	b.n	8008b84 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8008b9c:	200f      	movs	r0, #15
 8008b9e:	e7f1      	b.n	8008b84 <CheckForClassBCollision+0x14>
 8008ba0:	20000bd8 	.word	0x20000bd8

08008ba4 <HandleRadioRxErrorTimeout>:
{
 8008ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba6:	4605      	mov	r5, r0
 8008ba8:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008baa:	4b37      	ldr	r3, [pc, #220]	; (8008c88 <HandleRadioRxErrorTimeout+0xe4>)
 8008bac:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d002      	beq.n	8008bba <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 8008bb4:	4b35      	ldr	r3, [pc, #212]	; (8008c8c <HandleRadioRxErrorTimeout+0xe8>)
 8008bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb8:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008bba:	f002 f8c3 	bl	800ad44 <LoRaMacClassBIsBeaconExpected>
 8008bbe:	4606      	mov	r6, r0
 8008bc0:	bb00      	cbnz	r0, 8008c04 <HandleRadioRxErrorTimeout+0x60>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008bc2:	4b31      	ldr	r3, [pc, #196]	; (8008c88 <HandleRadioRxErrorTimeout+0xe4>)
 8008bc4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d022      	beq.n	8008c12 <HandleRadioRxErrorTimeout+0x6e>
    if( classBRx == false )
 8008bcc:	b9be      	cbnz	r6, 8008bfe <HandleRadioRxErrorTimeout+0x5a>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008bce:	4b30      	ldr	r3, [pc, #192]	; (8008c90 <HandleRadioRxErrorTimeout+0xec>)
 8008bd0:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d13f      	bne.n	8008c58 <HandleRadioRxErrorTimeout+0xb4>
            if( MacCtx.NodeAckRequested == true )
 8008bd8:	4b2d      	ldr	r3, [pc, #180]	; (8008c90 <HandleRadioRxErrorTimeout+0xec>)
 8008bda:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8008bde:	b113      	cbz	r3, 8008be6 <HandleRadioRxErrorTimeout+0x42>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8008be0:	4b2b      	ldr	r3, [pc, #172]	; (8008c90 <HandleRadioRxErrorTimeout+0xec>)
 8008be2:	f883 5439 	strb.w	r5, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8008be6:	4628      	mov	r0, r5
 8008be8:	f002 fafe 	bl	800b1e8 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8008bec:	4b26      	ldr	r3, [pc, #152]	; (8008c88 <HandleRadioRxErrorTimeout+0xe4>)
 8008bee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008bf0:	f00e f8d6 	bl	8016da0 <UTIL_TIMER_GetElapsedTime>
 8008bf4:	4b26      	ldr	r3, [pc, #152]	; (8008c90 <HandleRadioRxErrorTimeout+0xec>)
 8008bf6:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8008bfa:	4298      	cmp	r0, r3
 8008bfc:	d220      	bcs.n	8008c40 <HandleRadioRxErrorTimeout+0x9c>
    UpdateRxSlotIdleState( );
 8008bfe:	f7fe ff17 	bl	8007a30 <UpdateRxSlotIdleState>
}
 8008c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8008c04:	2002      	movs	r0, #2
 8008c06:	f002 f893 	bl	800ad30 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8008c0a:	2000      	movs	r0, #0
 8008c0c:	f002 f895 	bl	800ad3a <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8008c10:	e7d7      	b.n	8008bc2 <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008c12:	f002 f899 	bl	800ad48 <LoRaMacClassBIsPingExpected>
 8008c16:	4607      	mov	r7, r0
 8008c18:	b950      	cbnz	r0, 8008c30 <HandleRadioRxErrorTimeout+0x8c>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008c1a:	f002 f897 	bl	800ad4c <LoRaMacClassBIsMulticastExpected>
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	d0d4      	beq.n	8008bcc <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008c22:	2000      	movs	r0, #0
 8008c24:	f002 f886 	bl	800ad34 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008c28:	2000      	movs	r0, #0
 8008c2a:	f002 f888 	bl	800ad3e <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 8008c2e:	e7e6      	b.n	8008bfe <HandleRadioRxErrorTimeout+0x5a>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008c30:	2000      	movs	r0, #0
 8008c32:	f002 f87e 	bl	800ad32 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008c36:	2000      	movs	r0, #0
 8008c38:	f002 f880 	bl	800ad3c <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8008c3c:	463e      	mov	r6, r7
 8008c3e:	e7ec      	b.n	8008c1a <HandleRadioRxErrorTimeout+0x76>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8008c40:	4c13      	ldr	r4, [pc, #76]	; (8008c90 <HandleRadioRxErrorTimeout+0xec>)
 8008c42:	f504 7066 	add.w	r0, r4, #920	; 0x398
 8008c46:	f00e f8e1 	bl	8016e0c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8008c4a:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 8008c4e:	f043 0320 	orr.w	r3, r3, #32
 8008c52:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
 8008c56:	e7d2      	b.n	8008bfe <HandleRadioRxErrorTimeout+0x5a>
            if( MacCtx.NodeAckRequested == true )
 8008c58:	4b0d      	ldr	r3, [pc, #52]	; (8008c90 <HandleRadioRxErrorTimeout+0xec>)
 8008c5a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8008c5e:	b113      	cbz	r3, 8008c66 <HandleRadioRxErrorTimeout+0xc2>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8008c60:	4b0b      	ldr	r3, [pc, #44]	; (8008c90 <HandleRadioRxErrorTimeout+0xec>)
 8008c62:	f883 4439 	strb.w	r4, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8008c66:	4620      	mov	r0, r4
 8008c68:	f002 fabe 	bl	800b1e8 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008c6c:	4b06      	ldr	r3, [pc, #24]	; (8008c88 <HandleRadioRxErrorTimeout+0xe4>)
 8008c6e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d0c3      	beq.n	8008bfe <HandleRadioRxErrorTimeout+0x5a>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8008c76:	4a06      	ldr	r2, [pc, #24]	; (8008c90 <HandleRadioRxErrorTimeout+0xec>)
 8008c78:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008c7c:	f043 0320 	orr.w	r3, r3, #32
 8008c80:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8008c84:	e7bb      	b.n	8008bfe <HandleRadioRxErrorTimeout+0x5a>
 8008c86:	bf00      	nop
 8008c88:	20000bd8 	.word	0x20000bd8
 8008c8c:	08018318 	.word	0x08018318
 8008c90:	200006d0 	.word	0x200006d0

08008c94 <ProcessRadioRxError>:
{
 8008c94:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8008c96:	2106      	movs	r1, #6
 8008c98:	2005      	movs	r0, #5
 8008c9a:	f7ff ff83 	bl	8008ba4 <HandleRadioRxErrorTimeout>
}
 8008c9e:	bd08      	pop	{r3, pc}

08008ca0 <ProcessRadioRxTimeout>:
{
 8008ca0:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8008ca2:	2104      	movs	r1, #4
 8008ca4:	2003      	movs	r0, #3
 8008ca6:	f7ff ff7d 	bl	8008ba4 <HandleRadioRxErrorTimeout>
}
 8008caa:	bd08      	pop	{r3, pc}

08008cac <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cac:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008cb0:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 8008cb2:	4a14      	ldr	r2, [pc, #80]	; (8008d04 <LoRaMacHandleIrqEvents+0x58>)
 8008cb4:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cba:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 8008cbe:	b303      	cbz	r3, 8008d02 <LoRaMacHandleIrqEvents+0x56>
{
 8008cc0:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 8008cc2:	b2dc      	uxtb	r4, r3
 8008cc4:	f013 0f10 	tst.w	r3, #16
 8008cc8:	d10c      	bne.n	8008ce4 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 8008cca:	f014 0f08 	tst.w	r4, #8
 8008cce:	d10c      	bne.n	8008cea <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 8008cd0:	f014 0f04 	tst.w	r4, #4
 8008cd4:	d10c      	bne.n	8008cf0 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 8008cd6:	f014 0f02 	tst.w	r4, #2
 8008cda:	d10c      	bne.n	8008cf6 <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 8008cdc:	f014 0f01 	tst.w	r4, #1
 8008ce0:	d10c      	bne.n	8008cfc <LoRaMacHandleIrqEvents+0x50>
}
 8008ce2:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 8008ce4:	f7ff f84e 	bl	8007d84 <ProcessRadioTxDone>
 8008ce8:	e7ef      	b.n	8008cca <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 8008cea:	f7ff fc37 	bl	800855c <ProcessRadioRxDone>
 8008cee:	e7ef      	b.n	8008cd0 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 8008cf0:	f7ff ff18 	bl	8008b24 <ProcessRadioTxTimeout>
 8008cf4:	e7ef      	b.n	8008cd6 <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 8008cf6:	f7ff ffcd 	bl	8008c94 <ProcessRadioRxError>
 8008cfa:	e7ef      	b.n	8008cdc <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 8008cfc:	f7ff ffd0 	bl	8008ca0 <ProcessRadioRxTimeout>
}
 8008d00:	e7ef      	b.n	8008ce2 <LoRaMacHandleIrqEvents+0x36>
 8008d02:	4770      	bx	lr
 8008d04:	200006cc 	.word	0x200006cc

08008d08 <LoRaMacHandleMlmeRequest>:
{
 8008d08:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008d0a:	4b16      	ldr	r3, [pc, #88]	; (8008d64 <LoRaMacHandleMlmeRequest+0x5c>)
 8008d0c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8008d10:	f013 0f04 	tst.w	r3, #4
 8008d14:	d100      	bne.n	8008d18 <LoRaMacHandleMlmeRequest+0x10>
}
 8008d16:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008d18:	2001      	movs	r0, #1
 8008d1a:	f002 fa83 	bl	800b224 <LoRaMacConfirmQueueIsCmdActive>
 8008d1e:	b178      	cbz	r0, 8008d40 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8008d20:	2001      	movs	r0, #1
 8008d22:	f002 fa49 	bl	800b1b8 <LoRaMacConfirmQueueGetStatus>
 8008d26:	b918      	cbnz	r0, 8008d30 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 8008d28:	4b0e      	ldr	r3, [pc, #56]	; (8008d64 <LoRaMacHandleMlmeRequest+0x5c>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008d30:	4a0c      	ldr	r2, [pc, #48]	; (8008d64 <LoRaMacHandleMlmeRequest+0x5c>)
 8008d32:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8008d36:	f023 0302 	bic.w	r3, r3, #2
 8008d3a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 8008d3e:	e7ea      	b.n	8008d16 <LoRaMacHandleMlmeRequest+0xe>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8008d40:	2005      	movs	r0, #5
 8008d42:	f002 fa6f 	bl	800b224 <LoRaMacConfirmQueueIsCmdActive>
 8008d46:	b138      	cbz	r0, 8008d58 <LoRaMacHandleMlmeRequest+0x50>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008d48:	4a06      	ldr	r2, [pc, #24]	; (8008d64 <LoRaMacHandleMlmeRequest+0x5c>)
 8008d4a:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8008d4e:	f023 0302 	bic.w	r3, r3, #2
 8008d52:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8008d56:	e7de      	b.n	8008d16 <LoRaMacHandleMlmeRequest+0xe>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8008d58:	2006      	movs	r0, #6
 8008d5a:	f002 fa63 	bl	800b224 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d0d9      	beq.n	8008d16 <LoRaMacHandleMlmeRequest+0xe>
 8008d62:	e7f1      	b.n	8008d48 <LoRaMacHandleMlmeRequest+0x40>
 8008d64:	200006d0 	.word	0x200006d0

08008d68 <AckTimeoutRetriesFinalize>:
    if( MacCtx.McpsConfirm.AckReceived == false )
 8008d68:	4b14      	ldr	r3, [pc, #80]	; (8008dbc <AckTimeoutRetriesFinalize+0x54>)
 8008d6a:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8008d6e:	b12b      	cbz	r3, 8008d7c <AckTimeoutRetriesFinalize+0x14>
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8008d70:	4b12      	ldr	r3, [pc, #72]	; (8008dbc <AckTimeoutRetriesFinalize+0x54>)
 8008d72:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8008d76:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 8008d7a:	4770      	bx	lr
{
 8008d7c:	b500      	push	{lr}
 8008d7e:	b085      	sub	sp, #20
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8008d80:	2302      	movs	r3, #2
 8008d82:	f88d 300c 	strb.w	r3, [sp, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8008d86:	4b0e      	ldr	r3, [pc, #56]	; (8008dc0 <AckTimeoutRetriesFinalize+0x58>)
 8008d88:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 8008d8c:	9201      	str	r2, [sp, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8008d8e:	f503 721f 	add.w	r2, r3, #636	; 0x27c
 8008d92:	9202      	str	r2, [sp, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8008d94:	a901      	add	r1, sp, #4
 8008d96:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008d9a:	f003 f820 	bl	800bdde <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 8008d9e:	4b07      	ldr	r3, [pc, #28]	; (8008dbc <AckTimeoutRetriesFinalize+0x54>)
 8008da0:	2200      	movs	r2, #0
 8008da2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 8008da6:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8008daa:	4b04      	ldr	r3, [pc, #16]	; (8008dbc <AckTimeoutRetriesFinalize+0x54>)
 8008dac:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8008db0:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 8008db4:	b005      	add	sp, #20
 8008db6:	f85d fb04 	ldr.w	pc, [sp], #4
 8008dba:	bf00      	nop
 8008dbc:	200006d0 	.word	0x200006d0
 8008dc0:	20000bd8 	.word	0x20000bd8

08008dc4 <SerializeTxFrame>:
{
 8008dc4:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 8008dc6:	4b0f      	ldr	r3, [pc, #60]	; (8008e04 <SerializeTxFrame+0x40>)
 8008dc8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008dcc:	b11b      	cbz	r3, 8008dd6 <SerializeTxFrame+0x12>
 8008dce:	2b04      	cmp	r3, #4
 8008dd0:	d00a      	beq.n	8008de8 <SerializeTxFrame+0x24>
 8008dd2:	2003      	movs	r0, #3
}
 8008dd4:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8008dd6:	480c      	ldr	r0, [pc, #48]	; (8008e08 <SerializeTxFrame+0x44>)
 8008dd8:	f002 fedd 	bl	800bb96 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8008ddc:	b968      	cbnz	r0, 8008dfa <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8008dde:	4b09      	ldr	r3, [pc, #36]	; (8008e04 <SerializeTxFrame+0x40>)
 8008de0:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8008de4:	801a      	strh	r2, [r3, #0]
            break;
 8008de6:	e7f5      	b.n	8008dd4 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8008de8:	4807      	ldr	r0, [pc, #28]	; (8008e08 <SerializeTxFrame+0x44>)
 8008dea:	f002 ff0a 	bl	800bc02 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8008dee:	b930      	cbnz	r0, 8008dfe <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8008df0:	4b04      	ldr	r3, [pc, #16]	; (8008e04 <SerializeTxFrame+0x40>)
 8008df2:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8008df6:	801a      	strh	r2, [r3, #0]
            break;
 8008df8:	e7ec      	b.n	8008dd4 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8008dfa:	2011      	movs	r0, #17
 8008dfc:	e7ea      	b.n	8008dd4 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8008dfe:	2011      	movs	r0, #17
 8008e00:	e7e8      	b.n	8008dd4 <SerializeTxFrame+0x10>
 8008e02:	bf00      	nop
 8008e04:	200006d0 	.word	0x200006d0
 8008e08:	200007d8 	.word	0x200007d8

08008e0c <ComputeRxWindowParameters>:
{
 8008e0c:	b570      	push	{r4, r5, r6, lr}
 8008e0e:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008e10:	4c1d      	ldr	r4, [pc, #116]	; (8008e88 <ComputeRxWindowParameters+0x7c>)
 8008e12:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8008e16:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
 8008e1a:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 8008e1e:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 8008e22:	4630      	mov	r0, r6
 8008e24:	f003 faac 	bl	800c380 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008e28:	4d18      	ldr	r5, [pc, #96]	; (8008e8c <ComputeRxWindowParameters+0x80>)
 8008e2a:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 8008e2e:	9300      	str	r3, [sp, #0]
 8008e30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008e32:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8008e36:	b241      	sxtb	r1, r0
 8008e38:	4630      	mov	r0, r6
 8008e3a:	f003 f886 	bl	800bf4a <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008e3e:	f505 7373 	add.w	r3, r5, #972	; 0x3cc
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008e46:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8008e4a:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 8008e4e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8008e52:	f003 f87a 	bl	800bf4a <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008e56:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008e58:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 8008e5c:	440b      	add	r3, r1
 8008e5e:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008e62:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008e64:	f8d5 23d8 	ldr.w	r2, [r5, #984]	; 0x3d8
 8008e68:	4413      	add	r3, r2
 8008e6a:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008e6e:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 8008e72:	b93b      	cbnz	r3, 8008e84 <ComputeRxWindowParameters+0x78>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008e74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e76:	4419      	add	r1, r3
 8008e78:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008e7c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008e7e:	440a      	add	r2, r1
 8008e80:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 8008e84:	b002      	add	sp, #8
 8008e86:	bd70      	pop	{r4, r5, r6, pc}
 8008e88:	20000bd8 	.word	0x20000bd8
 8008e8c:	200006d0 	.word	0x200006d0

08008e90 <VerifyTxFrame>:
{
 8008e90:	b510      	push	{r4, lr}
 8008e92:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 8008e94:	2300      	movs	r3, #0
 8008e96:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8008e98:	4b0d      	ldr	r3, [pc, #52]	; (8008ed0 <VerifyTxFrame+0x40>)
 8008e9a:	f893 4110 	ldrb.w	r4, [r3, #272]	; 0x110
 8008e9e:	b914      	cbnz	r4, 8008ea6 <VerifyTxFrame+0x16>
}
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	b002      	add	sp, #8
 8008ea4:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8008ea6:	a801      	add	r0, sp, #4
 8008ea8:	f002 f86c 	bl	800af84 <LoRaMacCommandsGetSizeSerializedCmds>
 8008eac:	4604      	mov	r4, r0
 8008eae:	b968      	cbnz	r0, 8008ecc <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8008eb0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008eb4:	4b06      	ldr	r3, [pc, #24]	; (8008ed0 <VerifyTxFrame+0x40>)
 8008eb6:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 8008eba:	4b06      	ldr	r3, [pc, #24]	; (8008ed4 <VerifyTxFrame+0x44>)
 8008ebc:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 8008ec0:	f7fe ff4e 	bl	8007d60 <ValidatePayloadLength>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	d1eb      	bne.n	8008ea0 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8008ec8:	2408      	movs	r4, #8
 8008eca:	e7e9      	b.n	8008ea0 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008ecc:	2413      	movs	r4, #19
 8008ece:	e7e7      	b.n	8008ea0 <VerifyTxFrame+0x10>
 8008ed0:	20000bd8 	.word	0x20000bd8
 8008ed4:	200006d0 	.word	0x200006d0

08008ed8 <SecureFrame>:
{
 8008ed8:	b530      	push	{r4, r5, lr}
 8008eda:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 8008edc:	2300      	movs	r3, #0
 8008ede:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 8008ee0:	4b1a      	ldr	r3, [pc, #104]	; (8008f4c <SecureFrame+0x74>)
 8008ee2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008ee6:	b133      	cbz	r3, 8008ef6 <SecureFrame+0x1e>
 8008ee8:	4605      	mov	r5, r0
 8008eea:	460c      	mov	r4, r1
 8008eec:	2b04      	cmp	r3, #4
 8008eee:	d00b      	beq.n	8008f08 <SecureFrame+0x30>
 8008ef0:	2003      	movs	r0, #3
}
 8008ef2:	b003      	add	sp, #12
 8008ef4:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8008ef6:	4816      	ldr	r0, [pc, #88]	; (8008f50 <SecureFrame+0x78>)
 8008ef8:	f002 fc0e 	bl	800b718 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8008efc:	bb00      	cbnz	r0, 8008f40 <SecureFrame+0x68>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8008efe:	4b13      	ldr	r3, [pc, #76]	; (8008f4c <SecureFrame+0x74>)
 8008f00:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8008f04:	801a      	strh	r2, [r3, #0]
            break;
 8008f06:	e7f4      	b.n	8008ef2 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8008f08:	a801      	add	r0, sp, #4
 8008f0a:	f002 fba1 	bl	800b650 <LoRaMacCryptoGetFCntUp>
 8008f0e:	b9c8      	cbnz	r0, 8008f44 <SecureFrame+0x6c>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8008f10:	4b0e      	ldr	r3, [pc, #56]	; (8008f4c <SecureFrame+0x74>)
 8008f12:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8008f16:	b923      	cbnz	r3, 8008f22 <SecureFrame+0x4a>
 8008f18:	4b0c      	ldr	r3, [pc, #48]	; (8008f4c <SecureFrame+0x74>)
 8008f1a:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d902      	bls.n	8008f28 <SecureFrame+0x50>
                fCntUp -= 1;
 8008f22:	9b01      	ldr	r3, [sp, #4]
 8008f24:	3b01      	subs	r3, #1
 8008f26:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8008f28:	4b09      	ldr	r3, [pc, #36]	; (8008f50 <SecureFrame+0x78>)
 8008f2a:	4622      	mov	r2, r4
 8008f2c:	4629      	mov	r1, r5
 8008f2e:	9801      	ldr	r0, [sp, #4]
 8008f30:	f002 fc1e 	bl	800b770 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8008f34:	b940      	cbnz	r0, 8008f48 <SecureFrame+0x70>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8008f36:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <SecureFrame+0x74>)
 8008f38:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8008f3c:	801a      	strh	r2, [r3, #0]
            break;
 8008f3e:	e7d8      	b.n	8008ef2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8008f40:	2011      	movs	r0, #17
 8008f42:	e7d6      	b.n	8008ef2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8008f44:	2012      	movs	r0, #18
 8008f46:	e7d4      	b.n	8008ef2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8008f48:	2011      	movs	r0, #17
 8008f4a:	e7d2      	b.n	8008ef2 <SecureFrame+0x1a>
 8008f4c:	200006d0 	.word	0x200006d0
 8008f50:	200007d8 	.word	0x200007d8

08008f54 <SendFrameOnChannel>:
{
 8008f54:	b570      	push	{r4, r5, r6, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	4606      	mov	r6, r0
    int8_t txPower = 0;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 8008f60:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008f64:	4d33      	ldr	r5, [pc, #204]	; (8009034 <SendFrameOnChannel+0xe0>)
 8008f66:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 8008f6a:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8008f6e:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 8008f72:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8008f76:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8008f78:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8008f7a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8008f7c:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8008f7e:	4c2e      	ldr	r4, [pc, #184]	; (8009038 <SendFrameOnChannel+0xe4>)
 8008f80:	8823      	ldrh	r3, [r4, #0]
 8008f82:	f8ad 3014 	strh.w	r3, [sp, #20]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8008f86:	f504 6383 	add.w	r3, r4, #1048	; 0x418
 8008f8a:	f10d 0207 	add.w	r2, sp, #7
 8008f8e:	a902      	add	r1, sp, #8
 8008f90:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 8008f94:	f003 f835 	bl	800c002 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	f884 3439 	strb.w	r3, [r4, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008f9e:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 8008fa2:	f884 343a 	strb.w	r3, [r4, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 8008fa6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008faa:	f884 343b 	strb.w	r3, [r4, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 8008fae:	f8c4 6448 	str.w	r6, [r4, #1096]	; 0x448
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008fb2:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
 8008fb6:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008fba:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8008fbe:	f001 fec7 	bl	800ad50 <LoRaMacClassBIsBeaconModeActive>
 8008fc2:	bb58      	cbnz	r0, 800901c <SendFrameOnChannel+0xc8>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008fc4:	4b1b      	ldr	r3, [pc, #108]	; (8009034 <SendFrameOnChannel+0xe0>)
 8008fc6:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d02e      	beq.n	800902c <SendFrameOnChannel+0xd8>
    LoRaMacClassBHaltBeaconing( );
 8008fce:	f001 fec2 	bl	800ad56 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8008fd2:	4b18      	ldr	r3, [pc, #96]	; (8009034 <SendFrameOnChannel+0xe0>)
 8008fd4:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 8008fd8:	4b17      	ldr	r3, [pc, #92]	; (8009038 <SendFrameOnChannel+0xe4>)
 8008fda:	f893 1415 	ldrb.w	r1, [r3, #1045]	; 0x415
 8008fde:	b2c0      	uxtb	r0, r0
 8008fe0:	f7ff ff7a 	bl	8008ed8 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	b9b0      	cbnz	r0, 8009016 <SendFrameOnChannel+0xc2>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008fe8:	4b13      	ldr	r3, [pc, #76]	; (8009038 <SendFrameOnChannel+0xe4>)
 8008fea:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8008fee:	f042 0202 	orr.w	r2, r2, #2
 8008ff2:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 8008ff6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8008ffa:	b92b      	cbnz	r3, 8009008 <SendFrameOnChannel+0xb4>
        MacCtx.ChannelsNbTransCounter++;
 8008ffc:	4a0e      	ldr	r2, [pc, #56]	; (8009038 <SendFrameOnChannel+0xe4>)
 8008ffe:	f892 3410 	ldrb.w	r3, [r2, #1040]	; 0x410
 8009002:	3301      	adds	r3, #1
 8009004:	f882 3410 	strb.w	r3, [r2, #1040]	; 0x410
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8009008:	4b0c      	ldr	r3, [pc, #48]	; (800903c <SendFrameOnChannel+0xe8>)
 800900a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800900c:	480a      	ldr	r0, [pc, #40]	; (8009038 <SendFrameOnChannel+0xe4>)
 800900e:	f830 1b02 	ldrh.w	r1, [r0], #2
 8009012:	b2c9      	uxtb	r1, r1
 8009014:	4798      	blx	r3
}
 8009016:	4620      	mov	r0, r4
 8009018:	b006      	add	sp, #24
 800901a:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800901c:	f8d4 0418 	ldr.w	r0, [r4, #1048]	; 0x418
 8009020:	f001 fea8 	bl	800ad74 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 8009024:	2800      	cmp	r0, #0
 8009026:	d0cd      	beq.n	8008fc4 <SendFrameOnChannel+0x70>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8009028:	2410      	movs	r4, #16
 800902a:	e7f4      	b.n	8009016 <SendFrameOnChannel+0xc2>
        LoRaMacClassBStopRxSlots( );
 800902c:	f001 fea4 	bl	800ad78 <LoRaMacClassBStopRxSlots>
 8009030:	e7cd      	b.n	8008fce <SendFrameOnChannel+0x7a>
 8009032:	bf00      	nop
 8009034:	20000bd8 	.word	0x20000bd8
 8009038:	200006d0 	.word	0x200006d0
 800903c:	08018318 	.word	0x08018318

08009040 <ScheduleTx>:
{
 8009040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009044:	b08c      	sub	sp, #48	; 0x30
 8009046:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 8009048:	f7ff fd92 	bl	8008b70 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 800904c:	4604      	mov	r4, r0
 800904e:	b118      	cbz	r0, 8009058 <ScheduleTx+0x18>
}
 8009050:	4620      	mov	r0, r4
 8009052:	b00c      	add	sp, #48	; 0x30
 8009054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 8009058:	f7fe fd66 	bl	8007b28 <CalculateBackOff>
    status = SerializeTxFrame( );
 800905c:	f7ff feb2 	bl	8008dc4 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 8009060:	4604      	mov	r4, r0
 8009062:	2800      	cmp	r0, #0
 8009064:	d1f4      	bne.n	8009050 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8009066:	4e36      	ldr	r6, [pc, #216]	; (8009140 <ScheduleTx+0x100>)
 8009068:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800906a:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800906c:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 8009070:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8009074:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
 8009078:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800907c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8009080:	4640      	mov	r0, r8
 8009082:	f00d fdf9 	bl	8016c78 <SysTimeGetMcuTime>
 8009086:	af02      	add	r7, sp, #8
 8009088:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 800908c:	9300      	str	r3, [sp, #0]
 800908e:	f8d6 3104 	ldr.w	r3, [r6, #260]	; 0x104
 8009092:	e898 0006 	ldmia.w	r8, {r1, r2}
 8009096:	4638      	mov	r0, r7
 8009098:	f00d fd8f 	bl	8016bba <SysTimeSub>
 800909c:	ab07      	add	r3, sp, #28
 800909e:	e897 0003 	ldmia.w	r7, {r0, r1}
 80090a2:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80090a6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80090a8:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 80090aa:	2300      	movs	r3, #0
 80090ac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 80090b0:	2301      	movs	r3, #1
 80090b2:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80090b6:	4b23      	ldr	r3, [pc, #140]	; (8009144 <ScheduleTx+0x104>)
 80090b8:	881b      	ldrh	r3, [r3, #0]
 80090ba:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80090be:	f896 3110 	ldrb.w	r3, [r6, #272]	; 0x110
 80090c2:	b92b      	cbnz	r3, 80090d0 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 80090c4:	2301      	movs	r3, #1
 80090c6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 80090ca:	2300      	movs	r3, #0
 80090cc:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80090d0:	4a1c      	ldr	r2, [pc, #112]	; (8009144 <ScheduleTx+0x104>)
 80090d2:	481b      	ldr	r0, [pc, #108]	; (8009140 <ScheduleTx+0x100>)
 80090d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	f202 4384 	addw	r3, r2, #1156	; 0x484
 80090de:	f202 4215 	addw	r2, r2, #1045	; 0x415
 80090e2:	a904      	add	r1, sp, #16
 80090e4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80090e8:	f003 f8e8 	bl	800c2bc <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 80090ec:	b1b0      	cbz	r0, 800911c <ScheduleTx+0xdc>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 80090ee:	280b      	cmp	r0, #11
 80090f0:	d122      	bne.n	8009138 <ScheduleTx+0xf8>
 80090f2:	b31d      	cbz	r5, 800913c <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 80090f4:	4b13      	ldr	r3, [pc, #76]	; (8009144 <ScheduleTx+0x104>)
 80090f6:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
 80090fa:	2900      	cmp	r1, #0
 80090fc:	d0a8      	beq.n	8009050 <ScheduleTx+0x10>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80090fe:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8009102:	f042 0220 	orr.w	r2, r2, #32
 8009106:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800910a:	f503 755a 	add.w	r5, r3, #872	; 0x368
 800910e:	4628      	mov	r0, r5
 8009110:	f00d ff24 	bl	8016f5c <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8009114:	4628      	mov	r0, r5
 8009116:	f00d fedb 	bl	8016ed0 <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 800911a:	e799      	b.n	8009050 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800911c:	f7ff fe76 	bl	8008e0c <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 8009120:	f7ff feb6 	bl	8008e90 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 8009124:	4604      	mov	r4, r0
 8009126:	2800      	cmp	r0, #0
 8009128:	d192      	bne.n	8009050 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800912a:	4b06      	ldr	r3, [pc, #24]	; (8009144 <ScheduleTx+0x104>)
 800912c:	f893 0415 	ldrb.w	r0, [r3, #1045]	; 0x415
 8009130:	f7ff ff10 	bl	8008f54 <SendFrameOnChannel>
 8009134:	4604      	mov	r4, r0
 8009136:	e78b      	b.n	8009050 <ScheduleTx+0x10>
            return status;
 8009138:	4604      	mov	r4, r0
 800913a:	e789      	b.n	8009050 <ScheduleTx+0x10>
 800913c:	4604      	mov	r4, r0
 800913e:	e787      	b.n	8009050 <ScheduleTx+0x10>
 8009140:	20000bd8 	.word	0x20000bd8
 8009144:	200006d0 	.word	0x200006d0

08009148 <OnTxDelayedTimerEvent>:
{
 8009148:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800914a:	4c11      	ldr	r4, [pc, #68]	; (8009190 <OnTxDelayedTimerEvent+0x48>)
 800914c:	f504 705a 	add.w	r0, r4, #872	; 0x368
 8009150:	f00d fe5c 	bl	8016e0c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009154:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8009158:	f023 0320 	bic.w	r3, r3, #32
 800915c:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    switch( ScheduleTx( true ) )
 8009160:	2001      	movs	r0, #1
 8009162:	f7ff ff6d 	bl	8009040 <ScheduleTx>
 8009166:	b108      	cbz	r0, 800916c <OnTxDelayedTimerEvent+0x24>
 8009168:	280b      	cmp	r0, #11
 800916a:	d100      	bne.n	800916e <OnTxDelayedTimerEvent+0x26>
}
 800916c:	bd10      	pop	{r4, pc}
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800916e:	4b09      	ldr	r3, [pc, #36]	; (8009194 <OnTxDelayedTimerEvent+0x4c>)
 8009170:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8009174:	f884 243a 	strb.w	r2, [r4, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8009178:	f894 2412 	ldrb.w	r2, [r4, #1042]	; 0x412
 800917c:	f884 243d 	strb.w	r2, [r4, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8009180:	2009      	movs	r0, #9
 8009182:	f884 0439 	strb.w	r0, [r4, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8009186:	f002 f82f 	bl	800b1e8 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800918a:	f7fe fd5f 	bl	8007c4c <StopRetransmission>
}
 800918e:	e7ed      	b.n	800916c <OnTxDelayedTimerEvent+0x24>
 8009190:	200006d0 	.word	0x200006d0
 8009194:	20000bd8 	.word	0x20000bd8

08009198 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009198:	4b23      	ldr	r3, [pc, #140]	; (8009228 <LoRaMacHandleMcpsRequest+0x90>)
 800919a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800919e:	f013 0f01 	tst.w	r3, #1
 80091a2:	d040      	beq.n	8009226 <LoRaMacHandleMcpsRequest+0x8e>
{
 80091a4:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80091a6:	4b20      	ldr	r3, [pc, #128]	; (8009228 <LoRaMacHandleMcpsRequest+0x90>)
 80091a8:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 80091ac:	b12b      	cbz	r3, 80091ba <LoRaMacHandleMcpsRequest+0x22>
 80091ae:	2b03      	cmp	r3, #3
 80091b0:	d003      	beq.n	80091ba <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d007      	beq.n	80091c6 <LoRaMacHandleMcpsRequest+0x2e>
        bool waitForRetransmission = false;
 80091b6:	2400      	movs	r4, #0
 80091b8:	e003      	b.n	80091c2 <LoRaMacHandleMcpsRequest+0x2a>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 80091ba:	f7fe fd0b 	bl	8007bd4 <CheckRetransUnconfirmedUplink>
 80091be:	4604      	mov	r4, r0
        if( stopRetransmission == true )
 80091c0:	b9a4      	cbnz	r4, 80091ec <LoRaMacHandleMcpsRequest+0x54>
        else if( waitForRetransmission == false )
 80091c2:	b31c      	cbz	r4, 800920c <LoRaMacHandleMcpsRequest+0x74>
}
 80091c4:	bd10      	pop	{r4, pc}
            if( MacCtx.AckTimeoutRetry == true )
 80091c6:	4b18      	ldr	r3, [pc, #96]	; (8009228 <LoRaMacHandleMcpsRequest+0x90>)
 80091c8:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 80091cc:	b1e3      	cbz	r3, 8009208 <LoRaMacHandleMcpsRequest+0x70>
                stopRetransmission = CheckRetransConfirmedUplink( );
 80091ce:	f7fe fd25 	bl	8007c1c <CheckRetransConfirmedUplink>
 80091d2:	4604      	mov	r4, r0
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 80091d4:	4b15      	ldr	r3, [pc, #84]	; (800922c <LoRaMacHandleMcpsRequest+0x94>)
 80091d6:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1f0      	bne.n	80091c0 <LoRaMacHandleMcpsRequest+0x28>
                    if( stopRetransmission == false )
 80091de:	b910      	cbnz	r0, 80091e6 <LoRaMacHandleMcpsRequest+0x4e>
                        AckTimeoutRetriesProcess( );
 80091e0:	f7fe fd74 	bl	8007ccc <AckTimeoutRetriesProcess>
 80091e4:	e7ec      	b.n	80091c0 <LoRaMacHandleMcpsRequest+0x28>
                        AckTimeoutRetriesFinalize( );
 80091e6:	f7ff fdbf 	bl	8008d68 <AckTimeoutRetriesFinalize>
 80091ea:	e7e9      	b.n	80091c0 <LoRaMacHandleMcpsRequest+0x28>
            TimerStop( &MacCtx.TxDelayedTimer );
 80091ec:	4c0e      	ldr	r4, [pc, #56]	; (8009228 <LoRaMacHandleMcpsRequest+0x90>)
 80091ee:	f504 705a 	add.w	r0, r4, #872	; 0x368
 80091f2:	f00d fe0b 	bl	8016e0c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80091f6:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 80091fa:	f023 0320 	bic.w	r3, r3, #32
 80091fe:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 8009202:	f7fe fd23 	bl	8007c4c <StopRetransmission>
 8009206:	e7dd      	b.n	80091c4 <LoRaMacHandleMcpsRequest+0x2c>
                waitForRetransmission = true;
 8009208:	2401      	movs	r4, #1
 800920a:	e7da      	b.n	80091c2 <LoRaMacHandleMcpsRequest+0x2a>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800920c:	4b06      	ldr	r3, [pc, #24]	; (8009228 <LoRaMacHandleMcpsRequest+0x90>)
 800920e:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8009212:	f36f 1245 	bfc	r2, #5, #1
 8009216:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800921a:	2000      	movs	r0, #0
 800921c:	f883 0413 	strb.w	r0, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 8009220:	f7ff ff92 	bl	8009148 <OnTxDelayedTimerEvent>
}
 8009224:	e7ce      	b.n	80091c4 <LoRaMacHandleMcpsRequest+0x2c>
 8009226:	4770      	bx	lr
 8009228:	200006d0 	.word	0x200006d0
 800922c:	20000bd8 	.word	0x20000bd8

08009230 <LoRaMacHandleRequestEvents>:
{
 8009230:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 8009232:	4b22      	ldr	r3, [pc, #136]	; (80092bc <LoRaMacHandleRequestEvents+0x8c>)
 8009234:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009238:	bb7b      	cbnz	r3, 800929a <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800923a:	4b20      	ldr	r3, [pc, #128]	; (80092bc <LoRaMacHandleRequestEvents+0x8c>)
 800923c:	f893 4481 	ldrb.w	r4, [r3, #1153]	; 0x481
 8009240:	f014 0501 	ands.w	r5, r4, #1
 8009244:	d005      	beq.n	8009252 <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8009246:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800924a:	f36f 0200 	bfc	r2, #0, #1
 800924e:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009252:	4b1a      	ldr	r3, [pc, #104]	; (80092bc <LoRaMacHandleRequestEvents+0x8c>)
 8009254:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8009258:	f013 0f04 	tst.w	r3, #4
 800925c:	d006      	beq.n	800926c <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800925e:	4b17      	ldr	r3, [pc, #92]	; (80092bc <LoRaMacHandleRequestEvents+0x8c>)
 8009260:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8009264:	f36f 0282 	bfc	r2, #2, #1
 8009268:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800926c:	2001      	movs	r0, #1
 800926e:	f7fe fbf3 	bl	8007a58 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 8009272:	b135      	cbz	r5, 8009282 <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8009274:	4811      	ldr	r0, [pc, #68]	; (80092bc <LoRaMacHandleRequestEvents+0x8c>)
 8009276:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f500 6087 	add.w	r0, r0, #1080	; 0x438
 8009280:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 8009282:	f014 0f04 	tst.w	r4, #4
 8009286:	d109      	bne.n	800929c <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 8009288:	f001 fd66 	bl	800ad58 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800928c:	4b0b      	ldr	r3, [pc, #44]	; (80092bc <LoRaMacHandleRequestEvents+0x8c>)
 800928e:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8009292:	f36f 1245 	bfc	r2, #5, #1
 8009296:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
}
 800929a:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800929c:	4808      	ldr	r0, [pc, #32]	; (80092c0 <LoRaMacHandleRequestEvents+0x90>)
 800929e:	f001 ffcd 	bl	800b23c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 80092a2:	f001 fffd 	bl	800b2a0 <LoRaMacConfirmQueueGetCnt>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d0ee      	beq.n	8009288 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80092aa:	4a04      	ldr	r2, [pc, #16]	; (80092bc <LoRaMacHandleRequestEvents+0x8c>)
 80092ac:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80092b0:	f043 0304 	orr.w	r3, r3, #4
 80092b4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 80092b8:	e7e6      	b.n	8009288 <LoRaMacHandleRequestEvents+0x58>
 80092ba:	bf00      	nop
 80092bc:	200006d0 	.word	0x200006d0
 80092c0:	20000b1c 	.word	0x20000b1c

080092c4 <LoRaMacHandleScheduleUplinkEvent>:
    if( MacCtx.MacState == LORAMAC_IDLE )
 80092c4:	4b0a      	ldr	r3, [pc, #40]	; (80092f0 <LoRaMacHandleScheduleUplinkEvent+0x2c>)
 80092c6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80092ca:	b103      	cbz	r3, 80092ce <LoRaMacHandleScheduleUplinkEvent+0xa>
 80092cc:	4770      	bx	lr
{
 80092ce:	b500      	push	{lr}
 80092d0:	b083      	sub	sp, #12
        bool isStickyMacCommandPending = false;
 80092d2:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 80092d6:	f10d 0007 	add.w	r0, sp, #7
 80092da:	f001 fe91 	bl	800b000 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 80092de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80092e2:	b913      	cbnz	r3, 80092ea <LoRaMacHandleScheduleUplinkEvent+0x26>
}
 80092e4:	b003      	add	sp, #12
 80092e6:	f85d fb04 	ldr.w	pc, [sp], #4
            SetMlmeScheduleUplinkIndication( );
 80092ea:	f7fe fc13 	bl	8007b14 <SetMlmeScheduleUplinkIndication>
}
 80092ee:	e7f9      	b.n	80092e4 <LoRaMacHandleScheduleUplinkEvent+0x20>
 80092f0:	200006d0 	.word	0x200006d0

080092f4 <LoRaMacHandleNvm>:
{
 80092f4:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 80092f6:	4b30      	ldr	r3, [pc, #192]	; (80093b8 <LoRaMacHandleNvm+0xc4>)
 80092f8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80092fc:	b103      	cbz	r3, 8009300 <LoRaMacHandleNvm+0xc>
}
 80092fe:	bd38      	pop	{r3, r4, r5, pc}
 8009300:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8009302:	2124      	movs	r1, #36	; 0x24
 8009304:	f00b f8de 	bl	80144c4 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 8009308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800930a:	4283      	cmp	r3, r0
 800930c:	d052      	beq.n	80093b4 <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 800930e:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8009310:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8009312:	2114      	movs	r1, #20
 8009314:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009318:	f00b f8d4 	bl	80144c4 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800931c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800931e:	4283      	cmp	r3, r0
 8009320:	d002      	beq.n	8009328 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 8009322:	63e0      	str	r0, [r4, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8009324:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8009328:	21d4      	movs	r1, #212	; 0xd4
 800932a:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800932e:	f00b f8c9 	bl	80144c4 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 8009332:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8009336:	4283      	cmp	r3, r0
 8009338:	d003      	beq.n	8009342 <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 800933a:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800933e:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8009342:	21bc      	movs	r1, #188	; 0xbc
 8009344:	f504 708c 	add.w	r0, r4, #280	; 0x118
 8009348:	f00b f8bc 	bl	80144c4 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800934c:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 8009350:	4283      	cmp	r3, r0
 8009352:	d003      	beq.n	800935c <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 8009354:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8009358:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800935c:	21a0      	movs	r1, #160	; 0xa0
 800935e:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
 8009362:	f00b f8af 	bl	80144c4 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 8009366:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
 800936a:	4283      	cmp	r3, r0
 800936c:	d003      	beq.n	8009376 <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 800936e:	f8c4 0278 	str.w	r0, [r4, #632]	; 0x278
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8009372:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8009376:	f44f 6193 	mov.w	r1, #1176	; 0x498
 800937a:	f504 701f 	add.w	r0, r4, #636	; 0x27c
 800937e:	f00b f8a1 	bl	80144c4 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 8009382:	f8d4 3714 	ldr.w	r3, [r4, #1812]	; 0x714
 8009386:	4283      	cmp	r3, r0
 8009388:	d003      	beq.n	8009392 <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 800938a:	f8c4 0714 	str.w	r0, [r4, #1812]	; 0x714
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800938e:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8009392:	2114      	movs	r1, #20
 8009394:	f504 60e3 	add.w	r0, r4, #1816	; 0x718
 8009398:	f00b f894 	bl	80144c4 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800939c:	f8d4 372c 	ldr.w	r3, [r4, #1836]	; 0x72c
 80093a0:	4283      	cmp	r3, r0
 80093a2:	d003      	beq.n	80093ac <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 80093a4:	f8c4 072c 	str.w	r0, [r4, #1836]	; 0x72c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 80093a8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 80093ac:	4628      	mov	r0, r5
 80093ae:	f7fe fc75 	bl	8007c9c <CallNvmDataChangeCallback>
 80093b2:	e7a4      	b.n	80092fe <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 80093b4:	2500      	movs	r5, #0
 80093b6:	e7ac      	b.n	8009312 <LoRaMacHandleNvm+0x1e>
 80093b8:	200006d0 	.word	0x200006d0

080093bc <RestoreNvmData>:
    if( nvm == NULL )
 80093bc:	2800      	cmp	r0, #0
 80093be:	d07a      	beq.n	80094b6 <RestoreNvmData+0xfa>
{
 80093c0:	b570      	push	{r4, r5, r6, lr}
 80093c2:	4604      	mov	r4, r0
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80093c4:	4b3d      	ldr	r3, [pc, #244]	; (80094bc <RestoreNvmData+0x100>)
 80093c6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d001      	beq.n	80093d2 <RestoreNvmData+0x16>
        return LORAMAC_STATUS_BUSY;
 80093ce:	2001      	movs	r0, #1
}
 80093d0:	bd70      	pop	{r4, r5, r6, pc}
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 80093d2:	2124      	movs	r1, #36	; 0x24
 80093d4:	f00b f876 	bl	80144c4 <Crc32>
    if( crc == nvm->Crypto.Crc32 )
 80093d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093da:	4283      	cmp	r3, r0
 80093dc:	d032      	beq.n	8009444 <RestoreNvmData+0x88>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 80093de:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80093e2:	2114      	movs	r1, #20
 80093e4:	4628      	mov	r0, r5
 80093e6:	f00b f86d 	bl	80144c4 <Crc32>
    if( crc == nvm->MacGroup1.Crc32 )
 80093ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80093ec:	4283      	cmp	r3, r0
 80093ee:	d02f      	beq.n	8009450 <RestoreNvmData+0x94>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 80093f0:	f104 0540 	add.w	r5, r4, #64	; 0x40
 80093f4:	21d4      	movs	r1, #212	; 0xd4
 80093f6:	4628      	mov	r0, r5
 80093f8:	f00b f864 	bl	80144c4 <Crc32>
    if( crc == nvm->MacGroup2.Crc32 )
 80093fc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8009400:	4283      	cmp	r3, r0
 8009402:	d02b      	beq.n	800945c <RestoreNvmData+0xa0>
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 8009404:	f504 758c 	add.w	r5, r4, #280	; 0x118
 8009408:	21bc      	movs	r1, #188	; 0xbc
 800940a:	4628      	mov	r0, r5
 800940c:	f00b f85a 	bl	80144c4 <Crc32>
    if( crc == nvm->SecureElement.Crc32 )
 8009410:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 8009414:	4283      	cmp	r3, r0
 8009416:	d03b      	beq.n	8009490 <RestoreNvmData+0xd4>
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 8009418:	f504 75ec 	add.w	r5, r4, #472	; 0x1d8
 800941c:	21a0      	movs	r1, #160	; 0xa0
 800941e:	4628      	mov	r0, r5
 8009420:	f00b f850 	bl	80144c4 <Crc32>
    if( crc == nvm->RegionGroup1.Crc32 )
 8009424:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
 8009428:	4283      	cmp	r3, r0
 800942a:	d037      	beq.n	800949c <RestoreNvmData+0xe0>
    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 800942c:	f504 65e3 	add.w	r5, r4, #1816	; 0x718
 8009430:	2114      	movs	r1, #20
 8009432:	4628      	mov	r0, r5
 8009434:	f00b f846 	bl	80144c4 <Crc32>
    if( crc == nvm->ClassB.Crc32 )
 8009438:	f8d4 372c 	ldr.w	r3, [r4, #1836]	; 0x72c
 800943c:	4283      	cmp	r3, r0
 800943e:	d033      	beq.n	80094a8 <RestoreNvmData+0xec>
    return LORAMAC_STATUS_OK;
 8009440:	2000      	movs	r0, #0
 8009442:	e7c5      	b.n	80093d0 <RestoreNvmData+0x14>
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 8009444:	2228      	movs	r2, #40	; 0x28
 8009446:	4621      	mov	r1, r4
 8009448:	481d      	ldr	r0, [pc, #116]	; (80094c0 <RestoreNvmData+0x104>)
 800944a:	f00b f81c 	bl	8014486 <memcpy1>
 800944e:	e7c6      	b.n	80093de <RestoreNvmData+0x22>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 8009450:	2218      	movs	r2, #24
 8009452:	4629      	mov	r1, r5
 8009454:	481b      	ldr	r0, [pc, #108]	; (80094c4 <RestoreNvmData+0x108>)
 8009456:	f00b f816 	bl	8014486 <memcpy1>
 800945a:	e7c9      	b.n	80093f0 <RestoreNvmData+0x34>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 800945c:	4e18      	ldr	r6, [pc, #96]	; (80094c0 <RestoreNvmData+0x104>)
 800945e:	22d8      	movs	r2, #216	; 0xd8
 8009460:	4629      	mov	r1, r5
 8009462:	f106 0040 	add.w	r0, r6, #64	; 0x40
 8009466:	f00b f80e 	bl	8014486 <memcpy1>
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800946a:	4b14      	ldr	r3, [pc, #80]	; (80094bc <RestoreNvmData+0x100>)
 800946c:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8009470:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8009474:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
 8009476:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800947a:	f896 2075 	ldrb.w	r2, [r6, #117]	; 0x75
 800947e:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 8009482:	2201      	movs	r2, #1
 8009484:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009488:	2202      	movs	r2, #2
 800948a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
 800948e:	e7b9      	b.n	8009404 <RestoreNvmData+0x48>
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 8009490:	22c0      	movs	r2, #192	; 0xc0
 8009492:	4629      	mov	r1, r5
 8009494:	480c      	ldr	r0, [pc, #48]	; (80094c8 <RestoreNvmData+0x10c>)
 8009496:	f00a fff6 	bl	8014486 <memcpy1>
 800949a:	e7bd      	b.n	8009418 <RestoreNvmData+0x5c>
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 800949c:	22a4      	movs	r2, #164	; 0xa4
 800949e:	4629      	mov	r1, r5
 80094a0:	480a      	ldr	r0, [pc, #40]	; (80094cc <RestoreNvmData+0x110>)
 80094a2:	f00a fff0 	bl	8014486 <memcpy1>
 80094a6:	e7c1      	b.n	800942c <RestoreNvmData+0x70>
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 80094a8:	2218      	movs	r2, #24
 80094aa:	4629      	mov	r1, r5
 80094ac:	4808      	ldr	r0, [pc, #32]	; (80094d0 <RestoreNvmData+0x114>)
 80094ae:	f00a ffea 	bl	8014486 <memcpy1>
    return LORAMAC_STATUS_OK;
 80094b2:	2000      	movs	r0, #0
 80094b4:	e78c      	b.n	80093d0 <RestoreNvmData+0x14>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80094b6:	2003      	movs	r0, #3
}
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	200006d0 	.word	0x200006d0
 80094c0:	20000bd8 	.word	0x20000bd8
 80094c4:	20000c00 	.word	0x20000c00
 80094c8:	20000cf0 	.word	0x20000cf0
 80094cc:	20000db0 	.word	0x20000db0
 80094d0:	200012f0 	.word	0x200012f0

080094d4 <OpenContinuousRxCWindow>:
{
 80094d4:	b570      	push	{r4, r5, r6, lr}
 80094d6:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 80094d8:	4c12      	ldr	r4, [pc, #72]	; (8009524 <OpenContinuousRxCWindow+0x50>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80094da:	4d13      	ldr	r5, [pc, #76]	; (8009528 <OpenContinuousRxCWindow+0x54>)
 80094dc:	f505 7678 	add.w	r6, r5, #992	; 0x3e0
 80094e0:	9600      	str	r6, [sp, #0]
 80094e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80094e4:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80094e8:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 80094ec:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80094f0:	f002 fd2b 	bl	800bf4a <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80094f4:	2302      	movs	r3, #2
 80094f6:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80094fa:	2301      	movs	r3, #1
 80094fc:	f885 33f2 	strb.w	r3, [r5, #1010]	; 0x3f2
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009500:	f505 6284 	add.w	r2, r5, #1056	; 0x420
 8009504:	4631      	mov	r1, r6
 8009506:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800950a:	f002 fd50 	bl	800bfae <RegionRxConfig>
 800950e:	b138      	cbz	r0, 8009520 <OpenContinuousRxCWindow+0x4c>
        Radio.Rx( 0 ); // Continuous mode
 8009510:	4b06      	ldr	r3, [pc, #24]	; (800952c <OpenContinuousRxCWindow+0x58>)
 8009512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009514:	2000      	movs	r0, #0
 8009516:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8009518:	f895 23f3 	ldrb.w	r2, [r5, #1011]	; 0x3f3
 800951c:	f885 2480 	strb.w	r2, [r5, #1152]	; 0x480
}
 8009520:	b002      	add	sp, #8
 8009522:	bd70      	pop	{r4, r5, r6, pc}
 8009524:	20000bd8 	.word	0x20000bd8
 8009528:	200006d0 	.word	0x200006d0
 800952c:	08018318 	.word	0x08018318

08009530 <RxWindowSetup>:
{
 8009530:	b510      	push	{r4, lr}
 8009532:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 8009534:	f00d fc6a 	bl	8016e0c <UTIL_TIMER_Stop>
    Radio.Standby( );
 8009538:	4b0a      	ldr	r3, [pc, #40]	; (8009564 <RxWindowSetup+0x34>)
 800953a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800953c:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800953e:	4a0a      	ldr	r2, [pc, #40]	; (8009568 <RxWindowSetup+0x38>)
 8009540:	4621      	mov	r1, r4
 8009542:	4b0a      	ldr	r3, [pc, #40]	; (800956c <RxWindowSetup+0x3c>)
 8009544:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009548:	f002 fd31 	bl	800bfae <RegionRxConfig>
 800954c:	b140      	cbz	r0, 8009560 <RxWindowSetup+0x30>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800954e:	4b05      	ldr	r3, [pc, #20]	; (8009564 <RxWindowSetup+0x34>)
 8009550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009552:	4a06      	ldr	r2, [pc, #24]	; (800956c <RxWindowSetup+0x3c>)
 8009554:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8009556:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8009558:	7ce2      	ldrb	r2, [r4, #19]
 800955a:	4b05      	ldr	r3, [pc, #20]	; (8009570 <RxWindowSetup+0x40>)
 800955c:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 8009560:	bd10      	pop	{r4, pc}
 8009562:	bf00      	nop
 8009564:	08018318 	.word	0x08018318
 8009568:	20000af0 	.word	0x20000af0
 800956c:	20000bd8 	.word	0x20000bd8
 8009570:	200006d0 	.word	0x200006d0

08009574 <OnRxWindow2TimerEvent>:
{
 8009574:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009576:	4b11      	ldr	r3, [pc, #68]	; (80095bc <OnRxWindow2TimerEvent+0x48>)
 8009578:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800957c:	b903      	cbnz	r3, 8009580 <OnRxWindow2TimerEvent+0xc>
}
 800957e:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009580:	480e      	ldr	r0, [pc, #56]	; (80095bc <OnRxWindow2TimerEvent+0x48>)
 8009582:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415
 8009586:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800958a:	4b0d      	ldr	r3, [pc, #52]	; (80095c0 <OnRxWindow2TimerEvent+0x4c>)
 800958c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800958e:	f8c0 23d0 	str.w	r2, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009592:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8009596:	f880 23dc 	strb.w	r2, [r0, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800959a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800959e:	f880 33dd 	strb.w	r3, [r0, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 80095a2:	2300      	movs	r3, #0
 80095a4:	f880 33de 	strb.w	r3, [r0, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80095a8:	2301      	movs	r3, #1
 80095aa:	f880 33df 	strb.w	r3, [r0, #991]	; 0x3df
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80095ae:	f500 7173 	add.w	r1, r0, #972	; 0x3cc
 80095b2:	f500 7066 	add.w	r0, r0, #920	; 0x398
 80095b6:	f7ff ffbb 	bl	8009530 <RxWindowSetup>
 80095ba:	e7e0      	b.n	800957e <OnRxWindow2TimerEvent+0xa>
 80095bc:	200006d0 	.word	0x200006d0
 80095c0:	20000bd8 	.word	0x20000bd8

080095c4 <OnRxWindow1TimerEvent>:
{
 80095c4:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80095c6:	480f      	ldr	r0, [pc, #60]	; (8009604 <OnRxWindow1TimerEvent+0x40>)
 80095c8:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415
 80095cc:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 80095d0:	4b0d      	ldr	r3, [pc, #52]	; (8009608 <OnRxWindow1TimerEvent+0x44>)
 80095d2:	f993 2061 	ldrsb.w	r2, [r3, #97]	; 0x61
 80095d6:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80095da:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80095de:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80095e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095e6:	f880 33c9 	strb.w	r3, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 80095ea:	2300      	movs	r3, #0
 80095ec:	f880 33ca 	strb.w	r3, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 80095f0:	f880 33cb 	strb.w	r3, [r0, #971]	; 0x3cb
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80095f4:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 80095f8:	f500 7060 	add.w	r0, r0, #896	; 0x380
 80095fc:	f7ff ff98 	bl	8009530 <RxWindowSetup>
}
 8009600:	bd08      	pop	{r3, pc}
 8009602:	bf00      	nop
 8009604:	200006d0 	.word	0x200006d0
 8009608:	20000bd8 	.word	0x20000bd8

0800960c <OnRadioRxTimeout>:
{
 800960c:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800960e:	4a09      	ldr	r2, [pc, #36]	; (8009634 <OnRadioRxTimeout+0x28>)
 8009610:	7813      	ldrb	r3, [r2, #0]
 8009612:	f043 0301 	orr.w	r3, r3, #1
 8009616:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009618:	4b07      	ldr	r3, [pc, #28]	; (8009638 <OnRadioRxTimeout+0x2c>)
 800961a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800961e:	b113      	cbz	r3, 8009626 <OnRadioRxTimeout+0x1a>
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	b103      	cbz	r3, 8009626 <OnRadioRxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009624:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8009626:	4b05      	ldr	r3, [pc, #20]	; (800963c <OnRadioRxTimeout+0x30>)
 8009628:	2201      	movs	r2, #1
 800962a:	2100      	movs	r1, #0
 800962c:	2002      	movs	r0, #2
 800962e:	f00d f8b3 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
}
 8009632:	bd08      	pop	{r3, pc}
 8009634:	200006cc 	.word	0x200006cc
 8009638:	200006d0 	.word	0x200006d0
 800963c:	08017a8c 	.word	0x08017a8c

08009640 <OnRadioTxTimeout>:
{
 8009640:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8009642:	4a09      	ldr	r2, [pc, #36]	; (8009668 <OnRadioTxTimeout+0x28>)
 8009644:	7813      	ldrb	r3, [r2, #0]
 8009646:	f043 0304 	orr.w	r3, r3, #4
 800964a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800964c:	4b07      	ldr	r3, [pc, #28]	; (800966c <OnRadioTxTimeout+0x2c>)
 800964e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009652:	b113      	cbz	r3, 800965a <OnRadioTxTimeout+0x1a>
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	b103      	cbz	r3, 800965a <OnRadioTxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009658:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800965a:	4b05      	ldr	r3, [pc, #20]	; (8009670 <OnRadioTxTimeout+0x30>)
 800965c:	2201      	movs	r2, #1
 800965e:	2100      	movs	r1, #0
 8009660:	2002      	movs	r0, #2
 8009662:	f00d f899 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
}
 8009666:	bd08      	pop	{r3, pc}
 8009668:	200006cc 	.word	0x200006cc
 800966c:	200006d0 	.word	0x200006d0
 8009670:	08017a9c 	.word	0x08017a9c

08009674 <OnRadioRxDone>:
{
 8009674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009678:	4680      	mov	r8, r0
 800967a:	460f      	mov	r7, r1
 800967c:	4616      	mov	r6, r2
 800967e:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8009680:	f00d fb84 	bl	8016d8c <UTIL_TIMER_GetCurrentTime>
 8009684:	4c0d      	ldr	r4, [pc, #52]	; (80096bc <OnRadioRxDone+0x48>)
 8009686:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 8009688:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800968c:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800968e:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 8009690:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 8009692:	4a0b      	ldr	r2, [pc, #44]	; (80096c0 <OnRadioRxDone+0x4c>)
 8009694:	7813      	ldrb	r3, [r2, #0]
 8009696:	f043 0308 	orr.w	r3, r3, #8
 800969a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800969c:	4b09      	ldr	r3, [pc, #36]	; (80096c4 <OnRadioRxDone+0x50>)
 800969e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80096a2:	b113      	cbz	r3, 80096aa <OnRadioRxDone+0x36>
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	b103      	cbz	r3, 80096aa <OnRadioRxDone+0x36>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80096a8:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 80096aa:	4b07      	ldr	r3, [pc, #28]	; (80096c8 <OnRadioRxDone+0x54>)
 80096ac:	2201      	movs	r2, #1
 80096ae:	2100      	movs	r1, #0
 80096b0:	2002      	movs	r0, #2
 80096b2:	f00d f871 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
}
 80096b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096ba:	bf00      	nop
 80096bc:	200024f4 	.word	0x200024f4
 80096c0:	200006cc 	.word	0x200006cc
 80096c4:	200006d0 	.word	0x200006d0
 80096c8:	08017aac 	.word	0x08017aac

080096cc <OnRadioTxDone>:
{
 80096cc:	b530      	push	{r4, r5, lr}
 80096ce:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80096d0:	f00d fb5c 	bl	8016d8c <UTIL_TIMER_GetCurrentTime>
 80096d4:	4b0f      	ldr	r3, [pc, #60]	; (8009714 <OnRadioTxDone+0x48>)
 80096d6:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 80096d8:	4d0f      	ldr	r5, [pc, #60]	; (8009718 <OnRadioTxDone+0x4c>)
 80096da:	466c      	mov	r4, sp
 80096dc:	4620      	mov	r0, r4
 80096de:	f00d faab 	bl	8016c38 <SysTimeGet>
 80096e2:	f505 734e 	add.w	r3, r5, #824	; 0x338
 80096e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80096ea:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 80096ee:	4a0b      	ldr	r2, [pc, #44]	; (800971c <OnRadioTxDone+0x50>)
 80096f0:	7813      	ldrb	r3, [r2, #0]
 80096f2:	f043 0310 	orr.w	r3, r3, #16
 80096f6:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80096f8:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 80096fc:	b113      	cbz	r3, 8009704 <OnRadioTxDone+0x38>
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	b103      	cbz	r3, 8009704 <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009702:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8009704:	4b06      	ldr	r3, [pc, #24]	; (8009720 <OnRadioTxDone+0x54>)
 8009706:	2201      	movs	r2, #1
 8009708:	2100      	movs	r1, #0
 800970a:	2002      	movs	r0, #2
 800970c:	f00d f844 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
}
 8009710:	b003      	add	sp, #12
 8009712:	bd30      	pop	{r4, r5, pc}
 8009714:	200024f0 	.word	0x200024f0
 8009718:	200006d0 	.word	0x200006d0
 800971c:	200006cc 	.word	0x200006cc
 8009720:	08017abc 	.word	0x08017abc

08009724 <ResetMacParameters>:
{
 8009724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009728:	b08e      	sub	sp, #56	; 0x38
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800972a:	4c4d      	ldr	r4, [pc, #308]	; (8009860 <ResetMacParameters+0x13c>)
 800972c:	2600      	movs	r6, #0
 800972e:	f884 6110 	strb.w	r6, [r4, #272]	; 0x110
    Nvm.MacGroup1.AdrAckCounter = 0;
 8009732:	62a6      	str	r6, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 8009734:	4d4b      	ldr	r5, [pc, #300]	; (8009864 <ResetMacParameters+0x140>)
 8009736:	f885 6410 	strb.w	r6, [r5, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 800973a:	f04f 0801 	mov.w	r8, #1
 800973e:	f885 8411 	strb.w	r8, [r5, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 8009742:	f885 8412 	strb.w	r8, [r5, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 8009746:	f885 6413 	strb.w	r6, [r5, #1043]	; 0x413
    Nvm.MacGroup2.MaxDCycle = 0;
 800974a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800974e:	f8a4 8102 	strh.w	r8, [r4, #258]	; 0x102
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8009752:	f994 30c4 	ldrsb.w	r3, [r4, #196]	; 0xc4
 8009756:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800975a:	f994 30c5 	ldrsb.w	r3, [r4, #197]	; 0xc5
 800975e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8009762:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 8009766:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800976a:	f104 0364 	add.w	r3, r4, #100	; 0x64
 800976e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8009772:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8009776:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800977a:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800977e:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8009782:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8009786:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800978a:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 800978e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8009792:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
 8009796:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800979a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 800979e:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80097a0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80097a4:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.NodeAckRequested = false;
 80097a6:	f885 6414 	strb.w	r6, [r5, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 80097aa:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80097ae:	f88d 800c 	strb.w	r8, [sp, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80097b2:	f504 73ec 	add.w	r3, r4, #472	; 0x1d8
 80097b6:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80097b8:	f504 731f 	add.w	r3, r4, #636	; 0x27c
 80097bc:	9302      	str	r3, [sp, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80097be:	a901      	add	r1, sp, #4
 80097c0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80097c4:	f002 fb0b 	bl	800bdde <RegionInitDefaults>
    MacCtx.Channel = 0;
 80097c8:	f885 6415 	strb.w	r6, [r5, #1045]	; 0x415
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80097cc:	f885 63cc 	strb.w	r6, [r5, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80097d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097d2:	f8c5 33d0 	str.w	r3, [r5, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80097d6:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80097da:	f885 33dc 	strb.w	r3, [r5, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80097de:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 80097e2:	f885 33dd 	strb.w	r3, [r5, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 80097e6:	f885 63de 	strb.w	r6, [r5, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80097ea:	f885 83df 	strb.w	r8, [r5, #991]	; 0x3df
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80097ee:	f505 7478 	add.w	r4, r5, #992	; 0x3e0
 80097f2:	f505 7773 	add.w	r7, r5, #972	; 0x3cc
 80097f6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80097f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80097fe:	f885 83f2 	strb.w	r8, [r5, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009802:	2302      	movs	r3, #2
 8009804:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    classBCallbacks.GetTemperatureLevel = NULL;
 8009808:	960c      	str	r6, [sp, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800980a:	960d      	str	r6, [sp, #52]	; 0x34
    if( MacCtx.MacCallbacks != NULL )
 800980c:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 8009810:	b11b      	cbz	r3, 800981a <ResetMacParameters+0xf6>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8009812:	685a      	ldr	r2, [r3, #4]
 8009814:	920c      	str	r2, [sp, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8009816:	691b      	ldr	r3, [r3, #16]
 8009818:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800981a:	4b12      	ldr	r3, [pc, #72]	; (8009864 <ResetMacParameters+0x140>)
 800981c:	f503 628c 	add.w	r2, r3, #1120	; 0x460
 8009820:	9204      	str	r2, [sp, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8009822:	f203 421c 	addw	r2, r3, #1052	; 0x41c
 8009826:	9205      	str	r2, [sp, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8009828:	f203 424c 	addw	r2, r3, #1100	; 0x44c
 800982c:	9206      	str	r2, [sp, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800982e:	f203 4381 	addw	r3, r3, #1153	; 0x481
 8009832:	9307      	str	r3, [sp, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8009834:	4a0a      	ldr	r2, [pc, #40]	; (8009860 <ResetMacParameters+0x13c>)
 8009836:	f102 03cc 	add.w	r3, r2, #204	; 0xcc
 800983a:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800983c:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8009840:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8009842:	f102 0344 	add.w	r3, r2, #68	; 0x44
 8009846:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8009848:	f102 03d0 	add.w	r3, r2, #208	; 0xd0
 800984c:	930b      	str	r3, [sp, #44]	; 0x2c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800984e:	f502 62e3 	add.w	r2, r2, #1816	; 0x718
 8009852:	a90c      	add	r1, sp, #48	; 0x30
 8009854:	a804      	add	r0, sp, #16
 8009856:	f001 fa6a 	bl	800ad2e <LoRaMacClassBInit>
}
 800985a:	b00e      	add	sp, #56	; 0x38
 800985c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009860:	20000bd8 	.word	0x20000bd8
 8009864:	200006d0 	.word	0x200006d0

08009868 <SwitchClass>:
{
 8009868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986a:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800986c:	4b3d      	ldr	r3, [pc, #244]	; (8009964 <SwitchClass+0xfc>)
 800986e:	f893 50fc 	ldrb.w	r5, [r3, #252]	; 0xfc
 8009872:	2d01      	cmp	r5, #1
 8009874:	d062      	beq.n	800993c <SwitchClass+0xd4>
 8009876:	2d02      	cmp	r5, #2
 8009878:	d068      	beq.n	800994c <SwitchClass+0xe4>
 800987a:	b10d      	cbz	r5, 8009880 <SwitchClass+0x18>
 800987c:	2003      	movs	r0, #3
}
 800987e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_A )
 8009880:	b928      	cbnz	r0, 800988e <SwitchClass+0x26>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8009882:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8009886:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8009888:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800988a:	e882 0003 	stmia.w	r2, {r0, r1}
            if( deviceClass == CLASS_B )
 800988e:	2c01      	cmp	r4, #1
 8009890:	d01f      	beq.n	80098d2 <SwitchClass+0x6a>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009892:	2003      	movs	r0, #3
            if( deviceClass == CLASS_C )
 8009894:	2c02      	cmp	r4, #2
 8009896:	d1f2      	bne.n	800987e <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009898:	4b32      	ldr	r3, [pc, #200]	; (8009964 <SwitchClass+0xfc>)
 800989a:	f883 40fc 	strb.w	r4, [r3, #252]	; 0xfc
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800989e:	4f32      	ldr	r7, [pc, #200]	; (8009968 <SwitchClass+0x100>)
 80098a0:	f507 7478 	add.w	r4, r7, #992	; 0x3e0
 80098a4:	f507 7673 	add.w	r6, r7, #972	; 0x3cc
 80098a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80098aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098ac:	6833      	ldr	r3, [r6, #0]
 80098ae:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80098b0:	2302      	movs	r3, #2
 80098b2:	f887 33f3 	strb.w	r3, [r7, #1011]	; 0x3f3
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80098b6:	2300      	movs	r3, #0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	dd13      	ble.n	80098e4 <SwitchClass+0x7c>
                MacCtx.NodeAckRequested = false;
 80098bc:	4b2a      	ldr	r3, [pc, #168]	; (8009968 <SwitchClass+0x100>)
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                Radio.Sleep( );
 80098c4:	4b29      	ldr	r3, [pc, #164]	; (800996c <SwitchClass+0x104>)
 80098c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c8:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 80098ca:	f7ff fe03 	bl	80094d4 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 80098ce:	4628      	mov	r0, r5
 80098d0:	e7d5      	b.n	800987e <SwitchClass+0x16>
                status = LoRaMacClassBSwitchClass( deviceClass );
 80098d2:	4620      	mov	r0, r4
 80098d4:	f001 fa41 	bl	800ad5a <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 80098d8:	2800      	cmp	r0, #0
 80098da:	d1db      	bne.n	8009894 <SwitchClass+0x2c>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 80098dc:	4b21      	ldr	r3, [pc, #132]	; (8009964 <SwitchClass+0xfc>)
 80098de:	f883 40fc 	strb.w	r4, [r3, #252]	; 0xfc
 80098e2:	e7d7      	b.n	8009894 <SwitchClass+0x2c>
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 80098e4:	4618      	mov	r0, r3
 80098e6:	491f      	ldr	r1, [pc, #124]	; (8009964 <SwitchClass+0xfc>)
 80098e8:	222c      	movs	r2, #44	; 0x2c
 80098ea:	fb02 1203 	mla	r2, r2, r3, r1
 80098ee:	f892 20d2 	ldrb.w	r2, [r2, #210]	; 0xd2
 80098f2:	b912      	cbnz	r2, 80098fa <SwitchClass+0x92>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80098f4:	3301      	adds	r3, #1
 80098f6:	b25b      	sxtb	r3, r3
 80098f8:	e7de      	b.n	80098b8 <SwitchClass+0x50>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 80098fa:	460a      	mov	r2, r1
 80098fc:	232c      	movs	r3, #44	; 0x2c
 80098fe:	fb03 1000 	mla	r0, r3, r0, r1
 8009902:	f8d0 10e8 	ldr.w	r1, [r0, #232]	; 0xe8
 8009906:	66d1      	str	r1, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8009908:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
 800990c:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009910:	4b15      	ldr	r3, [pc, #84]	; (8009968 <SwitchClass+0x100>)
 8009912:	f893 0415 	ldrb.w	r0, [r3, #1045]	; 0x415
 8009916:	f883 03e0 	strb.w	r0, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800991a:	f8c3 13e4 	str.w	r1, [r3, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800991e:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
 8009922:	f883 13f0 	strb.w	r1, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8009926:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800992a:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800992e:	2203      	movs	r2, #3
 8009930:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8009934:	2201      	movs	r2, #1
 8009936:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800993a:	e7bf      	b.n	80098bc <SwitchClass+0x54>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800993c:	f001 fa0d 	bl	800ad5a <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 8009940:	2800      	cmp	r0, #0
 8009942:	d19c      	bne.n	800987e <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009944:	4b07      	ldr	r3, [pc, #28]	; (8009964 <SwitchClass+0xfc>)
 8009946:	f883 40fc 	strb.w	r4, [r3, #252]	; 0xfc
 800994a:	e798      	b.n	800987e <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800994c:	b938      	cbnz	r0, 800995e <SwitchClass+0xf6>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800994e:	4b05      	ldr	r3, [pc, #20]	; (8009964 <SwitchClass+0xfc>)
 8009950:	f883 00fc 	strb.w	r0, [r3, #252]	; 0xfc
                Radio.Sleep( );
 8009954:	4b05      	ldr	r3, [pc, #20]	; (800996c <SwitchClass+0x104>)
 8009956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009958:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800995a:	4620      	mov	r0, r4
 800995c:	e78f      	b.n	800987e <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800995e:	2003      	movs	r0, #3
 8009960:	e78d      	b.n	800987e <SwitchClass+0x16>
 8009962:	bf00      	nop
 8009964:	20000bd8 	.word	0x20000bd8
 8009968:	200006d0 	.word	0x200006d0
 800996c:	08018318 	.word	0x08018318

08009970 <SendReJoinReq>:
{
 8009970:	b570      	push	{r4, r5, r6, lr}
    switch( joinReqType )
 8009972:	28ff      	cmp	r0, #255	; 0xff
 8009974:	d003      	beq.n	800997e <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 8009976:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 8009978:	f7ff fb62 	bl	8009040 <ScheduleTx>
}
 800997c:	bd70      	pop	{r4, r5, r6, pc}
 800997e:	f04f 0600 	mov.w	r6, #0
            SwitchClass( CLASS_A );
 8009982:	2000      	movs	r0, #0
 8009984:	f7ff ff70 	bl	8009868 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8009988:	4d0f      	ldr	r5, [pc, #60]	; (80099c8 <SendReJoinReq+0x58>)
 800998a:	2400      	movs	r4, #0
 800998c:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8009990:	1cab      	adds	r3, r5, #2
 8009992:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009996:	23ff      	movs	r3, #255	; 0xff
 8009998:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800999c:	f364 1647 	bfi	r6, r4, #5, #3
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 80099a0:	f885 610d 	strb.w	r6, [r5, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 80099a4:	f00a fd3e 	bl	8014424 <SecureElementGetJoinEui>
 80099a8:	4601      	mov	r1, r0
 80099aa:	2208      	movs	r2, #8
 80099ac:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 80099b0:	f00a fd69 	bl	8014486 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 80099b4:	f00a fd20 	bl	80143f8 <SecureElementGetDevEui>
 80099b8:	4601      	mov	r1, r0
 80099ba:	2208      	movs	r2, #8
 80099bc:	f505 708b 	add.w	r0, r5, #278	; 0x116
 80099c0:	f00a fd61 	bl	8014486 <memcpy1>
            allowDelayedTx = false;
 80099c4:	4620      	mov	r0, r4
            break;
 80099c6:	e7d7      	b.n	8009978 <SendReJoinReq+0x8>
 80099c8:	200006d0 	.word	0x200006d0

080099cc <SetTxContinuousWave>:
{
 80099cc:	b510      	push	{r4, lr}
 80099ce:	b084      	sub	sp, #16
    continuousWave.Channel = MacCtx.Channel;
 80099d0:	4c10      	ldr	r4, [pc, #64]	; (8009a14 <SetTxContinuousWave+0x48>)
 80099d2:	f894 3415 	ldrb.w	r3, [r4, #1045]	; 0x415
 80099d6:	f88d 3000 	strb.w	r3, [sp]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80099da:	4b0f      	ldr	r3, [pc, #60]	; (8009a18 <SetTxContinuousWave+0x4c>)
 80099dc:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80099e0:	f88d 2001 	strb.w	r2, [sp, #1]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80099e4:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 80099e8:	f88d 2002 	strb.w	r2, [sp, #2]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80099ec:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80099ee:	9201      	str	r2, [sp, #4]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80099f0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80099f2:	9202      	str	r2, [sp, #8]
    continuousWave.Timeout = timeout;
 80099f4:	f8ad 000c 	strh.w	r0, [sp, #12]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 80099f8:	4669      	mov	r1, sp
 80099fa:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80099fe:	f002 fc91 	bl	800c324 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009a02:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8009a06:	f043 0302 	orr.w	r3, r3, #2
 8009a0a:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
}
 8009a0e:	2000      	movs	r0, #0
 8009a10:	b004      	add	sp, #16
 8009a12:	bd10      	pop	{r4, pc}
 8009a14:	200006d0 	.word	0x200006d0
 8009a18:	20000bd8 	.word	0x20000bd8

08009a1c <PrepareFrame>:
{
 8009a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a20:	b083      	sub	sp, #12
 8009a22:	4605      	mov	r5, r0
 8009a24:	460e      	mov	r6, r1
 8009a26:	4617      	mov	r7, r2
 8009a28:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 8009a2c:	4959      	ldr	r1, [pc, #356]	; (8009b94 <PrepareFrame+0x178>)
 8009a2e:	2200      	movs	r2, #0
 8009a30:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 8009a32:	f881 2414 	strb.w	r2, [r1, #1044]	; 0x414
    uint32_t fCntUp = 0;
 8009a36:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 8009a38:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 8009a3a:	4698      	mov	r8, r3
 8009a3c:	b1cb      	cbz	r3, 8009a72 <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8009a3e:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8009b94 <PrepareFrame+0x178>
 8009a42:	4622      	mov	r2, r4
 8009a44:	4641      	mov	r1, r8
 8009a46:	f509 709c 	add.w	r0, r9, #312	; 0x138
 8009a4a:	f00a fd1c 	bl	8014486 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8009a4e:	b2e0      	uxtb	r0, r4
 8009a50:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8009a54:	782b      	ldrb	r3, [r5, #0]
 8009a56:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 8009a5a:	782b      	ldrb	r3, [r5, #0]
 8009a5c:	095b      	lsrs	r3, r3, #5
 8009a5e:	2b04      	cmp	r3, #4
 8009a60:	d009      	beq.n	8009a76 <PrepareFrame+0x5a>
 8009a62:	2b07      	cmp	r3, #7
 8009a64:	d078      	beq.n	8009b58 <PrepareFrame+0x13c>
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d009      	beq.n	8009a7e <PrepareFrame+0x62>
 8009a6a:	2002      	movs	r0, #2
}
 8009a6c:	b003      	add	sp, #12
 8009a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 8009a72:	4614      	mov	r4, r2
 8009a74:	e7e3      	b.n	8009a3e <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 8009a76:	4b47      	ldr	r3, [pc, #284]	; (8009b94 <PrepareFrame+0x178>)
 8009a78:	2201      	movs	r2, #1
 8009a7a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8009a7e:	4b45      	ldr	r3, [pc, #276]	; (8009b94 <PrepareFrame+0x178>)
 8009a80:	2204      	movs	r2, #4
 8009a82:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8009a86:	1c9a      	adds	r2, r3, #2
 8009a88:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009a8c:	22ff      	movs	r2, #255	; 0xff
 8009a8e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8009a92:	782a      	ldrb	r2, [r5, #0]
 8009a94:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8009a98:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8009a9c:	4a3e      	ldr	r2, [pc, #248]	; (8009b98 <PrepareFrame+0x17c>)
 8009a9e:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 8009aa2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8009aa6:	7832      	ldrb	r2, [r6, #0]
 8009aa8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8009aac:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8009ab0:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8009ab4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8009ab8:	a801      	add	r0, sp, #4
 8009aba:	f001 fdc9 	bl	800b650 <LoRaMacCryptoGetFCntUp>
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	d15b      	bne.n	8009b7a <PrepareFrame+0x15e>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8009ac2:	9a01      	ldr	r2, [sp, #4]
 8009ac4:	4b33      	ldr	r3, [pc, #204]	; (8009b94 <PrepareFrame+0x178>)
 8009ac6:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbRetries = 0;
 8009aca:	2100      	movs	r1, #0
 8009acc:	f883 143d 	strb.w	r1, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 8009ad0:	f883 143c 	strb.w	r1, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8009ad4:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009ad8:	4668      	mov	r0, sp
 8009ada:	f001 fa53 	bl	800af84 <LoRaMacCommandsGetSizeSerializedCmds>
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	d14d      	bne.n	8009b7e <PrepareFrame+0x162>
            if( macCmdsSize > 0 )
 8009ae2:	9b00      	ldr	r3, [sp, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d0c1      	beq.n	8009a6c <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8009ae8:	4b2b      	ldr	r3, [pc, #172]	; (8009b98 <PrepareFrame+0x17c>)
 8009aea:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 8009aee:	f7fe f919 	bl	8007d24 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8009af2:	4b28      	ldr	r3, [pc, #160]	; (8009b94 <PrepareFrame+0x178>)
 8009af4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8009af8:	b113      	cbz	r3, 8009b00 <PrepareFrame+0xe4>
 8009afa:	9a00      	ldr	r2, [sp, #0]
 8009afc:	2a0f      	cmp	r2, #15
 8009afe:	d915      	bls.n	8009b2c <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8009b00:	b113      	cbz	r3, 8009b08 <PrepareFrame+0xec>
 8009b02:	9b00      	ldr	r3, [sp, #0]
 8009b04:	2b0f      	cmp	r3, #15
 8009b06:	d820      	bhi.n	8009b4a <PrepareFrame+0x12e>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8009b08:	4a24      	ldr	r2, [pc, #144]	; (8009b9c <PrepareFrame+0x180>)
 8009b0a:	4669      	mov	r1, sp
 8009b0c:	f001 fa46 	bl	800af9c <LoRaMacCommandsSerializeCmds>
 8009b10:	2800      	cmp	r0, #0
 8009b12:	d13a      	bne.n	8009b8a <PrepareFrame+0x16e>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8009b14:	4b1f      	ldr	r3, [pc, #124]	; (8009b94 <PrepareFrame+0x178>)
 8009b16:	2200      	movs	r2, #0
 8009b18:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8009b1c:	f503 6291 	add.w	r2, r3, #1160	; 0x488
 8009b20:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8009b24:	9a00      	ldr	r2, [sp, #0]
 8009b26:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8009b2a:	e79f      	b.n	8009a6c <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8009b2c:	4a1c      	ldr	r2, [pc, #112]	; (8009ba0 <PrepareFrame+0x184>)
 8009b2e:	4669      	mov	r1, sp
 8009b30:	200f      	movs	r0, #15
 8009b32:	f001 fa33 	bl	800af9c <LoRaMacCommandsSerializeCmds>
 8009b36:	bb20      	cbnz	r0, 8009b82 <PrepareFrame+0x166>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8009b38:	7833      	ldrb	r3, [r6, #0]
 8009b3a:	9a00      	ldr	r2, [sp, #0]
 8009b3c:	f362 0303 	bfi	r3, r2, #0, #4
 8009b40:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8009b42:	4a14      	ldr	r2, [pc, #80]	; (8009b94 <PrepareFrame+0x178>)
 8009b44:	f882 3114 	strb.w	r3, [r2, #276]	; 0x114
 8009b48:	e790      	b.n	8009a6c <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8009b4a:	4a14      	ldr	r2, [pc, #80]	; (8009b9c <PrepareFrame+0x180>)
 8009b4c:	4669      	mov	r1, sp
 8009b4e:	f001 fa25 	bl	800af9c <LoRaMacCommandsSerializeCmds>
 8009b52:	b1c0      	cbz	r0, 8009b86 <PrepareFrame+0x16a>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009b54:	2013      	movs	r0, #19
 8009b56:	e789      	b.n	8009a6c <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8009b58:	f1b8 0f00 	cmp.w	r8, #0
 8009b5c:	d017      	beq.n	8009b8e <PrepareFrame+0x172>
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	d084      	beq.n	8009a6c <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8009b62:	4c0c      	ldr	r4, [pc, #48]	; (8009b94 <PrepareFrame+0x178>)
 8009b64:	b282      	uxth	r2, r0
 8009b66:	4641      	mov	r1, r8
 8009b68:	1ce0      	adds	r0, r4, #3
 8009b6a:	f00a fc8c 	bl	8014486 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8009b6e:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 8009b72:	3301      	adds	r3, #1
 8009b74:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 8009b76:	2000      	movs	r0, #0
 8009b78:	e778      	b.n	8009a6c <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8009b7a:	2012      	movs	r0, #18
 8009b7c:	e776      	b.n	8009a6c <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009b7e:	2013      	movs	r0, #19
 8009b80:	e774      	b.n	8009a6c <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009b82:	2013      	movs	r0, #19
 8009b84:	e772      	b.n	8009a6c <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8009b86:	200a      	movs	r0, #10
 8009b88:	e770      	b.n	8009a6c <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009b8a:	2013      	movs	r0, #19
 8009b8c:	e76e      	b.n	8009a6c <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 8009b8e:	2000      	movs	r0, #0
 8009b90:	e76c      	b.n	8009a6c <PrepareFrame+0x50>
 8009b92:	bf00      	nop
 8009b94:	200006d0 	.word	0x200006d0
 8009b98:	20000bd8 	.word	0x20000bd8
 8009b9c:	20000b58 	.word	0x20000b58
 8009ba0:	200007e8 	.word	0x200007e8

08009ba4 <Send>:
{
 8009ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba8:	b08a      	sub	sp, #40	; 0x28
 8009baa:	4617      	mov	r7, r2
 8009bac:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009bae:	4c47      	ldr	r4, [pc, #284]	; (8009ccc <Send+0x128>)
 8009bb0:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8009bb4:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009bb8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009bba:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009bbc:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f000 8081 	beq.w	8009cc8 <Send+0x124>
 8009bc6:	4605      	mov	r5, r0
 8009bc8:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8009bca:	f894 30ff 	ldrb.w	r3, [r4, #255]	; 0xff
 8009bce:	b90b      	cbnz	r3, 8009bd4 <Send+0x30>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 8009bd4:	2100      	movs	r1, #0
    fCtrl.Bits.FOptsLen      = 0;
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	f361 0303 	bfi	r3, r1, #0, #4
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8009bdc:	483b      	ldr	r0, [pc, #236]	; (8009ccc <Send+0x128>)
 8009bde:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
 8009be2:	f361 13c7 	bfi	r3, r1, #7, #1
 8009be6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009bea:	f890 30fc 	ldrb.w	r3, [r0, #252]	; 0xfc
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d057      	beq.n	8009ca2 <Send+0xfe>
        fCtrl.Bits.FPending      = 0;
 8009bf2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009bf6:	f36f 1304 	bfc	r3, #4, #1
 8009bfa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8009bfe:	4b33      	ldr	r3, [pc, #204]	; (8009ccc <Send+0x128>)
 8009c00:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009c04:	b12b      	cbz	r3, 8009c12 <Send+0x6e>
        fCtrl.Bits.Ack = 1;
 8009c06:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009c0a:	f043 0320 	orr.w	r3, r3, #32
 8009c0e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.Version = Nvm.MacGroup2.Version;
 8009c12:	4c2e      	ldr	r4, [pc, #184]	; (8009ccc <Send+0x128>)
 8009c14:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8009c18:	9303      	str	r3, [sp, #12]
    adrNext.UpdateChanMask = true;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	f88d 3010 	strb.w	r3, [sp, #16]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8009c20:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009c24:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8009c26:	4b2a      	ldr	r3, [pc, #168]	; (8009cd0 <Send+0x12c>)
 8009c28:	f8b3 23f4 	ldrh.w	r2, [r3, #1012]	; 0x3f4
 8009c2c:	f8ad 2018 	strh.w	r2, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8009c30:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8009c34:	f8ad 301a 	strh.w	r3, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009c38:	f88d a01c 	strb.w	sl, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009c3c:	f88d 901d 	strb.w	r9, [sp, #29]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009c40:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8009c44:	f88d 301e 	strb.w	r3, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 8009c48:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8009c4c:	f88d 301f 	strb.w	r3, [sp, #31]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009c50:	ab08      	add	r3, sp, #32
 8009c52:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8009c56:	f104 0139 	add.w	r1, r4, #57	; 0x39
 8009c5a:	a803      	add	r0, sp, #12
 8009c5c:	f001 f85f 	bl	800ad1e <LoRaMacAdrCalcNext>
 8009c60:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009c64:	f360 1386 	bfi	r3, r0, #6, #1
 8009c68:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8009c6c:	f8cd 8000 	str.w	r8, [sp]
 8009c70:	463b      	mov	r3, r7
 8009c72:	4632      	mov	r2, r6
 8009c74:	a909      	add	r1, sp, #36	; 0x24
 8009c76:	4628      	mov	r0, r5
 8009c78:	f7ff fed0 	bl	8009a1c <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8009c7c:	4604      	mov	r4, r0
 8009c7e:	b108      	cbz	r0, 8009c84 <Send+0xe0>
 8009c80:	280a      	cmp	r0, #10
 8009c82:	d104      	bne.n	8009c8e <Send+0xea>
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8009c84:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8009c88:	f7ff f9da 	bl	8009040 <ScheduleTx>
 8009c8c:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 8009c8e:	b17c      	cbz	r4, 8009cb0 <Send+0x10c>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8009c90:	4b0e      	ldr	r3, [pc, #56]	; (8009ccc <Send+0x128>)
 8009c92:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8009c96:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	b00a      	add	sp, #40	; 0x28
 8009c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 8009ca2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009ca6:	f043 0310 	orr.w	r3, r3, #16
 8009caa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8009cae:	e7a6      	b.n	8009bfe <Send+0x5a>
        Nvm.MacGroup1.SrvAckRequested = false;
 8009cb0:	4b06      	ldr	r3, [pc, #24]	; (8009ccc <Send+0x128>)
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8009cb8:	9a08      	ldr	r2, [sp, #32]
 8009cba:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8009cbc:	f001 f936 	bl	800af2c <LoRaMacCommandsRemoveNoneStickyCmds>
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d0ea      	beq.n	8009c9a <Send+0xf6>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009cc4:	2413      	movs	r4, #19
 8009cc6:	e7e8      	b.n	8009c9a <Send+0xf6>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8009cc8:	2407      	movs	r4, #7
 8009cca:	e7e6      	b.n	8009c9a <Send+0xf6>
 8009ccc:	20000bd8 	.word	0x20000bd8
 8009cd0:	200006d0 	.word	0x200006d0

08009cd4 <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009cd4:	4b07      	ldr	r3, [pc, #28]	; (8009cf4 <LoRaMacIsBusy+0x20>)
 8009cd6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009cda:	b933      	cbnz	r3, 8009cea <LoRaMacIsBusy+0x16>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8009cdc:	4b05      	ldr	r3, [pc, #20]	; (8009cf4 <LoRaMacIsBusy+0x20>)
 8009cde:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d003      	beq.n	8009cee <LoRaMacIsBusy+0x1a>
    return true;
 8009ce6:	2001      	movs	r0, #1
 8009ce8:	4770      	bx	lr
 8009cea:	2001      	movs	r0, #1
 8009cec:	4770      	bx	lr
        return false;
 8009cee:	2000      	movs	r0, #0
}
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	200006d0 	.word	0x200006d0

08009cf8 <LoRaMacProcess>:
{
 8009cf8:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 8009cfa:	f7fe ffd7 	bl	8008cac <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8009cfe:	f001 f83c 	bl	800ad7a <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8009d02:	4b15      	ldr	r3, [pc, #84]	; (8009d58 <LoRaMacProcess+0x60>)
 8009d04:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8009d08:	f013 0f20 	tst.w	r3, #32
 8009d0c:	d107      	bne.n	8009d1e <LoRaMacProcess+0x26>
    LoRaMacHandleIndicationEvents( );
 8009d0e:	f7fd fea9 	bl	8007a64 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8009d12:	4b11      	ldr	r3, [pc, #68]	; (8009d58 <LoRaMacProcess+0x60>)
 8009d14:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8009d18:	2b02      	cmp	r3, #2
 8009d1a:	d01a      	beq.n	8009d52 <LoRaMacProcess+0x5a>
}
 8009d1c:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8009d1e:	2000      	movs	r0, #0
 8009d20:	f7fd fe9a 	bl	8007a58 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8009d24:	f7fd fee8 	bl	8007af8 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 8009d28:	f7fd ffc4 	bl	8007cb4 <IsRequestPending>
 8009d2c:	b110      	cbz	r0, 8009d34 <LoRaMacProcess+0x3c>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8009d2e:	f7fe f8e9 	bl	8007f04 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 8009d32:	b918      	cbnz	r0, 8009d3c <LoRaMacProcess+0x44>
            LoRaMacHandleMlmeRequest( );
 8009d34:	f7fe ffe8 	bl	8008d08 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8009d38:	f7ff fa2e 	bl	8009198 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 8009d3c:	f7ff fa78 	bl	8009230 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 8009d40:	f7ff fac0 	bl	80092c4 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 8009d44:	4805      	ldr	r0, [pc, #20]	; (8009d5c <LoRaMacProcess+0x64>)
 8009d46:	f7ff fad5 	bl	80092f4 <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8009d4a:	2001      	movs	r0, #1
 8009d4c:	f7fd fe84 	bl	8007a58 <LoRaMacEnableRequests>
 8009d50:	e7dd      	b.n	8009d0e <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 8009d52:	f7ff fbbf 	bl	80094d4 <OpenContinuousRxCWindow>
}
 8009d56:	e7e1      	b.n	8009d1c <LoRaMacProcess+0x24>
 8009d58:	200006d0 	.word	0x200006d0
 8009d5c:	20000bd8 	.word	0x20000bd8

08009d60 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8009d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d64:	b08b      	sub	sp, #44	; 0x2c
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8009d66:	2800      	cmp	r0, #0
 8009d68:	f000 8190 	beq.w	800a08c <LoRaMacInitialization+0x32c>
 8009d6c:	460e      	mov	r6, r1
 8009d6e:	4691      	mov	r9, r2
 8009d70:	4680      	mov	r8, r0
 8009d72:	2900      	cmp	r1, #0
 8009d74:	f000 818c 	beq.w	800a090 <LoRaMacInitialization+0x330>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8009d78:	6803      	ldr	r3, [r0, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f000 818a 	beq.w	800a094 <LoRaMacInitialization+0x334>
        ( primitives->MacMcpsIndication == NULL ) ||
 8009d80:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f000 8188 	beq.w	800a098 <LoRaMacInitialization+0x338>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8009d88:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f000 8186 	beq.w	800a09c <LoRaMacInitialization+0x33c>
        ( primitives->MacMlmeIndication == NULL ) )
 8009d90:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f000 8184 	beq.w	800a0a0 <LoRaMacInitialization+0x340>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8009d98:	4610      	mov	r0, r2
 8009d9a:	f001 ffa6 	bl	800bcea <RegionIsActive>
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	f000 8180 	beq.w	800a0a4 <LoRaMacInitialization+0x344>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8009da4:	4640      	mov	r0, r8
 8009da6:	f001 f9a3 	bl	800b0f0 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8009daa:	4cc5      	ldr	r4, [pc, #788]	; (800a0c0 <LoRaMacInitialization+0x360>)
 8009dac:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 8009db0:	2100      	movs	r1, #0
 8009db2:	4620      	mov	r0, r4
 8009db4:	f00a fb7d 	bl	80144b2 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8009db8:	4dc2      	ldr	r5, [pc, #776]	; (800a0c4 <LoRaMacInitialization+0x364>)
 8009dba:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8009dbe:	2100      	movs	r1, #0
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	f00a fb76 	bl	80144b2 <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8009dc6:	f04f 0a01 	mov.w	sl, #1
 8009dca:	f885 a412 	strb.w	sl, [r5, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8009dce:	f885 a411 	strb.w	sl, [r5, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 8009dd2:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8009dd6:	2700      	movs	r7, #0
 8009dd8:	f884 70fc 	strb.w	r7, [r4, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8009ddc:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8009de0:	4bb9      	ldr	r3, [pc, #740]	; (800a0c8 <LoRaMacInitialization+0x368>)
 8009de2:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8009de6:	230f      	movs	r3, #15
 8009de8:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009dec:	a908      	add	r1, sp, #32
 8009dee:	4648      	mov	r0, r9
 8009df0:	f001 ff87 	bl	800bd02 <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8009df4:	1bc0      	subs	r0, r0, r7
 8009df6:	bf18      	it	ne
 8009df8:	2001      	movne	r0, #1
 8009dfa:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8009dfe:	f04f 0b0a 	mov.w	fp, #10
 8009e02:	f88d b020 	strb.w	fp, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009e06:	a908      	add	r1, sp, #32
 8009e08:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009e0c:	f001 ff79 	bl	800bd02 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8009e10:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 8009e14:	f04f 0906 	mov.w	r9, #6
 8009e18:	f88d 9020 	strb.w	r9, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009e1c:	a908      	add	r1, sp, #32
 8009e1e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009e22:	f001 ff6e 	bl	800bd02 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8009e26:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8009e2a:	2310      	movs	r3, #16
 8009e2c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009e30:	a908      	add	r1, sp, #32
 8009e32:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009e36:	f001 ff64 	bl	800bd02 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8009e3a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8009e3e:	2311      	movs	r3, #17
 8009e40:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009e44:	a908      	add	r1, sp, #32
 8009e46:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009e4a:	f001 ff5a 	bl	800bd02 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8009e4e:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8009e52:	2312      	movs	r3, #18
 8009e54:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009e58:	a908      	add	r1, sp, #32
 8009e5a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009e5e:	f001 ff50 	bl	800bd02 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8009e62:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8009e66:	2313      	movs	r3, #19
 8009e68:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009e6c:	a908      	add	r1, sp, #32
 8009e6e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009e72:	f001 ff46 	bl	800bd02 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8009e76:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8009e7a:	2314      	movs	r3, #20
 8009e7c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009e80:	a908      	add	r1, sp, #32
 8009e82:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009e86:	f001 ff3c 	bl	800bd02 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8009e8a:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8009e8e:	2317      	movs	r3, #23
 8009e90:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009e94:	a908      	add	r1, sp, #32
 8009e96:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009e9a:	f001 ff32 	bl	800bd02 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8009e9e:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8009ea2:	2318      	movs	r3, #24
 8009ea4:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009ea8:	a908      	add	r1, sp, #32
 8009eaa:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009eae:	f001 ff28 	bl	800bd02 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8009eb2:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8009eb6:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8009eba:	2319      	movs	r3, #25
 8009ebc:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009ec0:	a908      	add	r1, sp, #32
 8009ec2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009ec6:	f001 ff1c 	bl	800bd02 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8009eca:	b2c0      	uxtb	r0, r0
 8009ecc:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8009ed0:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8009ed4:	231e      	movs	r3, #30
 8009ed6:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009eda:	a908      	add	r1, sp, #32
 8009edc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009ee0:	f001 ff0f 	bl	800bd02 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8009ee4:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8009ee8:	231f      	movs	r3, #31
 8009eea:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009eee:	a908      	add	r1, sp, #32
 8009ef0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009ef4:	f001 ff05 	bl	800bd02 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8009ef8:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8009efc:	2320      	movs	r3, #32
 8009efe:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009f02:	eb0d 0103 	add.w	r1, sp, r3
 8009f06:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009f0a:	f001 fefa 	bl	800bd02 <RegionGetPhyParam>
 8009f0e:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8009f10:	9b07      	ldr	r3, [sp, #28]
 8009f12:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8009f16:	2321      	movs	r3, #33	; 0x21
 8009f18:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009f1c:	a908      	add	r1, sp, #32
 8009f1e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009f22:	f001 feee 	bl	800bd02 <RegionGetPhyParam>
 8009f26:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8009f28:	9b07      	ldr	r3, [sp, #28]
 8009f2a:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8009f2e:	230b      	movs	r3, #11
 8009f30:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009f34:	a908      	add	r1, sp, #32
 8009f36:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009f3a:	f001 fee2 	bl	800bd02 <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;
 8009f3e:	f8a5 03f4 	strh.w	r0, [r5, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8009f42:	230c      	movs	r3, #12
 8009f44:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009f48:	a908      	add	r1, sp, #32
 8009f4a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009f4e:	f001 fed8 	bl	800bd02 <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;
 8009f52:	f8a5 03f6 	strh.w	r0, [r5, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8009f56:	f884 a0a0 	strb.w	sl, [r4, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8009f5a:	f8c4 b084 	str.w	fp, [r4, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8009f5e:	f884 9088 	strb.w	r9, [r4, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8009f62:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8009f66:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8009f6a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009f6e:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8009f70:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009f74:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8009f76:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009f7a:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8009f7c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009f80:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8009f82:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8009f86:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8009f88:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8009f8c:	f88d 7018 	strb.w	r7, [sp, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8009f90:	f504 73ec 	add.w	r3, r4, #472	; 0x1d8
 8009f94:	9304      	str	r3, [sp, #16]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8009f96:	f504 731f 	add.w	r3, r4, #636	; 0x27c
 8009f9a:	9305      	str	r3, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8009f9c:	a904      	add	r1, sp, #16
 8009f9e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009fa2:	f001 ff1c 	bl	800bdde <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 8009fa6:	f8c5 6348 	str.w	r6, [r5, #840]	; 0x348
    ResetMacParameters( );
 8009faa:	f7ff fbbb 	bl	8009724 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8009fae:	f884 a0fd 	strb.w	sl, [r4, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 8009fb2:	f8c5 8344 	str.w	r8, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8009fb6:	f885 7481 	strb.w	r7, [r5, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8009fba:	f8c5 a340 	str.w	sl, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8009fbe:	62e7      	str	r7, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8009fc0:	6327      	str	r7, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8009fc2:	9700      	str	r7, [sp, #0]
 8009fc4:	4b41      	ldr	r3, [pc, #260]	; (800a0cc <LoRaMacInitialization+0x36c>)
 8009fc6:	463a      	mov	r2, r7
 8009fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8009fcc:	f505 705a 	add.w	r0, r5, #872	; 0x368
 8009fd0:	f00c febe 	bl	8016d50 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8009fd4:	9700      	str	r7, [sp, #0]
 8009fd6:	4b3e      	ldr	r3, [pc, #248]	; (800a0d0 <LoRaMacInitialization+0x370>)
 8009fd8:	463a      	mov	r2, r7
 8009fda:	f04f 31ff 	mov.w	r1, #4294967295
 8009fde:	f505 7060 	add.w	r0, r5, #896	; 0x380
 8009fe2:	f00c feb5 	bl	8016d50 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8009fe6:	9700      	str	r7, [sp, #0]
 8009fe8:	4b3a      	ldr	r3, [pc, #232]	; (800a0d4 <LoRaMacInitialization+0x374>)
 8009fea:	463a      	mov	r2, r7
 8009fec:	f04f 31ff 	mov.w	r1, #4294967295
 8009ff0:	f505 7066 	add.w	r0, r5, #920	; 0x398
 8009ff4:	f00c feac 	bl	8016d50 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8009ff8:	9700      	str	r7, [sp, #0]
 8009ffa:	4b37      	ldr	r3, [pc, #220]	; (800a0d8 <LoRaMacInitialization+0x378>)
 8009ffc:	463a      	mov	r2, r7
 8009ffe:	f04f 31ff 	mov.w	r1, #4294967295
 800a002:	f505 707e 	add.w	r0, r5, #1016	; 0x3f8
 800a006:	f00c fea3 	bl	8016d50 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800a00a:	af02      	add	r7, sp, #8
 800a00c:	4638      	mov	r0, r7
 800a00e:	f00c fe33 	bl	8016c78 <SysTimeGetMcuTime>
 800a012:	f504 7382 	add.w	r3, r4, #260	; 0x104
 800a016:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a01a:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800a01e:	4b2f      	ldr	r3, [pc, #188]	; (800a0dc <LoRaMacInitialization+0x37c>)
 800a020:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800a024:	4b2e      	ldr	r3, [pc, #184]	; (800a0e0 <LoRaMacInitialization+0x380>)
 800a026:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800a02a:	4b2e      	ldr	r3, [pc, #184]	; (800a0e4 <LoRaMacInitialization+0x384>)
 800a02c:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800a030:	4b2d      	ldr	r3, [pc, #180]	; (800a0e8 <LoRaMacInitialization+0x388>)
 800a032:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800a036:	4b2d      	ldr	r3, [pc, #180]	; (800a0ec <LoRaMacInitialization+0x38c>)
 800a038:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800a03c:	4b2c      	ldr	r3, [pc, #176]	; (800a0f0 <LoRaMacInitialization+0x390>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 800a044:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 800a046:	68b1      	ldr	r1, [r6, #8]
 800a048:	f504 708c 	add.w	r0, r4, #280	; 0x118
 800a04c:	f00a f834 	bl	80140b8 <SecureElementInit>
 800a050:	bb68      	cbnz	r0, 800a0ae <LoRaMacInitialization+0x34e>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800a052:	4620      	mov	r0, r4
 800a054:	f001 fadc 	bl	800b610 <LoRaMacCryptoInit>
 800a058:	bb58      	cbnz	r0, 800a0b2 <LoRaMacInitialization+0x352>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800a05a:	f000 ff11 	bl	800ae80 <LoRaMacCommandsInit>
 800a05e:	bb50      	cbnz	r0, 800a0b6 <LoRaMacInitialization+0x356>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800a060:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a064:	f001 fb3c 	bl	800b6e0 <LoRaMacCryptoSetMulticastReference>
 800a068:	4604      	mov	r4, r0
 800a06a:	bb30      	cbnz	r0, 800a0ba <LoRaMacInitialization+0x35a>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800a06c:	4d20      	ldr	r5, [pc, #128]	; (800a0f0 <LoRaMacInitialization+0x390>)
 800a06e:	696b      	ldr	r3, [r5, #20]
 800a070:	4798      	blx	r3
 800a072:	f00a f9f5 	bl	8014460 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800a076:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800a078:	4a11      	ldr	r2, [pc, #68]	; (800a0c0 <LoRaMacInitialization+0x360>)
 800a07a:	f892 00fd 	ldrb.w	r0, [r2, #253]	; 0xfd
 800a07e:	4798      	blx	r3
    Radio.Sleep( );
 800a080:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a082:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a084:	4650      	mov	r0, sl
 800a086:	f7fd fce7 	bl	8007a58 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800a08a:	e00c      	b.n	800a0a6 <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a08c:	2403      	movs	r4, #3
 800a08e:	e00a      	b.n	800a0a6 <LoRaMacInitialization+0x346>
 800a090:	2403      	movs	r4, #3
 800a092:	e008      	b.n	800a0a6 <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a094:	2403      	movs	r4, #3
 800a096:	e006      	b.n	800a0a6 <LoRaMacInitialization+0x346>
 800a098:	2403      	movs	r4, #3
 800a09a:	e004      	b.n	800a0a6 <LoRaMacInitialization+0x346>
 800a09c:	2403      	movs	r4, #3
 800a09e:	e002      	b.n	800a0a6 <LoRaMacInitialization+0x346>
 800a0a0:	2403      	movs	r4, #3
 800a0a2:	e000      	b.n	800a0a6 <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800a0a4:	2409      	movs	r4, #9
}
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	b00b      	add	sp, #44	; 0x2c
 800a0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a0ae:	2411      	movs	r4, #17
 800a0b0:	e7f9      	b.n	800a0a6 <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a0b2:	2411      	movs	r4, #17
 800a0b4:	e7f7      	b.n	800a0a6 <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a0b6:	2413      	movs	r4, #19
 800a0b8:	e7f5      	b.n	800a0a6 <LoRaMacInitialization+0x346>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a0ba:	2411      	movs	r4, #17
 800a0bc:	e7f3      	b.n	800a0a6 <LoRaMacInitialization+0x346>
 800a0be:	bf00      	nop
 800a0c0:	20000bd8 	.word	0x20000bd8
 800a0c4:	200006d0 	.word	0x200006d0
 800a0c8:	01000300 	.word	0x01000300
 800a0cc:	08009149 	.word	0x08009149
 800a0d0:	080095c5 	.word	0x080095c5
 800a0d4:	08009575 	.word	0x08009575
 800a0d8:	08007e81 	.word	0x08007e81
 800a0dc:	080096cd 	.word	0x080096cd
 800a0e0:	08009675 	.word	0x08009675
 800a0e4:	08007a0d 	.word	0x08007a0d
 800a0e8:	08009641 	.word	0x08009641
 800a0ec:	0800960d 	.word	0x0800960d
 800a0f0:	08018318 	.word	0x08018318

0800a0f4 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	4b02      	ldr	r3, [pc, #8]	; (800a100 <LoRaMacStart+0xc>)
 800a0f8:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
}
 800a0fc:	4770      	bx	lr
 800a0fe:	bf00      	nop
 800a100:	200006d0 	.word	0x200006d0

0800a104 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800a104:	b530      	push	{r4, r5, lr}
 800a106:	b089      	sub	sp, #36	; 0x24
 800a108:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a10a:	4b2f      	ldr	r3, [pc, #188]	; (800a1c8 <LoRaMacQueryTxPossible+0xc4>)
 800a10c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a10e:	9202      	str	r2, [sp, #8]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a110:	f993 00c5 	ldrsb.w	r0, [r3, #197]	; 0xc5
 800a114:	f88d 0007 	strb.w	r0, [sp, #7]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a118:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 800a11c:	f88d 3006 	strb.w	r3, [sp, #6]
    size_t macCmdsSize = 0;
 800a120:	2300      	movs	r3, #0
 800a122:	9300      	str	r3, [sp, #0]

    if( txInfo == NULL )
 800a124:	2900      	cmp	r1, #0
 800a126:	d048      	beq.n	800a1ba <LoRaMacQueryTxPossible+0xb6>
 800a128:	460d      	mov	r5, r1
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 800a12a:	4b27      	ldr	r3, [pc, #156]	; (800a1c8 <LoRaMacQueryTxPossible+0xc4>)
 800a12c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800a130:	9103      	str	r1, [sp, #12]
    adrNext.UpdateChanMask = false;
 800a132:	2100      	movs	r1, #0
 800a134:	f88d 1010 	strb.w	r1, [sp, #16]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800a138:	f893 10fe 	ldrb.w	r1, [r3, #254]	; 0xfe
 800a13c:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a140:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800a142:	4a22      	ldr	r2, [pc, #136]	; (800a1cc <LoRaMacQueryTxPossible+0xc8>)
 800a144:	f8b2 13f4 	ldrh.w	r1, [r2, #1012]	; 0x3f4
 800a148:	f8ad 1018 	strh.w	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800a14c:	f8b2 23f6 	ldrh.w	r2, [r2, #1014]	; 0x3f6
 800a150:	f8ad 201a 	strh.w	r2, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a154:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800a158:	f88d 201c 	strb.w	r2, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a15c:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 800a160:	f88d 201d 	strb.w	r2, [sp, #29]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a164:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800a168:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 800a16c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a170:	f88d 301f 	strb.w	r3, [sp, #31]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800a174:	ab02      	add	r3, sp, #8
 800a176:	f10d 0206 	add.w	r2, sp, #6
 800a17a:	f10d 0107 	add.w	r1, sp, #7
 800a17e:	a803      	add	r0, sp, #12
 800a180:	f000 fdcd 	bl	800ad1e <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800a184:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800a188:	f7fd fdcc 	bl	8007d24 <GetMaxAppPayloadWithoutFOptsLength>
 800a18c:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a18e:	4668      	mov	r0, sp
 800a190:	f000 fef8 	bl	800af84 <LoRaMacCommandsGetSizeSerializedCmds>
 800a194:	b998      	cbnz	r0, 800a1be <LoRaMacQueryTxPossible+0xba>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800a196:	9b00      	ldr	r3, [sp, #0]
 800a198:	2b0f      	cmp	r3, #15
 800a19a:	d80a      	bhi.n	800a1b2 <LoRaMacQueryTxPossible+0xae>
 800a19c:	786a      	ldrb	r2, [r5, #1]
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d807      	bhi.n	800a1b2 <LoRaMacQueryTxPossible+0xae>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800a1a2:	1ad3      	subs	r3, r2, r3
 800a1a4:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800a1a6:	9b00      	ldr	r3, [sp, #0]
 800a1a8:	441c      	add	r4, r3
 800a1aa:	42a2      	cmp	r2, r4
 800a1ac:	d309      	bcc.n	800a1c2 <LoRaMacQueryTxPossible+0xbe>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800a1ae:	b009      	add	sp, #36	; 0x24
 800a1b0:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800a1b6:	2008      	movs	r0, #8
 800a1b8:	e7f9      	b.n	800a1ae <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a1ba:	2003      	movs	r0, #3
 800a1bc:	e7f7      	b.n	800a1ae <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a1be:	2013      	movs	r0, #19
 800a1c0:	e7f5      	b.n	800a1ae <LoRaMacQueryTxPossible+0xaa>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800a1c2:	2008      	movs	r0, #8
 800a1c4:	e7f3      	b.n	800a1ae <LoRaMacQueryTxPossible+0xaa>
 800a1c6:	bf00      	nop
 800a1c8:	20000bd8 	.word	0x20000bd8
 800a1cc:	200006d0 	.word	0x200006d0

0800a1d0 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	f000 8109 	beq.w	800a3e8 <LoRaMacMibGetRequestConfirm+0x218>
{
 800a1d6:	b510      	push	{r4, lr}
 800a1d8:	b084      	sub	sp, #16
 800a1da:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800a1dc:	7800      	ldrb	r0, [r0, #0]
 800a1de:	2828      	cmp	r0, #40	; 0x28
 800a1e0:	f200 80fe 	bhi.w	800a3e0 <LoRaMacMibGetRequestConfirm+0x210>
 800a1e4:	e8df f010 	tbh	[pc, r0, lsl #1]
 800a1e8:	002f0029 	.word	0x002f0029
 800a1ec:	003a0035 	.word	0x003a0035
 800a1f0:	0045003f 	.word	0x0045003f
 800a1f4:	00fc004b 	.word	0x00fc004b
 800a1f8:	00fc00fc 	.word	0x00fc00fc
 800a1fc:	00fc00fc 	.word	0x00fc00fc
 800a200:	00fc00fc 	.word	0x00fc00fc
 800a204:	005100fc 	.word	0x005100fc
 800a208:	005d0057 	.word	0x005d0057
 800a20c:	00710069 	.word	0x00710069
 800a210:	00810079 	.word	0x00810079
 800a214:	00890095 	.word	0x00890095
 800a218:	00a700a1 	.word	0x00a700a1
 800a21c:	00b100ac 	.word	0x00b100ac
 800a220:	00bb00b6 	.word	0x00bb00b6
 800a224:	00c600c0 	.word	0x00c600c0
 800a228:	00cc00d2 	.word	0x00cc00d2
 800a22c:	00dd00d8 	.word	0x00dd00d8
 800a230:	00ed00e3 	.word	0x00ed00e3
 800a234:	00fc00e8 	.word	0x00fc00e8
 800a238:	00f3      	.short	0x00f3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800a23a:	4b6c      	ldr	r3, [pc, #432]	; (800a3ec <LoRaMacMibGetRequestConfirm+0x21c>)
 800a23c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800a240:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800a242:	b004      	add	sp, #16
 800a244:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a246:	4b69      	ldr	r3, [pc, #420]	; (800a3ec <LoRaMacMibGetRequestConfirm+0x21c>)
 800a248:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800a24c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a24e:	2000      	movs	r0, #0
            break;
 800a250:	e7f7      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800a252:	f00a f8d1 	bl	80143f8 <SecureElementGetDevEui>
 800a256:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a258:	2000      	movs	r0, #0
            break;
 800a25a:	e7f2      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800a25c:	f00a f8e2 	bl	8014424 <SecureElementGetJoinEui>
 800a260:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a262:	2000      	movs	r0, #0
            break;
 800a264:	e7ed      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800a266:	4b61      	ldr	r3, [pc, #388]	; (800a3ec <LoRaMacMibGetRequestConfirm+0x21c>)
 800a268:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800a26c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a26e:	2000      	movs	r0, #0
            break;
 800a270:	e7e7      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800a272:	4b5e      	ldr	r3, [pc, #376]	; (800a3ec <LoRaMacMibGetRequestConfirm+0x21c>)
 800a274:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800a278:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a27a:	2000      	movs	r0, #0
            break;
 800a27c:	e7e1      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 800a27e:	4b5b      	ldr	r3, [pc, #364]	; (800a3ec <LoRaMacMibGetRequestConfirm+0x21c>)
 800a280:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800a284:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a286:	2000      	movs	r0, #0
            break;
 800a288:	e7db      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800a28a:	4b58      	ldr	r3, [pc, #352]	; (800a3ec <LoRaMacMibGetRequestConfirm+0x21c>)
 800a28c:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 800a290:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a292:	2000      	movs	r0, #0
            break;
 800a294:	e7d5      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800a296:	4b55      	ldr	r3, [pc, #340]	; (800a3ec <LoRaMacMibGetRequestConfirm+0x21c>)
 800a298:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a29c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a29e:	2000      	movs	r0, #0
            break;
 800a2a0:	e7cf      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS;
 800a2a2:	231d      	movs	r3, #29
 800a2a4:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a2a8:	a902      	add	r1, sp, #8
 800a2aa:	4b50      	ldr	r3, [pc, #320]	; (800a3ec <LoRaMacMibGetRequestConfirm+0x21c>)
 800a2ac:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a2b0:	f001 fd27 	bl	800bd02 <RegionGetPhyParam>
            mibGet->Param.ChannelList = phyParam.Channels;
 800a2b4:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a2b6:	2000      	movs	r0, #0
            break;
 800a2b8:	e7c3      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800a2ba:	3404      	adds	r4, #4
 800a2bc:	4b4c      	ldr	r3, [pc, #304]	; (800a3f0 <LoRaMacMibGetRequestConfirm+0x220>)
 800a2be:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a2c2:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a2c6:	2000      	movs	r0, #0
            break;
 800a2c8:	e7bb      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800a2ca:	3404      	adds	r4, #4
 800a2cc:	4b49      	ldr	r3, [pc, #292]	; (800a3f4 <LoRaMacMibGetRequestConfirm+0x224>)
 800a2ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a2d2:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a2d6:	2000      	movs	r0, #0
            break;
 800a2d8:	e7b3      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800a2da:	3404      	adds	r4, #4
 800a2dc:	4b46      	ldr	r3, [pc, #280]	; (800a3f8 <LoRaMacMibGetRequestConfirm+0x228>)
 800a2de:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a2e2:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a2e6:	2000      	movs	r0, #0
            break;
 800a2e8:	e7ab      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800a2ea:	3404      	adds	r4, #4
 800a2ec:	4b43      	ldr	r3, [pc, #268]	; (800a3fc <LoRaMacMibGetRequestConfirm+0x22c>)
 800a2ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a2f2:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a2f6:	2000      	movs	r0, #0
            break;
 800a2f8:	e7a3      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800a2fa:	231b      	movs	r3, #27
 800a2fc:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a300:	a902      	add	r1, sp, #8
 800a302:	4b3a      	ldr	r3, [pc, #232]	; (800a3ec <LoRaMacMibGetRequestConfirm+0x21c>)
 800a304:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a308:	f001 fcfb 	bl	800bd02 <RegionGetPhyParam>
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800a30c:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a30e:	2000      	movs	r0, #0
            break;
 800a310:	e797      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800a312:	231a      	movs	r3, #26
 800a314:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a318:	a902      	add	r1, sp, #8
 800a31a:	4b34      	ldr	r3, [pc, #208]	; (800a3ec <LoRaMacMibGetRequestConfirm+0x21c>)
 800a31c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a320:	f001 fcef 	bl	800bd02 <RegionGetPhyParam>
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800a324:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a326:	2000      	movs	r0, #0
            break;
 800a328:	e78b      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800a32a:	4b30      	ldr	r3, [pc, #192]	; (800a3ec <LoRaMacMibGetRequestConfirm+0x21c>)
 800a32c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a330:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a332:	2000      	movs	r0, #0
            break;
 800a334:	e785      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800a336:	4b2d      	ldr	r3, [pc, #180]	; (800a3ec <LoRaMacMibGetRequestConfirm+0x21c>)
 800a338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a33a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a33c:	2000      	movs	r0, #0
            break;
 800a33e:	e780      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800a340:	4b2a      	ldr	r3, [pc, #168]	; (800a3ec <LoRaMacMibGetRequestConfirm+0x21c>)
 800a342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a344:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a346:	2000      	movs	r0, #0
            break;
 800a348:	e77b      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800a34a:	4b28      	ldr	r3, [pc, #160]	; (800a3ec <LoRaMacMibGetRequestConfirm+0x21c>)
 800a34c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a34e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a350:	2000      	movs	r0, #0
            break;
 800a352:	e776      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800a354:	4b25      	ldr	r3, [pc, #148]	; (800a3ec <LoRaMacMibGetRequestConfirm+0x21c>)
 800a356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a358:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a35a:	2000      	movs	r0, #0
            break;
 800a35c:	e771      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800a35e:	4b23      	ldr	r3, [pc, #140]	; (800a3ec <LoRaMacMibGetRequestConfirm+0x21c>)
 800a360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a362:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a364:	2000      	movs	r0, #0
            break;
 800a366:	e76c      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a368:	4b20      	ldr	r3, [pc, #128]	; (800a3ec <LoRaMacMibGetRequestConfirm+0x21c>)
 800a36a:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 800a36e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a370:	2000      	movs	r0, #0
            break;
 800a372:	e766      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800a374:	4b1d      	ldr	r3, [pc, #116]	; (800a3ec <LoRaMacMibGetRequestConfirm+0x21c>)
 800a376:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800a37a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a37c:	2000      	movs	r0, #0
            break;
 800a37e:	e760      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a380:	4b1a      	ldr	r3, [pc, #104]	; (800a3ec <LoRaMacMibGetRequestConfirm+0x21c>)
 800a382:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 800a386:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a388:	2000      	movs	r0, #0
            break;
 800a38a:	e75a      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a38c:	4b17      	ldr	r3, [pc, #92]	; (800a3ec <LoRaMacMibGetRequestConfirm+0x21c>)
 800a38e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800a392:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a394:	2000      	movs	r0, #0
            break;
 800a396:	e754      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800a398:	4b14      	ldr	r3, [pc, #80]	; (800a3ec <LoRaMacMibGetRequestConfirm+0x21c>)
 800a39a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a39c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a39e:	2000      	movs	r0, #0
            break;
 800a3a0:	e74f      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800a3a2:	4b12      	ldr	r3, [pc, #72]	; (800a3ec <LoRaMacMibGetRequestConfirm+0x21c>)
 800a3a4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a3a8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a3aa:	2000      	movs	r0, #0
            break;
 800a3ac:	e749      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800a3ae:	4b0f      	ldr	r3, [pc, #60]	; (800a3ec <LoRaMacMibGetRequestConfirm+0x21c>)
 800a3b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3b2:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a3b4:	2000      	movs	r0, #0
            break;
 800a3b6:	e744      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.Contexts = GetNvmData( );
 800a3b8:	f7fd fbde 	bl	8007b78 <GetNvmData>
 800a3bc:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a3be:	2000      	movs	r0, #0
            break;
 800a3c0:	e73f      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800a3c2:	4b0a      	ldr	r3, [pc, #40]	; (800a3ec <LoRaMacMibGetRequestConfirm+0x21c>)
 800a3c4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a3c8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a3ca:	2000      	movs	r0, #0
            break;
 800a3cc:	e739      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800a3ce:	4b07      	ldr	r3, [pc, #28]	; (800a3ec <LoRaMacMibGetRequestConfirm+0x21c>)
 800a3d0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a3d4:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800a3d6:	f001 ffff 	bl	800c3d8 <RegionGetVersion>
 800a3da:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a3dc:	2000      	movs	r0, #0
            break;
 800a3de:	e730      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	f000 fcbc 	bl	800ad5e <LoRaMacClassBMibGetRequestConfirm>
            break;
 800a3e6:	e72c      	b.n	800a242 <LoRaMacMibGetRequestConfirm+0x72>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a3e8:	2003      	movs	r0, #3
}
 800a3ea:	4770      	bx	lr
 800a3ec:	20000bd8 	.word	0x20000bd8
 800a3f0:	20000c3c 	.word	0x20000c3c
 800a3f4:	20000c7c 	.word	0x20000c7c
 800a3f8:	20000c44 	.word	0x20000c44
 800a3fc:	20000c84 	.word	0x20000c84

0800a400 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800a400:	b530      	push	{r4, r5, lr}
 800a402:	b085      	sub	sp, #20
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800a404:	2800      	cmp	r0, #0
 800a406:	f000 8240 	beq.w	800a88a <LoRaMacMibSetRequestConfirm+0x48a>
 800a40a:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800a40c:	4bb1      	ldr	r3, [pc, #708]	; (800a6d4 <LoRaMacMibSetRequestConfirm+0x2d4>)
 800a40e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a412:	f013 0f02 	tst.w	r3, #2
 800a416:	f040 823a 	bne.w	800a88e <LoRaMacMibSetRequestConfirm+0x48e>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800a41a:	7804      	ldrb	r4, [r0, #0]
 800a41c:	2c27      	cmp	r4, #39	; 0x27
 800a41e:	f200 8230 	bhi.w	800a882 <LoRaMacMibSetRequestConfirm+0x482>
 800a422:	e8df f014 	tbh	[pc, r4, lsl #1]
 800a426:	0028      	.short	0x0028
 800a428:	0036002d 	.word	0x0036002d
 800a42c:	0047003f 	.word	0x0047003f
 800a430:	0053004d 	.word	0x0053004d
 800a434:	00660059 	.word	0x00660059
 800a438:	00800073 	.word	0x00800073
 800a43c:	009a008d 	.word	0x009a008d
 800a440:	00b400a7 	.word	0x00b400a7
 800a444:	00cc00c1 	.word	0x00cc00c1
 800a448:	00d2022e 	.word	0x00d2022e
 800a44c:	011000f7 	.word	0x011000f7
 800a450:	0173013d 	.word	0x0173013d
 800a454:	01830163 	.word	0x01830163
 800a458:	0193018e 	.word	0x0193018e
 800a45c:	019d0198 	.word	0x019d0198
 800a460:	01a701a2 	.word	0x01a701a2
 800a464:	01e901bc 	.word	0x01e901bc
 800a468:	01fd01d5 	.word	0x01fd01d5
 800a46c:	020c0204 	.word	0x020c0204
 800a470:	02170211 	.word	0x02170211
 800a474:	021e      	.short	0x021e
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800a476:	7900      	ldrb	r0, [r0, #4]
 800a478:	f7ff f9f6 	bl	8009868 <SwitchClass>
 800a47c:	4604      	mov	r4, r0
            break;
 800a47e:	e207      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800a480:	7903      	ldrb	r3, [r0, #4]
 800a482:	2b02      	cmp	r3, #2
 800a484:	f000 8207 	beq.w	800a896 <LoRaMacMibSetRequestConfirm+0x496>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800a488:	4a93      	ldr	r2, [pc, #588]	; (800a6d8 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800a48a:	f882 3110 	strb.w	r3, [r2, #272]	; 0x110
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a48e:	2400      	movs	r4, #0
 800a490:	e1fe      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800a492:	6840      	ldr	r0, [r0, #4]
 800a494:	f009 ffa2 	bl	80143dc <SecureElementSetDevEui>
 800a498:	4604      	mov	r4, r0
 800a49a:	2800      	cmp	r0, #0
 800a49c:	f000 81f8 	beq.w	800a890 <LoRaMacMibSetRequestConfirm+0x490>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a4a0:	2403      	movs	r4, #3
 800a4a2:	e1f5      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800a4a4:	6840      	ldr	r0, [r0, #4]
 800a4a6:	f009 ffad 	bl	8014404 <SecureElementSetJoinEui>
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	f040 81f0 	bne.w	800a890 <LoRaMacMibSetRequestConfirm+0x490>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	e1ed      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800a4b4:	7902      	ldrb	r2, [r0, #4]
 800a4b6:	4b88      	ldr	r3, [pc, #544]	; (800a6d8 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800a4b8:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a4bc:	2400      	movs	r4, #0
            break;
 800a4be:	e1e7      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800a4c0:	6842      	ldr	r2, [r0, #4]
 800a4c2:	4b85      	ldr	r3, [pc, #532]	; (800a6d8 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800a4c4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a4c8:	2400      	movs	r4, #0
            break;
 800a4ca:	e1e1      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800a4cc:	6842      	ldr	r2, [r0, #4]
 800a4ce:	4b82      	ldr	r3, [pc, #520]	; (800a6d8 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800a4d0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a4d4:	2400      	movs	r4, #0
            break;
 800a4d6:	e1db      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800a4d8:	6841      	ldr	r1, [r0, #4]
 800a4da:	2900      	cmp	r1, #0
 800a4dc:	f000 81dd 	beq.w	800a89a <LoRaMacMibSetRequestConfirm+0x49a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800a4e0:	2000      	movs	r0, #0
 800a4e2:	f001 fa19 	bl	800b918 <LoRaMacCryptoSetKey>
 800a4e6:	4604      	mov	r4, r0
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	f000 81d1 	beq.w	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a4ee:	2411      	movs	r4, #17
 800a4f0:	e1ce      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800a4f2:	6841      	ldr	r1, [r0, #4]
 800a4f4:	2900      	cmp	r1, #0
 800a4f6:	f000 81d2 	beq.w	800a89e <LoRaMacMibSetRequestConfirm+0x49e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800a4fa:	2001      	movs	r0, #1
 800a4fc:	f001 fa0c 	bl	800b918 <LoRaMacCryptoSetKey>
 800a500:	4604      	mov	r4, r0
 800a502:	2800      	cmp	r0, #0
 800a504:	f000 81c4 	beq.w	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a508:	2411      	movs	r4, #17
 800a50a:	e1c1      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800a50c:	6841      	ldr	r1, [r0, #4]
 800a50e:	2900      	cmp	r1, #0
 800a510:	f000 81c7 	beq.w	800a8a2 <LoRaMacMibSetRequestConfirm+0x4a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800a514:	2002      	movs	r0, #2
 800a516:	f001 f9ff 	bl	800b918 <LoRaMacCryptoSetKey>
 800a51a:	4604      	mov	r4, r0
 800a51c:	2800      	cmp	r0, #0
 800a51e:	f000 81b7 	beq.w	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a522:	2411      	movs	r4, #17
 800a524:	e1b4      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
            break;
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800a526:	6841      	ldr	r1, [r0, #4]
 800a528:	2900      	cmp	r1, #0
 800a52a:	f000 81bc 	beq.w	800a8a6 <LoRaMacMibSetRequestConfirm+0x4a6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800a52e:	2003      	movs	r0, #3
 800a530:	f001 f9f2 	bl	800b918 <LoRaMacCryptoSetKey>
 800a534:	4604      	mov	r4, r0
 800a536:	2800      	cmp	r0, #0
 800a538:	f000 81aa 	beq.w	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a53c:	2411      	movs	r4, #17
 800a53e:	e1a7      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800a540:	6841      	ldr	r1, [r0, #4]
 800a542:	2900      	cmp	r1, #0
 800a544:	f000 81b1 	beq.w	800a8aa <LoRaMacMibSetRequestConfirm+0x4aa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800a548:	207f      	movs	r0, #127	; 0x7f
 800a54a:	f001 f9e5 	bl	800b918 <LoRaMacCryptoSetKey>
 800a54e:	4604      	mov	r4, r0
 800a550:	2800      	cmp	r0, #0
 800a552:	f000 819d 	beq.w	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a556:	2411      	movs	r4, #17
 800a558:	e19a      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
            break;
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800a55a:	6841      	ldr	r1, [r0, #4]
 800a55c:	2900      	cmp	r1, #0
 800a55e:	f000 81a6 	beq.w	800a8ae <LoRaMacMibSetRequestConfirm+0x4ae>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800a562:	2080      	movs	r0, #128	; 0x80
 800a564:	f001 f9d8 	bl	800b918 <LoRaMacCryptoSetKey>
 800a568:	4604      	mov	r4, r0
 800a56a:	2800      	cmp	r0, #0
 800a56c:	f000 8190 	beq.w	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a570:	2411      	movs	r4, #17
 800a572:	e18d      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800a574:	6841      	ldr	r1, [r0, #4]
 800a576:	2900      	cmp	r1, #0
 800a578:	f000 819b 	beq.w	800a8b2 <LoRaMacMibSetRequestConfirm+0x4b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800a57c:	2081      	movs	r0, #129	; 0x81
 800a57e:	f001 f9cb 	bl	800b918 <LoRaMacCryptoSetKey>
 800a582:	4604      	mov	r4, r0
 800a584:	2800      	cmp	r0, #0
 800a586:	f000 8183 	beq.w	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a58a:	2411      	movs	r4, #17
 800a58c:	e180      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800a58e:	6841      	ldr	r1, [r0, #4]
 800a590:	2900      	cmp	r1, #0
 800a592:	f000 8190 	beq.w	800a8b6 <LoRaMacMibSetRequestConfirm+0x4b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800a596:	2082      	movs	r0, #130	; 0x82
 800a598:	f001 f9be 	bl	800b918 <LoRaMacCryptoSetKey>
 800a59c:	4604      	mov	r4, r0
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	f000 8176 	beq.w	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a5a4:	2411      	movs	r4, #17
 800a5a6:	e173      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800a5a8:	7900      	ldrb	r0, [r0, #4]
 800a5aa:	4b4b      	ldr	r3, [pc, #300]	; (800a6d8 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800a5ac:	f883 00fd 	strb.w	r0, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800a5b0:	4c4a      	ldr	r4, [pc, #296]	; (800a6dc <LoRaMacMibSetRequestConfirm+0x2dc>)
 800a5b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a5b4:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 800a5b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a5b8:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a5ba:	2400      	movs	r4, #0
            /* ST_WORKAROUND_END */
            break;
 800a5bc:	e168      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800a5be:	7902      	ldrb	r2, [r0, #4]
 800a5c0:	4b45      	ldr	r3, [pc, #276]	; (800a6d8 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800a5c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a5c6:	2400      	movs	r4, #0
            break;
 800a5c8:	e162      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800a5ca:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800a5ce:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a5d2:	4b41      	ldr	r3, [pc, #260]	; (800a6d8 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800a5d4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800a5d8:	f88d 2005 	strb.w	r2, [sp, #5]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800a5dc:	2207      	movs	r2, #7
 800a5de:	a901      	add	r1, sp, #4
 800a5e0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a5e4:	f001 fc29 	bl	800be3a <RegionVerify>
 800a5e8:	b908      	cbnz	r0, 800a5ee <LoRaMacMibSetRequestConfirm+0x1ee>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a5ea:	2403      	movs	r4, #3
 800a5ec:	e150      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
            }
            else
            {
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800a5ee:	686b      	ldr	r3, [r5, #4]
 800a5f0:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	a901      	add	r1, sp, #4
 800a5f6:	4b38      	ldr	r3, [pc, #224]	; (800a6d8 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800a5f8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a5fc:	f001 fc1d 	bl	800be3a <RegionVerify>
 800a600:	2800      	cmp	r0, #0
 800a602:	f000 815a 	beq.w	800a8ba <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
                }
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800a606:	4b36      	ldr	r3, [pc, #216]	; (800a6e0 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800a608:	68a9      	ldr	r1, [r5, #8]
 800a60a:	6868      	ldr	r0, [r5, #4]
 800a60c:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a610:	2400      	movs	r4, #0
 800a612:	e13d      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
            /* ST_WORKAROUND_END */
            break;
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800a614:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800a618:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a61c:	4b2e      	ldr	r3, [pc, #184]	; (800a6d8 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800a61e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800a622:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800a626:	2207      	movs	r2, #7
 800a628:	a901      	add	r1, sp, #4
 800a62a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a62e:	f001 fc04 	bl	800be3a <RegionVerify>
 800a632:	2800      	cmp	r0, #0
 800a634:	f000 8143 	beq.w	800a8be <LoRaMacMibSetRequestConfirm+0x4be>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800a638:	4b2a      	ldr	r3, [pc, #168]	; (800a6e4 <LoRaMacMibSetRequestConfirm+0x2e4>)
 800a63a:	68a9      	ldr	r1, [r5, #8]
 800a63c:	6868      	ldr	r0, [r5, #4]
 800a63e:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a642:	2400      	movs	r4, #0
 800a644:	e124      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800a646:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800a64a:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a64e:	4b22      	ldr	r3, [pc, #136]	; (800a6d8 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800a650:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800a654:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800a658:	2207      	movs	r2, #7
 800a65a:	a901      	add	r1, sp, #4
 800a65c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a660:	f001 fbeb 	bl	800be3a <RegionVerify>
 800a664:	2800      	cmp	r0, #0
 800a666:	f000 812c 	beq.w	800a8c2 <LoRaMacMibSetRequestConfirm+0x4c2>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800a66a:	4b1b      	ldr	r3, [pc, #108]	; (800a6d8 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800a66c:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800a670:	68a9      	ldr	r1, [r5, #8]
 800a672:	6868      	ldr	r0, [r5, #4]
 800a674:	e882 0003 	stmia.w	r2, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800a678:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d001      	beq.n	800a684 <LoRaMacMibSetRequestConfirm+0x284>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a680:	2400      	movs	r4, #0
 800a682:	e105      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800a684:	f1a2 036c 	sub.w	r3, r2, #108	; 0x6c
 800a688:	f893 4110 	ldrb.w	r4, [r3, #272]	; 0x110
 800a68c:	2c00      	cmp	r4, #0
 800a68e:	f000 80ff 	beq.w	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800a692:	4b12      	ldr	r3, [pc, #72]	; (800a6dc <LoRaMacMibSetRequestConfirm+0x2dc>)
 800a694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a696:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 800a698:	f7fe ff1c 	bl	80094d4 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a69c:	2400      	movs	r4, #0
 800a69e:	e0f7      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800a6a0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800a6a4:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a6a8:	4b0b      	ldr	r3, [pc, #44]	; (800a6d8 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800a6aa:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800a6ae:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800a6b2:	2207      	movs	r2, #7
 800a6b4:	a901      	add	r1, sp, #4
 800a6b6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a6ba:	f001 fbbe 	bl	800be3a <RegionVerify>
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	f000 8101 	beq.w	800a8c6 <LoRaMacMibSetRequestConfirm+0x4c6>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800a6c4:	4b08      	ldr	r3, [pc, #32]	; (800a6e8 <LoRaMacMibSetRequestConfirm+0x2e8>)
 800a6c6:	68a9      	ldr	r1, [r5, #8]
 800a6c8:	6868      	ldr	r0, [r5, #4]
 800a6ca:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6ce:	2400      	movs	r4, #0
 800a6d0:	e0de      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
 800a6d2:	bf00      	nop
 800a6d4:	200006d0 	.word	0x200006d0
 800a6d8:	20000bd8 	.word	0x20000bd8
 800a6dc:	08018318 	.word	0x08018318
 800a6e0:	20000c3c 	.word	0x20000c3c
 800a6e4:	20000c7c 	.word	0x20000c7c
 800a6e8:	20000c84 	.word	0x20000c84
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800a6ec:	6843      	ldr	r3, [r0, #4]
 800a6ee:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800a6f6:	a902      	add	r1, sp, #8
 800a6f8:	4b7c      	ldr	r3, [pc, #496]	; (800a8ec <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a6fa:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a6fe:	f001 fbf4 	bl	800beea <RegionChanMaskSet>
 800a702:	2800      	cmp	r0, #0
 800a704:	f000 80e1 	beq.w	800a8ca <LoRaMacMibSetRequestConfirm+0x4ca>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a708:	2400      	movs	r4, #0
 800a70a:	e0c1      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800a70c:	6843      	ldr	r3, [r0, #4]
 800a70e:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800a710:	2300      	movs	r3, #0
 800a712:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800a716:	a902      	add	r1, sp, #8
 800a718:	4b74      	ldr	r3, [pc, #464]	; (800a8ec <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a71a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a71e:	f001 fbe4 	bl	800beea <RegionChanMaskSet>
 800a722:	2800      	cmp	r0, #0
 800a724:	f000 80d3 	beq.w	800a8ce <LoRaMacMibSetRequestConfirm+0x4ce>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a728:	2400      	movs	r4, #0
 800a72a:	e0b1      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800a72c:	7902      	ldrb	r2, [r0, #4]
 800a72e:	1e53      	subs	r3, r2, #1
 800a730:	b2db      	uxtb	r3, r3
 800a732:	2b0e      	cmp	r3, #14
 800a734:	f200 80cd 	bhi.w	800a8d2 <LoRaMacMibSetRequestConfirm+0x4d2>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800a738:	4b6c      	ldr	r3, [pc, #432]	; (800a8ec <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a73a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a73e:	2400      	movs	r4, #0
 800a740:	e0a6      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800a742:	6842      	ldr	r2, [r0, #4]
 800a744:	4b69      	ldr	r3, [pc, #420]	; (800a8ec <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a746:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a748:	2400      	movs	r4, #0
            break;
 800a74a:	e0a1      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800a74c:	6842      	ldr	r2, [r0, #4]
 800a74e:	4b67      	ldr	r3, [pc, #412]	; (800a8ec <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a750:	651a      	str	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a752:	2400      	movs	r4, #0
            break;
 800a754:	e09c      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800a756:	6842      	ldr	r2, [r0, #4]
 800a758:	4b64      	ldr	r3, [pc, #400]	; (800a8ec <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a75a:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a75c:	2400      	movs	r4, #0
            break;
 800a75e:	e097      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800a760:	6842      	ldr	r2, [r0, #4]
 800a762:	4b62      	ldr	r3, [pc, #392]	; (800a8ec <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a764:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a766:	2400      	movs	r4, #0
            break;
 800a768:	e092      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800a76a:	6842      	ldr	r2, [r0, #4]
 800a76c:	4b5f      	ldr	r3, [pc, #380]	; (800a8ec <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a76e:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a770:	2400      	movs	r4, #0
            break;
 800a772:	e08d      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800a774:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800a778:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800a77c:	2206      	movs	r2, #6
 800a77e:	a901      	add	r1, sp, #4
 800a780:	4b5a      	ldr	r3, [pc, #360]	; (800a8ec <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a782:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a786:	f001 fb58 	bl	800be3a <RegionVerify>
 800a78a:	2800      	cmp	r0, #0
 800a78c:	f000 80a3 	beq.w	800a8d6 <LoRaMacMibSetRequestConfirm+0x4d6>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800a790:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800a794:	4b55      	ldr	r3, [pc, #340]	; (800a8ec <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a796:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a79a:	2400      	movs	r4, #0
 800a79c:	e078      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800a79e:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800a7a2:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a7a6:	4b51      	ldr	r3, [pc, #324]	; (800a8ec <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a7a8:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800a7ac:	f88d 2006 	strb.w	r2, [sp, #6]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800a7b0:	2205      	movs	r2, #5
 800a7b2:	a901      	add	r1, sp, #4
 800a7b4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a7b8:	f001 fb3f 	bl	800be3a <RegionVerify>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	f000 808c 	beq.w	800a8da <LoRaMacMibSetRequestConfirm+0x4da>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800a7c2:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800a7c6:	4b49      	ldr	r3, [pc, #292]	; (800a8ec <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a7c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7cc:	2400      	movs	r4, #0
 800a7ce:	e05f      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800a7d0:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800a7d4:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800a7d8:	220a      	movs	r2, #10
 800a7da:	a901      	add	r1, sp, #4
 800a7dc:	4b43      	ldr	r3, [pc, #268]	; (800a8ec <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a7de:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a7e2:	f001 fb2a 	bl	800be3a <RegionVerify>
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	d079      	beq.n	800a8de <LoRaMacMibSetRequestConfirm+0x4de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800a7ea:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800a7ee:	4b3f      	ldr	r3, [pc, #252]	; (800a8ec <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a7f0:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7f4:	2400      	movs	r4, #0
 800a7f6:	e04b      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800a7f8:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800a7fc:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800a800:	2209      	movs	r2, #9
 800a802:	a901      	add	r1, sp, #4
 800a804:	4b39      	ldr	r3, [pc, #228]	; (800a8ec <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a806:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a80a:	f001 fb16 	bl	800be3a <RegionVerify>
 800a80e:	2800      	cmp	r0, #0
 800a810:	d067      	beq.n	800a8e2 <LoRaMacMibSetRequestConfirm+0x4e2>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800a812:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800a816:	4b35      	ldr	r3, [pc, #212]	; (800a8ec <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a81c:	2400      	movs	r4, #0
 800a81e:	e037      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800a820:	6842      	ldr	r2, [r0, #4]
 800a822:	4b32      	ldr	r3, [pc, #200]	; (800a8ec <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800a828:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a82a:	2400      	movs	r4, #0
            break;
 800a82c:	e030      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800a82e:	7902      	ldrb	r2, [r0, #4]
 800a830:	4b2e      	ldr	r3, [pc, #184]	; (800a8ec <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a832:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 800a836:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a83a:	2400      	movs	r4, #0
            break;
 800a83c:	e028      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800a83e:	6842      	ldr	r2, [r0, #4]
 800a840:	4b2a      	ldr	r3, [pc, #168]	; (800a8ec <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a842:	67da      	str	r2, [r3, #124]	; 0x7c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a844:	2400      	movs	r4, #0
            break;
 800a846:	e023      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800a848:	6842      	ldr	r2, [r0, #4]
 800a84a:	4b28      	ldr	r3, [pc, #160]	; (800a8ec <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a84c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a850:	2400      	movs	r4, #0
            break;
 800a852:	e01d      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 800a854:	6840      	ldr	r0, [r0, #4]
 800a856:	2800      	cmp	r0, #0
 800a858:	d045      	beq.n	800a8e6 <LoRaMacMibSetRequestConfirm+0x4e6>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 800a85a:	f7fe fdaf 	bl	80093bc <RestoreNvmData>
 800a85e:	4604      	mov	r4, r0
 800a860:	e016      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800a862:	7983      	ldrb	r3, [r0, #6]
 800a864:	2b01      	cmp	r3, #1
 800a866:	d901      	bls.n	800a86c <LoRaMacMibSetRequestConfirm+0x46c>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a868:	2403      	movs	r4, #3
 800a86a:	e011      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800a86c:	6842      	ldr	r2, [r0, #4]
 800a86e:	4b1f      	ldr	r3, [pc, #124]	; (800a8ec <LoRaMacMibSetRequestConfirm+0x4ec>)
 800a870:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800a874:	6840      	ldr	r0, [r0, #4]
 800a876:	f000 fee3 	bl	800b640 <LoRaMacCryptoSetLrWanVersion>
 800a87a:	4604      	mov	r4, r0
 800a87c:	b140      	cbz	r0, 800a890 <LoRaMacMibSetRequestConfirm+0x490>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a87e:	2411      	movs	r4, #17
 800a880:	e006      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
            }
            break;
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800a882:	f000 fa6e 	bl	800ad62 <LoRaMacMibClassBSetRequestConfirm>
 800a886:	4604      	mov	r4, r0
            break;
 800a888:	e002      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a88a:	2403      	movs	r4, #3
 800a88c:	e000      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
        return LORAMAC_STATUS_BUSY;
 800a88e:	2401      	movs	r4, #1
        }
    }
    return status;
}
 800a890:	4620      	mov	r0, r4
 800a892:	b005      	add	sp, #20
 800a894:	bd30      	pop	{r4, r5, pc}
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a896:	2403      	movs	r4, #3
 800a898:	e7fa      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a89a:	2403      	movs	r4, #3
 800a89c:	e7f8      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a89e:	2403      	movs	r4, #3
 800a8a0:	e7f6      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a8a2:	2403      	movs	r4, #3
 800a8a4:	e7f4      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a8a6:	2403      	movs	r4, #3
 800a8a8:	e7f2      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a8aa:	2403      	movs	r4, #3
 800a8ac:	e7f0      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a8ae:	2403      	movs	r4, #3
 800a8b0:	e7ee      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a8b2:	2403      	movs	r4, #3
 800a8b4:	e7ec      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a8b6:	2403      	movs	r4, #3
 800a8b8:	e7ea      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a8ba:	2403      	movs	r4, #3
 800a8bc:	e7e8      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a8be:	2403      	movs	r4, #3
 800a8c0:	e7e6      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a8c2:	2403      	movs	r4, #3
 800a8c4:	e7e4      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a8c6:	2403      	movs	r4, #3
 800a8c8:	e7e2      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a8ca:	2403      	movs	r4, #3
 800a8cc:	e7e0      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a8ce:	2403      	movs	r4, #3
 800a8d0:	e7de      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a8d2:	2403      	movs	r4, #3
 800a8d4:	e7dc      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a8d6:	2403      	movs	r4, #3
 800a8d8:	e7da      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a8da:	2403      	movs	r4, #3
 800a8dc:	e7d8      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a8de:	2403      	movs	r4, #3
 800a8e0:	e7d6      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a8e2:	2403      	movs	r4, #3
 800a8e4:	e7d4      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a8e6:	2403      	movs	r4, #3
 800a8e8:	e7d2      	b.n	800a890 <LoRaMacMibSetRequestConfirm+0x490>
 800a8ea:	bf00      	nop
 800a8ec:	20000bd8 	.word	0x20000bd8

0800a8f0 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800a8f0:	b570      	push	{r4, r5, r6, lr}
 800a8f2:	b082      	sub	sp, #8
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	f8ad 3000 	strh.w	r3, [sp]

    if( mlmeRequest == NULL )
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	f000 80c5 	beq.w	800aa8a <LoRaMacMlmeRequest+0x19a>
 800a900:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 800a902:	f7ff f9e7 	bl	8009cd4 <LoRaMacIsBusy>
 800a906:	b118      	cbz	r0, 800a910 <LoRaMacMlmeRequest+0x20>
    {
        return LORAMAC_STATUS_BUSY;
 800a908:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800a90a:	4620      	mov	r0, r4
 800a90c:	b002      	add	sp, #8
 800a90e:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800a910:	f000 fccc 	bl	800b2ac <LoRaMacConfirmQueueIsFull>
 800a914:	b108      	cbz	r0, 800a91a <LoRaMacMlmeRequest+0x2a>
        return LORAMAC_STATUS_BUSY;
 800a916:	2401      	movs	r4, #1
 800a918:	e7f7      	b.n	800a90a <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800a91a:	f000 fcc1 	bl	800b2a0 <LoRaMacConfirmQueueGetCnt>
 800a91e:	b1f8      	cbz	r0, 800a960 <LoRaMacMlmeRequest+0x70>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a920:	4b5b      	ldr	r3, [pc, #364]	; (800aa90 <LoRaMacMlmeRequest+0x1a0>)
 800a922:	2101      	movs	r1, #1
 800a924:	f883 144d 	strb.w	r1, [r3, #1101]	; 0x44d
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a928:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800a92c:	f042 0204 	orr.w	r2, r2, #4
 800a930:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 800a934:	782b      	ldrb	r3, [r5, #0]
 800a936:	f88d 3004 	strb.w	r3, [sp, #4]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a93a:	f88d 1005 	strb.w	r1, [sp, #5]
    queueElement.RestrictCommonReadyToHandle = false;
 800a93e:	2200      	movs	r2, #0
 800a940:	f88d 2007 	strb.w	r2, [sp, #7]
    switch( mlmeRequest->Type )
 800a944:	461c      	mov	r4, r3
 800a946:	3b01      	subs	r3, #1
 800a948:	2b0d      	cmp	r3, #13
 800a94a:	f200 8084 	bhi.w	800aa56 <LoRaMacMlmeRequest+0x166>
 800a94e:	e8df f003 	tbb	[pc, r3]
 800a952:	820d      	.short	0x820d
 800a954:	423d3382 	.word	0x423d3382
 800a958:	4b828282 	.word	0x4b828282
 800a95c:	6a547382 	.word	0x6a547382
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800a960:	2214      	movs	r2, #20
 800a962:	2100      	movs	r1, #0
 800a964:	484b      	ldr	r0, [pc, #300]	; (800aa94 <LoRaMacMlmeRequest+0x1a4>)
 800a966:	f009 fda4 	bl	80144b2 <memset1>
 800a96a:	e7d9      	b.n	800a920 <LoRaMacMlmeRequest+0x30>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800a96c:	4b48      	ldr	r3, [pc, #288]	; (800aa90 <LoRaMacMlmeRequest+0x1a0>)
 800a96e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a972:	f013 0f20 	tst.w	r3, #32
 800a976:	d1c8      	bne.n	800a90a <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 800a978:	f7fe fed4 	bl	8009724 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800a97c:	4c46      	ldr	r4, [pc, #280]	; (800aa98 <LoRaMacMlmeRequest+0x1a8>)
 800a97e:	2200      	movs	r2, #0
 800a980:	f995 1004 	ldrsb.w	r1, [r5, #4]
 800a984:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a988:	f001 fc6e 	bl	800c268 <RegionAlternateDr>
 800a98c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800a990:	2307      	movs	r3, #7
 800a992:	f88d 3005 	strb.w	r3, [sp, #5]
            status = SendReJoinReq( JOIN_REQ );
 800a996:	20ff      	movs	r0, #255	; 0xff
 800a998:	f7fe ffea 	bl	8009970 <SendReJoinReq>
            if( status != LORAMAC_STATUS_OK )
 800a99c:	4604      	mov	r4, r0
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	d05a      	beq.n	800aa58 <LoRaMacMlmeRequest+0x168>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800a9a2:	4e3d      	ldr	r6, [pc, #244]	; (800aa98 <LoRaMacMlmeRequest+0x1a8>)
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	f995 1004 	ldrsb.w	r1, [r5, #4]
 800a9aa:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800a9ae:	f001 fc5b 	bl	800c268 <RegionAlternateDr>
 800a9b2:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800a9b6:	e04f      	b.n	800aa58 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	4669      	mov	r1, sp
 800a9bc:	2002      	movs	r0, #2
 800a9be:	f000 fa6d 	bl	800ae9c <LoRaMacCommandsAddCmd>
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	d047      	beq.n	800aa58 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a9c8:	2413      	movs	r4, #19
 800a9ca:	e045      	b.n	800aa58 <LoRaMacMlmeRequest+0x168>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800a9cc:	88a8      	ldrh	r0, [r5, #4]
 800a9ce:	f7fe fffd 	bl	80099cc <SetTxContinuousWave>
 800a9d2:	4604      	mov	r4, r0
            break;
 800a9d4:	e040      	b.n	800aa58 <LoRaMacMlmeRequest+0x168>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800a9d6:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800a9da:	b2d2      	uxtb	r2, r2
 800a9dc:	68a9      	ldr	r1, [r5, #8]
 800a9de:	88a8      	ldrh	r0, [r5, #4]
 800a9e0:	f7fd f8b4 	bl	8007b4c <SetTxContinuousWave1>
 800a9e4:	4604      	mov	r4, r0
            break;
 800a9e6:	e037      	b.n	800aa58 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	4669      	mov	r1, sp
 800a9ec:	200d      	movs	r0, #13
 800a9ee:	f000 fa55 	bl	800ae9c <LoRaMacCommandsAddCmd>
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	b380      	cbz	r0, 800aa58 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a9f6:	2413      	movs	r4, #19
 800a9f8:	e02e      	b.n	800aa58 <LoRaMacMlmeRequest+0x168>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800a9fa:	4b27      	ldr	r3, [pc, #156]	; (800aa98 <LoRaMacMlmeRequest+0x1a8>)
 800a9fc:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800aa00:	b10b      	cbz	r3, 800aa06 <LoRaMacMlmeRequest+0x116>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800aa02:	2402      	movs	r4, #2
 800aa04:	e028      	b.n	800aa58 <LoRaMacMlmeRequest+0x168>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800aa06:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800aa08:	f004 0007 	and.w	r0, r4, #7
 800aa0c:	f000 f9a2 	bl	800ad54 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800aa10:	f88d 4000 	strb.w	r4, [sp]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800aa14:	2201      	movs	r2, #1
 800aa16:	4669      	mov	r1, sp
 800aa18:	2010      	movs	r0, #16
 800aa1a:	f000 fa3f 	bl	800ae9c <LoRaMacCommandsAddCmd>
 800aa1e:	4604      	mov	r4, r0
 800aa20:	b1d0      	cbz	r0, 800aa58 <LoRaMacMlmeRequest+0x168>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800aa22:	2413      	movs	r4, #19
 800aa24:	e018      	b.n	800aa58 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800aa26:	2200      	movs	r2, #0
 800aa28:	4669      	mov	r1, sp
 800aa2a:	2012      	movs	r0, #18
 800aa2c:	f000 fa36 	bl	800ae9c <LoRaMacCommandsAddCmd>
 800aa30:	4604      	mov	r4, r0
 800aa32:	b188      	cbz	r0, 800aa58 <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800aa34:	2413      	movs	r4, #19
 800aa36:	e00f      	b.n	800aa58 <LoRaMacMlmeRequest+0x168>
            queueElement.RestrictCommonReadyToHandle = true;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	f88d 3007 	strb.w	r3, [sp, #7]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800aa3e:	f000 f97a 	bl	800ad36 <LoRaMacClassBIsAcquisitionInProgress>
 800aa42:	b108      	cbz	r0, 800aa48 <LoRaMacMlmeRequest+0x158>
                status = LORAMAC_STATUS_BUSY;
 800aa44:	2401      	movs	r4, #1
 800aa46:	e007      	b.n	800aa58 <LoRaMacMlmeRequest+0x168>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800aa48:	f000 f972 	bl	800ad30 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800aa4c:	2000      	movs	r0, #0
 800aa4e:	f000 f974 	bl	800ad3a <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800aa52:	2400      	movs	r4, #0
 800aa54:	e000      	b.n	800aa58 <LoRaMacMlmeRequest+0x168>
    switch( mlmeRequest->Type )
 800aa56:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800aa58:	4b0d      	ldr	r3, [pc, #52]	; (800aa90 <LoRaMacMlmeRequest+0x1a0>)
 800aa5a:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800aa5e:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800aa60:	b17c      	cbz	r4, 800aa82 <LoRaMacMlmeRequest+0x192>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800aa62:	f000 fc1d 	bl	800b2a0 <LoRaMacConfirmQueueGetCnt>
 800aa66:	2800      	cmp	r0, #0
 800aa68:	f47f af4f 	bne.w	800a90a <LoRaMacMlmeRequest+0x1a>
            MacCtx.NodeAckRequested = false;
 800aa6c:	4b08      	ldr	r3, [pc, #32]	; (800aa90 <LoRaMacMlmeRequest+0x1a0>)
 800aa6e:	2100      	movs	r1, #0
 800aa70:	f883 1414 	strb.w	r1, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800aa74:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800aa78:	f361 0282 	bfi	r2, r1, #2, #1
 800aa7c:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 800aa80:	e743      	b.n	800a90a <LoRaMacMlmeRequest+0x1a>
        LoRaMacConfirmQueueAdd( &queueElement );
 800aa82:	a801      	add	r0, sp, #4
 800aa84:	f000 fb48 	bl	800b118 <LoRaMacConfirmQueueAdd>
 800aa88:	e73f      	b.n	800a90a <LoRaMacMlmeRequest+0x1a>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800aa8a:	2403      	movs	r4, #3
 800aa8c:	e73d      	b.n	800a90a <LoRaMacMlmeRequest+0x1a>
 800aa8e:	bf00      	nop
 800aa90:	200006d0 	.word	0x200006d0
 800aa94:	20000b1c 	.word	0x20000b1c
 800aa98:	20000bd8 	.word	0x20000bd8

0800aa9c <LoRaMacMcpsRequest>:
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	f000 80af 	beq.w	800ac00 <LoRaMacMcpsRequest+0x164>
{
 800aaa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaa6:	b088      	sub	sp, #32
 800aaa8:	460d      	mov	r5, r1
 800aaaa:	f04f 0800 	mov.w	r8, #0
 800aaae:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( LoRaMacIsBusy( ) == true )
 800aab0:	f7ff f910 	bl	8009cd4 <LoRaMacIsBusy>
 800aab4:	4606      	mov	r6, r0
 800aab6:	b118      	cbz	r0, 800aac0 <LoRaMacMcpsRequest+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 800aab8:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800aaba:	b008      	add	sp, #32
 800aabc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    macHdr.Value = 0;
 800aac0:	4641      	mov	r1, r8
 800aac2:	f88d 8010 	strb.w	r8, [sp, #16]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800aac6:	4f50      	ldr	r7, [pc, #320]	; (800ac08 <LoRaMacMcpsRequest+0x16c>)
 800aac8:	2214      	movs	r2, #20
 800aaca:	f507 6087 	add.w	r0, r7, #1080	; 0x438
 800aace:	f009 fcf0 	bl	80144b2 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800aad2:	2301      	movs	r3, #1
 800aad4:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
    MacCtx.AckTimeoutRetriesCounter = 1;
 800aad8:	f887 3412 	strb.w	r3, [r7, #1042]	; 0x412
    switch( mcpsRequest->Type )
 800aadc:	7823      	ldrb	r3, [r4, #0]
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d058      	beq.n	800ab94 <LoRaMacMcpsRequest+0xf8>
 800aae2:	2b03      	cmp	r3, #3
 800aae4:	d06e      	beq.n	800abc4 <LoRaMacMcpsRequest+0x128>
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d041      	beq.n	800ab6e <LoRaMacMcpsRequest+0xd2>
 800aaea:	2700      	movs	r7, #0
 800aaec:	46ba      	mov	sl, r7
 800aaee:	46b9      	mov	r9, r7
    getPhy.Attribute = PHY_MIN_TX_DR;
 800aaf0:	2302      	movs	r3, #2
 800aaf2:	f88d 3018 	strb.w	r3, [sp, #24]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800aaf6:	4b45      	ldr	r3, [pc, #276]	; (800ac0c <LoRaMacMcpsRequest+0x170>)
 800aaf8:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800aafc:	f88d 201a 	strb.w	r2, [sp, #26]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ab00:	a906      	add	r1, sp, #24
 800ab02:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ab06:	f001 f8fc 	bl	800bd02 <RegionGetPhyParam>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800ab0a:	b240      	sxtb	r0, r0
 800ab0c:	42b8      	cmp	r0, r7
 800ab0e:	bfb8      	it	lt
 800ab10:	4638      	movlt	r0, r7
    if( readyToSend == true )
 800ab12:	2e00      	cmp	r6, #0
 800ab14:	d06e      	beq.n	800abf4 <LoRaMacMcpsRequest+0x158>
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 800ab16:	4b3d      	ldr	r3, [pc, #244]	; (800ac0c <LoRaMacMcpsRequest+0x170>)
 800ab18:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800ab1c:	b99b      	cbnz	r3, 800ab46 <LoRaMacMcpsRequest+0xaa>
            verify.DatarateParams.Datarate = datarate;
 800ab1e:	f88d 000c 	strb.w	r0, [sp, #12]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ab22:	4b3a      	ldr	r3, [pc, #232]	; (800ac0c <LoRaMacMcpsRequest+0x170>)
 800ab24:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800ab28:	f88d 200e 	strb.w	r2, [sp, #14]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800ab2c:	2205      	movs	r2, #5
 800ab2e:	a903      	add	r1, sp, #12
 800ab30:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ab34:	f001 f981 	bl	800be3a <RegionVerify>
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	d063      	beq.n	800ac04 <LoRaMacMcpsRequest+0x168>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ab3c:	f99d 200c 	ldrsb.w	r2, [sp, #12]
 800ab40:	4b32      	ldr	r3, [pc, #200]	; (800ac0c <LoRaMacMcpsRequest+0x170>)
 800ab42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800ab46:	9500      	str	r5, [sp, #0]
 800ab48:	4643      	mov	r3, r8
 800ab4a:	4652      	mov	r2, sl
 800ab4c:	4649      	mov	r1, r9
 800ab4e:	a804      	add	r0, sp, #16
 800ab50:	f7ff f828 	bl	8009ba4 <Send>
        if( status == LORAMAC_STATUS_OK )
 800ab54:	2800      	cmp	r0, #0
 800ab56:	d148      	bne.n	800abea <LoRaMacMcpsRequest+0x14e>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800ab58:	7822      	ldrb	r2, [r4, #0]
 800ab5a:	4b2b      	ldr	r3, [pc, #172]	; (800ac08 <LoRaMacMcpsRequest+0x16c>)
 800ab5c:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800ab60:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800ab64:	f042 0201 	orr.w	r2, r2, #1
 800ab68:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 800ab6c:	e043      	b.n	800abf6 <LoRaMacMcpsRequest+0x15a>
            MacCtx.AckTimeoutRetries = 1;
 800ab6e:	2601      	movs	r6, #1
 800ab70:	f887 6411 	strb.w	r6, [r7, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800ab74:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ab78:	2202      	movs	r2, #2
 800ab7a:	f362 1347 	bfi	r3, r2, #5, #3
 800ab7e:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800ab82:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800ab86:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800ab8a:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800ab8e:	f994 700e 	ldrsb.w	r7, [r4, #14]
            break;
 800ab92:	e7ad      	b.n	800aaf0 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800ab94:	7be3      	ldrb	r3, [r4, #15]
 800ab96:	2b08      	cmp	r3, #8
 800ab98:	bf28      	it	cs
 800ab9a:	2308      	movcs	r3, #8
 800ab9c:	4a1a      	ldr	r2, [pc, #104]	; (800ac08 <LoRaMacMcpsRequest+0x16c>)
 800ab9e:	f882 3411 	strb.w	r3, [r2, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800aba2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800aba6:	2204      	movs	r2, #4
 800aba8:	f362 1347 	bfi	r3, r2, #5, #3
 800abac:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800abb0:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800abb4:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800abb8:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800abbc:	f994 700e 	ldrsb.w	r7, [r4, #14]
            readyToSend = true;
 800abc0:	2601      	movs	r6, #1
            break;
 800abc2:	e795      	b.n	800aaf0 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = 1;
 800abc4:	2601      	movs	r6, #1
 800abc6:	4b10      	ldr	r3, [pc, #64]	; (800ac08 <LoRaMacMcpsRequest+0x16c>)
 800abc8:	f883 6411 	strb.w	r6, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800abcc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800abd0:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800abd4:	f88d 3010 	strb.w	r3, [sp, #16]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800abd8:	f8d4 a004 	ldr.w	sl, [r4, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800abdc:	f8b4 8008 	ldrh.w	r8, [r4, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800abe0:	f994 700a 	ldrsb.w	r7, [r4, #10]
    uint8_t fPort = 0;
 800abe4:	f04f 0900 	mov.w	r9, #0
            break;
 800abe8:	e782      	b.n	800aaf0 <LoRaMacMcpsRequest+0x54>
            MacCtx.NodeAckRequested = false;
 800abea:	4b07      	ldr	r3, [pc, #28]	; (800ac08 <LoRaMacMcpsRequest+0x16c>)
 800abec:	2200      	movs	r2, #0
 800abee:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800abf2:	e000      	b.n	800abf6 <LoRaMacMcpsRequest+0x15a>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800abf4:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800abf6:	4b04      	ldr	r3, [pc, #16]	; (800ac08 <LoRaMacMcpsRequest+0x16c>)
 800abf8:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800abfc:	6123      	str	r3, [r4, #16]
    return status;
 800abfe:	e75c      	b.n	800aaba <LoRaMacMcpsRequest+0x1e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ac00:	2003      	movs	r0, #3
}
 800ac02:	4770      	bx	lr
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800ac04:	2003      	movs	r0, #3
 800ac06:	e758      	b.n	800aaba <LoRaMacMcpsRequest+0x1e>
 800ac08:	200006d0 	.word	0x200006d0
 800ac0c:	20000bd8 	.word	0x20000bd8

0800ac10 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800ac10:	b510      	push	{r4, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800ac16:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800ac1a:	220f      	movs	r2, #15
 800ac1c:	a901      	add	r1, sp, #4
 800ac1e:	4b05      	ldr	r3, [pc, #20]	; (800ac34 <LoRaMacTestSetDutyCycleOn+0x24>)
 800ac20:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ac24:	f001 f909 	bl	800be3a <RegionVerify>
 800ac28:	b110      	cbz	r0, 800ac30 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800ac2a:	4b02      	ldr	r3, [pc, #8]	; (800ac34 <LoRaMacTestSetDutyCycleOn+0x24>)
 800ac2c:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
    }
}
 800ac30:	b002      	add	sp, #8
 800ac32:	bd10      	pop	{r4, pc}
 800ac34:	20000bd8 	.word	0x20000bd8

0800ac38 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800ac38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac3c:	b089      	sub	sp, #36	; 0x24
 800ac3e:	460f      	mov	r7, r1
 800ac40:	4616      	mov	r6, r2
 800ac42:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800ac44:	f990 9010 	ldrsb.w	r9, [r0, #16]
    int8_t txPower = adrNext->TxPower;
 800ac48:	f990 a011 	ldrsb.w	sl, [r0, #17]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800ac4c:	6883      	ldr	r3, [r0, #8]
 800ac4e:	602b      	str	r3, [r5, #0]

    if( adrNext->AdrEnabled == true )
 800ac50:	f890 8005 	ldrb.w	r8, [r0, #5]
 800ac54:	f1b8 0f00 	cmp.w	r8, #0
 800ac58:	d107      	bne.n	800ac6a <CalcNextV10X+0x32>
                }
            }
        }
    }

    *drOut = datarate;
 800ac5a:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800ac5e:	f886 a000 	strb.w	sl, [r6]
    return adrAckReq;
}
 800ac62:	4640      	mov	r0, r8
 800ac64:	b009      	add	sp, #36	; 0x24
 800ac66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac6a:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800ac6c:	2302      	movs	r3, #2
 800ac6e:	f88d 3018 	strb.w	r3, [sp, #24]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800ac72:	7c83      	ldrb	r3, [r0, #18]
 800ac74:	f88d 301a 	strb.w	r3, [sp, #26]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800ac78:	a906      	add	r1, sp, #24
 800ac7a:	7cc0      	ldrb	r0, [r0, #19]
 800ac7c:	f001 f841 	bl	800bd02 <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 800ac80:	fa4f fb80 	sxtb.w	fp, r0
        datarate = MAX( datarate, minTxDatarate );
 800ac84:	464a      	mov	r2, r9
 800ac86:	45d9      	cmp	r9, fp
 800ac88:	bfb8      	it	lt
 800ac8a:	465a      	movlt	r2, fp
 800ac8c:	9201      	str	r2, [sp, #4]
        if( datarate == minTxDatarate )
 800ac8e:	45d9      	cmp	r9, fp
 800ac90:	dc04      	bgt.n	800ac9c <CalcNextV10X+0x64>
            *adrAckCounter = 0;
 800ac92:	2300      	movs	r3, #0
 800ac94:	602b      	str	r3, [r5, #0]
        datarate = MAX( datarate, minTxDatarate );
 800ac96:	4691      	mov	r9, r2
            adrAckReq = false;
 800ac98:	4698      	mov	r8, r3
 800ac9a:	e7de      	b.n	800ac5a <CalcNextV10X+0x22>
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800ac9c:	68a2      	ldr	r2, [r4, #8]
 800ac9e:	89a3      	ldrh	r3, [r4, #12]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d201      	bcs.n	800aca8 <CalcNextV10X+0x70>
                adrAckReq = false;
 800aca4:	f04f 0800 	mov.w	r8, #0
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800aca8:	89e1      	ldrh	r1, [r4, #14]
 800acaa:	440b      	add	r3, r1
 800acac:	429a      	cmp	r2, r3
 800acae:	d202      	bcs.n	800acb6 <CalcNextV10X+0x7e>
        datarate = MAX( datarate, minTxDatarate );
 800acb0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800acb4:	e7d1      	b.n	800ac5a <CalcNextV10X+0x22>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800acb6:	2308      	movs	r3, #8
 800acb8:	f88d 3018 	strb.w	r3, [sp, #24]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800acbc:	a906      	add	r1, sp, #24
 800acbe:	7ce0      	ldrb	r0, [r4, #19]
 800acc0:	f001 f81f 	bl	800bd02 <RegionGetPhyParam>
                txPower = phyParam.Value;
 800acc4:	fa4f fa80 	sxtb.w	sl, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800acc8:	68a1      	ldr	r1, [r4, #8]
 800acca:	89e2      	ldrh	r2, [r4, #14]
 800accc:	fbb1 f3f2 	udiv	r3, r1, r2
 800acd0:	fb02 1313 	mls	r3, r2, r3, r1
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d002      	beq.n	800acde <CalcNextV10X+0xa6>
        datarate = MAX( datarate, minTxDatarate );
 800acd8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800acdc:	e7bd      	b.n	800ac5a <CalcNextV10X+0x22>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800acde:	2322      	movs	r3, #34	; 0x22
 800ace0:	f88d 3018 	strb.w	r3, [sp, #24]
                    getPhy.Datarate = datarate;
 800ace4:	9b01      	ldr	r3, [sp, #4]
 800ace6:	f88d 3019 	strb.w	r3, [sp, #25]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800acea:	7ca3      	ldrb	r3, [r4, #18]
 800acec:	f88d 301a 	strb.w	r3, [sp, #26]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800acf0:	a906      	add	r1, sp, #24
 800acf2:	7ce0      	ldrb	r0, [r4, #19]
 800acf4:	f001 f805 	bl	800bd02 <RegionGetPhyParam>
                    datarate = phyParam.Value;
 800acf8:	fa4f f980 	sxtb.w	r9, r0
                    if( datarate == minTxDatarate )
 800acfc:	45cb      	cmp	fp, r9
 800acfe:	d1ac      	bne.n	800ac5a <CalcNextV10X+0x22>
                        if( adrNext->UpdateChanMask == true )
 800ad00:	f894 8004 	ldrb.w	r8, [r4, #4]
 800ad04:	f1b8 0f00 	cmp.w	r8, #0
 800ad08:	d0a7      	beq.n	800ac5a <CalcNextV10X+0x22>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800ad0a:	2302      	movs	r3, #2
 800ad0c:	f88d 3010 	strb.w	r3, [sp, #16]
                            RegionInitDefaults( adrNext->Region, &params );
 800ad10:	a902      	add	r1, sp, #8
 800ad12:	7ce0      	ldrb	r0, [r4, #19]
 800ad14:	f001 f863 	bl	800bdde <RegionInitDefaults>
                        adrAckReq = false;
 800ad18:	f04f 0800 	mov.w	r8, #0
 800ad1c:	e79d      	b.n	800ac5a <CalcNextV10X+0x22>

0800ad1e <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800ad1e:	b510      	push	{r4, lr}
    if( adrNext->Version.Fields.Minor == 0 )
 800ad20:	7884      	ldrb	r4, [r0, #2]
 800ad22:	b10c      	cbz	r4, 800ad28 <LoRaMacAdrCalcNext+0xa>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800ad24:	2000      	movs	r0, #0
}
 800ad26:	bd10      	pop	{r4, pc}
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800ad28:	f7ff ff86 	bl	800ac38 <CalcNextV10X>
 800ad2c:	e7fb      	b.n	800ad26 <LoRaMacAdrCalcNext+0x8>

0800ad2e <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad2e:	4770      	bx	lr

0800ad30 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad30:	4770      	bx	lr

0800ad32 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad32:	4770      	bx	lr

0800ad34 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad34:	4770      	bx	lr

0800ad36 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad36:	2000      	movs	r0, #0
 800ad38:	4770      	bx	lr

0800ad3a <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad3a:	4770      	bx	lr

0800ad3c <LoRaMacClassBPingSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad3c:	4770      	bx	lr

0800ad3e <LoRaMacClassBMulticastSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad3e:	4770      	bx	lr

0800ad40 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad40:	2000      	movs	r0, #0
 800ad42:	4770      	bx	lr

0800ad44 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad44:	2000      	movs	r0, #0
 800ad46:	4770      	bx	lr

0800ad48 <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad48:	2000      	movs	r0, #0
 800ad4a:	4770      	bx	lr

0800ad4c <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	4770      	bx	lr

0800ad50 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad50:	2000      	movs	r0, #0
 800ad52:	4770      	bx	lr

0800ad54 <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad54:	4770      	bx	lr

0800ad56 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad56:	4770      	bx	lr

0800ad58 <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad58:	4770      	bx	lr

0800ad5a <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad5a:	2002      	movs	r0, #2
 800ad5c:	4770      	bx	lr

0800ad5e <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad5e:	2002      	movs	r0, #2
 800ad60:	4770      	bx	lr

0800ad62 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad62:	2002      	movs	r0, #2
 800ad64:	4770      	bx	lr

0800ad66 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad66:	4770      	bx	lr

0800ad68 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad68:	2000      	movs	r0, #0
 800ad6a:	4770      	bx	lr

0800ad6c <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad6c:	4770      	bx	lr

0800ad6e <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad6e:	4770      	bx	lr

0800ad70 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad70:	2000      	movs	r0, #0
 800ad72:	4770      	bx	lr

0800ad74 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad74:	2000      	movs	r0, #0
 800ad76:	4770      	bx	lr

0800ad78 <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad78:	4770      	bx	lr

0800ad7a <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad7a:	4770      	bx	lr

0800ad7c <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	2b0f      	cmp	r3, #15
 800ad80:	d804      	bhi.n	800ad8c <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800ad82:	5cc2      	ldrb	r2, [r0, r3]
 800ad84:	b922      	cbnz	r2, 800ad90 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800ad86:	3301      	adds	r3, #1
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	e7f8      	b.n	800ad7e <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800ad8c:	2001      	movs	r0, #1
 800ad8e:	4770      	bx	lr
            return false;
 800ad90:	2000      	movs	r0, #0
}
 800ad92:	4770      	bx	lr

0800ad94 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800ad94:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800ad96:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800ad98:	0125      	lsls	r5, r4, #4
 800ad9a:	f105 0308 	add.w	r3, r5, #8
 800ad9e:	4d06      	ldr	r5, [pc, #24]	; (800adb8 <MallocNewMacCommandSlot+0x24>)
 800ada0:	441d      	add	r5, r3
 800ada2:	4628      	mov	r0, r5
 800ada4:	f7ff ffea 	bl	800ad7c <IsSlotFree>
 800ada8:	b920      	cbnz	r0, 800adb4 <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 800adaa:	3401      	adds	r4, #1
 800adac:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800adae:	2c0f      	cmp	r4, #15
 800adb0:	d1f2      	bne.n	800ad98 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800adb2:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800adb4:	4628      	mov	r0, r5
 800adb6:	bd38      	pop	{r3, r4, r5, pc}
 800adb8:	20001308 	.word	0x20001308

0800adbc <LinkedListInit>:
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800adbc:	b120      	cbz	r0, 800adc8 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800adbe:	2200      	movs	r2, #0
 800adc0:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800adc2:	6042      	str	r2, [r0, #4]

    return true;
 800adc4:	2001      	movs	r0, #1
 800adc6:	4770      	bx	lr
        return false;
 800adc8:	2000      	movs	r0, #0
}
 800adca:	4770      	bx	lr

0800adcc <LinkedListAdd>:
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800adcc:	4603      	mov	r3, r0
 800adce:	b160      	cbz	r0, 800adea <LinkedListAdd+0x1e>
 800add0:	b169      	cbz	r1, 800adee <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800add2:	6802      	ldr	r2, [r0, #0]
 800add4:	b13a      	cbz	r2, 800ade6 <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800add6:	685a      	ldr	r2, [r3, #4]
 800add8:	b102      	cbz	r2, 800addc <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800adda:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800addc:	2200      	movs	r2, #0
 800adde:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800ade0:	6059      	str	r1, [r3, #4]

    return true;
 800ade2:	2001      	movs	r0, #1
 800ade4:	4770      	bx	lr
        list->First = element;
 800ade6:	6001      	str	r1, [r0, #0]
 800ade8:	e7f5      	b.n	800add6 <LinkedListAdd+0xa>
        return false;
 800adea:	2000      	movs	r0, #0
 800adec:	4770      	bx	lr
 800adee:	2000      	movs	r0, #0
}
 800adf0:	4770      	bx	lr

0800adf2 <LinkedListGetPrevious>:
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800adf2:	b160      	cbz	r0, 800ae0e <LinkedListGetPrevious+0x1c>
 800adf4:	b161      	cbz	r1, 800ae10 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800adf6:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800adf8:	4281      	cmp	r1, r0
 800adfa:	d102      	bne.n	800ae02 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800adfc:	2000      	movs	r0, #0
    }

    return curElement;
}
 800adfe:	4770      	bx	lr
            curElement = curElement->Next;
 800ae00:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800ae02:	2800      	cmp	r0, #0
 800ae04:	d0fb      	beq.n	800adfe <LinkedListGetPrevious+0xc>
 800ae06:	6803      	ldr	r3, [r0, #0]
 800ae08:	428b      	cmp	r3, r1
 800ae0a:	d1f9      	bne.n	800ae00 <LinkedListGetPrevious+0xe>
 800ae0c:	4770      	bx	lr
 800ae0e:	4770      	bx	lr
        return NULL;
 800ae10:	4608      	mov	r0, r1
 800ae12:	4770      	bx	lr

0800ae14 <LinkedListRemove>:
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800ae14:	b1b8      	cbz	r0, 800ae46 <LinkedListRemove+0x32>
{
 800ae16:	b538      	push	{r3, r4, r5, lr}
 800ae18:	460c      	mov	r4, r1
 800ae1a:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800ae1c:	b1a9      	cbz	r1, 800ae4a <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800ae1e:	f7ff ffe8 	bl	800adf2 <LinkedListGetPrevious>

    if( list->First == element )
 800ae22:	682b      	ldr	r3, [r5, #0]
 800ae24:	42a3      	cmp	r3, r4
 800ae26:	d009      	beq.n	800ae3c <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800ae28:	686b      	ldr	r3, [r5, #4]
 800ae2a:	42a3      	cmp	r3, r4
 800ae2c:	d009      	beq.n	800ae42 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800ae2e:	b108      	cbz	r0, 800ae34 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800ae30:	6823      	ldr	r3, [r4, #0]
 800ae32:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800ae34:	2300      	movs	r3, #0
 800ae36:	6023      	str	r3, [r4, #0]

    return true;
 800ae38:	2001      	movs	r0, #1
}
 800ae3a:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800ae3c:	6823      	ldr	r3, [r4, #0]
 800ae3e:	602b      	str	r3, [r5, #0]
 800ae40:	e7f2      	b.n	800ae28 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800ae42:	6068      	str	r0, [r5, #4]
 800ae44:	e7f3      	b.n	800ae2e <LinkedListRemove+0x1a>
        return false;
 800ae46:	2000      	movs	r0, #0
}
 800ae48:	4770      	bx	lr
        return false;
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	e7f5      	b.n	800ae3a <LinkedListRemove+0x26>

0800ae4e <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800ae4e:	2805      	cmp	r0, #5
 800ae50:	d006      	beq.n	800ae60 <IsSticky+0x12>
 800ae52:	d307      	bcc.n	800ae64 <IsSticky+0x16>
 800ae54:	3808      	subs	r0, #8
 800ae56:	b2c0      	uxtb	r0, r0
 800ae58:	2802      	cmp	r0, #2
 800ae5a:	d905      	bls.n	800ae68 <IsSticky+0x1a>
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
        default:
            return false;
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	4770      	bx	lr
    switch( cid )
 800ae60:	2001      	movs	r0, #1
 800ae62:	4770      	bx	lr
            return false;
 800ae64:	2000      	movs	r0, #0
 800ae66:	4770      	bx	lr
    switch( cid )
 800ae68:	2001      	movs	r0, #1
    }
}
 800ae6a:	4770      	bx	lr

0800ae6c <FreeMacCommandSlot>:
    if( slot == NULL )
 800ae6c:	b130      	cbz	r0, 800ae7c <FreeMacCommandSlot+0x10>
{
 800ae6e:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800ae70:	2210      	movs	r2, #16
 800ae72:	2100      	movs	r1, #0
 800ae74:	f009 fb1d 	bl	80144b2 <memset1>
    return true;
 800ae78:	2001      	movs	r0, #1
}
 800ae7a:	bd08      	pop	{r3, pc}
        return false;
 800ae7c:	2000      	movs	r0, #0
}
 800ae7e:	4770      	bx	lr

0800ae80 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800ae80:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800ae82:	4c05      	ldr	r4, [pc, #20]	; (800ae98 <LoRaMacCommandsInit+0x18>)
 800ae84:	22fc      	movs	r2, #252	; 0xfc
 800ae86:	2100      	movs	r1, #0
 800ae88:	4620      	mov	r0, r4
 800ae8a:	f009 fb12 	bl	80144b2 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800ae8e:	4620      	mov	r0, r4
 800ae90:	f7ff ff94 	bl	800adbc <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800ae94:	2000      	movs	r0, #0
 800ae96:	bd10      	pop	{r4, pc}
 800ae98:	20001308 	.word	0x20001308

0800ae9c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800ae9c:	b301      	cbz	r1, 800aee0 <LoRaMacCommandsAddCmd+0x44>
{
 800ae9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aea0:	4605      	mov	r5, r0
 800aea2:	4614      	mov	r4, r2
 800aea4:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800aea6:	f7ff ff75 	bl	800ad94 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800aeaa:	4606      	mov	r6, r0
 800aeac:	b1d0      	cbz	r0, 800aee4 <LoRaMacCommandsAddCmd+0x48>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800aeae:	4601      	mov	r1, r0
 800aeb0:	480e      	ldr	r0, [pc, #56]	; (800aeec <LoRaMacCommandsAddCmd+0x50>)
 800aeb2:	f7ff ff8b 	bl	800adcc <LinkedListAdd>
 800aeb6:	b1b8      	cbz	r0, 800aee8 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800aeb8:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800aeba:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800aebc:	b2a2      	uxth	r2, r4
 800aebe:	4639      	mov	r1, r7
 800aec0:	1d70      	adds	r0, r6, #5
 800aec2:	f009 fae0 	bl	8014486 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800aec6:	4628      	mov	r0, r5
 800aec8:	f7ff ffc1 	bl	800ae4e <IsSticky>
 800aecc:	7330      	strb	r0, [r6, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800aece:	4b07      	ldr	r3, [pc, #28]	; (800aeec <LoRaMacCommandsAddCmd+0x50>)
 800aed0:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800aed4:	4414      	add	r4, r2
 800aed6:	3401      	adds	r4, #1
 800aed8:	f8c3 40f8 	str.w	r4, [r3, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 800aedc:	2000      	movs	r0, #0
}
 800aede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800aee0:	2001      	movs	r0, #1
}
 800aee2:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800aee4:	2002      	movs	r0, #2
 800aee6:	e7fa      	b.n	800aede <LoRaMacCommandsAddCmd+0x42>
        return LORAMAC_COMMANDS_ERROR;
 800aee8:	2005      	movs	r0, #5
 800aeea:	e7f8      	b.n	800aede <LoRaMacCommandsAddCmd+0x42>
 800aeec:	20001308 	.word	0x20001308

0800aef0 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800aef0:	b1a0      	cbz	r0, 800af1c <LoRaMacCommandsRemoveCmd+0x2c>
{
 800aef2:	b510      	push	{r4, lr}
 800aef4:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800aef6:	4601      	mov	r1, r0
 800aef8:	480b      	ldr	r0, [pc, #44]	; (800af28 <LoRaMacCommandsRemoveCmd+0x38>)
 800aefa:	f7ff ff8b 	bl	800ae14 <LinkedListRemove>
 800aefe:	b178      	cbz	r0, 800af20 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800af00:	68a1      	ldr	r1, [r4, #8]
 800af02:	4a09      	ldr	r2, [pc, #36]	; (800af28 <LoRaMacCommandsRemoveCmd+0x38>)
 800af04:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 800af08:	1a5b      	subs	r3, r3, r1
 800af0a:	3b01      	subs	r3, #1
 800af0c:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800af10:	4620      	mov	r0, r4
 800af12:	f7ff ffab 	bl	800ae6c <FreeMacCommandSlot>
 800af16:	b128      	cbz	r0, 800af24 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800af18:	2000      	movs	r0, #0
}
 800af1a:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800af1c:	2001      	movs	r0, #1
}
 800af1e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800af20:	2003      	movs	r0, #3
 800af22:	e7fa      	b.n	800af1a <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800af24:	2005      	movs	r0, #5
 800af26:	e7f8      	b.n	800af1a <LoRaMacCommandsRemoveCmd+0x2a>
 800af28:	20001308 	.word	0x20001308

0800af2c <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800af2c:	4b0a      	ldr	r3, [pc, #40]	; (800af58 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800af2e:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800af30:	b120      	cbz	r0, 800af3c <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800af32:	7b03      	ldrb	r3, [r0, #12]
 800af34:	b11b      	cbz	r3, 800af3e <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800af36:	6800      	ldr	r0, [r0, #0]
 800af38:	e7fa      	b.n	800af30 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800af3a:	bd10      	pop	{r4, pc}
 800af3c:	4770      	bx	lr
{
 800af3e:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800af40:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800af42:	f7ff ffd5 	bl	800aef0 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800af46:	4620      	mov	r0, r4
    while( curElement != NULL )
 800af48:	2800      	cmp	r0, #0
 800af4a:	d0f6      	beq.n	800af3a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800af4c:	7b03      	ldrb	r3, [r0, #12]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d0f6      	beq.n	800af40 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800af52:	6800      	ldr	r0, [r0, #0]
 800af54:	e7f8      	b.n	800af48 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800af56:	bf00      	nop
 800af58:	20001308 	.word	0x20001308

0800af5c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800af5c:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800af5e:	4b08      	ldr	r3, [pc, #32]	; (800af80 <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800af60:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800af62:	e003      	b.n	800af6c <LoRaMacCommandsRemoveStickyAnsCmds+0x10>
    {
        nexElement = curElement->Next;
        if( IsSticky( curElement->CID ) == true )
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800af64:	4620      	mov	r0, r4
 800af66:	f7ff ffc3 	bl	800aef0 <LoRaMacCommandsRemoveCmd>
{
 800af6a:	462c      	mov	r4, r5
    while( curElement != NULL )
 800af6c:	b134      	cbz	r4, 800af7c <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
        nexElement = curElement->Next;
 800af6e:	6825      	ldr	r5, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 800af70:	7920      	ldrb	r0, [r4, #4]
 800af72:	f7ff ff6c 	bl	800ae4e <IsSticky>
 800af76:	2800      	cmp	r0, #0
 800af78:	d0f7      	beq.n	800af6a <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
 800af7a:	e7f3      	b.n	800af64 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800af7c:	2000      	movs	r0, #0
 800af7e:	bd38      	pop	{r3, r4, r5, pc}
 800af80:	20001308 	.word	0x20001308

0800af84 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800af84:	b128      	cbz	r0, 800af92 <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800af86:	4a04      	ldr	r2, [pc, #16]	; (800af98 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800af88:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 800af8c:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800af8e:	2000      	movs	r0, #0
 800af90:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800af92:	2001      	movs	r0, #1
}
 800af94:	4770      	bx	lr
 800af96:	bf00      	nop
 800af98:	20001308 	.word	0x20001308

0800af9c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800af9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800afa0:	4b16      	ldr	r3, [pc, #88]	; (800affc <LoRaMacCommandsSerializeCmds+0x60>)
 800afa2:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800afa4:	b32a      	cbz	r2, 800aff2 <LoRaMacCommandsSerializeCmds+0x56>
 800afa6:	4607      	mov	r7, r0
 800afa8:	4688      	mov	r8, r1
 800afaa:	4616      	mov	r6, r2
 800afac:	b319      	cbz	r1, 800aff6 <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800afae:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800afb0:	b194      	cbz	r4, 800afd8 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800afb2:	1a7a      	subs	r2, r7, r1
 800afb4:	68a3      	ldr	r3, [r4, #8]
 800afb6:	3301      	adds	r3, #1
 800afb8:	429a      	cmp	r2, r3
 800afba:	d30d      	bcc.n	800afd8 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800afbc:	1c4d      	adds	r5, r1, #1
 800afbe:	b2ed      	uxtb	r5, r5
 800afc0:	7923      	ldrb	r3, [r4, #4]
 800afc2:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800afc4:	8922      	ldrh	r2, [r4, #8]
 800afc6:	1d61      	adds	r1, r4, #5
 800afc8:	1970      	adds	r0, r6, r5
 800afca:	f009 fa5c 	bl	8014486 <memcpy1>
            itr += curElement->PayloadSize;
 800afce:	68a3      	ldr	r3, [r4, #8]
 800afd0:	441d      	add	r5, r3
 800afd2:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800afd4:	6824      	ldr	r4, [r4, #0]
 800afd6:	e7eb      	b.n	800afb0 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800afd8:	b12c      	cbz	r4, 800afe6 <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800afda:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800afdc:	4620      	mov	r0, r4
 800afde:	f7ff ff87 	bl	800aef0 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800afe2:	462c      	mov	r4, r5
 800afe4:	e7f8      	b.n	800afd8 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800afe6:	4640      	mov	r0, r8
 800afe8:	f7ff ffcc 	bl	800af84 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800afec:	2000      	movs	r0, #0
}
 800afee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800aff2:	2001      	movs	r0, #1
 800aff4:	e7fb      	b.n	800afee <LoRaMacCommandsSerializeCmds+0x52>
 800aff6:	2001      	movs	r0, #1
 800aff8:	e7f9      	b.n	800afee <LoRaMacCommandsSerializeCmds+0x52>
 800affa:	bf00      	nop
 800affc:	20001308 	.word	0x20001308

0800b000 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 800b000:	4601      	mov	r1, r0
 800b002:	b170      	cbz	r0, 800b022 <LoRaMacCommandsStickyCmdsPending+0x22>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800b004:	4b08      	ldr	r3, [pc, #32]	; (800b028 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800b006:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 800b008:	2200      	movs	r2, #0
 800b00a:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b00c:	b13b      	cbz	r3, 800b01e <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 800b00e:	7b1a      	ldrb	r2, [r3, #12]
 800b010:	b90a      	cbnz	r2, 800b016 <LoRaMacCommandsStickyCmdsPending+0x16>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	e7fa      	b.n	800b00c <LoRaMacCommandsStickyCmdsPending+0xc>
            *cmdsPending = true;
 800b016:	2301      	movs	r3, #1
 800b018:	700b      	strb	r3, [r1, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800b01a:	2000      	movs	r0, #0
 800b01c:	4770      	bx	lr
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800b01e:	2000      	movs	r0, #0
 800b020:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b022:	2001      	movs	r0, #1
}
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop
 800b028:	20001308 	.word	0x20001308

0800b02c <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800b02c:	1e83      	subs	r3, r0, #2
 800b02e:	2b11      	cmp	r3, #17
 800b030:	d80a      	bhi.n	800b048 <LoRaMacCommandsGetCmdSize+0x1c>
 800b032:	e8df f003 	tbb	[pc, r3]
 800b036:	0b23      	.short	0x0b23
 800b038:	110f240d 	.word	0x110f240d
 800b03c:	09171513 	.word	0x09171513
 800b040:	09091909 	.word	0x09091909
 800b044:	211f1d1b 	.word	0x211f1d1b
            break;
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800b048:	2000      	movs	r0, #0
 800b04a:	4770      	bx	lr
            cidSize = 5;
 800b04c:	2005      	movs	r0, #5
            break;
 800b04e:	4770      	bx	lr
            cidSize = 2;
 800b050:	2002      	movs	r0, #2
            break;
 800b052:	4770      	bx	lr
            cidSize = 1;
 800b054:	2001      	movs	r0, #1
            break;
 800b056:	4770      	bx	lr
            cidSize = 6;
 800b058:	2006      	movs	r0, #6
            break;
 800b05a:	4770      	bx	lr
            cidSize = 2;
 800b05c:	2002      	movs	r0, #2
            break;
 800b05e:	4770      	bx	lr
            cidSize = 2;
 800b060:	2002      	movs	r0, #2
            break;
 800b062:	4770      	bx	lr
            cidSize = 5;
 800b064:	2005      	movs	r0, #5
            break;
 800b066:	4770      	bx	lr
            cidSize = 6;
 800b068:	2006      	movs	r0, #6
            break;
 800b06a:	4770      	bx	lr
            cidSize = 1;
 800b06c:	2001      	movs	r0, #1
            break;
 800b06e:	4770      	bx	lr
            cidSize = 5;
 800b070:	2005      	movs	r0, #5
            break;
 800b072:	4770      	bx	lr
            cidSize = 4;
 800b074:	2004      	movs	r0, #4
            break;
 800b076:	4770      	bx	lr
            cidSize = 4;
 800b078:	2004      	movs	r0, #4
            break;
 800b07a:	4770      	bx	lr
            cidSize = 3;
 800b07c:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800b07e:	4770      	bx	lr

0800b080 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b080:	4b03      	ldr	r3, [pc, #12]	; (800b090 <IncreaseBufferPointer+0x10>)
 800b082:	4298      	cmp	r0, r3
 800b084:	d001      	beq.n	800b08a <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800b086:	3004      	adds	r0, #4
 800b088:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b08a:	4802      	ldr	r0, [pc, #8]	; (800b094 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop
 800b090:	20001420 	.word	0x20001420
 800b094:	20001410 	.word	0x20001410

0800b098 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800b098:	b108      	cbz	r0, 800b09e <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800b09a:	2000      	movs	r0, #0
 800b09c:	4770      	bx	lr
        return true;
 800b09e:	2001      	movs	r0, #1
}
 800b0a0:	4770      	bx	lr

0800b0a2 <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800b0a2:	2804      	cmp	r0, #4
 800b0a4:	d801      	bhi.n	800b0aa <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800b0a6:	2000      	movs	r0, #0
 800b0a8:	4770      	bx	lr
        return true;
 800b0aa:	2001      	movs	r0, #1
}
 800b0ac:	4770      	bx	lr
	...

0800b0b0 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800b0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b2:	4606      	mov	r6, r0
 800b0b4:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b0b6:	4b0d      	ldr	r3, [pc, #52]	; (800b0ec <GetElement+0x3c>)
 800b0b8:	f893 7020 	ldrb.w	r7, [r3, #32]
 800b0bc:	4638      	mov	r0, r7
 800b0be:	f7ff ffeb 	bl	800b098 <IsListEmpty>
 800b0c2:	b970      	cbnz	r0, 800b0e2 <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800b0c4:	2500      	movs	r5, #0
 800b0c6:	42af      	cmp	r7, r5
 800b0c8:	d909      	bls.n	800b0de <GetElement+0x2e>
    {
        if( element->Request == request )
 800b0ca:	7823      	ldrb	r3, [r4, #0]
 800b0cc:	42b3      	cmp	r3, r6
 800b0ce:	d00a      	beq.n	800b0e6 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f7ff ffd5 	bl	800b080 <IncreaseBufferPointer>
 800b0d6:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800b0d8:	3501      	adds	r5, #1
 800b0da:	b2ed      	uxtb	r5, r5
 800b0dc:	e7f3      	b.n	800b0c6 <GetElement+0x16>
    }

    return NULL;
 800b0de:	2000      	movs	r0, #0
}
 800b0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	e7fc      	b.n	800b0e0 <GetElement+0x30>
            return element;
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	e7fa      	b.n	800b0e0 <GetElement+0x30>
 800b0ea:	bf00      	nop
 800b0ec:	20001404 	.word	0x20001404

0800b0f0 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800b0f0:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800b0f2:	4c08      	ldr	r4, [pc, #32]	; (800b114 <LoRaMacConfirmQueueInit+0x24>)
 800b0f4:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b0fc:	f104 000c 	add.w	r0, r4, #12
 800b100:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b102:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800b104:	2214      	movs	r2, #20
 800b106:	21ff      	movs	r1, #255	; 0xff
 800b108:	f009 f9d3 	bl	80144b2 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b10c:	2301      	movs	r3, #1
 800b10e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800b112:	bd10      	pop	{r4, pc}
 800b114:	20001404 	.word	0x20001404

0800b118 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800b118:	b538      	push	{r3, r4, r5, lr}
 800b11a:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b11c:	4b0f      	ldr	r3, [pc, #60]	; (800b15c <LoRaMacConfirmQueueAdd+0x44>)
 800b11e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b122:	f7ff ffbe 	bl	800b0a2 <IsListFull>
 800b126:	b9b8      	cbnz	r0, 800b158 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800b128:	4c0c      	ldr	r4, [pc, #48]	; (800b15c <LoRaMacConfirmQueueAdd+0x44>)
 800b12a:	68a3      	ldr	r3, [r4, #8]
 800b12c:	782a      	ldrb	r2, [r5, #0]
 800b12e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800b130:	68a3      	ldr	r3, [r4, #8]
 800b132:	786a      	ldrb	r2, [r5, #1]
 800b134:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800b136:	68a3      	ldr	r3, [r4, #8]
 800b138:	78ea      	ldrb	r2, [r5, #3]
 800b13a:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800b13c:	68a3      	ldr	r3, [r4, #8]
 800b13e:	2200      	movs	r2, #0
 800b140:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800b142:	f894 3020 	ldrb.w	r3, [r4, #32]
 800b146:	3301      	adds	r3, #1
 800b148:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800b14c:	68a0      	ldr	r0, [r4, #8]
 800b14e:	f7ff ff97 	bl	800b080 <IncreaseBufferPointer>
 800b152:	60a0      	str	r0, [r4, #8]

    return true;
 800b154:	2001      	movs	r0, #1
}
 800b156:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800b158:	2000      	movs	r0, #0
 800b15a:	e7fc      	b.n	800b156 <LoRaMacConfirmQueueAdd+0x3e>
 800b15c:	20001404 	.word	0x20001404

0800b160 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800b160:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b162:	4b09      	ldr	r3, [pc, #36]	; (800b188 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800b164:	f893 4020 	ldrb.w	r4, [r3, #32]
 800b168:	4620      	mov	r0, r4
 800b16a:	f7ff ff95 	bl	800b098 <IsListEmpty>
 800b16e:	b948      	cbnz	r0, 800b184 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800b170:	4d05      	ldr	r5, [pc, #20]	; (800b188 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800b172:	3c01      	subs	r4, #1
 800b174:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800b178:	6868      	ldr	r0, [r5, #4]
 800b17a:	f7ff ff81 	bl	800b080 <IncreaseBufferPointer>
 800b17e:	6068      	str	r0, [r5, #4]

    return true;
 800b180:	2001      	movs	r0, #1
}
 800b182:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800b184:	2000      	movs	r0, #0
 800b186:	e7fc      	b.n	800b182 <LoRaMacConfirmQueueRemoveFirst+0x22>
 800b188:	20001404 	.word	0x20001404

0800b18c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800b18c:	b538      	push	{r3, r4, r5, lr}
 800b18e:	4605      	mov	r5, r0
 800b190:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b192:	4b08      	ldr	r3, [pc, #32]	; (800b1b4 <LoRaMacConfirmQueueSetStatus+0x28>)
 800b194:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b198:	f7ff ff7e 	bl	800b098 <IsListEmpty>
 800b19c:	b948      	cbnz	r0, 800b1b2 <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800b19e:	4b05      	ldr	r3, [pc, #20]	; (800b1b4 <LoRaMacConfirmQueueSetStatus+0x28>)
 800b1a0:	689a      	ldr	r2, [r3, #8]
 800b1a2:	6859      	ldr	r1, [r3, #4]
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	f7ff ff83 	bl	800b0b0 <GetElement>
        if( element != NULL )
 800b1aa:	b110      	cbz	r0, 800b1b2 <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800b1ac:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800b1b2:	bd38      	pop	{r3, r4, r5, pc}
 800b1b4:	20001404 	.word	0x20001404

0800b1b8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800b1b8:	b510      	push	{r4, lr}
 800b1ba:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b1bc:	4b09      	ldr	r3, [pc, #36]	; (800b1e4 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800b1be:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b1c2:	f7ff ff69 	bl	800b098 <IsListEmpty>
 800b1c6:	b940      	cbnz	r0, 800b1da <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800b1c8:	4b06      	ldr	r3, [pc, #24]	; (800b1e4 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800b1ca:	689a      	ldr	r2, [r3, #8]
 800b1cc:	6859      	ldr	r1, [r3, #4]
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	f7ff ff6e 	bl	800b0b0 <GetElement>
        if( element != NULL )
 800b1d4:	b118      	cbz	r0, 800b1de <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800b1d6:	7840      	ldrb	r0, [r0, #1]
 800b1d8:	e000      	b.n	800b1dc <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b1da:	2001      	movs	r0, #1
}
 800b1dc:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b1de:	2001      	movs	r0, #1
 800b1e0:	e7fc      	b.n	800b1dc <LoRaMacConfirmQueueGetStatus+0x24>
 800b1e2:	bf00      	nop
 800b1e4:	20001404 	.word	0x20001404

0800b1e8 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800b1e8:	b538      	push	{r3, r4, r5, lr}
 800b1ea:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800b1ec:	4b0c      	ldr	r3, [pc, #48]	; (800b220 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800b1ee:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800b1f0:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b1f4:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b1f8:	f7ff ff4e 	bl	800b098 <IsListEmpty>
 800b1fc:	b150      	cbz	r0, 800b214 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800b1fe:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800b200:	2301      	movs	r3, #1
 800b202:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800b204:	4620      	mov	r0, r4
 800b206:	f7ff ff3b 	bl	800b080 <IncreaseBufferPointer>
 800b20a:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800b20c:	4b04      	ldr	r3, [pc, #16]	; (800b220 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	4283      	cmp	r3, r0
 800b212:	d0f4      	beq.n	800b1fe <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800b214:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800b216:	78e3      	ldrb	r3, [r4, #3]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d1f3      	bne.n	800b204 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800b21c:	e7f0      	b.n	800b200 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800b21e:	bf00      	nop
 800b220:	20001404 	.word	0x20001404

0800b224 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800b224:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800b226:	4b04      	ldr	r3, [pc, #16]	; (800b238 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800b228:	689a      	ldr	r2, [r3, #8]
 800b22a:	6859      	ldr	r1, [r3, #4]
 800b22c:	f7ff ff40 	bl	800b0b0 <GetElement>
 800b230:	b100      	cbz	r0, 800b234 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800b232:	2001      	movs	r0, #1
    }
    return false;
}
 800b234:	bd08      	pop	{r3, pc}
 800b236:	bf00      	nop
 800b238:	20001404 	.word	0x20001404

0800b23c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800b23c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b23e:	b083      	sub	sp, #12
 800b240:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800b242:	4b16      	ldr	r3, [pc, #88]	; (800b29c <LoRaMacConfirmQueueHandleCb+0x60>)
 800b244:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800b248:	2400      	movs	r4, #0
 800b24a:	e00d      	b.n	800b268 <LoRaMacConfirmQueueHandleCb+0x2c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800b24c:	781a      	ldrb	r2, [r3, #0]
 800b24e:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800b252:	785a      	ldrb	r2, [r3, #1]
 800b254:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800b258:	78db      	ldrb	r3, [r3, #3]
 800b25a:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800b25e:	f7ff ff7f 	bl	800b160 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800b262:	b1a5      	cbz	r5, 800b28e <LoRaMacConfirmQueueHandleCb+0x52>
    for( uint8_t i = 0; i < nbElements; i++ )
 800b264:	3401      	adds	r4, #1
 800b266:	b2e4      	uxtb	r4, r4
 800b268:	42bc      	cmp	r4, r7
 800b26a:	d214      	bcs.n	800b296 <LoRaMacConfirmQueueHandleCb+0x5a>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800b26c:	4b0b      	ldr	r3, [pc, #44]	; (800b29c <LoRaMacConfirmQueueHandleCb+0x60>)
 800b26e:	685a      	ldr	r2, [r3, #4]
 800b270:	7812      	ldrb	r2, [r2, #0]
 800b272:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800b274:	685a      	ldr	r2, [r3, #4]
 800b276:	7852      	ldrb	r2, [r2, #1]
 800b278:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800b27e:	2d00      	cmp	r5, #0
 800b280:	d0e4      	beq.n	800b24c <LoRaMacConfirmQueueHandleCb+0x10>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800b282:	4b06      	ldr	r3, [pc, #24]	; (800b29c <LoRaMacConfirmQueueHandleCb+0x60>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	4630      	mov	r0, r6
 800b28a:	4798      	blx	r3
 800b28c:	e7e7      	b.n	800b25e <LoRaMacConfirmQueueHandleCb+0x22>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800b28e:	a801      	add	r0, sp, #4
 800b290:	f7ff ff42 	bl	800b118 <LoRaMacConfirmQueueAdd>
 800b294:	e7e6      	b.n	800b264 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 800b296:	b003      	add	sp, #12
 800b298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b29a:	bf00      	nop
 800b29c:	20001404 	.word	0x20001404

0800b2a0 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800b2a0:	4b01      	ldr	r3, [pc, #4]	; (800b2a8 <LoRaMacConfirmQueueGetCnt+0x8>)
 800b2a2:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b2a6:	4770      	bx	lr
 800b2a8:	20001404 	.word	0x20001404

0800b2ac <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800b2ac:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b2ae:	4b03      	ldr	r3, [pc, #12]	; (800b2bc <LoRaMacConfirmQueueIsFull+0x10>)
 800b2b0:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b2b4:	f7ff fef5 	bl	800b0a2 <IsListFull>
    }
    else
    {
        return false;
    }
}
 800b2b8:	bd08      	pop	{r3, pc}
 800b2ba:	bf00      	nop
 800b2bc:	20001404 	.word	0x20001404

0800b2c0 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800b2c0:	b430      	push	{r4, r5}
 800b2c2:	9c02      	ldr	r4, [sp, #8]
 800b2c4:	9903      	ldr	r1, [sp, #12]
 800b2c6:	9a04      	ldr	r2, [sp, #16]
    if( b0 == 0 )
 800b2c8:	b1d2      	cbz	r2, 800b300 <PrepareB0+0x40>
 800b2ca:	4605      	mov	r5, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800b2cc:	2049      	movs	r0, #73	; 0x49
 800b2ce:	7010      	strb	r0, [r2, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 800b2d0:	2000      	movs	r0, #0
 800b2d2:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800b2d4:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800b2d6:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800b2d8:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800b2da:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800b2dc:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800b2de:	0a23      	lsrs	r3, r4, #8
 800b2e0:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800b2e2:	0c23      	lsrs	r3, r4, #16
 800b2e4:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800b2e6:	0e24      	lsrs	r4, r4, #24
 800b2e8:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800b2ea:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800b2ec:	0a0b      	lsrs	r3, r1, #8
 800b2ee:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800b2f0:	0c0b      	lsrs	r3, r1, #16
 800b2f2:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800b2f4:	0e09      	lsrs	r1, r1, #24
 800b2f6:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800b2f8:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800b2fa:	73d5      	strb	r5, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800b2fc:	bc30      	pop	{r4, r5}
 800b2fe:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b300:	200a      	movs	r0, #10
 800b302:	e7fb      	b.n	800b2fc <PrepareB0+0x3c>

0800b304 <GetKeyAddrItem>:
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800b304:	2300      	movs	r3, #0
 800b306:	2b01      	cmp	r3, #1
 800b308:	d813      	bhi.n	800b332 <GetKeyAddrItem+0x2e>
{
 800b30a:	b410      	push	{r4}
    {
        if( KeyAddrList[i].AddrID == addrID )
 800b30c:	461c      	mov	r4, r3
 800b30e:	4a0a      	ldr	r2, [pc, #40]	; (800b338 <GetKeyAddrItem+0x34>)
 800b310:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800b314:	4282      	cmp	r2, r0
 800b316:	d006      	beq.n	800b326 <GetKeyAddrItem+0x22>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800b318:	3301      	adds	r3, #1
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d9f5      	bls.n	800b30c <GetKeyAddrItem+0x8>
        {
            *item = &( KeyAddrList[i] );
            return LORAMAC_CRYPTO_SUCCESS;
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800b320:	200c      	movs	r0, #12
}
 800b322:	bc10      	pop	{r4}
 800b324:	4770      	bx	lr
            *item = &( KeyAddrList[i] );
 800b326:	4b04      	ldr	r3, [pc, #16]	; (800b338 <GetKeyAddrItem+0x34>)
 800b328:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b32c:	600c      	str	r4, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800b32e:	2000      	movs	r0, #0
 800b330:	e7f7      	b.n	800b322 <GetKeyAddrItem+0x1e>
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800b332:	200c      	movs	r0, #12
}
 800b334:	4770      	bx	lr
 800b336:	bf00      	nop
 800b338:	200000cc 	.word	0x200000cc

0800b33c <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800b33c:	460b      	mov	r3, r1
 800b33e:	2900      	cmp	r1, #0
 800b340:	d024      	beq.n	800b38c <GetLastFcntDown+0x50>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800b342:	3801      	subs	r0, #1
 800b344:	2803      	cmp	r0, #3
 800b346:	d823      	bhi.n	800b390 <GetLastFcntDown+0x54>
 800b348:	e8df f000 	tbb	[pc, r0]
 800b34c:	1a120a02 	.word	0x1a120a02
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800b350:	4a10      	ldr	r2, [pc, #64]	; (800b394 <GetLastFcntDown+0x58>)
 800b352:	6812      	ldr	r2, [r2, #0]
 800b354:	6911      	ldr	r1, [r2, #16]
 800b356:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800b358:	6913      	ldr	r3, [r2, #16]
 800b35a:	6213      	str	r3, [r2, #32]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800b35c:	2000      	movs	r0, #0
            break;
 800b35e:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800b360:	4a0c      	ldr	r2, [pc, #48]	; (800b394 <GetLastFcntDown+0x58>)
 800b362:	6812      	ldr	r2, [r2, #0]
 800b364:	6951      	ldr	r1, [r2, #20]
 800b366:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800b368:	6953      	ldr	r3, [r2, #20]
 800b36a:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800b36c:	2000      	movs	r0, #0
            break;
 800b36e:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800b370:	4a08      	ldr	r2, [pc, #32]	; (800b394 <GetLastFcntDown+0x58>)
 800b372:	6812      	ldr	r2, [r2, #0]
 800b374:	6991      	ldr	r1, [r2, #24]
 800b376:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800b378:	6993      	ldr	r3, [r2, #24]
 800b37a:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800b37c:	2000      	movs	r0, #0
            break;
 800b37e:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800b380:	4a04      	ldr	r2, [pc, #16]	; (800b394 <GetLastFcntDown+0x58>)
 800b382:	6812      	ldr	r2, [r2, #0]
 800b384:	69d2      	ldr	r2, [r2, #28]
 800b386:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800b388:	2000      	movs	r0, #0
            break;
 800b38a:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b38c:	200a      	movs	r0, #10
 800b38e:	4770      	bx	lr
    if( lastDown == NULL )
 800b390:	2005      	movs	r0, #5
}
 800b392:	4770      	bx	lr
 800b394:	20001428 	.word	0x20001428

0800b398 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800b398:	b510      	push	{r4, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800b3a2:	a901      	add	r1, sp, #4
 800b3a4:	f7ff ffca 	bl	800b33c <GetLastFcntDown>
 800b3a8:	b948      	cbnz	r0, 800b3be <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800b3aa:	9b01      	ldr	r3, [sp, #4]
 800b3ac:	42a3      	cmp	r3, r4
 800b3ae:	d309      	bcc.n	800b3c4 <CheckFCntDown+0x2c>
 800b3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b4:	d001      	beq.n	800b3ba <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800b3b6:	2000      	movs	r0, #0
 800b3b8:	e002      	b.n	800b3c0 <CheckFCntDown+0x28>
        return true;
 800b3ba:	2001      	movs	r0, #1
 800b3bc:	e000      	b.n	800b3c0 <CheckFCntDown+0x28>
        return false;
 800b3be:	2000      	movs	r0, #0
    }
}
 800b3c0:	b002      	add	sp, #8
 800b3c2:	bd10      	pop	{r4, pc}
        return true;
 800b3c4:	2001      	movs	r0, #1
 800b3c6:	e7fb      	b.n	800b3c0 <CheckFCntDown+0x28>

0800b3c8 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800b3c8:	3801      	subs	r0, #1
 800b3ca:	2803      	cmp	r0, #3
 800b3cc:	d812      	bhi.n	800b3f4 <UpdateFCntDown+0x2c>
 800b3ce:	e8df f000 	tbb	[pc, r0]
 800b3d2:	0602      	.short	0x0602
 800b3d4:	0e0a      	.short	0x0e0a
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800b3d6:	4b08      	ldr	r3, [pc, #32]	; (800b3f8 <UpdateFCntDown+0x30>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	6119      	str	r1, [r3, #16]
            break;
 800b3dc:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800b3de:	4b06      	ldr	r3, [pc, #24]	; (800b3f8 <UpdateFCntDown+0x30>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	6159      	str	r1, [r3, #20]
            break;
 800b3e4:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800b3e6:	4b04      	ldr	r3, [pc, #16]	; (800b3f8 <UpdateFCntDown+0x30>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	6199      	str	r1, [r3, #24]
            break;
 800b3ec:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800b3ee:	4b02      	ldr	r3, [pc, #8]	; (800b3f8 <UpdateFCntDown+0x30>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800b3f4:	4770      	bx	lr
 800b3f6:	bf00      	nop
 800b3f8:	20001428 	.word	0x20001428

0800b3fc <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800b3fc:	4b0a      	ldr	r3, [pc, #40]	; (800b428 <ResetFCnts+0x2c>)
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	2300      	movs	r3, #0
 800b402:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800b404:	f04f 31ff 	mov.w	r1, #4294967295
 800b408:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800b40a:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800b40c:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800b40e:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b410:	2b00      	cmp	r3, #0
 800b412:	dd00      	ble.n	800b416 <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
    }
}
 800b414:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800b416:	1d99      	adds	r1, r3, #6
 800b418:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800b41c:	f04f 30ff 	mov.w	r0, #4294967295
 800b420:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b422:	3301      	adds	r3, #1
 800b424:	e7f4      	b.n	800b410 <ResetFCnts+0x14>
 800b426:	bf00      	nop
 800b428:	20001428 	.word	0x20001428

0800b42c <ComputeCmacB0>:
{
 800b42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b430:	b088      	sub	sp, #32
 800b432:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800b434:	b1f0      	cbz	r0, 800b474 <ComputeCmacB0+0x48>
 800b436:	460c      	mov	r4, r1
 800b438:	4615      	mov	r5, r2
 800b43a:	461a      	mov	r2, r3
 800b43c:	4680      	mov	r8, r0
 800b43e:	b1de      	cbz	r6, 800b478 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800b440:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b444:	d81a      	bhi.n	800b47c <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800b446:	af04      	add	r7, sp, #16
 800b448:	9702      	str	r7, [sp, #8]
 800b44a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b44c:	9301      	str	r3, [sp, #4]
 800b44e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b450:	9300      	str	r3, [sp, #0]
 800b452:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800b456:	4629      	mov	r1, r5
 800b458:	4620      	mov	r0, r4
 800b45a:	f7ff ff31 	bl	800b2c0 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800b45e:	9600      	str	r6, [sp, #0]
 800b460:	462b      	mov	r3, r5
 800b462:	4622      	mov	r2, r4
 800b464:	4641      	mov	r1, r8
 800b466:	4638      	mov	r0, r7
 800b468:	f008 feaa 	bl	80141c0 <SecureElementComputeAesCmac>
 800b46c:	b940      	cbnz	r0, 800b480 <ComputeCmacB0+0x54>
}
 800b46e:	b008      	add	sp, #32
 800b470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b474:	200a      	movs	r0, #10
 800b476:	e7fa      	b.n	800b46e <ComputeCmacB0+0x42>
 800b478:	200a      	movs	r0, #10
 800b47a:	e7f8      	b.n	800b46e <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800b47c:	200e      	movs	r0, #14
 800b47e:	e7f6      	b.n	800b46e <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b480:	200f      	movs	r0, #15
 800b482:	e7f4      	b.n	800b46e <ComputeCmacB0+0x42>

0800b484 <DeriveSessionKey10x>:
{
 800b484:	b510      	push	{r4, lr}
 800b486:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800b488:	2400      	movs	r4, #0
 800b48a:	9402      	str	r4, [sp, #8]
 800b48c:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800b48e:	2802      	cmp	r0, #2
 800b490:	d003      	beq.n	800b49a <DeriveSessionKey10x+0x16>
 800b492:	2803      	cmp	r0, #3
 800b494:	d025      	beq.n	800b4e2 <DeriveSessionKey10x+0x5e>
 800b496:	200b      	movs	r0, #11
 800b498:	e021      	b.n	800b4de <DeriveSessionKey10x+0x5a>
            compBase[0] = 0x01;
 800b49a:	2401      	movs	r4, #1
 800b49c:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800b4a0:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800b4a4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800b4a8:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800b4ac:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800b4b0:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800b4b4:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800b4b8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800b4bc:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800b4c0:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800b4c4:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800b4c8:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800b4cc:	0a1b      	lsrs	r3, r3, #8
 800b4ce:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	2101      	movs	r1, #1
 800b4d6:	4668      	mov	r0, sp
 800b4d8:	f008 ff0e 	bl	80142f8 <SecureElementDeriveAndStoreKey>
 800b4dc:	b928      	cbnz	r0, 800b4ea <DeriveSessionKey10x+0x66>
}
 800b4de:	b004      	add	sp, #16
 800b4e0:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800b4e2:	2402      	movs	r4, #2
 800b4e4:	f88d 4000 	strb.w	r4, [sp]
            break;
 800b4e8:	e7da      	b.n	800b4a0 <DeriveSessionKey10x+0x1c>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b4ea:	200f      	movs	r0, #15
 800b4ec:	e7f7      	b.n	800b4de <DeriveSessionKey10x+0x5a>

0800b4ee <PayloadEncrypt>:
{
 800b4ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4f2:	b088      	sub	sp, #32
 800b4f4:	4690      	mov	r8, r2
 800b4f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d050      	beq.n	800b59e <PayloadEncrypt+0xb0>
 800b4fc:	460d      	mov	r5, r1
 800b4fe:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800b500:	2600      	movs	r6, #0
 800b502:	9604      	str	r6, [sp, #16]
 800b504:	9605      	str	r6, [sp, #20]
 800b506:	9606      	str	r6, [sp, #24]
 800b508:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800b50a:	9600      	str	r6, [sp, #0]
 800b50c:	9601      	str	r6, [sp, #4]
 800b50e:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800b510:	2701      	movs	r7, #1
 800b512:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800b516:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800b51a:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800b51e:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800b522:	0a19      	lsrs	r1, r3, #8
 800b524:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800b528:	0c19      	lsrs	r1, r3, #16
 800b52a:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800b52e:	0e1b      	lsrs	r3, r3, #24
 800b530:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800b534:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800b538:	0a13      	lsrs	r3, r2, #8
 800b53a:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800b53e:	0c13      	lsrs	r3, r2, #16
 800b540:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800b544:	0e12      	lsrs	r2, r2, #24
 800b546:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800b54a:	e013      	b.n	800b574 <PayloadEncrypt+0x86>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800b54c:	18f2      	adds	r2, r6, r3
 800b54e:	5ca0      	ldrb	r0, [r4, r2]
 800b550:	a908      	add	r1, sp, #32
 800b552:	4419      	add	r1, r3
 800b554:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800b558:	4048      	eors	r0, r1
 800b55a:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800b55c:	3301      	adds	r3, #1
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	462a      	mov	r2, r5
 800b562:	2d10      	cmp	r5, #16
 800b564:	bfa8      	it	ge
 800b566:	2210      	movge	r2, #16
 800b568:	4293      	cmp	r3, r2
 800b56a:	dbef      	blt.n	800b54c <PayloadEncrypt+0x5e>
        size -= 16;
 800b56c:	3d10      	subs	r5, #16
 800b56e:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800b570:	3610      	adds	r6, #16
 800b572:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800b574:	2d00      	cmp	r5, #0
 800b576:	dd0e      	ble.n	800b596 <PayloadEncrypt+0xa8>
        aBlock[15] = ctr & 0xFF;
 800b578:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800b57c:	3701      	adds	r7, #1
 800b57e:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800b580:	ab04      	add	r3, sp, #16
 800b582:	4642      	mov	r2, r8
 800b584:	2110      	movs	r1, #16
 800b586:	4668      	mov	r0, sp
 800b588:	f008 fe3c 	bl	8014204 <SecureElementAesEncrypt>
 800b58c:	4603      	mov	r3, r0
 800b58e:	2800      	cmp	r0, #0
 800b590:	d0e6      	beq.n	800b560 <PayloadEncrypt+0x72>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b592:	200f      	movs	r0, #15
 800b594:	e000      	b.n	800b598 <PayloadEncrypt+0xaa>
    return LORAMAC_CRYPTO_SUCCESS;
 800b596:	2000      	movs	r0, #0
}
 800b598:	b008      	add	sp, #32
 800b59a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b59e:	200a      	movs	r0, #10
 800b5a0:	e7fa      	b.n	800b598 <PayloadEncrypt+0xaa>

0800b5a2 <VerifyCmacB0>:
    if( msg == 0 )
 800b5a2:	b370      	cbz	r0, 800b602 <VerifyCmacB0+0x60>
{
 800b5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a8:	b0c8      	sub	sp, #288	; 0x120
 800b5aa:	460c      	mov	r4, r1
 800b5ac:	4615      	mov	r5, r2
 800b5ae:	461e      	mov	r6, r3
 800b5b0:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800b5b2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b5b6:	d826      	bhi.n	800b606 <VerifyCmacB0+0x64>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800b5b8:	af04      	add	r7, sp, #16
 800b5ba:	f44f 7288 	mov.w	r2, #272	; 0x110
 800b5be:	2100      	movs	r1, #0
 800b5c0:	4638      	mov	r0, r7
 800b5c2:	f008 ff76 	bl	80144b2 <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800b5c6:	9702      	str	r7, [sp, #8]
 800b5c8:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800b5ca:	9301      	str	r3, [sp, #4]
 800b5cc:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800b5d4:	4632      	mov	r2, r6
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f7ff fe71 	bl	800b2c0 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800b5de:	4622      	mov	r2, r4
 800b5e0:	4641      	mov	r1, r8
 800b5e2:	a808      	add	r0, sp, #32
 800b5e4:	f008 ff4f 	bl	8014486 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800b5e8:	f104 0110 	add.w	r1, r4, #16
 800b5ec:	462b      	mov	r3, r5
 800b5ee:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800b5f0:	b289      	uxth	r1, r1
 800b5f2:	4638      	mov	r0, r7
 800b5f4:	f008 fdf0 	bl	80141d8 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800b5f8:	b130      	cbz	r0, 800b608 <VerifyCmacB0+0x66>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800b5fa:	2801      	cmp	r0, #1
 800b5fc:	d004      	beq.n	800b608 <VerifyCmacB0+0x66>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b5fe:	200f      	movs	r0, #15
 800b600:	e002      	b.n	800b608 <VerifyCmacB0+0x66>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b602:	200a      	movs	r0, #10
}
 800b604:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800b606:	200e      	movs	r0, #14
}
 800b608:	b048      	add	sp, #288	; 0x120
 800b60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800b610 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800b610:	b188      	cbz	r0, 800b636 <LoRaMacCryptoInit+0x26>
{
 800b612:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800b614:	4c09      	ldr	r4, [pc, #36]	; (800b63c <LoRaMacCryptoInit+0x2c>)
 800b616:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800b618:	2228      	movs	r2, #40	; 0x28
 800b61a:	2100      	movs	r1, #0
 800b61c:	f008 ff49 	bl	80144b2 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800b620:	6823      	ldr	r3, [r4, #0]
 800b622:	2201      	movs	r2, #1
 800b624:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800b626:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800b628:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800b62a:	2400      	movs	r4, #0
 800b62c:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800b62e:	f7ff fee5 	bl	800b3fc <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800b632:	4620      	mov	r0, r4
}
 800b634:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800b636:	2009      	movs	r0, #9
}
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop
 800b63c:	20001428 	.word	0x20001428

0800b640 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800b640:	4b02      	ldr	r3, [pc, #8]	; (800b64c <LoRaMacCryptoSetLrWanVersion+0xc>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800b646:	2000      	movs	r0, #0
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	20001428 	.word	0x20001428

0800b650 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800b650:	b130      	cbz	r0, 800b660 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800b652:	4b04      	ldr	r3, [pc, #16]	; (800b664 <LoRaMacCryptoGetFCntUp+0x14>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	3301      	adds	r3, #1
 800b65a:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800b65c:	2000      	movs	r0, #0
 800b65e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b660:	200a      	movs	r0, #10
}
 800b662:	4770      	bx	lr
 800b664:	20001428 	.word	0x20001428

0800b668 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 800b668:	b570      	push	{r4, r5, r6, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	4615      	mov	r5, r2
    uint32_t lastDown = 0;
 800b66e:	2200      	movs	r2, #0
 800b670:	9201      	str	r2, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800b672:	b373      	cbz	r3, 800b6d2 <LoRaMacCryptoGetFCntDown+0x6a>
 800b674:	460c      	mov	r4, r1
 800b676:	461e      	mov	r6, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800b678:	a901      	add	r1, sp, #4
 800b67a:	f7ff fe5f 	bl	800b33c <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800b67e:	b9c8      	cbnz	r0, 800b6b4 <LoRaMacCryptoGetFCntDown+0x4c>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800b680:	9b01      	ldr	r3, [sp, #4]
 800b682:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b686:	d017      	beq.n	800b6b8 <LoRaMacCryptoGetFCntDown+0x50>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800b688:	b29a      	uxth	r2, r3
 800b68a:	1aaa      	subs	r2, r5, r2

        if( fCntDiff > 0 )
 800b68c:	2a00      	cmp	r2, #0
 800b68e:	dd15      	ble.n	800b6bc <LoRaMacCryptoGetFCntDown+0x54>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800b690:	4413      	add	r3, r2
 800b692:	6033      	str	r3, [r6, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800b694:	4b11      	ldr	r3, [pc, #68]	; (800b6dc <LoRaMacCryptoGetFCntDown+0x74>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	789b      	ldrb	r3, [r3, #2]
 800b69a:	b95b      	cbnz	r3, 800b6b4 <LoRaMacCryptoGetFCntDown+0x4c>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800b69c:	6830      	ldr	r0, [r6, #0]
 800b69e:	9a01      	ldr	r2, [sp, #4]
 800b6a0:	1a80      	subs	r0, r0, r2
 800b6a2:	eb60 0100 	sbc.w	r1, r0, r0
 800b6a6:	b2a4      	uxth	r4, r4
 800b6a8:	2500      	movs	r5, #0
 800b6aa:	42a0      	cmp	r0, r4
 800b6ac:	eb71 0205 	sbcs.w	r2, r1, r5
 800b6b0:	da11      	bge.n	800b6d6 <LoRaMacCryptoGetFCntDown+0x6e>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800b6b2:	4618      	mov	r0, r3
}
 800b6b4:	b002      	add	sp, #8
 800b6b6:	bd70      	pop	{r4, r5, r6, pc}
        *currentDown = frameFcnt;
 800b6b8:	6035      	str	r5, [r6, #0]
 800b6ba:	e7eb      	b.n	800b694 <LoRaMacCryptoGetFCntDown+0x2c>
        else if( fCntDiff == 0 )
 800b6bc:	b132      	cbz	r2, 800b6cc <LoRaMacCryptoGetFCntDown+0x64>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800b6be:	0c1b      	lsrs	r3, r3, #16
 800b6c0:	041b      	lsls	r3, r3, #16
 800b6c2:	442b      	add	r3, r5
 800b6c4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b6c8:	6033      	str	r3, [r6, #0]
 800b6ca:	e7e3      	b.n	800b694 <LoRaMacCryptoGetFCntDown+0x2c>
            *currentDown = lastDown;
 800b6cc:	6033      	str	r3, [r6, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800b6ce:	2007      	movs	r0, #7
 800b6d0:	e7f0      	b.n	800b6b4 <LoRaMacCryptoGetFCntDown+0x4c>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b6d2:	200a      	movs	r0, #10
 800b6d4:	e7ee      	b.n	800b6b4 <LoRaMacCryptoGetFCntDown+0x4c>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800b6d6:	2008      	movs	r0, #8
 800b6d8:	e7ec      	b.n	800b6b4 <LoRaMacCryptoGetFCntDown+0x4c>
 800b6da:	bf00      	nop
 800b6dc:	20001428 	.word	0x20001428

0800b6e0 <LoRaMacCryptoSetMulticastReference>:
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800b6e0:	b908      	cbnz	r0, 800b6e6 <LoRaMacCryptoSetMulticastReference+0x6>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b6e2:	200a      	movs	r0, #10
 800b6e4:	4770      	bx	lr
 800b6e6:	4601      	mov	r1, r0
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	dd01      	ble.n	800b6f2 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800b6ee:	2000      	movs	r0, #0
}
 800b6f0:	4770      	bx	lr
{
 800b6f2:	b410      	push	{r4}
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800b6f4:	4a07      	ldr	r2, [pc, #28]	; (800b714 <LoRaMacCryptoSetMulticastReference+0x34>)
 800b6f6:	6812      	ldr	r2, [r2, #0]
 800b6f8:	202c      	movs	r0, #44	; 0x2c
 800b6fa:	fb00 1003 	mla	r0, r0, r3, r1
 800b6fe:	1d9c      	adds	r4, r3, #6
 800b700:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800b704:	3204      	adds	r2, #4
 800b706:	6202      	str	r2, [r0, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b708:	3301      	adds	r3, #1
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	ddf2      	ble.n	800b6f4 <LoRaMacCryptoSetMulticastReference+0x14>
    return LORAMAC_CRYPTO_SUCCESS;
 800b70e:	2000      	movs	r0, #0
}
 800b710:	bc10      	pop	{r4}
 800b712:	4770      	bx	lr
 800b714:	20001428 	.word	0x20001428

0800b718 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800b718:	b300      	cbz	r0, 800b75c <LoRaMacCryptoPrepareJoinRequest+0x44>
{
 800b71a:	b510      	push	{r4, lr}
 800b71c:	b084      	sub	sp, #16
 800b71e:	4604      	mov	r4, r0
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 800b720:	2300      	movs	r3, #0
 800b722:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800b724:	a803      	add	r0, sp, #12
 800b726:	f008 fe4b 	bl	80143c0 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 800b72a:	4b10      	ldr	r3, [pc, #64]	; (800b76c <LoRaMacCryptoPrepareJoinRequest+0x54>)
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b732:	8093      	strh	r3, [r2, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800b734:	82e3      	strh	r3, [r4, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800b736:	4620      	mov	r0, r4
 800b738:	f000 fa2d 	bl	800bb96 <LoRaMacSerializerJoinRequest>
 800b73c:	b980      	cbnz	r0, 800b760 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800b73e:	4623      	mov	r3, r4
 800b740:	f853 1b18 	ldr.w	r1, [r3], #24
 800b744:	9300      	str	r3, [sp, #0]
 800b746:	2301      	movs	r3, #1
 800b748:	2213      	movs	r2, #19
 800b74a:	f008 fd39 	bl	80141c0 <SecureElementComputeAesCmac>
 800b74e:	b950      	cbnz	r0, 800b766 <LoRaMacCryptoPrepareJoinRequest+0x4e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800b750:	4620      	mov	r0, r4
 800b752:	f000 fa20 	bl	800bb96 <LoRaMacSerializerJoinRequest>
 800b756:	b120      	cbz	r0, 800b762 <LoRaMacCryptoPrepareJoinRequest+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800b758:	2011      	movs	r0, #17
 800b75a:	e002      	b.n	800b762 <LoRaMacCryptoPrepareJoinRequest+0x4a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b75c:	200a      	movs	r0, #10
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800b75e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800b760:	2011      	movs	r0, #17
}
 800b762:	b004      	add	sp, #16
 800b764:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b766:	200f      	movs	r0, #15
 800b768:	e7fb      	b.n	800b762 <LoRaMacCryptoPrepareJoinRequest+0x4a>
 800b76a:	bf00      	nop
 800b76c:	20001428 	.word	0x20001428

0800b770 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800b770:	2b00      	cmp	r3, #0
 800b772:	d036      	beq.n	800b7e2 <LoRaMacCryptoSecureMessage+0x72>
{
 800b774:	b530      	push	{r4, r5, lr}
 800b776:	b085      	sub	sp, #20
 800b778:	4604      	mov	r4, r0
 800b77a:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800b77c:	4b1d      	ldr	r3, [pc, #116]	; (800b7f4 <LoRaMacCryptoSecureMessage+0x84>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	68db      	ldr	r3, [r3, #12]
 800b782:	4283      	cmp	r3, r0
 800b784:	d82f      	bhi.n	800b7e6 <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800b786:	f895 2020 	ldrb.w	r2, [r5, #32]
 800b78a:	b342      	cbz	r2, 800b7de <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800b78c:	2203      	movs	r2, #3
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800b78e:	42a3      	cmp	r3, r4
 800b790:	d209      	bcs.n	800b7a6 <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800b792:	9401      	str	r4, [sp, #4]
 800b794:	2300      	movs	r3, #0
 800b796:	9300      	str	r3, [sp, #0]
 800b798:	68ab      	ldr	r3, [r5, #8]
 800b79a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800b79e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b7a0:	f7ff fea5 	bl	800b4ee <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800b7a4:	bb10      	cbnz	r0, 800b7ec <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800b7a6:	4628      	mov	r0, r5
 800b7a8:	f000 fa2b 	bl	800bc02 <LoRaMacSerializerData>
 800b7ac:	b9e8      	cbnz	r0, 800b7ea <LoRaMacCryptoSecureMessage+0x7a>
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800b7ae:	7929      	ldrb	r1, [r5, #4]
 800b7b0:	3904      	subs	r1, #4
 800b7b2:	462b      	mov	r3, r5
 800b7b4:	f853 0b2c 	ldr.w	r0, [r3], #44
 800b7b8:	9303      	str	r3, [sp, #12]
 800b7ba:	9402      	str	r4, [sp, #8]
 800b7bc:	68ab      	ldr	r3, [r5, #8]
 800b7be:	9301      	str	r3, [sp, #4]
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	9300      	str	r3, [sp, #0]
 800b7c4:	2202      	movs	r2, #2
 800b7c6:	b289      	uxth	r1, r1
 800b7c8:	f7ff fe30 	bl	800b42c <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800b7cc:	b970      	cbnz	r0, 800b7ec <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	f000 fa17 	bl	800bc02 <LoRaMacSerializerData>
 800b7d4:	b960      	cbnz	r0, 800b7f0 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800b7d6:	4b07      	ldr	r3, [pc, #28]	; (800b7f4 <LoRaMacCryptoSecureMessage+0x84>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800b7dc:	e006      	b.n	800b7ec <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800b7de:	2202      	movs	r2, #2
 800b7e0:	e7d5      	b.n	800b78e <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b7e2:	200a      	movs	r0, #10
}
 800b7e4:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800b7e6:	2006      	movs	r0, #6
 800b7e8:	e000      	b.n	800b7ec <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800b7ea:	2011      	movs	r0, #17
}
 800b7ec:	b005      	add	sp, #20
 800b7ee:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800b7f0:	2011      	movs	r0, #17
 800b7f2:	e7fb      	b.n	800b7ec <LoRaMacCryptoSecureMessage+0x7c>
 800b7f4:	20001428 	.word	0x20001428

0800b7f8 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800b7f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7fc:	b087      	sub	sp, #28
 800b7fe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800b800:	2e00      	cmp	r6, #0
 800b802:	d049      	beq.n	800b898 <LoRaMacCryptoUnsecureMessage+0xa0>
 800b804:	4605      	mov	r5, r0
 800b806:	4688      	mov	r8, r1
 800b808:	4617      	mov	r7, r2
 800b80a:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800b80c:	4619      	mov	r1, r3
 800b80e:	4610      	mov	r0, r2
 800b810:	f7ff fdc2 	bl	800b398 <CheckFCntDown>
 800b814:	2800      	cmp	r0, #0
 800b816:	d041      	beq.n	800b89c <LoRaMacCryptoUnsecureMessage+0xa4>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800b818:	4630      	mov	r0, r6
 800b81a:	f000 f95d 	bl	800bad8 <LoRaMacParserData>
 800b81e:	2800      	cmp	r0, #0
 800b820:	d141      	bne.n	800b8a6 <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800b822:	a905      	add	r1, sp, #20
 800b824:	4628      	mov	r0, r5
 800b826:	f7ff fd6d 	bl	800b304 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800b82a:	4605      	mov	r5, r0
 800b82c:	2800      	cmp	r0, #0
 800b82e:	d136      	bne.n	800b89e <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800b830:	9b05      	ldr	r3, [sp, #20]
 800b832:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800b836:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800b838:	68b3      	ldr	r3, [r6, #8]
 800b83a:	4543      	cmp	r3, r8
 800b83c:	d135      	bne.n	800b8aa <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800b83e:	7b33      	ldrb	r3, [r6, #12]
 800b840:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800b844:	491a      	ldr	r1, [pc, #104]	; (800b8b0 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800b846:	6809      	ldr	r1, [r1, #0]
 800b848:	7889      	ldrb	r1, [r1, #2]
 800b84a:	b901      	cbnz	r1, 800b84e <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800b84c:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800b84e:	7931      	ldrb	r1, [r6, #4]
 800b850:	3904      	subs	r1, #4
 800b852:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800b854:	9003      	str	r0, [sp, #12]
 800b856:	9402      	str	r4, [sp, #8]
 800b858:	f8cd 8004 	str.w	r8, [sp, #4]
 800b85c:	2001      	movs	r0, #1
 800b85e:	9000      	str	r0, [sp, #0]
 800b860:	b289      	uxth	r1, r1
 800b862:	6830      	ldr	r0, [r6, #0]
 800b864:	f7ff fe9d 	bl	800b5a2 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800b868:	4605      	mov	r5, r0
 800b86a:	b9c0      	cbnz	r0, 800b89e <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800b86c:	f896 3020 	ldrb.w	r3, [r6, #32]
 800b870:	b90b      	cbnz	r3, 800b876 <LoRaMacCryptoUnsecureMessage+0x7e>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 800b872:	f04f 0902 	mov.w	r9, #2
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800b876:	9401      	str	r4, [sp, #4]
 800b878:	2301      	movs	r3, #1
 800b87a:	9300      	str	r3, [sp, #0]
 800b87c:	4643      	mov	r3, r8
 800b87e:	464a      	mov	r2, r9
 800b880:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800b884:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800b886:	f7ff fe32 	bl	800b4ee <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800b88a:	4605      	mov	r5, r0
 800b88c:	b938      	cbnz	r0, 800b89e <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 800b88e:	4621      	mov	r1, r4
 800b890:	4638      	mov	r0, r7
 800b892:	f7ff fd99 	bl	800b3c8 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800b896:	e002      	b.n	800b89e <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b898:	250a      	movs	r5, #10
 800b89a:	e000      	b.n	800b89e <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800b89c:	2506      	movs	r5, #6
}
 800b89e:	4628      	mov	r0, r5
 800b8a0:	b007      	add	sp, #28
 800b8a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800b8a6:	2510      	movs	r5, #16
 800b8a8:	e7f9      	b.n	800b89e <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800b8aa:	2502      	movs	r5, #2
 800b8ac:	e7f7      	b.n	800b89e <LoRaMacCryptoUnsecureMessage+0xa6>
 800b8ae:	bf00      	nop
 800b8b0:	20001428 	.word	0x20001428

0800b8b4 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 800b8b4:	b9a9      	cbnz	r1, 800b8e2 <LoRaMacCryptoDeriveMcRootKey+0x2e>
{
 800b8b6:	b510      	push	{r4, lr}
 800b8b8:	b084      	sub	sp, #16
 800b8ba:	460c      	mov	r4, r1
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800b8bc:	2300      	movs	r3, #0
 800b8be:	9300      	str	r3, [sp, #0]
 800b8c0:	9301      	str	r3, [sp, #4]
 800b8c2:	9302      	str	r3, [sp, #8]
 800b8c4:	9303      	str	r3, [sp, #12]

    if( versionMinor == 1 )
 800b8c6:	2801      	cmp	r0, #1
 800b8c8:	d007      	beq.n	800b8da <LoRaMacCryptoDeriveMcRootKey+0x26>
    {
        compBase[0] = 0x20;
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800b8ca:	2204      	movs	r2, #4
 800b8cc:	4621      	mov	r1, r4
 800b8ce:	4668      	mov	r0, sp
 800b8d0:	f008 fd12 	bl	80142f8 <SecureElementDeriveAndStoreKey>
 800b8d4:	b938      	cbnz	r0, 800b8e6 <LoRaMacCryptoDeriveMcRootKey+0x32>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800b8d6:	b004      	add	sp, #16
 800b8d8:	bd10      	pop	{r4, pc}
        compBase[0] = 0x20;
 800b8da:	2320      	movs	r3, #32
 800b8dc:	f88d 3000 	strb.w	r3, [sp]
 800b8e0:	e7f3      	b.n	800b8ca <LoRaMacCryptoDeriveMcRootKey+0x16>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800b8e2:	200b      	movs	r0, #11
}
 800b8e4:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b8e6:	200f      	movs	r0, #15
 800b8e8:	e7f5      	b.n	800b8d6 <LoRaMacCryptoDeriveMcRootKey+0x22>

0800b8ea <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 800b8ea:	2804      	cmp	r0, #4
 800b8ec:	d001      	beq.n	800b8f2 <LoRaMacCryptoDeriveMcKEKey+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800b8ee:	200b      	movs	r0, #11
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800b8f0:	4770      	bx	lr
{
 800b8f2:	b500      	push	{lr}
 800b8f4:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	9301      	str	r3, [sp, #4]
 800b8fc:	9302      	str	r3, [sp, #8]
 800b8fe:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800b900:	227f      	movs	r2, #127	; 0x7f
 800b902:	4601      	mov	r1, r0
 800b904:	4668      	mov	r0, sp
 800b906:	f008 fcf7 	bl	80142f8 <SecureElementDeriveAndStoreKey>
 800b90a:	b910      	cbnz	r0, 800b912 <LoRaMacCryptoDeriveMcKEKey+0x28>
}
 800b90c:	b005      	add	sp, #20
 800b90e:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b912:	200f      	movs	r0, #15
 800b914:	e7fa      	b.n	800b90c <LoRaMacCryptoDeriveMcKEKey+0x22>
	...

0800b918 <LoRaMacCryptoSetKey>:
{
 800b918:	b510      	push	{r4, lr}
 800b91a:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800b91c:	f008 fcaa 	bl	8014274 <SecureElementSetKey>
 800b920:	b978      	cbnz	r0, 800b942 <LoRaMacCryptoSetKey+0x2a>
    if( keyID == APP_KEY )
 800b922:	b104      	cbz	r4, 800b926 <LoRaMacCryptoSetKey+0xe>
}
 800b924:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800b926:	4b09      	ldr	r3, [pc, #36]	; (800b94c <LoRaMacCryptoSetKey+0x34>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4621      	mov	r1, r4
 800b92c:	7898      	ldrb	r0, [r3, #2]
 800b92e:	f7ff ffc1 	bl	800b8b4 <LoRaMacCryptoDeriveMcRootKey>
 800b932:	b940      	cbnz	r0, 800b946 <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800b934:	2004      	movs	r0, #4
 800b936:	f7ff ffd8 	bl	800b8ea <LoRaMacCryptoDeriveMcKEKey>
 800b93a:	2800      	cmp	r0, #0
 800b93c:	d0f2      	beq.n	800b924 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b93e:	200f      	movs	r0, #15
 800b940:	e7f0      	b.n	800b924 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b942:	200f      	movs	r0, #15
 800b944:	e7ee      	b.n	800b924 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b946:	200f      	movs	r0, #15
 800b948:	e7ec      	b.n	800b924 <LoRaMacCryptoSetKey+0xc>
 800b94a:	bf00      	nop
 800b94c:	20001428 	.word	0x20001428

0800b950 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800b950:	2a00      	cmp	r2, #0
 800b952:	d064      	beq.n	800ba1e <LoRaMacCryptoHandleJoinAccept+0xce>
{
 800b954:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b956:	b08f      	sub	sp, #60	; 0x3c
 800b958:	4607      	mov	r7, r0
 800b95a:	460d      	mov	r5, r1
 800b95c:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800b95e:	2900      	cmp	r1, #0
 800b960:	d05f      	beq.n	800ba22 <LoRaMacCryptoHandleJoinAccept+0xd2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800b962:	2600      	movs	r6, #0
 800b964:	9605      	str	r6, [sp, #20]
 800b966:	221d      	movs	r2, #29
 800b968:	4631      	mov	r1, r6
 800b96a:	a806      	add	r0, sp, #24
 800b96c:	f00b fce6 	bl	801733c <memset>
    uint8_t versionMinor         = 0;
 800b970:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800b974:	4b2f      	ldr	r3, [pc, #188]	; (800ba34 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800b97a:	f10d 0313 	add.w	r3, sp, #19
 800b97e:	9302      	str	r3, [sp, #8]
 800b980:	ab05      	add	r3, sp, #20
 800b982:	9301      	str	r3, [sp, #4]
 800b984:	7923      	ldrb	r3, [r4, #4]
 800b986:	9300      	str	r3, [sp, #0]
 800b988:	6823      	ldr	r3, [r4, #0]
 800b98a:	4632      	mov	r2, r6
 800b98c:	4629      	mov	r1, r5
 800b98e:	4638      	mov	r0, r7
 800b990:	f008 fcd2 	bl	8014338 <SecureElementProcessJoinAccept>
 800b994:	2800      	cmp	r0, #0
 800b996:	d146      	bne.n	800ba26 <LoRaMacCryptoHandleJoinAccept+0xd6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800b998:	7922      	ldrb	r2, [r4, #4]
 800b99a:	a905      	add	r1, sp, #20
 800b99c:	6820      	ldr	r0, [r4, #0]
 800b99e:	f008 fd72 	bl	8014486 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	f000 f848 	bl	800ba38 <LoRaMacParserJoinAccept>
 800b9a8:	2800      	cmp	r0, #0
 800b9aa:	d13f      	bne.n	800ba2c <LoRaMacCryptoHandleJoinAccept+0xdc>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800b9ac:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800b9ae:	79e3      	ldrb	r3, [r4, #7]
 800b9b0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800b9b4:	7a23      	ldrb	r3, [r4, #8]
 800b9b6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800b9ba:	4b1e      	ldr	r3, [pc, #120]	; (800ba34 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	689a      	ldr	r2, [r3, #8]
 800b9c0:	42aa      	cmp	r2, r5
 800b9c2:	d035      	beq.n	800ba30 <LoRaMacCryptoHandleJoinAccept+0xe0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800b9c4:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800b9c6:	2100      	movs	r1, #0
 800b9c8:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800b9cc:	f7ff ff72 	bl	800b8b4 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800b9d0:	bb50      	cbnz	r0, 800ba28 <LoRaMacCryptoHandleJoinAccept+0xd8>
    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 800b9d2:	2004      	movs	r0, #4
 800b9d4:	f7ff ff89 	bl	800b8ea <LoRaMacCryptoDeriveMcKEKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800b9d8:	bb30      	cbnz	r0, 800ba28 <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 800b9da:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800b9dc:	7aa2      	ldrb	r2, [r4, #10]
 800b9de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800b9e2:	7ae4      	ldrb	r4, [r4, #11]
 800b9e4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800b9e8:	4633      	mov	r3, r6
 800b9ea:	4622      	mov	r2, r4
 800b9ec:	4629      	mov	r1, r5
 800b9ee:	2003      	movs	r0, #3
 800b9f0:	f7ff fd48 	bl	800b484 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800b9f4:	b9c0      	cbnz	r0, 800ba28 <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800b9f6:	4633      	mov	r3, r6
 800b9f8:	4622      	mov	r2, r4
 800b9fa:	4629      	mov	r1, r5
 800b9fc:	2002      	movs	r0, #2
 800b9fe:	f7ff fd41 	bl	800b484 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ba02:	b988      	cbnz	r0, 800ba28 <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800ba04:	4b0b      	ldr	r3, [pc, #44]	; (800ba34 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800ba0c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800ba0e:	2200      	movs	r2, #0
 800ba10:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800ba12:	f04f 32ff 	mov.w	r2, #4294967295
 800ba16:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800ba18:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800ba1a:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800ba1c:	e004      	b.n	800ba28 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ba1e:	200a      	movs	r0, #10
}
 800ba20:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ba22:	200a      	movs	r0, #10
 800ba24:	e000      	b.n	800ba28 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ba26:	200f      	movs	r0, #15
}
 800ba28:	b00f      	add	sp, #60	; 0x3c
 800ba2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800ba2c:	2010      	movs	r0, #16
 800ba2e:	e7fb      	b.n	800ba28 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800ba30:	2003      	movs	r0, #3
 800ba32:	e7f9      	b.n	800ba28 <LoRaMacCryptoHandleJoinAccept+0xd8>
 800ba34:	20001428 	.word	0x20001428

0800ba38 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ba38:	2800      	cmp	r0, #0
 800ba3a:	d047      	beq.n	800bacc <LoRaMacParserJoinAccept+0x94>
{
 800ba3c:	b538      	push	{r3, r4, r5, lr}
 800ba3e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ba40:	6801      	ldr	r1, [r0, #0]
 800ba42:	2900      	cmp	r1, #0
 800ba44:	d044      	beq.n	800bad0 <LoRaMacParserJoinAccept+0x98>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800ba46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba4a:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800ba4c:	2203      	movs	r2, #3
 800ba4e:	3006      	adds	r0, #6
 800ba50:	f008 fd19 	bl	8014486 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800ba54:	4620      	mov	r0, r4
 800ba56:	f850 1b09 	ldr.w	r1, [r0], #9
 800ba5a:	2203      	movs	r2, #3
 800ba5c:	3104      	adds	r1, #4
 800ba5e:	f008 fd12 	bl	8014486 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800ba62:	6821      	ldr	r1, [r4, #0]
 800ba64:	79cb      	ldrb	r3, [r1, #7]
 800ba66:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800ba68:	7a0a      	ldrb	r2, [r1, #8]
 800ba6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ba6e:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800ba70:	7a4a      	ldrb	r2, [r1, #9]
 800ba72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba76:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800ba78:	7a8a      	ldrb	r2, [r1, #10]
 800ba7a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ba7e:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800ba80:	7acb      	ldrb	r3, [r1, #11]
 800ba82:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800ba84:	7b0b      	ldrb	r3, [r1, #12]
 800ba86:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800ba88:	7923      	ldrb	r3, [r4, #4]
 800ba8a:	2b21      	cmp	r3, #33	; 0x21
 800ba8c:	d016      	beq.n	800babc <LoRaMacParserJoinAccept+0x84>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800ba8e:	2b11      	cmp	r3, #17
 800ba90:	dc20      	bgt.n	800bad4 <LoRaMacParserJoinAccept+0x9c>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800ba92:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800ba94:	6821      	ldr	r1, [r4, #0]
 800ba96:	1c55      	adds	r5, r2, #1
 800ba98:	5c8b      	ldrb	r3, [r1, r2]
 800ba9a:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800ba9c:	1c90      	adds	r0, r2, #2
 800ba9e:	5d4d      	ldrb	r5, [r1, r5]
 800baa0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800baa4:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800baa6:	3203      	adds	r2, #3
 800baa8:	5c08      	ldrb	r0, [r1, r0]
 800baaa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800baae:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800bab0:	5c8a      	ldrb	r2, [r1, r2]
 800bab2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bab6:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800bab8:	2000      	movs	r0, #0
}
 800baba:	bd38      	pop	{r3, r4, r5, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800babc:	2210      	movs	r2, #16
 800babe:	310d      	adds	r1, #13
 800bac0:	f104 0012 	add.w	r0, r4, #18
 800bac4:	f008 fcdf 	bl	8014486 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800bac8:	221d      	movs	r2, #29
 800baca:	e7e3      	b.n	800ba94 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800bacc:	2002      	movs	r0, #2
}
 800bace:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800bad0:	2002      	movs	r0, #2
 800bad2:	e7f2      	b.n	800baba <LoRaMacParserJoinAccept+0x82>
        return LORAMAC_PARSER_FAIL;
 800bad4:	2001      	movs	r0, #1
 800bad6:	e7f0      	b.n	800baba <LoRaMacParserJoinAccept+0x82>

0800bad8 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bad8:	2800      	cmp	r0, #0
 800bada:	d058      	beq.n	800bb8e <LoRaMacParserData+0xb6>
{
 800badc:	b510      	push	{r4, lr}
 800bade:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bae0:	6801      	ldr	r1, [r0, #0]
 800bae2:	2900      	cmp	r1, #0
 800bae4:	d055      	beq.n	800bb92 <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800bae6:	780b      	ldrb	r3, [r1, #0]
 800bae8:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800baea:	784b      	ldrb	r3, [r1, #1]
 800baec:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800baee:	788a      	ldrb	r2, [r1, #2]
 800baf0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800baf4:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800baf6:	78ca      	ldrb	r2, [r1, #3]
 800baf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bafc:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800bafe:	790a      	ldrb	r2, [r1, #4]
 800bb00:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bb04:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800bb06:	794b      	ldrb	r3, [r1, #5]
 800bb08:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800bb0a:	798b      	ldrb	r3, [r1, #6]
 800bb0c:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800bb0e:	79ca      	ldrb	r2, [r1, #7]
 800bb10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bb14:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800bb16:	7b02      	ldrb	r2, [r0, #12]
 800bb18:	f002 020f 	and.w	r2, r2, #15
 800bb1c:	3108      	adds	r1, #8
 800bb1e:	3010      	adds	r0, #16
 800bb20:	f008 fcb1 	bl	8014486 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800bb24:	7b23      	ldrb	r3, [r4, #12]
 800bb26:	f003 030f 	and.w	r3, r3, #15
 800bb2a:	f103 0008 	add.w	r0, r3, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800bb34:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800bb38:	7922      	ldrb	r2, [r4, #4]
 800bb3a:	1a11      	subs	r1, r2, r0
 800bb3c:	2904      	cmp	r1, #4
 800bb3e:	dc16      	bgt.n	800bb6e <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800bb40:	6822      	ldr	r2, [r4, #0]
 800bb42:	7923      	ldrb	r3, [r4, #4]
 800bb44:	441a      	add	r2, r3
 800bb46:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800bb4a:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800bb4c:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800bb50:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800bb54:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800bb56:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800bb5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800bb5e:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800bb60:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800bb64:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bb68:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800bb6a:	2000      	movs	r0, #0
}
 800bb6c:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800bb6e:	6821      	ldr	r1, [r4, #0]
 800bb70:	3309      	adds	r3, #9
 800bb72:	5c08      	ldrb	r0, [r1, r0]
 800bb74:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800bb78:	1ad2      	subs	r2, r2, r3
 800bb7a:	b2d2      	uxtb	r2, r2
 800bb7c:	3a04      	subs	r2, #4
 800bb7e:	b2d2      	uxtb	r2, r2
 800bb80:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800bb84:	4419      	add	r1, r3
 800bb86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bb88:	f008 fc7d 	bl	8014486 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800bb8c:	e7d8      	b.n	800bb40 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800bb8e:	2002      	movs	r0, #2
}
 800bb90:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800bb92:	2002      	movs	r0, #2
 800bb94:	e7ea      	b.n	800bb6c <LoRaMacParserData+0x94>

0800bb96 <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bb96:	b370      	cbz	r0, 800bbf6 <LoRaMacSerializerJoinRequest+0x60>
{
 800bb98:	b510      	push	{r4, lr}
 800bb9a:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bb9c:	6803      	ldr	r3, [r0, #0]
 800bb9e:	b363      	cbz	r3, 800bbfa <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800bba0:	7902      	ldrb	r2, [r0, #4]
 800bba2:	2a16      	cmp	r2, #22
 800bba4:	d92b      	bls.n	800bbfe <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800bba6:	7942      	ldrb	r2, [r0, #5]
 800bba8:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800bbaa:	4601      	mov	r1, r0
 800bbac:	f851 0b06 	ldr.w	r0, [r1], #6
 800bbb0:	2208      	movs	r2, #8
 800bbb2:	3001      	adds	r0, #1
 800bbb4:	f008 fc71 	bl	801449a <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800bbb8:	4621      	mov	r1, r4
 800bbba:	f851 0b0e 	ldr.w	r0, [r1], #14
 800bbbe:	2208      	movs	r2, #8
 800bbc0:	3009      	adds	r0, #9
 800bbc2:	f008 fc6a 	bl	801449a <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800bbc6:	8ae2      	ldrh	r2, [r4, #22]
 800bbc8:	6823      	ldr	r3, [r4, #0]
 800bbca:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800bbcc:	8ae3      	ldrh	r3, [r4, #22]
 800bbce:	6822      	ldr	r2, [r4, #0]
 800bbd0:	0a1b      	lsrs	r3, r3, #8
 800bbd2:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800bbd4:	69a2      	ldr	r2, [r4, #24]
 800bbd6:	6823      	ldr	r3, [r4, #0]
 800bbd8:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800bbda:	69a3      	ldr	r3, [r4, #24]
 800bbdc:	0a1b      	lsrs	r3, r3, #8
 800bbde:	6822      	ldr	r2, [r4, #0]
 800bbe0:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800bbe2:	8b62      	ldrh	r2, [r4, #26]
 800bbe4:	6823      	ldr	r3, [r4, #0]
 800bbe6:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800bbe8:	7ee2      	ldrb	r2, [r4, #27]
 800bbea:	6823      	ldr	r3, [r4, #0]
 800bbec:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800bbee:	2317      	movs	r3, #23
 800bbf0:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800bbf2:	2000      	movs	r0, #0
}
 800bbf4:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800bbf6:	2001      	movs	r0, #1
}
 800bbf8:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800bbfa:	2001      	movs	r0, #1
 800bbfc:	e7fa      	b.n	800bbf4 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800bbfe:	2002      	movs	r0, #2
 800bc00:	e7f8      	b.n	800bbf4 <LoRaMacSerializerJoinRequest+0x5e>

0800bc02 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bc02:	2800      	cmp	r0, #0
 800bc04:	d066      	beq.n	800bcd4 <LoRaMacSerializerData+0xd2>
{
 800bc06:	b538      	push	{r3, r4, r5, lr}
 800bc08:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bc0a:	6801      	ldr	r1, [r0, #0]
 800bc0c:	2900      	cmp	r1, #0
 800bc0e:	d063      	beq.n	800bcd8 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800bc10:	7b02      	ldrb	r2, [r0, #12]
 800bc12:	f002 020f 	and.w	r2, r2, #15
 800bc16:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800bc1a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800bc1e:	b10b      	cbz	r3, 800bc24 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800bc20:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800bc24:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800bc26:	3304      	adds	r3, #4
 800bc28:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800bc2a:	7922      	ldrb	r2, [r4, #4]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d355      	bcc.n	800bcdc <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800bc30:	7963      	ldrb	r3, [r4, #5]
 800bc32:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800bc34:	68a2      	ldr	r2, [r4, #8]
 800bc36:	6823      	ldr	r3, [r4, #0]
 800bc38:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800bc3a:	68a3      	ldr	r3, [r4, #8]
 800bc3c:	0a1b      	lsrs	r3, r3, #8
 800bc3e:	6822      	ldr	r2, [r4, #0]
 800bc40:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800bc42:	8962      	ldrh	r2, [r4, #10]
 800bc44:	6823      	ldr	r3, [r4, #0]
 800bc46:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800bc48:	7ae2      	ldrb	r2, [r4, #11]
 800bc4a:	6823      	ldr	r3, [r4, #0]
 800bc4c:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800bc4e:	6823      	ldr	r3, [r4, #0]
 800bc50:	7b22      	ldrb	r2, [r4, #12]
 800bc52:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800bc54:	89e2      	ldrh	r2, [r4, #14]
 800bc56:	6823      	ldr	r3, [r4, #0]
 800bc58:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800bc5a:	89e3      	ldrh	r3, [r4, #14]
 800bc5c:	6822      	ldr	r2, [r4, #0]
 800bc5e:	0a1b      	lsrs	r3, r3, #8
 800bc60:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800bc62:	4621      	mov	r1, r4
 800bc64:	f851 0b10 	ldr.w	r0, [r1], #16
 800bc68:	7b22      	ldrb	r2, [r4, #12]
 800bc6a:	f002 020f 	and.w	r2, r2, #15
 800bc6e:	3008      	adds	r0, #8
 800bc70:	f008 fc09 	bl	8014486 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800bc74:	7b23      	ldrb	r3, [r4, #12]
 800bc76:	f003 030f 	and.w	r3, r3, #15
 800bc7a:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800bc7e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800bc82:	b12a      	cbz	r2, 800bc90 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800bc84:	6822      	ldr	r2, [r4, #0]
 800bc86:	f894 1020 	ldrb.w	r1, [r4, #32]
 800bc8a:	5551      	strb	r1, [r2, r5]
 800bc8c:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800bc90:	6820      	ldr	r0, [r4, #0]
 800bc92:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800bc96:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bc98:	4428      	add	r0, r5
 800bc9a:	f008 fbf4 	bl	8014486 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800bc9e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800bca2:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800bca4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800bca6:	6821      	ldr	r1, [r4, #0]
 800bca8:	1c5a      	adds	r2, r3, #1
 800bcaa:	b292      	uxth	r2, r2
 800bcac:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800bcae:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bcb0:	0a08      	lsrs	r0, r1, #8
 800bcb2:	6825      	ldr	r5, [r4, #0]
 800bcb4:	1c99      	adds	r1, r3, #2
 800bcb6:	b289      	uxth	r1, r1
 800bcb8:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800bcba:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800bcbc:	6820      	ldr	r0, [r4, #0]
 800bcbe:	1cda      	adds	r2, r3, #3
 800bcc0:	b292      	uxth	r2, r2
 800bcc2:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800bcc4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800bcc8:	6821      	ldr	r1, [r4, #0]
 800bcca:	3304      	adds	r3, #4
 800bccc:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800bcce:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800bcd0:	2000      	movs	r0, #0
}
 800bcd2:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800bcd4:	2001      	movs	r0, #1
}
 800bcd6:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800bcd8:	2001      	movs	r0, #1
 800bcda:	e7fa      	b.n	800bcd2 <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800bcdc:	2002      	movs	r0, #2
 800bcde:	e7f8      	b.n	800bcd2 <LoRaMacSerializerData+0xd0>

0800bce0 <NvmDataMgmtEvent>:
void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800bce0:	4770      	bx	lr

0800bce2 <NvmDataMgmtStore>:
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
#endif
}
 800bce2:	2000      	movs	r0, #0
 800bce4:	4770      	bx	lr

0800bce6 <NvmDataMgmtRestore>:
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
}
 800bce6:	2000      	movs	r0, #0
 800bce8:	4770      	bx	lr

0800bcea <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800bcea:	2805      	cmp	r0, #5
 800bcec:	d905      	bls.n	800bcfa <RegionIsActive+0x10>
 800bcee:	3807      	subs	r0, #7
 800bcf0:	b2c0      	uxtb	r0, r0
 800bcf2:	2802      	cmp	r0, #2
 800bcf4:	d903      	bls.n	800bcfe <RegionIsActive+0x14>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800bcf6:	2000      	movs	r0, #0
 800bcf8:	4770      	bx	lr
    switch( region )
 800bcfa:	2001      	movs	r0, #1
 800bcfc:	4770      	bx	lr
 800bcfe:	2001      	movs	r0, #1
        }
    }
}
 800bd00:	4770      	bx	lr

0800bd02 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800bd02:	b500      	push	{lr}
 800bd04:	b083      	sub	sp, #12
    PhyParam_t phyParam = { 0 };
 800bd06:	2300      	movs	r3, #0
 800bd08:	9300      	str	r3, [sp, #0]
    switch( region )
 800bd0a:	2809      	cmp	r0, #9
 800bd0c:	d836      	bhi.n	800bd7c <RegionGetPhyParam+0x7a>
 800bd0e:	e8df f000 	tbb	[pc, r0]
 800bd12:	0d05      	.short	0x0d05
 800bd14:	211c1712 	.word	0x211c1712
 800bd18:	302b2635 	.word	0x302b2635
    {
        AS923_GET_PHY_PARAM( );
 800bd1c:	4608      	mov	r0, r1
 800bd1e:	f000 fba5 	bl	800c46c <RegionAS923GetPhyParam>
 800bd22:	9001      	str	r0, [sp, #4]
        default:
        {
            return phyParam;
        }
    }
}
 800bd24:	9801      	ldr	r0, [sp, #4]
 800bd26:	b003      	add	sp, #12
 800bd28:	f85d fb04 	ldr.w	pc, [sp], #4
        AU915_GET_PHY_PARAM( );
 800bd2c:	4608      	mov	r0, r1
 800bd2e:	f001 f9e1 	bl	800d0f4 <RegionAU915GetPhyParam>
 800bd32:	9001      	str	r0, [sp, #4]
 800bd34:	e7f6      	b.n	800bd24 <RegionGetPhyParam+0x22>
        CN470_GET_PHY_PARAM( );
 800bd36:	4608      	mov	r0, r1
 800bd38:	f002 f8b6 	bl	800dea8 <RegionCN470GetPhyParam>
 800bd3c:	9001      	str	r0, [sp, #4]
 800bd3e:	e7f1      	b.n	800bd24 <RegionGetPhyParam+0x22>
        CN779_GET_PHY_PARAM( );
 800bd40:	4608      	mov	r0, r1
 800bd42:	f002 fd65 	bl	800e810 <RegionCN779GetPhyParam>
 800bd46:	9001      	str	r0, [sp, #4]
 800bd48:	e7ec      	b.n	800bd24 <RegionGetPhyParam+0x22>
        EU433_GET_PHY_PARAM( );
 800bd4a:	4608      	mov	r0, r1
 800bd4c:	f003 ff06 	bl	800fb5c <RegionEU433GetPhyParam>
 800bd50:	9001      	str	r0, [sp, #4]
 800bd52:	e7e7      	b.n	800bd24 <RegionGetPhyParam+0x22>
        EU868_GET_PHY_PARAM( );
 800bd54:	4608      	mov	r0, r1
 800bd56:	f004 fd13 	bl	8010780 <RegionEU868GetPhyParam>
 800bd5a:	9001      	str	r0, [sp, #4]
 800bd5c:	e7e2      	b.n	800bd24 <RegionGetPhyParam+0x22>
        IN865_GET_PHY_PARAM( );
 800bd5e:	4608      	mov	r0, r1
 800bd60:	f005 fb0c 	bl	801137c <RegionIN865GetPhyParam>
 800bd64:	9001      	str	r0, [sp, #4]
 800bd66:	e7dd      	b.n	800bd24 <RegionGetPhyParam+0x22>
        US915_GET_PHY_PARAM( );
 800bd68:	4608      	mov	r0, r1
 800bd6a:	f006 fedb 	bl	8012b24 <RegionUS915GetPhyParam>
 800bd6e:	9001      	str	r0, [sp, #4]
 800bd70:	e7d8      	b.n	800bd24 <RegionGetPhyParam+0x22>
        RU864_GET_PHY_PARAM( );
 800bd72:	4608      	mov	r0, r1
 800bd74:	f006 f8ea 	bl	8011f4c <RegionRU864GetPhyParam>
 800bd78:	9001      	str	r0, [sp, #4]
 800bd7a:	e7d3      	b.n	800bd24 <RegionGetPhyParam+0x22>
            return phyParam;
 800bd7c:	9b00      	ldr	r3, [sp, #0]
 800bd7e:	9301      	str	r3, [sp, #4]
 800bd80:	e7d0      	b.n	800bd24 <RegionGetPhyParam+0x22>

0800bd82 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800bd82:	b508      	push	{r3, lr}
    switch( region )
 800bd84:	2809      	cmp	r0, #9
 800bd86:	d809      	bhi.n	800bd9c <RegionSetBandTxDone+0x1a>
 800bd88:	e8df f000 	tbb	[pc, r0]
 800bd8c:	110d0905 	.word	0x110d0905
 800bd90:	1d081915 	.word	0x1d081915
 800bd94:	2521      	.short	0x2521
    {
        AS923_SET_BAND_TX_DONE( );
 800bd96:	4608      	mov	r0, r1
 800bd98:	f000 fc76 	bl	800c688 <RegionAS923SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800bd9c:	bd08      	pop	{r3, pc}
        AU915_SET_BAND_TX_DONE( );
 800bd9e:	4608      	mov	r0, r1
 800bda0:	f001 fac6 	bl	800d330 <RegionAU915SetBandTxDone>
 800bda4:	e7fa      	b.n	800bd9c <RegionSetBandTxDone+0x1a>
        CN470_SET_BAND_TX_DONE( );
 800bda6:	4608      	mov	r0, r1
 800bda8:	f002 f952 	bl	800e050 <RegionCN470SetBandTxDone>
 800bdac:	e7f6      	b.n	800bd9c <RegionSetBandTxDone+0x1a>
        CN779_SET_BAND_TX_DONE( );
 800bdae:	4608      	mov	r0, r1
 800bdb0:	f002 fdf4 	bl	800e99c <RegionCN779SetBandTxDone>
 800bdb4:	e7f2      	b.n	800bd9c <RegionSetBandTxDone+0x1a>
        EU433_SET_BAND_TX_DONE( );
 800bdb6:	4608      	mov	r0, r1
 800bdb8:	f003 ff94 	bl	800fce4 <RegionEU433SetBandTxDone>
 800bdbc:	e7ee      	b.n	800bd9c <RegionSetBandTxDone+0x1a>
        EU868_SET_BAND_TX_DONE( );
 800bdbe:	4608      	mov	r0, r1
 800bdc0:	f004 fda2 	bl	8010908 <RegionEU868SetBandTxDone>
 800bdc4:	e7ea      	b.n	800bd9c <RegionSetBandTxDone+0x1a>
        IN865_SET_BAND_TX_DONE( );
 800bdc6:	4608      	mov	r0, r1
 800bdc8:	f005 fb9c 	bl	8011504 <RegionIN865SetBandTxDone>
 800bdcc:	e7e6      	b.n	800bd9c <RegionSetBandTxDone+0x1a>
        US915_SET_BAND_TX_DONE( );
 800bdce:	4608      	mov	r0, r1
 800bdd0:	f006 ff82 	bl	8012cd8 <RegionUS915SetBandTxDone>
 800bdd4:	e7e2      	b.n	800bd9c <RegionSetBandTxDone+0x1a>
        RU864_SET_BAND_TX_DONE( );
 800bdd6:	4608      	mov	r0, r1
 800bdd8:	f006 f97e 	bl	80120d8 <RegionRU864SetBandTxDone>
 800bddc:	e7de      	b.n	800bd9c <RegionSetBandTxDone+0x1a>

0800bdde <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800bdde:	b508      	push	{r3, lr}
    switch( region )
 800bde0:	2809      	cmp	r0, #9
 800bde2:	d809      	bhi.n	800bdf8 <RegionInitDefaults+0x1a>
 800bde4:	e8df f000 	tbb	[pc, r0]
 800bde8:	110d0905 	.word	0x110d0905
 800bdec:	1d081915 	.word	0x1d081915
 800bdf0:	2521      	.short	0x2521
    {
        AS923_INIT_DEFAULTS( );
 800bdf2:	4608      	mov	r0, r1
 800bdf4:	f000 fc66 	bl	800c6c4 <RegionAS923InitDefaults>
        default:
        {
            break;
        }
    }
}
 800bdf8:	bd08      	pop	{r3, pc}
        AU915_INIT_DEFAULTS( );
 800bdfa:	4608      	mov	r0, r1
 800bdfc:	f001 fab6 	bl	800d36c <RegionAU915InitDefaults>
 800be00:	e7fa      	b.n	800bdf8 <RegionInitDefaults+0x1a>
        CN470_INIT_DEFAULTS( );
 800be02:	4608      	mov	r0, r1
 800be04:	f002 f942 	bl	800e08c <RegionCN470InitDefaults>
 800be08:	e7f6      	b.n	800bdf8 <RegionInitDefaults+0x1a>
        CN779_INIT_DEFAULTS( );
 800be0a:	4608      	mov	r0, r1
 800be0c:	f002 fde4 	bl	800e9d8 <RegionCN779InitDefaults>
 800be10:	e7f2      	b.n	800bdf8 <RegionInitDefaults+0x1a>
        EU433_INIT_DEFAULTS( );
 800be12:	4608      	mov	r0, r1
 800be14:	f003 ff84 	bl	800fd20 <RegionEU433InitDefaults>
 800be18:	e7ee      	b.n	800bdf8 <RegionInitDefaults+0x1a>
        EU868_INIT_DEFAULTS( );
 800be1a:	4608      	mov	r0, r1
 800be1c:	f004 fd92 	bl	8010944 <RegionEU868InitDefaults>
 800be20:	e7ea      	b.n	800bdf8 <RegionInitDefaults+0x1a>
        IN865_INIT_DEFAULTS( );
 800be22:	4608      	mov	r0, r1
 800be24:	f005 fb8c 	bl	8011540 <RegionIN865InitDefaults>
 800be28:	e7e6      	b.n	800bdf8 <RegionInitDefaults+0x1a>
        US915_INIT_DEFAULTS( );
 800be2a:	4608      	mov	r0, r1
 800be2c:	f006 ff72 	bl	8012d14 <RegionUS915InitDefaults>
 800be30:	e7e2      	b.n	800bdf8 <RegionInitDefaults+0x1a>
        RU864_INIT_DEFAULTS( );
 800be32:	4608      	mov	r0, r1
 800be34:	f006 f96e 	bl	8012114 <RegionRU864InitDefaults>
}
 800be38:	e7de      	b.n	800bdf8 <RegionInitDefaults+0x1a>

0800be3a <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800be3a:	b508      	push	{r3, lr}
 800be3c:	4603      	mov	r3, r0
 800be3e:	4608      	mov	r0, r1
 800be40:	4611      	mov	r1, r2
    switch( region )
 800be42:	2b09      	cmp	r3, #9
 800be44:	d821      	bhi.n	800be8a <RegionVerify+0x50>
 800be46:	e8df f003 	tbb	[pc, r3]
 800be4a:	0805      	.short	0x0805
 800be4c:	14110e0b 	.word	0x14110e0b
 800be50:	1d1a1720 	.word	0x1d1a1720
    {
        AS923_VERIFY( );
 800be54:	f000 fc9a 	bl	800c78c <RegionAS923Verify>
        default:
        {
            return false;
        }
    }
}
 800be58:	bd08      	pop	{r3, pc}
        AU915_VERIFY( );
 800be5a:	f001 fb2d 	bl	800d4b8 <RegionAU915Verify>
 800be5e:	e7fb      	b.n	800be58 <RegionVerify+0x1e>
        CN470_VERIFY( );
 800be60:	f002 f978 	bl	800e154 <RegionCN470Verify>
 800be64:	e7f8      	b.n	800be58 <RegionVerify+0x1e>
        CN779_VERIFY( );
 800be66:	f002 fe19 	bl	800ea9c <RegionCN779Verify>
 800be6a:	e7f5      	b.n	800be58 <RegionVerify+0x1e>
        EU433_VERIFY( );
 800be6c:	f003 ffba 	bl	800fde4 <RegionEU433Verify>
 800be70:	e7f2      	b.n	800be58 <RegionVerify+0x1e>
        EU868_VERIFY( );
 800be72:	f004 fdd3 	bl	8010a1c <RegionEU868Verify>
 800be76:	e7ef      	b.n	800be58 <RegionVerify+0x1e>
        IN865_VERIFY( );
 800be78:	f005 fbc4 	bl	8011604 <RegionIN865Verify>
 800be7c:	e7ec      	b.n	800be58 <RegionVerify+0x1e>
        US915_VERIFY( );
 800be7e:	f006 ffef 	bl	8012e60 <RegionUS915Verify>
 800be82:	e7e9      	b.n	800be58 <RegionVerify+0x1e>
        RU864_VERIFY( );
 800be84:	f006 f9a0 	bl	80121c8 <RegionRU864Verify>
 800be88:	e7e6      	b.n	800be58 <RegionVerify+0x1e>
{
 800be8a:	2000      	movs	r0, #0
 800be8c:	e7e4      	b.n	800be58 <RegionVerify+0x1e>

0800be8e <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800be8e:	b508      	push	{r3, lr}
    switch( region )
 800be90:	2809      	cmp	r0, #9
 800be92:	d809      	bhi.n	800bea8 <RegionApplyCFList+0x1a>
 800be94:	e8df f000 	tbb	[pc, r0]
 800be98:	110d0905 	.word	0x110d0905
 800be9c:	1d081915 	.word	0x1d081915
 800bea0:	2521      	.short	0x2521
    {
        AS923_APPLY_CF_LIST( );
 800bea2:	4608      	mov	r0, r1
 800bea4:	f001 f82c 	bl	800cf00 <RegionAS923ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800bea8:	bd08      	pop	{r3, pc}
        AU915_APPLY_CF_LIST( );
 800beaa:	4608      	mov	r0, r1
 800beac:	f001 fb4c 	bl	800d548 <RegionAU915ApplyCFList>
 800beb0:	e7fa      	b.n	800bea8 <RegionApplyCFList+0x1a>
        CN470_APPLY_CF_LIST( );
 800beb2:	4608      	mov	r0, r1
 800beb4:	f002 f97e 	bl	800e1b4 <RegionCN470ApplyCFList>
 800beb8:	e7f6      	b.n	800bea8 <RegionApplyCFList+0x1a>
        CN779_APPLY_CF_LIST( );
 800beba:	4608      	mov	r0, r1
 800bebc:	f003 f994 	bl	800f1e8 <RegionCN779ApplyCFList>
 800bec0:	e7f2      	b.n	800bea8 <RegionApplyCFList+0x1a>
        EU433_APPLY_CF_LIST( );
 800bec2:	4608      	mov	r0, r1
 800bec4:	f004 fb34 	bl	8010530 <RegionEU433ApplyCFList>
 800bec8:	e7ee      	b.n	800bea8 <RegionApplyCFList+0x1a>
        EU868_APPLY_CF_LIST( );
 800beca:	4608      	mov	r0, r1
 800becc:	f005 f96e 	bl	80111ac <RegionEU868ApplyCFList>
 800bed0:	e7ea      	b.n	800bea8 <RegionApplyCFList+0x1a>
        IN865_APPLY_CF_LIST( );
 800bed2:	4608      	mov	r0, r1
 800bed4:	f005 ff4c 	bl	8011d70 <RegionIN865ApplyCFList>
 800bed8:	e7e6      	b.n	800bea8 <RegionApplyCFList+0x1a>
        US915_APPLY_CF_LIST( );
 800beda:	4608      	mov	r0, r1
 800bedc:	f006 fff0 	bl	8012ec0 <RegionUS915ApplyCFList>
 800bee0:	e7e2      	b.n	800bea8 <RegionApplyCFList+0x1a>
        RU864_APPLY_CF_LIST( );
 800bee2:	4608      	mov	r0, r1
 800bee4:	f006 fd12 	bl	801290c <RegionRU864ApplyCFList>
}
 800bee8:	e7de      	b.n	800bea8 <RegionApplyCFList+0x1a>

0800beea <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800beea:	b508      	push	{r3, lr}
    switch( region )
 800beec:	2809      	cmp	r0, #9
 800beee:	d82a      	bhi.n	800bf46 <RegionChanMaskSet+0x5c>
 800bef0:	e8df f000 	tbb	[pc, r0]
 800bef4:	110d0905 	.word	0x110d0905
 800bef8:	1d291915 	.word	0x1d291915
 800befc:	2521      	.short	0x2521
    {
        AS923_CHAN_MASK_SET( );
 800befe:	4608      	mov	r0, r1
 800bf00:	f000 fc96 	bl	800c830 <RegionAS923ChanMaskSet>
        default:
        {
            return false;
        }
    }
}
 800bf04:	bd08      	pop	{r3, pc}
        AU915_CHAN_MASK_SET( );
 800bf06:	4608      	mov	r0, r1
 800bf08:	f001 fb5c 	bl	800d5c4 <RegionAU915ChanMaskSet>
 800bf0c:	e7fa      	b.n	800bf04 <RegionChanMaskSet+0x1a>
        CN470_CHAN_MASK_SET( );
 800bf0e:	4608      	mov	r0, r1
 800bf10:	f002 f978 	bl	800e204 <RegionCN470ChanMaskSet>
 800bf14:	e7f6      	b.n	800bf04 <RegionChanMaskSet+0x1a>
        CN779_CHAN_MASK_SET( );
 800bf16:	4608      	mov	r0, r1
 800bf18:	f002 fdfe 	bl	800eb18 <RegionCN779ChanMaskSet>
 800bf1c:	e7f2      	b.n	800bf04 <RegionChanMaskSet+0x1a>
        EU433_CHAN_MASK_SET( );
 800bf1e:	4608      	mov	r0, r1
 800bf20:	f003 ff9e 	bl	800fe60 <RegionEU433ChanMaskSet>
 800bf24:	e7ee      	b.n	800bf04 <RegionChanMaskSet+0x1a>
        EU868_CHAN_MASK_SET( );
 800bf26:	4608      	mov	r0, r1
 800bf28:	f004 fdbe 	bl	8010aa8 <RegionEU868ChanMaskSet>
 800bf2c:	e7ea      	b.n	800bf04 <RegionChanMaskSet+0x1a>
        IN865_CHAN_MASK_SET( );
 800bf2e:	4608      	mov	r0, r1
 800bf30:	f005 fbaa 	bl	8011688 <RegionIN865ChanMaskSet>
 800bf34:	e7e6      	b.n	800bf04 <RegionChanMaskSet+0x1a>
        US915_CHAN_MASK_SET( );
 800bf36:	4608      	mov	r0, r1
 800bf38:	f007 f800 	bl	8012f3c <RegionUS915ChanMaskSet>
 800bf3c:	e7e2      	b.n	800bf04 <RegionChanMaskSet+0x1a>
        RU864_CHAN_MASK_SET( );
 800bf3e:	4608      	mov	r0, r1
 800bf40:	f006 f980 	bl	8012244 <RegionRU864ChanMaskSet>
 800bf44:	e7de      	b.n	800bf04 <RegionChanMaskSet+0x1a>
{
 800bf46:	2000      	movs	r0, #0
 800bf48:	e7dc      	b.n	800bf04 <RegionChanMaskSet+0x1a>

0800bf4a <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800bf4a:	b510      	push	{r4, lr}
 800bf4c:	4604      	mov	r4, r0
 800bf4e:	4608      	mov	r0, r1
 800bf50:	4611      	mov	r1, r2
 800bf52:	461a      	mov	r2, r3
    switch( region )
 800bf54:	2c09      	cmp	r4, #9
 800bf56:	d809      	bhi.n	800bf6c <RegionComputeRxWindowParameters+0x22>
 800bf58:	e8df f004 	tbb	[pc, r4]
 800bf5c:	110d0905 	.word	0x110d0905
 800bf60:	1d081915 	.word	0x1d081915
 800bf64:	2521      	.short	0x2521
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 800bf66:	9b02      	ldr	r3, [sp, #8]
 800bf68:	f000 fc80 	bl	800c86c <RegionAS923ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800bf6c:	bd10      	pop	{r4, pc}
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800bf6e:	9b02      	ldr	r3, [sp, #8]
 800bf70:	f001 fb62 	bl	800d638 <RegionAU915ComputeRxWindowParameters>
 800bf74:	e7fa      	b.n	800bf6c <RegionComputeRxWindowParameters+0x22>
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
 800bf76:	9b02      	ldr	r3, [sp, #8]
 800bf78:	f002 f962 	bl	800e240 <RegionCN470ComputeRxWindowParameters>
 800bf7c:	e7f6      	b.n	800bf6c <RegionComputeRxWindowParameters+0x22>
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
 800bf7e:	9b02      	ldr	r3, [sp, #8]
 800bf80:	f002 fde8 	bl	800eb54 <RegionCN779ComputeRxWindowParameters>
 800bf84:	e7f2      	b.n	800bf6c <RegionComputeRxWindowParameters+0x22>
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
 800bf86:	9b02      	ldr	r3, [sp, #8]
 800bf88:	f003 ff88 	bl	800fe9c <RegionEU433ComputeRxWindowParameters>
 800bf8c:	e7ee      	b.n	800bf6c <RegionComputeRxWindowParameters+0x22>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800bf8e:	9b02      	ldr	r3, [sp, #8]
 800bf90:	f004 fda8 	bl	8010ae4 <RegionEU868ComputeRxWindowParameters>
 800bf94:	e7ea      	b.n	800bf6c <RegionComputeRxWindowParameters+0x22>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
 800bf96:	9b02      	ldr	r3, [sp, #8]
 800bf98:	f005 fb94 	bl	80116c4 <RegionIN865ComputeRxWindowParameters>
 800bf9c:	e7e6      	b.n	800bf6c <RegionComputeRxWindowParameters+0x22>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800bf9e:	9b02      	ldr	r3, [sp, #8]
 800bfa0:	f007 f810 	bl	8012fc4 <RegionUS915ComputeRxWindowParameters>
 800bfa4:	e7e2      	b.n	800bf6c <RegionComputeRxWindowParameters+0x22>
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
 800bfa6:	9b02      	ldr	r3, [sp, #8]
 800bfa8:	f006 f96a 	bl	8012280 <RegionRU864ComputeRxWindowParameters>
}
 800bfac:	e7de      	b.n	800bf6c <RegionComputeRxWindowParameters+0x22>

0800bfae <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800bfae:	b508      	push	{r3, lr}
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	4608      	mov	r0, r1
 800bfb4:	4611      	mov	r1, r2
    switch( region )
 800bfb6:	2b09      	cmp	r3, #9
 800bfb8:	d821      	bhi.n	800bffe <RegionRxConfig+0x50>
 800bfba:	e8df f003 	tbb	[pc, r3]
 800bfbe:	0805      	.short	0x0805
 800bfc0:	14110e0b 	.word	0x14110e0b
 800bfc4:	1d1a1720 	.word	0x1d1a1720
    {
        AS923_RX_CONFIG( );
 800bfc8:	f000 fc86 	bl	800c8d8 <RegionAS923RxConfig>
        default:
        {
            return false;
        }
    }
}
 800bfcc:	bd08      	pop	{r3, pc}
        AU915_RX_CONFIG( );
 800bfce:	f001 fb61 	bl	800d694 <RegionAU915RxConfig>
 800bfd2:	e7fb      	b.n	800bfcc <RegionRxConfig+0x1e>
        CN470_RX_CONFIG( );
 800bfd4:	f002 f962 	bl	800e29c <RegionCN470RxConfig>
 800bfd8:	e7f8      	b.n	800bfcc <RegionRxConfig+0x1e>
        CN779_RX_CONFIG( );
 800bfda:	f002 fdf1 	bl	800ebc0 <RegionCN779RxConfig>
 800bfde:	e7f5      	b.n	800bfcc <RegionRxConfig+0x1e>
        EU433_RX_CONFIG( );
 800bfe0:	f003 ff92 	bl	800ff08 <RegionEU433RxConfig>
 800bfe4:	e7f2      	b.n	800bfcc <RegionRxConfig+0x1e>
        EU868_RX_CONFIG( );
 800bfe6:	f004 fdb3 	bl	8010b50 <RegionEU868RxConfig>
 800bfea:	e7ef      	b.n	800bfcc <RegionRxConfig+0x1e>
        IN865_RX_CONFIG( );
 800bfec:	f005 fba0 	bl	8011730 <RegionIN865RxConfig>
 800bff0:	e7ec      	b.n	800bfcc <RegionRxConfig+0x1e>
        US915_RX_CONFIG( );
 800bff2:	f007 f815 	bl	8013020 <RegionUS915RxConfig>
 800bff6:	e7e9      	b.n	800bfcc <RegionRxConfig+0x1e>
        RU864_RX_CONFIG( );
 800bff8:	f006 f978 	bl	80122ec <RegionRU864RxConfig>
 800bffc:	e7e6      	b.n	800bfcc <RegionRxConfig+0x1e>
{
 800bffe:	2000      	movs	r0, #0
 800c000:	e7e4      	b.n	800bfcc <RegionRxConfig+0x1e>

0800c002 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800c002:	b510      	push	{r4, lr}
 800c004:	4604      	mov	r4, r0
 800c006:	4608      	mov	r0, r1
 800c008:	4611      	mov	r1, r2
 800c00a:	461a      	mov	r2, r3
    switch( region )
 800c00c:	2c09      	cmp	r4, #9
 800c00e:	d821      	bhi.n	800c054 <RegionTxConfig+0x52>
 800c010:	e8df f004 	tbb	[pc, r4]
 800c014:	0e0b0805 	.word	0x0e0b0805
 800c018:	17201411 	.word	0x17201411
 800c01c:	1d1a      	.short	0x1d1a
    {
        AS923_TX_CONFIG( );
 800c01e:	f000 fcdf 	bl	800c9e0 <RegionAS923TxConfig>
        default:
        {
            return false;
        }
    }
}
 800c022:	bd10      	pop	{r4, pc}
        AU915_TX_CONFIG( );
 800c024:	f001 fb90 	bl	800d748 <RegionAU915TxConfig>
 800c028:	e7fb      	b.n	800c022 <RegionTxConfig+0x20>
        CN470_TX_CONFIG( );
 800c02a:	f002 f999 	bl	800e360 <RegionCN470TxConfig>
 800c02e:	e7f8      	b.n	800c022 <RegionTxConfig+0x20>
        CN779_TX_CONFIG( );
 800c030:	f002 fe4a 	bl	800ecc8 <RegionCN779TxConfig>
 800c034:	e7f5      	b.n	800c022 <RegionTxConfig+0x20>
        EU433_TX_CONFIG( );
 800c036:	f003 ffeb 	bl	8010010 <RegionEU433TxConfig>
 800c03a:	e7f2      	b.n	800c022 <RegionTxConfig+0x20>
        EU868_TX_CONFIG( );
 800c03c:	f004 fe0c 	bl	8010c58 <RegionEU868TxConfig>
 800c040:	e7ef      	b.n	800c022 <RegionTxConfig+0x20>
        IN865_TX_CONFIG( );
 800c042:	f005 fbf9 	bl	8011838 <RegionIN865TxConfig>
 800c046:	e7ec      	b.n	800c022 <RegionTxConfig+0x20>
        US915_TX_CONFIG( );
 800c048:	f007 f844 	bl	80130d4 <RegionUS915TxConfig>
 800c04c:	e7e9      	b.n	800c022 <RegionTxConfig+0x20>
        RU864_TX_CONFIG( );
 800c04e:	f006 f9d1 	bl	80123f4 <RegionRU864TxConfig>
 800c052:	e7e6      	b.n	800c022 <RegionTxConfig+0x20>
{
 800c054:	2000      	movs	r0, #0
 800c056:	e7e4      	b.n	800c022 <RegionTxConfig+0x20>

0800c058 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800c058:	b510      	push	{r4, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	4604      	mov	r4, r0
 800c05e:	4608      	mov	r0, r1
 800c060:	4611      	mov	r1, r2
 800c062:	461a      	mov	r2, r3
    switch( region )
 800c064:	2c09      	cmp	r4, #9
 800c066:	d83d      	bhi.n	800c0e4 <RegionLinkAdrReq+0x8c>
 800c068:	e8df f004 	tbb	[pc, r4]
 800c06c:	18120c05 	.word	0x18120c05
 800c070:	2a3c241e 	.word	0x2a3c241e
 800c074:	3630      	.short	0x3630
    {
        AS923_LINK_ADR_REQ( );
 800c076:	9b05      	ldr	r3, [sp, #20]
 800c078:	9300      	str	r3, [sp, #0]
 800c07a:	9b04      	ldr	r3, [sp, #16]
 800c07c:	f000 fd48 	bl	800cb10 <RegionAS923LinkAdrReq>
        default:
        {
            return 0;
        }
    }
}
 800c080:	b002      	add	sp, #8
 800c082:	bd10      	pop	{r4, pc}
        AU915_LINK_ADR_REQ( );
 800c084:	9b05      	ldr	r3, [sp, #20]
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	9b04      	ldr	r3, [sp, #16]
 800c08a:	f001 fbd3 	bl	800d834 <RegionAU915LinkAdrReq>
 800c08e:	e7f7      	b.n	800c080 <RegionLinkAdrReq+0x28>
        CN470_LINK_ADR_REQ( );
 800c090:	9b05      	ldr	r3, [sp, #20]
 800c092:	9300      	str	r3, [sp, #0]
 800c094:	9b04      	ldr	r3, [sp, #16]
 800c096:	f002 f9d9 	bl	800e44c <RegionCN470LinkAdrReq>
 800c09a:	e7f1      	b.n	800c080 <RegionLinkAdrReq+0x28>
        CN779_LINK_ADR_REQ( );
 800c09c:	9b05      	ldr	r3, [sp, #20]
 800c09e:	9300      	str	r3, [sp, #0]
 800c0a0:	9b04      	ldr	r3, [sp, #16]
 800c0a2:	f002 fea9 	bl	800edf8 <RegionCN779LinkAdrReq>
 800c0a6:	e7eb      	b.n	800c080 <RegionLinkAdrReq+0x28>
        EU433_LINK_ADR_REQ( );
 800c0a8:	9b05      	ldr	r3, [sp, #20]
 800c0aa:	9300      	str	r3, [sp, #0]
 800c0ac:	9b04      	ldr	r3, [sp, #16]
 800c0ae:	f004 f847 	bl	8010140 <RegionEU433LinkAdrReq>
 800c0b2:	e7e5      	b.n	800c080 <RegionLinkAdrReq+0x28>
        EU868_LINK_ADR_REQ( );
 800c0b4:	9b05      	ldr	r3, [sp, #20]
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	9b04      	ldr	r3, [sp, #16]
 800c0ba:	f004 fe65 	bl	8010d88 <RegionEU868LinkAdrReq>
 800c0be:	e7df      	b.n	800c080 <RegionLinkAdrReq+0x28>
        IN865_LINK_ADR_REQ( );
 800c0c0:	9b05      	ldr	r3, [sp, #20]
 800c0c2:	9300      	str	r3, [sp, #0]
 800c0c4:	9b04      	ldr	r3, [sp, #16]
 800c0c6:	f005 fc4f 	bl	8011968 <RegionIN865LinkAdrReq>
 800c0ca:	e7d9      	b.n	800c080 <RegionLinkAdrReq+0x28>
        US915_LINK_ADR_REQ( );
 800c0cc:	9b05      	ldr	r3, [sp, #20]
 800c0ce:	9300      	str	r3, [sp, #0]
 800c0d0:	9b04      	ldr	r3, [sp, #16]
 800c0d2:	f007 f879 	bl	80131c8 <RegionUS915LinkAdrReq>
 800c0d6:	e7d3      	b.n	800c080 <RegionLinkAdrReq+0x28>
        RU864_LINK_ADR_REQ( );
 800c0d8:	9b05      	ldr	r3, [sp, #20]
 800c0da:	9300      	str	r3, [sp, #0]
 800c0dc:	9b04      	ldr	r3, [sp, #16]
 800c0de:	f006 fa21 	bl	8012524 <RegionRU864LinkAdrReq>
 800c0e2:	e7cd      	b.n	800c080 <RegionLinkAdrReq+0x28>
{
 800c0e4:	2000      	movs	r0, #0
 800c0e6:	e7cb      	b.n	800c080 <RegionLinkAdrReq+0x28>

0800c0e8 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800c0e8:	b508      	push	{r3, lr}
    switch( region )
 800c0ea:	2809      	cmp	r0, #9
 800c0ec:	d82a      	bhi.n	800c144 <RegionRxParamSetupReq+0x5c>
 800c0ee:	e8df f000 	tbb	[pc, r0]
 800c0f2:	0905      	.short	0x0905
 800c0f4:	1915110d 	.word	0x1915110d
 800c0f8:	25211d29 	.word	0x25211d29
    {
        AS923_RX_PARAM_SETUP_REQ( );
 800c0fc:	4608      	mov	r0, r1
 800c0fe:	f000 fdcb 	bl	800cc98 <RegionAS923RxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 800c102:	bd08      	pop	{r3, pc}
        AU915_RX_PARAM_SETUP_REQ( );
 800c104:	4608      	mov	r0, r1
 800c106:	f001 fcd3 	bl	800dab0 <RegionAU915RxParamSetupReq>
 800c10a:	e7fa      	b.n	800c102 <RegionRxParamSetupReq+0x1a>
        CN470_RX_PARAM_SETUP_REQ( );
 800c10c:	4608      	mov	r0, r1
 800c10e:	f002 fa61 	bl	800e5d4 <RegionCN470RxParamSetupReq>
 800c112:	e7f6      	b.n	800c102 <RegionRxParamSetupReq+0x1a>
        CN779_RX_PARAM_SETUP_REQ( );
 800c114:	4608      	mov	r0, r1
 800c116:	f002 ff33 	bl	800ef80 <RegionCN779RxParamSetupReq>
 800c11a:	e7f2      	b.n	800c102 <RegionRxParamSetupReq+0x1a>
        EU433_RX_PARAM_SETUP_REQ( );
 800c11c:	4608      	mov	r0, r1
 800c11e:	f004 f8d3 	bl	80102c8 <RegionEU433RxParamSetupReq>
 800c122:	e7ee      	b.n	800c102 <RegionRxParamSetupReq+0x1a>
        EU868_RX_PARAM_SETUP_REQ( );
 800c124:	4608      	mov	r0, r1
 800c126:	f004 fef3 	bl	8010f10 <RegionEU868RxParamSetupReq>
 800c12a:	e7ea      	b.n	800c102 <RegionRxParamSetupReq+0x1a>
        IN865_RX_PARAM_SETUP_REQ( );
 800c12c:	4608      	mov	r0, r1
 800c12e:	f005 fce7 	bl	8011b00 <RegionIN865RxParamSetupReq>
 800c132:	e7e6      	b.n	800c102 <RegionRxParamSetupReq+0x1a>
        US915_RX_PARAM_SETUP_REQ( );
 800c134:	4608      	mov	r0, r1
 800c136:	f007 f985 	bl	8013444 <RegionUS915RxParamSetupReq>
 800c13a:	e7e2      	b.n	800c102 <RegionRxParamSetupReq+0x1a>
        RU864_RX_PARAM_SETUP_REQ( );
 800c13c:	4608      	mov	r0, r1
 800c13e:	f006 fab3 	bl	80126a8 <RegionRU864RxParamSetupReq>
 800c142:	e7de      	b.n	800c102 <RegionRxParamSetupReq+0x1a>
{
 800c144:	2000      	movs	r0, #0
 800c146:	e7dc      	b.n	800c102 <RegionRxParamSetupReq+0x1a>

0800c148 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800c148:	b508      	push	{r3, lr}
    switch( region )
 800c14a:	2809      	cmp	r0, #9
 800c14c:	d82a      	bhi.n	800c1a4 <RegionNewChannelReq+0x5c>
 800c14e:	e8df f000 	tbb	[pc, r0]
 800c152:	0905      	.short	0x0905
 800c154:	1915110d 	.word	0x1915110d
 800c158:	25211d29 	.word	0x25211d29
    {
        AS923_NEW_CHANNEL_REQ( );
 800c15c:	4608      	mov	r0, r1
 800c15e:	f000 ff0f 	bl	800cf80 <RegionAS923NewChannelReq>
        default:
        {
            return 0;
        }
    }
}
 800c162:	bd08      	pop	{r3, pc}
        AU915_NEW_CHANNEL_REQ( );
 800c164:	4608      	mov	r0, r1
 800c166:	f001 fcc8 	bl	800dafa <RegionAU915NewChannelReq>
 800c16a:	e7fa      	b.n	800c162 <RegionNewChannelReq+0x1a>
        CN470_NEW_CHANNEL_REQ( );
 800c16c:	4608      	mov	r0, r1
 800c16e:	f002 fa4e 	bl	800e60e <RegionCN470NewChannelReq>
 800c172:	e7f6      	b.n	800c162 <RegionNewChannelReq+0x1a>
        CN779_NEW_CHANNEL_REQ( );
 800c174:	4608      	mov	r0, r1
 800c176:	f003 f877 	bl	800f268 <RegionCN779NewChannelReq>
 800c17a:	e7f2      	b.n	800c162 <RegionNewChannelReq+0x1a>
        EU433_NEW_CHANNEL_REQ( );
 800c17c:	4608      	mov	r0, r1
 800c17e:	f004 fa17 	bl	80105b0 <RegionEU433NewChannelReq>
 800c182:	e7ee      	b.n	800c162 <RegionNewChannelReq+0x1a>
        EU868_NEW_CHANNEL_REQ( );
 800c184:	4608      	mov	r0, r1
 800c186:	f005 f851 	bl	801122c <RegionEU868NewChannelReq>
 800c18a:	e7ea      	b.n	800c162 <RegionNewChannelReq+0x1a>
        IN865_NEW_CHANNEL_REQ( );
 800c18c:	4608      	mov	r0, r1
 800c18e:	f005 fe2f 	bl	8011df0 <RegionIN865NewChannelReq>
 800c192:	e7e6      	b.n	800c162 <RegionNewChannelReq+0x1a>
        US915_NEW_CHANNEL_REQ( );
 800c194:	4608      	mov	r0, r1
 800c196:	f007 f980 	bl	801349a <RegionUS915NewChannelReq>
 800c19a:	e7e2      	b.n	800c162 <RegionNewChannelReq+0x1a>
        RU864_NEW_CHANNEL_REQ( );
 800c19c:	4608      	mov	r0, r1
 800c19e:	f006 fbf5 	bl	801298c <RegionRU864NewChannelReq>
 800c1a2:	e7de      	b.n	800c162 <RegionNewChannelReq+0x1a>
{
 800c1a4:	2000      	movs	r0, #0
 800c1a6:	e7dc      	b.n	800c162 <RegionNewChannelReq+0x1a>

0800c1a8 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800c1a8:	b508      	push	{r3, lr}
    switch( region )
 800c1aa:	2809      	cmp	r0, #9
 800c1ac:	d82a      	bhi.n	800c204 <RegionTxParamSetupReq+0x5c>
 800c1ae:	e8df f000 	tbb	[pc, r0]
 800c1b2:	0905      	.short	0x0905
 800c1b4:	1915110d 	.word	0x1915110d
 800c1b8:	25211d29 	.word	0x25211d29
    {
        AS923_TX_PARAM_SETUP_REQ( );
 800c1bc:	4608      	mov	r0, r1
 800c1be:	f000 fd88 	bl	800ccd2 <RegionAS923TxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 800c1c2:	bd08      	pop	{r3, pc}
        AU915_TX_PARAM_SETUP_REQ( );
 800c1c4:	4608      	mov	r0, r1
 800c1c6:	f001 fc9b 	bl	800db00 <RegionAU915TxParamSetupReq>
 800c1ca:	e7fa      	b.n	800c1c2 <RegionTxParamSetupReq+0x1a>
        CN470_TX_PARAM_SETUP_REQ( );
 800c1cc:	4608      	mov	r0, r1
 800c1ce:	f002 fa21 	bl	800e614 <RegionCN470TxParamSetupReq>
 800c1d2:	e7f6      	b.n	800c1c2 <RegionTxParamSetupReq+0x1a>
        CN779_TX_PARAM_SETUP_REQ( );
 800c1d4:	4608      	mov	r0, r1
 800c1d6:	f002 fef0 	bl	800efba <RegionCN779TxParamSetupReq>
 800c1da:	e7f2      	b.n	800c1c2 <RegionTxParamSetupReq+0x1a>
        EU433_TX_PARAM_SETUP_REQ( );
 800c1dc:	4608      	mov	r0, r1
 800c1de:	f004 f890 	bl	8010302 <RegionEU433TxParamSetupReq>
 800c1e2:	e7ee      	b.n	800c1c2 <RegionTxParamSetupReq+0x1a>
        EU868_TX_PARAM_SETUP_REQ( );
 800c1e4:	4608      	mov	r0, r1
 800c1e6:	f004 feb7 	bl	8010f58 <RegionEU868TxParamSetupReq>
 800c1ea:	e7ea      	b.n	800c1c2 <RegionTxParamSetupReq+0x1a>
        IN865_TX_PARAM_SETUP_REQ( );
 800c1ec:	4608      	mov	r0, r1
 800c1ee:	f005 fca8 	bl	8011b42 <RegionIN865TxParamSetupReq>
 800c1f2:	e7e6      	b.n	800c1c2 <RegionTxParamSetupReq+0x1a>
        US915_TX_PARAM_SETUP_REQ( );
 800c1f4:	4608      	mov	r0, r1
 800c1f6:	f007 f953 	bl	80134a0 <RegionUS915TxParamSetupReq>
 800c1fa:	e7e2      	b.n	800c1c2 <RegionTxParamSetupReq+0x1a>
        RU864_TX_PARAM_SETUP_REQ( );
 800c1fc:	4608      	mov	r0, r1
 800c1fe:	f006 fa70 	bl	80126e2 <RegionRU864TxParamSetupReq>
 800c202:	e7de      	b.n	800c1c2 <RegionTxParamSetupReq+0x1a>
{
 800c204:	2000      	movs	r0, #0
 800c206:	e7dc      	b.n	800c1c2 <RegionTxParamSetupReq+0x1a>

0800c208 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800c208:	b508      	push	{r3, lr}
    switch( region )
 800c20a:	2809      	cmp	r0, #9
 800c20c:	d82a      	bhi.n	800c264 <RegionDlChannelReq+0x5c>
 800c20e:	e8df f000 	tbb	[pc, r0]
 800c212:	0905      	.short	0x0905
 800c214:	1915110d 	.word	0x1915110d
 800c218:	25211d29 	.word	0x25211d29
    {
        AS923_DL_CHANNEL_REQ( );
 800c21c:	4608      	mov	r0, r1
 800c21e:	f000 fd5b 	bl	800ccd8 <RegionAS923DlChannelReq>
        default:
        {
            return 0;
        }
    }
}
 800c222:	bd08      	pop	{r3, pc}
        AU915_DL_CHANNEL_REQ( );
 800c224:	4608      	mov	r0, r1
 800c226:	f001 fc6d 	bl	800db04 <RegionAU915DlChannelReq>
 800c22a:	e7fa      	b.n	800c222 <RegionDlChannelReq+0x1a>
        CN470_DL_CHANNEL_REQ( );
 800c22c:	4608      	mov	r0, r1
 800c22e:	f002 f9f4 	bl	800e61a <RegionCN470DlChannelReq>
 800c232:	e7f6      	b.n	800c222 <RegionDlChannelReq+0x1a>
        CN779_DL_CHANNEL_REQ( );
 800c234:	4608      	mov	r0, r1
 800c236:	f002 fec3 	bl	800efc0 <RegionCN779DlChannelReq>
 800c23a:	e7f2      	b.n	800c222 <RegionDlChannelReq+0x1a>
        EU433_DL_CHANNEL_REQ( );
 800c23c:	4608      	mov	r0, r1
 800c23e:	f004 f863 	bl	8010308 <RegionEU433DlChannelReq>
 800c242:	e7ee      	b.n	800c222 <RegionDlChannelReq+0x1a>
        EU868_DL_CHANNEL_REQ( );
 800c244:	4608      	mov	r0, r1
 800c246:	f004 fe8b 	bl	8010f60 <RegionEU868DlChannelReq>
 800c24a:	e7ea      	b.n	800c222 <RegionDlChannelReq+0x1a>
        IN865_DL_CHANNEL_REQ( );
 800c24c:	4608      	mov	r0, r1
 800c24e:	f005 fc7b 	bl	8011b48 <RegionIN865DlChannelReq>
 800c252:	e7e6      	b.n	800c222 <RegionDlChannelReq+0x1a>
        US915_DL_CHANNEL_REQ( );
 800c254:	4608      	mov	r0, r1
 800c256:	f007 f926 	bl	80134a6 <RegionUS915DlChannelReq>
 800c25a:	e7e2      	b.n	800c222 <RegionDlChannelReq+0x1a>
        RU864_DL_CHANNEL_REQ( );
 800c25c:	4608      	mov	r0, r1
 800c25e:	f006 fa43 	bl	80126e8 <RegionRU864DlChannelReq>
 800c262:	e7de      	b.n	800c222 <RegionDlChannelReq+0x1a>
{
 800c264:	2000      	movs	r0, #0
 800c266:	e7dc      	b.n	800c222 <RegionDlChannelReq+0x1a>

0800c268 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800c268:	b508      	push	{r3, lr}
 800c26a:	4603      	mov	r3, r0
 800c26c:	4608      	mov	r0, r1
 800c26e:	4611      	mov	r1, r2
    switch( region )
 800c270:	2b09      	cmp	r3, #9
 800c272:	d821      	bhi.n	800c2b8 <RegionAlternateDr+0x50>
 800c274:	e8df f003 	tbb	[pc, r3]
 800c278:	0e0b0805 	.word	0x0e0b0805
 800c27c:	17201411 	.word	0x17201411
 800c280:	1d1a      	.short	0x1d1a
    {
        AS923_ALTERNATE_DR( );
 800c282:	f000 fd49 	bl	800cd18 <RegionAS923AlternateDr>
        default:
        {
            return 0;
        }
    }
}
 800c286:	bd08      	pop	{r3, pc}
        AU915_ALTERNATE_DR( );
 800c288:	f001 fc40 	bl	800db0c <RegionAU915AlternateDr>
 800c28c:	e7fb      	b.n	800c286 <RegionAlternateDr+0x1e>
        CN470_ALTERNATE_DR( );
 800c28e:	f002 f9c7 	bl	800e620 <RegionCN470AlternateDr>
 800c292:	e7f8      	b.n	800c286 <RegionAlternateDr+0x1e>
        CN779_ALTERNATE_DR( );
 800c294:	f002 feb4 	bl	800f000 <RegionCN779AlternateDr>
 800c298:	e7f5      	b.n	800c286 <RegionAlternateDr+0x1e>
        EU433_ALTERNATE_DR( );
 800c29a:	f004 f855 	bl	8010348 <RegionEU433AlternateDr>
 800c29e:	e7f2      	b.n	800c286 <RegionAlternateDr+0x1e>
        EU868_ALTERNATE_DR( );
 800c2a0:	f004 fe86 	bl	8010fb0 <RegionEU868AlternateDr>
 800c2a4:	e7ef      	b.n	800c286 <RegionAlternateDr+0x1e>
        IN865_ALTERNATE_DR( );
 800c2a6:	f005 fc6f 	bl	8011b88 <RegionIN865AlternateDr>
 800c2aa:	e7ec      	b.n	800c286 <RegionAlternateDr+0x1e>
        US915_ALTERNATE_DR( );
 800c2ac:	f007 f8fe 	bl	80134ac <RegionUS915AlternateDr>
 800c2b0:	e7e9      	b.n	800c286 <RegionAlternateDr+0x1e>
        RU864_ALTERNATE_DR( );
 800c2b2:	f006 fa39 	bl	8012728 <RegionRU864AlternateDr>
 800c2b6:	e7e6      	b.n	800c286 <RegionAlternateDr+0x1e>
{
 800c2b8:	2000      	movs	r0, #0
 800c2ba:	e7e4      	b.n	800c286 <RegionAlternateDr+0x1e>

0800c2bc <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800c2bc:	b510      	push	{r4, lr}
 800c2be:	4604      	mov	r4, r0
 800c2c0:	4608      	mov	r0, r1
 800c2c2:	4611      	mov	r1, r2
 800c2c4:	461a      	mov	r2, r3
    switch( region )
 800c2c6:	2c09      	cmp	r4, #9
 800c2c8:	d82a      	bhi.n	800c320 <RegionNextChannel+0x64>
 800c2ca:	e8df f004 	tbb	[pc, r4]
 800c2ce:	0905      	.short	0x0905
 800c2d0:	1915110d 	.word	0x1915110d
 800c2d4:	25211d29 	.word	0x25211d29
    {
        AS923_NEXT_CHANNEL( );
 800c2d8:	9b02      	ldr	r3, [sp, #8]
 800c2da:	f000 fd1f 	bl	800cd1c <RegionAS923NextChannel>
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800c2de:	bd10      	pop	{r4, pc}
        AU915_NEXT_CHANNEL( );
 800c2e0:	9b02      	ldr	r3, [sp, #8]
 800c2e2:	f001 fc39 	bl	800db58 <RegionAU915NextChannel>
 800c2e6:	e7fa      	b.n	800c2de <RegionNextChannel+0x22>
        CN470_NEXT_CHANNEL( );
 800c2e8:	9b02      	ldr	r3, [sp, #8]
 800c2ea:	f002 f99b 	bl	800e624 <RegionCN470NextChannel>
 800c2ee:	e7f6      	b.n	800c2de <RegionNextChannel+0x22>
        CN779_NEXT_CHANNEL( );
 800c2f0:	9b02      	ldr	r3, [sp, #8]
 800c2f2:	f002 fe87 	bl	800f004 <RegionCN779NextChannel>
 800c2f6:	e7f2      	b.n	800c2de <RegionNextChannel+0x22>
        EU433_NEXT_CHANNEL( );
 800c2f8:	9b02      	ldr	r3, [sp, #8]
 800c2fa:	f004 f827 	bl	801034c <RegionEU433NextChannel>
 800c2fe:	e7ee      	b.n	800c2de <RegionNextChannel+0x22>
        EU868_NEXT_CHANNEL( );
 800c300:	9b02      	ldr	r3, [sp, #8]
 800c302:	f004 fe57 	bl	8010fb4 <RegionEU868NextChannel>
 800c306:	e7ea      	b.n	800c2de <RegionNextChannel+0x22>
        IN865_NEXT_CHANNEL( );
 800c308:	9b02      	ldr	r3, [sp, #8]
 800c30a:	f005 fc3f 	bl	8011b8c <RegionIN865NextChannel>
 800c30e:	e7e6      	b.n	800c2de <RegionNextChannel+0x22>
        US915_NEXT_CHANNEL( );
 800c310:	9b02      	ldr	r3, [sp, #8]
 800c312:	f007 f8f1 	bl	80134f8 <RegionUS915NextChannel>
 800c316:	e7e2      	b.n	800c2de <RegionNextChannel+0x22>
        RU864_NEXT_CHANNEL( );
 800c318:	9b02      	ldr	r3, [sp, #8]
 800c31a:	f006 fa07 	bl	801272c <RegionRU864NextChannel>
 800c31e:	e7de      	b.n	800c2de <RegionNextChannel+0x22>
{
 800c320:	2009      	movs	r0, #9
 800c322:	e7dc      	b.n	800c2de <RegionNextChannel+0x22>

0800c324 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800c324:	b508      	push	{r3, lr}
    switch( region )
 800c326:	2809      	cmp	r0, #9
 800c328:	d809      	bhi.n	800c33e <RegionSetContinuousWave+0x1a>
 800c32a:	e8df f000 	tbb	[pc, r0]
 800c32e:	0905      	.short	0x0905
 800c330:	1915110d 	.word	0x1915110d
 800c334:	25211d08 	.word	0x25211d08
    {
        AS923_SET_CONTINUOUS_WAVE( );
 800c338:	4608      	mov	r0, r1
 800c33a:	f000 fe4d 	bl	800cfd8 <RegionAS923SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 800c33e:	bd08      	pop	{r3, pc}
        AU915_SET_CONTINUOUS_WAVE( );
 800c340:	4608      	mov	r0, r1
 800c342:	f001 fcb9 	bl	800dcb8 <RegionAU915SetContinuousWave>
 800c346:	e7fa      	b.n	800c33e <RegionSetContinuousWave+0x1a>
        CN470_SET_CONTINUOUS_WAVE( );
 800c348:	4608      	mov	r0, r1
 800c34a:	f002 f9e5 	bl	800e718 <RegionCN470SetContinuousWave>
 800c34e:	e7f6      	b.n	800c33e <RegionSetContinuousWave+0x1a>
        CN779_SET_CONTINUOUS_WAVE( );
 800c350:	4608      	mov	r0, r1
 800c352:	f002 ffb5 	bl	800f2c0 <RegionCN779SetContinuousWave>
 800c356:	e7f2      	b.n	800c33e <RegionSetContinuousWave+0x1a>
        EU433_SET_CONTINUOUS_WAVE( );
 800c358:	4608      	mov	r0, r1
 800c35a:	f004 f955 	bl	8010608 <RegionEU433SetContinuousWave>
 800c35e:	e7ee      	b.n	800c33e <RegionSetContinuousWave+0x1a>
        EU868_SET_CONTINUOUS_WAVE( );
 800c360:	4608      	mov	r0, r1
 800c362:	f004 ff8f 	bl	8011284 <RegionEU868SetContinuousWave>
 800c366:	e7ea      	b.n	800c33e <RegionSetContinuousWave+0x1a>
        IN865_SET_CONTINUOUS_WAVE( );
 800c368:	4608      	mov	r0, r1
 800c36a:	f005 fd6d 	bl	8011e48 <RegionIN865SetContinuousWave>
 800c36e:	e7e6      	b.n	800c33e <RegionSetContinuousWave+0x1a>
        US915_SET_CONTINUOUS_WAVE( );
 800c370:	4608      	mov	r0, r1
 800c372:	f007 f971 	bl	8013658 <RegionUS915SetContinuousWave>
 800c376:	e7e2      	b.n	800c33e <RegionSetContinuousWave+0x1a>
        RU864_SET_CONTINUOUS_WAVE( );
 800c378:	4608      	mov	r0, r1
 800c37a:	f006 fb33 	bl	80129e4 <RegionRU864SetContinuousWave>
}
 800c37e:	e7de      	b.n	800c33e <RegionSetContinuousWave+0x1a>

0800c380 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800c380:	b510      	push	{r4, lr}
 800c382:	4604      	mov	r4, r0
 800c384:	4608      	mov	r0, r1
 800c386:	4611      	mov	r1, r2
 800c388:	461a      	mov	r2, r3
    switch( region )
 800c38a:	2c09      	cmp	r4, #9
 800c38c:	d821      	bhi.n	800c3d2 <RegionApplyDrOffset+0x52>
 800c38e:	e8df f004 	tbb	[pc, r4]
 800c392:	0805      	.short	0x0805
 800c394:	14110e0b 	.word	0x14110e0b
 800c398:	1d1a1720 	.word	0x1d1a1720
    {
        AS923_APPLY_DR_OFFSET( );
 800c39c:	f000 fe4a 	bl	800d034 <RegionAS923ApplyDrOffset>
        default:
        {
            return dr;
        }
    }
}
 800c3a0:	bd10      	pop	{r4, pc}
        AU915_APPLY_DR_OFFSET( );
 800c3a2:	f001 fcb7 	bl	800dd14 <RegionAU915ApplyDrOffset>
 800c3a6:	e7fb      	b.n	800c3a0 <RegionApplyDrOffset+0x20>
        CN470_APPLY_DR_OFFSET( );
 800c3a8:	f002 f9e4 	bl	800e774 <RegionCN470ApplyDrOffset>
 800c3ac:	e7f8      	b.n	800c3a0 <RegionApplyDrOffset+0x20>
        CN779_APPLY_DR_OFFSET( );
 800c3ae:	f002 ffb5 	bl	800f31c <RegionCN779ApplyDrOffset>
 800c3b2:	e7f5      	b.n	800c3a0 <RegionApplyDrOffset+0x20>
        EU433_APPLY_DR_OFFSET( );
 800c3b4:	f004 f956 	bl	8010664 <RegionEU433ApplyDrOffset>
 800c3b8:	e7f2      	b.n	800c3a0 <RegionApplyDrOffset+0x20>
        EU868_APPLY_DR_OFFSET( );
 800c3ba:	f004 ff91 	bl	80112e0 <RegionEU868ApplyDrOffset>
 800c3be:	e7ef      	b.n	800c3a0 <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
 800c3c0:	f005 fd70 	bl	8011ea4 <RegionIN865ApplyDrOffset>
 800c3c4:	e7ec      	b.n	800c3a0 <RegionApplyDrOffset+0x20>
        US915_APPLY_DR_OFFSET( );
 800c3c6:	f007 f97b 	bl	80136c0 <RegionUS915ApplyDrOffset>
 800c3ca:	e7e9      	b.n	800c3a0 <RegionApplyDrOffset+0x20>
        RU864_APPLY_DR_OFFSET( );
 800c3cc:	f006 fb38 	bl	8012a40 <RegionRU864ApplyDrOffset>
 800c3d0:	e7e6      	b.n	800c3a0 <RegionApplyDrOffset+0x20>
            return dr;
 800c3d2:	b2c8      	uxtb	r0, r1
 800c3d4:	e7e4      	b.n	800c3a0 <RegionApplyDrOffset+0x20>
	...

0800c3d8 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800c3d8:	4800      	ldr	r0, [pc, #0]	; (800c3dc <RegionGetVersion+0x4>)
 800c3da:	4770      	bx	lr
 800c3dc:	01000300 	.word	0x01000300

0800c3e0 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 800c3e0:	b510      	push	{r4, lr}
 800c3e2:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800c3e4:	4b05      	ldr	r3, [pc, #20]	; (800c3fc <VerifyRfFreq+0x1c>)
 800c3e6:	6a1b      	ldr	r3, [r3, #32]
 800c3e8:	4798      	blx	r3
 800c3ea:	b120      	cbz	r0, 800c3f6 <VerifyRfFreq+0x16>
    {
        return false;
    }

    if( ( freq < AS923_MIN_RF_FREQUENCY ) || ( freq > AS923_MAX_RF_FREQUENCY ) )
 800c3ec:	4b04      	ldr	r3, [pc, #16]	; (800c400 <VerifyRfFreq+0x20>)
 800c3ee:	4423      	add	r3, r4
 800c3f0:	4a04      	ldr	r2, [pc, #16]	; (800c404 <VerifyRfFreq+0x24>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d800      	bhi.n	800c3f8 <VerifyRfFreq+0x18>
    {
        return false;
    }
    return true;
}
 800c3f6:	bd10      	pop	{r4, pc}
        return false;
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	e7fc      	b.n	800c3f6 <VerifyRfFreq+0x16>
 800c3fc:	08018318 	.word	0x08018318
 800c400:	c9763540 	.word	0xc9763540
 800c404:	00c65d40 	.word	0x00c65d40

0800c408 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800c408:	b570      	push	{r4, r5, r6, lr}
 800c40a:	b084      	sub	sp, #16
 800c40c:	4605      	mov	r5, r0
 800c40e:	460c      	mov	r4, r1
    int8_t phyDr = DataratesAS923[datarate];
 800c410:	4b13      	ldr	r3, [pc, #76]	; (800c460 <GetTimeOnAir+0x58>)
 800c412:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAS923 );
 800c414:	4913      	ldr	r1, [pc, #76]	; (800c464 <GetTimeOnAir+0x5c>)
 800c416:	f003 fb09 	bl	800fa2c <RegionCommonGetBandwidth>
 800c41a:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800c41c:	2d07      	cmp	r5, #7
 800c41e:	d00e      	beq.n	800c43e <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800c420:	4b11      	ldr	r3, [pc, #68]	; (800c468 <GetTimeOnAir+0x60>)
 800c422:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800c424:	2001      	movs	r0, #1
 800c426:	9003      	str	r0, [sp, #12]
 800c428:	b2e4      	uxtb	r4, r4
 800c42a:	9402      	str	r4, [sp, #8]
 800c42c:	2300      	movs	r3, #0
 800c42e:	9301      	str	r3, [sp, #4]
 800c430:	2308      	movs	r3, #8
 800c432:	9300      	str	r3, [sp, #0]
 800c434:	4603      	mov	r3, r0
 800c436:	4632      	mov	r2, r6
 800c438:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800c43a:	b004      	add	sp, #16
 800c43c:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800c43e:	4b0a      	ldr	r3, [pc, #40]	; (800c468 <GetTimeOnAir+0x60>)
 800c440:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800c442:	2301      	movs	r3, #1
 800c444:	9303      	str	r3, [sp, #12]
 800c446:	b2e4      	uxtb	r4, r4
 800c448:	9402      	str	r4, [sp, #8]
 800c44a:	2000      	movs	r0, #0
 800c44c:	9001      	str	r0, [sp, #4]
 800c44e:	2305      	movs	r3, #5
 800c450:	9300      	str	r3, [sp, #0]
 800c452:	4603      	mov	r3, r0
 800c454:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c458:	fb02 f206 	mul.w	r2, r2, r6
 800c45c:	47a8      	blx	r5
 800c45e:	e7ec      	b.n	800c43a <GetTimeOnAir+0x32>
 800c460:	08017afc 	.word	0x08017afc
 800c464:	08017adc 	.word	0x08017adc
 800c468:	08018318 	.word	0x08018318

0800c46c <RegionAS923GetPhyParam>:
#endif /* REGION_AS923 */

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 800c46c:	b500      	push	{lr}
 800c46e:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800c470:	2300      	movs	r3, #0
 800c472:	9304      	str	r3, [sp, #16]

#if defined( REGION_AS923 )
    switch( getPhy->Attribute )
 800c474:	7803      	ldrb	r3, [r0, #0]
 800c476:	3b01      	subs	r3, #1
 800c478:	2b38      	cmp	r3, #56	; 0x38
 800c47a:	d846      	bhi.n	800c50a <RegionAS923GetPhyParam+0x9e>
 800c47c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c480:	003e0039 	.word	0x003e0039
 800c484:	00450045 	.word	0x00450045
 800c488:	00430045 	.word	0x00430045
 800c48c:	00450045 	.word	0x00450045
 800c490:	00450045 	.word	0x00450045
 800c494:	00660063 	.word	0x00660063
 800c498:	00770069 	.word	0x00770069
 800c49c:	00850045 	.word	0x00850045
 800c4a0:	008d0089 	.word	0x008d0089
 800c4a4:	00950091 	.word	0x00950091
 800c4a8:	009d0099 	.word	0x009d0099
 800c4ac:	00a60045 	.word	0x00a60045
 800c4b0:	00ac00a9 	.word	0x00ac00a9
 800c4b4:	00b800b2 	.word	0x00b800b2
 800c4b8:	00bf00bb 	.word	0x00bf00bb
 800c4bc:	00c500c2 	.word	0x00c500c2
 800c4c0:	004900c9 	.word	0x004900c9
 800c4c4:	00450045 	.word	0x00450045
 800c4c8:	00450045 	.word	0x00450045
 800c4cc:	00450045 	.word	0x00450045
 800c4d0:	00450045 	.word	0x00450045
 800c4d4:	00450045 	.word	0x00450045
 800c4d8:	00450045 	.word	0x00450045
 800c4dc:	00cc0045 	.word	0x00cc0045
 800c4e0:	00d900cf 	.word	0x00d900cf
 800c4e4:	00450045 	.word	0x00450045
 800c4e8:	00df00dc 	.word	0x00df00dc
 800c4ec:	00e20045 	.word	0x00e20045
 800c4f0:	00e8      	.short	0x00e8
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 800c4f2:	78c3      	ldrb	r3, [r0, #3]
 800c4f4:	b14b      	cbz	r3, 800c50a <RegionAS923GetPhyParam+0x9e>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 800c4f6:	2302      	movs	r3, #2
 800c4f8:	9304      	str	r3, [sp, #16]
 800c4fa:	e006      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            }
            break;
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 800c4fc:	7883      	ldrb	r3, [r0, #2]
 800c4fe:	b123      	cbz	r3, 800c50a <RegionAS923GetPhyParam+0x9e>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 800c500:	2302      	movs	r3, #2
 800c502:	9304      	str	r3, [sp, #16]
 800c504:	e001      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            }
            break;
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 800c506:	2302      	movs	r3, #2
 800c508:	9304      	str	r3, [sp, #16]
        }
    }

#endif /* REGION_AS923 */
    return phyParam;
}
 800c50a:	9804      	ldr	r0, [sp, #16]
 800c50c:	b007      	add	sp, #28
 800c50e:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800c512:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800c516:	f88d 3004 	strb.w	r3, [sp, #4]
 800c51a:	2307      	movs	r3, #7
 800c51c:	f88d 3005 	strb.w	r3, [sp, #5]
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AS923_TX_MIN_DATARATE : AS923_DWELL_LIMIT_DATARATE ),
 800c520:	7883      	ldrb	r3, [r0, #2]
 800c522:	b103      	cbz	r3, 800c526 <RegionAS923GetPhyParam+0xba>
 800c524:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800c526:	f88d 3006 	strb.w	r3, [sp, #6]
 800c52a:	2310      	movs	r3, #16
 800c52c:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800c530:	4b4b      	ldr	r3, [pc, #300]	; (800c660 <RegionAS923GetPhyParam+0x1f4>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800c538:	9202      	str	r2, [sp, #8]
 800c53a:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800c53c:	a801      	add	r0, sp, #4
 800c53e:	f003 fa51 	bl	800f9e4 <RegionCommonGetNextLowerTxDr>
 800c542:	9004      	str	r0, [sp, #16]
            break;
 800c544:	e7e1      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800c546:	2340      	movs	r3, #64	; 0x40
 800c548:	9304      	str	r3, [sp, #16]
            break;
 800c54a:	e7de      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800c54c:	2320      	movs	r3, #32
 800c54e:	9304      	str	r3, [sp, #16]
            break;
 800c550:	e7db      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            if( getPhy->UplinkDwellTime == 0 )
 800c552:	7883      	ldrb	r3, [r0, #2]
 800c554:	b92b      	cbnz	r3, 800c562 <RegionAS923GetPhyParam+0xf6>
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 800c556:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c55a:	4a42      	ldr	r2, [pc, #264]	; (800c664 <RegionAS923GetPhyParam+0x1f8>)
 800c55c:	5cd3      	ldrb	r3, [r2, r3]
 800c55e:	9304      	str	r3, [sp, #16]
 800c560:	e7d3      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 800c562:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c566:	4a40      	ldr	r2, [pc, #256]	; (800c668 <RegionAS923GetPhyParam+0x1fc>)
 800c568:	5cd3      	ldrb	r3, [r2, r3]
 800c56a:	9304      	str	r3, [sp, #16]
 800c56c:	e7cd      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            if( getPhy->UplinkDwellTime == 0 )
 800c56e:	7883      	ldrb	r3, [r0, #2]
 800c570:	b92b      	cbnz	r3, 800c57e <RegionAS923GetPhyParam+0x112>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 800c572:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c576:	4a3d      	ldr	r2, [pc, #244]	; (800c66c <RegionAS923GetPhyParam+0x200>)
 800c578:	5cd3      	ldrb	r3, [r2, r3]
 800c57a:	9304      	str	r3, [sp, #16]
 800c57c:	e7c5      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 800c57e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c582:	4a39      	ldr	r2, [pc, #228]	; (800c668 <RegionAS923GetPhyParam+0x1fc>)
 800c584:	5cd3      	ldrb	r3, [r2, r3]
 800c586:	9304      	str	r3, [sp, #16]
 800c588:	e7bf      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_MAX_RX_WINDOW;
 800c58a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800c58e:	9304      	str	r3, [sp, #16]
            break;
 800c590:	e7bb      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800c592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c596:	9304      	str	r3, [sp, #16]
            break;
 800c598:	e7b7      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800c59a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c59e:	9304      	str	r3, [sp, #16]
            break;
 800c5a0:	e7b3      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800c5a2:	f241 3388 	movw	r3, #5000	; 0x1388
 800c5a6:	9304      	str	r3, [sp, #16]
            break;
 800c5a8:	e7af      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800c5aa:	f241 7370 	movw	r3, #6000	; 0x1770
 800c5ae:	9304      	str	r3, [sp, #16]
            break;
 800c5b0:	e7ab      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800c5b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c5b6:	9304      	str	r3, [sp, #16]
            break;
 800c5b8:	e7a7      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800c5ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c5be:	482c      	ldr	r0, [pc, #176]	; (800c670 <RegionAS923GetPhyParam+0x204>)
 800c5c0:	f007 ff54 	bl	801446c <randr>
 800c5c4:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800c5c8:	9004      	str	r0, [sp, #16]
            break;
 800c5ca:	e79e      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_RX_WND_2_FREQ - REGION_AS923_FREQ_OFFSET;
 800c5cc:	4b29      	ldr	r3, [pc, #164]	; (800c674 <RegionAS923GetPhyParam+0x208>)
 800c5ce:	9304      	str	r3, [sp, #16]
            break;
 800c5d0:	e79b      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_RX_WND_2_DR;
 800c5d2:	2302      	movs	r3, #2
 800c5d4:	9304      	str	r3, [sp, #16]
            break;
 800c5d6:	e798      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800c5d8:	4b21      	ldr	r3, [pc, #132]	; (800c660 <RegionAS923GetPhyParam+0x1f4>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800c5e0:	9304      	str	r3, [sp, #16]
            break;
 800c5e2:	e792      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800c5e4:	4b1e      	ldr	r3, [pc, #120]	; (800c660 <RegionAS923GetPhyParam+0x1f4>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800c5ec:	9304      	str	r3, [sp, #16]
            break;
 800c5ee:	e78c      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 800c5f0:	2310      	movs	r3, #16
 800c5f2:	9304      	str	r3, [sp, #16]
            break;
 800c5f4:	e789      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800c5f6:	4b1a      	ldr	r3, [pc, #104]	; (800c660 <RegionAS923GetPhyParam+0x1f4>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	9304      	str	r3, [sp, #16]
            break;
 800c5fc:	e785      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 800c5fe:	2301      	movs	r3, #1
 800c600:	9304      	str	r3, [sp, #16]
            break;
 800c602:	e782      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_DEFAULT_DOWNLINK_DWELL_TIME;
 800c604:	2301      	movs	r3, #1
 800c606:	9304      	str	r3, [sp, #16]
            break;
 800c608:	e77f      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 800c60a:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800c60e:	9304      	str	r3, [sp, #16]
            break;
 800c610:	e77b      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 800c612:	4b19      	ldr	r3, [pc, #100]	; (800c678 <RegionAS923GetPhyParam+0x20c>)
 800c614:	9304      	str	r3, [sp, #16]
            break;
 800c616:	e778      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 800c618:	4b18      	ldr	r3, [pc, #96]	; (800c67c <RegionAS923GetPhyParam+0x210>)
 800c61a:	9304      	str	r3, [sp, #16]
            break;
 800c61c:	e775      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 800c61e:	2311      	movs	r3, #17
 800c620:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 800c624:	2302      	movs	r3, #2
 800c626:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = AS923_RFU2_SIZE;
 800c62a:	2300      	movs	r3, #0
 800c62c:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800c630:	e76b      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 800c632:	2303      	movs	r3, #3
 800c634:	9304      	str	r3, [sp, #16]
            break;
 800c636:	e768      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ;
 800c638:	4b10      	ldr	r3, [pc, #64]	; (800c67c <RegionAS923GetPhyParam+0x210>)
 800c63a:	9304      	str	r3, [sp, #16]
            break;
 800c63c:	e765      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 800c63e:	2303      	movs	r3, #3
 800c640:	9304      	str	r3, [sp, #16]
            break;
 800c642:	e762      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = DataratesAS923[getPhy->Datarate];
 800c644:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c648:	4a0d      	ldr	r2, [pc, #52]	; (800c680 <RegionAS923GetPhyParam+0x214>)
 800c64a:	5cd3      	ldrb	r3, [r2, r3]
 800c64c:	9304      	str	r3, [sp, #16]
            break;
 800c64e:	e75c      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAS923 );
 800c650:	490c      	ldr	r1, [pc, #48]	; (800c684 <RegionAS923GetPhyParam+0x218>)
 800c652:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800c656:	f003 f9e9 	bl	800fa2c <RegionCommonGetBandwidth>
 800c65a:	9004      	str	r0, [sp, #16]
            break;
 800c65c:	e755      	b.n	800c50a <RegionAS923GetPhyParam+0x9e>
 800c65e:	bf00      	nop
 800c660:	20001430 	.word	0x20001430
 800c664:	08017b0c 	.word	0x08017b0c
 800c668:	08017b14 	.word	0x08017b14
 800c66c:	08017b1c 	.word	0x08017b1c
 800c670:	fffffc18 	.word	0xfffffc18
 800c674:	3706ea00 	.word	0x3706ea00
 800c678:	4009999a 	.word	0x4009999a
 800c67c:	3709f740 	.word	0x3709f740
 800c680:	08017afc 	.word	0x08017afc
 800c684:	08017adc 	.word	0x08017adc

0800c688 <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800c688:	b530      	push	{r4, r5, lr}
 800c68a:	b083      	sub	sp, #12
#if defined( REGION_AS923 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800c68c:	4b0b      	ldr	r3, [pc, #44]	; (800c6bc <RegionAS923SetBandTxDone+0x34>)
 800c68e:	681d      	ldr	r5, [r3, #0]
 800c690:	4b0b      	ldr	r3, [pc, #44]	; (800c6c0 <RegionAS923SetBandTxDone+0x38>)
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	7803      	ldrb	r3, [r0, #0]
 800c696:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c69a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c69e:	7a5b      	ldrb	r3, [r3, #9]
 800c6a0:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800c6a4:	6903      	ldr	r3, [r0, #16]
 800c6a6:	9300      	str	r3, [sp, #0]
 800c6a8:	68c3      	ldr	r3, [r0, #12]
 800c6aa:	7842      	ldrb	r2, [r0, #1]
 800c6ac:	6881      	ldr	r1, [r0, #8]
 800c6ae:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 800c6b2:	f002 ff83 	bl	800f5bc <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_AS923 */
}
 800c6b6:	b003      	add	sp, #12
 800c6b8:	bd30      	pop	{r4, r5, pc}
 800c6ba:	bf00      	nop
 800c6bc:	2000142c 	.word	0x2000142c
 800c6c0:	20001430 	.word	0x20001430

0800c6c4 <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 800c6c4:	b530      	push	{r4, r5, lr}
 800c6c6:	b087      	sub	sp, #28
#if defined( REGION_AS923 )
    Band_t bands[AS923_MAX_NB_BANDS] =
 800c6c8:	2364      	movs	r3, #100	; 0x64
 800c6ca:	f8ad 3000 	strh.w	r3, [sp]
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	f88d 3002 	strb.w	r3, [sp, #2]
 800c6d4:	9301      	str	r3, [sp, #4]
 800c6d6:	9302      	str	r3, [sp, #8]
 800c6d8:	9303      	str	r3, [sp, #12]
 800c6da:	9304      	str	r3, [sp, #16]
 800c6dc:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        AS923_BAND0
    };

    switch( params->Type )
 800c6e0:	7a03      	ldrb	r3, [r0, #8]
 800c6e2:	2b01      	cmp	r3, #1
 800c6e4:	d032      	beq.n	800c74c <RegionAS923InitDefaults+0x88>
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	d03d      	beq.n	800c766 <RegionAS923InitDefaults+0xa2>
 800c6ea:	b10b      	cbz	r3, 800c6f0 <RegionAS923InitDefaults+0x2c>
        {
            break;
        }
    }
#endif /* REGION_AS923 */
}
 800c6ec:	b007      	add	sp, #28
 800c6ee:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800c6f0:	6803      	ldr	r3, [r0, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d0fa      	beq.n	800c6ec <RegionAS923InitDefaults+0x28>
 800c6f6:	6842      	ldr	r2, [r0, #4]
 800c6f8:	2a00      	cmp	r2, #0
 800c6fa:	d0f7      	beq.n	800c6ec <RegionAS923InitDefaults+0x28>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800c6fc:	491f      	ldr	r1, [pc, #124]	; (800c77c <RegionAS923InitDefaults+0xb8>)
 800c6fe:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800c700:	4c1f      	ldr	r4, [pc, #124]	; (800c780 <RegionAS923InitDefaults+0xbc>)
 800c702:	6022      	str	r2, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 800c704:	2218      	movs	r2, #24
 800c706:	4669      	mov	r1, sp
 800c708:	4618      	mov	r0, r3
 800c70a:	f007 febc 	bl	8014486 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) AS923_LC1;
 800c70e:	6823      	ldr	r3, [r4, #0]
 800c710:	4c1c      	ldr	r4, [pc, #112]	; (800c784 <RegionAS923InitDefaults+0xc0>)
 800c712:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c716:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) AS923_LC2;
 800c71a:	f103 050c 	add.w	r5, r3, #12
 800c71e:	340c      	adds	r4, #12
 800c720:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c724:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[0].Frequency -= REGION_AS923_FREQ_OFFSET;
 800c728:	4a17      	ldr	r2, [pc, #92]	; (800c788 <RegionAS923InitDefaults+0xc4>)
 800c72a:	601a      	str	r2, [r3, #0]
            RegionNvmGroup2->Channels[1].Frequency -= REGION_AS923_FREQ_OFFSET;
 800c72c:	f502 3243 	add.w	r2, r2, #199680	; 0x30c00
 800c730:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 800c734:	60da      	str	r2, [r3, #12]
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 800c736:	2203      	movs	r2, #3
 800c738:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800c73c:	2201      	movs	r2, #1
 800c73e:	f203 418c 	addw	r1, r3, #1164	; 0x48c
 800c742:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800c746:	f002 ff28 	bl	800f59a <RegionCommonChanMaskCopy>
            break;
 800c74a:	e7cf      	b.n	800c6ec <RegionAS923InitDefaults+0x28>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800c74c:	4b0c      	ldr	r3, [pc, #48]	; (800c780 <RegionAS923InitDefaults+0xbc>)
 800c74e:	6818      	ldr	r0, [r3, #0]
 800c750:	2300      	movs	r3, #0
 800c752:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800c754:	6103      	str	r3, [r0, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800c756:	2201      	movs	r2, #1
 800c758:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800c75c:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800c760:	f002 ff1b 	bl	800f59a <RegionCommonChanMaskCopy>
            break;
 800c764:	e7c2      	b.n	800c6ec <RegionAS923InitDefaults+0x28>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800c766:	4b06      	ldr	r3, [pc, #24]	; (800c780 <RegionAS923InitDefaults+0xbc>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 800c76e:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 800c772:	430a      	orrs	r2, r1
 800c774:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 800c778:	e7b8      	b.n	800c6ec <RegionAS923InitDefaults+0x28>
 800c77a:	bf00      	nop
 800c77c:	2000142c 	.word	0x2000142c
 800c780:	20001430 	.word	0x20001430
 800c784:	08017484 	.word	0x08017484
 800c788:	3706ea00 	.word	0x3706ea00

0800c78c <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800c78c:	b508      	push	{r3, lr}
#if defined( REGION_AS923 )
    switch( phyAttribute )
 800c78e:	290a      	cmp	r1, #10
 800c790:	d84b      	bhi.n	800c82a <RegionAS923Verify+0x9e>
 800c792:	e8df f001 	tbb	[pc, r1]
 800c796:	4a06      	.short	0x4a06
 800c798:	0a4a4a4a 	.word	0x0a4a4a4a
 800c79c:	404a2a20 	.word	0x404a2a20
 800c7a0:	40          	.byte	0x40
 800c7a1:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800c7a2:	6800      	ldr	r0, [r0, #0]
 800c7a4:	f7ff fe1c 	bl	800c3e0 <VerifyRfFreq>
 800c7a8:	e040      	b.n	800c82c <RegionAS923Verify+0xa0>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 800c7aa:	7883      	ldrb	r3, [r0, #2]
 800c7ac:	b94b      	cbnz	r3, 800c7c2 <RegionAS923Verify+0x36>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE );
 800c7ae:	2207      	movs	r2, #7
 800c7b0:	2100      	movs	r1, #0
 800c7b2:	f990 0000 	ldrsb.w	r0, [r0]
 800c7b6:	f002 fe7e 	bl	800f4b6 <RegionCommonValueInRange>
 800c7ba:	3800      	subs	r0, #0
 800c7bc:	bf18      	it	ne
 800c7be:	2001      	movne	r0, #1
 800c7c0:	e034      	b.n	800c82c <RegionAS923Verify+0xa0>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE );
 800c7c2:	2207      	movs	r2, #7
 800c7c4:	2102      	movs	r1, #2
 800c7c6:	f990 0000 	ldrsb.w	r0, [r0]
 800c7ca:	f002 fe74 	bl	800f4b6 <RegionCommonValueInRange>
 800c7ce:	3800      	subs	r0, #0
 800c7d0:	bf18      	it	ne
 800c7d2:	2001      	movne	r0, #1
 800c7d4:	e02a      	b.n	800c82c <RegionAS923Verify+0xa0>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800c7d6:	2205      	movs	r2, #5
 800c7d8:	2100      	movs	r1, #0
 800c7da:	f990 0000 	ldrsb.w	r0, [r0]
 800c7de:	f002 fe6a 	bl	800f4b6 <RegionCommonValueInRange>
 800c7e2:	3800      	subs	r0, #0
 800c7e4:	bf18      	it	ne
 800c7e6:	2001      	movne	r0, #1
 800c7e8:	e020      	b.n	800c82c <RegionAS923Verify+0xa0>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 800c7ea:	7843      	ldrb	r3, [r0, #1]
 800c7ec:	b94b      	cbnz	r3, 800c802 <RegionAS923Verify+0x76>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 800c7ee:	2207      	movs	r2, #7
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	f990 0000 	ldrsb.w	r0, [r0]
 800c7f6:	f002 fe5e 	bl	800f4b6 <RegionCommonValueInRange>
 800c7fa:	3800      	subs	r0, #0
 800c7fc:	bf18      	it	ne
 800c7fe:	2001      	movne	r0, #1
 800c800:	e014      	b.n	800c82c <RegionAS923Verify+0xa0>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 800c802:	2207      	movs	r2, #7
 800c804:	2102      	movs	r1, #2
 800c806:	f990 0000 	ldrsb.w	r0, [r0]
 800c80a:	f002 fe54 	bl	800f4b6 <RegionCommonValueInRange>
 800c80e:	3800      	subs	r0, #0
 800c810:	bf18      	it	ne
 800c812:	2001      	movne	r0, #1
 800c814:	e00a      	b.n	800c82c <RegionAS923Verify+0xa0>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 800c816:	2207      	movs	r2, #7
 800c818:	2100      	movs	r1, #0
 800c81a:	f990 0000 	ldrsb.w	r0, [r0]
 800c81e:	f002 fe4a 	bl	800f4b6 <RegionCommonValueInRange>
 800c822:	3800      	subs	r0, #0
 800c824:	bf18      	it	ne
 800c826:	2001      	movne	r0, #1
 800c828:	e000      	b.n	800c82c <RegionAS923Verify+0xa0>
{
 800c82a:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_AS923 */
}
 800c82c:	bd08      	pop	{r3, pc}
	...

0800c830 <RegionAS923ChanMaskSet>:
    }
#endif /* REGION_AS923 */
}

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800c830:	b508      	push	{r3, lr}
#if defined( REGION_AS923 )
    switch( chanMaskSet->ChannelsMaskType )
 800c832:	7903      	ldrb	r3, [r0, #4]
 800c834:	b11b      	cbz	r3, 800c83e <RegionAS923ChanMaskSet+0xe>
 800c836:	2b01      	cmp	r3, #1
 800c838:	d00b      	beq.n	800c852 <RegionAS923ChanMaskSet+0x22>
 800c83a:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_AS923 */
}
 800c83c:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800c83e:	4b0a      	ldr	r3, [pc, #40]	; (800c868 <RegionAS923ChanMaskSet+0x38>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	2201      	movs	r2, #1
 800c844:	6801      	ldr	r1, [r0, #0]
 800c846:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800c84a:	f002 fea6 	bl	800f59a <RegionCommonChanMaskCopy>
    return true;
 800c84e:	2001      	movs	r0, #1
            break;
 800c850:	e7f4      	b.n	800c83c <RegionAS923ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800c852:	4b05      	ldr	r3, [pc, #20]	; (800c868 <RegionAS923ChanMaskSet+0x38>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2201      	movs	r2, #1
 800c858:	6801      	ldr	r1, [r0, #0]
 800c85a:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 800c85e:	f002 fe9c 	bl	800f59a <RegionCommonChanMaskCopy>
    return true;
 800c862:	2001      	movs	r0, #1
            break;
 800c864:	e7ea      	b.n	800c83c <RegionAS923ChanMaskSet+0xc>
 800c866:	bf00      	nop
 800c868:	20001430 	.word	0x20001430

0800c86c <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800c86c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c86e:	b083      	sub	sp, #12
 800c870:	460e      	mov	r6, r1
 800c872:	4617      	mov	r7, r2
 800c874:	461c      	mov	r4, r3
#if defined( REGION_AS923 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 800c876:	2807      	cmp	r0, #7
 800c878:	bfa8      	it	ge
 800c87a:	2007      	movge	r0, #7
 800c87c:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAS923 );
 800c87e:	4913      	ldr	r1, [pc, #76]	; (800c8cc <RegionAS923ComputeRxWindowParameters+0x60>)
 800c880:	f003 f8d4 	bl	800fa2c <RegionCommonGetBandwidth>
 800c884:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800c886:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800c88a:	2b07      	cmp	r3, #7
 800c88c:	d017      	beq.n	800c8be <RegionAS923ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 800c88e:	4a0f      	ldr	r2, [pc, #60]	; (800c8cc <RegionAS923ComputeRxWindowParameters+0x60>)
 800c890:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c894:	4a0e      	ldr	r2, [pc, #56]	; (800c8d0 <RegionAS923ComputeRxWindowParameters+0x64>)
 800c896:	5cd0      	ldrb	r0, [r2, r3]
 800c898:	f002 ff98 	bl	800f7cc <RegionCommonComputeSymbolTimeLoRa>
 800c89c:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800c89e:	4b0d      	ldr	r3, [pc, #52]	; (800c8d4 <RegionAS923ComputeRxWindowParameters+0x68>)
 800c8a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8a2:	4798      	blx	r3
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	f104 020c 	add.w	r2, r4, #12
 800c8aa:	9201      	str	r2, [sp, #4]
 800c8ac:	3408      	adds	r4, #8
 800c8ae:	9400      	str	r4, [sp, #0]
 800c8b0:	463a      	mov	r2, r7
 800c8b2:	4631      	mov	r1, r6
 800c8b4:	4628      	mov	r0, r5
 800c8b6:	f002 ff97 	bl	800f7e8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AS923 */
}
 800c8ba:	b003      	add	sp, #12
 800c8bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 800c8be:	4a04      	ldr	r2, [pc, #16]	; (800c8d0 <RegionAS923ComputeRxWindowParameters+0x64>)
 800c8c0:	5cd0      	ldrb	r0, [r2, r3]
 800c8c2:	f002 ff8b 	bl	800f7dc <RegionCommonComputeSymbolTimeFsk>
 800c8c6:	4605      	mov	r5, r0
 800c8c8:	e7e9      	b.n	800c89e <RegionAS923ComputeRxWindowParameters+0x32>
 800c8ca:	bf00      	nop
 800c8cc:	08017adc 	.word	0x08017adc
 800c8d0:	08017afc 	.word	0x08017afc
 800c8d4:	08018318 	.word	0x08018318

0800c8d8 <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800c8d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8dc:	b08a      	sub	sp, #40	; 0x28
 800c8de:	4604      	mov	r4, r0
 800c8e0:	460f      	mov	r7, r1
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800c8e2:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800c8e6:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800c8ea:	4b37      	ldr	r3, [pc, #220]	; (800c9c8 <RegionAS923RxConfig+0xf0>)
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	4798      	blx	r3
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	d167      	bne.n	800c9c4 <RegionAS923RxConfig+0xec>
 800c8f4:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800c8f6:	7ce3      	ldrb	r3, [r4, #19]
 800c8f8:	b983      	cbnz	r3, 800c91c <RegionAS923RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800c8fa:	4b34      	ldr	r3, [pc, #208]	; (800c9cc <RegionAS923RxConfig+0xf4>)
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	7823      	ldrb	r3, [r4, #0]
 800c900:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800c904:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800c908:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c90c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c910:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800c914:	f1b8 0f00 	cmp.w	r8, #0
 800c918:	d100      	bne.n	800c91c <RegionAS923RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800c91a:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 800c91c:	4b2c      	ldr	r3, [pc, #176]	; (800c9d0 <RegionAS923RxConfig+0xf8>)
 800c91e:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800c922:	4b29      	ldr	r3, [pc, #164]	; (800c9c8 <RegionAS923RxConfig+0xf0>)
 800c924:	68db      	ldr	r3, [r3, #12]
 800c926:	4640      	mov	r0, r8
 800c928:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800c92a:	2d07      	cmp	r5, #7
 800c92c:	d02b      	beq.n	800c986 <RegionAS923RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800c92e:	4b26      	ldr	r3, [pc, #152]	; (800c9c8 <RegionAS923RxConfig+0xf0>)
 800c930:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800c934:	7ca3      	ldrb	r3, [r4, #18]
 800c936:	9309      	str	r3, [sp, #36]	; 0x24
 800c938:	2601      	movs	r6, #1
 800c93a:	9608      	str	r6, [sp, #32]
 800c93c:	2300      	movs	r3, #0
 800c93e:	9307      	str	r3, [sp, #28]
 800c940:	9306      	str	r3, [sp, #24]
 800c942:	9305      	str	r3, [sp, #20]
 800c944:	9304      	str	r3, [sp, #16]
 800c946:	9303      	str	r3, [sp, #12]
 800c948:	8922      	ldrh	r2, [r4, #8]
 800c94a:	9202      	str	r2, [sp, #8]
 800c94c:	2208      	movs	r2, #8
 800c94e:	9201      	str	r2, [sp, #4]
 800c950:	9300      	str	r3, [sp, #0]
 800c952:	4633      	mov	r3, r6
 800c954:	464a      	mov	r2, r9
 800c956:	78a1      	ldrb	r1, [r4, #2]
 800c958:	4630      	mov	r0, r6
 800c95a:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800c95c:	7c63      	ldrb	r3, [r4, #17]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d02d      	beq.n	800c9be <RegionAS923RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 800c962:	4b1c      	ldr	r3, [pc, #112]	; (800c9d4 <RegionAS923RxConfig+0xfc>)
 800c964:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800c966:	4b18      	ldr	r3, [pc, #96]	; (800c9c8 <RegionAS923RxConfig+0xf0>)
 800c968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c96a:	310d      	adds	r1, #13
 800c96c:	b2c9      	uxtb	r1, r1
 800c96e:	4630      	mov	r0, r6
 800c970:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800c972:	462a      	mov	r2, r5
 800c974:	4641      	mov	r1, r8
 800c976:	7ce0      	ldrb	r0, [r4, #19]
 800c978:	f003 f86a 	bl	800fa50 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800c97c:	703d      	strb	r5, [r7, #0]
    return true;
 800c97e:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 800c980:	b00a      	add	sp, #40	; 0x28
 800c982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800c986:	4b10      	ldr	r3, [pc, #64]	; (800c9c8 <RegionAS923RxConfig+0xf0>)
 800c988:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800c98c:	7ca3      	ldrb	r3, [r4, #18]
 800c98e:	9309      	str	r3, [sp, #36]	; 0x24
 800c990:	2000      	movs	r0, #0
 800c992:	9008      	str	r0, [sp, #32]
 800c994:	9007      	str	r0, [sp, #28]
 800c996:	9006      	str	r0, [sp, #24]
 800c998:	2301      	movs	r3, #1
 800c99a:	9305      	str	r3, [sp, #20]
 800c99c:	9004      	str	r0, [sp, #16]
 800c99e:	9003      	str	r0, [sp, #12]
 800c9a0:	8923      	ldrh	r3, [r4, #8]
 800c9a2:	9302      	str	r3, [sp, #8]
 800c9a4:	2305      	movs	r3, #5
 800c9a6:	9301      	str	r3, [sp, #4]
 800c9a8:	4b0b      	ldr	r3, [pc, #44]	; (800c9d8 <RegionAS923RxConfig+0x100>)
 800c9aa:	9300      	str	r3, [sp, #0]
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c9b2:	fb02 f209 	mul.w	r2, r2, r9
 800c9b6:	f24c 3150 	movw	r1, #50000	; 0xc350
 800c9ba:	47d0      	blx	sl
 800c9bc:	e7ce      	b.n	800c95c <RegionAS923RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 800c9be:	4b07      	ldr	r3, [pc, #28]	; (800c9dc <RegionAS923RxConfig+0x104>)
 800c9c0:	5d59      	ldrb	r1, [r3, r5]
 800c9c2:	e7d0      	b.n	800c966 <RegionAS923RxConfig+0x8e>
        return false;
 800c9c4:	2000      	movs	r0, #0
 800c9c6:	e7db      	b.n	800c980 <RegionAS923RxConfig+0xa8>
 800c9c8:	08018318 	.word	0x08018318
 800c9cc:	20001430 	.word	0x20001430
 800c9d0:	08017afc 	.word	0x08017afc
 800c9d4:	08017b1c 	.word	0x08017b1c
 800c9d8:	00014585 	.word	0x00014585
 800c9dc:	08017b0c 	.word	0x08017b0c

0800c9e0 <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800c9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e4:	b08d      	sub	sp, #52	; 0x34
 800c9e6:	4604      	mov	r4, r0
 800c9e8:	460f      	mov	r7, r1
 800c9ea:	4690      	mov	r8, r2
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 800c9ec:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c9f0:	4a42      	ldr	r2, [pc, #264]	; (800cafc <RegionAS923TxConfig+0x11c>)
 800c9f2:	f912 a003 	ldrsb.w	sl, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800c9f6:	4b42      	ldr	r3, [pc, #264]	; (800cb00 <RegionAS923TxConfig+0x120>)
 800c9f8:	6819      	ldr	r1, [r3, #0]
 800c9fa:	4d42      	ldr	r5, [pc, #264]	; (800cb04 <RegionAS923TxConfig+0x124>)
 800c9fc:	682b      	ldr	r3, [r5, #0]
 800c9fe:	7802      	ldrb	r2, [r0, #0]
 800ca00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800ca04:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800ca08:	7a53      	ldrb	r3, [r2, #9]
 800ca0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ca0e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800ca12:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800ca16:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800ca1a:	f003 f802 	bl	800fa22 <RegionCommonLimitTxPower>
 800ca1e:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAS923 );
 800ca20:	4939      	ldr	r1, [pc, #228]	; (800cb08 <RegionAS923TxConfig+0x128>)
 800ca22:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ca26:	f003 f801 	bl	800fa2c <RegionCommonGetBandwidth>
 800ca2a:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800ca2c:	68a2      	ldr	r2, [r4, #8]
 800ca2e:	6861      	ldr	r1, [r4, #4]
 800ca30:	4630      	mov	r0, r6
 800ca32:	f002 ff13 	bl	800f85c <RegionCommonComputeTxPower>
 800ca36:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800ca38:	4b34      	ldr	r3, [pc, #208]	; (800cb0c <RegionAS923TxConfig+0x12c>)
 800ca3a:	68da      	ldr	r2, [r3, #12]
 800ca3c:	6829      	ldr	r1, [r5, #0]
 800ca3e:	7823      	ldrb	r3, [r4, #0]
 800ca40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ca44:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800ca48:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800ca4a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800ca4e:	2b07      	cmp	r3, #7
 800ca50:	d031      	beq.n	800cab6 <RegionAS923TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800ca52:	4b2e      	ldr	r3, [pc, #184]	; (800cb0c <RegionAS923TxConfig+0x12c>)
 800ca54:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800ca58:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800ca5c:	9308      	str	r3, [sp, #32]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	9207      	str	r2, [sp, #28]
 800ca62:	9206      	str	r2, [sp, #24]
 800ca64:	9205      	str	r2, [sp, #20]
 800ca66:	2501      	movs	r5, #1
 800ca68:	9504      	str	r5, [sp, #16]
 800ca6a:	9203      	str	r2, [sp, #12]
 800ca6c:	2308      	movs	r3, #8
 800ca6e:	9302      	str	r3, [sp, #8]
 800ca70:	9501      	str	r5, [sp, #4]
 800ca72:	f8cd a000 	str.w	sl, [sp]
 800ca76:	464b      	mov	r3, r9
 800ca78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ca7a:	4628      	mov	r0, r5
 800ca7c:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800ca7e:	4b21      	ldr	r3, [pc, #132]	; (800cb04 <RegionAS923TxConfig+0x124>)
 800ca80:	681a      	ldr	r2, [r3, #0]
 800ca82:	7823      	ldrb	r3, [r4, #0]
 800ca84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ca88:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800ca8c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ca90:	f003 f80e 	bl	800fab0 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800ca94:	89a1      	ldrh	r1, [r4, #12]
 800ca96:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ca9a:	f7ff fcb5 	bl	800c408 <GetTimeOnAir>
 800ca9e:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800caa2:	4b1a      	ldr	r3, [pc, #104]	; (800cb0c <RegionAS923TxConfig+0x12c>)
 800caa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caa6:	7b21      	ldrb	r1, [r4, #12]
 800caa8:	4628      	mov	r0, r5
 800caaa:	4798      	blx	r3

    *txPower = txPowerLimited;
 800caac:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_AS923 */
}
 800caae:	2001      	movs	r0, #1
 800cab0:	b00d      	add	sp, #52	; 0x34
 800cab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800cab6:	4b15      	ldr	r3, [pc, #84]	; (800cb0c <RegionAS923TxConfig+0x12c>)
 800cab8:	69dd      	ldr	r5, [r3, #28]
 800caba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cabe:	fb03 f30a 	mul.w	r3, r3, sl
 800cac2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800cac6:	9208      	str	r2, [sp, #32]
 800cac8:	f04f 0b00 	mov.w	fp, #0
 800cacc:	f8cd b01c 	str.w	fp, [sp, #28]
 800cad0:	f8cd b018 	str.w	fp, [sp, #24]
 800cad4:	f8cd b014 	str.w	fp, [sp, #20]
 800cad8:	2201      	movs	r2, #1
 800cada:	9204      	str	r2, [sp, #16]
 800cadc:	f8cd b00c 	str.w	fp, [sp, #12]
 800cae0:	2205      	movs	r2, #5
 800cae2:	9202      	str	r2, [sp, #8]
 800cae4:	f8cd b004 	str.w	fp, [sp, #4]
 800cae8:	9300      	str	r3, [sp, #0]
 800caea:	464b      	mov	r3, r9
 800caec:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800caf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800caf2:	4658      	mov	r0, fp
 800caf4:	47a8      	blx	r5
        modem = MODEM_FSK;
 800caf6:	465d      	mov	r5, fp
 800caf8:	e7c1      	b.n	800ca7e <RegionAS923TxConfig+0x9e>
 800cafa:	bf00      	nop
 800cafc:	08017afc 	.word	0x08017afc
 800cb00:	2000142c 	.word	0x2000142c
 800cb04:	20001430 	.word	0x20001430
 800cb08:	08017adc 	.word	0x08017adc
 800cb0c:	08018318 	.word	0x08018318

0800cb10 <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800cb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb14:	b08f      	sub	sp, #60	; 0x3c
 800cb16:	4607      	mov	r7, r0
 800cb18:	468b      	mov	fp, r1
 800cb1a:	4692      	mov	sl, r2
 800cb1c:	4699      	mov	r9, r3
    uint8_t status = 0x07;
#if defined( REGION_AS923 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800cb1e:	2500      	movs	r5, #0
 800cb20:	950c      	str	r5, [sp, #48]	; 0x30
 800cb22:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800cb26:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800cb2a:	f04f 0807 	mov.w	r8, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800cb2e:	e02d      	b.n	800cb8c <RegionAS923LinkAdrReq+0x7c>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 800cb30:	2400      	movs	r4, #0
        status = 0x07;
 800cb32:	f04f 0807 	mov.w	r8, #7
 800cb36:	e00f      	b.n	800cb58 <RegionAS923LinkAdrReq+0x48>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800cb38:	4a56      	ldr	r2, [pc, #344]	; (800cc94 <RegionAS923LinkAdrReq+0x184>)
 800cb3a:	6812      	ldr	r2, [r2, #0]
 800cb3c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800cb40:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800cb44:	b132      	cbz	r2, 800cb54 <RegionAS923LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800cb46:	2201      	movs	r2, #1
 800cb48:	40a2      	lsls	r2, r4
 800cb4a:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800cb4e:	430a      	orrs	r2, r1
 800cb50:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 800cb54:	3401      	adds	r4, #1
 800cb56:	b2e4      	uxtb	r4, r4
 800cb58:	2c0f      	cmp	r4, #15
 800cb5a:	d817      	bhi.n	800cb8c <RegionAS923LinkAdrReq+0x7c>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800cb5c:	2b06      	cmp	r3, #6
 800cb5e:	d0eb      	beq.n	800cb38 <RegionAS923LinkAdrReq+0x28>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800cb60:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 800cb64:	4126      	asrs	r6, r4
 800cb66:	f016 0f01 	tst.w	r6, #1
 800cb6a:	d0f3      	beq.n	800cb54 <RegionAS923LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800cb6c:	4a49      	ldr	r2, [pc, #292]	; (800cc94 <RegionAS923LinkAdrReq+0x184>)
 800cb6e:	6812      	ldr	r2, [r2, #0]
 800cb70:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800cb74:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800cb78:	2a00      	cmp	r2, #0
 800cb7a:	d1eb      	bne.n	800cb54 <RegionAS923LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800cb7c:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
 800cb80:	e7e8      	b.n	800cb54 <RegionAS923LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800cb82:	f04f 0806 	mov.w	r8, #6
 800cb86:	e001      	b.n	800cb8c <RegionAS923LinkAdrReq+0x7c>
            status &= 0xFE; // Channel mask KO
 800cb88:	f04f 0806 	mov.w	r8, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800cb8c:	7a3b      	ldrb	r3, [r7, #8]
 800cb8e:	42ab      	cmp	r3, r5
 800cb90:	d919      	bls.n	800cbc6 <RegionAS923LinkAdrReq+0xb6>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	a90c      	add	r1, sp, #48	; 0x30
 800cb96:	4428      	add	r0, r5
 800cb98:	f002 fdb0 	bl	800f6fc <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800cb9c:	b198      	cbz	r0, 800cbc6 <RegionAS923LinkAdrReq+0xb6>
        bytesProcessed += nextIndex;
 800cb9e:	4405      	add	r5, r0
 800cba0:	b2ed      	uxtb	r5, r5
        chMask = linkAdrParams.ChMask;
 800cba2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800cba6:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800cbaa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800cbae:	b90b      	cbnz	r3, 800cbb4 <RegionAS923LinkAdrReq+0xa4>
 800cbb0:	2a00      	cmp	r2, #0
 800cbb2:	d0e6      	beq.n	800cb82 <RegionAS923LinkAdrReq+0x72>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800cbb4:	1e5a      	subs	r2, r3, #1
 800cbb6:	b2d2      	uxtb	r2, r2
 800cbb8:	2a04      	cmp	r2, #4
 800cbba:	d9e5      	bls.n	800cb88 <RegionAS923LinkAdrReq+0x78>
 800cbbc:	2b06      	cmp	r3, #6
 800cbbe:	d9b7      	bls.n	800cb30 <RegionAS923LinkAdrReq+0x20>
            status &= 0xFE; // Channel mask KO
 800cbc0:	f04f 0806 	mov.w	r8, #6
 800cbc4:	e7e2      	b.n	800cb8c <RegionAS923LinkAdrReq+0x7c>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800cbc6:	2302      	movs	r3, #2
 800cbc8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800cbcc:	7a7b      	ldrb	r3, [r7, #9]
 800cbce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionAS923GetPhyParam( &getPhy );
 800cbd2:	a80a      	add	r0, sp, #40	; 0x28
 800cbd4:	f7ff fc4a 	bl	800c46c <RegionAS923GetPhyParam>

    linkAdrVerifyParams.Status = status;
 800cbd8:	f88d 8008 	strb.w	r8, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800cbdc:	7abb      	ldrb	r3, [r7, #10]
 800cbde:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800cbe2:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800cbe6:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800cbea:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800cbee:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800cbf2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800cbf6:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800cbfa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cbfe:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800cc02:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800cc06:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800cc0a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800cc0e:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 800cc12:	2310      	movs	r3, #16
 800cc14:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800cc18:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800cc1c:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800cc1e:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 800cc22:	2307      	movs	r3, #7
 800cc24:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800cc28:	4a1a      	ldr	r2, [pc, #104]	; (800cc94 <RegionAS923LinkAdrReq+0x184>)
 800cc2a:	6812      	ldr	r2, [r2, #0]
 800cc2c:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 800cc2e:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 800cc32:	2300      	movs	r3, #0
 800cc34:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800cc3c:	ab0c      	add	r3, sp, #48	; 0x30
 800cc3e:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800cc42:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800cc46:	a801      	add	r0, sp, #4
 800cc48:	f002 fd74 	bl	800f734 <RegionCommonLinkAdrReqVerifyParams>
 800cc4c:	4604      	mov	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800cc4e:	2807      	cmp	r0, #7
 800cc50:	d011      	beq.n	800cc76 <RegionAS923LinkAdrReq+0x166>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800cc52:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800cc56:	f88b 3000 	strb.w	r3, [fp]
    *txPowOut = linkAdrParams.TxPower;
 800cc5a:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800cc5e:	f88a 3000 	strb.w	r3, [sl]
    *nbRepOut = linkAdrParams.NbRep;
 800cc62:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800cc66:	f889 3000 	strb.w	r3, [r9]
    *nbBytesParsed = bytesProcessed;
 800cc6a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cc6c:	701d      	strb	r5, [r3, #0]

#endif /* REGION_AS923 */
    return status;
}
 800cc6e:	4620      	mov	r0, r4
 800cc70:	b00f      	add	sp, #60	; 0x3c
 800cc72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800cc76:	4e07      	ldr	r6, [pc, #28]	; (800cc94 <RegionAS923LinkAdrReq+0x184>)
 800cc78:	6830      	ldr	r0, [r6, #0]
 800cc7a:	220c      	movs	r2, #12
 800cc7c:	2100      	movs	r1, #0
 800cc7e:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800cc82:	f007 fc16 	bl	80144b2 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800cc86:	6833      	ldr	r3, [r6, #0]
 800cc88:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800cc8c:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
 800cc90:	e7df      	b.n	800cc52 <RegionAS923LinkAdrReq+0x142>
 800cc92:	bf00      	nop
 800cc94:	20001430 	.word	0x20001430

0800cc98 <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800cc98:	b538      	push	{r3, r4, r5, lr}
 800cc9a:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_AS923 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800cc9c:	6840      	ldr	r0, [r0, #4]
 800cc9e:	f7ff fb9f 	bl	800c3e0 <VerifyRfFreq>
 800cca2:	b1a0      	cbz	r0, 800ccce <RegionAS923RxParamSetupReq+0x36>
    uint8_t status = 0x07;
 800cca4:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 800cca6:	2207      	movs	r2, #7
 800cca8:	2100      	movs	r1, #0
 800ccaa:	f994 0000 	ldrsb.w	r0, [r4]
 800ccae:	f002 fc02 	bl	800f4b6 <RegionCommonValueInRange>
 800ccb2:	b908      	cbnz	r0, 800ccb8 <RegionAS923RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800ccb4:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 800ccb8:	2207      	movs	r2, #7
 800ccba:	2100      	movs	r1, #0
 800ccbc:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ccc0:	f002 fbf9 	bl	800f4b6 <RegionCommonValueInRange>
 800ccc4:	b908      	cbnz	r0, 800ccca <RegionAS923RxParamSetupReq+0x32>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800ccc6:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_AS923 */
    return status;
}
 800ccca:	4628      	mov	r0, r5
 800cccc:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800ccce:	2506      	movs	r5, #6
 800ccd0:	e7e9      	b.n	800cca6 <RegionAS923RxParamSetupReq+0xe>

0800ccd2 <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Accept the request
    return 0;
}
 800ccd2:	2000      	movs	r0, #0
 800ccd4:	4770      	bx	lr
	...

0800ccd8 <RegionAS923DlChannelReq>:

int8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800ccd8:	b510      	push	{r4, lr}
 800ccda:	4604      	mov	r4, r0
    uint8_t status = 0x03;

#if defined( REGION_AS923 )
    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 800ccdc:	6840      	ldr	r0, [r0, #4]
 800ccde:	f7ff fb7f 	bl	800c3e0 <VerifyRfFreq>
 800cce2:	b170      	cbz	r0, 800cd02 <RegionAS923DlChannelReq+0x2a>
    uint8_t status = 0x03;
 800cce4:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800cce6:	4b0b      	ldr	r3, [pc, #44]	; (800cd14 <RegionAS923DlChannelReq+0x3c>)
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	7823      	ldrb	r3, [r4, #0]
 800ccec:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800ccf0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800ccf4:	b909      	cbnz	r1, 800ccfa <RegionAS923DlChannelReq+0x22>
    {
        status &= 0xFD;
 800ccf6:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 800ccfa:	2803      	cmp	r0, #3
 800ccfc:	d003      	beq.n	800cd06 <RegionAS923DlChannelReq+0x2e>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_AS923 */
    return status;
}
 800ccfe:	b240      	sxtb	r0, r0
 800cd00:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800cd02:	2002      	movs	r0, #2
 800cd04:	e7ef      	b.n	800cce6 <RegionAS923DlChannelReq+0xe>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800cd06:	6861      	ldr	r1, [r4, #4]
 800cd08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cd0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cd10:	6059      	str	r1, [r3, #4]
 800cd12:	e7f4      	b.n	800ccfe <RegionAS923DlChannelReq+0x26>
 800cd14:	20001430 	.word	0x20001430

0800cd18 <RegionAS923AlternateDr>:
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
#else
    return -1;
#endif /* REGION_AS923 */
}
 800cd18:	2002      	movs	r0, #2
 800cd1a:	4770      	bx	lr

0800cd1c <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800cd1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd1e:	b097      	sub	sp, #92	; 0x5c
 800cd20:	4604      	mov	r4, r0
 800cd22:	460f      	mov	r7, r1
 800cd24:	4616      	mov	r6, r2
 800cd26:	461d      	mov	r5, r3
#if defined( REGION_AS923 )
    uint8_t nbEnabledChannels = 0;
 800cd28:	2100      	movs	r1, #0
 800cd2a:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800cd2e:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 800cd32:	9111      	str	r1, [sp, #68]	; 0x44
 800cd34:	9112      	str	r1, [sp, #72]	; 0x48
 800cd36:	9113      	str	r1, [sp, #76]	; 0x4c
 800cd38:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = AS923_JOIN_CHANNELS;
 800cd3a:	2303      	movs	r3, #3
 800cd3c:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800cd40:	4b32      	ldr	r3, [pc, #200]	; (800ce0c <RegionAS923NextChannel+0xf0>)
 800cd42:	6818      	ldr	r0, [r3, #0]
 800cd44:	2201      	movs	r2, #1
 800cd46:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800cd4a:	f002 fc10 	bl	800f56e <RegionCommonCountChannels>
 800cd4e:	b938      	cbnz	r0, 800cd60 <RegionAS923NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 800cd50:	4b2e      	ldr	r3, [pc, #184]	; (800ce0c <RegionAS923NextChannel+0xf0>)
 800cd52:	681a      	ldr	r2, [r3, #0]
 800cd54:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800cd58:	f043 0303 	orr.w	r3, r3, #3
 800cd5c:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800cd60:	7a63      	ldrb	r3, [r4, #9]
 800cd62:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800cd66:	7a23      	ldrb	r3, [r4, #8]
 800cd68:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800cd6c:	4b27      	ldr	r3, [pc, #156]	; (800ce0c <RegionAS923NextChannel+0xf0>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f503 6290 	add.w	r2, r3, #1152	; 0x480
 800cd74:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800cd76:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800cd78:	4b25      	ldr	r3, [pc, #148]	; (800ce10 <RegionAS923NextChannel+0xf4>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 800cd7e:	2310      	movs	r3, #16
 800cd80:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800cd84:	f10d 030a 	add.w	r3, sp, #10
 800cd88:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800cd8a:	6823      	ldr	r3, [r4, #0]
 800cd8c:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800cd8e:	6863      	ldr	r3, [r4, #4]
 800cd90:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800cd92:	7aa3      	ldrb	r3, [r4, #10]
 800cd94:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;
 800cd98:	2301      	movs	r3, #1
 800cd9a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800cd9e:	ab0c      	add	r3, sp, #48	; 0x30
 800cda0:	6921      	ldr	r1, [r4, #16]
 800cda2:	68e0      	ldr	r0, [r4, #12]
 800cda4:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800cda8:	7d23      	ldrb	r3, [r4, #20]
 800cdaa:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800cdae:	8ae1      	ldrh	r1, [r4, #22]
 800cdb0:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800cdb4:	f7ff fb28 	bl	800c408 <GetTimeOnAir>
 800cdb8:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800cdba:	ab03      	add	r3, sp, #12
 800cdbc:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800cdbe:	9601      	str	r6, [sp, #4]
 800cdc0:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800cdc4:	9300      	str	r3, [sp, #0]
 800cdc6:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800cdca:	aa11      	add	r2, sp, #68	; 0x44
 800cdcc:	4629      	mov	r1, r5
 800cdce:	a809      	add	r0, sp, #36	; 0x24
 800cdd0:	f002 fdc0 	bl	800f954 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800cdd4:	4604      	mov	r4, r0
 800cdd6:	b120      	cbz	r0, 800cde2 <RegionAS923NextChannel+0xc6>
#else
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
#endif
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800cdd8:	280c      	cmp	r0, #12
 800cdda:	d00d      	beq.n	800cdf8 <RegionAS923NextChannel+0xdc>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 800cddc:	4620      	mov	r0, r4
 800cdde:	b017      	add	sp, #92	; 0x5c
 800cde0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800cde2:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800cde6:	3901      	subs	r1, #1
 800cde8:	f007 fb40 	bl	801446c <randr>
 800cdec:	ab16      	add	r3, sp, #88	; 0x58
 800cdee:	4418      	add	r0, r3
 800cdf0:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800cdf4:	703b      	strb	r3, [r7, #0]
 800cdf6:	e7f1      	b.n	800cddc <RegionAS923NextChannel+0xc0>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 800cdf8:	4b04      	ldr	r3, [pc, #16]	; (800ce0c <RegionAS923NextChannel+0xf0>)
 800cdfa:	681a      	ldr	r2, [r3, #0]
 800cdfc:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800ce00:	f043 0303 	orr.w	r3, r3, #3
 800ce04:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
 800ce08:	e7e8      	b.n	800cddc <RegionAS923NextChannel+0xc0>
 800ce0a:	bf00      	nop
 800ce0c:	20001430 	.word	0x20001430
 800ce10:	2000142c 	.word	0x2000142c

0800ce14 <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800ce14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined( REGION_AS923 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800ce16:	7905      	ldrb	r5, [r0, #4]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 800ce18:	2d01      	cmp	r5, #1
 800ce1a:	d94b      	bls.n	800ceb4 <RegionAS923ChannelAdd+0xa0>
 800ce1c:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= AS923_MAX_NB_CHANNELS )
 800ce1e:	2d0f      	cmp	r5, #15
 800ce20:	d84a      	bhi.n	800ceb8 <RegionAS923ChannelAdd+0xa4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 800ce22:	6803      	ldr	r3, [r0, #0]
 800ce24:	7a18      	ldrb	r0, [r3, #8]
 800ce26:	f340 0003 	sbfx	r0, r0, #0, #4
 800ce2a:	2207      	movs	r2, #7
 800ce2c:	2100      	movs	r1, #0
 800ce2e:	b240      	sxtb	r0, r0
 800ce30:	f002 fb41 	bl	800f4b6 <RegionCommonValueInRange>
 800ce34:	2800      	cmp	r0, #0
 800ce36:	d039      	beq.n	800ceac <RegionAS923ChannelAdd+0x98>
    bool drInvalid = false;
 800ce38:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 800ce3a:	6823      	ldr	r3, [r4, #0]
 800ce3c:	7a18      	ldrb	r0, [r3, #8]
 800ce3e:	f340 1003 	sbfx	r0, r0, #4, #4
 800ce42:	2207      	movs	r2, #7
 800ce44:	2100      	movs	r1, #0
 800ce46:	b240      	sxtb	r0, r0
 800ce48:	f002 fb35 	bl	800f4b6 <RegionCommonValueInRange>
 800ce4c:	b900      	cbnz	r0, 800ce50 <RegionAS923ChannelAdd+0x3c>
    {
        drInvalid = true;
 800ce4e:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800ce50:	6821      	ldr	r1, [r4, #0]
 800ce52:	7a0b      	ldrb	r3, [r1, #8]
 800ce54:	f343 0203 	sbfx	r2, r3, #0, #4
 800ce58:	b252      	sxtb	r2, r2
 800ce5a:	f343 1303 	sbfx	r3, r3, #4, #4
 800ce5e:	b25b      	sxtb	r3, r3
 800ce60:	429a      	cmp	r2, r3
 800ce62:	dd00      	ble.n	800ce66 <RegionAS923ChannelAdd+0x52>
    {
        drInvalid = true;
 800ce64:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 800ce66:	6808      	ldr	r0, [r1, #0]
 800ce68:	f7ff faba 	bl	800c3e0 <VerifyRfFreq>
 800ce6c:	b300      	cbz	r0, 800ceb0 <RegionAS923ChannelAdd+0x9c>
    bool freqInvalid = false;
 800ce6e:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800ce70:	b106      	cbz	r6, 800ce74 <RegionAS923ChannelAdd+0x60>
 800ce72:	bb1b      	cbnz	r3, 800cebc <RegionAS923ChannelAdd+0xa8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800ce74:	bb26      	cbnz	r6, 800cec0 <RegionAS923ChannelAdd+0xac>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800ce76:	bb2b      	cbnz	r3, 800cec4 <RegionAS923ChannelAdd+0xb0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800ce78:	4f13      	ldr	r7, [pc, #76]	; (800cec8 <RegionAS923ChannelAdd+0xb4>)
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	006e      	lsls	r6, r5, #1
 800ce7e:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800ce82:	220c      	movs	r2, #12
 800ce84:	6821      	ldr	r1, [r4, #0]
 800ce86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ce8a:	f007 fafc 	bl	8014486 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 800ce8e:	683a      	ldr	r2, [r7, #0]
 800ce90:	442e      	add	r6, r5
 800ce92:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ce96:	2000      	movs	r0, #0
 800ce98:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	fa03 f505 	lsl.w	r5, r3, r5
 800cea0:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800cea4:	431d      	orrs	r5, r3
 800cea6:	f8a2 5480 	strh.w	r5, [r2, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 800ceaa:	e006      	b.n	800ceba <RegionAS923ChannelAdd+0xa6>
        drInvalid = true;
 800ceac:	2601      	movs	r6, #1
 800ceae:	e7c4      	b.n	800ce3a <RegionAS923ChannelAdd+0x26>
            freqInvalid = true;
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	e7dd      	b.n	800ce70 <RegionAS923ChannelAdd+0x5c>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800ceb4:	2006      	movs	r0, #6
 800ceb6:	e000      	b.n	800ceba <RegionAS923ChannelAdd+0xa6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ceb8:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 800ceba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800cebc:	2006      	movs	r0, #6
 800cebe:	e7fc      	b.n	800ceba <RegionAS923ChannelAdd+0xa6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800cec0:	2005      	movs	r0, #5
 800cec2:	e7fa      	b.n	800ceba <RegionAS923ChannelAdd+0xa6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800cec4:	2004      	movs	r0, #4
 800cec6:	e7f8      	b.n	800ceba <RegionAS923ChannelAdd+0xa6>
 800cec8:	20001430 	.word	0x20001430

0800cecc <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_AS923 )
    uint8_t id = channelRemove->ChannelId;
 800cecc:	7801      	ldrb	r1, [r0, #0]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 800cece:	2901      	cmp	r1, #1
 800ced0:	d911      	bls.n	800cef6 <RegionAS923ChannelsRemove+0x2a>
{
 800ced2:	b510      	push	{r4, lr}
    {
        return false;
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800ced4:	4b09      	ldr	r3, [pc, #36]	; (800cefc <RegionAS923ChannelsRemove+0x30>)
 800ced6:	6818      	ldr	r0, [r3, #0]
 800ced8:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800cedc:	009c      	lsls	r4, r3, #2
 800cede:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800cee2:	2200      	movs	r2, #0
 800cee4:	5102      	str	r2, [r0, r4]
 800cee6:	605a      	str	r2, [r3, #4]
 800cee8:	609a      	str	r2, [r3, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 800ceea:	2210      	movs	r2, #16
 800ceec:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800cef0:	f002 fb23 	bl	800f53a <RegionCommonChanDisable>
#else
    return false;
#endif /* REGION_AS923 */
}
 800cef4:	bd10      	pop	{r4, pc}
        return false;
 800cef6:	2000      	movs	r0, #0
}
 800cef8:	4770      	bx	lr
 800cefa:	bf00      	nop
 800cefc:	20001430 	.word	0x20001430

0800cf00 <RegionAS923ApplyCFList>:
{
 800cf00:	b570      	push	{r4, r5, r6, lr}
 800cf02:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800cf04:	2350      	movs	r3, #80	; 0x50
 800cf06:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800cf0a:	7903      	ldrb	r3, [r0, #4]
 800cf0c:	2b10      	cmp	r3, #16
 800cf0e:	d135      	bne.n	800cf7c <RegionAS923ApplyCFList+0x7c>
 800cf10:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800cf12:	6803      	ldr	r3, [r0, #0]
 800cf14:	7bdd      	ldrb	r5, [r3, #15]
 800cf16:	2d00      	cmp	r5, #0
 800cf18:	d130      	bne.n	800cf7c <RegionAS923ApplyCFList+0x7c>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800cf1a:	2402      	movs	r4, #2
 800cf1c:	e01a      	b.n	800cf54 <RegionAS923ApplyCFList+0x54>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800cf1e:	6832      	ldr	r2, [r6, #0]
 800cf20:	5d53      	ldrb	r3, [r2, r5]
 800cf22:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800cf24:	442a      	add	r2, r5
 800cf26:	7851      	ldrb	r1, [r2, #1]
 800cf28:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800cf2c:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800cf2e:	7892      	ldrb	r2, [r2, #2]
 800cf30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 800cf34:	2264      	movs	r2, #100	; 0x64
 800cf36:	fb02 f303 	mul.w	r3, r2, r3
 800cf3a:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	9304      	str	r3, [sp, #16]
 800cf40:	e011      	b.n	800cf66 <RegionAS923ApplyCFList+0x66>
            channelRemove.ChannelId = chanIdx;
 800cf42:	f88d 4000 	strb.w	r4, [sp]
            RegionAS923ChannelsRemove( &channelRemove );
 800cf46:	4668      	mov	r0, sp
 800cf48:	f7ff ffc0 	bl	800cecc <RegionAS923ChannelsRemove>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800cf4c:	3503      	adds	r5, #3
 800cf4e:	b2ed      	uxtb	r5, r5
 800cf50:	3401      	adds	r4, #1
 800cf52:	b2e4      	uxtb	r4, r4
 800cf54:	2c0f      	cmp	r4, #15
 800cf56:	d811      	bhi.n	800cf7c <RegionAS923ApplyCFList+0x7c>
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 800cf58:	2c06      	cmp	r4, #6
 800cf5a:	d9e0      	bls.n	800cf1e <RegionAS923ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800cf60:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800cf64:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800cf66:	9b03      	ldr	r3, [sp, #12]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d0ea      	beq.n	800cf42 <RegionAS923ApplyCFList+0x42>
            channelAdd.NewChannel = &newChannel;
 800cf6c:	ab03      	add	r3, sp, #12
 800cf6e:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800cf70:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionAS923ChannelAdd( &channelAdd );
 800cf74:	a801      	add	r0, sp, #4
 800cf76:	f7ff ff4d 	bl	800ce14 <RegionAS923ChannelAdd>
 800cf7a:	e7e7      	b.n	800cf4c <RegionAS923ApplyCFList+0x4c>
}
 800cf7c:	b006      	add	sp, #24
 800cf7e:	bd70      	pop	{r4, r5, r6, pc}

0800cf80 <RegionAS923NewChannelReq>:
{
 800cf80:	b500      	push	{lr}
 800cf82:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800cf84:	6803      	ldr	r3, [r0, #0]
 800cf86:	681a      	ldr	r2, [r3, #0]
 800cf88:	b952      	cbnz	r2, 800cfa0 <RegionAS923NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800cf8a:	7903      	ldrb	r3, [r0, #4]
 800cf8c:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 800cf90:	a801      	add	r0, sp, #4
 800cf92:	f7ff ff9b 	bl	800cecc <RegionAS923ChannelsRemove>
 800cf96:	b1d0      	cbz	r0, 800cfce <RegionAS923NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800cf98:	2003      	movs	r0, #3
}
 800cf9a:	b005      	add	sp, #20
 800cf9c:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800cfa0:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800cfa2:	7903      	ldrb	r3, [r0, #4]
 800cfa4:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionAS923ChannelAdd( &channelAdd ) )
 800cfa8:	a802      	add	r0, sp, #8
 800cfaa:	f7ff ff33 	bl	800ce14 <RegionAS923ChannelAdd>
 800cfae:	2806      	cmp	r0, #6
 800cfb0:	d80b      	bhi.n	800cfca <RegionAS923NewChannelReq+0x4a>
 800cfb2:	e8df f000 	tbb	[pc, r0]
 800cfb6:	0a04      	.short	0x0a04
 800cfb8:	060e0a0a 	.word	0x060e0a0a
 800cfbc:	08          	.byte	0x08
 800cfbd:	00          	.byte	0x00
 800cfbe:	2003      	movs	r0, #3
 800cfc0:	e7eb      	b.n	800cf9a <RegionAS923NewChannelReq+0x1a>
                status &= 0xFD;
 800cfc2:	2001      	movs	r0, #1
                break;
 800cfc4:	e7e9      	b.n	800cf9a <RegionAS923NewChannelReq+0x1a>
                status &= 0xFC;
 800cfc6:	2000      	movs	r0, #0
                break;
 800cfc8:	e7e7      	b.n	800cf9a <RegionAS923NewChannelReq+0x1a>
                status &= 0xFC;
 800cfca:	2000      	movs	r0, #0
                break;
 800cfcc:	e7e5      	b.n	800cf9a <RegionAS923NewChannelReq+0x1a>
            status &= 0xFC;
 800cfce:	2000      	movs	r0, #0
 800cfd0:	e7e3      	b.n	800cf9a <RegionAS923NewChannelReq+0x1a>
                status &= 0xFE;
 800cfd2:	2002      	movs	r0, #2
 800cfd4:	e7e1      	b.n	800cf9a <RegionAS923NewChannelReq+0x1a>
	...

0800cfd8 <RegionAS923SetContinuousWave>:

void RegionAS923SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800cfd8:	b538      	push	{r3, r4, r5, lr}
 800cfda:	4604      	mov	r4, r0
#if defined( REGION_AS923 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800cfdc:	4b12      	ldr	r3, [pc, #72]	; (800d028 <RegionAS923SetContinuousWave+0x50>)
 800cfde:	6819      	ldr	r1, [r3, #0]
 800cfe0:	4d12      	ldr	r5, [pc, #72]	; (800d02c <RegionAS923SetContinuousWave+0x54>)
 800cfe2:	682b      	ldr	r3, [r5, #0]
 800cfe4:	7802      	ldrb	r2, [r0, #0]
 800cfe6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800cfea:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800cfee:	7a53      	ldrb	r3, [r2, #9]
 800cff0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cff4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800cff8:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800cffc:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800d000:	f002 fd0f 	bl	800fa22 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800d004:	682a      	ldr	r2, [r5, #0]
 800d006:	7823      	ldrb	r3, [r4, #0]
 800d008:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d00c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800d010:	68a2      	ldr	r2, [r4, #8]
 800d012:	6861      	ldr	r1, [r4, #4]
 800d014:	f002 fc22 	bl	800f85c <RegionCommonComputeTxPower>
 800d018:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800d01a:	4b05      	ldr	r3, [pc, #20]	; (800d030 <RegionAS923SetContinuousWave+0x58>)
 800d01c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d01e:	89a2      	ldrh	r2, [r4, #12]
 800d020:	4628      	mov	r0, r5
 800d022:	4798      	blx	r3
#endif /* REGION_AS923 */
}
 800d024:	bd38      	pop	{r3, r4, r5, pc}
 800d026:	bf00      	nop
 800d028:	2000142c 	.word	0x2000142c
 800d02c:	20001430 	.word	0x20001430
 800d030:	08018318 	.word	0x08018318

0800d034 <RegionAS923ApplyDrOffset>:
#if defined( REGION_AS923 )
    // Initialize minDr for a downlink dwell time configuration of 0
    int8_t minDr = DR_0;

    // Update the minDR for a downlink dwell time configuration of 1
    if( downlinkDwellTime == 1 )
 800d034:	2801      	cmp	r0, #1
 800d036:	d00b      	beq.n	800d050 <RegionAS923ApplyDrOffset+0x1c>
    int8_t minDr = DR_0;
 800d038:	2000      	movs	r0, #0
    {
        minDr = AS923_DWELL_LIMIT_DATARATE;
    }

    // Apply offset formula
    return MIN( DR_5, MAX( minDr, dr - EffectiveRx1DrOffsetAS923[drOffset] ) );
 800d03a:	4b06      	ldr	r3, [pc, #24]	; (800d054 <RegionAS923ApplyDrOffset+0x20>)
 800d03c:	569b      	ldrsb	r3, [r3, r2]
 800d03e:	1ac9      	subs	r1, r1, r3
 800d040:	4288      	cmp	r0, r1
 800d042:	bfb8      	it	lt
 800d044:	4608      	movlt	r0, r1
 800d046:	2805      	cmp	r0, #5
 800d048:	bfa8      	it	ge
 800d04a:	2005      	movge	r0, #5
#else
    return 0;
#endif /* REGION_AS923 */

}
 800d04c:	b2c0      	uxtb	r0, r0
 800d04e:	4770      	bx	lr
        minDr = AS923_DWELL_LIMIT_DATARATE;
 800d050:	2002      	movs	r0, #2
 800d052:	e7f2      	b.n	800d03a <RegionAS923ApplyDrOffset+0x6>
 800d054:	08017b04 	.word	0x08017b04

0800d058 <VerifyRfFreq>:
 */
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

static bool VerifyRfFreq( uint32_t freq )
{
 800d058:	b510      	push	{r4, lr}
 800d05a:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800d05c:	4b10      	ldr	r3, [pc, #64]	; (800d0a0 <VerifyRfFreq+0x48>)
 800d05e:	6a1b      	ldr	r3, [r3, #32]
 800d060:	4798      	blx	r3
 800d062:	b1c8      	cbz	r0, 800d098 <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < AU915_FIRST_RX1_CHANNEL ) ||
 800d064:	4b0f      	ldr	r3, [pc, #60]	; (800d0a4 <VerifyRfFreq+0x4c>)
 800d066:	4423      	add	r3, r4
 800d068:	4a0f      	ldr	r2, [pc, #60]	; (800d0a8 <VerifyRfFreq+0x50>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d813      	bhi.n	800d096 <VerifyRfFreq+0x3e>
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) AU915_FIRST_RX1_CHANNEL ) % ( uint32_t ) AU915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800d06e:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 800d072:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 800d076:	f202 7245 	addw	r2, r2, #1861	; 0x745
 800d07a:	fba2 1203 	umull	r1, r2, r2, r3
 800d07e:	0c92      	lsrs	r2, r2, #18
 800d080:	490a      	ldr	r1, [pc, #40]	; (800d0ac <VerifyRfFreq+0x54>)
 800d082:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
 800d086:	b942      	cbnz	r2, 800d09a <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 915200000 ) ||  ( freq > 927800000 ) )
 800d088:	4b09      	ldr	r3, [pc, #36]	; (800d0b0 <VerifyRfFreq+0x58>)
 800d08a:	4423      	add	r3, r4
 800d08c:	4a09      	ldr	r2, [pc, #36]	; (800d0b4 <VerifyRfFreq+0x5c>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d902      	bls.n	800d098 <VerifyRfFreq+0x40>
    {
        return false;
 800d092:	2000      	movs	r0, #0
 800d094:	e000      	b.n	800d098 <VerifyRfFreq+0x40>
        return false;
 800d096:	2000      	movs	r0, #0
    }
    return true;
}
 800d098:	bd10      	pop	{r4, pc}
        return false;
 800d09a:	2000      	movs	r0, #0
 800d09c:	e7fc      	b.n	800d098 <VerifyRfFreq+0x40>
 800d09e:	bf00      	nop
 800d0a0:	08018318 	.word	0x08018318
 800d0a4:	c8f78f60 	.word	0xc8f78f60
 800d0a8:	00401640 	.word	0x00401640
 800d0ac:	000927c0 	.word	0x000927c0
 800d0b0:	c9732800 	.word	0xc9732800
 800d0b4:	00c042c0 	.word	0x00c042c0

0800d0b8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800d0b8:	b570      	push	{r4, r5, r6, lr}
 800d0ba:	b084      	sub	sp, #16
 800d0bc:	460c      	mov	r4, r1
    int8_t phyDr = DataratesAU915[datarate];
 800d0be:	4b0a      	ldr	r3, [pc, #40]	; (800d0e8 <GetTimeOnAir+0x30>)
 800d0c0:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAU915 );
 800d0c2:	490a      	ldr	r1, [pc, #40]	; (800d0ec <GetTimeOnAir+0x34>)
 800d0c4:	f002 fcb2 	bl	800fa2c <RegionCommonGetBandwidth>
 800d0c8:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800d0ca:	4b09      	ldr	r3, [pc, #36]	; (800d0f0 <GetTimeOnAir+0x38>)
 800d0cc:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800d0ce:	2001      	movs	r0, #1
 800d0d0:	9003      	str	r0, [sp, #12]
 800d0d2:	b2e4      	uxtb	r4, r4
 800d0d4:	9402      	str	r4, [sp, #8]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	9201      	str	r2, [sp, #4]
 800d0da:	2208      	movs	r2, #8
 800d0dc:	9200      	str	r2, [sp, #0]
 800d0de:	4603      	mov	r3, r0
 800d0e0:	4632      	mov	r2, r6
 800d0e2:	47a8      	blx	r5
}
 800d0e4:	b004      	add	sp, #16
 800d0e6:	bd70      	pop	{r4, r5, r6, pc}
 800d0e8:	08017b90 	.word	0x08017b90
 800d0ec:	08017b24 	.word	0x08017b24
 800d0f0:	08018318 	.word	0x08018318

0800d0f4 <RegionAU915GetPhyParam>:
#endif /* REGION_AU915 */

PhyParam_t RegionAU915GetPhyParam( GetPhyParams_t* getPhy )
{
 800d0f4:	b500      	push	{lr}
 800d0f6:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	9304      	str	r3, [sp, #16]

#if defined( REGION_AU915 )
    switch( getPhy->Attribute )
 800d0fc:	7803      	ldrb	r3, [r0, #0]
 800d0fe:	3b01      	subs	r3, #1
 800d100:	2b38      	cmp	r3, #56	; 0x38
 800d102:	d849      	bhi.n	800d198 <RegionAU915GetPhyParam+0xa4>
 800d104:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d108:	00410039 	.word	0x00410039
 800d10c:	00480048 	.word	0x00480048
 800d110:	00460048 	.word	0x00460048
 800d114:	00480048 	.word	0x00480048
 800d118:	00480048 	.word	0x00480048
 800d11c:	00690066 	.word	0x00690066
 800d120:	007a006c 	.word	0x007a006c
 800d124:	00880048 	.word	0x00880048
 800d128:	0090008c 	.word	0x0090008c
 800d12c:	00980094 	.word	0x00980094
 800d130:	00a0009c 	.word	0x00a0009c
 800d134:	00a90048 	.word	0x00a90048
 800d138:	00af00ac 	.word	0x00af00ac
 800d13c:	00bb00b5 	.word	0x00bb00b5
 800d140:	00c200be 	.word	0x00c200be
 800d144:	00c50048 	.word	0x00c50048
 800d148:	004c00c8 	.word	0x004c00c8
 800d14c:	00480048 	.word	0x00480048
 800d150:	00480048 	.word	0x00480048
 800d154:	00480048 	.word	0x00480048
 800d158:	00480048 	.word	0x00480048
 800d15c:	00480048 	.word	0x00480048
 800d160:	00480048 	.word	0x00480048
 800d164:	00cb0048 	.word	0x00cb0048
 800d168:	00dc00d2 	.word	0x00dc00d2
 800d16c:	004800df 	.word	0x004800df
 800d170:	00e900e2 	.word	0x00e900e2
 800d174:	00ef00ec 	.word	0x00ef00ec
 800d178:	00f5      	.short	0x00f5
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0)
 800d17a:	78c3      	ldrb	r3, [r0, #3]
 800d17c:	b913      	cbnz	r3, 800d184 <RegionAU915GetPhyParam+0x90>
            {
                phyParam.Value = AU915_RX_MIN_DATARATE;
 800d17e:	2308      	movs	r3, #8
 800d180:	9304      	str	r3, [sp, #16]
 800d182:	e009      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            }
            else
            {
                phyParam.Value = AU915_DWELL_LIMIT_DATARATE;
 800d184:	2302      	movs	r3, #2
 800d186:	9304      	str	r3, [sp, #16]
 800d188:	e006      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            }
            break;
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0)
 800d18a:	7883      	ldrb	r3, [r0, #2]
 800d18c:	b123      	cbz	r3, 800d198 <RegionAU915GetPhyParam+0xa4>
            {
                phyParam.Value = AU915_TX_MIN_DATARATE;
            }
            else
            {
                phyParam.Value = AU915_DWELL_LIMIT_DATARATE;
 800d18e:	2302      	movs	r3, #2
 800d190:	9304      	str	r3, [sp, #16]
 800d192:	e001      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            }
            break;
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AU915_DEFAULT_DATARATE;
 800d194:	2302      	movs	r3, #2
 800d196:	9304      	str	r3, [sp, #16]
        }
    }

#endif /* REGION_AU915 */
    return phyParam;
}
 800d198:	9804      	ldr	r0, [sp, #16]
 800d19a:	b007      	add	sp, #28
 800d19c:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800d1a0:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800d1a4:	f88d 3004 	strb.w	r3, [sp, #4]
 800d1a8:	2306      	movs	r3, #6
 800d1aa:	f88d 3005 	strb.w	r3, [sp, #5]
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AU915_TX_MIN_DATARATE : AU915_DWELL_LIMIT_DATARATE ),
 800d1ae:	7883      	ldrb	r3, [r0, #2]
 800d1b0:	b103      	cbz	r3, 800d1b4 <RegionAU915GetPhyParam+0xc0>
 800d1b2:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800d1b4:	f88d 3006 	strb.w	r3, [sp, #6]
 800d1b8:	2348      	movs	r3, #72	; 0x48
 800d1ba:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800d1be:	4b50      	ldr	r3, [pc, #320]	; (800d300 <RegionAU915GetPhyParam+0x20c>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800d1c6:	9202      	str	r2, [sp, #8]
 800d1c8:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800d1ca:	a801      	add	r0, sp, #4
 800d1cc:	f002 fc0a 	bl	800f9e4 <RegionCommonGetNextLowerTxDr>
 800d1d0:	9004      	str	r0, [sp, #16]
            break;
 800d1d2:	e7e1      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800d1d4:	2340      	movs	r3, #64	; 0x40
 800d1d6:	9304      	str	r3, [sp, #16]
            break;
 800d1d8:	e7de      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800d1da:	2320      	movs	r3, #32
 800d1dc:	9304      	str	r3, [sp, #16]
            break;
 800d1de:	e7db      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            if( getPhy->UplinkDwellTime == 0 )
 800d1e0:	7883      	ldrb	r3, [r0, #2]
 800d1e2:	b92b      	cbnz	r3, 800d1f0 <RegionAU915GetPhyParam+0xfc>
                phyParam.Value = MaxPayloadOfDatarateDwell0AU915[getPhy->Datarate];
 800d1e4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d1e8:	4a46      	ldr	r2, [pc, #280]	; (800d304 <RegionAU915GetPhyParam+0x210>)
 800d1ea:	5cd3      	ldrb	r3, [r2, r3]
 800d1ec:	9304      	str	r3, [sp, #16]
 800d1ee:	e7d3      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
                phyParam.Value = MaxPayloadOfDatarateDwell1AU915[getPhy->Datarate];
 800d1f0:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d1f4:	4a44      	ldr	r2, [pc, #272]	; (800d308 <RegionAU915GetPhyParam+0x214>)
 800d1f6:	5cd3      	ldrb	r3, [r2, r3]
 800d1f8:	9304      	str	r3, [sp, #16]
 800d1fa:	e7cd      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            if( getPhy->UplinkDwellTime == 0)
 800d1fc:	7883      	ldrb	r3, [r0, #2]
 800d1fe:	b92b      	cbnz	r3, 800d20c <RegionAU915GetPhyParam+0x118>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AU915[getPhy->Datarate];
 800d200:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d204:	4a41      	ldr	r2, [pc, #260]	; (800d30c <RegionAU915GetPhyParam+0x218>)
 800d206:	5cd3      	ldrb	r3, [r2, r3]
 800d208:	9304      	str	r3, [sp, #16]
 800d20a:	e7c5      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell1AU915[getPhy->Datarate];
 800d20c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d210:	4a3f      	ldr	r2, [pc, #252]	; (800d310 <RegionAU915GetPhyParam+0x21c>)
 800d212:	5cd3      	ldrb	r3, [r2, r3]
 800d214:	9304      	str	r3, [sp, #16]
 800d216:	e7bf      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_MAX_RX_WINDOW;
 800d218:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d21c:	9304      	str	r3, [sp, #16]
            break;
 800d21e:	e7bb      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800d220:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d224:	9304      	str	r3, [sp, #16]
            break;
 800d226:	e7b7      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800d228:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d22c:	9304      	str	r3, [sp, #16]
            break;
 800d22e:	e7b3      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800d230:	f241 3388 	movw	r3, #5000	; 0x1388
 800d234:	9304      	str	r3, [sp, #16]
            break;
 800d236:	e7af      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800d238:	f241 7370 	movw	r3, #6000	; 0x1770
 800d23c:	9304      	str	r3, [sp, #16]
            break;
 800d23e:	e7ab      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800d240:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d244:	9304      	str	r3, [sp, #16]
            break;
 800d246:	e7a7      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800d248:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d24c:	4831      	ldr	r0, [pc, #196]	; (800d314 <RegionAU915GetPhyParam+0x220>)
 800d24e:	f007 f90d 	bl	801446c <randr>
 800d252:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800d256:	9004      	str	r0, [sp, #16]
            break;
 800d258:	e79e      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_RX_WND_2_FREQ;
 800d25a:	4b2f      	ldr	r3, [pc, #188]	; (800d318 <RegionAU915GetPhyParam+0x224>)
 800d25c:	9304      	str	r3, [sp, #16]
            break;
 800d25e:	e79b      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_RX_WND_2_DR;
 800d260:	2308      	movs	r3, #8
 800d262:	9304      	str	r3, [sp, #16]
            break;
 800d264:	e798      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800d266:	4b26      	ldr	r3, [pc, #152]	; (800d300 <RegionAU915GetPhyParam+0x20c>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800d26e:	9304      	str	r3, [sp, #16]
            break;
 800d270:	e792      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800d272:	4b23      	ldr	r3, [pc, #140]	; (800d300 <RegionAU915GetPhyParam+0x20c>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800d27a:	9304      	str	r3, [sp, #16]
            break;
 800d27c:	e78c      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_MAX_NB_CHANNELS;
 800d27e:	2348      	movs	r3, #72	; 0x48
 800d280:	9304      	str	r3, [sp, #16]
            break;
 800d282:	e789      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800d284:	4b1e      	ldr	r3, [pc, #120]	; (800d300 <RegionAU915GetPhyParam+0x20c>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	9304      	str	r3, [sp, #16]
            break;
 800d28a:	e785      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_DEFAULT_UPLINK_DWELL_TIME;
 800d28c:	2301      	movs	r3, #1
 800d28e:	9304      	str	r3, [sp, #16]
            break;
 800d290:	e782      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.fValue = AU915_DEFAULT_MAX_EIRP;
 800d292:	4b22      	ldr	r3, [pc, #136]	; (800d31c <RegionAU915GetPhyParam+0x228>)
 800d294:	9304      	str	r3, [sp, #16]
            break;
 800d296:	e77f      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 800d298:	4b21      	ldr	r3, [pc, #132]	; (800d320 <RegionAU915GetPhyParam+0x22c>)
 800d29a:	9304      	str	r3, [sp, #16]
            break;
 800d29c:	e77c      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800d29e:	4a21      	ldr	r2, [pc, #132]	; (800d324 <RegionAU915GetPhyParam+0x230>)
 800d2a0:	491d      	ldr	r1, [pc, #116]	; (800d318 <RegionAU915GetPhyParam+0x224>)
 800d2a2:	7900      	ldrb	r0, [r0, #4]
 800d2a4:	f000 fdb1 	bl	800de0a <RegionBaseUSCalcDownlinkFrequency>
 800d2a8:	9004      	str	r0, [sp, #16]
            break;
 800d2aa:	e775      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.BeaconFormat.BeaconSize = AU915_BEACON_SIZE;
 800d2ac:	2313      	movs	r3, #19
 800d2ae:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = AU915_RFU1_SIZE;
 800d2b2:	2303      	movs	r3, #3
 800d2b4:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = AU915_RFU2_SIZE;
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800d2be:	e76b      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_BEACON_CHANNEL_DR;
 800d2c0:	2308      	movs	r3, #8
 800d2c2:	9304      	str	r3, [sp, #16]
            break;
 800d2c4:	e768      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_BEACON_NB_CHANNELS;
 800d2c6:	2308      	movs	r3, #8
 800d2c8:	9304      	str	r3, [sp, #16]
            break;
 800d2ca:	e765      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800d2cc:	4a15      	ldr	r2, [pc, #84]	; (800d324 <RegionAU915GetPhyParam+0x230>)
 800d2ce:	4912      	ldr	r1, [pc, #72]	; (800d318 <RegionAU915GetPhyParam+0x224>)
 800d2d0:	7900      	ldrb	r0, [r0, #4]
 800d2d2:	f000 fd9a 	bl	800de0a <RegionBaseUSCalcDownlinkFrequency>
 800d2d6:	9004      	str	r0, [sp, #16]
            break;
 800d2d8:	e75e      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_PING_SLOT_CHANNEL_DR;
 800d2da:	2308      	movs	r3, #8
 800d2dc:	9304      	str	r3, [sp, #16]
            break;
 800d2de:	e75b      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_BEACON_NB_CHANNELS;
 800d2e0:	2308      	movs	r3, #8
 800d2e2:	9304      	str	r3, [sp, #16]
            break;
 800d2e4:	e758      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = DataratesAU915[getPhy->Datarate];
 800d2e6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d2ea:	4a0f      	ldr	r2, [pc, #60]	; (800d328 <RegionAU915GetPhyParam+0x234>)
 800d2ec:	5cd3      	ldrb	r3, [r2, r3]
 800d2ee:	9304      	str	r3, [sp, #16]
            break;
 800d2f0:	e752      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAU915 );
 800d2f2:	490e      	ldr	r1, [pc, #56]	; (800d32c <RegionAU915GetPhyParam+0x238>)
 800d2f4:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800d2f8:	f002 fb98 	bl	800fa2c <RegionCommonGetBandwidth>
 800d2fc:	9004      	str	r0, [sp, #16]
            break;
 800d2fe:	e74b      	b.n	800d198 <RegionAU915GetPhyParam+0xa4>
 800d300:	20001438 	.word	0x20001438
 800d304:	08017ba0 	.word	0x08017ba0
 800d308:	08017bb0 	.word	0x08017bb0
 800d30c:	08017bc0 	.word	0x08017bc0
 800d310:	08017bd0 	.word	0x08017bd0
 800d314:	fffffc18 	.word	0xfffffc18
 800d318:	370870a0 	.word	0x370870a0
 800d31c:	41f00000 	.word	0x41f00000
 800d320:	4009999a 	.word	0x4009999a
 800d324:	000927c0 	.word	0x000927c0
 800d328:	08017b90 	.word	0x08017b90
 800d32c:	08017b24 	.word	0x08017b24

0800d330 <RegionAU915SetBandTxDone>:

void RegionAU915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800d330:	b530      	push	{r4, r5, lr}
 800d332:	b083      	sub	sp, #12
#if defined( REGION_AU915 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800d334:	4b0b      	ldr	r3, [pc, #44]	; (800d364 <RegionAU915SetBandTxDone+0x34>)
 800d336:	681d      	ldr	r5, [r3, #0]
 800d338:	4b0b      	ldr	r3, [pc, #44]	; (800d368 <RegionAU915SetBandTxDone+0x38>)
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	7803      	ldrb	r3, [r0, #0]
 800d33e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d342:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d346:	7a5b      	ldrb	r3, [r3, #9]
 800d348:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800d34c:	6903      	ldr	r3, [r0, #16]
 800d34e:	9300      	str	r3, [sp, #0]
 800d350:	68c3      	ldr	r3, [r0, #12]
 800d352:	7842      	ldrb	r2, [r0, #1]
 800d354:	6881      	ldr	r1, [r0, #8]
 800d356:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 800d35a:	f002 f92f 	bl	800f5bc <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_AU915 */
}
 800d35e:	b003      	add	sp, #12
 800d360:	bd30      	pop	{r4, r5, pc}
 800d362:	bf00      	nop
 800d364:	20001434 	.word	0x20001434
 800d368:	20001438 	.word	0x20001438

0800d36c <RegionAU915InitDefaults>:

void RegionAU915InitDefaults( InitDefaultsParams_t* params )
{
 800d36c:	b510      	push	{r4, lr}
 800d36e:	b086      	sub	sp, #24
#if defined( REGION_AU915 )
    Band_t bands[AU915_MAX_NB_BANDS] =
 800d370:	2301      	movs	r3, #1
 800d372:	f8ad 3000 	strh.w	r3, [sp]
 800d376:	2300      	movs	r3, #0
 800d378:	f88d 3002 	strb.w	r3, [sp, #2]
 800d37c:	9301      	str	r3, [sp, #4]
 800d37e:	9302      	str	r3, [sp, #8]
 800d380:	9303      	str	r3, [sp, #12]
 800d382:	9304      	str	r3, [sp, #16]
 800d384:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        AU915_BAND0
    };

    switch( params->Type )
 800d388:	7a04      	ldrb	r4, [r0, #8]
 800d38a:	b17c      	cbz	r4, 800d3ac <RegionAU915InitDefaults+0x40>
 800d38c:	3c01      	subs	r4, #1
 800d38e:	b2e4      	uxtb	r4, r4
 800d390:	2c01      	cmp	r4, #1
 800d392:	f200 8082 	bhi.w	800d49a <RegionAU915InitDefaults+0x12e>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800d396:	4b42      	ldr	r3, [pc, #264]	; (800d4a0 <RegionAU915InitDefaults+0x134>)
 800d398:	6818      	ldr	r0, [r3, #0]
 800d39a:	2206      	movs	r2, #6
 800d39c:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800d3a0:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800d3a4:	f002 f8f9 	bl	800f59a <RegionCommonChanMaskCopy>

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	e074      	b.n	800d496 <RegionAU915InitDefaults+0x12a>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800d3ac:	6803      	ldr	r3, [r0, #0]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d073      	beq.n	800d49a <RegionAU915InitDefaults+0x12e>
 800d3b2:	6842      	ldr	r2, [r0, #4]
 800d3b4:	2a00      	cmp	r2, #0
 800d3b6:	d070      	beq.n	800d49a <RegionAU915InitDefaults+0x12e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800d3b8:	493a      	ldr	r1, [pc, #232]	; (800d4a4 <RegionAU915InitDefaults+0x138>)
 800d3ba:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800d3bc:	4938      	ldr	r1, [pc, #224]	; (800d4a0 <RegionAU915InitDefaults+0x134>)
 800d3be:	600a      	str	r2, [r1, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            RegionNvmGroup1->JoinTrialsCounter = 0;
 800d3c6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
 800d3ca:	2218      	movs	r2, #24
 800d3cc:	4669      	mov	r1, sp
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f007 f859 	bl	8014486 <memcpy1>
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 800d3d4:	e011      	b.n	800d3fa <RegionAU915InitDefaults+0x8e>
                RegionNvmGroup2->Channels[i].Frequency = 915200000 + i * 200000;
 800d3d6:	4b32      	ldr	r3, [pc, #200]	; (800d4a0 <RegionAU915InitDefaults+0x134>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4a33      	ldr	r2, [pc, #204]	; (800d4a8 <RegionAU915InitDefaults+0x13c>)
 800d3dc:	4933      	ldr	r1, [pc, #204]	; (800d4ac <RegionAU915InitDefaults+0x140>)
 800d3de:	fb02 1204 	mla	r2, r2, r4, r1
 800d3e2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800d3e6:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800d3ea:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800d3ee:	2250      	movs	r2, #80	; 0x50
 800d3f0:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 800d3f6:	3401      	adds	r4, #1
 800d3f8:	b2e4      	uxtb	r4, r4
 800d3fa:	2c3f      	cmp	r4, #63	; 0x3f
 800d3fc:	d9eb      	bls.n	800d3d6 <RegionAU915InitDefaults+0x6a>
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 800d3fe:	2340      	movs	r3, #64	; 0x40
 800d400:	e013      	b.n	800d42a <RegionAU915InitDefaults+0xbe>
                RegionNvmGroup2->Channels[i].Frequency = 915900000 + ( i - ( AU915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800d402:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 800d406:	4a26      	ldr	r2, [pc, #152]	; (800d4a0 <RegionAU915InitDefaults+0x134>)
 800d408:	6812      	ldr	r2, [r2, #0]
 800d40a:	4c29      	ldr	r4, [pc, #164]	; (800d4b0 <RegionAU915InitDefaults+0x144>)
 800d40c:	4829      	ldr	r0, [pc, #164]	; (800d4b4 <RegionAU915InitDefaults+0x148>)
 800d40e:	fb04 0101 	mla	r1, r4, r1, r0
 800d412:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800d416:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800d41a:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_6 << 4 ) | DR_6;
 800d41e:	2166      	movs	r1, #102	; 0x66
 800d420:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800d422:	2100      	movs	r1, #0
 800d424:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 800d426:	3301      	adds	r3, #1
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	2b47      	cmp	r3, #71	; 0x47
 800d42c:	d9e9      	bls.n	800d402 <RegionAU915InitDefaults+0x96>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800d42e:	4c1c      	ldr	r4, [pc, #112]	; (800d4a0 <RegionAU915InitDefaults+0x134>)
 800d430:	6820      	ldr	r0, [r4, #0]
 800d432:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d436:	f8a0 348c 	strh.w	r3, [r0, #1164]	; 0x48c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800d43a:	f8a0 348e 	strh.w	r3, [r0, #1166]	; 0x48e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800d43e:	f8a0 3490 	strh.w	r3, [r0, #1168]	; 0x490
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800d442:	f8a0 3492 	strh.w	r3, [r0, #1170]	; 0x492
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800d446:	23ff      	movs	r3, #255	; 0xff
 800d448:	f8a0 3494 	strh.w	r3, [r0, #1172]	; 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800d44c:	2300      	movs	r3, #0
 800d44e:	f8a0 3496 	strh.w	r3, [r0, #1174]	; 0x496
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800d452:	2206      	movs	r2, #6
 800d454:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800d458:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800d45c:	f002 f89d 	bl	800f59a <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800d460:	4b10      	ldr	r3, [pc, #64]	; (800d4a4 <RegionAU915InitDefaults+0x138>)
 800d462:	6818      	ldr	r0, [r3, #0]
 800d464:	6821      	ldr	r1, [r4, #0]
 800d466:	2206      	movs	r2, #6
 800d468:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 800d46c:	3090      	adds	r0, #144	; 0x90
 800d46e:	f002 f894 	bl	800f59a <RegionCommonChanMaskCopy>
            break;
 800d472:	e012      	b.n	800d49a <RegionAU915InitDefaults+0x12e>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800d474:	4a0b      	ldr	r2, [pc, #44]	; (800d4a4 <RegionAU915InitDefaults+0x138>)
 800d476:	6811      	ldr	r1, [r2, #0]
 800d478:	4a09      	ldr	r2, [pc, #36]	; (800d4a0 <RegionAU915InitDefaults+0x134>)
 800d47a:	6812      	ldr	r2, [r2, #0]
 800d47c:	f503 7010 	add.w	r0, r3, #576	; 0x240
 800d480:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800d484:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800d488:	f831 4010 	ldrh.w	r4, [r1, r0, lsl #1]
 800d48c:	4022      	ands	r2, r4
 800d48e:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800d492:	3301      	adds	r3, #1
 800d494:	b2db      	uxtb	r3, r3
 800d496:	2b05      	cmp	r3, #5
 800d498:	d9ec      	bls.n	800d474 <RegionAU915InitDefaults+0x108>
        {
            break;
        }
    }
#endif /* REGION_AU915 */
}
 800d49a:	b006      	add	sp, #24
 800d49c:	bd10      	pop	{r4, pc}
 800d49e:	bf00      	nop
 800d4a0:	20001438 	.word	0x20001438
 800d4a4:	20001434 	.word	0x20001434
 800d4a8:	00030d40 	.word	0x00030d40
 800d4ac:	368cd800 	.word	0x368cd800
 800d4b0:	00186a00 	.word	0x00186a00
 800d4b4:	36978660 	.word	0x36978660

0800d4b8 <RegionAU915Verify>:

bool RegionAU915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800d4b8:	b508      	push	{r3, lr}
#if defined( REGION_AU915 )
    switch( phyAttribute )
 800d4ba:	290a      	cmp	r1, #10
 800d4bc:	d841      	bhi.n	800d542 <RegionAU915Verify+0x8a>
 800d4be:	e8df f001 	tbb	[pc, r1]
 800d4c2:	4006      	.short	0x4006
 800d4c4:	0a404040 	.word	0x0a404040
 800d4c8:	3640200a 	.word	0x3640200a
 800d4cc:	36          	.byte	0x36
 800d4cd:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800d4ce:	6800      	ldr	r0, [r0, #0]
 800d4d0:	f7ff fdc2 	bl	800d058 <VerifyRfFreq>
 800d4d4:	e036      	b.n	800d544 <RegionAU915Verify+0x8c>
        }
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 800d4d6:	7883      	ldrb	r3, [r0, #2]
 800d4d8:	b94b      	cbnz	r3, 800d4ee <RegionAU915Verify+0x36>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_TX_MIN_DATARATE, AU915_TX_MAX_DATARATE );
 800d4da:	2206      	movs	r2, #6
 800d4dc:	2100      	movs	r1, #0
 800d4de:	f990 0000 	ldrsb.w	r0, [r0]
 800d4e2:	f001 ffe8 	bl	800f4b6 <RegionCommonValueInRange>
 800d4e6:	3800      	subs	r0, #0
 800d4e8:	bf18      	it	ne
 800d4ea:	2001      	movne	r0, #1
 800d4ec:	e02a      	b.n	800d544 <RegionAU915Verify+0x8c>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_DWELL_LIMIT_DATARATE, AU915_TX_MAX_DATARATE );
 800d4ee:	2206      	movs	r2, #6
 800d4f0:	2102      	movs	r1, #2
 800d4f2:	f990 0000 	ldrsb.w	r0, [r0]
 800d4f6:	f001 ffde 	bl	800f4b6 <RegionCommonValueInRange>
 800d4fa:	3800      	subs	r0, #0
 800d4fc:	bf18      	it	ne
 800d4fe:	2001      	movne	r0, #1
 800d500:	e020      	b.n	800d544 <RegionAU915Verify+0x8c>
            }
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 800d502:	7883      	ldrb	r3, [r0, #2]
 800d504:	b94b      	cbnz	r3, 800d51a <RegionAU915Verify+0x62>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE );
 800d506:	220d      	movs	r2, #13
 800d508:	2108      	movs	r1, #8
 800d50a:	f990 0000 	ldrsb.w	r0, [r0]
 800d50e:	f001 ffd2 	bl	800f4b6 <RegionCommonValueInRange>
 800d512:	3800      	subs	r0, #0
 800d514:	bf18      	it	ne
 800d516:	2001      	movne	r0, #1
 800d518:	e014      	b.n	800d544 <RegionAU915Verify+0x8c>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_DWELL_LIMIT_DATARATE, AU915_RX_MAX_DATARATE );
 800d51a:	220d      	movs	r2, #13
 800d51c:	2102      	movs	r1, #2
 800d51e:	f990 0000 	ldrsb.w	r0, [r0]
 800d522:	f001 ffc8 	bl	800f4b6 <RegionCommonValueInRange>
 800d526:	3800      	subs	r0, #0
 800d528:	bf18      	it	ne
 800d52a:	2001      	movne	r0, #1
 800d52c:	e00a      	b.n	800d544 <RegionAU915Verify+0x8c>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AU915_MAX_TX_POWER, AU915_MIN_TX_POWER );
 800d52e:	220e      	movs	r2, #14
 800d530:	2100      	movs	r1, #0
 800d532:	f990 0000 	ldrsb.w	r0, [r0]
 800d536:	f001 ffbe 	bl	800f4b6 <RegionCommonValueInRange>
 800d53a:	3800      	subs	r0, #0
 800d53c:	bf18      	it	ne
 800d53e:	2001      	movne	r0, #1
 800d540:	e000      	b.n	800d544 <RegionAU915Verify+0x8c>
{
 800d542:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_AU915 */
}
 800d544:	bd08      	pop	{r3, pc}
	...

0800d548 <RegionAU915ApplyCFList>:

void RegionAU915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_AU915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800d548:	7903      	ldrb	r3, [r0, #4]
 800d54a:	2b10      	cmp	r3, #16
 800d54c:	d134      	bne.n	800d5b8 <RegionAU915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800d54e:	6803      	ldr	r3, [r0, #0]
 800d550:	7bdb      	ldrb	r3, [r3, #15]
 800d552:	2b01      	cmp	r3, #1
 800d554:	d130      	bne.n	800d5b8 <RegionAU915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800d556:	2200      	movs	r2, #0
 800d558:	4613      	mov	r3, r2
 800d55a:	2a04      	cmp	r2, #4
 800d55c:	d82b      	bhi.n	800d5b6 <RegionAU915ApplyCFList+0x6e>
{
 800d55e:	b4f0      	push	{r4, r5, r6, r7}
 800d560:	e014      	b.n	800d58c <RegionAU915ApplyCFList+0x44>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800d562:	b2e4      	uxtb	r4, r4
 800d564:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800d568:	4c14      	ldr	r4, [pc, #80]	; (800d5bc <RegionAU915ApplyCFList+0x74>)
 800d56a:	6826      	ldr	r6, [r4, #0]
 800d56c:	f501 7410 	add.w	r4, r1, #576	; 0x240
 800d570:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
 800d574:	3148      	adds	r1, #72	; 0x48
 800d576:	f836 5011 	ldrh.w	r5, [r6, r1, lsl #1]
 800d57a:	402c      	ands	r4, r5
 800d57c:	f826 4011 	strh.w	r4, [r6, r1, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800d580:	3301      	adds	r3, #1
 800d582:	b2db      	uxtb	r3, r3
 800d584:	3202      	adds	r2, #2
 800d586:	b2d2      	uxtb	r2, r2
 800d588:	2b04      	cmp	r3, #4
 800d58a:	d812      	bhi.n	800d5b2 <RegionAU915ApplyCFList+0x6a>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800d58c:	6804      	ldr	r4, [r0, #0]
 800d58e:	490c      	ldr	r1, [pc, #48]	; (800d5c0 <RegionAU915ApplyCFList+0x78>)
 800d590:	680d      	ldr	r5, [r1, #0]
 800d592:	4619      	mov	r1, r3
 800d594:	5ca4      	ldrb	r4, [r4, r2]
 800d596:	f503 7710 	add.w	r7, r3, #576	; 0x240
 800d59a:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800d59e:	6806      	ldr	r6, [r0, #0]
 800d5a0:	4416      	add	r6, r2
 800d5a2:	7876      	ldrb	r6, [r6, #1]
 800d5a4:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800d5a8:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        if( chMaskItr == 4 )
 800d5ac:	2b04      	cmp	r3, #4
 800d5ae:	d1db      	bne.n	800d568 <RegionAU915ApplyCFList+0x20>
 800d5b0:	e7d7      	b.n	800d562 <RegionAU915ApplyCFList+0x1a>
    }
#endif /* REGION_AU915 */
}
 800d5b2:	bcf0      	pop	{r4, r5, r6, r7}
 800d5b4:	4770      	bx	lr
 800d5b6:	4770      	bx	lr
 800d5b8:	4770      	bx	lr
 800d5ba:	bf00      	nop
 800d5bc:	20001434 	.word	0x20001434
 800d5c0:	20001438 	.word	0x20001438

0800d5c4 <RegionAU915ChanMaskSet>:

bool RegionAU915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800d5c4:	b538      	push	{r3, r4, r5, lr}
#if defined( REGION_AU915 )
    switch( chanMaskSet->ChannelsMaskType )
 800d5c6:	7904      	ldrb	r4, [r0, #4]
 800d5c8:	b11c      	cbz	r4, 800d5d2 <RegionAU915ChanMaskSet+0xe>
 800d5ca:	2c01      	cmp	r4, #1
 800d5cc:	d025      	beq.n	800d61a <RegionAU915ChanMaskSet+0x56>
 800d5ce:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_AU915 */
}
 800d5d0:	bd38      	pop	{r3, r4, r5, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800d5d2:	4d17      	ldr	r5, [pc, #92]	; (800d630 <RegionAU915ChanMaskSet+0x6c>)
 800d5d4:	682b      	ldr	r3, [r5, #0]
 800d5d6:	2206      	movs	r2, #6
 800d5d8:	6801      	ldr	r1, [r0, #0]
 800d5da:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800d5de:	f001 ffdc 	bl	800f59a <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800d5e2:	682d      	ldr	r5, [r5, #0]
 800d5e4:	f895 3494 	ldrb.w	r3, [r5, #1172]	; 0x494
 800d5e8:	f8a5 3494 	strh.w	r3, [r5, #1172]	; 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	f8a5 3496 	strh.w	r3, [r5, #1174]	; 0x496
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800d5f2:	2c05      	cmp	r4, #5
 800d5f4:	d80f      	bhi.n	800d616 <RegionAU915ChanMaskSet+0x52>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800d5f6:	4b0f      	ldr	r3, [pc, #60]	; (800d634 <RegionAU915ChanMaskSet+0x70>)
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	f504 7310 	add.w	r3, r4, #576	; 0x240
 800d5fe:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 800d602:	f104 0148 	add.w	r1, r4, #72	; 0x48
 800d606:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 800d60a:	4003      	ands	r3, r0
 800d60c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800d610:	3401      	adds	r4, #1
 800d612:	b2e4      	uxtb	r4, r4
 800d614:	e7ed      	b.n	800d5f2 <RegionAU915ChanMaskSet+0x2e>
    return true;
 800d616:	2001      	movs	r0, #1
 800d618:	e7da      	b.n	800d5d0 <RegionAU915ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800d61a:	4b05      	ldr	r3, [pc, #20]	; (800d630 <RegionAU915ChanMaskSet+0x6c>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	2206      	movs	r2, #6
 800d620:	6801      	ldr	r1, [r0, #0]
 800d622:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 800d626:	f001 ffb8 	bl	800f59a <RegionCommonChanMaskCopy>
    return true;
 800d62a:	2001      	movs	r0, #1
            break;
 800d62c:	e7d0      	b.n	800d5d0 <RegionAU915ChanMaskSet+0xc>
 800d62e:	bf00      	nop
 800d630:	20001438 	.word	0x20001438
 800d634:	20001434 	.word	0x20001434

0800d638 <RegionAU915ComputeRxWindowParameters>:

void RegionAU915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800d638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d63a:	b083      	sub	sp, #12
 800d63c:	460e      	mov	r6, r1
 800d63e:	4617      	mov	r7, r2
 800d640:	461c      	mov	r4, r3
#if defined( REGION_AU915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AU915_RX_MAX_DATARATE );
 800d642:	280d      	cmp	r0, #13
 800d644:	bfa8      	it	ge
 800d646:	200d      	movge	r0, #13
 800d648:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAU915 );
 800d64a:	4d0f      	ldr	r5, [pc, #60]	; (800d688 <RegionAU915ComputeRxWindowParameters+0x50>)
 800d64c:	4629      	mov	r1, r5
 800d64e:	f002 f9ed 	bl	800fa2c <RegionCommonGetBandwidth>
 800d652:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 800d654:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d658:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800d65c:	4a0b      	ldr	r2, [pc, #44]	; (800d68c <RegionAU915ComputeRxWindowParameters+0x54>)
 800d65e:	5cd0      	ldrb	r0, [r2, r3]
 800d660:	f002 f8b4 	bl	800f7cc <RegionCommonComputeSymbolTimeLoRa>
 800d664:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800d666:	4b0a      	ldr	r3, [pc, #40]	; (800d690 <RegionAU915ComputeRxWindowParameters+0x58>)
 800d668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d66a:	4798      	blx	r3
 800d66c:	4603      	mov	r3, r0
 800d66e:	f104 020c 	add.w	r2, r4, #12
 800d672:	9201      	str	r2, [sp, #4]
 800d674:	3408      	adds	r4, #8
 800d676:	9400      	str	r4, [sp, #0]
 800d678:	463a      	mov	r2, r7
 800d67a:	4631      	mov	r1, r6
 800d67c:	4628      	mov	r0, r5
 800d67e:	f002 f8b3 	bl	800f7e8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AU915 */
}
 800d682:	b003      	add	sp, #12
 800d684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d686:	bf00      	nop
 800d688:	08017b24 	.word	0x08017b24
 800d68c:	08017b90 	.word	0x08017b90
 800d690:	08018318 	.word	0x08018318

0800d694 <RegionAU915RxConfig>:

bool RegionAU915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800d694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d698:	b08b      	sub	sp, #44	; 0x2c
 800d69a:	4604      	mov	r4, r0
 800d69c:	460e      	mov	r6, r1
#if defined( REGION_AU915 )
    int8_t dr = rxConfig->Datarate;
 800d69e:	f990 7001 	ldrsb.w	r7, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800d6a2:	6845      	ldr	r5, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800d6a4:	4b22      	ldr	r3, [pc, #136]	; (800d730 <RegionAU915RxConfig+0x9c>)
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	4798      	blx	r3
 800d6aa:	2800      	cmp	r0, #0
 800d6ac:	d13d      	bne.n	800d72a <RegionAU915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800d6ae:	7ce3      	ldrb	r3, [r4, #19]
 800d6b0:	b933      	cbnz	r3, 800d6c0 <RegionAU915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = AU915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * AU915_STEPWIDTH_RX1_CHANNEL;
 800d6b2:	7825      	ldrb	r5, [r4, #0]
 800d6b4:	f005 0507 	and.w	r5, r5, #7
 800d6b8:	4a1e      	ldr	r2, [pc, #120]	; (800d734 <RegionAU915RxConfig+0xa0>)
 800d6ba:	4b1f      	ldr	r3, [pc, #124]	; (800d738 <RegionAU915RxConfig+0xa4>)
 800d6bc:	fb02 3505 	mla	r5, r2, r5, r3
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAU915[dr];
 800d6c0:	4b1e      	ldr	r3, [pc, #120]	; (800d73c <RegionAU915RxConfig+0xa8>)
 800d6c2:	f913 9007 	ldrsb.w	r9, [r3, r7]

    Radio.SetChannel( frequency );
 800d6c6:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800d730 <RegionAU915RxConfig+0x9c>
 800d6ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d6ce:	4628      	mov	r0, r5
 800d6d0:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800d6d2:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800d6d6:	7ca3      	ldrb	r3, [r4, #18]
 800d6d8:	9309      	str	r3, [sp, #36]	; 0x24
 800d6da:	2001      	movs	r0, #1
 800d6dc:	9008      	str	r0, [sp, #32]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	9207      	str	r2, [sp, #28]
 800d6e2:	9206      	str	r2, [sp, #24]
 800d6e4:	9205      	str	r2, [sp, #20]
 800d6e6:	9204      	str	r2, [sp, #16]
 800d6e8:	9203      	str	r2, [sp, #12]
 800d6ea:	8923      	ldrh	r3, [r4, #8]
 800d6ec:	9302      	str	r3, [sp, #8]
 800d6ee:	2308      	movs	r3, #8
 800d6f0:	9301      	str	r3, [sp, #4]
 800d6f2:	9200      	str	r2, [sp, #0]
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	464a      	mov	r2, r9
 800d6f8:	78a1      	ldrb	r1, [r4, #2]
 800d6fa:	47c0      	blx	r8

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800d6fc:	7c63      	ldrb	r3, [r4, #17]
 800d6fe:	b18b      	cbz	r3, 800d724 <RegionAU915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AU915[dr];
 800d700:	4b0f      	ldr	r3, [pc, #60]	; (800d740 <RegionAU915RxConfig+0xac>)
 800d702:	5dd9      	ldrb	r1, [r3, r7]
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
    }
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800d704:	4b0a      	ldr	r3, [pc, #40]	; (800d730 <RegionAU915RxConfig+0x9c>)
 800d706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d708:	310d      	adds	r1, #13
 800d70a:	b2c9      	uxtb	r1, r1
 800d70c:	2001      	movs	r0, #1
 800d70e:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800d710:	463a      	mov	r2, r7
 800d712:	4629      	mov	r1, r5
 800d714:	7ce0      	ldrb	r0, [r4, #19]
 800d716:	f002 f99b 	bl	800fa50 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800d71a:	7037      	strb	r7, [r6, #0]
    return true;
 800d71c:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_AU915 */
}
 800d71e:	b00b      	add	sp, #44	; 0x2c
 800d720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
 800d724:	4b07      	ldr	r3, [pc, #28]	; (800d744 <RegionAU915RxConfig+0xb0>)
 800d726:	5dd9      	ldrb	r1, [r3, r7]
 800d728:	e7ec      	b.n	800d704 <RegionAU915RxConfig+0x70>
        return false;
 800d72a:	2000      	movs	r0, #0
 800d72c:	e7f7      	b.n	800d71e <RegionAU915RxConfig+0x8a>
 800d72e:	bf00      	nop
 800d730:	08018318 	.word	0x08018318
 800d734:	000927c0 	.word	0x000927c0
 800d738:	370870a0 	.word	0x370870a0
 800d73c:	08017b90 	.word	0x08017b90
 800d740:	08017bc0 	.word	0x08017bc0
 800d744:	08017ba0 	.word	0x08017ba0

0800d748 <RegionAU915TxConfig>:

bool RegionAU915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800d748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d74c:	b08d      	sub	sp, #52	; 0x34
 800d74e:	4604      	mov	r4, r0
 800d750:	910b      	str	r1, [sp, #44]	; 0x2c
 800d752:	4690      	mov	r8, r2
#if defined( REGION_AU915 )
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 800d754:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d758:	4a31      	ldr	r2, [pc, #196]	; (800d820 <RegionAU915TxConfig+0xd8>)
 800d75a:	f912 b003 	ldrsb.w	fp, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800d75e:	4b31      	ldr	r3, [pc, #196]	; (800d824 <RegionAU915TxConfig+0xdc>)
 800d760:	6819      	ldr	r1, [r3, #0]
 800d762:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d82c <RegionAU915TxConfig+0xe4>
 800d766:	f8da 3000 	ldr.w	r3, [sl]
 800d76a:	7802      	ldrb	r2, [r0, #0]
 800d76c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d770:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d774:	7a53      	ldrb	r3, [r2, #9]
 800d776:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d77a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800d77e:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800d782:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800d786:	f002 f94c 	bl	800fa22 <RegionCommonLimitTxPower>
 800d78a:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAU915 );
 800d78c:	4926      	ldr	r1, [pc, #152]	; (800d828 <RegionAU915TxConfig+0xe0>)
 800d78e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d792:	f002 f94b 	bl	800fa2c <RegionCommonGetBandwidth>
 800d796:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800d798:	68a2      	ldr	r2, [r4, #8]
 800d79a:	6861      	ldr	r1, [r4, #4]
 800d79c:	4630      	mov	r0, r6
 800d79e:	f002 f85d 	bl	800f85c <RegionCommonComputeTxPower>
 800d7a2:	4607      	mov	r7, r0

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800d7a4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800d830 <RegionAU915TxConfig+0xe8>
 800d7a8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800d7ac:	f8da 1000 	ldr.w	r1, [sl]
 800d7b0:	7823      	ldrb	r3, [r4, #0]
 800d7b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d7b6:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800d7ba:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800d7bc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800d7c0:	9308      	str	r3, [sp, #32]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	9207      	str	r2, [sp, #28]
 800d7c6:	9206      	str	r2, [sp, #24]
 800d7c8:	9205      	str	r2, [sp, #20]
 800d7ca:	2501      	movs	r5, #1
 800d7cc:	9504      	str	r5, [sp, #16]
 800d7ce:	9203      	str	r2, [sp, #12]
 800d7d0:	2308      	movs	r3, #8
 800d7d2:	9302      	str	r3, [sp, #8]
 800d7d4:	9501      	str	r5, [sp, #4]
 800d7d6:	f8cd b000 	str.w	fp, [sp]
 800d7da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7dc:	4639      	mov	r1, r7
 800d7de:	4628      	mov	r0, r5
 800d7e0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800d7e4:	47b8      	blx	r7
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800d7e6:	f8da 2000 	ldr.w	r2, [sl]
 800d7ea:	7823      	ldrb	r3, [r4, #0]
 800d7ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d7f0:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800d7f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d7f8:	f002 f95a 	bl	800fab0 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800d7fc:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 800d800:	7b21      	ldrb	r1, [r4, #12]
 800d802:	4628      	mov	r0, r5
 800d804:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800d806:	89a1      	ldrh	r1, [r4, #12]
 800d808:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d80c:	f7ff fc54 	bl	800d0b8 <GetTimeOnAir>
 800d810:	f8c8 0000 	str.w	r0, [r8]

    *txPower = txPowerLimited;
 800d814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d816:	701e      	strb	r6, [r3, #0]
    return true;
#else
    return false;
#endif /* REGION_AU915 */
}
 800d818:	4628      	mov	r0, r5
 800d81a:	b00d      	add	sp, #52	; 0x34
 800d81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d820:	08017b90 	.word	0x08017b90
 800d824:	20001434 	.word	0x20001434
 800d828:	08017b24 	.word	0x08017b24
 800d82c:	20001438 	.word	0x20001438
 800d830:	08018318 	.word	0x08018318

0800d834 <RegionAU915LinkAdrReq>:

uint8_t RegionAU915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800d834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d838:	b091      	sub	sp, #68	; 0x44
 800d83a:	4606      	mov	r6, r0
 800d83c:	4689      	mov	r9, r1
 800d83e:	4690      	mov	r8, r2
 800d840:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_AU915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800d842:	2400      	movs	r4, #0
 800d844:	940e      	str	r4, [sp, #56]	; 0x38
 800d846:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800d84a:	940b      	str	r4, [sp, #44]	; 0x2c
 800d84c:	940c      	str	r4, [sp, #48]	; 0x30
 800d84e:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, 6 );
 800d850:	4b95      	ldr	r3, [pc, #596]	; (800daa8 <RegionAU915LinkAdrReq+0x274>)
 800d852:	6819      	ldr	r1, [r3, #0]
 800d854:	2206      	movs	r2, #6
 800d856:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 800d85a:	a80b      	add	r0, sp, #44	; 0x2c
 800d85c:	f001 fe9d 	bl	800f59a <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d860:	e00d      	b.n	800d87e <RegionAU915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 800d862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d866:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 800d86a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 800d86e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 800d872:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800d876:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800d87a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d87e:	7a33      	ldrb	r3, [r6, #8]
 800d880:	42a3      	cmp	r3, r4
 800d882:	d978      	bls.n	800d976 <RegionAU915LinkAdrReq+0x142>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800d884:	6870      	ldr	r0, [r6, #4]
 800d886:	a90e      	add	r1, sp, #56	; 0x38
 800d888:	4420      	add	r0, r4
 800d88a:	f001 ff37 	bl	800f6fc <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800d88e:	2800      	cmp	r0, #0
 800d890:	d071      	beq.n	800d976 <RegionAU915LinkAdrReq+0x142>
        bytesProcessed += nextIndex;
 800d892:	4404      	add	r4, r0
 800d894:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 800d896:	f89d 503b 	ldrb.w	r5, [sp, #59]	; 0x3b
 800d89a:	2d06      	cmp	r5, #6
 800d89c:	d0e1      	beq.n	800d862 <RegionAU915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800d89e:	2d07      	cmp	r5, #7
 800d8a0:	d009      	beq.n	800d8b6 <RegionAU915LinkAdrReq+0x82>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800d8a2:	2d05      	cmp	r5, #5
 800d8a4:	d064      	beq.n	800d970 <RegionAU915LinkAdrReq+0x13c>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800d8a6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800d8aa:	aa10      	add	r2, sp, #64	; 0x40
 800d8ac:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 800d8b0:	f825 3c14 	strh.w	r3, [r5, #-20]
 800d8b4:	e7e3      	b.n	800d87e <RegionAU915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 800d8bc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 800d8c0:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 800d8c4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800d8c8:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800d8cc:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800d8d0:	e7d5      	b.n	800d87e <RegionAU915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800d8d2:	aa10      	add	r2, sp, #64	; 0x40
 800d8d4:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800d8d8:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800d8dc:	f062 02ff 	orn	r2, r2, #255	; 0xff
 800d8e0:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800d8e4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800d8ee:	3101      	adds	r1, #1
 800d8f0:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 800d8f2:	3501      	adds	r5, #1
 800d8f4:	b2ed      	uxtb	r5, r5
 800d8f6:	2d07      	cmp	r5, #7
 800d8f8:	d8c1      	bhi.n	800d87e <RegionAU915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800d8fa:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800d8fe:	2301      	movs	r3, #1
 800d900:	40ab      	lsls	r3, r5
 800d902:	421a      	tst	r2, r3
 800d904:	d011      	beq.n	800d92a <RegionAU915LinkAdrReq+0xf6>
                    if( ( i % 2 ) == 0 )
 800d906:	f015 0f01 	tst.w	r5, #1
 800d90a:	d1e2      	bne.n	800d8d2 <RegionAU915LinkAdrReq+0x9e>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800d90c:	aa10      	add	r2, sp, #64	; 0x40
 800d90e:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800d912:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800d916:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800d91a:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800d91e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800d922:	4313      	orrs	r3, r2
 800d924:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800d928:	e7e3      	b.n	800d8f2 <RegionAU915LinkAdrReq+0xbe>
                    if( ( i % 2 ) == 0 )
 800d92a:	f015 0f01 	tst.w	r5, #1
 800d92e:	d10f      	bne.n	800d950 <RegionAU915LinkAdrReq+0x11c>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800d930:	aa10      	add	r2, sp, #64	; 0x40
 800d932:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800d936:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800d93a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800d93e:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800d942:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800d946:	ea22 0303 	bic.w	r3, r2, r3
 800d94a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800d94e:	e7d0      	b.n	800d8f2 <RegionAU915LinkAdrReq+0xbe>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800d950:	aa10      	add	r2, sp, #64	; 0x40
 800d952:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800d956:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 800d95a:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800d95e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800d962:	ea22 0303 	bic.w	r3, r2, r3
 800d966:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800d96a:	3101      	adds	r1, #1
 800d96c:	b2c9      	uxtb	r1, r1
 800d96e:	e7c0      	b.n	800d8f2 <RegionAU915LinkAdrReq+0xbe>
            for( uint8_t i = 0; i <= 7; i++ )
 800d970:	2500      	movs	r5, #0
            uint8_t cntChannelMask = 0;
 800d972:	4629      	mov	r1, r5
 800d974:	e7bf      	b.n	800d8f6 <RegionAU915LinkAdrReq+0xc2>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_6 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800d976:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800d97a:	2b05      	cmp	r3, #5
 800d97c:	dd58      	ble.n	800da30 <RegionAU915LinkAdrReq+0x1fc>
 800d97e:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800d980:	2302      	movs	r3, #2
 800d982:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800d986:	7a73      	ldrb	r3, [r6, #9]
 800d988:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionAU915GetPhyParam( &getPhy );
 800d98c:	a809      	add	r0, sp, #36	; 0x24
 800d98e:	f7ff fbb1 	bl	800d0f4 <RegionAU915GetPhyParam>
 800d992:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 800d994:	f88d 5004 	strb.w	r5, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800d998:	7ab3      	ldrb	r3, [r6, #10]
 800d99a:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800d99e:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800d9a2:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800d9a6:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800d9aa:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800d9ae:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800d9b2:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800d9b6:	f996 300b 	ldrsb.w	r3, [r6, #11]
 800d9ba:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800d9be:	f996 300c 	ldrsb.w	r3, [r6, #12]
 800d9c2:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800d9c6:	f996 300d 	ldrsb.w	r3, [r6, #13]
 800d9ca:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = AU915_MAX_NB_CHANNELS;
 800d9ce:	2348      	movs	r3, #72	; 0x48
 800d9d0:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800d9d4:	ab0b      	add	r3, sp, #44	; 0x2c
 800d9d6:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800d9d8:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = AU915_TX_MAX_DATARATE;
 800d9dc:	2306      	movs	r3, #6
 800d9de:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800d9e2:	4b31      	ldr	r3, [pc, #196]	; (800daa8 <RegionAU915LinkAdrReq+0x274>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = AU915_MIN_TX_POWER;
 800d9e8:	230e      	movs	r3, #14
 800d9ea:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = AU915_MAX_TX_POWER;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800d9f4:	6833      	ldr	r3, [r6, #0]
 800d9f6:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800d9f8:	ab0e      	add	r3, sp, #56	; 0x38
 800d9fa:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800d9fe:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 800da02:	4668      	mov	r0, sp
 800da04:	f001 fe96 	bl	800f734 <RegionCommonLinkAdrReqVerifyParams>
 800da08:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800da0a:	2807      	cmp	r0, #7
 800da0c:	d01b      	beq.n	800da46 <RegionAU915LinkAdrReq+0x212>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800da0e:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800da12:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800da16:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800da1a:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800da1e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800da22:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800da24:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800da26:	701c      	strb	r4, [r3, #0]

#endif /* REGION_AU915 */
    return status;
}
 800da28:	4628      	mov	r0, r5
 800da2a:	b011      	add	sp, #68	; 0x44
 800da2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_6 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800da30:	2204      	movs	r2, #4
 800da32:	2100      	movs	r1, #0
 800da34:	a80b      	add	r0, sp, #44	; 0x2c
 800da36:	f001 fd9a 	bl	800f56e <RegionCommonCountChannels>
 800da3a:	2801      	cmp	r0, #1
 800da3c:	d901      	bls.n	800da42 <RegionAU915LinkAdrReq+0x20e>
 800da3e:	2507      	movs	r5, #7
 800da40:	e79e      	b.n	800d980 <RegionAU915LinkAdrReq+0x14c>
        status &= 0xFE; // Channel mask KO
 800da42:	2506      	movs	r5, #6
 800da44:	e79c      	b.n	800d980 <RegionAU915LinkAdrReq+0x14c>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800da46:	4e18      	ldr	r6, [pc, #96]	; (800daa8 <RegionAU915LinkAdrReq+0x274>)
 800da48:	6830      	ldr	r0, [r6, #0]
 800da4a:	2206      	movs	r2, #6
 800da4c:	a90b      	add	r1, sp, #44	; 0x2c
 800da4e:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800da52:	f001 fda2 	bl	800f59a <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 800da56:	4b15      	ldr	r3, [pc, #84]	; (800daac <RegionAU915LinkAdrReq+0x278>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	6832      	ldr	r2, [r6, #0]
 800da5c:	f8b2 1480 	ldrh.w	r1, [r2, #1152]	; 0x480
 800da60:	f8b3 0090 	ldrh.w	r0, [r3, #144]	; 0x90
 800da64:	4001      	ands	r1, r0
 800da66:	f8a3 1090 	strh.w	r1, [r3, #144]	; 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 800da6a:	f8b2 1482 	ldrh.w	r1, [r2, #1154]	; 0x482
 800da6e:	f8b3 0092 	ldrh.w	r0, [r3, #146]	; 0x92
 800da72:	4001      	ands	r1, r0
 800da74:	f8a3 1092 	strh.w	r1, [r3, #146]	; 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 800da78:	f8b2 1484 	ldrh.w	r1, [r2, #1156]	; 0x484
 800da7c:	f8b3 0094 	ldrh.w	r0, [r3, #148]	; 0x94
 800da80:	4001      	ands	r1, r0
 800da82:	f8a3 1094 	strh.w	r1, [r3, #148]	; 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 800da86:	f8b2 1486 	ldrh.w	r1, [r2, #1158]	; 0x486
 800da8a:	f8b3 0096 	ldrh.w	r0, [r3, #150]	; 0x96
 800da8e:	4001      	ands	r1, r0
 800da90:	f8a3 1096 	strh.w	r1, [r3, #150]	; 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800da94:	f8b2 1488 	ldrh.w	r1, [r2, #1160]	; 0x488
 800da98:	f8a3 1098 	strh.w	r1, [r3, #152]	; 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800da9c:	f8b2 248a 	ldrh.w	r2, [r2, #1162]	; 0x48a
 800daa0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 800daa4:	e7b3      	b.n	800da0e <RegionAU915LinkAdrReq+0x1da>
 800daa6:	bf00      	nop
 800daa8:	20001438 	.word	0x20001438
 800daac:	20001434 	.word	0x20001434

0800dab0 <RegionAU915RxParamSetupReq>:

uint8_t RegionAU915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800dab0:	b538      	push	{r3, r4, r5, lr}
 800dab2:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_AU915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800dab4:	6840      	ldr	r0, [r0, #4]
 800dab6:	f7ff facf 	bl	800d058 <VerifyRfFreq>
 800daba:	b1e0      	cbz	r0, 800daf6 <RegionAU915RxParamSetupReq+0x46>
    uint8_t status = 0x07;
 800dabc:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 800dabe:	220d      	movs	r2, #13
 800dac0:	2108      	movs	r1, #8
 800dac2:	f994 0000 	ldrsb.w	r0, [r4]
 800dac6:	f001 fcf6 	bl	800f4b6 <RegionCommonValueInRange>
 800daca:	b908      	cbnz	r0, 800dad0 <RegionAU915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800dacc:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( rxParamSetupReq->Datarate == DR_7 ) ||
 800dad0:	f994 3000 	ldrsb.w	r3, [r4]
 800dad4:	2b07      	cmp	r3, #7
 800dad6:	d001      	beq.n	800dadc <RegionAU915RxParamSetupReq+0x2c>
 800dad8:	2b0d      	cmp	r3, #13
 800dada:	dd01      	ble.n	800dae0 <RegionAU915RxParamSetupReq+0x30>
        ( rxParamSetupReq->Datarate > DR_13 ) )
    {
        status &= 0xFD; // Datarate KO
 800dadc:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AU915_MIN_RX1_DR_OFFSET, AU915_MAX_RX1_DR_OFFSET ) == false )
 800dae0:	2205      	movs	r2, #5
 800dae2:	2100      	movs	r1, #0
 800dae4:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800dae8:	f001 fce5 	bl	800f4b6 <RegionCommonValueInRange>
 800daec:	b908      	cbnz	r0, 800daf2 <RegionAU915RxParamSetupReq+0x42>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800daee:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_AU915 */
    return status;
}
 800daf2:	4628      	mov	r0, r5
 800daf4:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800daf6:	2506      	movs	r5, #6
 800daf8:	e7e1      	b.n	800dabe <RegionAU915RxParamSetupReq+0xe>

0800dafa <RegionAU915NewChannelReq>:

int8_t RegionAU915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 800dafa:	f04f 30ff 	mov.w	r0, #4294967295
 800dafe:	4770      	bx	lr

0800db00 <RegionAU915TxParamSetupReq>:

int8_t RegionAU915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Accept the request
    return 0;
}
 800db00:	2000      	movs	r0, #0
 800db02:	4770      	bx	lr

0800db04 <RegionAU915DlChannelReq>:

int8_t RegionAU915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 800db04:	f04f 30ff 	mov.w	r0, #4294967295
 800db08:	4770      	bx	lr
	...

0800db0c <RegionAU915AlternateDr>:
int8_t RegionAU915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_AU915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_2 and then one 500kHz DR_6 channel
    if( type == ALTERNATE_DR )
 800db0c:	b9b1      	cbnz	r1, 800db3c <RegionAU915AlternateDr+0x30>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 800db0e:	4b10      	ldr	r3, [pc, #64]	; (800db50 <RegionAU915AlternateDr+0x44>)
 800db10:	681a      	ldr	r2, [r3, #0]
 800db12:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 800db16:	3301      	adds	r3, #1
 800db18:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800db1c:	4b0c      	ldr	r3, [pc, #48]	; (800db50 <RegionAU915AlternateDr+0x44>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 800db24:	4b0b      	ldr	r3, [pc, #44]	; (800db54 <RegionAU915AlternateDr+0x48>)
 800db26:	fba3 1302 	umull	r1, r3, r3, r2
 800db2a:	085b      	lsrs	r3, r3, #1
 800db2c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800db30:	1ad3      	subs	r3, r2, r3
 800db32:	f013 0fff 	tst.w	r3, #255	; 0xff
 800db36:	d109      	bne.n	800db4c <RegionAU915AlternateDr+0x40>
    {
        // Use DR_6 every 9th times.
        currentDr = DR_6;
 800db38:	2006      	movs	r0, #6
 800db3a:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 800db3c:	4b04      	ldr	r3, [pc, #16]	; (800db50 <RegionAU915AlternateDr+0x44>)
 800db3e:	681a      	ldr	r2, [r3, #0]
 800db40:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 800db44:	3b01      	subs	r3, #1
 800db46:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
 800db4a:	e7e7      	b.n	800db1c <RegionAU915AlternateDr+0x10>
    }
    else
    {
        currentDr = DR_2;
 800db4c:	2002      	movs	r0, #2
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_AU915 */
}
 800db4e:	4770      	bx	lr
 800db50:	20001434 	.word	0x20001434
 800db54:	38e38e39 	.word	0x38e38e39

0800db58 <RegionAU915NextChannel>:

LoRaMacStatus_t RegionAU915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800db58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db5c:	b0a4      	sub	sp, #144	; 0x90
 800db5e:	4604      	mov	r4, r0
 800db60:	460e      	mov	r6, r1
 800db62:	4690      	mov	r8, r2
 800db64:	461f      	mov	r7, r3
#if defined( REGION_AU915 )
    uint8_t nbEnabledChannels = 0;
 800db66:	2500      	movs	r5, #0
 800db68:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 800db6c:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 800db70:	9511      	str	r5, [sp, #68]	; 0x44
 800db72:	2244      	movs	r2, #68	; 0x44
 800db74:	4629      	mov	r1, r5
 800db76:	a812      	add	r0, sp, #72	; 0x48
 800db78:	f009 fbe0 	bl	801733c <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800db7c:	4b4c      	ldr	r3, [pc, #304]	; (800dcb0 <RegionAU915NextChannel+0x158>)
 800db7e:	6818      	ldr	r0, [r3, #0]
 800db80:	2204      	movs	r2, #4
 800db82:	4629      	mov	r1, r5
 800db84:	3090      	adds	r0, #144	; 0x90
 800db86:	f001 fcf2 	bl	800f56e <RegionCommonCountChannels>
 800db8a:	2800      	cmp	r0, #0
 800db8c:	d053      	beq.n	800dc36 <RegionAU915NextChannel+0xde>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_6 )
 800db8e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800db92:	2b05      	cmp	r3, #5
 800db94:	dd0a      	ble.n	800dbac <RegionAU915NextChannel+0x54>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800db96:	4b46      	ldr	r3, [pc, #280]	; (800dcb0 <RegionAU915NextChannel+0x158>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 800db9e:	b92a      	cbnz	r2, 800dbac <RegionAU915NextChannel+0x54>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800dba0:	4a44      	ldr	r2, [pc, #272]	; (800dcb4 <RegionAU915NextChannel+0x15c>)
 800dba2:	6812      	ldr	r2, [r2, #0]
 800dba4:	f8b2 2488 	ldrh.w	r2, [r2, #1160]	; 0x488
 800dba8:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800dbac:	7a63      	ldrb	r3, [r4, #9]
 800dbae:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800dbb2:	7a23      	ldrb	r3, [r4, #8]
 800dbb4:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 800dbb8:	4b3d      	ldr	r3, [pc, #244]	; (800dcb0 <RegionAU915NextChannel+0x158>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800dbc0:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800dbc2:	4a3c      	ldr	r2, [pc, #240]	; (800dcb4 <RegionAU915NextChannel+0x15c>)
 800dbc4:	6812      	ldr	r2, [r2, #0]
 800dbc6:	9205      	str	r2, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800dbc8:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = AU915_MAX_NB_CHANNELS;
 800dbca:	2348      	movs	r3, #72	; 0x48
 800dbcc:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800dbd4:	6823      	ldr	r3, [r4, #0]
 800dbd6:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800dbd8:	6863      	ldr	r3, [r4, #4]
 800dbda:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800dbdc:	7aa3      	ldrb	r3, [r4, #10]
 800dbde:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = AU915_MAX_NB_BANDS;
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800dbe8:	ab0c      	add	r3, sp, #48	; 0x30
 800dbea:	6921      	ldr	r1, [r4, #16]
 800dbec:	68e0      	ldr	r0, [r4, #12]
 800dbee:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800dbf2:	7d23      	ldrb	r3, [r4, #20]
 800dbf4:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800dbf8:	8ae1      	ldrh	r1, [r4, #22]
 800dbfa:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800dbfe:	f7ff fa5b 	bl	800d0b8 <GetTimeOnAir>
 800dc02:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800dc04:	ab03      	add	r3, sp, #12
 800dc06:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800dc08:	f8cd 8004 	str.w	r8, [sp, #4]
 800dc0c:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 800dc10:	9300      	str	r3, [sp, #0]
 800dc12:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 800dc16:	aa11      	add	r2, sp, #68	; 0x44
 800dc18:	4639      	mov	r1, r7
 800dc1a:	a809      	add	r0, sp, #36	; 0x24
 800dc1c:	f001 fe9a 	bl	800f954 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800dc20:	4605      	mov	r5, r0
 800dc22:	2800      	cmp	r0, #0
 800dc24:	d140      	bne.n	800dca8 <RegionAU915NextChannel+0x150>
    {
        if( nextChanParams->Joined == true )
 800dc26:	7a63      	ldrb	r3, [r4, #9]
 800dc28:	b9a3      	cbnz	r3, 800dc54 <RegionAU915NextChannel+0xfc>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR2
            if( nextChanParams->Datarate == DR_2 )
 800dc2a:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800dc2e:	2b02      	cmp	r3, #2
 800dc30:	d01b      	beq.n	800dc6a <RegionAU915NextChannel+0x112>
            }
            // 500kHz Channels (64 - 71) DR6
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 800dc32:	4603      	mov	r3, r0
 800dc34:	e027      	b.n	800dc86 <RegionAU915NextChannel+0x12e>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 800dc36:	4d1e      	ldr	r5, [pc, #120]	; (800dcb0 <RegionAU915NextChannel+0x158>)
 800dc38:	6828      	ldr	r0, [r5, #0]
 800dc3a:	4b1e      	ldr	r3, [pc, #120]	; (800dcb4 <RegionAU915NextChannel+0x15c>)
 800dc3c:	6819      	ldr	r1, [r3, #0]
 800dc3e:	2204      	movs	r2, #4
 800dc40:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 800dc44:	3090      	adds	r0, #144	; 0x90
 800dc46:	f001 fca8 	bl	800f59a <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800dc4a:	682b      	ldr	r3, [r5, #0]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800dc52:	e79c      	b.n	800db8e <RegionAU915NextChannel+0x36>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800dc54:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 800dc58:	3901      	subs	r1, #1
 800dc5a:	f006 fc07 	bl	801446c <randr>
 800dc5e:	ab24      	add	r3, sp, #144	; 0x90
 800dc60:	4418      	add	r0, r3
 800dc62:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 800dc66:	7033      	strb	r3, [r6, #0]
 800dc68:	e017      	b.n	800dc9a <RegionAU915NextChannel+0x142>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800dc6a:	4b11      	ldr	r3, [pc, #68]	; (800dcb0 <RegionAU915NextChannel+0x158>)
 800dc6c:	6818      	ldr	r0, [r3, #0]
 800dc6e:	4632      	mov	r2, r6
 800dc70:	f100 019c 	add.w	r1, r0, #156	; 0x9c
 800dc74:	3090      	adds	r0, #144	; 0x90
 800dc76:	f000 f87c 	bl	800dd72 <RegionBaseUSComputeNext125kHzJoinChannel>
 800dc7a:	2803      	cmp	r0, #3
 800dc7c:	d10d      	bne.n	800dc9a <RegionAU915NextChannel+0x142>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 800dc7e:	4605      	mov	r5, r0
 800dc80:	e012      	b.n	800dca8 <RegionAU915NextChannel+0x150>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 800dc82:	3301      	adds	r3, #1
 800dc84:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800dc86:	4a0a      	ldr	r2, [pc, #40]	; (800dcb0 <RegionAU915NextChannel+0x158>)
 800dc88:	6812      	ldr	r2, [r2, #0]
 800dc8a:	f892 2098 	ldrb.w	r2, [r2, #152]	; 0x98
 800dc8e:	411a      	asrs	r2, r3
 800dc90:	f012 0f01 	tst.w	r2, #1
 800dc94:	d0f5      	beq.n	800dc82 <RegionAU915NextChannel+0x12a>
                }
                *channel = 64 + i;
 800dc96:	3340      	adds	r3, #64	; 0x40
 800dc98:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, AU915_MAX_NB_CHANNELS );
 800dc9a:	4b05      	ldr	r3, [pc, #20]	; (800dcb0 <RegionAU915NextChannel+0x158>)
 800dc9c:	6818      	ldr	r0, [r3, #0]
 800dc9e:	2248      	movs	r2, #72	; 0x48
 800dca0:	7831      	ldrb	r1, [r6, #0]
 800dca2:	3090      	adds	r0, #144	; 0x90
 800dca4:	f001 fc49 	bl	800f53a <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AU915 */
}
 800dca8:	4628      	mov	r0, r5
 800dcaa:	b024      	add	sp, #144	; 0x90
 800dcac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcb0:	20001434 	.word	0x20001434
 800dcb4:	20001438 	.word	0x20001438

0800dcb8 <RegionAU915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionAU915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800dcb8:	b538      	push	{r3, r4, r5, lr}
 800dcba:	4604      	mov	r4, r0
#if defined( REGION_AU915 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800dcbc:	4b12      	ldr	r3, [pc, #72]	; (800dd08 <RegionAU915SetContinuousWave+0x50>)
 800dcbe:	6819      	ldr	r1, [r3, #0]
 800dcc0:	4d12      	ldr	r5, [pc, #72]	; (800dd0c <RegionAU915SetContinuousWave+0x54>)
 800dcc2:	682b      	ldr	r3, [r5, #0]
 800dcc4:	7802      	ldrb	r2, [r0, #0]
 800dcc6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800dcca:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800dcce:	7a53      	ldrb	r3, [r2, #9]
 800dcd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dcd4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800dcd8:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800dcdc:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800dce0:	f001 fe9f 	bl	800fa22 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800dce4:	682a      	ldr	r2, [r5, #0]
 800dce6:	7823      	ldrb	r3, [r4, #0]
 800dce8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dcec:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800dcf0:	68a2      	ldr	r2, [r4, #8]
 800dcf2:	6861      	ldr	r1, [r4, #4]
 800dcf4:	f001 fdb2 	bl	800f85c <RegionCommonComputeTxPower>
 800dcf8:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800dcfa:	4b05      	ldr	r3, [pc, #20]	; (800dd10 <RegionAU915SetContinuousWave+0x58>)
 800dcfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcfe:	89a2      	ldrh	r2, [r4, #12]
 800dd00:	4628      	mov	r0, r5
 800dd02:	4798      	blx	r3
#endif /* REGION_AU915 */
}
 800dd04:	bd38      	pop	{r3, r4, r5, pc}
 800dd06:	bf00      	nop
 800dd08:	20001434 	.word	0x20001434
 800dd0c:	20001438 	.word	0x20001438
 800dd10:	08018318 	.word	0x08018318

0800dd14 <RegionAU915ApplyDrOffset>:

uint8_t RegionAU915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_AU915 )
    int8_t datarate = DatarateOffsetsAU915[dr][drOffset];
 800dd14:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800dd18:	4b06      	ldr	r3, [pc, #24]	; (800dd34 <RegionAU915ApplyDrOffset+0x20>)
 800dd1a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800dd1e:	568b      	ldrsb	r3, [r1, r2]

    if( datarate < 0 )
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	db01      	blt.n	800dd28 <RegionAU915ApplyDrOffset+0x14>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_AU915 */
}
 800dd24:	b2d8      	uxtb	r0, r3
 800dd26:	4770      	bx	lr
        if( downlinkDwellTime == 0 )
 800dd28:	b908      	cbnz	r0, 800dd2e <RegionAU915ApplyDrOffset+0x1a>
            datarate = AU915_TX_MIN_DATARATE;
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	e7fa      	b.n	800dd24 <RegionAU915ApplyDrOffset+0x10>
            datarate = AU915_DWELL_LIMIT_DATARATE;
 800dd2e:	2302      	movs	r3, #2
 800dd30:	e7f8      	b.n	800dd24 <RegionAU915ApplyDrOffset+0x10>
 800dd32:	bf00      	nop
 800dd34:	08017b64 	.word	0x08017b64

0800dd38 <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800dd38:	b1b9      	cbz	r1, 800dd6a <FindAvailable125kHzChannels+0x32>
{
 800dd3a:	b410      	push	{r4}
 800dd3c:	460c      	mov	r4, r1
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800dd3e:	b1b2      	cbz	r2, 800dd6e <FindAvailable125kHzChannels+0x36>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800dd40:	2300      	movs	r3, #0
 800dd42:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800dd44:	e001      	b.n	800dd4a <FindAvailable125kHzChannels+0x12>
 800dd46:	3301      	adds	r3, #1
 800dd48:	b2db      	uxtb	r3, r3
 800dd4a:	2b07      	cmp	r3, #7
 800dd4c:	d80a      	bhi.n	800dd64 <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800dd4e:	fa40 f103 	asr.w	r1, r0, r3
 800dd52:	f011 0f01 	tst.w	r1, #1
 800dd56:	d0f6      	beq.n	800dd46 <FindAvailable125kHzChannels+0xe>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800dd58:	7811      	ldrb	r1, [r2, #0]
 800dd5a:	5463      	strb	r3, [r4, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800dd5c:	7811      	ldrb	r1, [r2, #0]
 800dd5e:	3101      	adds	r1, #1
 800dd60:	7011      	strb	r1, [r2, #0]
 800dd62:	e7f0      	b.n	800dd46 <FindAvailable125kHzChannels+0xe>
        }
    }

    return LORAMAC_STATUS_OK;
 800dd64:	2000      	movs	r0, #0
}
 800dd66:	bc10      	pop	{r4}
 800dd68:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dd6a:	2003      	movs	r0, #3
}
 800dd6c:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dd6e:	2003      	movs	r0, #3
 800dd70:	e7f9      	b.n	800dd66 <FindAvailable125kHzChannels+0x2e>

0800dd72 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800dd72:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd74:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800dd76:	2300      	movs	r3, #0
 800dd78:	9302      	str	r3, [sp, #8]
 800dd7a:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800dd7c:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800dd80:	2800      	cmp	r0, #0
 800dd82:	d03c      	beq.n	800ddfe <RegionBaseUSComputeNext125kHzJoinChannel+0x8c>
 800dd84:	460d      	mov	r5, r1
 800dd86:	4617      	mov	r7, r2
 800dd88:	4606      	mov	r6, r0
 800dd8a:	2900      	cmp	r1, #0
 800dd8c:	d039      	beq.n	800de02 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800dd8e:	2a00      	cmp	r2, #0
 800dd90:	d039      	beq.n	800de06 <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800dd92:	780c      	ldrb	r4, [r1, #0]
 800dd94:	e015      	b.n	800ddc2 <RegionBaseUSComputeNext125kHzJoinChannel+0x50>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800dd96:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800dd9a:	0a00      	lsrs	r0, r0, #8
 800dd9c:	e017      	b.n	800ddce <RegionBaseUSComputeNext125kHzJoinChannel+0x5c>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800dd9e:	3901      	subs	r1, #1
 800dda0:	2000      	movs	r0, #0
 800dda2:	f006 fb63 	bl	801446c <randr>
 800dda6:	ab04      	add	r3, sp, #16
 800dda8:	4418      	add	r0, r3
 800ddaa:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800ddae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ddb2:	703b      	strb	r3, [r7, #0]
 800ddb4:	e016      	b.n	800dde4 <RegionBaseUSComputeNext125kHzJoinChannel+0x72>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800ddb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ddba:	b9cb      	cbnz	r3, 800ddf0 <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
 800ddbc:	782a      	ldrb	r2, [r5, #0]
 800ddbe:	42a2      	cmp	r2, r4
 800ddc0:	d016      	beq.n	800ddf0 <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800ddc2:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800ddc4:	f014 0f01 	tst.w	r4, #1
 800ddc8:	d1e5      	bne.n	800dd96 <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800ddca:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800ddce:	f10d 0207 	add.w	r2, sp, #7
 800ddd2:	a902      	add	r1, sp, #8
 800ddd4:	f7ff ffb0 	bl	800dd38 <FindAvailable125kHzChannels>
 800ddd8:	2803      	cmp	r0, #3
 800ddda:	d00b      	beq.n	800ddf4 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        if ( availableChannels > 0 )
 800dddc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800dde0:	2900      	cmp	r1, #0
 800dde2:	d1dc      	bne.n	800dd9e <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800dde4:	3401      	adds	r4, #1
 800dde6:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800dde8:	2c07      	cmp	r4, #7
 800ddea:	d9e4      	bls.n	800ddb6 <RegionBaseUSComputeNext125kHzJoinChannel+0x44>
            startIndex = 0;
 800ddec:	2400      	movs	r4, #0
 800ddee:	e7e2      	b.n	800ddb6 <RegionBaseUSComputeNext125kHzJoinChannel+0x44>

    if ( availableChannels > 0 )
 800ddf0:	b913      	cbnz	r3, 800ddf8 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800ddf2:	2003      	movs	r0, #3
}
 800ddf4:	b005      	add	sp, #20
 800ddf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800ddf8:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800ddfa:	2000      	movs	r0, #0
 800ddfc:	e7fa      	b.n	800ddf4 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ddfe:	2003      	movs	r0, #3
 800de00:	e7f8      	b.n	800ddf4 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800de02:	2003      	movs	r0, #3
 800de04:	e7f6      	b.n	800ddf4 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800de06:	2003      	movs	r0, #3
 800de08:	e7f4      	b.n	800ddf4 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>

0800de0a <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800de0a:	fb02 1000 	mla	r0, r2, r0, r1
 800de0e:	4770      	bx	lr

0800de10 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 800de10:	b510      	push	{r4, lr}
 800de12:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800de14:	4b0e      	ldr	r3, [pc, #56]	; (800de50 <VerifyRfFreq+0x40>)
 800de16:	6a1b      	ldr	r3, [r3, #32]
 800de18:	4798      	blx	r3
 800de1a:	b1a8      	cbz	r0, 800de48 <VerifyRfFreq+0x38>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < CN470_FIRST_RX1_CHANNEL ) ||
 800de1c:	4b0d      	ldr	r3, [pc, #52]	; (800de54 <VerifyRfFreq+0x44>)
 800de1e:	4423      	add	r3, r4
 800de20:	4a0d      	ldr	r2, [pc, #52]	; (800de58 <VerifyRfFreq+0x48>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d80f      	bhi.n	800de46 <VerifyRfFreq+0x36>
        ( freq > CN470_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) CN470_FIRST_RX1_CHANNEL ) % ( uint32_t ) CN470_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800de26:	099a      	lsrs	r2, r3, #6
 800de28:	490c      	ldr	r1, [pc, #48]	; (800de5c <VerifyRfFreq+0x4c>)
 800de2a:	fba1 1202 	umull	r1, r2, r1, r2
 800de2e:	0992      	lsrs	r2, r2, #6
 800de30:	490b      	ldr	r1, [pc, #44]	; (800de60 <VerifyRfFreq+0x50>)
 800de32:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > CN470_LAST_RX1_CHANNEL ) ||
 800de36:	b942      	cbnz	r2, 800de4a <VerifyRfFreq+0x3a>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 470300000 ) ||  ( freq > 509700000 ) )
 800de38:	4b0a      	ldr	r3, [pc, #40]	; (800de64 <VerifyRfFreq+0x54>)
 800de3a:	4423      	add	r3, r4
 800de3c:	4a0a      	ldr	r2, [pc, #40]	; (800de68 <VerifyRfFreq+0x58>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d902      	bls.n	800de48 <VerifyRfFreq+0x38>
    {
        return false;
 800de42:	2000      	movs	r0, #0
 800de44:	e000      	b.n	800de48 <VerifyRfFreq+0x38>
        return false;
 800de46:	2000      	movs	r0, #0
    }
    return true;
}
 800de48:	bd10      	pop	{r4, pc}
        return false;
 800de4a:	2000      	movs	r0, #0
 800de4c:	e7fc      	b.n	800de48 <VerifyRfFreq+0x38>
 800de4e:	bf00      	nop
 800de50:	08018318 	.word	0x08018318
 800de54:	e22e0720 	.word	0xe22e0720
 800de58:	008f6ec0 	.word	0x008f6ec0
 800de5c:	053e2d63 	.word	0x053e2d63
 800de60:	00030d40 	.word	0x00030d40
 800de64:	e3f7caa0 	.word	0xe3f7caa0
 800de68:	02593240 	.word	0x02593240

0800de6c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800de6c:	b570      	push	{r4, r5, r6, lr}
 800de6e:	b084      	sub	sp, #16
 800de70:	460c      	mov	r4, r1
    int8_t phyDr = DataratesCN470[datarate];
 800de72:	4b0a      	ldr	r3, [pc, #40]	; (800de9c <GetTimeOnAir+0x30>)
 800de74:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsCN470 );
 800de76:	490a      	ldr	r1, [pc, #40]	; (800dea0 <GetTimeOnAir+0x34>)
 800de78:	f001 fdd8 	bl	800fa2c <RegionCommonGetBandwidth>
 800de7c:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800de7e:	4b09      	ldr	r3, [pc, #36]	; (800dea4 <GetTimeOnAir+0x38>)
 800de80:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800de82:	2001      	movs	r0, #1
 800de84:	9003      	str	r0, [sp, #12]
 800de86:	b2e4      	uxtb	r4, r4
 800de88:	9402      	str	r4, [sp, #8]
 800de8a:	2200      	movs	r2, #0
 800de8c:	9201      	str	r2, [sp, #4]
 800de8e:	2208      	movs	r2, #8
 800de90:	9200      	str	r2, [sp, #0]
 800de92:	4603      	mov	r3, r0
 800de94:	4632      	mov	r2, r6
 800de96:	47a8      	blx	r5
}
 800de98:	b004      	add	sp, #16
 800de9a:	bd70      	pop	{r4, r5, r6, pc}
 800de9c:	08017bf8 	.word	0x08017bf8
 800dea0:	08017be0 	.word	0x08017be0
 800dea4:	08018318 	.word	0x08018318

0800dea8 <RegionCN470GetPhyParam>:
#endif /* REGION_CN470 */

PhyParam_t RegionCN470GetPhyParam( GetPhyParams_t* getPhy )
{
 800dea8:	b500      	push	{lr}
 800deaa:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800deac:	2300      	movs	r3, #0
 800deae:	9304      	str	r3, [sp, #16]

#if defined( REGION_CN470 )
    switch( getPhy->Attribute )
 800deb0:	7803      	ldrb	r3, [r0, #0]
 800deb2:	3b0b      	subs	r3, #11
 800deb4:	2b2e      	cmp	r3, #46	; 0x2e
 800deb6:	d830      	bhi.n	800df1a <RegionCN470GetPhyParam+0x72>
 800deb8:	e8df f003 	tbb	[pc, r3]
 800debc:	3f393633 	.word	0x3f393633
 800dec0:	4d49452f 	.word	0x4d49452f
 800dec4:	5d595551 	.word	0x5d595551
 800dec8:	692f662f 	.word	0x692f662f
 800decc:	2f78756f 	.word	0x2f78756f
 800ded0:	187f7c2f 	.word	0x187f7c2f
 800ded4:	2f2f2f2f 	.word	0x2f2f2f2f
 800ded8:	2f2f2f2f 	.word	0x2f2f2f2f
 800dedc:	2f2f2f2f 	.word	0x2f2f2f2f
 800dee0:	9389822f 	.word	0x9389822f
 800dee4:	a0992f96 	.word	0xa0992f96
 800dee8:	a6a3      	.short	0xa6a3
 800deea:	ac          	.byte	0xac
 800deeb:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800deec:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800def0:	f88d 3004 	strb.w	r3, [sp, #4]
 800def4:	2305      	movs	r3, #5
 800def6:	f88d 3005 	strb.w	r3, [sp, #5]
 800defa:	2300      	movs	r3, #0
 800defc:	f88d 3006 	strb.w	r3, [sp, #6]
 800df00:	2360      	movs	r3, #96	; 0x60
 800df02:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )CN470_TX_MAX_DATARATE,
                .MinDr = ( int8_t )CN470_TX_MIN_DATARATE,
                .NbChannels = CN470_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800df06:	4b47      	ldr	r3, [pc, #284]	; (800e024 <RegionCN470GetPhyParam+0x17c>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800df0e:	9202      	str	r2, [sp, #8]
 800df10:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800df12:	a801      	add	r0, sp, #4
 800df14:	f001 fd66 	bl	800f9e4 <RegionCommonGetNextLowerTxDr>
 800df18:	9004      	str	r0, [sp, #16]
        }
    }

#endif /* REGION_CN470 */
    return phyParam;
}
 800df1a:	9804      	ldr	r0, [sp, #16]
 800df1c:	b007      	add	sp, #28
 800df1e:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800df22:	2340      	movs	r3, #64	; 0x40
 800df24:	9304      	str	r3, [sp, #16]
            break;
 800df26:	e7f8      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800df28:	2320      	movs	r3, #32
 800df2a:	9304      	str	r3, [sp, #16]
            break;
 800df2c:	e7f5      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateCN470[getPhy->Datarate];
 800df2e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800df32:	4a3d      	ldr	r2, [pc, #244]	; (800e028 <RegionCN470GetPhyParam+0x180>)
 800df34:	5cd3      	ldrb	r3, [r2, r3]
 800df36:	9304      	str	r3, [sp, #16]
            break;
 800df38:	e7ef      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterCN470[getPhy->Datarate];
 800df3a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800df3e:	4a3b      	ldr	r2, [pc, #236]	; (800e02c <RegionCN470GetPhyParam+0x184>)
 800df40:	5cd3      	ldrb	r3, [r2, r3]
 800df42:	9304      	str	r3, [sp, #16]
            break;
 800df44:	e7e9      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.Value = CN470_MAX_RX_WINDOW;
 800df46:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800df4a:	9304      	str	r3, [sp, #16]
            break;
 800df4c:	e7e5      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800df4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800df52:	9304      	str	r3, [sp, #16]
            break;
 800df54:	e7e1      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800df56:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800df5a:	9304      	str	r3, [sp, #16]
            break;
 800df5c:	e7dd      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800df5e:	f241 3388 	movw	r3, #5000	; 0x1388
 800df62:	9304      	str	r3, [sp, #16]
            break;
 800df64:	e7d9      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800df66:	f241 7370 	movw	r3, #6000	; 0x1770
 800df6a:	9304      	str	r3, [sp, #16]
            break;
 800df6c:	e7d5      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800df6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800df72:	9304      	str	r3, [sp, #16]
            break;
 800df74:	e7d1      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800df76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800df7a:	482d      	ldr	r0, [pc, #180]	; (800e030 <RegionCN470GetPhyParam+0x188>)
 800df7c:	f006 fa76 	bl	801446c <randr>
 800df80:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800df84:	9004      	str	r0, [sp, #16]
            break;
 800df86:	e7c8      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.Value = CN470_RX_WND_2_FREQ;
 800df88:	4b2a      	ldr	r3, [pc, #168]	; (800e034 <RegionCN470GetPhyParam+0x18c>)
 800df8a:	9304      	str	r3, [sp, #16]
            break;
 800df8c:	e7c5      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800df8e:	4b25      	ldr	r3, [pc, #148]	; (800e024 <RegionCN470GetPhyParam+0x17c>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800df96:	9304      	str	r3, [sp, #16]
            break;
 800df98:	e7bf      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800df9a:	4b22      	ldr	r3, [pc, #136]	; (800e024 <RegionCN470GetPhyParam+0x17c>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800dfa2:	9304      	str	r3, [sp, #16]
            break;
 800dfa4:	e7b9      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.Value = CN470_MAX_NB_CHANNELS;
 800dfa6:	2360      	movs	r3, #96	; 0x60
 800dfa8:	9304      	str	r3, [sp, #16]
            break;
 800dfaa:	e7b6      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800dfac:	4b1d      	ldr	r3, [pc, #116]	; (800e024 <RegionCN470GetPhyParam+0x17c>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	9304      	str	r3, [sp, #16]
            break;
 800dfb2:	e7b2      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.fValue = CN470_DEFAULT_MAX_EIRP;
 800dfb4:	4b20      	ldr	r3, [pc, #128]	; (800e038 <RegionCN470GetPhyParam+0x190>)
 800dfb6:	9304      	str	r3, [sp, #16]
            break;
 800dfb8:	e7af      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.fValue = CN470_DEFAULT_ANTENNA_GAIN;
 800dfba:	4b20      	ldr	r3, [pc, #128]	; (800e03c <RegionCN470GetPhyParam+0x194>)
 800dfbc:	9304      	str	r3, [sp, #16]
            break;
 800dfbe:	e7ac      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800dfc0:	4a1f      	ldr	r2, [pc, #124]	; (800e040 <RegionCN470GetPhyParam+0x198>)
 800dfc2:	4920      	ldr	r1, [pc, #128]	; (800e044 <RegionCN470GetPhyParam+0x19c>)
 800dfc4:	7900      	ldrb	r0, [r0, #4]
 800dfc6:	f7ff ff20 	bl	800de0a <RegionBaseUSCalcDownlinkFrequency>
 800dfca:	9004      	str	r0, [sp, #16]
            break;
 800dfcc:	e7a5      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = CN470_BEACON_SIZE;
 800dfce:	2313      	movs	r3, #19
 800dfd0:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = CN470_RFU1_SIZE;
 800dfd4:	2303      	movs	r3, #3
 800dfd6:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = CN470_RFU2_SIZE;
 800dfda:	2301      	movs	r3, #1
 800dfdc:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800dfe0:	e79b      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.Value = CN470_BEACON_CHANNEL_DR;
 800dfe2:	2302      	movs	r3, #2
 800dfe4:	9304      	str	r3, [sp, #16]
            break;
 800dfe6:	e798      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.Value = CN470_BEACON_NB_CHANNELS;
 800dfe8:	2308      	movs	r3, #8
 800dfea:	9304      	str	r3, [sp, #16]
            break;
 800dfec:	e795      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800dfee:	4a14      	ldr	r2, [pc, #80]	; (800e040 <RegionCN470GetPhyParam+0x198>)
 800dff0:	4914      	ldr	r1, [pc, #80]	; (800e044 <RegionCN470GetPhyParam+0x19c>)
 800dff2:	7900      	ldrb	r0, [r0, #4]
 800dff4:	f7ff ff09 	bl	800de0a <RegionBaseUSCalcDownlinkFrequency>
 800dff8:	9004      	str	r0, [sp, #16]
            break;
 800dffa:	e78e      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.Value = CN470_PING_SLOT_CHANNEL_DR;
 800dffc:	2302      	movs	r3, #2
 800dffe:	9304      	str	r3, [sp, #16]
            break;
 800e000:	e78b      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.Value = CN470_BEACON_NB_CHANNELS;
 800e002:	2308      	movs	r3, #8
 800e004:	9304      	str	r3, [sp, #16]
            break;
 800e006:	e788      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.Value = DataratesCN470[getPhy->Datarate];
 800e008:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e00c:	4a0e      	ldr	r2, [pc, #56]	; (800e048 <RegionCN470GetPhyParam+0x1a0>)
 800e00e:	5cd3      	ldrb	r3, [r2, r3]
 800e010:	9304      	str	r3, [sp, #16]
            break;
 800e012:	e782      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsCN470 );
 800e014:	490d      	ldr	r1, [pc, #52]	; (800e04c <RegionCN470GetPhyParam+0x1a4>)
 800e016:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800e01a:	f001 fd07 	bl	800fa2c <RegionCommonGetBandwidth>
 800e01e:	9004      	str	r0, [sp, #16]
            break;
 800e020:	e77b      	b.n	800df1a <RegionCN470GetPhyParam+0x72>
 800e022:	bf00      	nop
 800e024:	20001440 	.word	0x20001440
 800e028:	08017c00 	.word	0x08017c00
 800e02c:	08017c08 	.word	0x08017c08
 800e030:	fffffc18 	.word	0xfffffc18
 800e034:	1e1e4420 	.word	0x1e1e4420
 800e038:	41993333 	.word	0x41993333
 800e03c:	4009999a 	.word	0x4009999a
 800e040:	00030d40 	.word	0x00030d40
 800e044:	1e4c0ae0 	.word	0x1e4c0ae0
 800e048:	08017bf8 	.word	0x08017bf8
 800e04c:	08017be0 	.word	0x08017be0

0800e050 <RegionCN470SetBandTxDone>:

void RegionCN470SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800e050:	b530      	push	{r4, r5, lr}
 800e052:	b083      	sub	sp, #12
#if defined( REGION_CN470 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800e054:	4b0b      	ldr	r3, [pc, #44]	; (800e084 <RegionCN470SetBandTxDone+0x34>)
 800e056:	681d      	ldr	r5, [r3, #0]
 800e058:	4b0b      	ldr	r3, [pc, #44]	; (800e088 <RegionCN470SetBandTxDone+0x38>)
 800e05a:	681a      	ldr	r2, [r3, #0]
 800e05c:	7803      	ldrb	r3, [r0, #0]
 800e05e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e062:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e066:	7a5b      	ldrb	r3, [r3, #9]
 800e068:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800e06c:	6903      	ldr	r3, [r0, #16]
 800e06e:	9300      	str	r3, [sp, #0]
 800e070:	68c3      	ldr	r3, [r0, #12]
 800e072:	7842      	ldrb	r2, [r0, #1]
 800e074:	6881      	ldr	r1, [r0, #8]
 800e076:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 800e07a:	f001 fa9f 	bl	800f5bc <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_CN470 */
}
 800e07e:	b003      	add	sp, #12
 800e080:	bd30      	pop	{r4, r5, pc}
 800e082:	bf00      	nop
 800e084:	2000143c 	.word	0x2000143c
 800e088:	20001440 	.word	0x20001440

0800e08c <RegionCN470InitDefaults>:

void RegionCN470InitDefaults( InitDefaultsParams_t* params )
{
 800e08c:	b510      	push	{r4, lr}
 800e08e:	b086      	sub	sp, #24
#if defined( REGION_CN470 )
    Band_t bands[CN470_MAX_NB_BANDS] =
 800e090:	2301      	movs	r3, #1
 800e092:	f8ad 3000 	strh.w	r3, [sp]
 800e096:	2300      	movs	r3, #0
 800e098:	f88d 3002 	strb.w	r3, [sp, #2]
 800e09c:	9301      	str	r3, [sp, #4]
 800e09e:	9302      	str	r3, [sp, #8]
 800e0a0:	9303      	str	r3, [sp, #12]
 800e0a2:	9304      	str	r3, [sp, #16]
 800e0a4:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        CN470_BAND0
    };

    switch( params->Type )
 800e0a8:	7a04      	ldrb	r4, [r0, #8]
 800e0aa:	b174      	cbz	r4, 800e0ca <RegionCN470InitDefaults+0x3e>
 800e0ac:	3c01      	subs	r4, #1
 800e0ae:	b2e4      	uxtb	r4, r4
 800e0b0:	2c01      	cmp	r4, #1
 800e0b2:	d808      	bhi.n	800e0c6 <RegionCN470InitDefaults+0x3a>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800e0b4:	4b23      	ldr	r3, [pc, #140]	; (800e144 <RegionCN470InitDefaults+0xb8>)
 800e0b6:	6818      	ldr	r0, [r3, #0]
 800e0b8:	2206      	movs	r2, #6
 800e0ba:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800e0be:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800e0c2:	f001 fa6a 	bl	800f59a <RegionCommonChanMaskCopy>
        {
            break;
        }
    }
#endif /* REGION_CN470 */
}
 800e0c6:	b006      	add	sp, #24
 800e0c8:	bd10      	pop	{r4, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800e0ca:	6803      	ldr	r3, [r0, #0]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d0fa      	beq.n	800e0c6 <RegionCN470InitDefaults+0x3a>
 800e0d0:	6842      	ldr	r2, [r0, #4]
 800e0d2:	2a00      	cmp	r2, #0
 800e0d4:	d0f7      	beq.n	800e0c6 <RegionCN470InitDefaults+0x3a>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800e0d6:	491c      	ldr	r1, [pc, #112]	; (800e148 <RegionCN470InitDefaults+0xbc>)
 800e0d8:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800e0da:	491a      	ldr	r1, [pc, #104]	; (800e144 <RegionCN470InitDefaults+0xb8>)
 800e0dc:	600a      	str	r2, [r1, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * CN470_MAX_NB_BANDS );
 800e0de:	2218      	movs	r2, #24
 800e0e0:	4669      	mov	r1, sp
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f006 f9cf 	bl	8014486 <memcpy1>
            for( uint8_t i = 0; i < CN470_MAX_NB_CHANNELS; i++ )
 800e0e8:	e011      	b.n	800e10e <RegionCN470InitDefaults+0x82>
                RegionNvmGroup2->Channels[i].Frequency = 470300000 + i * 200000;
 800e0ea:	4b16      	ldr	r3, [pc, #88]	; (800e144 <RegionCN470InitDefaults+0xb8>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	4a17      	ldr	r2, [pc, #92]	; (800e14c <RegionCN470InitDefaults+0xc0>)
 800e0f0:	4917      	ldr	r1, [pc, #92]	; (800e150 <RegionCN470InitDefaults+0xc4>)
 800e0f2:	fb02 1204 	mla	r2, r2, r4, r1
 800e0f6:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800e0fa:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800e0fe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800e102:	2250      	movs	r2, #80	; 0x50
 800e104:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800e106:	2200      	movs	r2, #0
 800e108:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < CN470_MAX_NB_CHANNELS; i++ )
 800e10a:	3401      	adds	r4, #1
 800e10c:	b2e4      	uxtb	r4, r4
 800e10e:	2c5f      	cmp	r4, #95	; 0x5f
 800e110:	d9eb      	bls.n	800e0ea <RegionCN470InitDefaults+0x5e>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800e112:	4b0c      	ldr	r3, [pc, #48]	; (800e144 <RegionCN470InitDefaults+0xb8>)
 800e114:	6818      	ldr	r0, [r3, #0]
 800e116:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e11a:	f8a0 348c 	strh.w	r3, [r0, #1164]	; 0x48c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800e11e:	f8a0 348e 	strh.w	r3, [r0, #1166]	; 0x48e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800e122:	f8a0 3490 	strh.w	r3, [r0, #1168]	; 0x490
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800e126:	f8a0 3492 	strh.w	r3, [r0, #1170]	; 0x492
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0xFFFF;
 800e12a:	f8a0 3494 	strh.w	r3, [r0, #1172]	; 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0xFFFF;
 800e12e:	f8a0 3496 	strh.w	r3, [r0, #1174]	; 0x496
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800e132:	2206      	movs	r2, #6
 800e134:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800e138:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800e13c:	f001 fa2d 	bl	800f59a <RegionCommonChanMaskCopy>
            break;
 800e140:	e7c1      	b.n	800e0c6 <RegionCN470InitDefaults+0x3a>
 800e142:	bf00      	nop
 800e144:	20001440 	.word	0x20001440
 800e148:	2000143c 	.word	0x2000143c
 800e14c:	00030d40 	.word	0x00030d40
 800e150:	1c083560 	.word	0x1c083560

0800e154 <RegionCN470Verify>:

bool RegionCN470Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800e154:	b508      	push	{r3, lr}
#if defined( REGION_CN470 )
    switch( phyAttribute )
 800e156:	290a      	cmp	r1, #10
 800e158:	d829      	bhi.n	800e1ae <RegionCN470Verify+0x5a>
 800e15a:	e8df f001 	tbb	[pc, r1]
 800e15e:	2806      	.short	0x2806
 800e160:	0a282828 	.word	0x0a282828
 800e164:	1e28140a 	.word	0x1e28140a
 800e168:	1e          	.byte	0x1e
 800e169:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800e16a:	6800      	ldr	r0, [r0, #0]
 800e16c:	f7ff fe50 	bl	800de10 <VerifyRfFreq>
 800e170:	e01e      	b.n	800e1b0 <RegionCN470Verify+0x5c>
        }
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, CN470_TX_MIN_DATARATE, CN470_TX_MAX_DATARATE );
 800e172:	2205      	movs	r2, #5
 800e174:	2100      	movs	r1, #0
 800e176:	f990 0000 	ldrsb.w	r0, [r0]
 800e17a:	f001 f99c 	bl	800f4b6 <RegionCommonValueInRange>
 800e17e:	3800      	subs	r0, #0
 800e180:	bf18      	it	ne
 800e182:	2001      	movne	r0, #1
 800e184:	e014      	b.n	800e1b0 <RegionCN470Verify+0x5c>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, CN470_RX_MIN_DATARATE, CN470_RX_MAX_DATARATE );
 800e186:	2205      	movs	r2, #5
 800e188:	2100      	movs	r1, #0
 800e18a:	f990 0000 	ldrsb.w	r0, [r0]
 800e18e:	f001 f992 	bl	800f4b6 <RegionCommonValueInRange>
 800e192:	3800      	subs	r0, #0
 800e194:	bf18      	it	ne
 800e196:	2001      	movne	r0, #1
 800e198:	e00a      	b.n	800e1b0 <RegionCN470Verify+0x5c>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, CN470_MAX_TX_POWER, CN470_MIN_TX_POWER );
 800e19a:	2207      	movs	r2, #7
 800e19c:	2100      	movs	r1, #0
 800e19e:	f990 0000 	ldrsb.w	r0, [r0]
 800e1a2:	f001 f988 	bl	800f4b6 <RegionCommonValueInRange>
 800e1a6:	3800      	subs	r0, #0
 800e1a8:	bf18      	it	ne
 800e1aa:	2001      	movne	r0, #1
 800e1ac:	e000      	b.n	800e1b0 <RegionCN470Verify+0x5c>
{
 800e1ae:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_CN470 */
}
 800e1b0:	bd08      	pop	{r3, pc}
	...

0800e1b4 <RegionCN470ApplyCFList>:

void RegionCN470ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_CN470 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800e1b4:	7903      	ldrb	r3, [r0, #4]
 800e1b6:	2b10      	cmp	r3, #16
 800e1b8:	d120      	bne.n	800e1fc <RegionCN470ApplyCFList+0x48>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800e1ba:	6803      	ldr	r3, [r0, #0]
 800e1bc:	7bdb      	ldrb	r3, [r3, #15]
 800e1be:	2b01      	cmp	r3, #1
 800e1c0:	d11c      	bne.n	800e1fc <RegionCN470ApplyCFList+0x48>
    {
        return;
    }

    // ChMask0 - ChMask5 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 5; chMaskItr++, cntPayload+=2 )
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	4613      	mov	r3, r2
 800e1c6:	2a05      	cmp	r2, #5
 800e1c8:	d817      	bhi.n	800e1fa <RegionCN470ApplyCFList+0x46>
{
 800e1ca:	b470      	push	{r4, r5, r6}
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800e1cc:	6801      	ldr	r1, [r0, #0]
 800e1ce:	4c0c      	ldr	r4, [pc, #48]	; (800e200 <RegionCN470ApplyCFList+0x4c>)
 800e1d0:	6825      	ldr	r5, [r4, #0]
 800e1d2:	5c89      	ldrb	r1, [r1, r2]
 800e1d4:	f503 7610 	add.w	r6, r3, #576	; 0x240
 800e1d8:	f825 1016 	strh.w	r1, [r5, r6, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800e1dc:	6804      	ldr	r4, [r0, #0]
 800e1de:	4414      	add	r4, r2
 800e1e0:	7864      	ldrb	r4, [r4, #1]
 800e1e2:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 800e1e6:	f825 1016 	strh.w	r1, [r5, r6, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 5; chMaskItr++, cntPayload+=2 )
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	b2db      	uxtb	r3, r3
 800e1ee:	3202      	adds	r2, #2
 800e1f0:	b2d2      	uxtb	r2, r2
 800e1f2:	2b05      	cmp	r3, #5
 800e1f4:	d9ea      	bls.n	800e1cc <RegionCN470ApplyCFList+0x18>
    }
#endif /* REGION_CN470 */
}
 800e1f6:	bc70      	pop	{r4, r5, r6}
 800e1f8:	4770      	bx	lr
 800e1fa:	4770      	bx	lr
 800e1fc:	4770      	bx	lr
 800e1fe:	bf00      	nop
 800e200:	20001440 	.word	0x20001440

0800e204 <RegionCN470ChanMaskSet>:

bool RegionCN470ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800e204:	b508      	push	{r3, lr}
#if defined( REGION_CN470 )
    switch( chanMaskSet->ChannelsMaskType )
 800e206:	7903      	ldrb	r3, [r0, #4]
 800e208:	b11b      	cbz	r3, 800e212 <RegionCN470ChanMaskSet+0xe>
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d00b      	beq.n	800e226 <RegionCN470ChanMaskSet+0x22>
 800e20e:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_CN470 */
}
 800e210:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800e212:	4b0a      	ldr	r3, [pc, #40]	; (800e23c <RegionCN470ChanMaskSet+0x38>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	2206      	movs	r2, #6
 800e218:	6801      	ldr	r1, [r0, #0]
 800e21a:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800e21e:	f001 f9bc 	bl	800f59a <RegionCommonChanMaskCopy>
    return true;
 800e222:	2001      	movs	r0, #1
            break;
 800e224:	e7f4      	b.n	800e210 <RegionCN470ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800e226:	4b05      	ldr	r3, [pc, #20]	; (800e23c <RegionCN470ChanMaskSet+0x38>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	2206      	movs	r2, #6
 800e22c:	6801      	ldr	r1, [r0, #0]
 800e22e:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 800e232:	f001 f9b2 	bl	800f59a <RegionCommonChanMaskCopy>
    return true;
 800e236:	2001      	movs	r0, #1
            break;
 800e238:	e7ea      	b.n	800e210 <RegionCN470ChanMaskSet+0xc>
 800e23a:	bf00      	nop
 800e23c:	20001440 	.word	0x20001440

0800e240 <RegionCN470ComputeRxWindowParameters>:

void RegionCN470ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800e240:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e242:	b083      	sub	sp, #12
 800e244:	460e      	mov	r6, r1
 800e246:	4617      	mov	r7, r2
 800e248:	461c      	mov	r4, r3
#if defined( REGION_CN470 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, CN470_RX_MAX_DATARATE );
 800e24a:	2805      	cmp	r0, #5
 800e24c:	bfa8      	it	ge
 800e24e:	2005      	movge	r0, #5
 800e250:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsCN470 );
 800e252:	4d0f      	ldr	r5, [pc, #60]	; (800e290 <RegionCN470ComputeRxWindowParameters+0x50>)
 800e254:	4629      	mov	r1, r5
 800e256:	f001 fbe9 	bl	800fa2c <RegionCommonGetBandwidth>
 800e25a:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesCN470[rxConfigParams->Datarate], BandwidthsCN470[rxConfigParams->Datarate] );
 800e25c:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800e260:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800e264:	4a0b      	ldr	r2, [pc, #44]	; (800e294 <RegionCN470ComputeRxWindowParameters+0x54>)
 800e266:	5cd0      	ldrb	r0, [r2, r3]
 800e268:	f001 fab0 	bl	800f7cc <RegionCommonComputeSymbolTimeLoRa>
 800e26c:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800e26e:	4b0a      	ldr	r3, [pc, #40]	; (800e298 <RegionCN470ComputeRxWindowParameters+0x58>)
 800e270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e272:	4798      	blx	r3
 800e274:	4603      	mov	r3, r0
 800e276:	f104 020c 	add.w	r2, r4, #12
 800e27a:	9201      	str	r2, [sp, #4]
 800e27c:	3408      	adds	r4, #8
 800e27e:	9400      	str	r4, [sp, #0]
 800e280:	463a      	mov	r2, r7
 800e282:	4631      	mov	r1, r6
 800e284:	4628      	mov	r0, r5
 800e286:	f001 faaf 	bl	800f7e8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_CN470 */
}
 800e28a:	b003      	add	sp, #12
 800e28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e28e:	bf00      	nop
 800e290:	08017be0 	.word	0x08017be0
 800e294:	08017bf8 	.word	0x08017bf8
 800e298:	08018318 	.word	0x08018318

0800e29c <RegionCN470RxConfig>:

bool RegionCN470RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800e29c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e2a0:	b08b      	sub	sp, #44	; 0x2c
 800e2a2:	4604      	mov	r4, r0
 800e2a4:	460e      	mov	r6, r1
#if defined( REGION_CN470 )
    int8_t dr = rxConfig->Datarate;
 800e2a6:	f990 7001 	ldrsb.w	r7, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800e2aa:	6845      	ldr	r5, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800e2ac:	4b26      	ldr	r3, [pc, #152]	; (800e348 <RegionCN470RxConfig+0xac>)
 800e2ae:	685b      	ldr	r3, [r3, #4]
 800e2b0:	4798      	blx	r3
 800e2b2:	2800      	cmp	r0, #0
 800e2b4:	d145      	bne.n	800e342 <RegionCN470RxConfig+0xa6>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800e2b6:	7ce3      	ldrb	r3, [r4, #19]
 800e2b8:	b973      	cbnz	r3, 800e2d8 <RegionCN470RxConfig+0x3c>
    {
        // Apply window 1 frequency
        frequency = CN470_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 48 ) * CN470_STEPWIDTH_RX1_CHANNEL;
 800e2ba:	7825      	ldrb	r5, [r4, #0]
 800e2bc:	f1a3 3355 	sub.w	r3, r3, #1431655765	; 0x55555555
 800e2c0:	fba3 2305 	umull	r2, r3, r3, r5
 800e2c4:	095b      	lsrs	r3, r3, #5
 800e2c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e2ca:	eba5 1503 	sub.w	r5, r5, r3, lsl #4
 800e2ce:	b2ed      	uxtb	r5, r5
 800e2d0:	4a1e      	ldr	r2, [pc, #120]	; (800e34c <RegionCN470RxConfig+0xb0>)
 800e2d2:	4b1f      	ldr	r3, [pc, #124]	; (800e350 <RegionCN470RxConfig+0xb4>)
 800e2d4:	fb02 3505 	mla	r5, r2, r5, r3
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesCN470[dr];
 800e2d8:	4b1e      	ldr	r3, [pc, #120]	; (800e354 <RegionCN470RxConfig+0xb8>)
 800e2da:	f913 9007 	ldrsb.w	r9, [r3, r7]

    Radio.SetChannel( frequency );
 800e2de:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800e348 <RegionCN470RxConfig+0xac>
 800e2e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e2e6:	4628      	mov	r0, r5
 800e2e8:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800e2ea:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800e2ee:	7ca3      	ldrb	r3, [r4, #18]
 800e2f0:	9309      	str	r3, [sp, #36]	; 0x24
 800e2f2:	2001      	movs	r0, #1
 800e2f4:	9008      	str	r0, [sp, #32]
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	9207      	str	r2, [sp, #28]
 800e2fa:	9206      	str	r2, [sp, #24]
 800e2fc:	9205      	str	r2, [sp, #20]
 800e2fe:	9204      	str	r2, [sp, #16]
 800e300:	9203      	str	r2, [sp, #12]
 800e302:	8923      	ldrh	r3, [r4, #8]
 800e304:	9302      	str	r3, [sp, #8]
 800e306:	2308      	movs	r3, #8
 800e308:	9301      	str	r3, [sp, #4]
 800e30a:	9200      	str	r2, [sp, #0]
 800e30c:	4603      	mov	r3, r0
 800e30e:	464a      	mov	r2, r9
 800e310:	78a1      	ldrb	r1, [r4, #2]
 800e312:	47c0      	blx	r8
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800e314:	7c63      	ldrb	r3, [r4, #17]
 800e316:	b18b      	cbz	r3, 800e33c <RegionCN470RxConfig+0xa0>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterCN470[dr];
 800e318:	4b0f      	ldr	r3, [pc, #60]	; (800e358 <RegionCN470RxConfig+0xbc>)
 800e31a:	5dd9      	ldrb	r1, [r3, r7]
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateCN470[dr];
    }
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800e31c:	4b0a      	ldr	r3, [pc, #40]	; (800e348 <RegionCN470RxConfig+0xac>)
 800e31e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e320:	310d      	adds	r1, #13
 800e322:	b2c9      	uxtb	r1, r1
 800e324:	2001      	movs	r0, #1
 800e326:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800e328:	463a      	mov	r2, r7
 800e32a:	4629      	mov	r1, r5
 800e32c:	7ce0      	ldrb	r0, [r4, #19]
 800e32e:	f001 fb8f 	bl	800fa50 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800e332:	7037      	strb	r7, [r6, #0]
    return true;
 800e334:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_CN470 */
}
 800e336:	b00b      	add	sp, #44	; 0x2c
 800e338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateCN470[dr];
 800e33c:	4b07      	ldr	r3, [pc, #28]	; (800e35c <RegionCN470RxConfig+0xc0>)
 800e33e:	5dd9      	ldrb	r1, [r3, r7]
 800e340:	e7ec      	b.n	800e31c <RegionCN470RxConfig+0x80>
        return false;
 800e342:	2000      	movs	r0, #0
 800e344:	e7f7      	b.n	800e336 <RegionCN470RxConfig+0x9a>
 800e346:	bf00      	nop
 800e348:	08018318 	.word	0x08018318
 800e34c:	00030d40 	.word	0x00030d40
 800e350:	1dd1f8e0 	.word	0x1dd1f8e0
 800e354:	08017bf8 	.word	0x08017bf8
 800e358:	08017c08 	.word	0x08017c08
 800e35c:	08017c00 	.word	0x08017c00

0800e360 <RegionCN470TxConfig>:

bool RegionCN470TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800e360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e364:	b08d      	sub	sp, #52	; 0x34
 800e366:	4604      	mov	r4, r0
 800e368:	910b      	str	r1, [sp, #44]	; 0x2c
 800e36a:	4690      	mov	r8, r2
#if defined( REGION_CN470 )
    int8_t phyDr = DataratesCN470[txConfig->Datarate];
 800e36c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e370:	4a31      	ldr	r2, [pc, #196]	; (800e438 <RegionCN470TxConfig+0xd8>)
 800e372:	f912 b003 	ldrsb.w	fp, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800e376:	4b31      	ldr	r3, [pc, #196]	; (800e43c <RegionCN470TxConfig+0xdc>)
 800e378:	6819      	ldr	r1, [r3, #0]
 800e37a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e444 <RegionCN470TxConfig+0xe4>
 800e37e:	f8da 3000 	ldr.w	r3, [sl]
 800e382:	7802      	ldrb	r2, [r0, #0]
 800e384:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e388:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e38c:	7a53      	ldrb	r3, [r2, #9]
 800e38e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e392:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800e396:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800e39a:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800e39e:	f001 fb40 	bl	800fa22 <RegionCommonLimitTxPower>
 800e3a2:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsCN470 );
 800e3a4:	4926      	ldr	r1, [pc, #152]	; (800e440 <RegionCN470TxConfig+0xe0>)
 800e3a6:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e3aa:	f001 fb3f 	bl	800fa2c <RegionCommonGetBandwidth>
 800e3ae:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800e3b0:	68a2      	ldr	r2, [r4, #8]
 800e3b2:	6861      	ldr	r1, [r4, #4]
 800e3b4:	4630      	mov	r0, r6
 800e3b6:	f001 fa51 	bl	800f85c <RegionCommonComputeTxPower>
 800e3ba:	4607      	mov	r7, r0

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800e3bc:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800e448 <RegionCN470TxConfig+0xe8>
 800e3c0:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800e3c4:	f8da 1000 	ldr.w	r1, [sl]
 800e3c8:	7823      	ldrb	r3, [r4, #0]
 800e3ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e3ce:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800e3d2:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800e3d4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800e3d8:	9308      	str	r3, [sp, #32]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	9207      	str	r2, [sp, #28]
 800e3de:	9206      	str	r2, [sp, #24]
 800e3e0:	9205      	str	r2, [sp, #20]
 800e3e2:	2501      	movs	r5, #1
 800e3e4:	9504      	str	r5, [sp, #16]
 800e3e6:	9203      	str	r2, [sp, #12]
 800e3e8:	2308      	movs	r3, #8
 800e3ea:	9302      	str	r3, [sp, #8]
 800e3ec:	9501      	str	r5, [sp, #4]
 800e3ee:	f8cd b000 	str.w	fp, [sp]
 800e3f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3f4:	4639      	mov	r1, r7
 800e3f6:	4628      	mov	r0, r5
 800e3f8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800e3fc:	47b8      	blx	r7
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800e3fe:	f8da 2000 	ldr.w	r2, [sl]
 800e402:	7823      	ldrb	r3, [r4, #0]
 800e404:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e408:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800e40c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e410:	f001 fb4e 	bl	800fab0 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800e414:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 800e418:	7b21      	ldrb	r1, [r4, #12]
 800e41a:	4628      	mov	r0, r5
 800e41c:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800e41e:	89a1      	ldrh	r1, [r4, #12]
 800e420:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e424:	f7ff fd22 	bl	800de6c <GetTimeOnAir>
 800e428:	f8c8 0000 	str.w	r0, [r8]

    *txPower = txPowerLimited;
 800e42c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e42e:	701e      	strb	r6, [r3, #0]
    return true;
#else
    return false;
#endif /* REGION_CN470 */
}
 800e430:	4628      	mov	r0, r5
 800e432:	b00d      	add	sp, #52	; 0x34
 800e434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e438:	08017bf8 	.word	0x08017bf8
 800e43c:	2000143c 	.word	0x2000143c
 800e440:	08017be0 	.word	0x08017be0
 800e444:	20001440 	.word	0x20001440
 800e448:	08018318 	.word	0x08018318

0800e44c <RegionCN470LinkAdrReq>:

uint8_t RegionCN470LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800e44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e450:	b091      	sub	sp, #68	; 0x44
 800e452:	4680      	mov	r8, r0
 800e454:	468b      	mov	fp, r1
 800e456:	4692      	mov	sl, r2
 800e458:	4699      	mov	r9, r3
    uint8_t status = 0x07;
#if defined( REGION_CN470 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800e45a:	2600      	movs	r6, #0
 800e45c:	960e      	str	r6, [sp, #56]	; 0x38
 800e45e:	f8ad 603c 	strh.w	r6, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 800e462:	960b      	str	r6, [sp, #44]	; 0x2c
 800e464:	960c      	str	r6, [sp, #48]	; 0x30
 800e466:	960d      	str	r6, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800e468:	4b59      	ldr	r3, [pc, #356]	; (800e5d0 <RegionCN470LinkAdrReq+0x184>)
 800e46a:	6819      	ldr	r1, [r3, #0]
 800e46c:	2206      	movs	r2, #6
 800e46e:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 800e472:	a80b      	add	r0, sp, #44	; 0x2c
 800e474:	f001 f891 	bl	800f59a <RegionCommonChanMaskCopy>
    uint8_t status = 0x07;
 800e478:	2707      	movs	r7, #7

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800e47a:	e00e      	b.n	800e49a <RegionCN470LinkAdrReq+0x4e>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 800e47c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e480:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 800e484:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 800e488:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 800e48c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = 0xFFFF;
 800e490:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
            channelsMask[5] = 0xFFFF;
 800e494:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        status = 0x07;
 800e498:	2707      	movs	r7, #7
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800e49a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e49e:	42b3      	cmp	r3, r6
 800e4a0:	d932      	bls.n	800e508 <RegionCN470LinkAdrReq+0xbc>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800e4a2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e4a6:	a90e      	add	r1, sp, #56	; 0x38
 800e4a8:	4430      	add	r0, r6
 800e4aa:	f001 f927 	bl	800f6fc <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800e4ae:	b358      	cbz	r0, 800e508 <RegionCN470LinkAdrReq+0xbc>
        bytesProcessed += nextIndex;
 800e4b0:	4406      	add	r6, r0
 800e4b2:	b2f6      	uxtb	r6, r6
        if( linkAdrParams.ChMaskCtrl == 6 )
 800e4b4:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 800e4b8:	2a06      	cmp	r2, #6
 800e4ba:	d0df      	beq.n	800e47c <RegionCN470LinkAdrReq+0x30>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800e4bc:	2a07      	cmp	r2, #7
 800e4be:	d101      	bne.n	800e4c4 <RegionCN470LinkAdrReq+0x78>
        {
            status &= 0xFE; // Channel mask KO
 800e4c0:	2706      	movs	r7, #6
 800e4c2:	e7ea      	b.n	800e49a <RegionCN470LinkAdrReq+0x4e>
        }
        else
        {
            for( uint8_t i = 0; i < 16; i++ )
 800e4c4:	2400      	movs	r4, #0
        status = 0x07;
 800e4c6:	2707      	movs	r7, #7
 800e4c8:	e001      	b.n	800e4ce <RegionCN470LinkAdrReq+0x82>
            for( uint8_t i = 0; i < 16; i++ )
 800e4ca:	3401      	adds	r4, #1
 800e4cc:	b2e4      	uxtb	r4, r4
 800e4ce:	2c0f      	cmp	r4, #15
 800e4d0:	d812      	bhi.n	800e4f8 <RegionCN470LinkAdrReq+0xac>
            {
                if( ( ( linkAdrParams.ChMask & ( 1 << i ) ) != 0 ) &&
 800e4d2:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800e4d6:	4125      	asrs	r5, r4
 800e4d8:	f015 0f01 	tst.w	r5, #1
 800e4dc:	d0f5      	beq.n	800e4ca <RegionCN470LinkAdrReq+0x7e>
                    ( RegionNvmGroup2->Channels[linkAdrParams.ChMaskCtrl * 16 + i].Frequency == 0 ) )
 800e4de:	4b3c      	ldr	r3, [pc, #240]	; (800e5d0 <RegionCN470LinkAdrReq+0x184>)
 800e4e0:	6819      	ldr	r1, [r3, #0]
 800e4e2:	eb04 1302 	add.w	r3, r4, r2, lsl #4
 800e4e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e4ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                if( ( ( linkAdrParams.ChMask & ( 1 << i ) ) != 0 ) &&
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d1eb      	bne.n	800e4ca <RegionCN470LinkAdrReq+0x7e>
                {// Trying to enable an undefined channel
                    status &= 0xFE; // Channel mask KO
 800e4f2:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 800e4f6:	e7e8      	b.n	800e4ca <RegionCN470LinkAdrReq+0x7e>
                }
            }
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800e4f8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800e4fc:	a910      	add	r1, sp, #64	; 0x40
 800e4fe:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800e502:	f822 3c14 	strh.w	r3, [r2, #-20]
 800e506:	e7c8      	b.n	800e49a <RegionCN470LinkAdrReq+0x4e>
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800e508:	2302      	movs	r3, #2
 800e50a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800e50e:	f898 3009 	ldrb.w	r3, [r8, #9]
 800e512:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionCN470GetPhyParam( &getPhy );
 800e516:	a809      	add	r0, sp, #36	; 0x24
 800e518:	f7ff fcc6 	bl	800dea8 <RegionCN470GetPhyParam>

    linkAdrVerifyParams.Status = status;
 800e51c:	f88d 7004 	strb.w	r7, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800e520:	f898 300a 	ldrb.w	r3, [r8, #10]
 800e524:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800e528:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800e52c:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800e530:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800e534:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800e538:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800e53c:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800e540:	f998 300b 	ldrsb.w	r3, [r8, #11]
 800e544:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800e548:	f998 300c 	ldrsb.w	r3, [r8, #12]
 800e54c:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800e550:	f998 300d 	ldrsb.w	r3, [r8, #13]
 800e554:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = CN470_MAX_NB_CHANNELS;
 800e558:	2360      	movs	r3, #96	; 0x60
 800e55a:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800e55e:	ab0b      	add	r3, sp, #44	; 0x2c
 800e560:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800e562:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = CN470_TX_MAX_DATARATE;
 800e566:	2305      	movs	r3, #5
 800e568:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800e56c:	4b18      	ldr	r3, [pc, #96]	; (800e5d0 <RegionCN470LinkAdrReq+0x184>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = CN470_MIN_TX_POWER;
 800e572:	2307      	movs	r3, #7
 800e574:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = CN470_MAX_TX_POWER;
 800e578:	2300      	movs	r3, #0
 800e57a:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800e57e:	f8d8 3000 	ldr.w	r3, [r8]
 800e582:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800e584:	ab0e      	add	r3, sp, #56	; 0x38
 800e586:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800e58a:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 800e58e:	4668      	mov	r0, sp
 800e590:	f001 f8d0 	bl	800f734 <RegionCommonLinkAdrReqVerifyParams>
 800e594:	4604      	mov	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800e596:	2807      	cmp	r0, #7
 800e598:	d011      	beq.n	800e5be <RegionCN470LinkAdrReq+0x172>
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800e59a:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800e59e:	f88b 3000 	strb.w	r3, [fp]
    *txPowOut = linkAdrParams.TxPower;
 800e5a2:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800e5a6:	f88a 3000 	strb.w	r3, [sl]
    *nbRepOut = linkAdrParams.NbRep;
 800e5aa:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800e5ae:	f889 3000 	strb.w	r3, [r9]
    *nbBytesParsed = bytesProcessed;
 800e5b2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e5b4:	701e      	strb	r6, [r3, #0]

#endif /* REGION_CN470 */
    return status;
}
 800e5b6:	4620      	mov	r0, r4
 800e5b8:	b011      	add	sp, #68	; 0x44
 800e5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800e5be:	4b04      	ldr	r3, [pc, #16]	; (800e5d0 <RegionCN470LinkAdrReq+0x184>)
 800e5c0:	6818      	ldr	r0, [r3, #0]
 800e5c2:	2206      	movs	r2, #6
 800e5c4:	a90b      	add	r1, sp, #44	; 0x2c
 800e5c6:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800e5ca:	f000 ffe6 	bl	800f59a <RegionCommonChanMaskCopy>
 800e5ce:	e7e4      	b.n	800e59a <RegionCN470LinkAdrReq+0x14e>
 800e5d0:	20001440 	.word	0x20001440

0800e5d4 <RegionCN470RxParamSetupReq>:

uint8_t RegionCN470RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800e5d4:	b538      	push	{r3, r4, r5, lr}
 800e5d6:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_CN470 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800e5d8:	6840      	ldr	r0, [r0, #4]
 800e5da:	f7ff fc19 	bl	800de10 <VerifyRfFreq>
 800e5de:	b1a0      	cbz	r0, 800e60a <RegionCN470RxParamSetupReq+0x36>
    uint8_t status = 0x07;
 800e5e0:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, CN470_RX_MIN_DATARATE, CN470_RX_MAX_DATARATE ) == false )
 800e5e2:	2205      	movs	r2, #5
 800e5e4:	2100      	movs	r1, #0
 800e5e6:	f994 0000 	ldrsb.w	r0, [r4]
 800e5ea:	f000 ff64 	bl	800f4b6 <RegionCommonValueInRange>
 800e5ee:	b908      	cbnz	r0, 800e5f4 <RegionCN470RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800e5f0:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, CN470_MIN_RX1_DR_OFFSET, CN470_MAX_RX1_DR_OFFSET ) == false )
 800e5f4:	2205      	movs	r2, #5
 800e5f6:	2100      	movs	r1, #0
 800e5f8:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e5fc:	f000 ff5b 	bl	800f4b6 <RegionCommonValueInRange>
 800e600:	b908      	cbnz	r0, 800e606 <RegionCN470RxParamSetupReq+0x32>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800e602:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_CN470 */
    return status;
}
 800e606:	4628      	mov	r0, r5
 800e608:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800e60a:	2506      	movs	r5, #6
 800e60c:	e7e9      	b.n	800e5e2 <RegionCN470RxParamSetupReq+0xe>

0800e60e <RegionCN470NewChannelReq>:

int8_t RegionCN470NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 800e60e:	f04f 30ff 	mov.w	r0, #4294967295
 800e612:	4770      	bx	lr

0800e614 <RegionCN470TxParamSetupReq>:

int8_t RegionCN470TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800e614:	f04f 30ff 	mov.w	r0, #4294967295
 800e618:	4770      	bx	lr

0800e61a <RegionCN470DlChannelReq>:

int8_t RegionCN470DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 800e61a:	f04f 30ff 	mov.w	r0, #4294967295
 800e61e:	4770      	bx	lr

0800e620 <RegionCN470AlternateDr>:
#if defined( REGION_CN470 )
    return currentDr;
#else
    return -1;
#endif /* REGION_CN470 */
}
 800e620:	4770      	bx	lr
	...

0800e624 <RegionCN470NextChannel>:

LoRaMacStatus_t RegionCN470NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800e624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e628:	b0aa      	sub	sp, #168	; 0xa8
 800e62a:	4604      	mov	r4, r0
 800e62c:	4688      	mov	r8, r1
 800e62e:	4617      	mov	r7, r2
 800e630:	461e      	mov	r6, r3
#if defined( REGION_CN470 )
    uint8_t nbEnabledChannels = 0;
 800e632:	2500      	movs	r5, #0
 800e634:	f88d 50a7 	strb.w	r5, [sp, #167]	; 0xa7
    uint8_t nbRestrictedChannels = 0;
 800e638:	f88d 50a6 	strb.w	r5, [sp, #166]	; 0xa6
    uint8_t enabledChannels[CN470_MAX_NB_CHANNELS] = { 0 };
 800e63c:	9511      	str	r5, [sp, #68]	; 0x44
 800e63e:	225c      	movs	r2, #92	; 0x5c
 800e640:	4629      	mov	r1, r5
 800e642:	a812      	add	r0, sp, #72	; 0x48
 800e644:	f008 fe7a 	bl	801733c <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, CHANNELS_MASK_SIZE ) == 0 )
 800e648:	4b31      	ldr	r3, [pc, #196]	; (800e710 <RegionCN470NextChannel+0xec>)
 800e64a:	6818      	ldr	r0, [r3, #0]
 800e64c:	2206      	movs	r2, #6
 800e64e:	4629      	mov	r1, r5
 800e650:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800e654:	f000 ff8b 	bl	800f56e <RegionCommonCountChannels>
 800e658:	b978      	cbnz	r0, 800e67a <RegionCN470NextChannel+0x56>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] = 0xFFFF;
 800e65a:	4b2d      	ldr	r3, [pc, #180]	; (800e710 <RegionCN470NextChannel+0xec>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e662:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
        RegionNvmGroup2->ChannelsMask[1] = 0xFFFF;
 800e666:	f8a3 2482 	strh.w	r2, [r3, #1154]	; 0x482
        RegionNvmGroup2->ChannelsMask[2] = 0xFFFF;
 800e66a:	f8a3 2484 	strh.w	r2, [r3, #1156]	; 0x484
        RegionNvmGroup2->ChannelsMask[3] = 0xFFFF;
 800e66e:	f8a3 2486 	strh.w	r2, [r3, #1158]	; 0x486
        RegionNvmGroup2->ChannelsMask[4] = 0xFFFF;
 800e672:	f8a3 2488 	strh.w	r2, [r3, #1160]	; 0x488
        RegionNvmGroup2->ChannelsMask[5] = 0xFFFF;
 800e676:	f8a3 248a 	strh.w	r2, [r3, #1162]	; 0x48a
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800e67a:	7a63      	ldrb	r3, [r4, #9]
 800e67c:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800e680:	7a23      	ldrb	r3, [r4, #8]
 800e682:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800e686:	4b22      	ldr	r3, [pc, #136]	; (800e710 <RegionCN470NextChannel+0xec>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f503 6290 	add.w	r2, r3, #1152	; 0x480
 800e68e:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800e690:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800e692:	4b20      	ldr	r3, [pc, #128]	; (800e714 <RegionCN470NextChannel+0xf0>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = CN470_MAX_NB_CHANNELS;
 800e698:	2360      	movs	r3, #96	; 0x60
 800e69a:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800e6a2:	6823      	ldr	r3, [r4, #0]
 800e6a4:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800e6a6:	6863      	ldr	r3, [r4, #4]
 800e6a8:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800e6aa:	7aa3      	ldrb	r3, [r4, #10]
 800e6ac:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = CN470_MAX_NB_BANDS;
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800e6b6:	ab0c      	add	r3, sp, #48	; 0x30
 800e6b8:	6921      	ldr	r1, [r4, #16]
 800e6ba:	68e0      	ldr	r0, [r4, #12]
 800e6bc:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800e6c0:	7d23      	ldrb	r3, [r4, #20]
 800e6c2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800e6c6:	8ae1      	ldrh	r1, [r4, #22]
 800e6c8:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800e6cc:	f7ff fbce 	bl	800de6c <GetTimeOnAir>
 800e6d0:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800e6d2:	ab03      	add	r3, sp, #12
 800e6d4:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800e6d6:	9701      	str	r7, [sp, #4]
 800e6d8:	f10d 03a6 	add.w	r3, sp, #166	; 0xa6
 800e6dc:	9300      	str	r3, [sp, #0]
 800e6de:	f10d 03a7 	add.w	r3, sp, #167	; 0xa7
 800e6e2:	aa11      	add	r2, sp, #68	; 0x44
 800e6e4:	4631      	mov	r1, r6
 800e6e6:	a809      	add	r0, sp, #36	; 0x24
 800e6e8:	f001 f934 	bl	800f954 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800e6ec:	4604      	mov	r4, r0
 800e6ee:	b118      	cbz	r0, 800e6f8 <RegionCN470NextChannel+0xd4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_CN470 */
}
 800e6f0:	4620      	mov	r0, r4
 800e6f2:	b02a      	add	sp, #168	; 0xa8
 800e6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800e6f8:	f89d 10a7 	ldrb.w	r1, [sp, #167]	; 0xa7
 800e6fc:	3901      	subs	r1, #1
 800e6fe:	f005 feb5 	bl	801446c <randr>
 800e702:	ab2a      	add	r3, sp, #168	; 0xa8
 800e704:	4418      	add	r0, r3
 800e706:	f810 3c64 	ldrb.w	r3, [r0, #-100]
 800e70a:	f888 3000 	strb.w	r3, [r8]
 800e70e:	e7ef      	b.n	800e6f0 <RegionCN470NextChannel+0xcc>
 800e710:	20001440 	.word	0x20001440
 800e714:	2000143c 	.word	0x2000143c

0800e718 <RegionCN470SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionCN470SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800e718:	b538      	push	{r3, r4, r5, lr}
 800e71a:	4604      	mov	r4, r0
#if defined( REGION_CN470 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800e71c:	4b12      	ldr	r3, [pc, #72]	; (800e768 <RegionCN470SetContinuousWave+0x50>)
 800e71e:	6819      	ldr	r1, [r3, #0]
 800e720:	4d12      	ldr	r5, [pc, #72]	; (800e76c <RegionCN470SetContinuousWave+0x54>)
 800e722:	682b      	ldr	r3, [r5, #0]
 800e724:	7802      	ldrb	r2, [r0, #0]
 800e726:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e72a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e72e:	7a53      	ldrb	r3, [r2, #9]
 800e730:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e734:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800e738:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800e73c:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800e740:	f001 f96f 	bl	800fa22 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800e744:	682a      	ldr	r2, [r5, #0]
 800e746:	7823      	ldrb	r3, [r4, #0]
 800e748:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e74c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800e750:	68a2      	ldr	r2, [r4, #8]
 800e752:	6861      	ldr	r1, [r4, #4]
 800e754:	f001 f882 	bl	800f85c <RegionCommonComputeTxPower>
 800e758:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800e75a:	4b05      	ldr	r3, [pc, #20]	; (800e770 <RegionCN470SetContinuousWave+0x58>)
 800e75c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e75e:	89a2      	ldrh	r2, [r4, #12]
 800e760:	4628      	mov	r0, r5
 800e762:	4798      	blx	r3
#endif /* REGION_CN470 */
}
 800e764:	bd38      	pop	{r3, r4, r5, pc}
 800e766:	bf00      	nop
 800e768:	2000143c 	.word	0x2000143c
 800e76c:	20001440 	.word	0x20001440
 800e770:	08018318 	.word	0x08018318

0800e774 <RegionCN470ApplyDrOffset>:

uint8_t RegionCN470ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_CN470 )
    int8_t datarate = dr - drOffset;
 800e774:	1a88      	subs	r0, r1, r2
 800e776:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800e778:	2800      	cmp	r0, #0
 800e77a:	db01      	blt.n	800e780 <RegionCN470ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_CN470 */
}
 800e77c:	b2c0      	uxtb	r0, r0
 800e77e:	4770      	bx	lr
        datarate = DR_0;
 800e780:	2000      	movs	r0, #0
 800e782:	e7fb      	b.n	800e77c <RegionCN470ApplyDrOffset+0x8>

0800e784 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 800e784:	b510      	push	{r4, lr}
 800e786:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800e788:	4b05      	ldr	r3, [pc, #20]	; (800e7a0 <VerifyRfFreq+0x1c>)
 800e78a:	6a1b      	ldr	r3, [r3, #32]
 800e78c:	4798      	blx	r3
 800e78e:	b120      	cbz	r0, 800e79a <VerifyRfFreq+0x16>
    {
        return false;
    }

    if( ( freq < 779500000 ) || ( freq > 786500000 ) )
 800e790:	4b04      	ldr	r3, [pc, #16]	; (800e7a4 <VerifyRfFreq+0x20>)
 800e792:	4423      	add	r3, r4
 800e794:	4a04      	ldr	r2, [pc, #16]	; (800e7a8 <VerifyRfFreq+0x24>)
 800e796:	4293      	cmp	r3, r2
 800e798:	d800      	bhi.n	800e79c <VerifyRfFreq+0x18>
    {
        return false;
    }
    return true;
}
 800e79a:	bd10      	pop	{r4, pc}
        return false;
 800e79c:	2000      	movs	r0, #0
 800e79e:	e7fc      	b.n	800e79a <VerifyRfFreq+0x16>
 800e7a0:	08018318 	.word	0x08018318
 800e7a4:	d189c620 	.word	0xd189c620
 800e7a8:	006acfc0 	.word	0x006acfc0

0800e7ac <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800e7ac:	b570      	push	{r4, r5, r6, lr}
 800e7ae:	b084      	sub	sp, #16
 800e7b0:	4605      	mov	r5, r0
 800e7b2:	460c      	mov	r4, r1
    int8_t phyDr = DataratesCN779[datarate];
 800e7b4:	4b13      	ldr	r3, [pc, #76]	; (800e804 <GetTimeOnAir+0x58>)
 800e7b6:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsCN779 );
 800e7b8:	4913      	ldr	r1, [pc, #76]	; (800e808 <GetTimeOnAir+0x5c>)
 800e7ba:	f001 f937 	bl	800fa2c <RegionCommonGetBandwidth>
 800e7be:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800e7c0:	2d07      	cmp	r5, #7
 800e7c2:	d00e      	beq.n	800e7e2 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800e7c4:	4b11      	ldr	r3, [pc, #68]	; (800e80c <GetTimeOnAir+0x60>)
 800e7c6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800e7c8:	2001      	movs	r0, #1
 800e7ca:	9003      	str	r0, [sp, #12]
 800e7cc:	b2e4      	uxtb	r4, r4
 800e7ce:	9402      	str	r4, [sp, #8]
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	9301      	str	r3, [sp, #4]
 800e7d4:	2308      	movs	r3, #8
 800e7d6:	9300      	str	r3, [sp, #0]
 800e7d8:	4603      	mov	r3, r0
 800e7da:	4632      	mov	r2, r6
 800e7dc:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800e7de:	b004      	add	sp, #16
 800e7e0:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800e7e2:	4b0a      	ldr	r3, [pc, #40]	; (800e80c <GetTimeOnAir+0x60>)
 800e7e4:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	9303      	str	r3, [sp, #12]
 800e7ea:	b2e4      	uxtb	r4, r4
 800e7ec:	9402      	str	r4, [sp, #8]
 800e7ee:	2000      	movs	r0, #0
 800e7f0:	9001      	str	r0, [sp, #4]
 800e7f2:	2305      	movs	r3, #5
 800e7f4:	9300      	str	r3, [sp, #0]
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e7fc:	fb02 f206 	mul.w	r2, r2, r6
 800e800:	47a8      	blx	r5
 800e802:	e7ec      	b.n	800e7de <GetTimeOnAir+0x32>
 800e804:	08017c30 	.word	0x08017c30
 800e808:	08017c10 	.word	0x08017c10
 800e80c:	08018318 	.word	0x08018318

0800e810 <RegionCN779GetPhyParam>:
#endif /* REGION_CN779 */

PhyParam_t RegionCN779GetPhyParam( GetPhyParams_t* getPhy )
{
 800e810:	b500      	push	{lr}
 800e812:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800e814:	2300      	movs	r3, #0
 800e816:	9304      	str	r3, [sp, #16]

#if defined( REGION_CN779 )
    switch( getPhy->Attribute )
 800e818:	7803      	ldrb	r3, [r0, #0]
 800e81a:	3b0b      	subs	r3, #11
 800e81c:	2b2e      	cmp	r3, #46	; 0x2e
 800e81e:	d830      	bhi.n	800e882 <RegionCN779GetPhyParam+0x72>
 800e820:	e8df f003 	tbb	[pc, r3]
 800e824:	3f393633 	.word	0x3f393633
 800e828:	504c4845 	.word	0x504c4845
 800e82c:	605c5854 	.word	0x605c5854
 800e830:	6c2f692f 	.word	0x6c2f692f
 800e834:	2f7b7872 	.word	0x2f7b7872
 800e838:	18827f2f 	.word	0x18827f2f
 800e83c:	2f2f2f2f 	.word	0x2f2f2f2f
 800e840:	2f2f2f2f 	.word	0x2f2f2f2f
 800e844:	2f2f2f2f 	.word	0x2f2f2f2f
 800e848:	9288852f 	.word	0x9288852f
 800e84c:	98952f2f 	.word	0x98952f2f
 800e850:	9b2f      	.short	0x9b2f
 800e852:	a1          	.byte	0xa1
 800e853:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800e854:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800e858:	f88d 3004 	strb.w	r3, [sp, #4]
 800e85c:	2307      	movs	r3, #7
 800e85e:	f88d 3005 	strb.w	r3, [sp, #5]
 800e862:	2300      	movs	r3, #0
 800e864:	f88d 3006 	strb.w	r3, [sp, #6]
 800e868:	2310      	movs	r3, #16
 800e86a:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )CN779_TX_MAX_DATARATE,
                .MinDr = ( int8_t )CN779_TX_MIN_DATARATE,
                .NbChannels = CN779_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800e86e:	4b41      	ldr	r3, [pc, #260]	; (800e974 <RegionCN779GetPhyParam+0x164>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800e876:	9202      	str	r2, [sp, #8]
 800e878:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800e87a:	a801      	add	r0, sp, #4
 800e87c:	f001 f8b2 	bl	800f9e4 <RegionCommonGetNextLowerTxDr>
 800e880:	9004      	str	r0, [sp, #16]
        }
    }

#endif /* REGION_CN779 */
    return phyParam;
}
 800e882:	9804      	ldr	r0, [sp, #16]
 800e884:	b007      	add	sp, #28
 800e886:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800e88a:	2340      	movs	r3, #64	; 0x40
 800e88c:	9304      	str	r3, [sp, #16]
            break;
 800e88e:	e7f8      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800e890:	2320      	movs	r3, #32
 800e892:	9304      	str	r3, [sp, #16]
            break;
 800e894:	e7f5      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateCN779[getPhy->Datarate];
 800e896:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e89a:	4a37      	ldr	r2, [pc, #220]	; (800e978 <RegionCN779GetPhyParam+0x168>)
 800e89c:	5cd3      	ldrb	r3, [r2, r3]
 800e89e:	9304      	str	r3, [sp, #16]
            break;
 800e8a0:	e7ef      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterCN779[getPhy->Datarate];
 800e8a2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e8a6:	4a35      	ldr	r2, [pc, #212]	; (800e97c <RegionCN779GetPhyParam+0x16c>)
 800e8a8:	5cd3      	ldrb	r3, [r2, r3]
 800e8aa:	9304      	str	r3, [sp, #16]
            break;
 800e8ac:	e7e9      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = CN779_DUTY_CYCLE_ENABLED;
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	9304      	str	r3, [sp, #16]
            break;
 800e8b2:	e7e6      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = CN779_MAX_RX_WINDOW;
 800e8b4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800e8b8:	9304      	str	r3, [sp, #16]
            break;
 800e8ba:	e7e2      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800e8bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e8c0:	9304      	str	r3, [sp, #16]
            break;
 800e8c2:	e7de      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800e8c4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e8c8:	9304      	str	r3, [sp, #16]
            break;
 800e8ca:	e7da      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800e8cc:	f241 3388 	movw	r3, #5000	; 0x1388
 800e8d0:	9304      	str	r3, [sp, #16]
            break;
 800e8d2:	e7d6      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800e8d4:	f241 7370 	movw	r3, #6000	; 0x1770
 800e8d8:	9304      	str	r3, [sp, #16]
            break;
 800e8da:	e7d2      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800e8dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e8e0:	9304      	str	r3, [sp, #16]
            break;
 800e8e2:	e7ce      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800e8e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e8e8:	4825      	ldr	r0, [pc, #148]	; (800e980 <RegionCN779GetPhyParam+0x170>)
 800e8ea:	f005 fdbf 	bl	801446c <randr>
 800e8ee:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800e8f2:	9004      	str	r0, [sp, #16]
            break;
 800e8f4:	e7c5      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = CN779_RX_WND_2_FREQ;
 800e8f6:	4b23      	ldr	r3, [pc, #140]	; (800e984 <RegionCN779GetPhyParam+0x174>)
 800e8f8:	9304      	str	r3, [sp, #16]
            break;
 800e8fa:	e7c2      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800e8fc:	4b1d      	ldr	r3, [pc, #116]	; (800e974 <RegionCN779GetPhyParam+0x164>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800e904:	9304      	str	r3, [sp, #16]
            break;
 800e906:	e7bc      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800e908:	4b1a      	ldr	r3, [pc, #104]	; (800e974 <RegionCN779GetPhyParam+0x164>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800e910:	9304      	str	r3, [sp, #16]
            break;
 800e912:	e7b6      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = CN779_MAX_NB_CHANNELS;
 800e914:	2310      	movs	r3, #16
 800e916:	9304      	str	r3, [sp, #16]
            break;
 800e918:	e7b3      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800e91a:	4b16      	ldr	r3, [pc, #88]	; (800e974 <RegionCN779GetPhyParam+0x164>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	9304      	str	r3, [sp, #16]
            break;
 800e920:	e7af      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
            phyParam.fValue = CN779_DEFAULT_MAX_EIRP;
 800e922:	4b19      	ldr	r3, [pc, #100]	; (800e988 <RegionCN779GetPhyParam+0x178>)
 800e924:	9304      	str	r3, [sp, #16]
            break;
 800e926:	e7ac      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
            phyParam.fValue = CN779_DEFAULT_ANTENNA_GAIN;
 800e928:	4b18      	ldr	r3, [pc, #96]	; (800e98c <RegionCN779GetPhyParam+0x17c>)
 800e92a:	9304      	str	r3, [sp, #16]
            break;
 800e92c:	e7a9      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = CN779_BEACON_CHANNEL_FREQ;
 800e92e:	4b18      	ldr	r3, [pc, #96]	; (800e990 <RegionCN779GetPhyParam+0x180>)
 800e930:	9304      	str	r3, [sp, #16]
            break;
 800e932:	e7a6      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = CN779_BEACON_SIZE;
 800e934:	2311      	movs	r3, #17
 800e936:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = CN779_RFU1_SIZE;
 800e93a:	2302      	movs	r3, #2
 800e93c:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = CN779_RFU2_SIZE;
 800e940:	2300      	movs	r3, #0
 800e942:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800e946:	e79c      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = CN779_BEACON_CHANNEL_DR;
 800e948:	2303      	movs	r3, #3
 800e94a:	9304      	str	r3, [sp, #16]
            break;
 800e94c:	e799      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = CN779_PING_SLOT_CHANNEL_FREQ;
 800e94e:	4b10      	ldr	r3, [pc, #64]	; (800e990 <RegionCN779GetPhyParam+0x180>)
 800e950:	9304      	str	r3, [sp, #16]
            break;
 800e952:	e796      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = CN779_PING_SLOT_CHANNEL_DR;
 800e954:	2303      	movs	r3, #3
 800e956:	9304      	str	r3, [sp, #16]
            break;
 800e958:	e793      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = DataratesCN779[getPhy->Datarate];
 800e95a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e95e:	4a0d      	ldr	r2, [pc, #52]	; (800e994 <RegionCN779GetPhyParam+0x184>)
 800e960:	5cd3      	ldrb	r3, [r2, r3]
 800e962:	9304      	str	r3, [sp, #16]
            break;
 800e964:	e78d      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsCN779 );
 800e966:	490c      	ldr	r1, [pc, #48]	; (800e998 <RegionCN779GetPhyParam+0x188>)
 800e968:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800e96c:	f001 f85e 	bl	800fa2c <RegionCommonGetBandwidth>
 800e970:	9004      	str	r0, [sp, #16]
            break;
 800e972:	e786      	b.n	800e882 <RegionCN779GetPhyParam+0x72>
 800e974:	20001448 	.word	0x20001448
 800e978:	08017c38 	.word	0x08017c38
 800e97c:	08017c40 	.word	0x08017c40
 800e980:	fffffc18 	.word	0xfffffc18
 800e984:	2ed96880 	.word	0x2ed96880
 800e988:	41426666 	.word	0x41426666
 800e98c:	4009999a 	.word	0x4009999a
 800e990:	2eca2640 	.word	0x2eca2640
 800e994:	08017c30 	.word	0x08017c30
 800e998:	08017c10 	.word	0x08017c10

0800e99c <RegionCN779SetBandTxDone>:

void RegionCN779SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800e99c:	b530      	push	{r4, r5, lr}
 800e99e:	b083      	sub	sp, #12
#if defined( REGION_CN779 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800e9a0:	4b0b      	ldr	r3, [pc, #44]	; (800e9d0 <RegionCN779SetBandTxDone+0x34>)
 800e9a2:	681d      	ldr	r5, [r3, #0]
 800e9a4:	4b0b      	ldr	r3, [pc, #44]	; (800e9d4 <RegionCN779SetBandTxDone+0x38>)
 800e9a6:	681a      	ldr	r2, [r3, #0]
 800e9a8:	7803      	ldrb	r3, [r0, #0]
 800e9aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e9ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e9b2:	7a5b      	ldrb	r3, [r3, #9]
 800e9b4:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800e9b8:	6903      	ldr	r3, [r0, #16]
 800e9ba:	9300      	str	r3, [sp, #0]
 800e9bc:	68c3      	ldr	r3, [r0, #12]
 800e9be:	7842      	ldrb	r2, [r0, #1]
 800e9c0:	6881      	ldr	r1, [r0, #8]
 800e9c2:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 800e9c6:	f000 fdf9 	bl	800f5bc <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_CN779 */
}
 800e9ca:	b003      	add	sp, #12
 800e9cc:	bd30      	pop	{r4, r5, pc}
 800e9ce:	bf00      	nop
 800e9d0:	20001444 	.word	0x20001444
 800e9d4:	20001448 	.word	0x20001448

0800e9d8 <RegionCN779InitDefaults>:

void RegionCN779InitDefaults( InitDefaultsParams_t* params )
{
 800e9d8:	b530      	push	{r4, r5, lr}
 800e9da:	b087      	sub	sp, #28
#if defined( REGION_CN779 )
    Band_t bands[CN779_MAX_NB_BANDS] =
 800e9dc:	2364      	movs	r3, #100	; 0x64
 800e9de:	f8ad 3000 	strh.w	r3, [sp]
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	f88d 3002 	strb.w	r3, [sp, #2]
 800e9e8:	9301      	str	r3, [sp, #4]
 800e9ea:	9302      	str	r3, [sp, #8]
 800e9ec:	9303      	str	r3, [sp, #12]
 800e9ee:	9304      	str	r3, [sp, #16]
 800e9f0:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        CN779_BAND0
    };

    switch( params->Type )
 800e9f4:	7a03      	ldrb	r3, [r0, #8]
 800e9f6:	2b01      	cmp	r3, #1
 800e9f8:	d032      	beq.n	800ea60 <RegionCN779InitDefaults+0x88>
 800e9fa:	2b02      	cmp	r3, #2
 800e9fc:	d03e      	beq.n	800ea7c <RegionCN779InitDefaults+0xa4>
 800e9fe:	b10b      	cbz	r3, 800ea04 <RegionCN779InitDefaults+0x2c>
        {
            break;
        }
    }
#endif /* REGION_CN779 */
}
 800ea00:	b007      	add	sp, #28
 800ea02:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800ea04:	6803      	ldr	r3, [r0, #0]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d0fa      	beq.n	800ea00 <RegionCN779InitDefaults+0x28>
 800ea0a:	6842      	ldr	r2, [r0, #4]
 800ea0c:	2a00      	cmp	r2, #0
 800ea0e:	d0f7      	beq.n	800ea00 <RegionCN779InitDefaults+0x28>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800ea10:	491f      	ldr	r1, [pc, #124]	; (800ea90 <RegionCN779InitDefaults+0xb8>)
 800ea12:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800ea14:	4c1f      	ldr	r4, [pc, #124]	; (800ea94 <RegionCN779InitDefaults+0xbc>)
 800ea16:	6022      	str	r2, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * CN779_MAX_NB_BANDS );
 800ea18:	2218      	movs	r2, #24
 800ea1a:	4669      	mov	r1, sp
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f005 fd32 	bl	8014486 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) CN779_LC1;
 800ea22:	6824      	ldr	r4, [r4, #0]
 800ea24:	4b1c      	ldr	r3, [pc, #112]	; (800ea98 <RegionCN779InitDefaults+0xc0>)
 800ea26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ea2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) CN779_LC2;
 800ea2e:	f104 050c 	add.w	r5, r4, #12
 800ea32:	f103 020c 	add.w	r2, r3, #12
 800ea36:	ca07      	ldmia	r2, {r0, r1, r2}
 800ea38:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) CN779_LC3;
 800ea3c:	f104 0518 	add.w	r5, r4, #24
 800ea40:	3318      	adds	r3, #24
 800ea42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ea46:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800ea4a:	2307      	movs	r3, #7
 800ea4c:	f8a4 348c 	strh.w	r3, [r4, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800ea50:	2201      	movs	r2, #1
 800ea52:	f204 418c 	addw	r1, r4, #1164	; 0x48c
 800ea56:	f504 6090 	add.w	r0, r4, #1152	; 0x480
 800ea5a:	f000 fd9e 	bl	800f59a <RegionCommonChanMaskCopy>
            break;
 800ea5e:	e7cf      	b.n	800ea00 <RegionCN779InitDefaults+0x28>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800ea60:	4b0c      	ldr	r3, [pc, #48]	; (800ea94 <RegionCN779InitDefaults+0xbc>)
 800ea62:	6818      	ldr	r0, [r3, #0]
 800ea64:	2300      	movs	r3, #0
 800ea66:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800ea68:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800ea6a:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800ea72:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800ea76:	f000 fd90 	bl	800f59a <RegionCommonChanMaskCopy>
            break;
 800ea7a:	e7c1      	b.n	800ea00 <RegionCN779InitDefaults+0x28>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800ea7c:	4b05      	ldr	r3, [pc, #20]	; (800ea94 <RegionCN779InitDefaults+0xbc>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 800ea84:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 800ea88:	430a      	orrs	r2, r1
 800ea8a:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 800ea8e:	e7b7      	b.n	800ea00 <RegionCN779InitDefaults+0x28>
 800ea90:	20001444 	.word	0x20001444
 800ea94:	20001448 	.word	0x20001448
 800ea98:	0801749c 	.word	0x0801749c

0800ea9c <RegionCN779Verify>:

bool RegionCN779Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800ea9c:	b508      	push	{r3, lr}
#if defined( REGION_CN779 )
    switch( phyAttribute )
 800ea9e:	290f      	cmp	r1, #15
 800eaa0:	d837      	bhi.n	800eb12 <RegionCN779Verify+0x76>
 800eaa2:	e8df f001 	tbb	[pc, r1]
 800eaa6:	360a      	.short	0x360a
 800eaa8:	0e363636 	.word	0x0e363636
 800eaac:	2c362218 	.word	0x2c362218
 800eab0:	3636362c 	.word	0x3636362c
 800eab4:	0836      	.short	0x0836
        case PHY_DUTY_CYCLE:
        {
            return CN779_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800eab6:	2001      	movs	r0, #1
 800eab8:	e02c      	b.n	800eb14 <RegionCN779Verify+0x78>
            return VerifyRfFreq( verify->Frequency );
 800eaba:	6800      	ldr	r0, [r0, #0]
 800eabc:	f7ff fe62 	bl	800e784 <VerifyRfFreq>
 800eac0:	e028      	b.n	800eb14 <RegionCN779Verify+0x78>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, CN779_TX_MIN_DATARATE, CN779_TX_MAX_DATARATE );
 800eac2:	2207      	movs	r2, #7
 800eac4:	2100      	movs	r1, #0
 800eac6:	f990 0000 	ldrsb.w	r0, [r0]
 800eaca:	f000 fcf4 	bl	800f4b6 <RegionCommonValueInRange>
 800eace:	3800      	subs	r0, #0
 800ead0:	bf18      	it	ne
 800ead2:	2001      	movne	r0, #1
 800ead4:	e01e      	b.n	800eb14 <RegionCN779Verify+0x78>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800ead6:	2205      	movs	r2, #5
 800ead8:	2100      	movs	r1, #0
 800eada:	f990 0000 	ldrsb.w	r0, [r0]
 800eade:	f000 fcea 	bl	800f4b6 <RegionCommonValueInRange>
 800eae2:	3800      	subs	r0, #0
 800eae4:	bf18      	it	ne
 800eae6:	2001      	movne	r0, #1
 800eae8:	e014      	b.n	800eb14 <RegionCN779Verify+0x78>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, CN779_RX_MIN_DATARATE, CN779_RX_MAX_DATARATE );
 800eaea:	2207      	movs	r2, #7
 800eaec:	2100      	movs	r1, #0
 800eaee:	f990 0000 	ldrsb.w	r0, [r0]
 800eaf2:	f000 fce0 	bl	800f4b6 <RegionCommonValueInRange>
 800eaf6:	3800      	subs	r0, #0
 800eaf8:	bf18      	it	ne
 800eafa:	2001      	movne	r0, #1
 800eafc:	e00a      	b.n	800eb14 <RegionCN779Verify+0x78>
            return RegionCommonValueInRange( verify->TxPower, CN779_MAX_TX_POWER, CN779_MIN_TX_POWER );
 800eafe:	2205      	movs	r2, #5
 800eb00:	2100      	movs	r1, #0
 800eb02:	f990 0000 	ldrsb.w	r0, [r0]
 800eb06:	f000 fcd6 	bl	800f4b6 <RegionCommonValueInRange>
 800eb0a:	3800      	subs	r0, #0
 800eb0c:	bf18      	it	ne
 800eb0e:	2001      	movne	r0, #1
 800eb10:	e000      	b.n	800eb14 <RegionCN779Verify+0x78>
            return false;
 800eb12:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_CN779 */
}
 800eb14:	bd08      	pop	{r3, pc}
	...

0800eb18 <RegionCN779ChanMaskSet>:
    }
#endif /* REGION_CN779 */
}

bool RegionCN779ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800eb18:	b508      	push	{r3, lr}
#if defined( REGION_CN779 )
    switch( chanMaskSet->ChannelsMaskType )
 800eb1a:	7903      	ldrb	r3, [r0, #4]
 800eb1c:	b11b      	cbz	r3, 800eb26 <RegionCN779ChanMaskSet+0xe>
 800eb1e:	2b01      	cmp	r3, #1
 800eb20:	d00b      	beq.n	800eb3a <RegionCN779ChanMaskSet+0x22>
 800eb22:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_CN779 */
}
 800eb24:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800eb26:	4b0a      	ldr	r3, [pc, #40]	; (800eb50 <RegionCN779ChanMaskSet+0x38>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	2201      	movs	r2, #1
 800eb2c:	6801      	ldr	r1, [r0, #0]
 800eb2e:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800eb32:	f000 fd32 	bl	800f59a <RegionCommonChanMaskCopy>
    return true;
 800eb36:	2001      	movs	r0, #1
            break;
 800eb38:	e7f4      	b.n	800eb24 <RegionCN779ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800eb3a:	4b05      	ldr	r3, [pc, #20]	; (800eb50 <RegionCN779ChanMaskSet+0x38>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	2201      	movs	r2, #1
 800eb40:	6801      	ldr	r1, [r0, #0]
 800eb42:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 800eb46:	f000 fd28 	bl	800f59a <RegionCommonChanMaskCopy>
    return true;
 800eb4a:	2001      	movs	r0, #1
            break;
 800eb4c:	e7ea      	b.n	800eb24 <RegionCN779ChanMaskSet+0xc>
 800eb4e:	bf00      	nop
 800eb50:	20001448 	.word	0x20001448

0800eb54 <RegionCN779ComputeRxWindowParameters>:

void RegionCN779ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800eb54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb56:	b083      	sub	sp, #12
 800eb58:	460e      	mov	r6, r1
 800eb5a:	4617      	mov	r7, r2
 800eb5c:	461c      	mov	r4, r3
#if defined( REGION_CN779 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, CN779_RX_MAX_DATARATE );
 800eb5e:	2807      	cmp	r0, #7
 800eb60:	bfa8      	it	ge
 800eb62:	2007      	movge	r0, #7
 800eb64:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsCN779 );
 800eb66:	4913      	ldr	r1, [pc, #76]	; (800ebb4 <RegionCN779ComputeRxWindowParameters+0x60>)
 800eb68:	f000 ff60 	bl	800fa2c <RegionCommonGetBandwidth>
 800eb6c:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800eb6e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800eb72:	2b07      	cmp	r3, #7
 800eb74:	d017      	beq.n	800eba6 <RegionCN779ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesCN779[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesCN779[rxConfigParams->Datarate], BandwidthsCN779[rxConfigParams->Datarate] );
 800eb76:	4a0f      	ldr	r2, [pc, #60]	; (800ebb4 <RegionCN779ComputeRxWindowParameters+0x60>)
 800eb78:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800eb7c:	4a0e      	ldr	r2, [pc, #56]	; (800ebb8 <RegionCN779ComputeRxWindowParameters+0x64>)
 800eb7e:	5cd0      	ldrb	r0, [r2, r3]
 800eb80:	f000 fe24 	bl	800f7cc <RegionCommonComputeSymbolTimeLoRa>
 800eb84:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800eb86:	4b0d      	ldr	r3, [pc, #52]	; (800ebbc <RegionCN779ComputeRxWindowParameters+0x68>)
 800eb88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb8a:	4798      	blx	r3
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	f104 020c 	add.w	r2, r4, #12
 800eb92:	9201      	str	r2, [sp, #4]
 800eb94:	3408      	adds	r4, #8
 800eb96:	9400      	str	r4, [sp, #0]
 800eb98:	463a      	mov	r2, r7
 800eb9a:	4631      	mov	r1, r6
 800eb9c:	4628      	mov	r0, r5
 800eb9e:	f000 fe23 	bl	800f7e8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_CN779 */
}
 800eba2:	b003      	add	sp, #12
 800eba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesCN779[rxConfigParams->Datarate] );
 800eba6:	4a04      	ldr	r2, [pc, #16]	; (800ebb8 <RegionCN779ComputeRxWindowParameters+0x64>)
 800eba8:	5cd0      	ldrb	r0, [r2, r3]
 800ebaa:	f000 fe17 	bl	800f7dc <RegionCommonComputeSymbolTimeFsk>
 800ebae:	4605      	mov	r5, r0
 800ebb0:	e7e9      	b.n	800eb86 <RegionCN779ComputeRxWindowParameters+0x32>
 800ebb2:	bf00      	nop
 800ebb4:	08017c10 	.word	0x08017c10
 800ebb8:	08017c30 	.word	0x08017c30
 800ebbc:	08018318 	.word	0x08018318

0800ebc0 <RegionCN779RxConfig>:

bool RegionCN779RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800ebc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebc4:	b08a      	sub	sp, #40	; 0x28
 800ebc6:	4604      	mov	r4, r0
 800ebc8:	460f      	mov	r7, r1
#if defined( REGION_CN779 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800ebca:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800ebce:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800ebd2:	4b37      	ldr	r3, [pc, #220]	; (800ecb0 <RegionCN779RxConfig+0xf0>)
 800ebd4:	685b      	ldr	r3, [r3, #4]
 800ebd6:	4798      	blx	r3
 800ebd8:	2800      	cmp	r0, #0
 800ebda:	d167      	bne.n	800ecac <RegionCN779RxConfig+0xec>
 800ebdc:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800ebde:	7ce3      	ldrb	r3, [r4, #19]
 800ebe0:	b983      	cbnz	r3, 800ec04 <RegionCN779RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800ebe2:	4b34      	ldr	r3, [pc, #208]	; (800ecb4 <RegionCN779RxConfig+0xf4>)
 800ebe4:	681a      	ldr	r2, [r3, #0]
 800ebe6:	7823      	ldrb	r3, [r4, #0]
 800ebe8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800ebec:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800ebf0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ebf4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ebf8:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800ebfc:	f1b8 0f00 	cmp.w	r8, #0
 800ec00:	d100      	bne.n	800ec04 <RegionCN779RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800ec02:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesCN779[dr];
 800ec04:	4b2c      	ldr	r3, [pc, #176]	; (800ecb8 <RegionCN779RxConfig+0xf8>)
 800ec06:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800ec0a:	4b29      	ldr	r3, [pc, #164]	; (800ecb0 <RegionCN779RxConfig+0xf0>)
 800ec0c:	68db      	ldr	r3, [r3, #12]
 800ec0e:	4640      	mov	r0, r8
 800ec10:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800ec12:	2d07      	cmp	r5, #7
 800ec14:	d02b      	beq.n	800ec6e <RegionCN779RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800ec16:	4b26      	ldr	r3, [pc, #152]	; (800ecb0 <RegionCN779RxConfig+0xf0>)
 800ec18:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800ec1c:	7ca3      	ldrb	r3, [r4, #18]
 800ec1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ec20:	2601      	movs	r6, #1
 800ec22:	9608      	str	r6, [sp, #32]
 800ec24:	2300      	movs	r3, #0
 800ec26:	9307      	str	r3, [sp, #28]
 800ec28:	9306      	str	r3, [sp, #24]
 800ec2a:	9305      	str	r3, [sp, #20]
 800ec2c:	9304      	str	r3, [sp, #16]
 800ec2e:	9303      	str	r3, [sp, #12]
 800ec30:	8922      	ldrh	r2, [r4, #8]
 800ec32:	9202      	str	r2, [sp, #8]
 800ec34:	2208      	movs	r2, #8
 800ec36:	9201      	str	r2, [sp, #4]
 800ec38:	9300      	str	r3, [sp, #0]
 800ec3a:	4633      	mov	r3, r6
 800ec3c:	464a      	mov	r2, r9
 800ec3e:	78a1      	ldrb	r1, [r4, #2]
 800ec40:	4630      	mov	r0, r6
 800ec42:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800ec44:	7c63      	ldrb	r3, [r4, #17]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d02d      	beq.n	800eca6 <RegionCN779RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterCN779[dr];
 800ec4a:	4b1c      	ldr	r3, [pc, #112]	; (800ecbc <RegionCN779RxConfig+0xfc>)
 800ec4c:	5d59      	ldrb	r1, [r3, r5]
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateCN779[dr];
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800ec4e:	4b18      	ldr	r3, [pc, #96]	; (800ecb0 <RegionCN779RxConfig+0xf0>)
 800ec50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec52:	310d      	adds	r1, #13
 800ec54:	b2c9      	uxtb	r1, r1
 800ec56:	4630      	mov	r0, r6
 800ec58:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800ec5a:	462a      	mov	r2, r5
 800ec5c:	4641      	mov	r1, r8
 800ec5e:	7ce0      	ldrb	r0, [r4, #19]
 800ec60:	f000 fef6 	bl	800fa50 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800ec64:	703d      	strb	r5, [r7, #0]
    return true;
 800ec66:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_CN779 */
}
 800ec68:	b00a      	add	sp, #40	; 0x28
 800ec6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800ec6e:	4b10      	ldr	r3, [pc, #64]	; (800ecb0 <RegionCN779RxConfig+0xf0>)
 800ec70:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800ec74:	7ca3      	ldrb	r3, [r4, #18]
 800ec76:	9309      	str	r3, [sp, #36]	; 0x24
 800ec78:	2000      	movs	r0, #0
 800ec7a:	9008      	str	r0, [sp, #32]
 800ec7c:	9007      	str	r0, [sp, #28]
 800ec7e:	9006      	str	r0, [sp, #24]
 800ec80:	2301      	movs	r3, #1
 800ec82:	9305      	str	r3, [sp, #20]
 800ec84:	9004      	str	r0, [sp, #16]
 800ec86:	9003      	str	r0, [sp, #12]
 800ec88:	8923      	ldrh	r3, [r4, #8]
 800ec8a:	9302      	str	r3, [sp, #8]
 800ec8c:	2305      	movs	r3, #5
 800ec8e:	9301      	str	r3, [sp, #4]
 800ec90:	4b0b      	ldr	r3, [pc, #44]	; (800ecc0 <RegionCN779RxConfig+0x100>)
 800ec92:	9300      	str	r3, [sp, #0]
 800ec94:	4603      	mov	r3, r0
 800ec96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ec9a:	fb02 f209 	mul.w	r2, r2, r9
 800ec9e:	f24c 3150 	movw	r1, #50000	; 0xc350
 800eca2:	47d0      	blx	sl
 800eca4:	e7ce      	b.n	800ec44 <RegionCN779RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateCN779[dr];
 800eca6:	4b07      	ldr	r3, [pc, #28]	; (800ecc4 <RegionCN779RxConfig+0x104>)
 800eca8:	5d59      	ldrb	r1, [r3, r5]
 800ecaa:	e7d0      	b.n	800ec4e <RegionCN779RxConfig+0x8e>
        return false;
 800ecac:	2000      	movs	r0, #0
 800ecae:	e7db      	b.n	800ec68 <RegionCN779RxConfig+0xa8>
 800ecb0:	08018318 	.word	0x08018318
 800ecb4:	20001448 	.word	0x20001448
 800ecb8:	08017c30 	.word	0x08017c30
 800ecbc:	08017c40 	.word	0x08017c40
 800ecc0:	00014585 	.word	0x00014585
 800ecc4:	08017c38 	.word	0x08017c38

0800ecc8 <RegionCN779TxConfig>:

bool RegionCN779TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800ecc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eccc:	b08d      	sub	sp, #52	; 0x34
 800ecce:	4604      	mov	r4, r0
 800ecd0:	460f      	mov	r7, r1
 800ecd2:	4690      	mov	r8, r2
#if defined( REGION_CN779 )
    RadioModems_t modem;
    int8_t phyDr = DataratesCN779[txConfig->Datarate];
 800ecd4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ecd8:	4a42      	ldr	r2, [pc, #264]	; (800ede4 <RegionCN779TxConfig+0x11c>)
 800ecda:	f912 a003 	ldrsb.w	sl, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800ecde:	4b42      	ldr	r3, [pc, #264]	; (800ede8 <RegionCN779TxConfig+0x120>)
 800ece0:	6819      	ldr	r1, [r3, #0]
 800ece2:	4d42      	ldr	r5, [pc, #264]	; (800edec <RegionCN779TxConfig+0x124>)
 800ece4:	682b      	ldr	r3, [r5, #0]
 800ece6:	7802      	ldrb	r2, [r0, #0]
 800ece8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800ecec:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800ecf0:	7a53      	ldrb	r3, [r2, #9]
 800ecf2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ecf6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800ecfa:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800ecfe:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800ed02:	f000 fe8e 	bl	800fa22 <RegionCommonLimitTxPower>
 800ed06:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsCN779 );
 800ed08:	4939      	ldr	r1, [pc, #228]	; (800edf0 <RegionCN779TxConfig+0x128>)
 800ed0a:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ed0e:	f000 fe8d 	bl	800fa2c <RegionCommonGetBandwidth>
 800ed12:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800ed14:	68a2      	ldr	r2, [r4, #8]
 800ed16:	6861      	ldr	r1, [r4, #4]
 800ed18:	4630      	mov	r0, r6
 800ed1a:	f000 fd9f 	bl	800f85c <RegionCommonComputeTxPower>
 800ed1e:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800ed20:	4b34      	ldr	r3, [pc, #208]	; (800edf4 <RegionCN779TxConfig+0x12c>)
 800ed22:	68da      	ldr	r2, [r3, #12]
 800ed24:	6829      	ldr	r1, [r5, #0]
 800ed26:	7823      	ldrb	r3, [r4, #0]
 800ed28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ed2c:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800ed30:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800ed32:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800ed36:	2b07      	cmp	r3, #7
 800ed38:	d031      	beq.n	800ed9e <RegionCN779TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800ed3a:	4b2e      	ldr	r3, [pc, #184]	; (800edf4 <RegionCN779TxConfig+0x12c>)
 800ed3c:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800ed40:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800ed44:	9308      	str	r3, [sp, #32]
 800ed46:	2200      	movs	r2, #0
 800ed48:	9207      	str	r2, [sp, #28]
 800ed4a:	9206      	str	r2, [sp, #24]
 800ed4c:	9205      	str	r2, [sp, #20]
 800ed4e:	2501      	movs	r5, #1
 800ed50:	9504      	str	r5, [sp, #16]
 800ed52:	9203      	str	r2, [sp, #12]
 800ed54:	2308      	movs	r3, #8
 800ed56:	9302      	str	r3, [sp, #8]
 800ed58:	9501      	str	r5, [sp, #4]
 800ed5a:	f8cd a000 	str.w	sl, [sp]
 800ed5e:	464b      	mov	r3, r9
 800ed60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ed62:	4628      	mov	r0, r5
 800ed64:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800ed66:	4b21      	ldr	r3, [pc, #132]	; (800edec <RegionCN779TxConfig+0x124>)
 800ed68:	681a      	ldr	r2, [r3, #0]
 800ed6a:	7823      	ldrb	r3, [r4, #0]
 800ed6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ed70:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800ed74:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ed78:	f000 fe9a 	bl	800fab0 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800ed7c:	89a1      	ldrh	r1, [r4, #12]
 800ed7e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ed82:	f7ff fd13 	bl	800e7ac <GetTimeOnAir>
 800ed86:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800ed8a:	4b1a      	ldr	r3, [pc, #104]	; (800edf4 <RegionCN779TxConfig+0x12c>)
 800ed8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed8e:	7b21      	ldrb	r1, [r4, #12]
 800ed90:	4628      	mov	r0, r5
 800ed92:	4798      	blx	r3

    *txPower = txPowerLimited;
 800ed94:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_CN779 */
}
 800ed96:	2001      	movs	r0, #1
 800ed98:	b00d      	add	sp, #52	; 0x34
 800ed9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800ed9e:	4b15      	ldr	r3, [pc, #84]	; (800edf4 <RegionCN779TxConfig+0x12c>)
 800eda0:	69dd      	ldr	r5, [r3, #28]
 800eda2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800eda6:	fb03 f30a 	mul.w	r3, r3, sl
 800edaa:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800edae:	9208      	str	r2, [sp, #32]
 800edb0:	f04f 0b00 	mov.w	fp, #0
 800edb4:	f8cd b01c 	str.w	fp, [sp, #28]
 800edb8:	f8cd b018 	str.w	fp, [sp, #24]
 800edbc:	f8cd b014 	str.w	fp, [sp, #20]
 800edc0:	2201      	movs	r2, #1
 800edc2:	9204      	str	r2, [sp, #16]
 800edc4:	f8cd b00c 	str.w	fp, [sp, #12]
 800edc8:	2205      	movs	r2, #5
 800edca:	9202      	str	r2, [sp, #8]
 800edcc:	f8cd b004 	str.w	fp, [sp, #4]
 800edd0:	9300      	str	r3, [sp, #0]
 800edd2:	464b      	mov	r3, r9
 800edd4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800edd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800edda:	4658      	mov	r0, fp
 800eddc:	47a8      	blx	r5
        modem = MODEM_FSK;
 800edde:	465d      	mov	r5, fp
 800ede0:	e7c1      	b.n	800ed66 <RegionCN779TxConfig+0x9e>
 800ede2:	bf00      	nop
 800ede4:	08017c30 	.word	0x08017c30
 800ede8:	20001444 	.word	0x20001444
 800edec:	20001448 	.word	0x20001448
 800edf0:	08017c10 	.word	0x08017c10
 800edf4:	08018318 	.word	0x08018318

0800edf8 <RegionCN779LinkAdrReq>:

uint8_t RegionCN779LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800edf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edfc:	b08f      	sub	sp, #60	; 0x3c
 800edfe:	4607      	mov	r7, r0
 800ee00:	468b      	mov	fp, r1
 800ee02:	4692      	mov	sl, r2
 800ee04:	4699      	mov	r9, r3
    uint8_t status = 0x07;
#if defined( REGION_CN779 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800ee06:	2500      	movs	r5, #0
 800ee08:	950c      	str	r5, [sp, #48]	; 0x30
 800ee0a:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800ee0e:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800ee12:	f04f 0807 	mov.w	r8, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800ee16:	e02d      	b.n	800ee74 <RegionCN779LinkAdrReq+0x7c>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < CN779_MAX_NB_CHANNELS; i++ )
 800ee18:	2400      	movs	r4, #0
        status = 0x07;
 800ee1a:	f04f 0807 	mov.w	r8, #7
 800ee1e:	e00f      	b.n	800ee40 <RegionCN779LinkAdrReq+0x48>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800ee20:	4a56      	ldr	r2, [pc, #344]	; (800ef7c <RegionCN779LinkAdrReq+0x184>)
 800ee22:	6812      	ldr	r2, [r2, #0]
 800ee24:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800ee28:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ee2c:	b132      	cbz	r2, 800ee3c <RegionCN779LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800ee2e:	2201      	movs	r2, #1
 800ee30:	40a2      	lsls	r2, r4
 800ee32:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800ee36:	430a      	orrs	r2, r1
 800ee38:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < CN779_MAX_NB_CHANNELS; i++ )
 800ee3c:	3401      	adds	r4, #1
 800ee3e:	b2e4      	uxtb	r4, r4
 800ee40:	2c0f      	cmp	r4, #15
 800ee42:	d817      	bhi.n	800ee74 <RegionCN779LinkAdrReq+0x7c>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800ee44:	2b06      	cmp	r3, #6
 800ee46:	d0eb      	beq.n	800ee20 <RegionCN779LinkAdrReq+0x28>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800ee48:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 800ee4c:	4126      	asrs	r6, r4
 800ee4e:	f016 0f01 	tst.w	r6, #1
 800ee52:	d0f3      	beq.n	800ee3c <RegionCN779LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800ee54:	4a49      	ldr	r2, [pc, #292]	; (800ef7c <RegionCN779LinkAdrReq+0x184>)
 800ee56:	6812      	ldr	r2, [r2, #0]
 800ee58:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800ee5c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800ee60:	2a00      	cmp	r2, #0
 800ee62:	d1eb      	bne.n	800ee3c <RegionCN779LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800ee64:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
 800ee68:	e7e8      	b.n	800ee3c <RegionCN779LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800ee6a:	f04f 0806 	mov.w	r8, #6
 800ee6e:	e001      	b.n	800ee74 <RegionCN779LinkAdrReq+0x7c>
            status &= 0xFE; // Channel mask KO
 800ee70:	f04f 0806 	mov.w	r8, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800ee74:	7a3b      	ldrb	r3, [r7, #8]
 800ee76:	42ab      	cmp	r3, r5
 800ee78:	d919      	bls.n	800eeae <RegionCN779LinkAdrReq+0xb6>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	a90c      	add	r1, sp, #48	; 0x30
 800ee7e:	4428      	add	r0, r5
 800ee80:	f000 fc3c 	bl	800f6fc <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800ee84:	b198      	cbz	r0, 800eeae <RegionCN779LinkAdrReq+0xb6>
        bytesProcessed += nextIndex;
 800ee86:	4405      	add	r5, r0
 800ee88:	b2ed      	uxtb	r5, r5
        chMask = linkAdrParams.ChMask;
 800ee8a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800ee8e:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800ee92:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800ee96:	b90b      	cbnz	r3, 800ee9c <RegionCN779LinkAdrReq+0xa4>
 800ee98:	2a00      	cmp	r2, #0
 800ee9a:	d0e6      	beq.n	800ee6a <RegionCN779LinkAdrReq+0x72>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800ee9c:	1e5a      	subs	r2, r3, #1
 800ee9e:	b2d2      	uxtb	r2, r2
 800eea0:	2a04      	cmp	r2, #4
 800eea2:	d9e5      	bls.n	800ee70 <RegionCN779LinkAdrReq+0x78>
 800eea4:	2b06      	cmp	r3, #6
 800eea6:	d9b7      	bls.n	800ee18 <RegionCN779LinkAdrReq+0x20>
            status &= 0xFE; // Channel mask KO
 800eea8:	f04f 0806 	mov.w	r8, #6
 800eeac:	e7e2      	b.n	800ee74 <RegionCN779LinkAdrReq+0x7c>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800eeae:	2302      	movs	r3, #2
 800eeb0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800eeb4:	7a7b      	ldrb	r3, [r7, #9]
 800eeb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionCN779GetPhyParam( &getPhy );
 800eeba:	a80a      	add	r0, sp, #40	; 0x28
 800eebc:	f7ff fca8 	bl	800e810 <RegionCN779GetPhyParam>

    linkAdrVerifyParams.Status = status;
 800eec0:	f88d 8008 	strb.w	r8, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800eec4:	7abb      	ldrb	r3, [r7, #10]
 800eec6:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800eeca:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800eece:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800eed2:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800eed6:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800eeda:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800eede:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800eee2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800eee6:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800eeea:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800eeee:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800eef2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800eef6:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = CN779_MAX_NB_CHANNELS;
 800eefa:	2310      	movs	r3, #16
 800eefc:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800ef00:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800ef04:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800ef06:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = CN779_TX_MAX_DATARATE;
 800ef0a:	2307      	movs	r3, #7
 800ef0c:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800ef10:	4b1a      	ldr	r3, [pc, #104]	; (800ef7c <RegionCN779LinkAdrReq+0x184>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	9307      	str	r3, [sp, #28]
    linkAdrVerifyParams.MinTxPower = CN779_MIN_TX_POWER;
 800ef16:	2305      	movs	r3, #5
 800ef18:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = CN779_MAX_TX_POWER;
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800ef26:	ab0c      	add	r3, sp, #48	; 0x30
 800ef28:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800ef2c:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800ef30:	a801      	add	r0, sp, #4
 800ef32:	f000 fbff 	bl	800f734 <RegionCommonLinkAdrReqVerifyParams>
 800ef36:	4604      	mov	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800ef38:	2807      	cmp	r0, #7
 800ef3a:	d011      	beq.n	800ef60 <RegionCN779LinkAdrReq+0x168>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800ef3c:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800ef40:	f88b 3000 	strb.w	r3, [fp]
    *txPowOut = linkAdrParams.TxPower;
 800ef44:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800ef48:	f88a 3000 	strb.w	r3, [sl]
    *nbRepOut = linkAdrParams.NbRep;
 800ef4c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800ef50:	f889 3000 	strb.w	r3, [r9]
    *nbBytesParsed = bytesProcessed;
 800ef54:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ef56:	701d      	strb	r5, [r3, #0]

#endif /* REGION_CN779 */
    return status;
}
 800ef58:	4620      	mov	r0, r4
 800ef5a:	b00f      	add	sp, #60	; 0x3c
 800ef5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800ef60:	4e06      	ldr	r6, [pc, #24]	; (800ef7c <RegionCN779LinkAdrReq+0x184>)
 800ef62:	6830      	ldr	r0, [r6, #0]
 800ef64:	220c      	movs	r2, #12
 800ef66:	2100      	movs	r1, #0
 800ef68:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800ef6c:	f005 faa1 	bl	80144b2 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800ef70:	6833      	ldr	r3, [r6, #0]
 800ef72:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800ef76:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
 800ef7a:	e7df      	b.n	800ef3c <RegionCN779LinkAdrReq+0x144>
 800ef7c:	20001448 	.word	0x20001448

0800ef80 <RegionCN779RxParamSetupReq>:

uint8_t RegionCN779RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800ef80:	b538      	push	{r3, r4, r5, lr}
 800ef82:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_CN779 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800ef84:	6840      	ldr	r0, [r0, #4]
 800ef86:	f7ff fbfd 	bl	800e784 <VerifyRfFreq>
 800ef8a:	b1a0      	cbz	r0, 800efb6 <RegionCN779RxParamSetupReq+0x36>
    uint8_t status = 0x07;
 800ef8c:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, CN779_RX_MIN_DATARATE, CN779_RX_MAX_DATARATE ) == false )
 800ef8e:	2207      	movs	r2, #7
 800ef90:	2100      	movs	r1, #0
 800ef92:	f994 0000 	ldrsb.w	r0, [r4]
 800ef96:	f000 fa8e 	bl	800f4b6 <RegionCommonValueInRange>
 800ef9a:	b908      	cbnz	r0, 800efa0 <RegionCN779RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800ef9c:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, CN779_MIN_RX1_DR_OFFSET, CN779_MAX_RX1_DR_OFFSET ) == false )
 800efa0:	2205      	movs	r2, #5
 800efa2:	2100      	movs	r1, #0
 800efa4:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800efa8:	f000 fa85 	bl	800f4b6 <RegionCommonValueInRange>
 800efac:	b908      	cbnz	r0, 800efb2 <RegionCN779RxParamSetupReq+0x32>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800efae:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_CN779 */
    return status;
}
 800efb2:	4628      	mov	r0, r5
 800efb4:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800efb6:	2506      	movs	r5, #6
 800efb8:	e7e9      	b.n	800ef8e <RegionCN779RxParamSetupReq+0xe>

0800efba <RegionCN779TxParamSetupReq>:

int8_t RegionCN779TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800efba:	f04f 30ff 	mov.w	r0, #4294967295
 800efbe:	4770      	bx	lr

0800efc0 <RegionCN779DlChannelReq>:

int8_t RegionCN779DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800efc0:	b510      	push	{r4, lr}
 800efc2:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_CN779 )

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 800efc4:	6840      	ldr	r0, [r0, #4]
 800efc6:	f7ff fbdd 	bl	800e784 <VerifyRfFreq>
 800efca:	b170      	cbz	r0, 800efea <RegionCN779DlChannelReq+0x2a>
    uint8_t status = 0x03;
 800efcc:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800efce:	4b0b      	ldr	r3, [pc, #44]	; (800effc <RegionCN779DlChannelReq+0x3c>)
 800efd0:	681a      	ldr	r2, [r3, #0]
 800efd2:	7823      	ldrb	r3, [r4, #0]
 800efd4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800efd8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800efdc:	b909      	cbnz	r1, 800efe2 <RegionCN779DlChannelReq+0x22>
    {
        status &= 0xFD;
 800efde:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 800efe2:	2803      	cmp	r0, #3
 800efe4:	d003      	beq.n	800efee <RegionCN779DlChannelReq+0x2e>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_CN779 */
    return status;
}
 800efe6:	b240      	sxtb	r0, r0
 800efe8:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800efea:	2002      	movs	r0, #2
 800efec:	e7ef      	b.n	800efce <RegionCN779DlChannelReq+0xe>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800efee:	6861      	ldr	r1, [r4, #4]
 800eff0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800eff4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eff8:	6059      	str	r1, [r3, #4]
 800effa:	e7f4      	b.n	800efe6 <RegionCN779DlChannelReq+0x26>
 800effc:	20001448 	.word	0x20001448

0800f000 <RegionCN779AlternateDr>:

int8_t RegionCN779AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
    return currentDr;
}
 800f000:	4770      	bx	lr
	...

0800f004 <RegionCN779NextChannel>:

LoRaMacStatus_t RegionCN779NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800f004:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f006:	b097      	sub	sp, #92	; 0x5c
 800f008:	4604      	mov	r4, r0
 800f00a:	460f      	mov	r7, r1
 800f00c:	4616      	mov	r6, r2
 800f00e:	461d      	mov	r5, r3
#if defined( REGION_CN779 )
    uint8_t nbEnabledChannels = 0;
 800f010:	2100      	movs	r1, #0
 800f012:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800f016:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[CN779_MAX_NB_CHANNELS] = { 0 };
 800f01a:	9111      	str	r1, [sp, #68]	; 0x44
 800f01c:	9112      	str	r1, [sp, #72]	; 0x48
 800f01e:	9113      	str	r1, [sp, #76]	; 0x4c
 800f020:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = CN779_JOIN_CHANNELS;
 800f022:	2307      	movs	r3, #7
 800f024:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800f028:	4b32      	ldr	r3, [pc, #200]	; (800f0f4 <RegionCN779NextChannel+0xf0>)
 800f02a:	6818      	ldr	r0, [r3, #0]
 800f02c:	2201      	movs	r2, #1
 800f02e:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800f032:	f000 fa9c 	bl	800f56e <RegionCommonCountChannels>
 800f036:	b938      	cbnz	r0, 800f048 <RegionCN779NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800f038:	4b2e      	ldr	r3, [pc, #184]	; (800f0f4 <RegionCN779NextChannel+0xf0>)
 800f03a:	681a      	ldr	r2, [r3, #0]
 800f03c:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800f040:	f043 0307 	orr.w	r3, r3, #7
 800f044:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800f048:	7a63      	ldrb	r3, [r4, #9]
 800f04a:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800f04e:	7a23      	ldrb	r3, [r4, #8]
 800f050:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800f054:	4b27      	ldr	r3, [pc, #156]	; (800f0f4 <RegionCN779NextChannel+0xf0>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f503 6290 	add.w	r2, r3, #1152	; 0x480
 800f05c:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800f05e:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800f060:	4b25      	ldr	r3, [pc, #148]	; (800f0f8 <RegionCN779NextChannel+0xf4>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = CN779_MAX_NB_CHANNELS;
 800f066:	2310      	movs	r3, #16
 800f068:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800f06c:	f10d 030a 	add.w	r3, sp, #10
 800f070:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800f072:	6823      	ldr	r3, [r4, #0]
 800f074:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800f076:	6863      	ldr	r3, [r4, #4]
 800f078:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800f07a:	7aa3      	ldrb	r3, [r4, #10]
 800f07c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = CN779_MAX_NB_BANDS;
 800f080:	2301      	movs	r3, #1
 800f082:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800f086:	ab0c      	add	r3, sp, #48	; 0x30
 800f088:	6921      	ldr	r1, [r4, #16]
 800f08a:	68e0      	ldr	r0, [r4, #12]
 800f08c:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800f090:	7d23      	ldrb	r3, [r4, #20]
 800f092:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800f096:	8ae1      	ldrh	r1, [r4, #22]
 800f098:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800f09c:	f7ff fb86 	bl	800e7ac <GetTimeOnAir>
 800f0a0:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800f0a2:	ab03      	add	r3, sp, #12
 800f0a4:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800f0a6:	9601      	str	r6, [sp, #4]
 800f0a8:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800f0ac:	9300      	str	r3, [sp, #0]
 800f0ae:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800f0b2:	aa11      	add	r2, sp, #68	; 0x44
 800f0b4:	4629      	mov	r1, r5
 800f0b6:	a809      	add	r0, sp, #36	; 0x24
 800f0b8:	f000 fc4c 	bl	800f954 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800f0bc:	4604      	mov	r4, r0
 800f0be:	b120      	cbz	r0, 800f0ca <RegionCN779NextChannel+0xc6>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800f0c0:	280c      	cmp	r0, #12
 800f0c2:	d00d      	beq.n	800f0e0 <RegionCN779NextChannel+0xdc>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_CN779 */
}
 800f0c4:	4620      	mov	r0, r4
 800f0c6:	b017      	add	sp, #92	; 0x5c
 800f0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800f0ca:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800f0ce:	3901      	subs	r1, #1
 800f0d0:	f005 f9cc 	bl	801446c <randr>
 800f0d4:	ab16      	add	r3, sp, #88	; 0x58
 800f0d6:	4418      	add	r0, r3
 800f0d8:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800f0dc:	703b      	strb	r3, [r7, #0]
 800f0de:	e7f1      	b.n	800f0c4 <RegionCN779NextChannel+0xc0>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800f0e0:	4b04      	ldr	r3, [pc, #16]	; (800f0f4 <RegionCN779NextChannel+0xf0>)
 800f0e2:	681a      	ldr	r2, [r3, #0]
 800f0e4:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800f0e8:	f043 0307 	orr.w	r3, r3, #7
 800f0ec:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
 800f0f0:	e7e8      	b.n	800f0c4 <RegionCN779NextChannel+0xc0>
 800f0f2:	bf00      	nop
 800f0f4:	20001448 	.word	0x20001448
 800f0f8:	20001444 	.word	0x20001444

0800f0fc <RegionCN779ChannelAdd>:

LoRaMacStatus_t RegionCN779ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800f0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined( REGION_CN779 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800f0fe:	7905      	ldrb	r5, [r0, #4]

    if( id < CN779_NUMB_DEFAULT_CHANNELS )
 800f100:	2d02      	cmp	r5, #2
 800f102:	d94b      	bls.n	800f19c <RegionCN779ChannelAdd+0xa0>
 800f104:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= CN779_MAX_NB_CHANNELS )
 800f106:	2d0f      	cmp	r5, #15
 800f108:	d84a      	bhi.n	800f1a0 <RegionCN779ChannelAdd+0xa4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, CN779_TX_MIN_DATARATE, CN779_TX_MAX_DATARATE ) == false )
 800f10a:	6803      	ldr	r3, [r0, #0]
 800f10c:	7a18      	ldrb	r0, [r3, #8]
 800f10e:	f340 0003 	sbfx	r0, r0, #0, #4
 800f112:	2207      	movs	r2, #7
 800f114:	2100      	movs	r1, #0
 800f116:	b240      	sxtb	r0, r0
 800f118:	f000 f9cd 	bl	800f4b6 <RegionCommonValueInRange>
 800f11c:	2800      	cmp	r0, #0
 800f11e:	d039      	beq.n	800f194 <RegionCN779ChannelAdd+0x98>
    bool drInvalid = false;
 800f120:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, CN779_TX_MIN_DATARATE, CN779_TX_MAX_DATARATE ) == false )
 800f122:	6823      	ldr	r3, [r4, #0]
 800f124:	7a18      	ldrb	r0, [r3, #8]
 800f126:	f340 1003 	sbfx	r0, r0, #4, #4
 800f12a:	2207      	movs	r2, #7
 800f12c:	2100      	movs	r1, #0
 800f12e:	b240      	sxtb	r0, r0
 800f130:	f000 f9c1 	bl	800f4b6 <RegionCommonValueInRange>
 800f134:	b900      	cbnz	r0, 800f138 <RegionCN779ChannelAdd+0x3c>
    {
        drInvalid = true;
 800f136:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800f138:	6821      	ldr	r1, [r4, #0]
 800f13a:	7a0b      	ldrb	r3, [r1, #8]
 800f13c:	f343 0203 	sbfx	r2, r3, #0, #4
 800f140:	b252      	sxtb	r2, r2
 800f142:	f343 1303 	sbfx	r3, r3, #4, #4
 800f146:	b25b      	sxtb	r3, r3
 800f148:	429a      	cmp	r2, r3
 800f14a:	dd00      	ble.n	800f14e <RegionCN779ChannelAdd+0x52>
    {
        drInvalid = true;
 800f14c:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 800f14e:	6808      	ldr	r0, [r1, #0]
 800f150:	f7ff fb18 	bl	800e784 <VerifyRfFreq>
 800f154:	b300      	cbz	r0, 800f198 <RegionCN779ChannelAdd+0x9c>
    bool freqInvalid = false;
 800f156:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800f158:	b106      	cbz	r6, 800f15c <RegionCN779ChannelAdd+0x60>
 800f15a:	bb1b      	cbnz	r3, 800f1a4 <RegionCN779ChannelAdd+0xa8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800f15c:	bb26      	cbnz	r6, 800f1a8 <RegionCN779ChannelAdd+0xac>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800f15e:	bb2b      	cbnz	r3, 800f1ac <RegionCN779ChannelAdd+0xb0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800f160:	4f13      	ldr	r7, [pc, #76]	; (800f1b0 <RegionCN779ChannelAdd+0xb4>)
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	006e      	lsls	r6, r5, #1
 800f166:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800f16a:	220c      	movs	r2, #12
 800f16c:	6821      	ldr	r1, [r4, #0]
 800f16e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f172:	f005 f988 	bl	8014486 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 800f176:	683a      	ldr	r2, [r7, #0]
 800f178:	442e      	add	r6, r5
 800f17a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f17e:	2000      	movs	r0, #0
 800f180:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800f182:	2301      	movs	r3, #1
 800f184:	fa03 f505 	lsl.w	r5, r3, r5
 800f188:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800f18c:	431d      	orrs	r5, r3
 800f18e:	f8a2 5480 	strh.w	r5, [r2, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 800f192:	e006      	b.n	800f1a2 <RegionCN779ChannelAdd+0xa6>
        drInvalid = true;
 800f194:	2601      	movs	r6, #1
 800f196:	e7c4      	b.n	800f122 <RegionCN779ChannelAdd+0x26>
            freqInvalid = true;
 800f198:	2301      	movs	r3, #1
 800f19a:	e7dd      	b.n	800f158 <RegionCN779ChannelAdd+0x5c>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800f19c:	2006      	movs	r0, #6
 800f19e:	e000      	b.n	800f1a2 <RegionCN779ChannelAdd+0xa6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f1a0:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_CN779 */
}
 800f1a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800f1a4:	2006      	movs	r0, #6
 800f1a6:	e7fc      	b.n	800f1a2 <RegionCN779ChannelAdd+0xa6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800f1a8:	2005      	movs	r0, #5
 800f1aa:	e7fa      	b.n	800f1a2 <RegionCN779ChannelAdd+0xa6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800f1ac:	2004      	movs	r0, #4
 800f1ae:	e7f8      	b.n	800f1a2 <RegionCN779ChannelAdd+0xa6>
 800f1b0:	20001448 	.word	0x20001448

0800f1b4 <RegionCN779ChannelsRemove>:

bool RegionCN779ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_CN779 )
    uint8_t id = channelRemove->ChannelId;
 800f1b4:	7801      	ldrb	r1, [r0, #0]

    if( id < CN779_NUMB_DEFAULT_CHANNELS )
 800f1b6:	2902      	cmp	r1, #2
 800f1b8:	d801      	bhi.n	800f1be <RegionCN779ChannelsRemove+0xa>
    {
        return false;
 800f1ba:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, CN779_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_CN779 */
}
 800f1bc:	4770      	bx	lr
{
 800f1be:	b510      	push	{r4, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800f1c0:	4b08      	ldr	r3, [pc, #32]	; (800f1e4 <RegionCN779ChannelsRemove+0x30>)
 800f1c2:	6818      	ldr	r0, [r3, #0]
 800f1c4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800f1c8:	009c      	lsls	r4, r3, #2
 800f1ca:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	5102      	str	r2, [r0, r4]
 800f1d2:	605a      	str	r2, [r3, #4]
 800f1d4:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, CN779_MAX_NB_CHANNELS );
 800f1d6:	2210      	movs	r2, #16
 800f1d8:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800f1dc:	f000 f9ad 	bl	800f53a <RegionCommonChanDisable>
}
 800f1e0:	bd10      	pop	{r4, pc}
 800f1e2:	bf00      	nop
 800f1e4:	20001448 	.word	0x20001448

0800f1e8 <RegionCN779ApplyCFList>:
{
 800f1e8:	b570      	push	{r4, r5, r6, lr}
 800f1ea:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800f1ec:	2350      	movs	r3, #80	; 0x50
 800f1ee:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800f1f2:	7903      	ldrb	r3, [r0, #4]
 800f1f4:	2b10      	cmp	r3, #16
 800f1f6:	d135      	bne.n	800f264 <RegionCN779ApplyCFList+0x7c>
 800f1f8:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800f1fa:	6803      	ldr	r3, [r0, #0]
 800f1fc:	7bdd      	ldrb	r5, [r3, #15]
 800f1fe:	2d00      	cmp	r5, #0
 800f200:	d130      	bne.n	800f264 <RegionCN779ApplyCFList+0x7c>
    for( uint8_t i = 0, chanIdx = CN779_NUMB_DEFAULT_CHANNELS; chanIdx < CN779_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800f202:	2403      	movs	r4, #3
 800f204:	e01a      	b.n	800f23c <RegionCN779ApplyCFList+0x54>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800f206:	6832      	ldr	r2, [r6, #0]
 800f208:	5d53      	ldrb	r3, [r2, r5]
 800f20a:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800f20c:	442a      	add	r2, r5
 800f20e:	7851      	ldrb	r1, [r2, #1]
 800f210:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f214:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800f216:	7892      	ldrb	r2, [r2, #2]
 800f218:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 800f21c:	2264      	movs	r2, #100	; 0x64
 800f21e:	fb02 f303 	mul.w	r3, r2, r3
 800f222:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800f224:	2300      	movs	r3, #0
 800f226:	9304      	str	r3, [sp, #16]
 800f228:	e011      	b.n	800f24e <RegionCN779ApplyCFList+0x66>
            channelRemove.ChannelId = chanIdx;
 800f22a:	f88d 4000 	strb.w	r4, [sp]
            RegionCN779ChannelsRemove( &channelRemove );
 800f22e:	4668      	mov	r0, sp
 800f230:	f7ff ffc0 	bl	800f1b4 <RegionCN779ChannelsRemove>
    for( uint8_t i = 0, chanIdx = CN779_NUMB_DEFAULT_CHANNELS; chanIdx < CN779_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800f234:	3503      	adds	r5, #3
 800f236:	b2ed      	uxtb	r5, r5
 800f238:	3401      	adds	r4, #1
 800f23a:	b2e4      	uxtb	r4, r4
 800f23c:	2c0f      	cmp	r4, #15
 800f23e:	d811      	bhi.n	800f264 <RegionCN779ApplyCFList+0x7c>
        if( chanIdx < ( CN779_NUMB_CHANNELS_CF_LIST + CN779_NUMB_DEFAULT_CHANNELS ) )
 800f240:	2c07      	cmp	r4, #7
 800f242:	d9e0      	bls.n	800f206 <RegionCN779ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800f244:	2300      	movs	r3, #0
 800f246:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800f248:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800f24c:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800f24e:	9b03      	ldr	r3, [sp, #12]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d0ea      	beq.n	800f22a <RegionCN779ApplyCFList+0x42>
            channelAdd.NewChannel = &newChannel;
 800f254:	ab03      	add	r3, sp, #12
 800f256:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800f258:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionCN779ChannelAdd( &channelAdd );
 800f25c:	a801      	add	r0, sp, #4
 800f25e:	f7ff ff4d 	bl	800f0fc <RegionCN779ChannelAdd>
 800f262:	e7e7      	b.n	800f234 <RegionCN779ApplyCFList+0x4c>
}
 800f264:	b006      	add	sp, #24
 800f266:	bd70      	pop	{r4, r5, r6, pc}

0800f268 <RegionCN779NewChannelReq>:
{
 800f268:	b500      	push	{lr}
 800f26a:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800f26c:	6803      	ldr	r3, [r0, #0]
 800f26e:	681a      	ldr	r2, [r3, #0]
 800f270:	b952      	cbnz	r2, 800f288 <RegionCN779NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800f272:	7903      	ldrb	r3, [r0, #4]
 800f274:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionCN779ChannelsRemove( &channelRemove ) == false )
 800f278:	a801      	add	r0, sp, #4
 800f27a:	f7ff ff9b 	bl	800f1b4 <RegionCN779ChannelsRemove>
 800f27e:	b1d0      	cbz	r0, 800f2b6 <RegionCN779NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800f280:	2003      	movs	r0, #3
}
 800f282:	b005      	add	sp, #20
 800f284:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800f288:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800f28a:	7903      	ldrb	r3, [r0, #4]
 800f28c:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionCN779ChannelAdd( &channelAdd ) )
 800f290:	a802      	add	r0, sp, #8
 800f292:	f7ff ff33 	bl	800f0fc <RegionCN779ChannelAdd>
 800f296:	2806      	cmp	r0, #6
 800f298:	d80b      	bhi.n	800f2b2 <RegionCN779NewChannelReq+0x4a>
 800f29a:	e8df f000 	tbb	[pc, r0]
 800f29e:	0a04      	.short	0x0a04
 800f2a0:	060e0a0a 	.word	0x060e0a0a
 800f2a4:	08          	.byte	0x08
 800f2a5:	00          	.byte	0x00
 800f2a6:	2003      	movs	r0, #3
 800f2a8:	e7eb      	b.n	800f282 <RegionCN779NewChannelReq+0x1a>
                status &= 0xFD;
 800f2aa:	2001      	movs	r0, #1
                break;
 800f2ac:	e7e9      	b.n	800f282 <RegionCN779NewChannelReq+0x1a>
                status &= 0xFC;
 800f2ae:	2000      	movs	r0, #0
                break;
 800f2b0:	e7e7      	b.n	800f282 <RegionCN779NewChannelReq+0x1a>
                status &= 0xFC;
 800f2b2:	2000      	movs	r0, #0
                break;
 800f2b4:	e7e5      	b.n	800f282 <RegionCN779NewChannelReq+0x1a>
            status &= 0xFC;
 800f2b6:	2000      	movs	r0, #0
 800f2b8:	e7e3      	b.n	800f282 <RegionCN779NewChannelReq+0x1a>
                status &= 0xFE;
 800f2ba:	2002      	movs	r0, #2
 800f2bc:	e7e1      	b.n	800f282 <RegionCN779NewChannelReq+0x1a>
	...

0800f2c0 <RegionCN779SetContinuousWave>:

void RegionCN779SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800f2c0:	b538      	push	{r3, r4, r5, lr}
 800f2c2:	4604      	mov	r4, r0
#if defined( REGION_CN779 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800f2c4:	4b12      	ldr	r3, [pc, #72]	; (800f310 <RegionCN779SetContinuousWave+0x50>)
 800f2c6:	6819      	ldr	r1, [r3, #0]
 800f2c8:	4d12      	ldr	r5, [pc, #72]	; (800f314 <RegionCN779SetContinuousWave+0x54>)
 800f2ca:	682b      	ldr	r3, [r5, #0]
 800f2cc:	7802      	ldrb	r2, [r0, #0]
 800f2ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f2d2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800f2d6:	7a53      	ldrb	r3, [r2, #9]
 800f2d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f2dc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800f2e0:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800f2e4:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800f2e8:	f000 fb9b 	bl	800fa22 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800f2ec:	682a      	ldr	r2, [r5, #0]
 800f2ee:	7823      	ldrb	r3, [r4, #0]
 800f2f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f2f4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800f2f8:	68a2      	ldr	r2, [r4, #8]
 800f2fa:	6861      	ldr	r1, [r4, #4]
 800f2fc:	f000 faae 	bl	800f85c <RegionCommonComputeTxPower>
 800f300:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800f302:	4b05      	ldr	r3, [pc, #20]	; (800f318 <RegionCN779SetContinuousWave+0x58>)
 800f304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f306:	89a2      	ldrh	r2, [r4, #12]
 800f308:	4628      	mov	r0, r5
 800f30a:	4798      	blx	r3
#endif /* REGION_CN779 */
}
 800f30c:	bd38      	pop	{r3, r4, r5, pc}
 800f30e:	bf00      	nop
 800f310:	20001444 	.word	0x20001444
 800f314:	20001448 	.word	0x20001448
 800f318:	08018318 	.word	0x08018318

0800f31c <RegionCN779ApplyDrOffset>:

uint8_t RegionCN779ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_CN779 )
    int8_t datarate = dr - drOffset;
 800f31c:	1a88      	subs	r0, r1, r2
 800f31e:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800f320:	2800      	cmp	r0, #0
 800f322:	db01      	blt.n	800f328 <RegionCN779ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_CN779 */
}
 800f324:	b2c0      	uxtb	r0, r0
 800f326:	4770      	bx	lr
        datarate = DR_0;
 800f328:	2000      	movs	r0, #0
 800f32a:	e7fb      	b.n	800f324 <RegionCN779ApplyDrOffset+0x8>

0800f32c <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800f32c:	b082      	sub	sp, #8
 800f32e:	f10d 0c08 	add.w	ip, sp, #8
 800f332:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800f336:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800f338:	b971      	cbnz	r1, 800f358 <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800f33a:	9b00      	ldr	r3, [sp, #0]
 800f33c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800f340:	d306      	bcc.n	800f350 <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800f342:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800f346:	4293      	cmp	r3, r2
 800f348:	d80a      	bhi.n	800f360 <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800f34a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f34e:	e000      	b.n	800f352 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800f350:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800f352:	4298      	cmp	r0, r3
 800f354:	bf38      	it	cc
 800f356:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800f358:	b900      	cbnz	r0, 800f35c <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800f35a:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800f35c:	b002      	add	sp, #8
 800f35e:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800f360:	f242 7310 	movw	r3, #10000	; 0x2710
 800f364:	e7f5      	b.n	800f352 <GetDutyCycle+0x26>

0800f366 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800f366:	b410      	push	{r4}
 800f368:	4604      	mov	r4, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800f36a:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800f36c:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800f36e:	e001      	b.n	800f374 <CountChannels+0xe>
 800f370:	3301      	adds	r3, #1
 800f372:	b2db      	uxtb	r3, r3
 800f374:	428b      	cmp	r3, r1
 800f376:	d206      	bcs.n	800f386 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800f378:	2201      	movs	r2, #1
 800f37a:	409a      	lsls	r2, r3
 800f37c:	43a2      	bics	r2, r4
 800f37e:	d1f7      	bne.n	800f370 <CountChannels+0xa>
        {
            nbActiveBits++;
 800f380:	3001      	adds	r0, #1
 800f382:	b2c0      	uxtb	r0, r0
 800f384:	e7f4      	b.n	800f370 <CountChannels+0xa>
        }
    }
    return nbActiveBits;
}
 800f386:	bc10      	pop	{r4}
 800f388:	4770      	bx	lr
	...

0800f38c <SetMaxTimeCredits>:
{
 800f38c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f390:	b089      	sub	sp, #36	; 0x24
 800f392:	4604      	mov	r4, r0
 800f394:	460e      	mov	r6, r1
 800f396:	ad02      	add	r5, sp, #8
 800f398:	e885 000c 	stmia.w	r5, {r2, r3}
 800f39c:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 800f3a0:	f89d 8044 	ldrb.w	r8, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800f3a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f3a8:	f007 fc7c 	bl	8016ca4 <SysTimeToMs>
 800f3ac:	4681      	mov	r9, r0
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800f3ae:	e895 000c 	ldmia.w	r5, {r2, r3}
 800f3b2:	4631      	mov	r1, r6
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	f7ff ffb9 	bl	800f32c <GetDutyCycle>
 800f3ba:	4605      	mov	r5, r0
    if( joined == false )
 800f3bc:	2e00      	cmp	r6, #0
 800f3be:	d149      	bne.n	800f454 <SetMaxTimeCredits+0xc8>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800f3c0:	2864      	cmp	r0, #100	; 0x64
 800f3c2:	d023      	beq.n	800f40c <SetMaxTimeCredits+0x80>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800f3c4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800f3c8:	d024      	beq.n	800f414 <SetMaxTimeCredits+0x88>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800f3ca:	4e25      	ldr	r6, [pc, #148]	; (800f460 <SetMaxTimeCredits+0xd4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800f3cc:	68a1      	ldr	r1, [r4, #8]
 800f3ce:	a806      	add	r0, sp, #24
 800f3d0:	f007 fc88 	bl	8016ce4 <SysTimeFromMs>
 800f3d4:	9b07      	ldr	r3, [sp, #28]
 800f3d6:	9300      	str	r3, [sp, #0]
 800f3d8:	9b06      	ldr	r3, [sp, #24]
 800f3da:	9a03      	ldr	r2, [sp, #12]
 800f3dc:	9902      	ldr	r1, [sp, #8]
 800f3de:	a804      	add	r0, sp, #16
 800f3e0:	f007 fbeb 	bl	8016bba <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800f3e4:	b917      	cbnz	r7, 800f3ec <SetMaxTimeCredits+0x60>
 800f3e6:	f1b8 0f00 	cmp.w	r8, #0
 800f3ea:	d002      	beq.n	800f3f2 <SetMaxTimeCredits+0x66>
            ( band->MaxTimeCredits != maxCredits ) ||
 800f3ec:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800f3ee:	42b3      	cmp	r3, r6
 800f3f0:	d014      	beq.n	800f41c <SetMaxTimeCredits+0x90>
            band->TimeCredits = maxCredits;
 800f3f2:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800f3f4:	9b02      	ldr	r3, [sp, #8]
 800f3f6:	4a1b      	ldr	r2, [pc, #108]	; (800f464 <SetMaxTimeCredits+0xd8>)
 800f3f8:	4293      	cmp	r3, r2
 800f3fa:	d814      	bhi.n	800f426 <SetMaxTimeCredits+0x9a>
    if( band->LastBandUpdateTime == 0 )
 800f3fc:	6863      	ldr	r3, [r4, #4]
 800f3fe:	b903      	cbnz	r3, 800f402 <SetMaxTimeCredits+0x76>
        band->TimeCredits = maxCredits;
 800f400:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800f402:	6126      	str	r6, [r4, #16]
}
 800f404:	4628      	mov	r0, r5
 800f406:	b009      	add	sp, #36	; 0x24
 800f408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800f40c:	f8c4 9008 	str.w	r9, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800f410:	4e15      	ldr	r6, [pc, #84]	; (800f468 <SetMaxTimeCredits+0xdc>)
 800f412:	e7db      	b.n	800f3cc <SetMaxTimeCredits+0x40>
            band->LastMaxCreditAssignTime = elapsedTime;
 800f414:	f8c4 9008 	str.w	r9, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800f418:	4e14      	ldr	r6, [pc, #80]	; (800f46c <SetMaxTimeCredits+0xe0>)
 800f41a:	e7d7      	b.n	800f3cc <SetMaxTimeCredits+0x40>
            ( band->MaxTimeCredits != maxCredits ) ||
 800f41c:	9a04      	ldr	r2, [sp, #16]
 800f41e:	4b14      	ldr	r3, [pc, #80]	; (800f470 <SetMaxTimeCredits+0xe4>)
 800f420:	429a      	cmp	r2, r3
 800f422:	d9eb      	bls.n	800f3fc <SetMaxTimeCredits+0x70>
 800f424:	e7e5      	b.n	800f3f2 <SetMaxTimeCredits+0x66>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800f426:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800f42a:	3b30      	subs	r3, #48	; 0x30
 800f42c:	4a11      	ldr	r2, [pc, #68]	; (800f474 <SetMaxTimeCredits+0xe8>)
 800f42e:	fba2 2303 	umull	r2, r3, r2, r3
 800f432:	0c1b      	lsrs	r3, r3, #16
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800f434:	4a10      	ldr	r2, [pc, #64]	; (800f478 <SetMaxTimeCredits+0xec>)
 800f436:	fb02 f303 	mul.w	r3, r2, r3
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800f43a:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800f43e:	3330      	adds	r3, #48	; 0x30
 800f440:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800f442:	2300      	movs	r3, #0
 800f444:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800f448:	9905      	ldr	r1, [sp, #20]
 800f44a:	9804      	ldr	r0, [sp, #16]
 800f44c:	f007 fc2a 	bl	8016ca4 <SysTimeToMs>
 800f450:	60a0      	str	r0, [r4, #8]
 800f452:	e7d3      	b.n	800f3fc <SetMaxTimeCredits+0x70>
        if( dutyCycleEnabled == false )
 800f454:	b917      	cbnz	r7, 800f45c <SetMaxTimeCredits+0xd0>
            band->TimeCredits = maxCredits;
 800f456:	4e04      	ldr	r6, [pc, #16]	; (800f468 <SetMaxTimeCredits+0xdc>)
 800f458:	60e6      	str	r6, [r4, #12]
 800f45a:	e7cf      	b.n	800f3fc <SetMaxTimeCredits+0x70>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800f45c:	4e02      	ldr	r6, [pc, #8]	; (800f468 <SetMaxTimeCredits+0xdc>)
 800f45e:	e7cd      	b.n	800f3fc <SetMaxTimeCredits+0x70>
 800f460:	02932e00 	.word	0x02932e00
 800f464:	0001ec2f 	.word	0x0001ec2f
 800f468:	001b7740 	.word	0x001b7740
 800f46c:	0112a880 	.word	0x0112a880
 800f470:	0001517f 	.word	0x0001517f
 800f474:	c22e4507 	.word	0xc22e4507
 800f478:	00015180 	.word	0x00015180

0800f47c <UpdateTimeCredits>:
{
 800f47c:	b570      	push	{r4, r5, r6, lr}
 800f47e:	b082      	sub	sp, #8
 800f480:	4604      	mov	r4, r0
 800f482:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800f484:	9301      	str	r3, [sp, #4]
 800f486:	9200      	str	r2, [sp, #0]
 800f488:	ab06      	add	r3, sp, #24
 800f48a:	cb0c      	ldmia	r3, {r2, r3}
 800f48c:	f7ff ff7e 	bl	800f38c <SetMaxTimeCredits>
 800f490:	4605      	mov	r5, r0
    if( joined == true )
 800f492:	b94e      	cbnz	r6, 800f4a8 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800f494:	68e2      	ldr	r2, [r4, #12]
 800f496:	6923      	ldr	r3, [r4, #16]
 800f498:	429a      	cmp	r2, r3
 800f49a:	d900      	bls.n	800f49e <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800f49c:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800f49e:	9b08      	ldr	r3, [sp, #32]
 800f4a0:	6063      	str	r3, [r4, #4]
}
 800f4a2:	4628      	mov	r0, r5
 800f4a4:	b002      	add	sp, #8
 800f4a6:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800f4a8:	6860      	ldr	r0, [r4, #4]
 800f4aa:	f007 fc79 	bl	8016da0 <UTIL_TIMER_GetElapsedTime>
 800f4ae:	68e3      	ldr	r3, [r4, #12]
 800f4b0:	4403      	add	r3, r0
 800f4b2:	60e3      	str	r3, [r4, #12]
 800f4b4:	e7ee      	b.n	800f494 <UpdateTimeCredits+0x18>

0800f4b6 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800f4b6:	4288      	cmp	r0, r1
 800f4b8:	db03      	blt.n	800f4c2 <RegionCommonValueInRange+0xc>
 800f4ba:	4290      	cmp	r0, r2
 800f4bc:	dd03      	ble.n	800f4c6 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800f4be:	2000      	movs	r0, #0
 800f4c0:	4770      	bx	lr
 800f4c2:	2000      	movs	r0, #0
 800f4c4:	4770      	bx	lr
        return 1;
 800f4c6:	2001      	movs	r0, #1
}
 800f4c8:	4770      	bx	lr

0800f4ca <RegionCommonChanVerifyDr>:
{
 800f4ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4ce:	4682      	mov	sl, r0
 800f4d0:	460e      	mov	r6, r1
 800f4d2:	4690      	mov	r8, r2
 800f4d4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800f4d8:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800f4dc:	4619      	mov	r1, r3
 800f4de:	4640      	mov	r0, r8
 800f4e0:	f7ff ffe9 	bl	800f4b6 <RegionCommonValueInRange>
 800f4e4:	b338      	cbz	r0, 800f536 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800f4e6:	2500      	movs	r5, #0
 800f4e8:	462f      	mov	r7, r5
 800f4ea:	e01e      	b.n	800f52a <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800f4ec:	3401      	adds	r4, #1
 800f4ee:	b2e4      	uxtb	r4, r4
 800f4f0:	2c0f      	cmp	r4, #15
 800f4f2:	d816      	bhi.n	800f522 <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800f4f4:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800f4f8:	4123      	asrs	r3, r4
 800f4fa:	f013 0f01 	tst.w	r3, #1
 800f4fe:	d0f5      	beq.n	800f4ec <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800f500:	193b      	adds	r3, r7, r4
 800f502:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f506:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800f50a:	7a19      	ldrb	r1, [r3, #8]
 800f50c:	090a      	lsrs	r2, r1, #4
 800f50e:	f001 010f 	and.w	r1, r1, #15
 800f512:	4640      	mov	r0, r8
 800f514:	f7ff ffcf 	bl	800f4b6 <RegionCommonValueInRange>
 800f518:	2801      	cmp	r0, #1
 800f51a:	d1e7      	bne.n	800f4ec <RegionCommonChanVerifyDr+0x22>
                    return true;
 800f51c:	2001      	movs	r0, #1
}
 800f51e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800f522:	3710      	adds	r7, #16
 800f524:	b2ff      	uxtb	r7, r7
 800f526:	3501      	adds	r5, #1
 800f528:	b2ed      	uxtb	r5, r5
 800f52a:	4557      	cmp	r7, sl
 800f52c:	d201      	bcs.n	800f532 <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800f52e:	2400      	movs	r4, #0
 800f530:	e7de      	b.n	800f4f0 <RegionCommonChanVerifyDr+0x26>
    return false;
 800f532:	2000      	movs	r0, #0
 800f534:	e7f3      	b.n	800f51e <RegionCommonChanVerifyDr+0x54>
        return false;
 800f536:	2000      	movs	r0, #0
 800f538:	e7f1      	b.n	800f51e <RegionCommonChanVerifyDr+0x54>

0800f53a <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800f53a:	0913      	lsrs	r3, r2, #4
 800f53c:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800f540:	d311      	bcc.n	800f566 <RegionCommonChanDisable+0x2c>
{
 800f542:	b410      	push	{r4}
 800f544:	090c      	lsrs	r4, r1, #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800f546:	4291      	cmp	r1, r2
 800f548:	d20f      	bcs.n	800f56a <RegionCommonChanDisable+0x30>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800f54a:	f001 010f 	and.w	r1, r1, #15
 800f54e:	2301      	movs	r3, #1
 800f550:	fa03 f101 	lsl.w	r1, r3, r1
 800f554:	f830 2014 	ldrh.w	r2, [r0, r4, lsl #1]
 800f558:	ea22 0101 	bic.w	r1, r2, r1
 800f55c:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]

    return true;
 800f560:	4618      	mov	r0, r3
}
 800f562:	bc10      	pop	{r4}
 800f564:	4770      	bx	lr
        return false;
 800f566:	2000      	movs	r0, #0
}
 800f568:	4770      	bx	lr
        return false;
 800f56a:	2000      	movs	r0, #0
 800f56c:	e7f9      	b.n	800f562 <RegionCommonChanDisable+0x28>

0800f56e <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800f56e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800f570:	b188      	cbz	r0, 800f596 <RegionCommonCountChannels+0x28>
 800f572:	460c      	mov	r4, r1
 800f574:	4616      	mov	r6, r2
 800f576:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800f578:	2500      	movs	r5, #0
 800f57a:	e008      	b.n	800f58e <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800f57c:	2110      	movs	r1, #16
 800f57e:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800f582:	f7ff fef0 	bl	800f366 <CountChannels>
 800f586:	4405      	add	r5, r0
 800f588:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800f58a:	3401      	adds	r4, #1
 800f58c:	b2e4      	uxtb	r4, r4
 800f58e:	42b4      	cmp	r4, r6
 800f590:	d3f4      	bcc.n	800f57c <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800f592:	4628      	mov	r0, r5
 800f594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800f596:	2500      	movs	r5, #0
 800f598:	e7fb      	b.n	800f592 <RegionCommonCountChannels+0x24>

0800f59a <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800f59a:	b170      	cbz	r0, 800f5ba <RegionCommonChanMaskCopy+0x20>
{
 800f59c:	b410      	push	{r4}
 800f59e:	4604      	mov	r4, r0
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800f5a0:	b149      	cbz	r1, 800f5b6 <RegionCommonChanMaskCopy+0x1c>
    {
        for( uint8_t i = 0; i < len; i++ )
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	4293      	cmp	r3, r2
 800f5a6:	d206      	bcs.n	800f5b6 <RegionCommonChanMaskCopy+0x1c>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800f5a8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f5ac:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	b2db      	uxtb	r3, r3
 800f5b4:	e7f6      	b.n	800f5a4 <RegionCommonChanMaskCopy+0xa>
        }
    }
}
 800f5b6:	bc10      	pop	{r4}
 800f5b8:	4770      	bx	lr
 800f5ba:	4770      	bx	lr

0800f5bc <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800f5bc:	b082      	sub	sp, #8
 800f5be:	b538      	push	{r3, r4, r5, lr}
 800f5c0:	4605      	mov	r5, r0
 800f5c2:	460c      	mov	r4, r1
 800f5c4:	4611      	mov	r1, r2
 800f5c6:	aa04      	add	r2, sp, #16
 800f5c8:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800f5cc:	ca0c      	ldmia	r2, {r2, r3}
 800f5ce:	f7ff fead 	bl	800f32c <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800f5d2:	68eb      	ldr	r3, [r5, #12]
 800f5d4:	fb04 f100 	mul.w	r1, r4, r0
 800f5d8:	428b      	cmp	r3, r1
 800f5da:	d905      	bls.n	800f5e8 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800f5dc:	1a59      	subs	r1, r3, r1
 800f5de:	60e9      	str	r1, [r5, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800f5e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f5e4:	b002      	add	sp, #8
 800f5e6:	4770      	bx	lr
        band->TimeCredits = 0;
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	60eb      	str	r3, [r5, #12]
}
 800f5ec:	e7f8      	b.n	800f5e0 <RegionCommonSetBandTxDone+0x24>
	...

0800f5f0 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800f5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5f4:	b089      	sub	sp, #36	; 0x24
 800f5f6:	4607      	mov	r7, r0
 800f5f8:	468b      	mov	fp, r1
 800f5fa:	4691      	mov	r9, r2
 800f5fc:	4698      	mov	r8, r3
 800f5fe:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800f602:	f007 fbc3 	bl	8016d8c <UTIL_TIMER_GetCurrentTime>
 800f606:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800f608:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800f60a:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800f60c:	f04f 33ff 	mov.w	r3, #4294967295
 800f610:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800f612:	e005      	b.n	800f620 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800f614:	2301      	movs	r3, #1
 800f616:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800f618:	441e      	add	r6, r3
 800f61a:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800f61c:	3401      	adds	r4, #1
 800f61e:	b2e4      	uxtb	r4, r4
 800f620:	454c      	cmp	r4, r9
 800f622:	d25b      	bcs.n	800f6dc <RegionCommonUpdateBandTimeOff+0xec>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800f624:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800f628:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800f62c:	9b04      	ldr	r3, [sp, #16]
 800f62e:	9302      	str	r3, [sp, #8]
 800f630:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f632:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800f634:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f638:	4653      	mov	r3, sl
 800f63a:	4642      	mov	r2, r8
 800f63c:	4639      	mov	r1, r7
 800f63e:	4628      	mov	r0, r5
 800f640:	f7ff ff1c 	bl	800f47c <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800f644:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f646:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800f64a:	68ea      	ldr	r2, [r5, #12]
 800f64c:	429a      	cmp	r2, r3
 800f64e:	d8e1      	bhi.n	800f614 <RegionCommonUpdateBandTimeOff+0x24>
 800f650:	f1b8 0f00 	cmp.w	r8, #0
 800f654:	d101      	bne.n	800f65a <RegionCommonUpdateBandTimeOff+0x6a>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800f656:	2f00      	cmp	r7, #0
 800f658:	d1dc      	bne.n	800f614 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800f65a:	2100      	movs	r1, #0
 800f65c:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 800f65e:	6929      	ldr	r1, [r5, #16]
 800f660:	4299      	cmp	r1, r3
 800f662:	d907      	bls.n	800f674 <RegionCommonUpdateBandTimeOff+0x84>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800f664:	1a9b      	subs	r3, r3, r2
 800f666:	9a05      	ldr	r2, [sp, #20]
 800f668:	429a      	cmp	r2, r3
 800f66a:	bf28      	it	cs
 800f66c:	461a      	movcs	r2, r3
 800f66e:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800f670:	3601      	adds	r6, #1
 800f672:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800f674:	2f00      	cmp	r7, #0
 800f676:	d1d1      	bne.n	800f61c <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800f678:	2300      	movs	r3, #0
 800f67a:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800f67e:	2864      	cmp	r0, #100	; 0x64
 800f680:	d024      	beq.n	800f6cc <RegionCommonUpdateBandTimeOff+0xdc>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800f682:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800f686:	d025      	beq.n	800f6d4 <RegionCommonUpdateBandTimeOff+0xe4>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800f688:	4b19      	ldr	r3, [pc, #100]	; (800f6f0 <RegionCommonUpdateBandTimeOff+0x100>)
 800f68a:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800f68c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f68e:	4a18      	ldr	r2, [pc, #96]	; (800f6f0 <RegionCommonUpdateBandTimeOff+0x100>)
 800f690:	4293      	cmp	r3, r2
 800f692:	d90c      	bls.n	800f6ae <RegionCommonUpdateBandTimeOff+0xbe>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800f694:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800f698:	3b30      	subs	r3, #48	; 0x30
 800f69a:	4a16      	ldr	r2, [pc, #88]	; (800f6f4 <RegionCommonUpdateBandTimeOff+0x104>)
 800f69c:	fba2 2303 	umull	r2, r3, r2, r3
 800f6a0:	0c1b      	lsrs	r3, r3, #16
 800f6a2:	4a15      	ldr	r2, [pc, #84]	; (800f6f8 <RegionCommonUpdateBandTimeOff+0x108>)
 800f6a4:	fb03 2202 	mla	r2, r3, r2, r2
 800f6a8:	9b06      	ldr	r3, [sp, #24]
 800f6aa:	441a      	add	r2, r3
 800f6ac:	9206      	str	r2, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800f6ae:	ad06      	add	r5, sp, #24
 800f6b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f6b2:	9300      	str	r3, [sp, #0]
 800f6b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f6b6:	e895 0006 	ldmia.w	r5, {r1, r2}
 800f6ba:	4628      	mov	r0, r5
 800f6bc:	f007 fa7d 	bl	8016bba <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800f6c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f6c4:	f007 faee 	bl	8016ca4 <SysTimeToMs>
 800f6c8:	9005      	str	r0, [sp, #20]
 800f6ca:	e7a7      	b.n	800f61c <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800f6cc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800f6d0:	9306      	str	r3, [sp, #24]
 800f6d2:	e7db      	b.n	800f68c <RegionCommonUpdateBandTimeOff+0x9c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800f6d4:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800f6d8:	9306      	str	r3, [sp, #24]
 800f6da:	e7d7      	b.n	800f68c <RegionCommonUpdateBandTimeOff+0x9c>
            }
        }
    }


    if( validBands == 0 )
 800f6dc:	b11e      	cbz	r6, 800f6e6 <RegionCommonUpdateBandTimeOff+0xf6>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800f6de:	9805      	ldr	r0, [sp, #20]
 800f6e0:	b009      	add	sp, #36	; 0x24
 800f6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800f6e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f6ea:	9305      	str	r3, [sp, #20]
 800f6ec:	e7f7      	b.n	800f6de <RegionCommonUpdateBandTimeOff+0xee>
 800f6ee:	bf00      	nop
 800f6f0:	0001ec30 	.word	0x0001ec30
 800f6f4:	c22e4507 	.word	0xc22e4507
 800f6f8:	00015180 	.word	0x00015180

0800f6fc <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800f6fc:	7803      	ldrb	r3, [r0, #0]
 800f6fe:	2b03      	cmp	r3, #3
 800f700:	d001      	beq.n	800f706 <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800f702:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800f704:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800f706:	7843      	ldrb	r3, [r0, #1]
 800f708:	f990 2001 	ldrsb.w	r2, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800f70c:	f002 020f 	and.w	r2, r2, #15
 800f710:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800f712:	091b      	lsrs	r3, r3, #4
 800f714:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800f716:	7883      	ldrb	r3, [r0, #2]
 800f718:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800f71a:	78c2      	ldrb	r2, [r0, #3]
 800f71c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f720:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800f722:	7903      	ldrb	r3, [r0, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800f724:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800f728:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800f72a:	f003 030f 	and.w	r3, r3, #15
 800f72e:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800f730:	2005      	movs	r0, #5
 800f732:	4770      	bx	lr

0800f734 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800f734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f738:	b085      	sub	sp, #20
 800f73a:	4604      	mov	r4, r0
 800f73c:	4688      	mov	r8, r1
 800f73e:	4617      	mov	r7, r2
 800f740:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800f742:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800f744:	f990 b006 	ldrsb.w	fp, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800f748:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800f74c:	f990 a008 	ldrsb.w	sl, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800f750:	7943      	ldrb	r3, [r0, #5]
 800f752:	b92b      	cbnz	r3, 800f760 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800f754:	f990 a00b 	ldrsb.w	sl, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800f758:	f990 b009 	ldrsb.w	fp, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800f75c:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800f760:	b95d      	cbnz	r5, 800f77a <RegionCommonLinkAdrReqVerifyParams+0x46>
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800f762:	2d07      	cmp	r5, #7
 800f764:	d02c      	beq.n	800f7c0 <RegionCommonLinkAdrReqVerifyParams+0x8c>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800f766:	f888 b000 	strb.w	fp, [r8]
    *txPow = txPower;
 800f76a:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800f76e:	f886 a000 	strb.w	sl, [r6]

    return status;
}
 800f772:	4628      	mov	r0, r5
 800f774:	b005      	add	sp, #20
 800f776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800f77a:	69a3      	ldr	r3, [r4, #24]
 800f77c:	9301      	str	r3, [sp, #4]
 800f77e:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800f782:	9300      	str	r3, [sp, #0]
 800f784:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800f788:	465a      	mov	r2, fp
 800f78a:	6921      	ldr	r1, [r4, #16]
 800f78c:	7b20      	ldrb	r0, [r4, #12]
 800f78e:	f7ff fe9c 	bl	800f4ca <RegionCommonChanVerifyDr>
 800f792:	b908      	cbnz	r0, 800f798 <RegionCommonLinkAdrReqVerifyParams+0x64>
            status &= 0xFD; // Datarate KO
 800f794:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800f798:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800f79c:	9303      	str	r3, [sp, #12]
 800f79e:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800f7a2:	461c      	mov	r4, r3
 800f7a4:	4619      	mov	r1, r3
 800f7a6:	4648      	mov	r0, r9
 800f7a8:	f7ff fe85 	bl	800f4b6 <RegionCommonValueInRange>
 800f7ac:	2800      	cmp	r0, #0
 800f7ae:	d1d8      	bne.n	800f762 <RegionCommonLinkAdrReqVerifyParams+0x2e>
            if( verifyParams->MaxTxPower > txPower )
 800f7b0:	454c      	cmp	r4, r9
 800f7b2:	dc02      	bgt.n	800f7ba <RegionCommonLinkAdrReqVerifyParams+0x86>
                status &= 0xFB; // TxPower KO
 800f7b4:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800f7b8:	e7d3      	b.n	800f762 <RegionCommonLinkAdrReqVerifyParams+0x2e>
                txPower = verifyParams->MaxTxPower;
 800f7ba:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f7be:	e7d0      	b.n	800f762 <RegionCommonLinkAdrReqVerifyParams+0x2e>
        if( nbRepetitions == 0 )
 800f7c0:	f1ba 0f00 	cmp.w	sl, #0
 800f7c4:	d1cf      	bne.n	800f766 <RegionCommonLinkAdrReqVerifyParams+0x32>
            nbRepetitions = 1;
 800f7c6:	f04f 0a01 	mov.w	sl, #1
 800f7ca:	e7cc      	b.n	800f766 <RegionCommonLinkAdrReqVerifyParams+0x32>

0800f7cc <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800f7cc:	4b02      	ldr	r3, [pc, #8]	; (800f7d8 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800f7ce:	fa03 f000 	lsl.w	r0, r3, r0
}
 800f7d2:	fbb0 f0f1 	udiv	r0, r0, r1
 800f7d6:	4770      	bx	lr
 800f7d8:	000f4240 	.word	0x000f4240

0800f7dc <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800f7dc:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800f7e0:	fbb3 f0f0 	udiv	r0, r3, r0
 800f7e4:	4770      	bx	lr
	...

0800f7e8 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800f7e8:	b430      	push	{r4, r5}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800f7ea:	1f0c      	subs	r4, r1, #4
 800f7ec:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800f7f0:	fb05 f202 	mul.w	r2, r5, r2
 800f7f4:	fb00 2204 	mla	r2, r0, r4, r2
 800f7f8:	0052      	lsls	r2, r2, #1
 800f7fa:	d021      	beq.n	800f840 <RegionCommonComputeRxWindowParameters+0x58>
 800f7fc:	4402      	add	r2, r0
 800f7fe:	3a01      	subs	r2, #1
 800f800:	fbb2 f2f0 	udiv	r2, r2, r0
 800f804:	428a      	cmp	r2, r1
 800f806:	bf38      	it	cc
 800f808:	460a      	movcc	r2, r1
 800f80a:	9902      	ldr	r1, [sp, #8]
 800f80c:	600a      	str	r2, [r1, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800f80e:	0081      	lsls	r1, r0, #2
 800f810:	fb00 f002 	mul.w	r0, r0, r2
 800f814:	b1b8      	cbz	r0, 800f846 <RegionCommonComputeRxWindowParameters+0x5e>
 800f816:	3001      	adds	r0, #1
 800f818:	0840      	lsrs	r0, r0, #1
 800f81a:	1a08      	subs	r0, r1, r0
 800f81c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f820:	fb02 0313 	mls	r3, r2, r3, r0
 800f824:	2b00      	cmp	r3, #0
 800f826:	dd10      	ble.n	800f84a <RegionCommonComputeRxWindowParameters+0x62>
 800f828:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800f82c:	480a      	ldr	r0, [pc, #40]	; (800f858 <RegionCommonComputeRxWindowParameters+0x70>)
 800f82e:	fb80 2003 	smull	r2, r0, r0, r3
 800f832:	17db      	asrs	r3, r3, #31
 800f834:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 800f838:	9a03      	ldr	r2, [sp, #12]
 800f83a:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800f83c:	bc30      	pop	{r4, r5}
 800f83e:	4770      	bx	lr
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800f840:	fbb2 f2f0 	udiv	r2, r2, r0
 800f844:	e7de      	b.n	800f804 <RegionCommonComputeRxWindowParameters+0x1c>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800f846:	0840      	lsrs	r0, r0, #1
 800f848:	e7e7      	b.n	800f81a <RegionCommonComputeRxWindowParameters+0x32>
 800f84a:	4803      	ldr	r0, [pc, #12]	; (800f858 <RegionCommonComputeRxWindowParameters+0x70>)
 800f84c:	fb80 2003 	smull	r2, r0, r0, r3
 800f850:	17db      	asrs	r3, r3, #31
 800f852:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 800f856:	e7ef      	b.n	800f838 <RegionCommonComputeRxWindowParameters+0x50>
 800f858:	10624dd3 	.word	0x10624dd3

0800f85c <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800f85c:	b538      	push	{r3, r4, r5, lr}
 800f85e:	460d      	mov	r5, r1
 800f860:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800f862:	0040      	lsls	r0, r0, #1
 800f864:	f7f0 ffb2 	bl	80007cc <__aeabi_ui2f>
 800f868:	4601      	mov	r1, r0
 800f86a:	4628      	mov	r0, r5
 800f86c:	f7f0 fefc 	bl	8000668 <__aeabi_fsub>
 800f870:	4621      	mov	r1, r4
 800f872:	f7f0 fef9 	bl	8000668 <__aeabi_fsub>
 800f876:	f7f0 fdeb 	bl	8000450 <__aeabi_f2d>
 800f87a:	f007 fd69 	bl	8017350 <floor>
 800f87e:	f7f0 fec7 	bl	8000610 <__aeabi_d2iz>

    return phyTxPower;
}
 800f882:	b240      	sxtb	r0, r0
 800f884:	bd38      	pop	{r3, r4, r5, pc}

0800f886 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800f886:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f88a:	b083      	sub	sp, #12
 800f88c:	4605      	mov	r5, r0
 800f88e:	468b      	mov	fp, r1
 800f890:	9200      	str	r2, [sp, #0]
 800f892:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800f894:	2600      	movs	r6, #0
 800f896:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800f898:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800f89a:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800f89c:	e04a      	b.n	800f934 <RegionCommonCountNbOfEnabledChannels+0xae>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800f89e:	7a3a      	ldrb	r2, [r7, #8]
 800f8a0:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800f8a4:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800f8a8:	b252      	sxtb	r2, r2
 800f8aa:	b249      	sxtb	r1, r1
 800f8ac:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800f8b0:	f7ff fe01 	bl	800f4b6 <RegionCommonValueInRange>
 800f8b4:	b178      	cbz	r0, 800f8d6 <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800f8b6:	68ea      	ldr	r2, [r5, #12]
 800f8b8:	7a7b      	ldrb	r3, [r7, #9]
 800f8ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f8be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f8c2:	7d1b      	ldrb	r3, [r3, #20]
 800f8c4:	b35b      	cbz	r3, 800f91e <RegionCommonCountNbOfEnabledChannels+0x98>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800f8c6:	f109 0301 	add.w	r3, r9, #1
 800f8ca:	eb08 0204 	add.w	r2, r8, r4
 800f8ce:	f80b 2009 	strb.w	r2, [fp, r9]
 800f8d2:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800f8d6:	3401      	adds	r4, #1
 800f8d8:	b2e4      	uxtb	r4, r4
 800f8da:	2c0f      	cmp	r4, #15
 800f8dc:	d824      	bhi.n	800f928 <RegionCommonCountNbOfEnabledChannels+0xa2>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800f8de:	686b      	ldr	r3, [r5, #4]
 800f8e0:	0072      	lsls	r2, r6, #1
 800f8e2:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800f8e6:	4123      	asrs	r3, r4
 800f8e8:	f013 0f01 	tst.w	r3, #1
 800f8ec:	d0f3      	beq.n	800f8d6 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800f8ee:	68a8      	ldr	r0, [r5, #8]
 800f8f0:	eb08 0304 	add.w	r3, r8, r4
 800f8f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f8f8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800f8fc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d0e8      	beq.n	800f8d6 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800f904:	782b      	ldrb	r3, [r5, #0]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d1c9      	bne.n	800f89e <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800f90a:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d0c6      	beq.n	800f89e <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800f910:	5a9b      	ldrh	r3, [r3, r2]
 800f912:	fa43 f104 	asr.w	r1, r3, r4
 800f916:	f011 0f01 	tst.w	r1, #1
 800f91a:	d1c0      	bne.n	800f89e <RegionCommonCountNbOfEnabledChannels+0x18>
 800f91c:	e7db      	b.n	800f8d6 <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800f91e:	f10a 0a01 	add.w	sl, sl, #1
 800f922:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800f926:	e7d6      	b.n	800f8d6 <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800f928:	f108 0810 	add.w	r8, r8, #16
 800f92c:	fa5f f888 	uxtb.w	r8, r8
 800f930:	3601      	adds	r6, #1
 800f932:	b2f6      	uxtb	r6, r6
 800f934:	fa1f f388 	uxth.w	r3, r8
 800f938:	8a2a      	ldrh	r2, [r5, #16]
 800f93a:	4293      	cmp	r3, r2
 800f93c:	d201      	bcs.n	800f942 <RegionCommonCountNbOfEnabledChannels+0xbc>
        for( uint8_t j = 0; j < 16; j++ )
 800f93e:	2400      	movs	r4, #0
 800f940:	e7cb      	b.n	800f8da <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800f942:	9b00      	ldr	r3, [sp, #0]
 800f944:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800f948:	9b01      	ldr	r3, [sp, #4]
 800f94a:	f883 a000 	strb.w	sl, [r3]
}
 800f94e:	b003      	add	sp, #12
 800f950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f954 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800f954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f958:	b085      	sub	sp, #20
 800f95a:	4604      	mov	r4, r0
 800f95c:	460f      	mov	r7, r1
 800f95e:	4616      	mov	r6, r2
 800f960:	461d      	mov	r5, r3
 800f962:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800f966:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800f96a:	6840      	ldr	r0, [r0, #4]
 800f96c:	f007 fa18 	bl	8016da0 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800f970:	6823      	ldr	r3, [r4, #0]
 800f972:	1a1b      	subs	r3, r3, r0
 800f974:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800f978:	2301      	movs	r3, #1
 800f97a:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800f97e:	2300      	movs	r3, #0
 800f980:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800f982:	6863      	ldr	r3, [r4, #4]
 800f984:	b113      	cbz	r3, 800f98c <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800f986:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800f988:	4283      	cmp	r3, r0
 800f98a:	d81c      	bhi.n	800f9c6 <RegionCommonIdentifyChannels+0x72>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800f98c:	2300      	movs	r3, #0
 800f98e:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800f990:	69e3      	ldr	r3, [r4, #28]
 800f992:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800f996:	781f      	ldrb	r7, [r3, #0]
 800f998:	69a3      	ldr	r3, [r4, #24]
 800f99a:	9303      	str	r3, [sp, #12]
 800f99c:	ab01      	add	r3, sp, #4
 800f99e:	6921      	ldr	r1, [r4, #16]
 800f9a0:	68e0      	ldr	r0, [r4, #12]
 800f9a2:	e883 0003 	stmia.w	r3, {r0, r1}
 800f9a6:	7d23      	ldrb	r3, [r4, #20]
 800f9a8:	9300      	str	r3, [sp, #0]
 800f9aa:	7a23      	ldrb	r3, [r4, #8]
 800f9ac:	7a62      	ldrb	r2, [r4, #9]
 800f9ae:	4661      	mov	r1, ip
 800f9b0:	4638      	mov	r0, r7
 800f9b2:	f7ff fe1d 	bl	800f5f0 <RegionCommonUpdateBandTimeOff>
 800f9b6:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800f9ba:	4643      	mov	r3, r8
 800f9bc:	462a      	mov	r2, r5
 800f9be:	4631      	mov	r1, r6
 800f9c0:	69e0      	ldr	r0, [r4, #28]
 800f9c2:	f7ff ff60 	bl	800f886 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800f9c6:	782b      	ldrb	r3, [r5, #0]
 800f9c8:	b923      	cbnz	r3, 800f9d4 <RegionCommonIdentifyChannels+0x80>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800f9ca:	f898 3000 	ldrb.w	r3, [r8]
 800f9ce:	b13b      	cbz	r3, 800f9e0 <RegionCommonIdentifyChannels+0x8c>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800f9d0:	200b      	movs	r0, #11
 800f9d2:	e002      	b.n	800f9da <RegionCommonIdentifyChannels+0x86>
        *nextTxDelay = 0;
 800f9d4:	2000      	movs	r0, #0
 800f9d6:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800f9da:	b005      	add	sp, #20
 800f9dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800f9e0:	200c      	movs	r0, #12
 800f9e2:	e7fa      	b.n	800f9da <RegionCommonIdentifyChannels+0x86>

0800f9e4 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800f9e4:	b570      	push	{r4, r5, r6, lr}
 800f9e6:	b082      	sub	sp, #8
 800f9e8:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800f9ea:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800f9ee:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800f9f2:	42a6      	cmp	r6, r4
 800f9f4:	d011      	beq.n	800fa1a <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800f9f6:	3c01      	subs	r4, #1
 800f9f8:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800f9fa:	42a6      	cmp	r6, r4
 800f9fc:	d00e      	beq.n	800fa1c <RegionCommonGetNextLowerTxDr+0x38>
 800f9fe:	68ab      	ldr	r3, [r5, #8]
 800fa00:	9301      	str	r3, [sp, #4]
 800fa02:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800fa06:	9300      	str	r3, [sp, #0]
 800fa08:	4633      	mov	r3, r6
 800fa0a:	4622      	mov	r2, r4
 800fa0c:	6869      	ldr	r1, [r5, #4]
 800fa0e:	78e8      	ldrb	r0, [r5, #3]
 800fa10:	f7ff fd5b 	bl	800f4ca <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800fa14:	2800      	cmp	r0, #0
 800fa16:	d0ee      	beq.n	800f9f6 <RegionCommonGetNextLowerTxDr+0x12>
 800fa18:	e000      	b.n	800fa1c <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800fa1a:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800fa1c:	4620      	mov	r0, r4
 800fa1e:	b002      	add	sp, #8
 800fa20:	bd70      	pop	{r4, r5, r6, pc}

0800fa22 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800fa22:	4288      	cmp	r0, r1
 800fa24:	bfb8      	it	lt
 800fa26:	4608      	movlt	r0, r1
 800fa28:	4770      	bx	lr
	...

0800fa2c <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800fa2c:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800fa30:	4a05      	ldr	r2, [pc, #20]	; (800fa48 <RegionCommonGetBandwidth+0x1c>)
 800fa32:	4293      	cmp	r3, r2
 800fa34:	d004      	beq.n	800fa40 <RegionCommonGetBandwidth+0x14>
 800fa36:	4a05      	ldr	r2, [pc, #20]	; (800fa4c <RegionCommonGetBandwidth+0x20>)
 800fa38:	4293      	cmp	r3, r2
 800fa3a:	d103      	bne.n	800fa44 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800fa3c:	2002      	movs	r0, #2
 800fa3e:	4770      	bx	lr
            return 1;
 800fa40:	2001      	movs	r0, #1
 800fa42:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800fa44:	2000      	movs	r0, #0
    }
}
 800fa46:	4770      	bx	lr
 800fa48:	0003d090 	.word	0x0003d090
 800fa4c:	0007a120 	.word	0x0007a120

0800fa50 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800fa50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa52:	b08b      	sub	sp, #44	; 0x2c
 800fa54:	4606      	mov	r6, r0
 800fa56:	460f      	mov	r7, r1
 800fa58:	4694      	mov	ip, r2
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800fa5a:	ac04      	add	r4, sp, #16
 800fa5c:	4d11      	ldr	r5, [pc, #68]	; (800faa4 <RegionCommonRxConfigPrint+0x54>)
 800fa5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa62:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fa66:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 800fa6a:	2e05      	cmp	r6, #5
 800fa6c:	d810      	bhi.n	800fa90 <RegionCommonRxConfigPrint+0x40>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800fa6e:	f8cd c008 	str.w	ip, [sp, #8]
 800fa72:	9701      	str	r7, [sp, #4]
 800fa74:	ab0a      	add	r3, sp, #40	; 0x28
 800fa76:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800fa7a:	f856 3c18 	ldr.w	r3, [r6, #-24]
 800fa7e:	9300      	str	r3, [sp, #0]
 800fa80:	4b09      	ldr	r3, [pc, #36]	; (800faa8 <RegionCommonRxConfigPrint+0x58>)
 800fa82:	2201      	movs	r2, #1
 800fa84:	2100      	movs	r1, #0
 800fa86:	2002      	movs	r0, #2
 800fa88:	f006 fe86 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800fa8c:	b00b      	add	sp, #44	; 0x2c
 800fa8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800fa90:	f8cd c004 	str.w	ip, [sp, #4]
 800fa94:	9700      	str	r7, [sp, #0]
 800fa96:	4b05      	ldr	r3, [pc, #20]	; (800faac <RegionCommonRxConfigPrint+0x5c>)
 800fa98:	2201      	movs	r2, #1
 800fa9a:	2100      	movs	r1, #0
 800fa9c:	2002      	movs	r0, #2
 800fa9e:	f006 fe7b 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
}
 800faa2:	e7f3      	b.n	800fa8c <RegionCommonRxConfigPrint+0x3c>
 800faa4:	080174c0 	.word	0x080174c0
 800faa8:	08017c5c 	.word	0x08017c5c
 800faac:	08017c7c 	.word	0x08017c7c

0800fab0 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800fab0:	b500      	push	{lr}
 800fab2:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800fab4:	9101      	str	r1, [sp, #4]
 800fab6:	9000      	str	r0, [sp, #0]
 800fab8:	4b04      	ldr	r3, [pc, #16]	; (800facc <RegionCommonTxConfigPrint+0x1c>)
 800faba:	2201      	movs	r2, #1
 800fabc:	2100      	movs	r1, #0
 800fabe:	2002      	movs	r0, #2
 800fac0:	f006 fe6a 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
}
 800fac4:	b003      	add	sp, #12
 800fac6:	f85d fb04 	ldr.w	pc, [sp], #4
 800faca:	bf00      	nop
 800facc:	08017c98 	.word	0x08017c98

0800fad0 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 800fad0:	b510      	push	{r4, lr}
 800fad2:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800fad4:	4b05      	ldr	r3, [pc, #20]	; (800faec <VerifyRfFreq+0x1c>)
 800fad6:	6a1b      	ldr	r3, [r3, #32]
 800fad8:	4798      	blx	r3
 800fada:	b120      	cbz	r0, 800fae6 <VerifyRfFreq+0x16>
    {
        return false;
    }

    if( ( freq < 433175000 ) || ( freq > 434665000 ) )
 800fadc:	4b04      	ldr	r3, [pc, #16]	; (800faf0 <VerifyRfFreq+0x20>)
 800fade:	4423      	add	r3, r4
 800fae0:	4a04      	ldr	r2, [pc, #16]	; (800faf4 <VerifyRfFreq+0x24>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d800      	bhi.n	800fae8 <VerifyRfFreq+0x18>
    {
        return false;
    }
    return true;
}
 800fae6:	bd10      	pop	{r4, pc}
        return false;
 800fae8:	2000      	movs	r0, #0
 800faea:	e7fc      	b.n	800fae6 <VerifyRfFreq+0x16>
 800faec:	08018318 	.word	0x08018318
 800faf0:	e62e4628 	.word	0xe62e4628
 800faf4:	0016bc50 	.word	0x0016bc50

0800faf8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800faf8:	b570      	push	{r4, r5, r6, lr}
 800fafa:	b084      	sub	sp, #16
 800fafc:	4605      	mov	r5, r0
 800fafe:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU433[datarate];
 800fb00:	4b13      	ldr	r3, [pc, #76]	; (800fb50 <GetTimeOnAir+0x58>)
 800fb02:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU433 );
 800fb04:	4913      	ldr	r1, [pc, #76]	; (800fb54 <GetTimeOnAir+0x5c>)
 800fb06:	f7ff ff91 	bl	800fa2c <RegionCommonGetBandwidth>
 800fb0a:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800fb0c:	2d07      	cmp	r5, #7
 800fb0e:	d00e      	beq.n	800fb2e <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800fb10:	4b11      	ldr	r3, [pc, #68]	; (800fb58 <GetTimeOnAir+0x60>)
 800fb12:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800fb14:	2001      	movs	r0, #1
 800fb16:	9003      	str	r0, [sp, #12]
 800fb18:	b2e4      	uxtb	r4, r4
 800fb1a:	9402      	str	r4, [sp, #8]
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	9301      	str	r3, [sp, #4]
 800fb20:	2308      	movs	r3, #8
 800fb22:	9300      	str	r3, [sp, #0]
 800fb24:	4603      	mov	r3, r0
 800fb26:	4632      	mov	r2, r6
 800fb28:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800fb2a:	b004      	add	sp, #16
 800fb2c:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800fb2e:	4b0a      	ldr	r3, [pc, #40]	; (800fb58 <GetTimeOnAir+0x60>)
 800fb30:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800fb32:	2301      	movs	r3, #1
 800fb34:	9303      	str	r3, [sp, #12]
 800fb36:	b2e4      	uxtb	r4, r4
 800fb38:	9402      	str	r4, [sp, #8]
 800fb3a:	2000      	movs	r0, #0
 800fb3c:	9001      	str	r0, [sp, #4]
 800fb3e:	2305      	movs	r3, #5
 800fb40:	9300      	str	r3, [sp, #0]
 800fb42:	4603      	mov	r3, r0
 800fb44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fb48:	fb02 f206 	mul.w	r2, r2, r6
 800fb4c:	47a8      	blx	r5
 800fb4e:	e7ec      	b.n	800fb2a <GetTimeOnAir+0x32>
 800fb50:	08017cd4 	.word	0x08017cd4
 800fb54:	08017cb4 	.word	0x08017cb4
 800fb58:	08018318 	.word	0x08018318

0800fb5c <RegionEU433GetPhyParam>:
#endif /* REGION_EU433 */

PhyParam_t RegionEU433GetPhyParam( GetPhyParams_t* getPhy )
{
 800fb5c:	b500      	push	{lr}
 800fb5e:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800fb60:	2300      	movs	r3, #0
 800fb62:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU433 )
    switch( getPhy->Attribute )
 800fb64:	7803      	ldrb	r3, [r0, #0]
 800fb66:	3b0b      	subs	r3, #11
 800fb68:	2b2e      	cmp	r3, #46	; 0x2e
 800fb6a:	d830      	bhi.n	800fbce <RegionEU433GetPhyParam+0x72>
 800fb6c:	e8df f003 	tbb	[pc, r3]
 800fb70:	3f393633 	.word	0x3f393633
 800fb74:	504c4845 	.word	0x504c4845
 800fb78:	605c5854 	.word	0x605c5854
 800fb7c:	6c2f692f 	.word	0x6c2f692f
 800fb80:	2f7b7872 	.word	0x2f7b7872
 800fb84:	18827f2f 	.word	0x18827f2f
 800fb88:	2f2f2f2f 	.word	0x2f2f2f2f
 800fb8c:	2f2f2f2f 	.word	0x2f2f2f2f
 800fb90:	2f2f2f2f 	.word	0x2f2f2f2f
 800fb94:	9288852f 	.word	0x9288852f
 800fb98:	98952f2f 	.word	0x98952f2f
 800fb9c:	9b2f      	.short	0x9b2f
 800fb9e:	a1          	.byte	0xa1
 800fb9f:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800fba0:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800fba4:	f88d 3004 	strb.w	r3, [sp, #4]
 800fba8:	2307      	movs	r3, #7
 800fbaa:	f88d 3005 	strb.w	r3, [sp, #5]
 800fbae:	2300      	movs	r3, #0
 800fbb0:	f88d 3006 	strb.w	r3, [sp, #6]
 800fbb4:	2310      	movs	r3, #16
 800fbb6:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU433_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU433_TX_MIN_DATARATE,
                .NbChannels = EU433_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800fbba:	4b41      	ldr	r3, [pc, #260]	; (800fcc0 <RegionEU433GetPhyParam+0x164>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800fbc2:	9202      	str	r2, [sp, #8]
 800fbc4:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800fbc6:	a801      	add	r0, sp, #4
 800fbc8:	f7ff ff0c 	bl	800f9e4 <RegionCommonGetNextLowerTxDr>
 800fbcc:	9004      	str	r0, [sp, #16]
        }
    }

#endif /* REGION_EU433 */
    return phyParam;
}
 800fbce:	9804      	ldr	r0, [sp, #16]
 800fbd0:	b007      	add	sp, #28
 800fbd2:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800fbd6:	2340      	movs	r3, #64	; 0x40
 800fbd8:	9304      	str	r3, [sp, #16]
            break;
 800fbda:	e7f8      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800fbdc:	2320      	movs	r3, #32
 800fbde:	9304      	str	r3, [sp, #16]
            break;
 800fbe0:	e7f5      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateEU433[getPhy->Datarate];
 800fbe2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800fbe6:	4a37      	ldr	r2, [pc, #220]	; (800fcc4 <RegionEU433GetPhyParam+0x168>)
 800fbe8:	5cd3      	ldrb	r3, [r2, r3]
 800fbea:	9304      	str	r3, [sp, #16]
            break;
 800fbec:	e7ef      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU433[getPhy->Datarate];
 800fbee:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800fbf2:	4a35      	ldr	r2, [pc, #212]	; (800fcc8 <RegionEU433GetPhyParam+0x16c>)
 800fbf4:	5cd3      	ldrb	r3, [r2, r3]
 800fbf6:	9304      	str	r3, [sp, #16]
            break;
 800fbf8:	e7e9      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
            phyParam.Value = EU433_DUTY_CYCLE_ENABLED;
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	9304      	str	r3, [sp, #16]
            break;
 800fbfe:	e7e6      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
            phyParam.Value = EU433_MAX_RX_WINDOW;
 800fc00:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800fc04:	9304      	str	r3, [sp, #16]
            break;
 800fc06:	e7e2      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800fc08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fc0c:	9304      	str	r3, [sp, #16]
            break;
 800fc0e:	e7de      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800fc10:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800fc14:	9304      	str	r3, [sp, #16]
            break;
 800fc16:	e7da      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800fc18:	f241 3388 	movw	r3, #5000	; 0x1388
 800fc1c:	9304      	str	r3, [sp, #16]
            break;
 800fc1e:	e7d6      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800fc20:	f241 7370 	movw	r3, #6000	; 0x1770
 800fc24:	9304      	str	r3, [sp, #16]
            break;
 800fc26:	e7d2      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800fc28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fc2c:	9304      	str	r3, [sp, #16]
            break;
 800fc2e:	e7ce      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800fc30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800fc34:	4825      	ldr	r0, [pc, #148]	; (800fccc <RegionEU433GetPhyParam+0x170>)
 800fc36:	f004 fc19 	bl	801446c <randr>
 800fc3a:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800fc3e:	9004      	str	r0, [sp, #16]
            break;
 800fc40:	e7c5      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
            phyParam.Value = EU433_RX_WND_2_FREQ;
 800fc42:	4b23      	ldr	r3, [pc, #140]	; (800fcd0 <RegionEU433GetPhyParam+0x174>)
 800fc44:	9304      	str	r3, [sp, #16]
            break;
 800fc46:	e7c2      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800fc48:	4b1d      	ldr	r3, [pc, #116]	; (800fcc0 <RegionEU433GetPhyParam+0x164>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800fc50:	9304      	str	r3, [sp, #16]
            break;
 800fc52:	e7bc      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800fc54:	4b1a      	ldr	r3, [pc, #104]	; (800fcc0 <RegionEU433GetPhyParam+0x164>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800fc5c:	9304      	str	r3, [sp, #16]
            break;
 800fc5e:	e7b6      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
            phyParam.Value = EU433_MAX_NB_CHANNELS;
 800fc60:	2310      	movs	r3, #16
 800fc62:	9304      	str	r3, [sp, #16]
            break;
 800fc64:	e7b3      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800fc66:	4b16      	ldr	r3, [pc, #88]	; (800fcc0 <RegionEU433GetPhyParam+0x164>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	9304      	str	r3, [sp, #16]
            break;
 800fc6c:	e7af      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
            phyParam.fValue = EU433_DEFAULT_MAX_EIRP;
 800fc6e:	4b19      	ldr	r3, [pc, #100]	; (800fcd4 <RegionEU433GetPhyParam+0x178>)
 800fc70:	9304      	str	r3, [sp, #16]
            break;
 800fc72:	e7ac      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
            phyParam.fValue = EU433_DEFAULT_ANTENNA_GAIN;
 800fc74:	4b18      	ldr	r3, [pc, #96]	; (800fcd8 <RegionEU433GetPhyParam+0x17c>)
 800fc76:	9304      	str	r3, [sp, #16]
            break;
 800fc78:	e7a9      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
            phyParam.Value = EU433_BEACON_CHANNEL_FREQ;
 800fc7a:	4b15      	ldr	r3, [pc, #84]	; (800fcd0 <RegionEU433GetPhyParam+0x174>)
 800fc7c:	9304      	str	r3, [sp, #16]
            break;
 800fc7e:	e7a6      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = EU433_BEACON_SIZE;
 800fc80:	2311      	movs	r3, #17
 800fc82:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU433_RFU1_SIZE;
 800fc86:	2302      	movs	r3, #2
 800fc88:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = EU433_RFU2_SIZE;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800fc92:	e79c      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
            phyParam.Value = EU433_BEACON_CHANNEL_DR;
 800fc94:	2303      	movs	r3, #3
 800fc96:	9304      	str	r3, [sp, #16]
            break;
 800fc98:	e799      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
            phyParam.Value = EU433_PING_SLOT_CHANNEL_FREQ;
 800fc9a:	4b0d      	ldr	r3, [pc, #52]	; (800fcd0 <RegionEU433GetPhyParam+0x174>)
 800fc9c:	9304      	str	r3, [sp, #16]
            break;
 800fc9e:	e796      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
            phyParam.Value = EU433_PING_SLOT_CHANNEL_DR;
 800fca0:	2303      	movs	r3, #3
 800fca2:	9304      	str	r3, [sp, #16]
            break;
 800fca4:	e793      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
            phyParam.Value = DataratesEU433[getPhy->Datarate];
 800fca6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800fcaa:	4a0c      	ldr	r2, [pc, #48]	; (800fcdc <RegionEU433GetPhyParam+0x180>)
 800fcac:	5cd3      	ldrb	r3, [r2, r3]
 800fcae:	9304      	str	r3, [sp, #16]
            break;
 800fcb0:	e78d      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU433 );
 800fcb2:	490b      	ldr	r1, [pc, #44]	; (800fce0 <RegionEU433GetPhyParam+0x184>)
 800fcb4:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800fcb8:	f7ff feb8 	bl	800fa2c <RegionCommonGetBandwidth>
 800fcbc:	9004      	str	r0, [sp, #16]
            break;
 800fcbe:	e786      	b.n	800fbce <RegionEU433GetPhyParam+0x72>
 800fcc0:	20001450 	.word	0x20001450
 800fcc4:	08017cdc 	.word	0x08017cdc
 800fcc8:	08017ce4 	.word	0x08017ce4
 800fccc:	fffffc18 	.word	0xfffffc18
 800fcd0:	19e87628 	.word	0x19e87628
 800fcd4:	41426666 	.word	0x41426666
 800fcd8:	4009999a 	.word	0x4009999a
 800fcdc:	08017cd4 	.word	0x08017cd4
 800fce0:	08017cb4 	.word	0x08017cb4

0800fce4 <RegionEU433SetBandTxDone>:

void RegionEU433SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800fce4:	b530      	push	{r4, r5, lr}
 800fce6:	b083      	sub	sp, #12
#if defined( REGION_EU433 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800fce8:	4b0b      	ldr	r3, [pc, #44]	; (800fd18 <RegionEU433SetBandTxDone+0x34>)
 800fcea:	681d      	ldr	r5, [r3, #0]
 800fcec:	4b0b      	ldr	r3, [pc, #44]	; (800fd1c <RegionEU433SetBandTxDone+0x38>)
 800fcee:	681a      	ldr	r2, [r3, #0]
 800fcf0:	7803      	ldrb	r3, [r0, #0]
 800fcf2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fcf6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fcfa:	7a5b      	ldrb	r3, [r3, #9]
 800fcfc:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800fd00:	6903      	ldr	r3, [r0, #16]
 800fd02:	9300      	str	r3, [sp, #0]
 800fd04:	68c3      	ldr	r3, [r0, #12]
 800fd06:	7842      	ldrb	r2, [r0, #1]
 800fd08:	6881      	ldr	r1, [r0, #8]
 800fd0a:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 800fd0e:	f7ff fc55 	bl	800f5bc <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU433 */
}
 800fd12:	b003      	add	sp, #12
 800fd14:	bd30      	pop	{r4, r5, pc}
 800fd16:	bf00      	nop
 800fd18:	2000144c 	.word	0x2000144c
 800fd1c:	20001450 	.word	0x20001450

0800fd20 <RegionEU433InitDefaults>:

void RegionEU433InitDefaults( InitDefaultsParams_t* params )
{
 800fd20:	b530      	push	{r4, r5, lr}
 800fd22:	b087      	sub	sp, #28
#if defined( REGION_EU433 )
    Band_t bands[EU433_MAX_NB_BANDS] =
 800fd24:	2364      	movs	r3, #100	; 0x64
 800fd26:	f8ad 3000 	strh.w	r3, [sp]
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	f88d 3002 	strb.w	r3, [sp, #2]
 800fd30:	9301      	str	r3, [sp, #4]
 800fd32:	9302      	str	r3, [sp, #8]
 800fd34:	9303      	str	r3, [sp, #12]
 800fd36:	9304      	str	r3, [sp, #16]
 800fd38:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        EU433_BAND0
    };

    switch( params->Type )
 800fd3c:	7a03      	ldrb	r3, [r0, #8]
 800fd3e:	2b01      	cmp	r3, #1
 800fd40:	d032      	beq.n	800fda8 <RegionEU433InitDefaults+0x88>
 800fd42:	2b02      	cmp	r3, #2
 800fd44:	d03e      	beq.n	800fdc4 <RegionEU433InitDefaults+0xa4>
 800fd46:	b10b      	cbz	r3, 800fd4c <RegionEU433InitDefaults+0x2c>
        {
            break;
        }
    }
#endif /* REGION_EU433 */
}
 800fd48:	b007      	add	sp, #28
 800fd4a:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800fd4c:	6803      	ldr	r3, [r0, #0]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d0fa      	beq.n	800fd48 <RegionEU433InitDefaults+0x28>
 800fd52:	6842      	ldr	r2, [r0, #4]
 800fd54:	2a00      	cmp	r2, #0
 800fd56:	d0f7      	beq.n	800fd48 <RegionEU433InitDefaults+0x28>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800fd58:	491f      	ldr	r1, [pc, #124]	; (800fdd8 <RegionEU433InitDefaults+0xb8>)
 800fd5a:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800fd5c:	4c1f      	ldr	r4, [pc, #124]	; (800fddc <RegionEU433InitDefaults+0xbc>)
 800fd5e:	6022      	str	r2, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU433_MAX_NB_BANDS );
 800fd60:	2218      	movs	r2, #24
 800fd62:	4669      	mov	r1, sp
 800fd64:	4618      	mov	r0, r3
 800fd66:	f004 fb8e 	bl	8014486 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU433_LC1;
 800fd6a:	6824      	ldr	r4, [r4, #0]
 800fd6c:	4b1c      	ldr	r3, [pc, #112]	; (800fde0 <RegionEU433InitDefaults+0xc0>)
 800fd6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fd72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU433_LC2;
 800fd76:	f104 050c 	add.w	r5, r4, #12
 800fd7a:	f103 020c 	add.w	r2, r3, #12
 800fd7e:	ca07      	ldmia	r2, {r0, r1, r2}
 800fd80:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU433_LC3;
 800fd84:	f104 0518 	add.w	r5, r4, #24
 800fd88:	3318      	adds	r3, #24
 800fd8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fd8e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800fd92:	2307      	movs	r3, #7
 800fd94:	f8a4 348c 	strh.w	r3, [r4, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800fd98:	2201      	movs	r2, #1
 800fd9a:	f204 418c 	addw	r1, r4, #1164	; 0x48c
 800fd9e:	f504 6090 	add.w	r0, r4, #1152	; 0x480
 800fda2:	f7ff fbfa 	bl	800f59a <RegionCommonChanMaskCopy>
            break;
 800fda6:	e7cf      	b.n	800fd48 <RegionEU433InitDefaults+0x28>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800fda8:	4b0c      	ldr	r3, [pc, #48]	; (800fddc <RegionEU433InitDefaults+0xbc>)
 800fdaa:	6818      	ldr	r0, [r3, #0]
 800fdac:	2300      	movs	r3, #0
 800fdae:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800fdb0:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800fdb2:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800fdb4:	2201      	movs	r2, #1
 800fdb6:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800fdba:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800fdbe:	f7ff fbec 	bl	800f59a <RegionCommonChanMaskCopy>
            break;
 800fdc2:	e7c1      	b.n	800fd48 <RegionEU433InitDefaults+0x28>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800fdc4:	4b05      	ldr	r3, [pc, #20]	; (800fddc <RegionEU433InitDefaults+0xbc>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 800fdcc:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 800fdd0:	430a      	orrs	r2, r1
 800fdd2:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 800fdd6:	e7b7      	b.n	800fd48 <RegionEU433InitDefaults+0x28>
 800fdd8:	2000144c 	.word	0x2000144c
 800fddc:	20001450 	.word	0x20001450
 800fde0:	080174d8 	.word	0x080174d8

0800fde4 <RegionEU433Verify>:

bool RegionEU433Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800fde4:	b508      	push	{r3, lr}
#if defined( REGION_EU433 )
    switch( phyAttribute )
 800fde6:	290f      	cmp	r1, #15
 800fde8:	d837      	bhi.n	800fe5a <RegionEU433Verify+0x76>
 800fdea:	e8df f001 	tbb	[pc, r1]
 800fdee:	360a      	.short	0x360a
 800fdf0:	0e363636 	.word	0x0e363636
 800fdf4:	2c362218 	.word	0x2c362218
 800fdf8:	3636362c 	.word	0x3636362c
 800fdfc:	0836      	.short	0x0836
        case PHY_DUTY_CYCLE:
        {
            return EU433_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800fdfe:	2001      	movs	r0, #1
 800fe00:	e02c      	b.n	800fe5c <RegionEU433Verify+0x78>
            return VerifyRfFreq( verify->Frequency );
 800fe02:	6800      	ldr	r0, [r0, #0]
 800fe04:	f7ff fe64 	bl	800fad0 <VerifyRfFreq>
 800fe08:	e028      	b.n	800fe5c <RegionEU433Verify+0x78>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU433_TX_MIN_DATARATE, EU433_TX_MAX_DATARATE );
 800fe0a:	2207      	movs	r2, #7
 800fe0c:	2100      	movs	r1, #0
 800fe0e:	f990 0000 	ldrsb.w	r0, [r0]
 800fe12:	f7ff fb50 	bl	800f4b6 <RegionCommonValueInRange>
 800fe16:	3800      	subs	r0, #0
 800fe18:	bf18      	it	ne
 800fe1a:	2001      	movne	r0, #1
 800fe1c:	e01e      	b.n	800fe5c <RegionEU433Verify+0x78>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800fe1e:	2205      	movs	r2, #5
 800fe20:	2100      	movs	r1, #0
 800fe22:	f990 0000 	ldrsb.w	r0, [r0]
 800fe26:	f7ff fb46 	bl	800f4b6 <RegionCommonValueInRange>
 800fe2a:	3800      	subs	r0, #0
 800fe2c:	bf18      	it	ne
 800fe2e:	2001      	movne	r0, #1
 800fe30:	e014      	b.n	800fe5c <RegionEU433Verify+0x78>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU433_RX_MIN_DATARATE, EU433_RX_MAX_DATARATE );
 800fe32:	2207      	movs	r2, #7
 800fe34:	2100      	movs	r1, #0
 800fe36:	f990 0000 	ldrsb.w	r0, [r0]
 800fe3a:	f7ff fb3c 	bl	800f4b6 <RegionCommonValueInRange>
 800fe3e:	3800      	subs	r0, #0
 800fe40:	bf18      	it	ne
 800fe42:	2001      	movne	r0, #1
 800fe44:	e00a      	b.n	800fe5c <RegionEU433Verify+0x78>
            return RegionCommonValueInRange( verify->TxPower, EU433_MAX_TX_POWER, EU433_MIN_TX_POWER );
 800fe46:	2205      	movs	r2, #5
 800fe48:	2100      	movs	r1, #0
 800fe4a:	f990 0000 	ldrsb.w	r0, [r0]
 800fe4e:	f7ff fb32 	bl	800f4b6 <RegionCommonValueInRange>
 800fe52:	3800      	subs	r0, #0
 800fe54:	bf18      	it	ne
 800fe56:	2001      	movne	r0, #1
 800fe58:	e000      	b.n	800fe5c <RegionEU433Verify+0x78>
            return false;
 800fe5a:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU433 */
}
 800fe5c:	bd08      	pop	{r3, pc}
	...

0800fe60 <RegionEU433ChanMaskSet>:
    }
#endif /* REGION_EU433 */
}

bool RegionEU433ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800fe60:	b508      	push	{r3, lr}
#if defined( REGION_EU433 )
    switch( chanMaskSet->ChannelsMaskType )
 800fe62:	7903      	ldrb	r3, [r0, #4]
 800fe64:	b11b      	cbz	r3, 800fe6e <RegionEU433ChanMaskSet+0xe>
 800fe66:	2b01      	cmp	r3, #1
 800fe68:	d00b      	beq.n	800fe82 <RegionEU433ChanMaskSet+0x22>
 800fe6a:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU433 */
}
 800fe6c:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800fe6e:	4b0a      	ldr	r3, [pc, #40]	; (800fe98 <RegionEU433ChanMaskSet+0x38>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	2201      	movs	r2, #1
 800fe74:	6801      	ldr	r1, [r0, #0]
 800fe76:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800fe7a:	f7ff fb8e 	bl	800f59a <RegionCommonChanMaskCopy>
    return true;
 800fe7e:	2001      	movs	r0, #1
            break;
 800fe80:	e7f4      	b.n	800fe6c <RegionEU433ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800fe82:	4b05      	ldr	r3, [pc, #20]	; (800fe98 <RegionEU433ChanMaskSet+0x38>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	2201      	movs	r2, #1
 800fe88:	6801      	ldr	r1, [r0, #0]
 800fe8a:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 800fe8e:	f7ff fb84 	bl	800f59a <RegionCommonChanMaskCopy>
    return true;
 800fe92:	2001      	movs	r0, #1
            break;
 800fe94:	e7ea      	b.n	800fe6c <RegionEU433ChanMaskSet+0xc>
 800fe96:	bf00      	nop
 800fe98:	20001450 	.word	0x20001450

0800fe9c <RegionEU433ComputeRxWindowParameters>:

void RegionEU433ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800fe9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe9e:	b083      	sub	sp, #12
 800fea0:	460e      	mov	r6, r1
 800fea2:	4617      	mov	r7, r2
 800fea4:	461c      	mov	r4, r3
#if defined( REGION_EU433 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU433_RX_MAX_DATARATE );
 800fea6:	2807      	cmp	r0, #7
 800fea8:	bfa8      	it	ge
 800feaa:	2007      	movge	r0, #7
 800feac:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU433 );
 800feae:	4913      	ldr	r1, [pc, #76]	; (800fefc <RegionEU433ComputeRxWindowParameters+0x60>)
 800feb0:	f7ff fdbc 	bl	800fa2c <RegionCommonGetBandwidth>
 800feb4:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800feb6:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800feba:	2b07      	cmp	r3, #7
 800febc:	d017      	beq.n	800feee <RegionEU433ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU433[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU433[rxConfigParams->Datarate], BandwidthsEU433[rxConfigParams->Datarate] );
 800febe:	4a0f      	ldr	r2, [pc, #60]	; (800fefc <RegionEU433ComputeRxWindowParameters+0x60>)
 800fec0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800fec4:	4a0e      	ldr	r2, [pc, #56]	; (800ff00 <RegionEU433ComputeRxWindowParameters+0x64>)
 800fec6:	5cd0      	ldrb	r0, [r2, r3]
 800fec8:	f7ff fc80 	bl	800f7cc <RegionCommonComputeSymbolTimeLoRa>
 800fecc:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800fece:	4b0d      	ldr	r3, [pc, #52]	; (800ff04 <RegionEU433ComputeRxWindowParameters+0x68>)
 800fed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fed2:	4798      	blx	r3
 800fed4:	4603      	mov	r3, r0
 800fed6:	f104 020c 	add.w	r2, r4, #12
 800feda:	9201      	str	r2, [sp, #4]
 800fedc:	3408      	adds	r4, #8
 800fede:	9400      	str	r4, [sp, #0]
 800fee0:	463a      	mov	r2, r7
 800fee2:	4631      	mov	r1, r6
 800fee4:	4628      	mov	r0, r5
 800fee6:	f7ff fc7f 	bl	800f7e8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU433 */
}
 800feea:	b003      	add	sp, #12
 800feec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU433[rxConfigParams->Datarate] );
 800feee:	4a04      	ldr	r2, [pc, #16]	; (800ff00 <RegionEU433ComputeRxWindowParameters+0x64>)
 800fef0:	5cd0      	ldrb	r0, [r2, r3]
 800fef2:	f7ff fc73 	bl	800f7dc <RegionCommonComputeSymbolTimeFsk>
 800fef6:	4605      	mov	r5, r0
 800fef8:	e7e9      	b.n	800fece <RegionEU433ComputeRxWindowParameters+0x32>
 800fefa:	bf00      	nop
 800fefc:	08017cb4 	.word	0x08017cb4
 800ff00:	08017cd4 	.word	0x08017cd4
 800ff04:	08018318 	.word	0x08018318

0800ff08 <RegionEU433RxConfig>:

bool RegionEU433RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800ff08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff0c:	b08a      	sub	sp, #40	; 0x28
 800ff0e:	4604      	mov	r4, r0
 800ff10:	460f      	mov	r7, r1
#if defined( REGION_EU433 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800ff12:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800ff16:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800ff1a:	4b37      	ldr	r3, [pc, #220]	; (800fff8 <RegionEU433RxConfig+0xf0>)
 800ff1c:	685b      	ldr	r3, [r3, #4]
 800ff1e:	4798      	blx	r3
 800ff20:	2800      	cmp	r0, #0
 800ff22:	d167      	bne.n	800fff4 <RegionEU433RxConfig+0xec>
 800ff24:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800ff26:	7ce3      	ldrb	r3, [r4, #19]
 800ff28:	b983      	cbnz	r3, 800ff4c <RegionEU433RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800ff2a:	4b34      	ldr	r3, [pc, #208]	; (800fffc <RegionEU433RxConfig+0xf4>)
 800ff2c:	681a      	ldr	r2, [r3, #0]
 800ff2e:	7823      	ldrb	r3, [r4, #0]
 800ff30:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800ff34:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800ff38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ff3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ff40:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800ff44:	f1b8 0f00 	cmp.w	r8, #0
 800ff48:	d100      	bne.n	800ff4c <RegionEU433RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800ff4a:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU433[dr];
 800ff4c:	4b2c      	ldr	r3, [pc, #176]	; (8010000 <RegionEU433RxConfig+0xf8>)
 800ff4e:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800ff52:	4b29      	ldr	r3, [pc, #164]	; (800fff8 <RegionEU433RxConfig+0xf0>)
 800ff54:	68db      	ldr	r3, [r3, #12]
 800ff56:	4640      	mov	r0, r8
 800ff58:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800ff5a:	2d07      	cmp	r5, #7
 800ff5c:	d02b      	beq.n	800ffb6 <RegionEU433RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800ff5e:	4b26      	ldr	r3, [pc, #152]	; (800fff8 <RegionEU433RxConfig+0xf0>)
 800ff60:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800ff64:	7ca3      	ldrb	r3, [r4, #18]
 800ff66:	9309      	str	r3, [sp, #36]	; 0x24
 800ff68:	2601      	movs	r6, #1
 800ff6a:	9608      	str	r6, [sp, #32]
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	9307      	str	r3, [sp, #28]
 800ff70:	9306      	str	r3, [sp, #24]
 800ff72:	9305      	str	r3, [sp, #20]
 800ff74:	9304      	str	r3, [sp, #16]
 800ff76:	9303      	str	r3, [sp, #12]
 800ff78:	8922      	ldrh	r2, [r4, #8]
 800ff7a:	9202      	str	r2, [sp, #8]
 800ff7c:	2208      	movs	r2, #8
 800ff7e:	9201      	str	r2, [sp, #4]
 800ff80:	9300      	str	r3, [sp, #0]
 800ff82:	4633      	mov	r3, r6
 800ff84:	464a      	mov	r2, r9
 800ff86:	78a1      	ldrb	r1, [r4, #2]
 800ff88:	4630      	mov	r0, r6
 800ff8a:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800ff8c:	7c63      	ldrb	r3, [r4, #17]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d02d      	beq.n	800ffee <RegionEU433RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU433[dr];
 800ff92:	4b1c      	ldr	r3, [pc, #112]	; (8010004 <RegionEU433RxConfig+0xfc>)
 800ff94:	5d59      	ldrb	r1, [r3, r5]
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU433[dr];
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800ff96:	4b18      	ldr	r3, [pc, #96]	; (800fff8 <RegionEU433RxConfig+0xf0>)
 800ff98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff9a:	310d      	adds	r1, #13
 800ff9c:	b2c9      	uxtb	r1, r1
 800ff9e:	4630      	mov	r0, r6
 800ffa0:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800ffa2:	462a      	mov	r2, r5
 800ffa4:	4641      	mov	r1, r8
 800ffa6:	7ce0      	ldrb	r0, [r4, #19]
 800ffa8:	f7ff fd52 	bl	800fa50 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800ffac:	703d      	strb	r5, [r7, #0]
    return true;
 800ffae:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU433 */
}
 800ffb0:	b00a      	add	sp, #40	; 0x28
 800ffb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800ffb6:	4b10      	ldr	r3, [pc, #64]	; (800fff8 <RegionEU433RxConfig+0xf0>)
 800ffb8:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800ffbc:	7ca3      	ldrb	r3, [r4, #18]
 800ffbe:	9309      	str	r3, [sp, #36]	; 0x24
 800ffc0:	2000      	movs	r0, #0
 800ffc2:	9008      	str	r0, [sp, #32]
 800ffc4:	9007      	str	r0, [sp, #28]
 800ffc6:	9006      	str	r0, [sp, #24]
 800ffc8:	2301      	movs	r3, #1
 800ffca:	9305      	str	r3, [sp, #20]
 800ffcc:	9004      	str	r0, [sp, #16]
 800ffce:	9003      	str	r0, [sp, #12]
 800ffd0:	8923      	ldrh	r3, [r4, #8]
 800ffd2:	9302      	str	r3, [sp, #8]
 800ffd4:	2305      	movs	r3, #5
 800ffd6:	9301      	str	r3, [sp, #4]
 800ffd8:	4b0b      	ldr	r3, [pc, #44]	; (8010008 <RegionEU433RxConfig+0x100>)
 800ffda:	9300      	str	r3, [sp, #0]
 800ffdc:	4603      	mov	r3, r0
 800ffde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ffe2:	fb02 f209 	mul.w	r2, r2, r9
 800ffe6:	f24c 3150 	movw	r1, #50000	; 0xc350
 800ffea:	47d0      	blx	sl
 800ffec:	e7ce      	b.n	800ff8c <RegionEU433RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU433[dr];
 800ffee:	4b07      	ldr	r3, [pc, #28]	; (801000c <RegionEU433RxConfig+0x104>)
 800fff0:	5d59      	ldrb	r1, [r3, r5]
 800fff2:	e7d0      	b.n	800ff96 <RegionEU433RxConfig+0x8e>
        return false;
 800fff4:	2000      	movs	r0, #0
 800fff6:	e7db      	b.n	800ffb0 <RegionEU433RxConfig+0xa8>
 800fff8:	08018318 	.word	0x08018318
 800fffc:	20001450 	.word	0x20001450
 8010000:	08017cd4 	.word	0x08017cd4
 8010004:	08017ce4 	.word	0x08017ce4
 8010008:	00014585 	.word	0x00014585
 801000c:	08017cdc 	.word	0x08017cdc

08010010 <RegionEU433TxConfig>:

bool RegionEU433TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8010010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010014:	b08d      	sub	sp, #52	; 0x34
 8010016:	4604      	mov	r4, r0
 8010018:	460f      	mov	r7, r1
 801001a:	4690      	mov	r8, r2
#if defined( REGION_EU433 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU433[txConfig->Datarate];
 801001c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010020:	4a42      	ldr	r2, [pc, #264]	; (801012c <RegionEU433TxConfig+0x11c>)
 8010022:	f912 a003 	ldrsb.w	sl, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8010026:	4b42      	ldr	r3, [pc, #264]	; (8010130 <RegionEU433TxConfig+0x120>)
 8010028:	6819      	ldr	r1, [r3, #0]
 801002a:	4d42      	ldr	r5, [pc, #264]	; (8010134 <RegionEU433TxConfig+0x124>)
 801002c:	682b      	ldr	r3, [r5, #0]
 801002e:	7802      	ldrb	r2, [r0, #0]
 8010030:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010034:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8010038:	7a53      	ldrb	r3, [r2, #9]
 801003a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801003e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8010042:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8010046:	f990 0002 	ldrsb.w	r0, [r0, #2]
 801004a:	f7ff fcea 	bl	800fa22 <RegionCommonLimitTxPower>
 801004e:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU433 );
 8010050:	4939      	ldr	r1, [pc, #228]	; (8010138 <RegionEU433TxConfig+0x128>)
 8010052:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8010056:	f7ff fce9 	bl	800fa2c <RegionCommonGetBandwidth>
 801005a:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 801005c:	68a2      	ldr	r2, [r4, #8]
 801005e:	6861      	ldr	r1, [r4, #4]
 8010060:	4630      	mov	r0, r6
 8010062:	f7ff fbfb 	bl	800f85c <RegionCommonComputeTxPower>
 8010066:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8010068:	4b34      	ldr	r3, [pc, #208]	; (801013c <RegionEU433TxConfig+0x12c>)
 801006a:	68da      	ldr	r2, [r3, #12]
 801006c:	6829      	ldr	r1, [r5, #0]
 801006e:	7823      	ldrb	r3, [r4, #0]
 8010070:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010074:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8010078:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801007a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801007e:	2b07      	cmp	r3, #7
 8010080:	d031      	beq.n	80100e6 <RegionEU433TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8010082:	4b2e      	ldr	r3, [pc, #184]	; (801013c <RegionEU433TxConfig+0x12c>)
 8010084:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 8010088:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801008c:	9308      	str	r3, [sp, #32]
 801008e:	2200      	movs	r2, #0
 8010090:	9207      	str	r2, [sp, #28]
 8010092:	9206      	str	r2, [sp, #24]
 8010094:	9205      	str	r2, [sp, #20]
 8010096:	2501      	movs	r5, #1
 8010098:	9504      	str	r5, [sp, #16]
 801009a:	9203      	str	r2, [sp, #12]
 801009c:	2308      	movs	r3, #8
 801009e:	9302      	str	r3, [sp, #8]
 80100a0:	9501      	str	r5, [sp, #4]
 80100a2:	f8cd a000 	str.w	sl, [sp]
 80100a6:	464b      	mov	r3, r9
 80100a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80100aa:	4628      	mov	r0, r5
 80100ac:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80100ae:	4b21      	ldr	r3, [pc, #132]	; (8010134 <RegionEU433TxConfig+0x124>)
 80100b0:	681a      	ldr	r2, [r3, #0]
 80100b2:	7823      	ldrb	r3, [r4, #0]
 80100b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80100b8:	f994 1001 	ldrsb.w	r1, [r4, #1]
 80100bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80100c0:	f7ff fcf6 	bl	800fab0 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80100c4:	89a1      	ldrh	r1, [r4, #12]
 80100c6:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80100ca:	f7ff fd15 	bl	800faf8 <GetTimeOnAir>
 80100ce:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80100d2:	4b1a      	ldr	r3, [pc, #104]	; (801013c <RegionEU433TxConfig+0x12c>)
 80100d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100d6:	7b21      	ldrb	r1, [r4, #12]
 80100d8:	4628      	mov	r0, r5
 80100da:	4798      	blx	r3

    *txPower = txPowerLimited;
 80100dc:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU433 */
}
 80100de:	2001      	movs	r0, #1
 80100e0:	b00d      	add	sp, #52	; 0x34
 80100e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 80100e6:	4b15      	ldr	r3, [pc, #84]	; (801013c <RegionEU433TxConfig+0x12c>)
 80100e8:	69dd      	ldr	r5, [r3, #28]
 80100ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80100ee:	fb03 f30a 	mul.w	r3, r3, sl
 80100f2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80100f6:	9208      	str	r2, [sp, #32]
 80100f8:	f04f 0b00 	mov.w	fp, #0
 80100fc:	f8cd b01c 	str.w	fp, [sp, #28]
 8010100:	f8cd b018 	str.w	fp, [sp, #24]
 8010104:	f8cd b014 	str.w	fp, [sp, #20]
 8010108:	2201      	movs	r2, #1
 801010a:	9204      	str	r2, [sp, #16]
 801010c:	f8cd b00c 	str.w	fp, [sp, #12]
 8010110:	2205      	movs	r2, #5
 8010112:	9202      	str	r2, [sp, #8]
 8010114:	f8cd b004 	str.w	fp, [sp, #4]
 8010118:	9300      	str	r3, [sp, #0]
 801011a:	464b      	mov	r3, r9
 801011c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8010120:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010122:	4658      	mov	r0, fp
 8010124:	47a8      	blx	r5
        modem = MODEM_FSK;
 8010126:	465d      	mov	r5, fp
 8010128:	e7c1      	b.n	80100ae <RegionEU433TxConfig+0x9e>
 801012a:	bf00      	nop
 801012c:	08017cd4 	.word	0x08017cd4
 8010130:	2000144c 	.word	0x2000144c
 8010134:	20001450 	.word	0x20001450
 8010138:	08017cb4 	.word	0x08017cb4
 801013c:	08018318 	.word	0x08018318

08010140 <RegionEU433LinkAdrReq>:

uint8_t RegionEU433LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8010140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010144:	b08f      	sub	sp, #60	; 0x3c
 8010146:	4607      	mov	r7, r0
 8010148:	468b      	mov	fp, r1
 801014a:	4692      	mov	sl, r2
 801014c:	4699      	mov	r9, r3
    uint8_t status = 0x07;
#if defined( REGION_EU433 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801014e:	2500      	movs	r5, #0
 8010150:	950c      	str	r5, [sp, #48]	; 0x30
 8010152:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 8010156:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 801015a:	f04f 0807 	mov.w	r8, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801015e:	e02d      	b.n	80101bc <RegionEU433LinkAdrReq+0x7c>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU433_MAX_NB_CHANNELS; i++ )
 8010160:	2400      	movs	r4, #0
        status = 0x07;
 8010162:	f04f 0807 	mov.w	r8, #7
 8010166:	e00f      	b.n	8010188 <RegionEU433LinkAdrReq+0x48>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8010168:	4a56      	ldr	r2, [pc, #344]	; (80102c4 <RegionEU433LinkAdrReq+0x184>)
 801016a:	6812      	ldr	r2, [r2, #0]
 801016c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8010170:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8010174:	b132      	cbz	r2, 8010184 <RegionEU433LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 8010176:	2201      	movs	r2, #1
 8010178:	40a2      	lsls	r2, r4
 801017a:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801017e:	430a      	orrs	r2, r1
 8010180:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU433_MAX_NB_CHANNELS; i++ )
 8010184:	3401      	adds	r4, #1
 8010186:	b2e4      	uxtb	r4, r4
 8010188:	2c0f      	cmp	r4, #15
 801018a:	d817      	bhi.n	80101bc <RegionEU433LinkAdrReq+0x7c>
                if( linkAdrParams.ChMaskCtrl == 6 )
 801018c:	2b06      	cmp	r3, #6
 801018e:	d0eb      	beq.n	8010168 <RegionEU433LinkAdrReq+0x28>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8010190:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8010194:	4126      	asrs	r6, r4
 8010196:	f016 0f01 	tst.w	r6, #1
 801019a:	d0f3      	beq.n	8010184 <RegionEU433LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801019c:	4a49      	ldr	r2, [pc, #292]	; (80102c4 <RegionEU433LinkAdrReq+0x184>)
 801019e:	6812      	ldr	r2, [r2, #0]
 80101a0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80101a4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80101a8:	2a00      	cmp	r2, #0
 80101aa:	d1eb      	bne.n	8010184 <RegionEU433LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80101ac:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
 80101b0:	e7e8      	b.n	8010184 <RegionEU433LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 80101b2:	f04f 0806 	mov.w	r8, #6
 80101b6:	e001      	b.n	80101bc <RegionEU433LinkAdrReq+0x7c>
            status &= 0xFE; // Channel mask KO
 80101b8:	f04f 0806 	mov.w	r8, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80101bc:	7a3b      	ldrb	r3, [r7, #8]
 80101be:	42ab      	cmp	r3, r5
 80101c0:	d919      	bls.n	80101f6 <RegionEU433LinkAdrReq+0xb6>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	a90c      	add	r1, sp, #48	; 0x30
 80101c6:	4428      	add	r0, r5
 80101c8:	f7ff fa98 	bl	800f6fc <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 80101cc:	b198      	cbz	r0, 80101f6 <RegionEU433LinkAdrReq+0xb6>
        bytesProcessed += nextIndex;
 80101ce:	4405      	add	r5, r0
 80101d0:	b2ed      	uxtb	r5, r5
        chMask = linkAdrParams.ChMask;
 80101d2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80101d6:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80101da:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80101de:	b90b      	cbnz	r3, 80101e4 <RegionEU433LinkAdrReq+0xa4>
 80101e0:	2a00      	cmp	r2, #0
 80101e2:	d0e6      	beq.n	80101b2 <RegionEU433LinkAdrReq+0x72>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80101e4:	1e5a      	subs	r2, r3, #1
 80101e6:	b2d2      	uxtb	r2, r2
 80101e8:	2a04      	cmp	r2, #4
 80101ea:	d9e5      	bls.n	80101b8 <RegionEU433LinkAdrReq+0x78>
 80101ec:	2b06      	cmp	r3, #6
 80101ee:	d9b7      	bls.n	8010160 <RegionEU433LinkAdrReq+0x20>
            status &= 0xFE; // Channel mask KO
 80101f0:	f04f 0806 	mov.w	r8, #6
 80101f4:	e7e2      	b.n	80101bc <RegionEU433LinkAdrReq+0x7c>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80101f6:	2302      	movs	r3, #2
 80101f8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80101fc:	7a7b      	ldrb	r3, [r7, #9]
 80101fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU433GetPhyParam( &getPhy );
 8010202:	a80a      	add	r0, sp, #40	; 0x28
 8010204:	f7ff fcaa 	bl	800fb5c <RegionEU433GetPhyParam>

    linkAdrVerifyParams.Status = status;
 8010208:	f88d 8008 	strb.w	r8, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801020c:	7abb      	ldrb	r3, [r7, #10]
 801020e:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8010212:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8010216:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801021a:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 801021e:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8010222:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8010226:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801022a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801022e:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8010232:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8010236:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801023a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801023e:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU433_MAX_NB_CHANNELS;
 8010242:	2310      	movs	r3, #16
 8010244:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8010248:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801024c:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801024e:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU433_TX_MAX_DATARATE;
 8010252:	2307      	movs	r3, #7
 8010254:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8010258:	4b1a      	ldr	r3, [pc, #104]	; (80102c4 <RegionEU433LinkAdrReq+0x184>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	9307      	str	r3, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU433_MIN_TX_POWER;
 801025e:	2305      	movs	r3, #5
 8010260:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU433_MAX_TX_POWER;
 8010264:	2300      	movs	r3, #0
 8010266:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801026e:	ab0c      	add	r3, sp, #48	; 0x30
 8010270:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8010274:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 8010278:	a801      	add	r0, sp, #4
 801027a:	f7ff fa5b 	bl	800f734 <RegionCommonLinkAdrReqVerifyParams>
 801027e:	4604      	mov	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8010280:	2807      	cmp	r0, #7
 8010282:	d011      	beq.n	80102a8 <RegionEU433LinkAdrReq+0x168>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8010284:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8010288:	f88b 3000 	strb.w	r3, [fp]
    *txPowOut = linkAdrParams.TxPower;
 801028c:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 8010290:	f88a 3000 	strb.w	r3, [sl]
    *nbRepOut = linkAdrParams.NbRep;
 8010294:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8010298:	f889 3000 	strb.w	r3, [r9]
    *nbBytesParsed = bytesProcessed;
 801029c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801029e:	701d      	strb	r5, [r3, #0]

#endif /* REGION_EU433 */
    return status;
}
 80102a0:	4620      	mov	r0, r4
 80102a2:	b00f      	add	sp, #60	; 0x3c
 80102a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80102a8:	4e06      	ldr	r6, [pc, #24]	; (80102c4 <RegionEU433LinkAdrReq+0x184>)
 80102aa:	6830      	ldr	r0, [r6, #0]
 80102ac:	220c      	movs	r2, #12
 80102ae:	2100      	movs	r1, #0
 80102b0:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 80102b4:	f004 f8fd 	bl	80144b2 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 80102b8:	6833      	ldr	r3, [r6, #0]
 80102ba:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 80102be:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
 80102c2:	e7df      	b.n	8010284 <RegionEU433LinkAdrReq+0x144>
 80102c4:	20001450 	.word	0x20001450

080102c8 <RegionEU433RxParamSetupReq>:

uint8_t RegionEU433RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80102c8:	b538      	push	{r3, r4, r5, lr}
 80102ca:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU433 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 80102cc:	6840      	ldr	r0, [r0, #4]
 80102ce:	f7ff fbff 	bl	800fad0 <VerifyRfFreq>
 80102d2:	b1a0      	cbz	r0, 80102fe <RegionEU433RxParamSetupReq+0x36>
    uint8_t status = 0x07;
 80102d4:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU433_RX_MIN_DATARATE, EU433_RX_MAX_DATARATE ) == false )
 80102d6:	2207      	movs	r2, #7
 80102d8:	2100      	movs	r1, #0
 80102da:	f994 0000 	ldrsb.w	r0, [r4]
 80102de:	f7ff f8ea 	bl	800f4b6 <RegionCommonValueInRange>
 80102e2:	b908      	cbnz	r0, 80102e8 <RegionEU433RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 80102e4:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU433_MIN_RX1_DR_OFFSET, EU433_MAX_RX1_DR_OFFSET ) == false )
 80102e8:	2205      	movs	r2, #5
 80102ea:	2100      	movs	r1, #0
 80102ec:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80102f0:	f7ff f8e1 	bl	800f4b6 <RegionCommonValueInRange>
 80102f4:	b908      	cbnz	r0, 80102fa <RegionEU433RxParamSetupReq+0x32>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80102f6:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU433 */
    return status;
}
 80102fa:	4628      	mov	r0, r5
 80102fc:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 80102fe:	2506      	movs	r5, #6
 8010300:	e7e9      	b.n	80102d6 <RegionEU433RxParamSetupReq+0xe>

08010302 <RegionEU433TxParamSetupReq>:

int8_t RegionEU433TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 8010302:	f04f 30ff 	mov.w	r0, #4294967295
 8010306:	4770      	bx	lr

08010308 <RegionEU433DlChannelReq>:

int8_t RegionEU433DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8010308:	b510      	push	{r4, lr}
 801030a:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_EU433 )

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 801030c:	6840      	ldr	r0, [r0, #4]
 801030e:	f7ff fbdf 	bl	800fad0 <VerifyRfFreq>
 8010312:	b170      	cbz	r0, 8010332 <RegionEU433DlChannelReq+0x2a>
    uint8_t status = 0x03;
 8010314:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8010316:	4b0b      	ldr	r3, [pc, #44]	; (8010344 <RegionEU433DlChannelReq+0x3c>)
 8010318:	681a      	ldr	r2, [r3, #0]
 801031a:	7823      	ldrb	r3, [r4, #0]
 801031c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8010320:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8010324:	b909      	cbnz	r1, 801032a <RegionEU433DlChannelReq+0x22>
    {
        status &= 0xFD;
 8010326:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801032a:	2803      	cmp	r0, #3
 801032c:	d003      	beq.n	8010336 <RegionEU433DlChannelReq+0x2e>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU433 */
    return status;
}
 801032e:	b240      	sxtb	r0, r0
 8010330:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 8010332:	2002      	movs	r0, #2
 8010334:	e7ef      	b.n	8010316 <RegionEU433DlChannelReq+0xe>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8010336:	6861      	ldr	r1, [r4, #4]
 8010338:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801033c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010340:	6059      	str	r1, [r3, #4]
 8010342:	e7f4      	b.n	801032e <RegionEU433DlChannelReq+0x26>
 8010344:	20001450 	.word	0x20001450

08010348 <RegionEU433AlternateDr>:
#if defined( REGION_EU433 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU433 */
}
 8010348:	4770      	bx	lr
	...

0801034c <RegionEU433NextChannel>:

LoRaMacStatus_t RegionEU433NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801034c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801034e:	b097      	sub	sp, #92	; 0x5c
 8010350:	4604      	mov	r4, r0
 8010352:	460f      	mov	r7, r1
 8010354:	4616      	mov	r6, r2
 8010356:	461d      	mov	r5, r3
#if defined( REGION_EU433 )
    uint8_t nbEnabledChannels = 0;
 8010358:	2100      	movs	r1, #0
 801035a:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 801035e:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU433_MAX_NB_CHANNELS] = { 0 };
 8010362:	9111      	str	r1, [sp, #68]	; 0x44
 8010364:	9112      	str	r1, [sp, #72]	; 0x48
 8010366:	9113      	str	r1, [sp, #76]	; 0x4c
 8010368:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU433_JOIN_CHANNELS;
 801036a:	2307      	movs	r3, #7
 801036c:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8010370:	4b32      	ldr	r3, [pc, #200]	; (801043c <RegionEU433NextChannel+0xf0>)
 8010372:	6818      	ldr	r0, [r3, #0]
 8010374:	2201      	movs	r2, #1
 8010376:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 801037a:	f7ff f8f8 	bl	800f56e <RegionCommonCountChannels>
 801037e:	b938      	cbnz	r0, 8010390 <RegionEU433NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8010380:	4b2e      	ldr	r3, [pc, #184]	; (801043c <RegionEU433NextChannel+0xf0>)
 8010382:	681a      	ldr	r2, [r3, #0]
 8010384:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 8010388:	f043 0307 	orr.w	r3, r3, #7
 801038c:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8010390:	7a63      	ldrb	r3, [r4, #9]
 8010392:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8010396:	7a23      	ldrb	r3, [r4, #8]
 8010398:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801039c:	4b27      	ldr	r3, [pc, #156]	; (801043c <RegionEU433NextChannel+0xf0>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	f503 6290 	add.w	r2, r3, #1152	; 0x480
 80103a4:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80103a6:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 80103a8:	4b25      	ldr	r3, [pc, #148]	; (8010440 <RegionEU433NextChannel+0xf4>)
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = EU433_MAX_NB_CHANNELS;
 80103ae:	2310      	movs	r3, #16
 80103b0:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 80103b4:	f10d 030a 	add.w	r3, sp, #10
 80103b8:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80103ba:	6823      	ldr	r3, [r4, #0]
 80103bc:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80103be:	6863      	ldr	r3, [r4, #4]
 80103c0:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80103c2:	7aa3      	ldrb	r3, [r4, #10]
 80103c4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU433_MAX_NB_BANDS;
 80103c8:	2301      	movs	r3, #1
 80103ca:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80103ce:	ab0c      	add	r3, sp, #48	; 0x30
 80103d0:	6921      	ldr	r1, [r4, #16]
 80103d2:	68e0      	ldr	r0, [r4, #12]
 80103d4:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80103d8:	7d23      	ldrb	r3, [r4, #20]
 80103da:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80103de:	8ae1      	ldrh	r1, [r4, #22]
 80103e0:	f994 0008 	ldrsb.w	r0, [r4, #8]
 80103e4:	f7ff fb88 	bl	800faf8 <GetTimeOnAir>
 80103e8:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80103ea:	ab03      	add	r3, sp, #12
 80103ec:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80103ee:	9601      	str	r6, [sp, #4]
 80103f0:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 80103f4:	9300      	str	r3, [sp, #0]
 80103f6:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 80103fa:	aa11      	add	r2, sp, #68	; 0x44
 80103fc:	4629      	mov	r1, r5
 80103fe:	a809      	add	r0, sp, #36	; 0x24
 8010400:	f7ff faa8 	bl	800f954 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8010404:	4604      	mov	r4, r0
 8010406:	b120      	cbz	r0, 8010412 <RegionEU433NextChannel+0xc6>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8010408:	280c      	cmp	r0, #12
 801040a:	d00d      	beq.n	8010428 <RegionEU433NextChannel+0xdc>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU433 */
}
 801040c:	4620      	mov	r0, r4
 801040e:	b017      	add	sp, #92	; 0x5c
 8010410:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8010412:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 8010416:	3901      	subs	r1, #1
 8010418:	f004 f828 	bl	801446c <randr>
 801041c:	ab16      	add	r3, sp, #88	; 0x58
 801041e:	4418      	add	r0, r3
 8010420:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 8010424:	703b      	strb	r3, [r7, #0]
 8010426:	e7f1      	b.n	801040c <RegionEU433NextChannel+0xc0>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8010428:	4b04      	ldr	r3, [pc, #16]	; (801043c <RegionEU433NextChannel+0xf0>)
 801042a:	681a      	ldr	r2, [r3, #0]
 801042c:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 8010430:	f043 0307 	orr.w	r3, r3, #7
 8010434:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
 8010438:	e7e8      	b.n	801040c <RegionEU433NextChannel+0xc0>
 801043a:	bf00      	nop
 801043c:	20001450 	.word	0x20001450
 8010440:	2000144c 	.word	0x2000144c

08010444 <RegionEU433ChannelAdd>:

LoRaMacStatus_t RegionEU433ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8010444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined( REGION_EU433 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 8010446:	7905      	ldrb	r5, [r0, #4]

    if( id < EU433_NUMB_DEFAULT_CHANNELS )
 8010448:	2d02      	cmp	r5, #2
 801044a:	d94b      	bls.n	80104e4 <RegionEU433ChannelAdd+0xa0>
 801044c:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU433_MAX_NB_CHANNELS )
 801044e:	2d0f      	cmp	r5, #15
 8010450:	d84a      	bhi.n	80104e8 <RegionEU433ChannelAdd+0xa4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU433_TX_MIN_DATARATE, EU433_TX_MAX_DATARATE ) == false )
 8010452:	6803      	ldr	r3, [r0, #0]
 8010454:	7a18      	ldrb	r0, [r3, #8]
 8010456:	f340 0003 	sbfx	r0, r0, #0, #4
 801045a:	2207      	movs	r2, #7
 801045c:	2100      	movs	r1, #0
 801045e:	b240      	sxtb	r0, r0
 8010460:	f7ff f829 	bl	800f4b6 <RegionCommonValueInRange>
 8010464:	2800      	cmp	r0, #0
 8010466:	d039      	beq.n	80104dc <RegionEU433ChannelAdd+0x98>
    bool drInvalid = false;
 8010468:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU433_TX_MIN_DATARATE, EU433_TX_MAX_DATARATE ) == false )
 801046a:	6823      	ldr	r3, [r4, #0]
 801046c:	7a18      	ldrb	r0, [r3, #8]
 801046e:	f340 1003 	sbfx	r0, r0, #4, #4
 8010472:	2207      	movs	r2, #7
 8010474:	2100      	movs	r1, #0
 8010476:	b240      	sxtb	r0, r0
 8010478:	f7ff f81d 	bl	800f4b6 <RegionCommonValueInRange>
 801047c:	b900      	cbnz	r0, 8010480 <RegionEU433ChannelAdd+0x3c>
    {
        drInvalid = true;
 801047e:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8010480:	6821      	ldr	r1, [r4, #0]
 8010482:	7a0b      	ldrb	r3, [r1, #8]
 8010484:	f343 0203 	sbfx	r2, r3, #0, #4
 8010488:	b252      	sxtb	r2, r2
 801048a:	f343 1303 	sbfx	r3, r3, #4, #4
 801048e:	b25b      	sxtb	r3, r3
 8010490:	429a      	cmp	r2, r3
 8010492:	dd00      	ble.n	8010496 <RegionEU433ChannelAdd+0x52>
    {
        drInvalid = true;
 8010494:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8010496:	6808      	ldr	r0, [r1, #0]
 8010498:	f7ff fb1a 	bl	800fad0 <VerifyRfFreq>
 801049c:	b300      	cbz	r0, 80104e0 <RegionEU433ChannelAdd+0x9c>
    bool freqInvalid = false;
 801049e:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80104a0:	b106      	cbz	r6, 80104a4 <RegionEU433ChannelAdd+0x60>
 80104a2:	bb1b      	cbnz	r3, 80104ec <RegionEU433ChannelAdd+0xa8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 80104a4:	bb26      	cbnz	r6, 80104f0 <RegionEU433ChannelAdd+0xac>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 80104a6:	bb2b      	cbnz	r3, 80104f4 <RegionEU433ChannelAdd+0xb0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80104a8:	4f13      	ldr	r7, [pc, #76]	; (80104f8 <RegionEU433ChannelAdd+0xb4>)
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	006e      	lsls	r6, r5, #1
 80104ae:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80104b2:	220c      	movs	r2, #12
 80104b4:	6821      	ldr	r1, [r4, #0]
 80104b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80104ba:	f003 ffe4 	bl	8014486 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 80104be:	683a      	ldr	r2, [r7, #0]
 80104c0:	442e      	add	r6, r5
 80104c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80104c6:	2000      	movs	r0, #0
 80104c8:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80104ca:	2301      	movs	r3, #1
 80104cc:	fa03 f505 	lsl.w	r5, r3, r5
 80104d0:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 80104d4:	431d      	orrs	r5, r3
 80104d6:	f8a2 5480 	strh.w	r5, [r2, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 80104da:	e006      	b.n	80104ea <RegionEU433ChannelAdd+0xa6>
        drInvalid = true;
 80104dc:	2601      	movs	r6, #1
 80104de:	e7c4      	b.n	801046a <RegionEU433ChannelAdd+0x26>
            freqInvalid = true;
 80104e0:	2301      	movs	r3, #1
 80104e2:	e7dd      	b.n	80104a0 <RegionEU433ChannelAdd+0x5c>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80104e4:	2006      	movs	r0, #6
 80104e6:	e000      	b.n	80104ea <RegionEU433ChannelAdd+0xa6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80104e8:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU433 */
}
 80104ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80104ec:	2006      	movs	r0, #6
 80104ee:	e7fc      	b.n	80104ea <RegionEU433ChannelAdd+0xa6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 80104f0:	2005      	movs	r0, #5
 80104f2:	e7fa      	b.n	80104ea <RegionEU433ChannelAdd+0xa6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80104f4:	2004      	movs	r0, #4
 80104f6:	e7f8      	b.n	80104ea <RegionEU433ChannelAdd+0xa6>
 80104f8:	20001450 	.word	0x20001450

080104fc <RegionEU433ChannelsRemove>:

bool RegionEU433ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU433 )
    uint8_t id = channelRemove->ChannelId;
 80104fc:	7801      	ldrb	r1, [r0, #0]

    if( id < EU433_NUMB_DEFAULT_CHANNELS )
 80104fe:	2902      	cmp	r1, #2
 8010500:	d801      	bhi.n	8010506 <RegionEU433ChannelsRemove+0xa>
    {
        return false;
 8010502:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU433_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU433 */
}
 8010504:	4770      	bx	lr
{
 8010506:	b510      	push	{r4, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8010508:	4b08      	ldr	r3, [pc, #32]	; (801052c <RegionEU433ChannelsRemove+0x30>)
 801050a:	6818      	ldr	r0, [r3, #0]
 801050c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8010510:	009c      	lsls	r4, r3, #2
 8010512:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8010516:	2200      	movs	r2, #0
 8010518:	5102      	str	r2, [r0, r4]
 801051a:	605a      	str	r2, [r3, #4]
 801051c:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU433_MAX_NB_CHANNELS );
 801051e:	2210      	movs	r2, #16
 8010520:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8010524:	f7ff f809 	bl	800f53a <RegionCommonChanDisable>
}
 8010528:	bd10      	pop	{r4, pc}
 801052a:	bf00      	nop
 801052c:	20001450 	.word	0x20001450

08010530 <RegionEU433ApplyCFList>:
{
 8010530:	b570      	push	{r4, r5, r6, lr}
 8010532:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8010534:	2350      	movs	r3, #80	; 0x50
 8010536:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 801053a:	7903      	ldrb	r3, [r0, #4]
 801053c:	2b10      	cmp	r3, #16
 801053e:	d135      	bne.n	80105ac <RegionEU433ApplyCFList+0x7c>
 8010540:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 8010542:	6803      	ldr	r3, [r0, #0]
 8010544:	7bdd      	ldrb	r5, [r3, #15]
 8010546:	2d00      	cmp	r5, #0
 8010548:	d130      	bne.n	80105ac <RegionEU433ApplyCFList+0x7c>
    for( uint8_t i = 0, chanIdx = EU433_NUMB_DEFAULT_CHANNELS; chanIdx < EU433_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801054a:	2403      	movs	r4, #3
 801054c:	e01a      	b.n	8010584 <RegionEU433ApplyCFList+0x54>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 801054e:	6832      	ldr	r2, [r6, #0]
 8010550:	5d53      	ldrb	r3, [r2, r5]
 8010552:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8010554:	442a      	add	r2, r5
 8010556:	7851      	ldrb	r1, [r2, #1]
 8010558:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801055c:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801055e:	7892      	ldrb	r2, [r2, #2]
 8010560:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 8010564:	2264      	movs	r2, #100	; 0x64
 8010566:	fb02 f303 	mul.w	r3, r2, r3
 801056a:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 801056c:	2300      	movs	r3, #0
 801056e:	9304      	str	r3, [sp, #16]
 8010570:	e011      	b.n	8010596 <RegionEU433ApplyCFList+0x66>
            channelRemove.ChannelId = chanIdx;
 8010572:	f88d 4000 	strb.w	r4, [sp]
            RegionEU433ChannelsRemove( &channelRemove );
 8010576:	4668      	mov	r0, sp
 8010578:	f7ff ffc0 	bl	80104fc <RegionEU433ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU433_NUMB_DEFAULT_CHANNELS; chanIdx < EU433_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801057c:	3503      	adds	r5, #3
 801057e:	b2ed      	uxtb	r5, r5
 8010580:	3401      	adds	r4, #1
 8010582:	b2e4      	uxtb	r4, r4
 8010584:	2c0f      	cmp	r4, #15
 8010586:	d811      	bhi.n	80105ac <RegionEU433ApplyCFList+0x7c>
        if( chanIdx < ( EU433_NUMB_CHANNELS_CF_LIST + EU433_NUMB_DEFAULT_CHANNELS ) )
 8010588:	2c07      	cmp	r4, #7
 801058a:	d9e0      	bls.n	801054e <RegionEU433ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 801058c:	2300      	movs	r3, #0
 801058e:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 8010590:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 8010594:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 8010596:	9b03      	ldr	r3, [sp, #12]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d0ea      	beq.n	8010572 <RegionEU433ApplyCFList+0x42>
            channelAdd.NewChannel = &newChannel;
 801059c:	ab03      	add	r3, sp, #12
 801059e:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 80105a0:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU433ChannelAdd( &channelAdd );
 80105a4:	a801      	add	r0, sp, #4
 80105a6:	f7ff ff4d 	bl	8010444 <RegionEU433ChannelAdd>
 80105aa:	e7e7      	b.n	801057c <RegionEU433ApplyCFList+0x4c>
}
 80105ac:	b006      	add	sp, #24
 80105ae:	bd70      	pop	{r4, r5, r6, pc}

080105b0 <RegionEU433NewChannelReq>:
{
 80105b0:	b500      	push	{lr}
 80105b2:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 80105b4:	6803      	ldr	r3, [r0, #0]
 80105b6:	681a      	ldr	r2, [r3, #0]
 80105b8:	b952      	cbnz	r2, 80105d0 <RegionEU433NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80105ba:	7903      	ldrb	r3, [r0, #4]
 80105bc:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU433ChannelsRemove( &channelRemove ) == false )
 80105c0:	a801      	add	r0, sp, #4
 80105c2:	f7ff ff9b 	bl	80104fc <RegionEU433ChannelsRemove>
 80105c6:	b1d0      	cbz	r0, 80105fe <RegionEU433NewChannelReq+0x4e>
    uint8_t status = 0x03;
 80105c8:	2003      	movs	r0, #3
}
 80105ca:	b005      	add	sp, #20
 80105cc:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80105d0:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80105d2:	7903      	ldrb	r3, [r0, #4]
 80105d4:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU433ChannelAdd( &channelAdd ) )
 80105d8:	a802      	add	r0, sp, #8
 80105da:	f7ff ff33 	bl	8010444 <RegionEU433ChannelAdd>
 80105de:	2806      	cmp	r0, #6
 80105e0:	d80b      	bhi.n	80105fa <RegionEU433NewChannelReq+0x4a>
 80105e2:	e8df f000 	tbb	[pc, r0]
 80105e6:	0a04      	.short	0x0a04
 80105e8:	060e0a0a 	.word	0x060e0a0a
 80105ec:	08          	.byte	0x08
 80105ed:	00          	.byte	0x00
 80105ee:	2003      	movs	r0, #3
 80105f0:	e7eb      	b.n	80105ca <RegionEU433NewChannelReq+0x1a>
                status &= 0xFD;
 80105f2:	2001      	movs	r0, #1
                break;
 80105f4:	e7e9      	b.n	80105ca <RegionEU433NewChannelReq+0x1a>
                status &= 0xFC;
 80105f6:	2000      	movs	r0, #0
                break;
 80105f8:	e7e7      	b.n	80105ca <RegionEU433NewChannelReq+0x1a>
                status &= 0xFC;
 80105fa:	2000      	movs	r0, #0
                break;
 80105fc:	e7e5      	b.n	80105ca <RegionEU433NewChannelReq+0x1a>
            status &= 0xFC;
 80105fe:	2000      	movs	r0, #0
 8010600:	e7e3      	b.n	80105ca <RegionEU433NewChannelReq+0x1a>
                status &= 0xFE;
 8010602:	2002      	movs	r0, #2
 8010604:	e7e1      	b.n	80105ca <RegionEU433NewChannelReq+0x1a>
	...

08010608 <RegionEU433SetContinuousWave>:

void RegionEU433SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8010608:	b538      	push	{r3, r4, r5, lr}
 801060a:	4604      	mov	r4, r0
#if defined( REGION_EU433 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 801060c:	4b12      	ldr	r3, [pc, #72]	; (8010658 <RegionEU433SetContinuousWave+0x50>)
 801060e:	6819      	ldr	r1, [r3, #0]
 8010610:	4d12      	ldr	r5, [pc, #72]	; (801065c <RegionEU433SetContinuousWave+0x54>)
 8010612:	682b      	ldr	r3, [r5, #0]
 8010614:	7802      	ldrb	r2, [r0, #0]
 8010616:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801061a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801061e:	7a53      	ldrb	r3, [r2, #9]
 8010620:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010624:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8010628:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801062c:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8010630:	f7ff f9f7 	bl	800fa22 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8010634:	682a      	ldr	r2, [r5, #0]
 8010636:	7823      	ldrb	r3, [r4, #0]
 8010638:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801063c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8010640:	68a2      	ldr	r2, [r4, #8]
 8010642:	6861      	ldr	r1, [r4, #4]
 8010644:	f7ff f90a 	bl	800f85c <RegionCommonComputeTxPower>
 8010648:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 801064a:	4b05      	ldr	r3, [pc, #20]	; (8010660 <RegionEU433SetContinuousWave+0x58>)
 801064c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801064e:	89a2      	ldrh	r2, [r4, #12]
 8010650:	4628      	mov	r0, r5
 8010652:	4798      	blx	r3
#endif /* REGION_EU433 */
}
 8010654:	bd38      	pop	{r3, r4, r5, pc}
 8010656:	bf00      	nop
 8010658:	2000144c 	.word	0x2000144c
 801065c:	20001450 	.word	0x20001450
 8010660:	08018318 	.word	0x08018318

08010664 <RegionEU433ApplyDrOffset>:

uint8_t RegionEU433ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU433 )
    int8_t datarate = dr - drOffset;
 8010664:	1a88      	subs	r0, r1, r2
 8010666:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 8010668:	2800      	cmp	r0, #0
 801066a:	db01      	blt.n	8010670 <RegionEU433ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU433 */
}
 801066c:	b2c0      	uxtb	r0, r0
 801066e:	4770      	bx	lr
        datarate = DR_0;
 8010670:	2000      	movs	r0, #0
 8010672:	e7fb      	b.n	801066c <RegionEU433ApplyDrOffset+0x8>

08010674 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8010674:	b538      	push	{r3, r4, r5, lr}
 8010676:	4604      	mov	r4, r0
 8010678:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801067a:	4b1b      	ldr	r3, [pc, #108]	; (80106e8 <VerifyRfFreq+0x74>)
 801067c:	6a1b      	ldr	r3, [r3, #32]
 801067e:	4798      	blx	r3
 8010680:	b130      	cbz	r0, 8010690 <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8010682:	4b1a      	ldr	r3, [pc, #104]	; (80106ec <VerifyRfFreq+0x78>)
 8010684:	4423      	add	r3, r4
 8010686:	4a1a      	ldr	r2, [pc, #104]	; (80106f0 <VerifyRfFreq+0x7c>)
 8010688:	4293      	cmp	r3, r2
 801068a:	d802      	bhi.n	8010692 <VerifyRfFreq+0x1e>
    {
        *band = 2;
 801068c:	2302      	movs	r3, #2
 801068e:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 8010690:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8010692:	4b18      	ldr	r3, [pc, #96]	; (80106f4 <VerifyRfFreq+0x80>)
 8010694:	4423      	add	r3, r4
 8010696:	4a18      	ldr	r2, [pc, #96]	; (80106f8 <VerifyRfFreq+0x84>)
 8010698:	4293      	cmp	r3, r2
 801069a:	d802      	bhi.n	80106a2 <VerifyRfFreq+0x2e>
        *band = 0;
 801069c:	2300      	movs	r3, #0
 801069e:	702b      	strb	r3, [r5, #0]
 80106a0:	e7f6      	b.n	8010690 <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80106a2:	4b16      	ldr	r3, [pc, #88]	; (80106fc <VerifyRfFreq+0x88>)
 80106a4:	4423      	add	r3, r4
 80106a6:	4a16      	ldr	r2, [pc, #88]	; (8010700 <VerifyRfFreq+0x8c>)
 80106a8:	4293      	cmp	r3, r2
 80106aa:	d802      	bhi.n	80106b2 <VerifyRfFreq+0x3e>
        *band = 1;
 80106ac:	2301      	movs	r3, #1
 80106ae:	702b      	strb	r3, [r5, #0]
 80106b0:	e7ee      	b.n	8010690 <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80106b2:	4b14      	ldr	r3, [pc, #80]	; (8010704 <VerifyRfFreq+0x90>)
 80106b4:	4423      	add	r3, r4
 80106b6:	4a14      	ldr	r2, [pc, #80]	; (8010708 <VerifyRfFreq+0x94>)
 80106b8:	4293      	cmp	r3, r2
 80106ba:	d802      	bhi.n	80106c2 <VerifyRfFreq+0x4e>
        *band = 5;
 80106bc:	2305      	movs	r3, #5
 80106be:	702b      	strb	r3, [r5, #0]
 80106c0:	e7e6      	b.n	8010690 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80106c2:	4b12      	ldr	r3, [pc, #72]	; (801070c <VerifyRfFreq+0x98>)
 80106c4:	4423      	add	r3, r4
 80106c6:	4a12      	ldr	r2, [pc, #72]	; (8010710 <VerifyRfFreq+0x9c>)
 80106c8:	4293      	cmp	r3, r2
 80106ca:	d802      	bhi.n	80106d2 <VerifyRfFreq+0x5e>
        *band = 3;
 80106cc:	2303      	movs	r3, #3
 80106ce:	702b      	strb	r3, [r5, #0]
 80106d0:	e7de      	b.n	8010690 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80106d2:	4b10      	ldr	r3, [pc, #64]	; (8010714 <VerifyRfFreq+0xa0>)
 80106d4:	4423      	add	r3, r4
 80106d6:	4a10      	ldr	r2, [pc, #64]	; (8010718 <VerifyRfFreq+0xa4>)
 80106d8:	4293      	cmp	r3, r2
 80106da:	d802      	bhi.n	80106e2 <VerifyRfFreq+0x6e>
        *band = 4;
 80106dc:	2304      	movs	r3, #4
 80106de:	702b      	strb	r3, [r5, #0]
 80106e0:	e7d6      	b.n	8010690 <VerifyRfFreq+0x1c>
        return false;
 80106e2:	2000      	movs	r0, #0
 80106e4:	e7d4      	b.n	8010690 <VerifyRfFreq+0x1c>
 80106e6:	bf00      	nop
 80106e8:	08018318 	.word	0x08018318
 80106ec:	cc8faa40 	.word	0xcc8faa40
 80106f0:	001e847f 	.word	0x001e847f
 80106f4:	cc7125c0 	.word	0xcc7125c0
 80106f8:	002dc6c0 	.word	0x002dc6c0
 80106fc:	cc435eff 	.word	0xcc435eff
 8010700:	000927bf 	.word	0x000927bf
 8010704:	cc38b0a0 	.word	0xcc38b0a0
 8010708:	0007a120 	.word	0x0007a120
 801070c:	cc2e0240 	.word	0xcc2e0240
 8010710:	0003d090 	.word	0x0003d090
 8010714:	cc296e60 	.word	0xcc296e60
 8010718:	000493e0 	.word	0x000493e0

0801071c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801071c:	b570      	push	{r4, r5, r6, lr}
 801071e:	b084      	sub	sp, #16
 8010720:	4605      	mov	r5, r0
 8010722:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 8010724:	4b13      	ldr	r3, [pc, #76]	; (8010774 <GetTimeOnAir+0x58>)
 8010726:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8010728:	4913      	ldr	r1, [pc, #76]	; (8010778 <GetTimeOnAir+0x5c>)
 801072a:	f7ff f97f 	bl	800fa2c <RegionCommonGetBandwidth>
 801072e:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 8010730:	2d07      	cmp	r5, #7
 8010732:	d00e      	beq.n	8010752 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8010734:	4b11      	ldr	r3, [pc, #68]	; (801077c <GetTimeOnAir+0x60>)
 8010736:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8010738:	2001      	movs	r0, #1
 801073a:	9003      	str	r0, [sp, #12]
 801073c:	b2e4      	uxtb	r4, r4
 801073e:	9402      	str	r4, [sp, #8]
 8010740:	2300      	movs	r3, #0
 8010742:	9301      	str	r3, [sp, #4]
 8010744:	2308      	movs	r3, #8
 8010746:	9300      	str	r3, [sp, #0]
 8010748:	4603      	mov	r3, r0
 801074a:	4632      	mov	r2, r6
 801074c:	47a8      	blx	r5
    }
    return timeOnAir;
}
 801074e:	b004      	add	sp, #16
 8010750:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8010752:	4b0a      	ldr	r3, [pc, #40]	; (801077c <GetTimeOnAir+0x60>)
 8010754:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8010756:	2301      	movs	r3, #1
 8010758:	9303      	str	r3, [sp, #12]
 801075a:	b2e4      	uxtb	r4, r4
 801075c:	9402      	str	r4, [sp, #8]
 801075e:	2000      	movs	r0, #0
 8010760:	9001      	str	r0, [sp, #4]
 8010762:	2305      	movs	r3, #5
 8010764:	9300      	str	r3, [sp, #0]
 8010766:	4603      	mov	r3, r0
 8010768:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801076c:	fb02 f206 	mul.w	r2, r2, r6
 8010770:	47a8      	blx	r5
 8010772:	e7ec      	b.n	801074e <GetTimeOnAir+0x32>
 8010774:	08017d0c 	.word	0x08017d0c
 8010778:	08017cec 	.word	0x08017cec
 801077c:	08018318 	.word	0x08018318

08010780 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8010780:	b500      	push	{lr}
 8010782:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 8010784:	2300      	movs	r3, #0
 8010786:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8010788:	7803      	ldrb	r3, [r0, #0]
 801078a:	3b0b      	subs	r3, #11
 801078c:	2b2e      	cmp	r3, #46	; 0x2e
 801078e:	d830      	bhi.n	80107f2 <RegionEU868GetPhyParam+0x72>
 8010790:	e8df f003 	tbb	[pc, r3]
 8010794:	3f393633 	.word	0x3f393633
 8010798:	504c4845 	.word	0x504c4845
 801079c:	605c5854 	.word	0x605c5854
 80107a0:	6c2f692f 	.word	0x6c2f692f
 80107a4:	2f7b7872 	.word	0x2f7b7872
 80107a8:	18837f2f 	.word	0x18837f2f
 80107ac:	2f2f2f2f 	.word	0x2f2f2f2f
 80107b0:	2f2f2f2f 	.word	0x2f2f2f2f
 80107b4:	2f2f2f2f 	.word	0x2f2f2f2f
 80107b8:	9389862f 	.word	0x9389862f
 80107bc:	99962f2f 	.word	0x99962f2f
 80107c0:	9c2f      	.short	0x9c2f
 80107c2:	a2          	.byte	0xa2
 80107c3:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80107c4:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80107c8:	f88d 3004 	strb.w	r3, [sp, #4]
 80107cc:	2307      	movs	r3, #7
 80107ce:	f88d 3005 	strb.w	r3, [sp, #5]
 80107d2:	2300      	movs	r3, #0
 80107d4:	f88d 3006 	strb.w	r3, [sp, #6]
 80107d8:	2310      	movs	r3, #16
 80107da:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80107de:	4b42      	ldr	r3, [pc, #264]	; (80108e8 <RegionEU868GetPhyParam+0x168>)
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80107e6:	9202      	str	r2, [sp, #8]
 80107e8:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80107ea:	a801      	add	r0, sp, #4
 80107ec:	f7ff f8fa 	bl	800f9e4 <RegionCommonGetNextLowerTxDr>
 80107f0:	9004      	str	r0, [sp, #16]
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
}
 80107f2:	9804      	ldr	r0, [sp, #16]
 80107f4:	b007      	add	sp, #28
 80107f6:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80107fa:	2340      	movs	r3, #64	; 0x40
 80107fc:	9304      	str	r3, [sp, #16]
            break;
 80107fe:	e7f8      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8010800:	2320      	movs	r3, #32
 8010802:	9304      	str	r3, [sp, #16]
            break;
 8010804:	e7f5      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8010806:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801080a:	4a38      	ldr	r2, [pc, #224]	; (80108ec <RegionEU868GetPhyParam+0x16c>)
 801080c:	5cd3      	ldrb	r3, [r2, r3]
 801080e:	9304      	str	r3, [sp, #16]
            break;
 8010810:	e7ef      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8010812:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010816:	4a36      	ldr	r2, [pc, #216]	; (80108f0 <RegionEU868GetPhyParam+0x170>)
 8010818:	5cd3      	ldrb	r3, [r2, r3]
 801081a:	9304      	str	r3, [sp, #16]
            break;
 801081c:	e7e9      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 801081e:	2301      	movs	r3, #1
 8010820:	9304      	str	r3, [sp, #16]
            break;
 8010822:	e7e6      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8010824:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8010828:	9304      	str	r3, [sp, #16]
            break;
 801082a:	e7e2      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801082c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010830:	9304      	str	r3, [sp, #16]
            break;
 8010832:	e7de      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8010834:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8010838:	9304      	str	r3, [sp, #16]
            break;
 801083a:	e7da      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801083c:	f241 3388 	movw	r3, #5000	; 0x1388
 8010840:	9304      	str	r3, [sp, #16]
            break;
 8010842:	e7d6      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8010844:	f241 7370 	movw	r3, #6000	; 0x1770
 8010848:	9304      	str	r3, [sp, #16]
            break;
 801084a:	e7d2      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 801084c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010850:	9304      	str	r3, [sp, #16]
            break;
 8010852:	e7ce      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8010854:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010858:	4826      	ldr	r0, [pc, #152]	; (80108f4 <RegionEU868GetPhyParam+0x174>)
 801085a:	f003 fe07 	bl	801446c <randr>
 801085e:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 8010862:	9004      	str	r0, [sp, #16]
            break;
 8010864:	e7c5      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8010866:	4b24      	ldr	r3, [pc, #144]	; (80108f8 <RegionEU868GetPhyParam+0x178>)
 8010868:	9304      	str	r3, [sp, #16]
            break;
 801086a:	e7c2      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801086c:	4b1e      	ldr	r3, [pc, #120]	; (80108e8 <RegionEU868GetPhyParam+0x168>)
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8010874:	9304      	str	r3, [sp, #16]
            break;
 8010876:	e7bc      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8010878:	4b1b      	ldr	r3, [pc, #108]	; (80108e8 <RegionEU868GetPhyParam+0x168>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8010880:	9304      	str	r3, [sp, #16]
            break;
 8010882:	e7b6      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8010884:	2310      	movs	r3, #16
 8010886:	9304      	str	r3, [sp, #16]
            break;
 8010888:	e7b3      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 801088a:	4b17      	ldr	r3, [pc, #92]	; (80108e8 <RegionEU868GetPhyParam+0x168>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	9304      	str	r3, [sp, #16]
            break;
 8010890:	e7af      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8010892:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8010896:	9304      	str	r3, [sp, #16]
            break;
 8010898:	e7ab      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 801089a:	4b18      	ldr	r3, [pc, #96]	; (80108fc <RegionEU868GetPhyParam+0x17c>)
 801089c:	9304      	str	r3, [sp, #16]
            break;
 801089e:	e7a8      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80108a0:	4b15      	ldr	r3, [pc, #84]	; (80108f8 <RegionEU868GetPhyParam+0x178>)
 80108a2:	9304      	str	r3, [sp, #16]
            break;
 80108a4:	e7a5      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80108a6:	2311      	movs	r3, #17
 80108a8:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80108ac:	2302      	movs	r3, #2
 80108ae:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80108b2:	2300      	movs	r3, #0
 80108b4:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 80108b8:	e79b      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80108ba:	2303      	movs	r3, #3
 80108bc:	9304      	str	r3, [sp, #16]
            break;
 80108be:	e798      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80108c0:	4b0d      	ldr	r3, [pc, #52]	; (80108f8 <RegionEU868GetPhyParam+0x178>)
 80108c2:	9304      	str	r3, [sp, #16]
            break;
 80108c4:	e795      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80108c6:	2303      	movs	r3, #3
 80108c8:	9304      	str	r3, [sp, #16]
            break;
 80108ca:	e792      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80108cc:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80108d0:	4a0b      	ldr	r2, [pc, #44]	; (8010900 <RegionEU868GetPhyParam+0x180>)
 80108d2:	5cd3      	ldrb	r3, [r2, r3]
 80108d4:	9304      	str	r3, [sp, #16]
            break;
 80108d6:	e78c      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 80108d8:	490a      	ldr	r1, [pc, #40]	; (8010904 <RegionEU868GetPhyParam+0x184>)
 80108da:	f990 0001 	ldrsb.w	r0, [r0, #1]
 80108de:	f7ff f8a5 	bl	800fa2c <RegionCommonGetBandwidth>
 80108e2:	9004      	str	r0, [sp, #16]
            break;
 80108e4:	e785      	b.n	80107f2 <RegionEU868GetPhyParam+0x72>
 80108e6:	bf00      	nop
 80108e8:	20001458 	.word	0x20001458
 80108ec:	08017d14 	.word	0x08017d14
 80108f0:	08017d1c 	.word	0x08017d1c
 80108f4:	fffffc18 	.word	0xfffffc18
 80108f8:	33d3e608 	.word	0x33d3e608
 80108fc:	4009999a 	.word	0x4009999a
 8010900:	08017d0c 	.word	0x08017d0c
 8010904:	08017cec 	.word	0x08017cec

08010908 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8010908:	b530      	push	{r4, r5, lr}
 801090a:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801090c:	4b0b      	ldr	r3, [pc, #44]	; (801093c <RegionEU868SetBandTxDone+0x34>)
 801090e:	681d      	ldr	r5, [r3, #0]
 8010910:	4b0b      	ldr	r3, [pc, #44]	; (8010940 <RegionEU868SetBandTxDone+0x38>)
 8010912:	681a      	ldr	r2, [r3, #0]
 8010914:	7803      	ldrb	r3, [r0, #0]
 8010916:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801091a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801091e:	7a5b      	ldrb	r3, [r3, #9]
 8010920:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8010924:	6903      	ldr	r3, [r0, #16]
 8010926:	9300      	str	r3, [sp, #0]
 8010928:	68c3      	ldr	r3, [r0, #12]
 801092a:	7842      	ldrb	r2, [r0, #1]
 801092c:	6881      	ldr	r1, [r0, #8]
 801092e:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 8010932:	f7fe fe43 	bl	800f5bc <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 8010936:	b003      	add	sp, #12
 8010938:	bd30      	pop	{r4, r5, pc}
 801093a:	bf00      	nop
 801093c:	20001454 	.word	0x20001454
 8010940:	20001458 	.word	0x20001458

08010944 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8010944:	b530      	push	{r4, r5, lr}
 8010946:	b0a5      	sub	sp, #148	; 0x94
 8010948:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 801094a:	2290      	movs	r2, #144	; 0x90
 801094c:	2100      	movs	r1, #0
 801094e:	4668      	mov	r0, sp
 8010950:	f006 fcf4 	bl	801733c <memset>
 8010954:	2364      	movs	r3, #100	; 0x64
 8010956:	f8ad 3000 	strh.w	r3, [sp]
 801095a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801095e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010962:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8010966:	210a      	movs	r1, #10
 8010968:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 801096c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8010970:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8010974:	7a23      	ldrb	r3, [r4, #8]
 8010976:	2b01      	cmp	r3, #1
 8010978:	d031      	beq.n	80109de <RegionEU868InitDefaults+0x9a>
 801097a:	2b02      	cmp	r3, #2
 801097c:	d03d      	beq.n	80109fa <RegionEU868InitDefaults+0xb6>
 801097e:	b10b      	cbz	r3, 8010984 <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 8010980:	b025      	add	sp, #148	; 0x94
 8010982:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8010984:	6820      	ldr	r0, [r4, #0]
 8010986:	2800      	cmp	r0, #0
 8010988:	d0fa      	beq.n	8010980 <RegionEU868InitDefaults+0x3c>
 801098a:	6863      	ldr	r3, [r4, #4]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d0f7      	beq.n	8010980 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8010990:	4a1f      	ldr	r2, [pc, #124]	; (8010a10 <RegionEU868InitDefaults+0xcc>)
 8010992:	6010      	str	r0, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8010994:	4c1f      	ldr	r4, [pc, #124]	; (8010a14 <RegionEU868InitDefaults+0xd0>)
 8010996:	6023      	str	r3, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8010998:	2290      	movs	r2, #144	; 0x90
 801099a:	4669      	mov	r1, sp
 801099c:	f003 fd73 	bl	8014486 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80109a0:	6824      	ldr	r4, [r4, #0]
 80109a2:	4b1d      	ldr	r3, [pc, #116]	; (8010a18 <RegionEU868InitDefaults+0xd4>)
 80109a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80109a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80109ac:	f104 050c 	add.w	r5, r4, #12
 80109b0:	f103 020c 	add.w	r2, r3, #12
 80109b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80109b6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 80109ba:	f104 0518 	add.w	r5, r4, #24
 80109be:	3318      	adds	r3, #24
 80109c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80109c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80109c8:	2307      	movs	r3, #7
 80109ca:	f8a4 348c 	strh.w	r3, [r4, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80109ce:	2201      	movs	r2, #1
 80109d0:	f204 418c 	addw	r1, r4, #1164	; 0x48c
 80109d4:	f504 6090 	add.w	r0, r4, #1152	; 0x480
 80109d8:	f7fe fddf 	bl	800f59a <RegionCommonChanMaskCopy>
            break;
 80109dc:	e7d0      	b.n	8010980 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80109de:	4b0d      	ldr	r3, [pc, #52]	; (8010a14 <RegionEU868InitDefaults+0xd0>)
 80109e0:	6818      	ldr	r0, [r3, #0]
 80109e2:	2300      	movs	r3, #0
 80109e4:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80109e6:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 80109e8:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80109ea:	2201      	movs	r2, #1
 80109ec:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 80109f0:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 80109f4:	f7fe fdd1 	bl	800f59a <RegionCommonChanMaskCopy>
            break;
 80109f8:	e7c2      	b.n	8010980 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 80109fa:	4b06      	ldr	r3, [pc, #24]	; (8010a14 <RegionEU868InitDefaults+0xd0>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 8010a02:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 8010a06:	430a      	orrs	r2, r1
 8010a08:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 8010a0c:	e7b8      	b.n	8010980 <RegionEU868InitDefaults+0x3c>
 8010a0e:	bf00      	nop
 8010a10:	20001454 	.word	0x20001454
 8010a14:	20001458 	.word	0x20001458
 8010a18:	080174fc 	.word	0x080174fc

08010a1c <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8010a1c:	b500      	push	{lr}
 8010a1e:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8010a20:	290f      	cmp	r1, #15
 8010a22:	d83c      	bhi.n	8010a9e <RegionEU868Verify+0x82>
 8010a24:	e8df f001 	tbb	[pc, r1]
 8010a28:	3b3b3b0a 	.word	0x3b3b3b0a
 8010a2c:	271d133b 	.word	0x271d133b
 8010a30:	3b31313b 	.word	0x3b31313b
 8010a34:	083b3b3b 	.word	0x083b3b3b
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 8010a38:	2001      	movs	r0, #1
 8010a3a:	e031      	b.n	8010aa0 <RegionEU868Verify+0x84>
            uint8_t band = 0;
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 8010a42:	f10d 0107 	add.w	r1, sp, #7
 8010a46:	6800      	ldr	r0, [r0, #0]
 8010a48:	f7ff fe14 	bl	8010674 <VerifyRfFreq>
 8010a4c:	e028      	b.n	8010aa0 <RegionEU868Verify+0x84>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8010a4e:	2207      	movs	r2, #7
 8010a50:	2100      	movs	r1, #0
 8010a52:	f990 0000 	ldrsb.w	r0, [r0]
 8010a56:	f7fe fd2e 	bl	800f4b6 <RegionCommonValueInRange>
 8010a5a:	3800      	subs	r0, #0
 8010a5c:	bf18      	it	ne
 8010a5e:	2001      	movne	r0, #1
 8010a60:	e01e      	b.n	8010aa0 <RegionEU868Verify+0x84>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8010a62:	2205      	movs	r2, #5
 8010a64:	2100      	movs	r1, #0
 8010a66:	f990 0000 	ldrsb.w	r0, [r0]
 8010a6a:	f7fe fd24 	bl	800f4b6 <RegionCommonValueInRange>
 8010a6e:	3800      	subs	r0, #0
 8010a70:	bf18      	it	ne
 8010a72:	2001      	movne	r0, #1
 8010a74:	e014      	b.n	8010aa0 <RegionEU868Verify+0x84>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8010a76:	2207      	movs	r2, #7
 8010a78:	2100      	movs	r1, #0
 8010a7a:	f990 0000 	ldrsb.w	r0, [r0]
 8010a7e:	f7fe fd1a 	bl	800f4b6 <RegionCommonValueInRange>
 8010a82:	3800      	subs	r0, #0
 8010a84:	bf18      	it	ne
 8010a86:	2001      	movne	r0, #1
 8010a88:	e00a      	b.n	8010aa0 <RegionEU868Verify+0x84>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8010a8a:	2207      	movs	r2, #7
 8010a8c:	2100      	movs	r1, #0
 8010a8e:	f990 0000 	ldrsb.w	r0, [r0]
 8010a92:	f7fe fd10 	bl	800f4b6 <RegionCommonValueInRange>
 8010a96:	3800      	subs	r0, #0
 8010a98:	bf18      	it	ne
 8010a9a:	2001      	movne	r0, #1
 8010a9c:	e000      	b.n	8010aa0 <RegionEU868Verify+0x84>
            return false;
 8010a9e:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8010aa0:	b003      	add	sp, #12
 8010aa2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010aa8 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8010aa8:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8010aaa:	7903      	ldrb	r3, [r0, #4]
 8010aac:	b11b      	cbz	r3, 8010ab6 <RegionEU868ChanMaskSet+0xe>
 8010aae:	2b01      	cmp	r3, #1
 8010ab0:	d00b      	beq.n	8010aca <RegionEU868ChanMaskSet+0x22>
 8010ab2:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 8010ab4:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8010ab6:	4b0a      	ldr	r3, [pc, #40]	; (8010ae0 <RegionEU868ChanMaskSet+0x38>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	2201      	movs	r2, #1
 8010abc:	6801      	ldr	r1, [r0, #0]
 8010abe:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8010ac2:	f7fe fd6a 	bl	800f59a <RegionCommonChanMaskCopy>
    return true;
 8010ac6:	2001      	movs	r0, #1
            break;
 8010ac8:	e7f4      	b.n	8010ab4 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8010aca:	4b05      	ldr	r3, [pc, #20]	; (8010ae0 <RegionEU868ChanMaskSet+0x38>)
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	2201      	movs	r2, #1
 8010ad0:	6801      	ldr	r1, [r0, #0]
 8010ad2:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8010ad6:	f7fe fd60 	bl	800f59a <RegionCommonChanMaskCopy>
    return true;
 8010ada:	2001      	movs	r0, #1
            break;
 8010adc:	e7ea      	b.n	8010ab4 <RegionEU868ChanMaskSet+0xc>
 8010ade:	bf00      	nop
 8010ae0:	20001458 	.word	0x20001458

08010ae4 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8010ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ae6:	b083      	sub	sp, #12
 8010ae8:	460e      	mov	r6, r1
 8010aea:	4617      	mov	r7, r2
 8010aec:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8010aee:	2807      	cmp	r0, #7
 8010af0:	bfa8      	it	ge
 8010af2:	2007      	movge	r0, #7
 8010af4:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8010af6:	4913      	ldr	r1, [pc, #76]	; (8010b44 <RegionEU868ComputeRxWindowParameters+0x60>)
 8010af8:	f7fe ff98 	bl	800fa2c <RegionCommonGetBandwidth>
 8010afc:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8010afe:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8010b02:	2b07      	cmp	r3, #7
 8010b04:	d017      	beq.n	8010b36 <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8010b06:	4a0f      	ldr	r2, [pc, #60]	; (8010b44 <RegionEU868ComputeRxWindowParameters+0x60>)
 8010b08:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8010b0c:	4a0e      	ldr	r2, [pc, #56]	; (8010b48 <RegionEU868ComputeRxWindowParameters+0x64>)
 8010b0e:	5cd0      	ldrb	r0, [r2, r3]
 8010b10:	f7fe fe5c 	bl	800f7cc <RegionCommonComputeSymbolTimeLoRa>
 8010b14:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8010b16:	4b0d      	ldr	r3, [pc, #52]	; (8010b4c <RegionEU868ComputeRxWindowParameters+0x68>)
 8010b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b1a:	4798      	blx	r3
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	f104 020c 	add.w	r2, r4, #12
 8010b22:	9201      	str	r2, [sp, #4]
 8010b24:	3408      	adds	r4, #8
 8010b26:	9400      	str	r4, [sp, #0]
 8010b28:	463a      	mov	r2, r7
 8010b2a:	4631      	mov	r1, r6
 8010b2c:	4628      	mov	r0, r5
 8010b2e:	f7fe fe5b 	bl	800f7e8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8010b32:	b003      	add	sp, #12
 8010b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8010b36:	4a04      	ldr	r2, [pc, #16]	; (8010b48 <RegionEU868ComputeRxWindowParameters+0x64>)
 8010b38:	5cd0      	ldrb	r0, [r2, r3]
 8010b3a:	f7fe fe4f 	bl	800f7dc <RegionCommonComputeSymbolTimeFsk>
 8010b3e:	4605      	mov	r5, r0
 8010b40:	e7e9      	b.n	8010b16 <RegionEU868ComputeRxWindowParameters+0x32>
 8010b42:	bf00      	nop
 8010b44:	08017cec 	.word	0x08017cec
 8010b48:	08017d0c 	.word	0x08017d0c
 8010b4c:	08018318 	.word	0x08018318

08010b50 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8010b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b54:	b08a      	sub	sp, #40	; 0x28
 8010b56:	4604      	mov	r4, r0
 8010b58:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8010b5a:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 8010b5e:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 8010b62:	4b37      	ldr	r3, [pc, #220]	; (8010c40 <RegionEU868RxConfig+0xf0>)
 8010b64:	685b      	ldr	r3, [r3, #4]
 8010b66:	4798      	blx	r3
 8010b68:	2800      	cmp	r0, #0
 8010b6a:	d167      	bne.n	8010c3c <RegionEU868RxConfig+0xec>
 8010b6c:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8010b6e:	7ce3      	ldrb	r3, [r4, #19]
 8010b70:	b983      	cbnz	r3, 8010b94 <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8010b72:	4b34      	ldr	r3, [pc, #208]	; (8010c44 <RegionEU868RxConfig+0xf4>)
 8010b74:	681a      	ldr	r2, [r3, #0]
 8010b76:	7823      	ldrb	r3, [r4, #0]
 8010b78:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8010b7c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8010b80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010b84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010b88:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8010b8c:	f1b8 0f00 	cmp.w	r8, #0
 8010b90:	d100      	bne.n	8010b94 <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8010b92:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8010b94:	4b2c      	ldr	r3, [pc, #176]	; (8010c48 <RegionEU868RxConfig+0xf8>)
 8010b96:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 8010b9a:	4b29      	ldr	r3, [pc, #164]	; (8010c40 <RegionEU868RxConfig+0xf0>)
 8010b9c:	68db      	ldr	r3, [r3, #12]
 8010b9e:	4640      	mov	r0, r8
 8010ba0:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8010ba2:	2d07      	cmp	r5, #7
 8010ba4:	d02b      	beq.n	8010bfe <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8010ba6:	4b26      	ldr	r3, [pc, #152]	; (8010c40 <RegionEU868RxConfig+0xf0>)
 8010ba8:	f8d3 a018 	ldr.w	sl, [r3, #24]
 8010bac:	7ca3      	ldrb	r3, [r4, #18]
 8010bae:	9309      	str	r3, [sp, #36]	; 0x24
 8010bb0:	2601      	movs	r6, #1
 8010bb2:	9608      	str	r6, [sp, #32]
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	9307      	str	r3, [sp, #28]
 8010bb8:	9306      	str	r3, [sp, #24]
 8010bba:	9305      	str	r3, [sp, #20]
 8010bbc:	9304      	str	r3, [sp, #16]
 8010bbe:	9303      	str	r3, [sp, #12]
 8010bc0:	8922      	ldrh	r2, [r4, #8]
 8010bc2:	9202      	str	r2, [sp, #8]
 8010bc4:	2208      	movs	r2, #8
 8010bc6:	9201      	str	r2, [sp, #4]
 8010bc8:	9300      	str	r3, [sp, #0]
 8010bca:	4633      	mov	r3, r6
 8010bcc:	464a      	mov	r2, r9
 8010bce:	78a1      	ldrb	r1, [r4, #2]
 8010bd0:	4630      	mov	r0, r6
 8010bd2:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8010bd4:	7c63      	ldrb	r3, [r4, #17]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d02d      	beq.n	8010c36 <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8010bda:	4b1c      	ldr	r3, [pc, #112]	; (8010c4c <RegionEU868RxConfig+0xfc>)
 8010bdc:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8010bde:	4b18      	ldr	r3, [pc, #96]	; (8010c40 <RegionEU868RxConfig+0xf0>)
 8010be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010be2:	310d      	adds	r1, #13
 8010be4:	b2c9      	uxtb	r1, r1
 8010be6:	4630      	mov	r0, r6
 8010be8:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8010bea:	462a      	mov	r2, r5
 8010bec:	4641      	mov	r1, r8
 8010bee:	7ce0      	ldrb	r0, [r4, #19]
 8010bf0:	f7fe ff2e 	bl	800fa50 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8010bf4:	703d      	strb	r5, [r7, #0]
    return true;
 8010bf6:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8010bf8:	b00a      	add	sp, #40	; 0x28
 8010bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8010bfe:	4b10      	ldr	r3, [pc, #64]	; (8010c40 <RegionEU868RxConfig+0xf0>)
 8010c00:	f8d3 a018 	ldr.w	sl, [r3, #24]
 8010c04:	7ca3      	ldrb	r3, [r4, #18]
 8010c06:	9309      	str	r3, [sp, #36]	; 0x24
 8010c08:	2000      	movs	r0, #0
 8010c0a:	9008      	str	r0, [sp, #32]
 8010c0c:	9007      	str	r0, [sp, #28]
 8010c0e:	9006      	str	r0, [sp, #24]
 8010c10:	2301      	movs	r3, #1
 8010c12:	9305      	str	r3, [sp, #20]
 8010c14:	9004      	str	r0, [sp, #16]
 8010c16:	9003      	str	r0, [sp, #12]
 8010c18:	8923      	ldrh	r3, [r4, #8]
 8010c1a:	9302      	str	r3, [sp, #8]
 8010c1c:	2305      	movs	r3, #5
 8010c1e:	9301      	str	r3, [sp, #4]
 8010c20:	4b0b      	ldr	r3, [pc, #44]	; (8010c50 <RegionEU868RxConfig+0x100>)
 8010c22:	9300      	str	r3, [sp, #0]
 8010c24:	4603      	mov	r3, r0
 8010c26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010c2a:	fb02 f209 	mul.w	r2, r2, r9
 8010c2e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8010c32:	47d0      	blx	sl
 8010c34:	e7ce      	b.n	8010bd4 <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8010c36:	4b07      	ldr	r3, [pc, #28]	; (8010c54 <RegionEU868RxConfig+0x104>)
 8010c38:	5d59      	ldrb	r1, [r3, r5]
 8010c3a:	e7d0      	b.n	8010bde <RegionEU868RxConfig+0x8e>
        return false;
 8010c3c:	2000      	movs	r0, #0
 8010c3e:	e7db      	b.n	8010bf8 <RegionEU868RxConfig+0xa8>
 8010c40:	08018318 	.word	0x08018318
 8010c44:	20001458 	.word	0x20001458
 8010c48:	08017d0c 	.word	0x08017d0c
 8010c4c:	08017d1c 	.word	0x08017d1c
 8010c50:	00014585 	.word	0x00014585
 8010c54:	08017d14 	.word	0x08017d14

08010c58 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8010c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c5c:	b08d      	sub	sp, #52	; 0x34
 8010c5e:	4604      	mov	r4, r0
 8010c60:	460f      	mov	r7, r1
 8010c62:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8010c64:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010c68:	4a42      	ldr	r2, [pc, #264]	; (8010d74 <RegionEU868TxConfig+0x11c>)
 8010c6a:	f912 a003 	ldrsb.w	sl, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8010c6e:	4b42      	ldr	r3, [pc, #264]	; (8010d78 <RegionEU868TxConfig+0x120>)
 8010c70:	6819      	ldr	r1, [r3, #0]
 8010c72:	4d42      	ldr	r5, [pc, #264]	; (8010d7c <RegionEU868TxConfig+0x124>)
 8010c74:	682b      	ldr	r3, [r5, #0]
 8010c76:	7802      	ldrb	r2, [r0, #0]
 8010c78:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010c7c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8010c80:	7a53      	ldrb	r3, [r2, #9]
 8010c82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010c86:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8010c8a:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8010c8e:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8010c92:	f7fe fec6 	bl	800fa22 <RegionCommonLimitTxPower>
 8010c96:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8010c98:	4939      	ldr	r1, [pc, #228]	; (8010d80 <RegionEU868TxConfig+0x128>)
 8010c9a:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8010c9e:	f7fe fec5 	bl	800fa2c <RegionCommonGetBandwidth>
 8010ca2:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8010ca4:	68a2      	ldr	r2, [r4, #8]
 8010ca6:	6861      	ldr	r1, [r4, #4]
 8010ca8:	4630      	mov	r0, r6
 8010caa:	f7fe fdd7 	bl	800f85c <RegionCommonComputeTxPower>
 8010cae:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8010cb0:	4b34      	ldr	r3, [pc, #208]	; (8010d84 <RegionEU868TxConfig+0x12c>)
 8010cb2:	68da      	ldr	r2, [r3, #12]
 8010cb4:	6829      	ldr	r1, [r5, #0]
 8010cb6:	7823      	ldrb	r3, [r4, #0]
 8010cb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010cbc:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8010cc0:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8010cc2:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8010cc6:	2b07      	cmp	r3, #7
 8010cc8:	d031      	beq.n	8010d2e <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8010cca:	4b2e      	ldr	r3, [pc, #184]	; (8010d84 <RegionEU868TxConfig+0x12c>)
 8010ccc:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 8010cd0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8010cd4:	9308      	str	r3, [sp, #32]
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	9207      	str	r2, [sp, #28]
 8010cda:	9206      	str	r2, [sp, #24]
 8010cdc:	9205      	str	r2, [sp, #20]
 8010cde:	2501      	movs	r5, #1
 8010ce0:	9504      	str	r5, [sp, #16]
 8010ce2:	9203      	str	r2, [sp, #12]
 8010ce4:	2308      	movs	r3, #8
 8010ce6:	9302      	str	r3, [sp, #8]
 8010ce8:	9501      	str	r5, [sp, #4]
 8010cea:	f8cd a000 	str.w	sl, [sp]
 8010cee:	464b      	mov	r3, r9
 8010cf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010cf2:	4628      	mov	r0, r5
 8010cf4:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8010cf6:	4b21      	ldr	r3, [pc, #132]	; (8010d7c <RegionEU868TxConfig+0x124>)
 8010cf8:	681a      	ldr	r2, [r3, #0]
 8010cfa:	7823      	ldrb	r3, [r4, #0]
 8010cfc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010d00:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8010d04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010d08:	f7fe fed2 	bl	800fab0 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8010d0c:	89a1      	ldrh	r1, [r4, #12]
 8010d0e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8010d12:	f7ff fd03 	bl	801071c <GetTimeOnAir>
 8010d16:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8010d1a:	4b1a      	ldr	r3, [pc, #104]	; (8010d84 <RegionEU868TxConfig+0x12c>)
 8010d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d1e:	7b21      	ldrb	r1, [r4, #12]
 8010d20:	4628      	mov	r0, r5
 8010d22:	4798      	blx	r3

    *txPower = txPowerLimited;
 8010d24:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 8010d26:	2001      	movs	r0, #1
 8010d28:	b00d      	add	sp, #52	; 0x34
 8010d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8010d2e:	4b15      	ldr	r3, [pc, #84]	; (8010d84 <RegionEU868TxConfig+0x12c>)
 8010d30:	69dd      	ldr	r5, [r3, #28]
 8010d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010d36:	fb03 f30a 	mul.w	r3, r3, sl
 8010d3a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8010d3e:	9208      	str	r2, [sp, #32]
 8010d40:	f04f 0b00 	mov.w	fp, #0
 8010d44:	f8cd b01c 	str.w	fp, [sp, #28]
 8010d48:	f8cd b018 	str.w	fp, [sp, #24]
 8010d4c:	f8cd b014 	str.w	fp, [sp, #20]
 8010d50:	2201      	movs	r2, #1
 8010d52:	9204      	str	r2, [sp, #16]
 8010d54:	f8cd b00c 	str.w	fp, [sp, #12]
 8010d58:	2205      	movs	r2, #5
 8010d5a:	9202      	str	r2, [sp, #8]
 8010d5c:	f8cd b004 	str.w	fp, [sp, #4]
 8010d60:	9300      	str	r3, [sp, #0]
 8010d62:	464b      	mov	r3, r9
 8010d64:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8010d68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010d6a:	4658      	mov	r0, fp
 8010d6c:	47a8      	blx	r5
        modem = MODEM_FSK;
 8010d6e:	465d      	mov	r5, fp
 8010d70:	e7c1      	b.n	8010cf6 <RegionEU868TxConfig+0x9e>
 8010d72:	bf00      	nop
 8010d74:	08017d0c 	.word	0x08017d0c
 8010d78:	20001454 	.word	0x20001454
 8010d7c:	20001458 	.word	0x20001458
 8010d80:	08017cec 	.word	0x08017cec
 8010d84:	08018318 	.word	0x08018318

08010d88 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8010d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d8c:	b08f      	sub	sp, #60	; 0x3c
 8010d8e:	4607      	mov	r7, r0
 8010d90:	468b      	mov	fp, r1
 8010d92:	4692      	mov	sl, r2
 8010d94:	4699      	mov	r9, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8010d96:	2500      	movs	r5, #0
 8010d98:	950c      	str	r5, [sp, #48]	; 0x30
 8010d9a:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 8010d9e:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 8010da2:	f04f 0807 	mov.w	r8, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8010da6:	e02d      	b.n	8010e04 <RegionEU868LinkAdrReq+0x7c>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8010da8:	2400      	movs	r4, #0
        status = 0x07;
 8010daa:	f04f 0807 	mov.w	r8, #7
 8010dae:	e00f      	b.n	8010dd0 <RegionEU868LinkAdrReq+0x48>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8010db0:	4a56      	ldr	r2, [pc, #344]	; (8010f0c <RegionEU868LinkAdrReq+0x184>)
 8010db2:	6812      	ldr	r2, [r2, #0]
 8010db4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8010db8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8010dbc:	b132      	cbz	r2, 8010dcc <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 8010dbe:	2201      	movs	r2, #1
 8010dc0:	40a2      	lsls	r2, r4
 8010dc2:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8010dc6:	430a      	orrs	r2, r1
 8010dc8:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8010dcc:	3401      	adds	r4, #1
 8010dce:	b2e4      	uxtb	r4, r4
 8010dd0:	2c0f      	cmp	r4, #15
 8010dd2:	d817      	bhi.n	8010e04 <RegionEU868LinkAdrReq+0x7c>
                if( linkAdrParams.ChMaskCtrl == 6 )
 8010dd4:	2b06      	cmp	r3, #6
 8010dd6:	d0eb      	beq.n	8010db0 <RegionEU868LinkAdrReq+0x28>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8010dd8:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8010ddc:	4126      	asrs	r6, r4
 8010dde:	f016 0f01 	tst.w	r6, #1
 8010de2:	d0f3      	beq.n	8010dcc <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8010de4:	4a49      	ldr	r2, [pc, #292]	; (8010f0c <RegionEU868LinkAdrReq+0x184>)
 8010de6:	6812      	ldr	r2, [r2, #0]
 8010de8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8010dec:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8010df0:	2a00      	cmp	r2, #0
 8010df2:	d1eb      	bne.n	8010dcc <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8010df4:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
 8010df8:	e7e8      	b.n	8010dcc <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 8010dfa:	f04f 0806 	mov.w	r8, #6
 8010dfe:	e001      	b.n	8010e04 <RegionEU868LinkAdrReq+0x7c>
            status &= 0xFE; // Channel mask KO
 8010e00:	f04f 0806 	mov.w	r8, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8010e04:	7a3b      	ldrb	r3, [r7, #8]
 8010e06:	42ab      	cmp	r3, r5
 8010e08:	d919      	bls.n	8010e3e <RegionEU868LinkAdrReq+0xb6>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8010e0a:	6878      	ldr	r0, [r7, #4]
 8010e0c:	a90c      	add	r1, sp, #48	; 0x30
 8010e0e:	4428      	add	r0, r5
 8010e10:	f7fe fc74 	bl	800f6fc <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8010e14:	b198      	cbz	r0, 8010e3e <RegionEU868LinkAdrReq+0xb6>
        bytesProcessed += nextIndex;
 8010e16:	4405      	add	r5, r0
 8010e18:	b2ed      	uxtb	r5, r5
        chMask = linkAdrParams.ChMask;
 8010e1a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8010e1e:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8010e22:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8010e26:	b90b      	cbnz	r3, 8010e2c <RegionEU868LinkAdrReq+0xa4>
 8010e28:	2a00      	cmp	r2, #0
 8010e2a:	d0e6      	beq.n	8010dfa <RegionEU868LinkAdrReq+0x72>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8010e2c:	1e5a      	subs	r2, r3, #1
 8010e2e:	b2d2      	uxtb	r2, r2
 8010e30:	2a04      	cmp	r2, #4
 8010e32:	d9e5      	bls.n	8010e00 <RegionEU868LinkAdrReq+0x78>
 8010e34:	2b06      	cmp	r3, #6
 8010e36:	d9b7      	bls.n	8010da8 <RegionEU868LinkAdrReq+0x20>
            status &= 0xFE; // Channel mask KO
 8010e38:	f04f 0806 	mov.w	r8, #6
 8010e3c:	e7e2      	b.n	8010e04 <RegionEU868LinkAdrReq+0x7c>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8010e3e:	2302      	movs	r3, #2
 8010e40:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8010e44:	7a7b      	ldrb	r3, [r7, #9]
 8010e46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8010e4a:	a80a      	add	r0, sp, #40	; 0x28
 8010e4c:	f7ff fc98 	bl	8010780 <RegionEU868GetPhyParam>

    linkAdrVerifyParams.Status = status;
 8010e50:	f88d 8008 	strb.w	r8, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8010e54:	7abb      	ldrb	r3, [r7, #10]
 8010e56:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8010e5a:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8010e5e:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8010e62:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 8010e66:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8010e6a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8010e6e:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8010e72:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010e76:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8010e7a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8010e7e:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8010e82:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010e86:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8010e8a:	2310      	movs	r3, #16
 8010e8c:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8010e90:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8010e94:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8010e96:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8010e9a:	2307      	movs	r3, #7
 8010e9c:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8010ea0:	4a1a      	ldr	r2, [pc, #104]	; (8010f0c <RegionEU868LinkAdrReq+0x184>)
 8010ea2:	6812      	ldr	r2, [r2, #0]
 8010ea4:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8010ea6:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8010eaa:	2300      	movs	r3, #0
 8010eac:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8010eb0:	683b      	ldr	r3, [r7, #0]
 8010eb2:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8010eb4:	ab0c      	add	r3, sp, #48	; 0x30
 8010eb6:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8010eba:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 8010ebe:	a801      	add	r0, sp, #4
 8010ec0:	f7fe fc38 	bl	800f734 <RegionCommonLinkAdrReqVerifyParams>
 8010ec4:	4604      	mov	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8010ec6:	2807      	cmp	r0, #7
 8010ec8:	d011      	beq.n	8010eee <RegionEU868LinkAdrReq+0x166>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8010eca:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8010ece:	f88b 3000 	strb.w	r3, [fp]
    *txPowOut = linkAdrParams.TxPower;
 8010ed2:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 8010ed6:	f88a 3000 	strb.w	r3, [sl]
    *nbRepOut = linkAdrParams.NbRep;
 8010eda:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8010ede:	f889 3000 	strb.w	r3, [r9]
    *nbBytesParsed = bytesProcessed;
 8010ee2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010ee4:	701d      	strb	r5, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 8010ee6:	4620      	mov	r0, r4
 8010ee8:	b00f      	add	sp, #60	; 0x3c
 8010eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8010eee:	4e07      	ldr	r6, [pc, #28]	; (8010f0c <RegionEU868LinkAdrReq+0x184>)
 8010ef0:	6830      	ldr	r0, [r6, #0]
 8010ef2:	220c      	movs	r2, #12
 8010ef4:	2100      	movs	r1, #0
 8010ef6:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8010efa:	f003 fada 	bl	80144b2 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8010efe:	6833      	ldr	r3, [r6, #0]
 8010f00:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8010f04:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
 8010f08:	e7df      	b.n	8010eca <RegionEU868LinkAdrReq+0x142>
 8010f0a:	bf00      	nop
 8010f0c:	20001458 	.word	0x20001458

08010f10 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8010f10:	b530      	push	{r4, r5, lr}
 8010f12:	b083      	sub	sp, #12
 8010f14:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8010f16:	2300      	movs	r3, #0
 8010f18:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8010f1c:	f10d 0107 	add.w	r1, sp, #7
 8010f20:	6840      	ldr	r0, [r0, #4]
 8010f22:	f7ff fba7 	bl	8010674 <VerifyRfFreq>
 8010f26:	b1a8      	cbz	r0, 8010f54 <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 8010f28:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8010f2a:	2207      	movs	r2, #7
 8010f2c:	2100      	movs	r1, #0
 8010f2e:	f994 0000 	ldrsb.w	r0, [r4]
 8010f32:	f7fe fac0 	bl	800f4b6 <RegionCommonValueInRange>
 8010f36:	b908      	cbnz	r0, 8010f3c <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 8010f38:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8010f3c:	2205      	movs	r2, #5
 8010f3e:	2100      	movs	r1, #0
 8010f40:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8010f44:	f7fe fab7 	bl	800f4b6 <RegionCommonValueInRange>
 8010f48:	b908      	cbnz	r0, 8010f4e <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8010f4a:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 8010f4e:	4628      	mov	r0, r5
 8010f50:	b003      	add	sp, #12
 8010f52:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 8010f54:	2506      	movs	r5, #6
 8010f56:	e7e8      	b.n	8010f2a <RegionEU868RxParamSetupReq+0x1a>

08010f58 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 8010f58:	f04f 30ff 	mov.w	r0, #4294967295
 8010f5c:	4770      	bx	lr
	...

08010f60 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8010f60:	b510      	push	{r4, lr}
 8010f62:	b082      	sub	sp, #8
 8010f64:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8010f66:	2300      	movs	r3, #0
 8010f68:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8010f6c:	f10d 0107 	add.w	r1, sp, #7
 8010f70:	6840      	ldr	r0, [r0, #4]
 8010f72:	f7ff fb7f 	bl	8010674 <VerifyRfFreq>
 8010f76:	b178      	cbz	r0, 8010f98 <RegionEU868DlChannelReq+0x38>
    uint8_t status = 0x03;
 8010f78:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8010f7a:	4b0c      	ldr	r3, [pc, #48]	; (8010fac <RegionEU868DlChannelReq+0x4c>)
 8010f7c:	681a      	ldr	r2, [r3, #0]
 8010f7e:	7823      	ldrb	r3, [r4, #0]
 8010f80:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8010f84:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8010f88:	b909      	cbnz	r1, 8010f8e <RegionEU868DlChannelReq+0x2e>
    {
        status &= 0xFD;
 8010f8a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8010f8e:	2803      	cmp	r0, #3
 8010f90:	d004      	beq.n	8010f9c <RegionEU868DlChannelReq+0x3c>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 8010f92:	b240      	sxtb	r0, r0
 8010f94:	b002      	add	sp, #8
 8010f96:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 8010f98:	2002      	movs	r0, #2
 8010f9a:	e7ee      	b.n	8010f7a <RegionEU868DlChannelReq+0x1a>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8010f9c:	6861      	ldr	r1, [r4, #4]
 8010f9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010fa2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010fa6:	6059      	str	r1, [r3, #4]
 8010fa8:	e7f3      	b.n	8010f92 <RegionEU868DlChannelReq+0x32>
 8010faa:	bf00      	nop
 8010fac:	20001458 	.word	0x20001458

08010fb0 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 8010fb0:	4770      	bx	lr
	...

08010fb4 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8010fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fb6:	b097      	sub	sp, #92	; 0x5c
 8010fb8:	4604      	mov	r4, r0
 8010fba:	460f      	mov	r7, r1
 8010fbc:	4616      	mov	r6, r2
 8010fbe:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8010fc0:	2100      	movs	r1, #0
 8010fc2:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 8010fc6:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8010fca:	9111      	str	r1, [sp, #68]	; 0x44
 8010fcc:	9112      	str	r1, [sp, #72]	; 0x48
 8010fce:	9113      	str	r1, [sp, #76]	; 0x4c
 8010fd0:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8010fd2:	2307      	movs	r3, #7
 8010fd4:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8010fd8:	4b32      	ldr	r3, [pc, #200]	; (80110a4 <RegionEU868NextChannel+0xf0>)
 8010fda:	6818      	ldr	r0, [r3, #0]
 8010fdc:	2201      	movs	r2, #1
 8010fde:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8010fe2:	f7fe fac4 	bl	800f56e <RegionCommonCountChannels>
 8010fe6:	b938      	cbnz	r0, 8010ff8 <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8010fe8:	4b2e      	ldr	r3, [pc, #184]	; (80110a4 <RegionEU868NextChannel+0xf0>)
 8010fea:	681a      	ldr	r2, [r3, #0]
 8010fec:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 8010ff0:	f043 0307 	orr.w	r3, r3, #7
 8010ff4:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8010ff8:	7a63      	ldrb	r3, [r4, #9]
 8010ffa:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8010ffe:	7a23      	ldrb	r3, [r4, #8]
 8011000:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8011004:	4b27      	ldr	r3, [pc, #156]	; (80110a4 <RegionEU868NextChannel+0xf0>)
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	f503 6290 	add.w	r2, r3, #1152	; 0x480
 801100c:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801100e:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8011010:	4b25      	ldr	r3, [pc, #148]	; (80110a8 <RegionEU868NextChannel+0xf4>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8011016:	2310      	movs	r3, #16
 8011018:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 801101c:	f10d 030a 	add.w	r3, sp, #10
 8011020:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8011022:	6823      	ldr	r3, [r4, #0]
 8011024:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8011026:	6863      	ldr	r3, [r4, #4]
 8011028:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801102a:	7aa3      	ldrb	r3, [r4, #10]
 801102c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8011030:	2306      	movs	r3, #6
 8011032:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8011036:	ab0c      	add	r3, sp, #48	; 0x30
 8011038:	6921      	ldr	r1, [r4, #16]
 801103a:	68e0      	ldr	r0, [r4, #12]
 801103c:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8011040:	7d23      	ldrb	r3, [r4, #20]
 8011042:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8011046:	8ae1      	ldrh	r1, [r4, #22]
 8011048:	f994 0008 	ldrsb.w	r0, [r4, #8]
 801104c:	f7ff fb66 	bl	801071c <GetTimeOnAir>
 8011050:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8011052:	ab03      	add	r3, sp, #12
 8011054:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8011056:	9601      	str	r6, [sp, #4]
 8011058:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 801105c:	9300      	str	r3, [sp, #0]
 801105e:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 8011062:	aa11      	add	r2, sp, #68	; 0x44
 8011064:	4629      	mov	r1, r5
 8011066:	a809      	add	r0, sp, #36	; 0x24
 8011068:	f7fe fc74 	bl	800f954 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801106c:	4604      	mov	r4, r0
 801106e:	b120      	cbz	r0, 801107a <RegionEU868NextChannel+0xc6>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8011070:	280c      	cmp	r0, #12
 8011072:	d00d      	beq.n	8011090 <RegionEU868NextChannel+0xdc>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8011074:	4620      	mov	r0, r4
 8011076:	b017      	add	sp, #92	; 0x5c
 8011078:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801107a:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 801107e:	3901      	subs	r1, #1
 8011080:	f003 f9f4 	bl	801446c <randr>
 8011084:	ab16      	add	r3, sp, #88	; 0x58
 8011086:	4418      	add	r0, r3
 8011088:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 801108c:	703b      	strb	r3, [r7, #0]
 801108e:	e7f1      	b.n	8011074 <RegionEU868NextChannel+0xc0>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8011090:	4b04      	ldr	r3, [pc, #16]	; (80110a4 <RegionEU868NextChannel+0xf0>)
 8011092:	681a      	ldr	r2, [r3, #0]
 8011094:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 8011098:	f043 0307 	orr.w	r3, r3, #7
 801109c:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
 80110a0:	e7e8      	b.n	8011074 <RegionEU868NextChannel+0xc0>
 80110a2:	bf00      	nop
 80110a4:	20001458 	.word	0x20001458
 80110a8:	20001454 	.word	0x20001454

080110ac <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80110ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110ae:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80110b0:	2300      	movs	r3, #0
 80110b2:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 80110b6:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80110b8:	2d02      	cmp	r5, #2
 80110ba:	d94f      	bls.n	801115c <RegionEU868ChannelAdd+0xb0>
 80110bc:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80110be:	2d0f      	cmp	r5, #15
 80110c0:	d84e      	bhi.n	8011160 <RegionEU868ChannelAdd+0xb4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80110c2:	6803      	ldr	r3, [r0, #0]
 80110c4:	7a18      	ldrb	r0, [r3, #8]
 80110c6:	f340 0003 	sbfx	r0, r0, #0, #4
 80110ca:	2207      	movs	r2, #7
 80110cc:	2100      	movs	r1, #0
 80110ce:	b240      	sxtb	r0, r0
 80110d0:	f7fe f9f1 	bl	800f4b6 <RegionCommonValueInRange>
 80110d4:	2800      	cmp	r0, #0
 80110d6:	d03d      	beq.n	8011154 <RegionEU868ChannelAdd+0xa8>
    bool drInvalid = false;
 80110d8:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80110da:	6823      	ldr	r3, [r4, #0]
 80110dc:	7a18      	ldrb	r0, [r3, #8]
 80110de:	f340 1003 	sbfx	r0, r0, #4, #4
 80110e2:	2207      	movs	r2, #7
 80110e4:	2100      	movs	r1, #0
 80110e6:	b240      	sxtb	r0, r0
 80110e8:	f7fe f9e5 	bl	800f4b6 <RegionCommonValueInRange>
 80110ec:	b900      	cbnz	r0, 80110f0 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 80110ee:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80110f0:	6820      	ldr	r0, [r4, #0]
 80110f2:	7a03      	ldrb	r3, [r0, #8]
 80110f4:	f343 0203 	sbfx	r2, r3, #0, #4
 80110f8:	b252      	sxtb	r2, r2
 80110fa:	f343 1303 	sbfx	r3, r3, #4, #4
 80110fe:	b25b      	sxtb	r3, r3
 8011100:	429a      	cmp	r2, r3
 8011102:	dd00      	ble.n	8011106 <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 8011104:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8011106:	f10d 0107 	add.w	r1, sp, #7
 801110a:	6800      	ldr	r0, [r0, #0]
 801110c:	f7ff fab2 	bl	8010674 <VerifyRfFreq>
 8011110:	b310      	cbz	r0, 8011158 <RegionEU868ChannelAdd+0xac>
    bool freqInvalid = false;
 8011112:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8011114:	b106      	cbz	r6, 8011118 <RegionEU868ChannelAdd+0x6c>
 8011116:	bb33      	cbnz	r3, 8011166 <RegionEU868ChannelAdd+0xba>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 8011118:	bb3e      	cbnz	r6, 801116a <RegionEU868ChannelAdd+0xbe>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 801111a:	bb43      	cbnz	r3, 801116e <RegionEU868ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 801111c:	4f15      	ldr	r7, [pc, #84]	; (8011174 <RegionEU868ChannelAdd+0xc8>)
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	006e      	lsls	r6, r5, #1
 8011122:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8011126:	220c      	movs	r2, #12
 8011128:	6821      	ldr	r1, [r4, #0]
 801112a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801112e:	f003 f9aa 	bl	8014486 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8011132:	683a      	ldr	r2, [r7, #0]
 8011134:	442e      	add	r6, r5
 8011136:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801113a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801113e:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8011140:	2301      	movs	r3, #1
 8011142:	fa03 f505 	lsl.w	r5, r3, r5
 8011146:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 801114a:	431d      	orrs	r5, r3
 801114c:	f8a2 5480 	strh.w	r5, [r2, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 8011150:	2000      	movs	r0, #0
 8011152:	e006      	b.n	8011162 <RegionEU868ChannelAdd+0xb6>
        drInvalid = true;
 8011154:	2601      	movs	r6, #1
 8011156:	e7c0      	b.n	80110da <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 8011158:	2301      	movs	r3, #1
 801115a:	e7db      	b.n	8011114 <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801115c:	2006      	movs	r0, #6
 801115e:	e000      	b.n	8011162 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011160:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8011162:	b003      	add	sp, #12
 8011164:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8011166:	2006      	movs	r0, #6
 8011168:	e7fb      	b.n	8011162 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 801116a:	2005      	movs	r0, #5
 801116c:	e7f9      	b.n	8011162 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801116e:	2004      	movs	r0, #4
 8011170:	e7f7      	b.n	8011162 <RegionEU868ChannelAdd+0xb6>
 8011172:	bf00      	nop
 8011174:	20001458 	.word	0x20001458

08011178 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8011178:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801117a:	2902      	cmp	r1, #2
 801117c:	d801      	bhi.n	8011182 <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 801117e:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 8011180:	4770      	bx	lr
{
 8011182:	b510      	push	{r4, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8011184:	4b08      	ldr	r3, [pc, #32]	; (80111a8 <RegionEU868ChannelsRemove+0x30>)
 8011186:	6818      	ldr	r0, [r3, #0]
 8011188:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 801118c:	009c      	lsls	r4, r3, #2
 801118e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8011192:	2200      	movs	r2, #0
 8011194:	5102      	str	r2, [r0, r4]
 8011196:	605a      	str	r2, [r3, #4]
 8011198:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801119a:	2210      	movs	r2, #16
 801119c:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 80111a0:	f7fe f9cb 	bl	800f53a <RegionCommonChanDisable>
}
 80111a4:	bd10      	pop	{r4, pc}
 80111a6:	bf00      	nop
 80111a8:	20001458 	.word	0x20001458

080111ac <RegionEU868ApplyCFList>:
{
 80111ac:	b570      	push	{r4, r5, r6, lr}
 80111ae:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80111b0:	2350      	movs	r3, #80	; 0x50
 80111b2:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 80111b6:	7903      	ldrb	r3, [r0, #4]
 80111b8:	2b10      	cmp	r3, #16
 80111ba:	d135      	bne.n	8011228 <RegionEU868ApplyCFList+0x7c>
 80111bc:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 80111be:	6803      	ldr	r3, [r0, #0]
 80111c0:	7bdd      	ldrb	r5, [r3, #15]
 80111c2:	2d00      	cmp	r5, #0
 80111c4:	d130      	bne.n	8011228 <RegionEU868ApplyCFList+0x7c>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80111c6:	2403      	movs	r4, #3
 80111c8:	e01a      	b.n	8011200 <RegionEU868ApplyCFList+0x54>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80111ca:	6832      	ldr	r2, [r6, #0]
 80111cc:	5d53      	ldrb	r3, [r2, r5]
 80111ce:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80111d0:	442a      	add	r2, r5
 80111d2:	7851      	ldrb	r1, [r2, #1]
 80111d4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80111d8:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80111da:	7892      	ldrb	r2, [r2, #2]
 80111dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 80111e0:	2264      	movs	r2, #100	; 0x64
 80111e2:	fb02 f303 	mul.w	r3, r2, r3
 80111e6:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 80111e8:	2300      	movs	r3, #0
 80111ea:	9304      	str	r3, [sp, #16]
 80111ec:	e011      	b.n	8011212 <RegionEU868ApplyCFList+0x66>
            channelRemove.ChannelId = chanIdx;
 80111ee:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 80111f2:	4668      	mov	r0, sp
 80111f4:	f7ff ffc0 	bl	8011178 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80111f8:	3503      	adds	r5, #3
 80111fa:	b2ed      	uxtb	r5, r5
 80111fc:	3401      	adds	r4, #1
 80111fe:	b2e4      	uxtb	r4, r4
 8011200:	2c0f      	cmp	r4, #15
 8011202:	d811      	bhi.n	8011228 <RegionEU868ApplyCFList+0x7c>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8011204:	2c07      	cmp	r4, #7
 8011206:	d9e0      	bls.n	80111ca <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 8011208:	2300      	movs	r3, #0
 801120a:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 801120c:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 8011210:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 8011212:	9b03      	ldr	r3, [sp, #12]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d0ea      	beq.n	80111ee <RegionEU868ApplyCFList+0x42>
            channelAdd.NewChannel = &newChannel;
 8011218:	ab03      	add	r3, sp, #12
 801121a:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 801121c:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 8011220:	a801      	add	r0, sp, #4
 8011222:	f7ff ff43 	bl	80110ac <RegionEU868ChannelAdd>
 8011226:	e7e7      	b.n	80111f8 <RegionEU868ApplyCFList+0x4c>
}
 8011228:	b006      	add	sp, #24
 801122a:	bd70      	pop	{r4, r5, r6, pc}

0801122c <RegionEU868NewChannelReq>:
{
 801122c:	b500      	push	{lr}
 801122e:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 8011230:	6803      	ldr	r3, [r0, #0]
 8011232:	681a      	ldr	r2, [r3, #0]
 8011234:	b952      	cbnz	r2, 801124c <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8011236:	7903      	ldrb	r3, [r0, #4]
 8011238:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 801123c:	a801      	add	r0, sp, #4
 801123e:	f7ff ff9b 	bl	8011178 <RegionEU868ChannelsRemove>
 8011242:	b1d0      	cbz	r0, 801127a <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 8011244:	2003      	movs	r0, #3
}
 8011246:	b005      	add	sp, #20
 8011248:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801124c:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801124e:	7903      	ldrb	r3, [r0, #4]
 8011250:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8011254:	a802      	add	r0, sp, #8
 8011256:	f7ff ff29 	bl	80110ac <RegionEU868ChannelAdd>
 801125a:	2806      	cmp	r0, #6
 801125c:	d80b      	bhi.n	8011276 <RegionEU868NewChannelReq+0x4a>
 801125e:	e8df f000 	tbb	[pc, r0]
 8011262:	0a04      	.short	0x0a04
 8011264:	060e0a0a 	.word	0x060e0a0a
 8011268:	08          	.byte	0x08
 8011269:	00          	.byte	0x00
 801126a:	2003      	movs	r0, #3
 801126c:	e7eb      	b.n	8011246 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 801126e:	2001      	movs	r0, #1
                break;
 8011270:	e7e9      	b.n	8011246 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 8011272:	2000      	movs	r0, #0
                break;
 8011274:	e7e7      	b.n	8011246 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 8011276:	2000      	movs	r0, #0
                break;
 8011278:	e7e5      	b.n	8011246 <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 801127a:	2000      	movs	r0, #0
 801127c:	e7e3      	b.n	8011246 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 801127e:	2002      	movs	r0, #2
 8011280:	e7e1      	b.n	8011246 <RegionEU868NewChannelReq+0x1a>
	...

08011284 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8011284:	b538      	push	{r3, r4, r5, lr}
 8011286:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8011288:	4b12      	ldr	r3, [pc, #72]	; (80112d4 <RegionEU868SetContinuousWave+0x50>)
 801128a:	6819      	ldr	r1, [r3, #0]
 801128c:	4d12      	ldr	r5, [pc, #72]	; (80112d8 <RegionEU868SetContinuousWave+0x54>)
 801128e:	682b      	ldr	r3, [r5, #0]
 8011290:	7802      	ldrb	r2, [r0, #0]
 8011292:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011296:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801129a:	7a53      	ldrb	r3, [r2, #9]
 801129c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80112a0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80112a4:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80112a8:	f990 0002 	ldrsb.w	r0, [r0, #2]
 80112ac:	f7fe fbb9 	bl	800fa22 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 80112b0:	682a      	ldr	r2, [r5, #0]
 80112b2:	7823      	ldrb	r3, [r4, #0]
 80112b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80112b8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 80112bc:	68a2      	ldr	r2, [r4, #8]
 80112be:	6861      	ldr	r1, [r4, #4]
 80112c0:	f7fe facc 	bl	800f85c <RegionCommonComputeTxPower>
 80112c4:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80112c6:	4b05      	ldr	r3, [pc, #20]	; (80112dc <RegionEU868SetContinuousWave+0x58>)
 80112c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112ca:	89a2      	ldrh	r2, [r4, #12]
 80112cc:	4628      	mov	r0, r5
 80112ce:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 80112d0:	bd38      	pop	{r3, r4, r5, pc}
 80112d2:	bf00      	nop
 80112d4:	20001454 	.word	0x20001454
 80112d8:	20001458 	.word	0x20001458
 80112dc:	08018318 	.word	0x08018318

080112e0 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 80112e0:	1a88      	subs	r0, r1, r2
 80112e2:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 80112e4:	2800      	cmp	r0, #0
 80112e6:	db01      	blt.n	80112ec <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 80112e8:	b2c0      	uxtb	r0, r0
 80112ea:	4770      	bx	lr
        datarate = DR_0;
 80112ec:	2000      	movs	r0, #0
 80112ee:	e7fb      	b.n	80112e8 <RegionEU868ApplyDrOffset+0x8>

080112f0 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;


static bool VerifyRfFreq( uint32_t freq )
{
 80112f0:	b510      	push	{r4, lr}
 80112f2:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80112f4:	4b05      	ldr	r3, [pc, #20]	; (801130c <VerifyRfFreq+0x1c>)
 80112f6:	6a1b      	ldr	r3, [r3, #32]
 80112f8:	4798      	blx	r3
 80112fa:	b120      	cbz	r0, 8011306 <VerifyRfFreq+0x16>
    {
        return false;
    }

    if( ( freq < 865000000 ) || ( freq > 867000000 ) )
 80112fc:	4b04      	ldr	r3, [pc, #16]	; (8011310 <VerifyRfFreq+0x20>)
 80112fe:	4423      	add	r3, r4
 8011300:	4a04      	ldr	r2, [pc, #16]	; (8011314 <VerifyRfFreq+0x24>)
 8011302:	4293      	cmp	r3, r2
 8011304:	d800      	bhi.n	8011308 <VerifyRfFreq+0x18>
    {
        return false;
    }
    return true;
}
 8011306:	bd10      	pop	{r4, pc}
        return false;
 8011308:	2000      	movs	r0, #0
 801130a:	e7fc      	b.n	8011306 <VerifyRfFreq+0x16>
 801130c:	08018318 	.word	0x08018318
 8011310:	cc7125c0 	.word	0xcc7125c0
 8011314:	001e8480 	.word	0x001e8480

08011318 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8011318:	b570      	push	{r4, r5, r6, lr}
 801131a:	b084      	sub	sp, #16
 801131c:	4605      	mov	r5, r0
 801131e:	460c      	mov	r4, r1
    int8_t phyDr = DataratesIN865[datarate];
 8011320:	4b13      	ldr	r3, [pc, #76]	; (8011370 <GetTimeOnAir+0x58>)
 8011322:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsIN865 );
 8011324:	4913      	ldr	r1, [pc, #76]	; (8011374 <GetTimeOnAir+0x5c>)
 8011326:	f7fe fb81 	bl	800fa2c <RegionCommonGetBandwidth>
 801132a:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 801132c:	2d07      	cmp	r5, #7
 801132e:	d00e      	beq.n	801134e <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8011330:	4b11      	ldr	r3, [pc, #68]	; (8011378 <GetTimeOnAir+0x60>)
 8011332:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8011334:	2001      	movs	r0, #1
 8011336:	9003      	str	r0, [sp, #12]
 8011338:	b2e4      	uxtb	r4, r4
 801133a:	9402      	str	r4, [sp, #8]
 801133c:	2300      	movs	r3, #0
 801133e:	9301      	str	r3, [sp, #4]
 8011340:	2308      	movs	r3, #8
 8011342:	9300      	str	r3, [sp, #0]
 8011344:	4603      	mov	r3, r0
 8011346:	4632      	mov	r2, r6
 8011348:	47a8      	blx	r5
    }
    return timeOnAir;
}
 801134a:	b004      	add	sp, #16
 801134c:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 801134e:	4b0a      	ldr	r3, [pc, #40]	; (8011378 <GetTimeOnAir+0x60>)
 8011350:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8011352:	2301      	movs	r3, #1
 8011354:	9303      	str	r3, [sp, #12]
 8011356:	b2e4      	uxtb	r4, r4
 8011358:	9402      	str	r4, [sp, #8]
 801135a:	2000      	movs	r0, #0
 801135c:	9001      	str	r0, [sp, #4]
 801135e:	2305      	movs	r3, #5
 8011360:	9300      	str	r3, [sp, #0]
 8011362:	4603      	mov	r3, r0
 8011364:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011368:	fb02 f206 	mul.w	r2, r2, r6
 801136c:	47a8      	blx	r5
 801136e:	e7ec      	b.n	801134a <GetTimeOnAir+0x32>
 8011370:	08017d44 	.word	0x08017d44
 8011374:	08017d24 	.word	0x08017d24
 8011378:	08018318 	.word	0x08018318

0801137c <RegionIN865GetPhyParam>:
#endif /* REGION_IN865 */

PhyParam_t RegionIN865GetPhyParam( GetPhyParams_t* getPhy )
{
 801137c:	b500      	push	{lr}
 801137e:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 8011380:	2300      	movs	r3, #0
 8011382:	9304      	str	r3, [sp, #16]

#if defined( REGION_IN865 )
    switch( getPhy->Attribute )
 8011384:	7803      	ldrb	r3, [r0, #0]
 8011386:	3b0b      	subs	r3, #11
 8011388:	2b2e      	cmp	r3, #46	; 0x2e
 801138a:	d830      	bhi.n	80113ee <RegionIN865GetPhyParam+0x72>
 801138c:	e8df f003 	tbb	[pc, r3]
 8011390:	3f393633 	.word	0x3f393633
 8011394:	4d49452f 	.word	0x4d49452f
 8011398:	5d595551 	.word	0x5d595551
 801139c:	6c69662f 	.word	0x6c69662f
 80113a0:	2f7b7872 	.word	0x2f7b7872
 80113a4:	18827f2f 	.word	0x18827f2f
 80113a8:	2f2f2f2f 	.word	0x2f2f2f2f
 80113ac:	2f2f2f2f 	.word	0x2f2f2f2f
 80113b0:	2f2f2f2f 	.word	0x2f2f2f2f
 80113b4:	9288852f 	.word	0x9288852f
 80113b8:	98952f2f 	.word	0x98952f2f
 80113bc:	9b2f      	.short	0x9b2f
 80113be:	a1          	.byte	0xa1
 80113bf:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80113c0:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80113c4:	f88d 3004 	strb.w	r3, [sp, #4]
 80113c8:	2307      	movs	r3, #7
 80113ca:	f88d 3005 	strb.w	r3, [sp, #5]
 80113ce:	2300      	movs	r3, #0
 80113d0:	f88d 3006 	strb.w	r3, [sp, #6]
 80113d4:	2310      	movs	r3, #16
 80113d6:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )IN865_TX_MAX_DATARATE,
                .MinDr = ( int8_t )IN865_TX_MIN_DATARATE,
                .NbChannels = IN865_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80113da:	4b41      	ldr	r3, [pc, #260]	; (80114e0 <RegionIN865GetPhyParam+0x164>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80113e2:	9202      	str	r2, [sp, #8]
 80113e4:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80113e6:	a801      	add	r0, sp, #4
 80113e8:	f7fe fafc 	bl	800f9e4 <RegionCommonGetNextLowerTxDr>
 80113ec:	9004      	str	r0, [sp, #16]
        }
    }

#endif /* REGION_IN865 */
    return phyParam;
}
 80113ee:	9804      	ldr	r0, [sp, #16]
 80113f0:	b007      	add	sp, #28
 80113f2:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80113f6:	2340      	movs	r3, #64	; 0x40
 80113f8:	9304      	str	r3, [sp, #16]
            break;
 80113fa:	e7f8      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80113fc:	2320      	movs	r3, #32
 80113fe:	9304      	str	r3, [sp, #16]
            break;
 8011400:	e7f5      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateIN865[getPhy->Datarate];
 8011402:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011406:	4a37      	ldr	r2, [pc, #220]	; (80114e4 <RegionIN865GetPhyParam+0x168>)
 8011408:	5cd3      	ldrb	r3, [r2, r3]
 801140a:	9304      	str	r3, [sp, #16]
            break;
 801140c:	e7ef      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterIN865[getPhy->Datarate];
 801140e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011412:	4a35      	ldr	r2, [pc, #212]	; (80114e8 <RegionIN865GetPhyParam+0x16c>)
 8011414:	5cd3      	ldrb	r3, [r2, r3]
 8011416:	9304      	str	r3, [sp, #16]
            break;
 8011418:	e7e9      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_MAX_RX_WINDOW;
 801141a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801141e:	9304      	str	r3, [sp, #16]
            break;
 8011420:	e7e5      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8011422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011426:	9304      	str	r3, [sp, #16]
            break;
 8011428:	e7e1      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801142a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801142e:	9304      	str	r3, [sp, #16]
            break;
 8011430:	e7dd      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8011432:	f241 3388 	movw	r3, #5000	; 0x1388
 8011436:	9304      	str	r3, [sp, #16]
            break;
 8011438:	e7d9      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801143a:	f241 7370 	movw	r3, #6000	; 0x1770
 801143e:	9304      	str	r3, [sp, #16]
            break;
 8011440:	e7d5      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8011442:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011446:	9304      	str	r3, [sp, #16]
            break;
 8011448:	e7d1      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 801144a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801144e:	4827      	ldr	r0, [pc, #156]	; (80114ec <RegionIN865GetPhyParam+0x170>)
 8011450:	f003 f80c 	bl	801446c <randr>
 8011454:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 8011458:	9004      	str	r0, [sp, #16]
            break;
 801145a:	e7c8      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_RX_WND_2_FREQ;
 801145c:	4b24      	ldr	r3, [pc, #144]	; (80114f0 <RegionIN865GetPhyParam+0x174>)
 801145e:	9304      	str	r3, [sp, #16]
            break;
 8011460:	e7c5      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_RX_WND_2_DR;
 8011462:	2302      	movs	r3, #2
 8011464:	9304      	str	r3, [sp, #16]
            break;
 8011466:	e7c2      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8011468:	4b1d      	ldr	r3, [pc, #116]	; (80114e0 <RegionIN865GetPhyParam+0x164>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8011470:	9304      	str	r3, [sp, #16]
            break;
 8011472:	e7bc      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8011474:	4b1a      	ldr	r3, [pc, #104]	; (80114e0 <RegionIN865GetPhyParam+0x164>)
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 801147c:	9304      	str	r3, [sp, #16]
            break;
 801147e:	e7b6      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_MAX_NB_CHANNELS;
 8011480:	2310      	movs	r3, #16
 8011482:	9304      	str	r3, [sp, #16]
            break;
 8011484:	e7b3      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 8011486:	4b16      	ldr	r3, [pc, #88]	; (80114e0 <RegionIN865GetPhyParam+0x164>)
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	9304      	str	r3, [sp, #16]
            break;
 801148c:	e7af      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
            phyParam.fValue = IN865_DEFAULT_MAX_EIRP;
 801148e:	4b19      	ldr	r3, [pc, #100]	; (80114f4 <RegionIN865GetPhyParam+0x178>)
 8011490:	9304      	str	r3, [sp, #16]
            break;
 8011492:	e7ac      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
            phyParam.fValue = IN865_DEFAULT_ANTENNA_GAIN;
 8011494:	4b18      	ldr	r3, [pc, #96]	; (80114f8 <RegionIN865GetPhyParam+0x17c>)
 8011496:	9304      	str	r3, [sp, #16]
            break;
 8011498:	e7a9      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_BEACON_CHANNEL_FREQ;
 801149a:	4b15      	ldr	r3, [pc, #84]	; (80114f0 <RegionIN865GetPhyParam+0x174>)
 801149c:	9304      	str	r3, [sp, #16]
            break;
 801149e:	e7a6      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = IN865_BEACON_SIZE;
 80114a0:	2313      	movs	r3, #19
 80114a2:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = IN865_RFU1_SIZE;
 80114a6:	2301      	movs	r3, #1
 80114a8:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = IN865_RFU2_SIZE;
 80114ac:	2303      	movs	r3, #3
 80114ae:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 80114b2:	e79c      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_BEACON_CHANNEL_DR;
 80114b4:	2304      	movs	r3, #4
 80114b6:	9304      	str	r3, [sp, #16]
            break;
 80114b8:	e799      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_PING_SLOT_CHANNEL_FREQ;
 80114ba:	4b0d      	ldr	r3, [pc, #52]	; (80114f0 <RegionIN865GetPhyParam+0x174>)
 80114bc:	9304      	str	r3, [sp, #16]
            break;
 80114be:	e796      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
            phyParam.Value = IN865_PING_SLOT_CHANNEL_DR;
 80114c0:	2304      	movs	r3, #4
 80114c2:	9304      	str	r3, [sp, #16]
            break;
 80114c4:	e793      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
            phyParam.Value = DataratesIN865[getPhy->Datarate];
 80114c6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80114ca:	4a0c      	ldr	r2, [pc, #48]	; (80114fc <RegionIN865GetPhyParam+0x180>)
 80114cc:	5cd3      	ldrb	r3, [r2, r3]
 80114ce:	9304      	str	r3, [sp, #16]
            break;
 80114d0:	e78d      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsIN865 );
 80114d2:	490b      	ldr	r1, [pc, #44]	; (8011500 <RegionIN865GetPhyParam+0x184>)
 80114d4:	f990 0001 	ldrsb.w	r0, [r0, #1]
 80114d8:	f7fe faa8 	bl	800fa2c <RegionCommonGetBandwidth>
 80114dc:	9004      	str	r0, [sp, #16]
            break;
 80114de:	e786      	b.n	80113ee <RegionIN865GetPhyParam+0x72>
 80114e0:	20001460 	.word	0x20001460
 80114e4:	08017d54 	.word	0x08017d54
 80114e8:	08017d5c 	.word	0x08017d5c
 80114ec:	fffffc18 	.word	0xfffffc18
 80114f0:	33a680f0 	.word	0x33a680f0
 80114f4:	41f00000 	.word	0x41f00000
 80114f8:	4009999a 	.word	0x4009999a
 80114fc:	08017d44 	.word	0x08017d44
 8011500:	08017d24 	.word	0x08017d24

08011504 <RegionIN865SetBandTxDone>:

void RegionIN865SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8011504:	b530      	push	{r4, r5, lr}
 8011506:	b083      	sub	sp, #12
#if defined( REGION_IN865 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8011508:	4b0b      	ldr	r3, [pc, #44]	; (8011538 <RegionIN865SetBandTxDone+0x34>)
 801150a:	681d      	ldr	r5, [r3, #0]
 801150c:	4b0b      	ldr	r3, [pc, #44]	; (801153c <RegionIN865SetBandTxDone+0x38>)
 801150e:	681a      	ldr	r2, [r3, #0]
 8011510:	7803      	ldrb	r3, [r0, #0]
 8011512:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011516:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801151a:	7a5b      	ldrb	r3, [r3, #9]
 801151c:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8011520:	6903      	ldr	r3, [r0, #16]
 8011522:	9300      	str	r3, [sp, #0]
 8011524:	68c3      	ldr	r3, [r0, #12]
 8011526:	7842      	ldrb	r2, [r0, #1]
 8011528:	6881      	ldr	r1, [r0, #8]
 801152a:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 801152e:	f7fe f845 	bl	800f5bc <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_IN865 */
}
 8011532:	b003      	add	sp, #12
 8011534:	bd30      	pop	{r4, r5, pc}
 8011536:	bf00      	nop
 8011538:	2000145c 	.word	0x2000145c
 801153c:	20001460 	.word	0x20001460

08011540 <RegionIN865InitDefaults>:

void RegionIN865InitDefaults( InitDefaultsParams_t* params )
{
 8011540:	b530      	push	{r4, r5, lr}
 8011542:	b087      	sub	sp, #28
#if defined( REGION_IN865 )
    Band_t bands[IN865_MAX_NB_BANDS] =
 8011544:	2301      	movs	r3, #1
 8011546:	f8ad 3000 	strh.w	r3, [sp]
 801154a:	2300      	movs	r3, #0
 801154c:	f88d 3002 	strb.w	r3, [sp, #2]
 8011550:	9301      	str	r3, [sp, #4]
 8011552:	9302      	str	r3, [sp, #8]
 8011554:	9303      	str	r3, [sp, #12]
 8011556:	9304      	str	r3, [sp, #16]
 8011558:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        IN865_BAND0
    };

    switch( params->Type )
 801155c:	7a03      	ldrb	r3, [r0, #8]
 801155e:	2b01      	cmp	r3, #1
 8011560:	d032      	beq.n	80115c8 <RegionIN865InitDefaults+0x88>
 8011562:	2b02      	cmp	r3, #2
 8011564:	d03e      	beq.n	80115e4 <RegionIN865InitDefaults+0xa4>
 8011566:	b10b      	cbz	r3, 801156c <RegionIN865InitDefaults+0x2c>
        {
            break;
        }
    }
#endif /* REGION_IN865 */
}
 8011568:	b007      	add	sp, #28
 801156a:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801156c:	6803      	ldr	r3, [r0, #0]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d0fa      	beq.n	8011568 <RegionIN865InitDefaults+0x28>
 8011572:	6842      	ldr	r2, [r0, #4]
 8011574:	2a00      	cmp	r2, #0
 8011576:	d0f7      	beq.n	8011568 <RegionIN865InitDefaults+0x28>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8011578:	491f      	ldr	r1, [pc, #124]	; (80115f8 <RegionIN865InitDefaults+0xb8>)
 801157a:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801157c:	4c1f      	ldr	r4, [pc, #124]	; (80115fc <RegionIN865InitDefaults+0xbc>)
 801157e:	6022      	str	r2, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * IN865_MAX_NB_BANDS );
 8011580:	2218      	movs	r2, #24
 8011582:	4669      	mov	r1, sp
 8011584:	4618      	mov	r0, r3
 8011586:	f002 ff7e 	bl	8014486 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) IN865_LC1;
 801158a:	6824      	ldr	r4, [r4, #0]
 801158c:	4b1c      	ldr	r3, [pc, #112]	; (8011600 <RegionIN865InitDefaults+0xc0>)
 801158e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011592:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) IN865_LC2;
 8011596:	f104 050c 	add.w	r5, r4, #12
 801159a:	f103 020c 	add.w	r2, r3, #12
 801159e:	ca07      	ldmia	r2, {r0, r1, r2}
 80115a0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) IN865_LC3;
 80115a4:	f104 0518 	add.w	r5, r4, #24
 80115a8:	3318      	adds	r3, #24
 80115aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80115ae:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80115b2:	2307      	movs	r3, #7
 80115b4:	f8a4 348c 	strh.w	r3, [r4, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80115b8:	2201      	movs	r2, #1
 80115ba:	f204 418c 	addw	r1, r4, #1164	; 0x48c
 80115be:	f504 6090 	add.w	r0, r4, #1152	; 0x480
 80115c2:	f7fd ffea 	bl	800f59a <RegionCommonChanMaskCopy>
            break;
 80115c6:	e7cf      	b.n	8011568 <RegionIN865InitDefaults+0x28>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80115c8:	4b0c      	ldr	r3, [pc, #48]	; (80115fc <RegionIN865InitDefaults+0xbc>)
 80115ca:	6818      	ldr	r0, [r3, #0]
 80115cc:	2300      	movs	r3, #0
 80115ce:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80115d0:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 80115d2:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80115d4:	2201      	movs	r2, #1
 80115d6:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 80115da:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 80115de:	f7fd ffdc 	bl	800f59a <RegionCommonChanMaskCopy>
            break;
 80115e2:	e7c1      	b.n	8011568 <RegionIN865InitDefaults+0x28>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 80115e4:	4b05      	ldr	r3, [pc, #20]	; (80115fc <RegionIN865InitDefaults+0xbc>)
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 80115ec:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 80115f0:	430a      	orrs	r2, r1
 80115f2:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 80115f6:	e7b7      	b.n	8011568 <RegionIN865InitDefaults+0x28>
 80115f8:	2000145c 	.word	0x2000145c
 80115fc:	20001460 	.word	0x20001460
 8011600:	08017520 	.word	0x08017520

08011604 <RegionIN865Verify>:

bool RegionIN865Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8011604:	b508      	push	{r3, lr}
#if defined( REGION_IN865 )
    switch( phyAttribute )
 8011606:	290a      	cmp	r1, #10
 8011608:	d83b      	bhi.n	8011682 <RegionIN865Verify+0x7e>
 801160a:	e8df f001 	tbb	[pc, r1]
 801160e:	3a06      	.short	0x3a06
 8011610:	0a3a3a3a 	.word	0x0a3a3a3a
 8011614:	303a2218 	.word	0x303a2218
 8011618:	30          	.byte	0x30
 8011619:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 801161a:	6800      	ldr	r0, [r0, #0]
 801161c:	f7ff fe68 	bl	80112f0 <VerifyRfFreq>
 8011620:	e030      	b.n	8011684 <RegionIN865Verify+0x80>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.Datarate == DR_6 )
 8011622:	f990 0000 	ldrsb.w	r0, [r0]
 8011626:	2806      	cmp	r0, #6
 8011628:	d101      	bne.n	801162e <RegionIN865Verify+0x2a>
            {// DR_6 is not supported by this region
                return false;
 801162a:	2000      	movs	r0, #0
 801162c:	e02a      	b.n	8011684 <RegionIN865Verify+0x80>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE );
 801162e:	2207      	movs	r2, #7
 8011630:	2100      	movs	r1, #0
 8011632:	f7fd ff40 	bl	800f4b6 <RegionCommonValueInRange>
 8011636:	3800      	subs	r0, #0
 8011638:	bf18      	it	ne
 801163a:	2001      	movne	r0, #1
 801163c:	e022      	b.n	8011684 <RegionIN865Verify+0x80>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801163e:	2205      	movs	r2, #5
 8011640:	2100      	movs	r1, #0
 8011642:	f990 0000 	ldrsb.w	r0, [r0]
 8011646:	f7fd ff36 	bl	800f4b6 <RegionCommonValueInRange>
 801164a:	3800      	subs	r0, #0
 801164c:	bf18      	it	ne
 801164e:	2001      	movne	r0, #1
 8011650:	e018      	b.n	8011684 <RegionIN865Verify+0x80>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.Datarate == DR_6 )
 8011652:	f990 0000 	ldrsb.w	r0, [r0]
 8011656:	2806      	cmp	r0, #6
 8011658:	d101      	bne.n	801165e <RegionIN865Verify+0x5a>
            {// DR_6 is not supported by this region
                return false;
 801165a:	2000      	movs	r0, #0
 801165c:	e012      	b.n	8011684 <RegionIN865Verify+0x80>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE );
 801165e:	2207      	movs	r2, #7
 8011660:	2100      	movs	r1, #0
 8011662:	f7fd ff28 	bl	800f4b6 <RegionCommonValueInRange>
 8011666:	3800      	subs	r0, #0
 8011668:	bf18      	it	ne
 801166a:	2001      	movne	r0, #1
 801166c:	e00a      	b.n	8011684 <RegionIN865Verify+0x80>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, IN865_MAX_TX_POWER, IN865_MIN_TX_POWER );
 801166e:	220a      	movs	r2, #10
 8011670:	2100      	movs	r1, #0
 8011672:	f990 0000 	ldrsb.w	r0, [r0]
 8011676:	f7fd ff1e 	bl	800f4b6 <RegionCommonValueInRange>
 801167a:	3800      	subs	r0, #0
 801167c:	bf18      	it	ne
 801167e:	2001      	movne	r0, #1
 8011680:	e000      	b.n	8011684 <RegionIN865Verify+0x80>
{
 8011682:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_IN865 */
}
 8011684:	bd08      	pop	{r3, pc}
	...

08011688 <RegionIN865ChanMaskSet>:
    }
#endif /* REGION_IN865 */
}

bool RegionIN865ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8011688:	b508      	push	{r3, lr}
#if defined( REGION_IN865 )
    switch( chanMaskSet->ChannelsMaskType )
 801168a:	7903      	ldrb	r3, [r0, #4]
 801168c:	b11b      	cbz	r3, 8011696 <RegionIN865ChanMaskSet+0xe>
 801168e:	2b01      	cmp	r3, #1
 8011690:	d00b      	beq.n	80116aa <RegionIN865ChanMaskSet+0x22>
 8011692:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_IN865 */
}
 8011694:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8011696:	4b0a      	ldr	r3, [pc, #40]	; (80116c0 <RegionIN865ChanMaskSet+0x38>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	2201      	movs	r2, #1
 801169c:	6801      	ldr	r1, [r0, #0]
 801169e:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 80116a2:	f7fd ff7a 	bl	800f59a <RegionCommonChanMaskCopy>
    return true;
 80116a6:	2001      	movs	r0, #1
            break;
 80116a8:	e7f4      	b.n	8011694 <RegionIN865ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 80116aa:	4b05      	ldr	r3, [pc, #20]	; (80116c0 <RegionIN865ChanMaskSet+0x38>)
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	2201      	movs	r2, #1
 80116b0:	6801      	ldr	r1, [r0, #0]
 80116b2:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 80116b6:	f7fd ff70 	bl	800f59a <RegionCommonChanMaskCopy>
    return true;
 80116ba:	2001      	movs	r0, #1
            break;
 80116bc:	e7ea      	b.n	8011694 <RegionIN865ChanMaskSet+0xc>
 80116be:	bf00      	nop
 80116c0:	20001460 	.word	0x20001460

080116c4 <RegionIN865ComputeRxWindowParameters>:

void RegionIN865ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80116c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116c6:	b083      	sub	sp, #12
 80116c8:	460e      	mov	r6, r1
 80116ca:	4617      	mov	r7, r2
 80116cc:	461c      	mov	r4, r3
#if defined( REGION_IN865 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, IN865_RX_MAX_DATARATE );
 80116ce:	2807      	cmp	r0, #7
 80116d0:	bfa8      	it	ge
 80116d2:	2007      	movge	r0, #7
 80116d4:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsIN865 );
 80116d6:	4913      	ldr	r1, [pc, #76]	; (8011724 <RegionIN865ComputeRxWindowParameters+0x60>)
 80116d8:	f7fe f9a8 	bl	800fa2c <RegionCommonGetBandwidth>
 80116dc:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80116de:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80116e2:	2b07      	cmp	r3, #7
 80116e4:	d017      	beq.n	8011716 <RegionIN865ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesIN865[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesIN865[rxConfigParams->Datarate], BandwidthsIN865[rxConfigParams->Datarate] );
 80116e6:	4a0f      	ldr	r2, [pc, #60]	; (8011724 <RegionIN865ComputeRxWindowParameters+0x60>)
 80116e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80116ec:	4a0e      	ldr	r2, [pc, #56]	; (8011728 <RegionIN865ComputeRxWindowParameters+0x64>)
 80116ee:	5cd0      	ldrb	r0, [r2, r3]
 80116f0:	f7fe f86c 	bl	800f7cc <RegionCommonComputeSymbolTimeLoRa>
 80116f4:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80116f6:	4b0d      	ldr	r3, [pc, #52]	; (801172c <RegionIN865ComputeRxWindowParameters+0x68>)
 80116f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80116fa:	4798      	blx	r3
 80116fc:	4603      	mov	r3, r0
 80116fe:	f104 020c 	add.w	r2, r4, #12
 8011702:	9201      	str	r2, [sp, #4]
 8011704:	3408      	adds	r4, #8
 8011706:	9400      	str	r4, [sp, #0]
 8011708:	463a      	mov	r2, r7
 801170a:	4631      	mov	r1, r6
 801170c:	4628      	mov	r0, r5
 801170e:	f7fe f86b 	bl	800f7e8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_IN865 */
}
 8011712:	b003      	add	sp, #12
 8011714:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesIN865[rxConfigParams->Datarate] );
 8011716:	4a04      	ldr	r2, [pc, #16]	; (8011728 <RegionIN865ComputeRxWindowParameters+0x64>)
 8011718:	5cd0      	ldrb	r0, [r2, r3]
 801171a:	f7fe f85f 	bl	800f7dc <RegionCommonComputeSymbolTimeFsk>
 801171e:	4605      	mov	r5, r0
 8011720:	e7e9      	b.n	80116f6 <RegionIN865ComputeRxWindowParameters+0x32>
 8011722:	bf00      	nop
 8011724:	08017d24 	.word	0x08017d24
 8011728:	08017d44 	.word	0x08017d44
 801172c:	08018318 	.word	0x08018318

08011730 <RegionIN865RxConfig>:

bool RegionIN865RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8011730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011734:	b08a      	sub	sp, #40	; 0x28
 8011736:	4604      	mov	r4, r0
 8011738:	460f      	mov	r7, r1
#if defined( REGION_IN865 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801173a:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 801173e:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 8011742:	4b37      	ldr	r3, [pc, #220]	; (8011820 <RegionIN865RxConfig+0xf0>)
 8011744:	685b      	ldr	r3, [r3, #4]
 8011746:	4798      	blx	r3
 8011748:	2800      	cmp	r0, #0
 801174a:	d167      	bne.n	801181c <RegionIN865RxConfig+0xec>
 801174c:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801174e:	7ce3      	ldrb	r3, [r4, #19]
 8011750:	b983      	cbnz	r3, 8011774 <RegionIN865RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8011752:	4b34      	ldr	r3, [pc, #208]	; (8011824 <RegionIN865RxConfig+0xf4>)
 8011754:	681a      	ldr	r2, [r3, #0]
 8011756:	7823      	ldrb	r3, [r4, #0]
 8011758:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 801175c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8011760:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011764:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011768:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801176c:	f1b8 0f00 	cmp.w	r8, #0
 8011770:	d100      	bne.n	8011774 <RegionIN865RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8011772:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesIN865[dr];
 8011774:	4b2c      	ldr	r3, [pc, #176]	; (8011828 <RegionIN865RxConfig+0xf8>)
 8011776:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 801177a:	4b29      	ldr	r3, [pc, #164]	; (8011820 <RegionIN865RxConfig+0xf0>)
 801177c:	68db      	ldr	r3, [r3, #12]
 801177e:	4640      	mov	r0, r8
 8011780:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8011782:	2d07      	cmp	r5, #7
 8011784:	d02b      	beq.n	80117de <RegionIN865RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8011786:	4b26      	ldr	r3, [pc, #152]	; (8011820 <RegionIN865RxConfig+0xf0>)
 8011788:	f8d3 a018 	ldr.w	sl, [r3, #24]
 801178c:	7ca3      	ldrb	r3, [r4, #18]
 801178e:	9309      	str	r3, [sp, #36]	; 0x24
 8011790:	2601      	movs	r6, #1
 8011792:	9608      	str	r6, [sp, #32]
 8011794:	2300      	movs	r3, #0
 8011796:	9307      	str	r3, [sp, #28]
 8011798:	9306      	str	r3, [sp, #24]
 801179a:	9305      	str	r3, [sp, #20]
 801179c:	9304      	str	r3, [sp, #16]
 801179e:	9303      	str	r3, [sp, #12]
 80117a0:	8922      	ldrh	r2, [r4, #8]
 80117a2:	9202      	str	r2, [sp, #8]
 80117a4:	2208      	movs	r2, #8
 80117a6:	9201      	str	r2, [sp, #4]
 80117a8:	9300      	str	r3, [sp, #0]
 80117aa:	4633      	mov	r3, r6
 80117ac:	464a      	mov	r2, r9
 80117ae:	78a1      	ldrb	r1, [r4, #2]
 80117b0:	4630      	mov	r0, r6
 80117b2:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 80117b4:	7c63      	ldrb	r3, [r4, #17]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d02d      	beq.n	8011816 <RegionIN865RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterIN865[dr];
 80117ba:	4b1c      	ldr	r3, [pc, #112]	; (801182c <RegionIN865RxConfig+0xfc>)
 80117bc:	5d59      	ldrb	r1, [r3, r5]
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateIN865[dr];
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80117be:	4b18      	ldr	r3, [pc, #96]	; (8011820 <RegionIN865RxConfig+0xf0>)
 80117c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117c2:	310d      	adds	r1, #13
 80117c4:	b2c9      	uxtb	r1, r1
 80117c6:	4630      	mov	r0, r6
 80117c8:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80117ca:	462a      	mov	r2, r5
 80117cc:	4641      	mov	r1, r8
 80117ce:	7ce0      	ldrb	r0, [r4, #19]
 80117d0:	f7fe f93e 	bl	800fa50 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 80117d4:	703d      	strb	r5, [r7, #0]
    return true;
 80117d6:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_IN865 */
}
 80117d8:	b00a      	add	sp, #40	; 0x28
 80117da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80117de:	4b10      	ldr	r3, [pc, #64]	; (8011820 <RegionIN865RxConfig+0xf0>)
 80117e0:	f8d3 a018 	ldr.w	sl, [r3, #24]
 80117e4:	7ca3      	ldrb	r3, [r4, #18]
 80117e6:	9309      	str	r3, [sp, #36]	; 0x24
 80117e8:	2000      	movs	r0, #0
 80117ea:	9008      	str	r0, [sp, #32]
 80117ec:	9007      	str	r0, [sp, #28]
 80117ee:	9006      	str	r0, [sp, #24]
 80117f0:	2301      	movs	r3, #1
 80117f2:	9305      	str	r3, [sp, #20]
 80117f4:	9004      	str	r0, [sp, #16]
 80117f6:	9003      	str	r0, [sp, #12]
 80117f8:	8923      	ldrh	r3, [r4, #8]
 80117fa:	9302      	str	r3, [sp, #8]
 80117fc:	2305      	movs	r3, #5
 80117fe:	9301      	str	r3, [sp, #4]
 8011800:	4b0b      	ldr	r3, [pc, #44]	; (8011830 <RegionIN865RxConfig+0x100>)
 8011802:	9300      	str	r3, [sp, #0]
 8011804:	4603      	mov	r3, r0
 8011806:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801180a:	fb02 f209 	mul.w	r2, r2, r9
 801180e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8011812:	47d0      	blx	sl
 8011814:	e7ce      	b.n	80117b4 <RegionIN865RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateIN865[dr];
 8011816:	4b07      	ldr	r3, [pc, #28]	; (8011834 <RegionIN865RxConfig+0x104>)
 8011818:	5d59      	ldrb	r1, [r3, r5]
 801181a:	e7d0      	b.n	80117be <RegionIN865RxConfig+0x8e>
        return false;
 801181c:	2000      	movs	r0, #0
 801181e:	e7db      	b.n	80117d8 <RegionIN865RxConfig+0xa8>
 8011820:	08018318 	.word	0x08018318
 8011824:	20001460 	.word	0x20001460
 8011828:	08017d44 	.word	0x08017d44
 801182c:	08017d5c 	.word	0x08017d5c
 8011830:	00014585 	.word	0x00014585
 8011834:	08017d54 	.word	0x08017d54

08011838 <RegionIN865TxConfig>:

bool RegionIN865TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8011838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801183c:	b08d      	sub	sp, #52	; 0x34
 801183e:	4604      	mov	r4, r0
 8011840:	460f      	mov	r7, r1
 8011842:	4690      	mov	r8, r2
#if defined( REGION_IN865 )
    RadioModems_t modem;
    int8_t phyDr = DataratesIN865[txConfig->Datarate];
 8011844:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011848:	4a42      	ldr	r2, [pc, #264]	; (8011954 <RegionIN865TxConfig+0x11c>)
 801184a:	f912 a003 	ldrsb.w	sl, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801184e:	4b42      	ldr	r3, [pc, #264]	; (8011958 <RegionIN865TxConfig+0x120>)
 8011850:	6819      	ldr	r1, [r3, #0]
 8011852:	4d42      	ldr	r5, [pc, #264]	; (801195c <RegionIN865TxConfig+0x124>)
 8011854:	682b      	ldr	r3, [r5, #0]
 8011856:	7802      	ldrb	r2, [r0, #0]
 8011858:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801185c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8011860:	7a53      	ldrb	r3, [r2, #9]
 8011862:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011866:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801186a:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801186e:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8011872:	f7fe f8d6 	bl	800fa22 <RegionCommonLimitTxPower>
 8011876:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsIN865 );
 8011878:	4939      	ldr	r1, [pc, #228]	; (8011960 <RegionIN865TxConfig+0x128>)
 801187a:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801187e:	f7fe f8d5 	bl	800fa2c <RegionCommonGetBandwidth>
 8011882:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8011884:	68a2      	ldr	r2, [r4, #8]
 8011886:	6861      	ldr	r1, [r4, #4]
 8011888:	4630      	mov	r0, r6
 801188a:	f7fd ffe7 	bl	800f85c <RegionCommonComputeTxPower>
 801188e:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8011890:	4b34      	ldr	r3, [pc, #208]	; (8011964 <RegionIN865TxConfig+0x12c>)
 8011892:	68da      	ldr	r2, [r3, #12]
 8011894:	6829      	ldr	r1, [r5, #0]
 8011896:	7823      	ldrb	r3, [r4, #0]
 8011898:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801189c:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80118a0:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80118a2:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80118a6:	2b07      	cmp	r3, #7
 80118a8:	d031      	beq.n	801190e <RegionIN865TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80118aa:	4b2e      	ldr	r3, [pc, #184]	; (8011964 <RegionIN865TxConfig+0x12c>)
 80118ac:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 80118b0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80118b4:	9308      	str	r3, [sp, #32]
 80118b6:	2200      	movs	r2, #0
 80118b8:	9207      	str	r2, [sp, #28]
 80118ba:	9206      	str	r2, [sp, #24]
 80118bc:	9205      	str	r2, [sp, #20]
 80118be:	2501      	movs	r5, #1
 80118c0:	9504      	str	r5, [sp, #16]
 80118c2:	9203      	str	r2, [sp, #12]
 80118c4:	2308      	movs	r3, #8
 80118c6:	9302      	str	r3, [sp, #8]
 80118c8:	9501      	str	r5, [sp, #4]
 80118ca:	f8cd a000 	str.w	sl, [sp]
 80118ce:	464b      	mov	r3, r9
 80118d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80118d2:	4628      	mov	r0, r5
 80118d4:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80118d6:	4b21      	ldr	r3, [pc, #132]	; (801195c <RegionIN865TxConfig+0x124>)
 80118d8:	681a      	ldr	r2, [r3, #0]
 80118da:	7823      	ldrb	r3, [r4, #0]
 80118dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80118e0:	f994 1001 	ldrsb.w	r1, [r4, #1]
 80118e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80118e8:	f7fe f8e2 	bl	800fab0 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80118ec:	89a1      	ldrh	r1, [r4, #12]
 80118ee:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80118f2:	f7ff fd11 	bl	8011318 <GetTimeOnAir>
 80118f6:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80118fa:	4b1a      	ldr	r3, [pc, #104]	; (8011964 <RegionIN865TxConfig+0x12c>)
 80118fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118fe:	7b21      	ldrb	r1, [r4, #12]
 8011900:	4628      	mov	r0, r5
 8011902:	4798      	blx	r3

    *txPower = txPowerLimited;
 8011904:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_IN865 */
}
 8011906:	2001      	movs	r0, #1
 8011908:	b00d      	add	sp, #52	; 0x34
 801190a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801190e:	4b15      	ldr	r3, [pc, #84]	; (8011964 <RegionIN865TxConfig+0x12c>)
 8011910:	69dd      	ldr	r5, [r3, #28]
 8011912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011916:	fb03 f30a 	mul.w	r3, r3, sl
 801191a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801191e:	9208      	str	r2, [sp, #32]
 8011920:	f04f 0b00 	mov.w	fp, #0
 8011924:	f8cd b01c 	str.w	fp, [sp, #28]
 8011928:	f8cd b018 	str.w	fp, [sp, #24]
 801192c:	f8cd b014 	str.w	fp, [sp, #20]
 8011930:	2201      	movs	r2, #1
 8011932:	9204      	str	r2, [sp, #16]
 8011934:	f8cd b00c 	str.w	fp, [sp, #12]
 8011938:	2205      	movs	r2, #5
 801193a:	9202      	str	r2, [sp, #8]
 801193c:	f8cd b004 	str.w	fp, [sp, #4]
 8011940:	9300      	str	r3, [sp, #0]
 8011942:	464b      	mov	r3, r9
 8011944:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8011948:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801194a:	4658      	mov	r0, fp
 801194c:	47a8      	blx	r5
        modem = MODEM_FSK;
 801194e:	465d      	mov	r5, fp
 8011950:	e7c1      	b.n	80118d6 <RegionIN865TxConfig+0x9e>
 8011952:	bf00      	nop
 8011954:	08017d44 	.word	0x08017d44
 8011958:	2000145c 	.word	0x2000145c
 801195c:	20001460 	.word	0x20001460
 8011960:	08017d24 	.word	0x08017d24
 8011964:	08018318 	.word	0x08018318

08011968 <RegionIN865LinkAdrReq>:

uint8_t RegionIN865LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8011968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801196c:	b08f      	sub	sp, #60	; 0x3c
 801196e:	4607      	mov	r7, r0
 8011970:	468b      	mov	fp, r1
 8011972:	4692      	mov	sl, r2
 8011974:	4699      	mov	r9, r3
    uint8_t status = 0x07;
#if defined( REGION_IN865 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8011976:	2500      	movs	r5, #0
 8011978:	950c      	str	r5, [sp, #48]	; 0x30
 801197a:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 801197e:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 8011982:	f04f 0807 	mov.w	r8, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8011986:	e02d      	b.n	80119e4 <RegionIN865LinkAdrReq+0x7c>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 8011988:	2400      	movs	r4, #0
        status = 0x07;
 801198a:	f04f 0807 	mov.w	r8, #7
 801198e:	e00f      	b.n	80119b0 <RegionIN865LinkAdrReq+0x48>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8011990:	4a5a      	ldr	r2, [pc, #360]	; (8011afc <RegionIN865LinkAdrReq+0x194>)
 8011992:	6812      	ldr	r2, [r2, #0]
 8011994:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8011998:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801199c:	b132      	cbz	r2, 80119ac <RegionIN865LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 801199e:	2201      	movs	r2, #1
 80119a0:	40a2      	lsls	r2, r4
 80119a2:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80119a6:	430a      	orrs	r2, r1
 80119a8:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 80119ac:	3401      	adds	r4, #1
 80119ae:	b2e4      	uxtb	r4, r4
 80119b0:	2c0f      	cmp	r4, #15
 80119b2:	d817      	bhi.n	80119e4 <RegionIN865LinkAdrReq+0x7c>
                if( linkAdrParams.ChMaskCtrl == 6 )
 80119b4:	2b06      	cmp	r3, #6
 80119b6:	d0eb      	beq.n	8011990 <RegionIN865LinkAdrReq+0x28>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80119b8:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 80119bc:	4126      	asrs	r6, r4
 80119be:	f016 0f01 	tst.w	r6, #1
 80119c2:	d0f3      	beq.n	80119ac <RegionIN865LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80119c4:	4a4d      	ldr	r2, [pc, #308]	; (8011afc <RegionIN865LinkAdrReq+0x194>)
 80119c6:	6812      	ldr	r2, [r2, #0]
 80119c8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80119cc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80119d0:	2a00      	cmp	r2, #0
 80119d2:	d1eb      	bne.n	80119ac <RegionIN865LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80119d4:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
 80119d8:	e7e8      	b.n	80119ac <RegionIN865LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 80119da:	f04f 0806 	mov.w	r8, #6
 80119de:	e001      	b.n	80119e4 <RegionIN865LinkAdrReq+0x7c>
            status &= 0xFE; // Channel mask KO
 80119e0:	f04f 0806 	mov.w	r8, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80119e4:	7a3b      	ldrb	r3, [r7, #8]
 80119e6:	42ab      	cmp	r3, r5
 80119e8:	d919      	bls.n	8011a1e <RegionIN865LinkAdrReq+0xb6>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	a90c      	add	r1, sp, #48	; 0x30
 80119ee:	4428      	add	r0, r5
 80119f0:	f7fd fe84 	bl	800f6fc <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 80119f4:	b198      	cbz	r0, 8011a1e <RegionIN865LinkAdrReq+0xb6>
        bytesProcessed += nextIndex;
 80119f6:	4405      	add	r5, r0
 80119f8:	b2ed      	uxtb	r5, r5
        chMask = linkAdrParams.ChMask;
 80119fa:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80119fe:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8011a02:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8011a06:	b90b      	cbnz	r3, 8011a0c <RegionIN865LinkAdrReq+0xa4>
 8011a08:	2a00      	cmp	r2, #0
 8011a0a:	d0e6      	beq.n	80119da <RegionIN865LinkAdrReq+0x72>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8011a0c:	1e5a      	subs	r2, r3, #1
 8011a0e:	b2d2      	uxtb	r2, r2
 8011a10:	2a04      	cmp	r2, #4
 8011a12:	d9e5      	bls.n	80119e0 <RegionIN865LinkAdrReq+0x78>
 8011a14:	2b06      	cmp	r3, #6
 8011a16:	d9b7      	bls.n	8011988 <RegionIN865LinkAdrReq+0x20>
            status &= 0xFE; // Channel mask KO
 8011a18:	f04f 0806 	mov.w	r8, #6
 8011a1c:	e7e2      	b.n	80119e4 <RegionIN865LinkAdrReq+0x7c>
                }
            }
        }
    }

    if( linkAdrParams.Datarate != DR_6 )
 8011a1e:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8011a22:	2b06      	cmp	r3, #6
 8011a24:	d116      	bne.n	8011a54 <RegionIN865LinkAdrReq+0xec>
        // Verify the parameters and update, if necessary
        status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
    }
    else
    {// DR_6 is not supported by this region
        status &= 0xFD; // Datarate KO
 8011a26:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
    }

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8011a2a:	f1b8 0f07 	cmp.w	r8, #7
 8011a2e:	d057      	beq.n	8011ae0 <RegionIN865LinkAdrReq+0x178>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8011a30:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8011a34:	f88b 3000 	strb.w	r3, [fp]
    *txPowOut = linkAdrParams.TxPower;
 8011a38:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 8011a3c:	f88a 3000 	strb.w	r3, [sl]
    *nbRepOut = linkAdrParams.NbRep;
 8011a40:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8011a44:	f889 3000 	strb.w	r3, [r9]
    *nbBytesParsed = bytesProcessed;
 8011a48:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011a4a:	701d      	strb	r5, [r3, #0]

#endif /* REGION_IN865 */
    return status;
}
 8011a4c:	4640      	mov	r0, r8
 8011a4e:	b00f      	add	sp, #60	; 0x3c
 8011a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        getPhy.Attribute = PHY_MIN_TX_DR;
 8011a54:	2302      	movs	r3, #2
 8011a56:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8011a5a:	7a7b      	ldrb	r3, [r7, #9]
 8011a5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        phyParam = RegionIN865GetPhyParam( &getPhy );
 8011a60:	a80a      	add	r0, sp, #40	; 0x28
 8011a62:	f7ff fc8b 	bl	801137c <RegionIN865GetPhyParam>
        linkAdrVerifyParams.Status = status;
 8011a66:	f88d 8008 	strb.w	r8, [sp, #8]
        linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8011a6a:	7abb      	ldrb	r3, [r7, #10]
 8011a6c:	f88d 3009 	strb.w	r3, [sp, #9]
        linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8011a70:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8011a74:	f88d 300a 	strb.w	r3, [sp, #10]
        linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8011a78:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 8011a7c:	f88d 300b 	strb.w	r3, [sp, #11]
        linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8011a80:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8011a84:	f88d 300c 	strb.w	r3, [sp, #12]
        linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8011a88:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011a8c:	f88d 300d 	strb.w	r3, [sp, #13]
        linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8011a90:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8011a94:	f88d 300e 	strb.w	r3, [sp, #14]
        linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8011a98:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8011a9c:	f88d 300f 	strb.w	r3, [sp, #15]
        linkAdrVerifyParams.NbChannels = IN865_MAX_NB_CHANNELS;
 8011aa0:	2310      	movs	r3, #16
 8011aa2:	f88d 3010 	strb.w	r3, [sp, #16]
        linkAdrVerifyParams.ChannelsMask = &chMask;
 8011aa6:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8011aaa:	9305      	str	r3, [sp, #20]
        linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8011aac:	f88d 0018 	strb.w	r0, [sp, #24]
        linkAdrVerifyParams.MaxDatarate = IN865_TX_MAX_DATARATE;
 8011ab0:	2307      	movs	r3, #7
 8011ab2:	f88d 3019 	strb.w	r3, [sp, #25]
        linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8011ab6:	4b11      	ldr	r3, [pc, #68]	; (8011afc <RegionIN865LinkAdrReq+0x194>)
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	9307      	str	r3, [sp, #28]
        linkAdrVerifyParams.MinTxPower = IN865_MIN_TX_POWER;
 8011abc:	230a      	movs	r3, #10
 8011abe:	f88d 3020 	strb.w	r3, [sp, #32]
        linkAdrVerifyParams.MaxTxPower = IN865_MAX_TX_POWER;
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        linkAdrVerifyParams.Version = linkAdrReq->Version;
 8011ac8:	683b      	ldr	r3, [r7, #0]
 8011aca:	9301      	str	r3, [sp, #4]
        status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8011acc:	ab0c      	add	r3, sp, #48	; 0x30
 8011ace:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8011ad2:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 8011ad6:	a801      	add	r0, sp, #4
 8011ad8:	f7fd fe2c 	bl	800f734 <RegionCommonLinkAdrReqVerifyParams>
 8011adc:	4680      	mov	r8, r0
 8011ade:	e7a4      	b.n	8011a2a <RegionIN865LinkAdrReq+0xc2>
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8011ae0:	4c06      	ldr	r4, [pc, #24]	; (8011afc <RegionIN865LinkAdrReq+0x194>)
 8011ae2:	6820      	ldr	r0, [r4, #0]
 8011ae4:	220c      	movs	r2, #12
 8011ae6:	2100      	movs	r1, #0
 8011ae8:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8011aec:	f002 fce1 	bl	80144b2 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8011af0:	6823      	ldr	r3, [r4, #0]
 8011af2:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8011af6:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
 8011afa:	e799      	b.n	8011a30 <RegionIN865LinkAdrReq+0xc8>
 8011afc:	20001460 	.word	0x20001460

08011b00 <RegionIN865RxParamSetupReq>:

uint8_t RegionIN865RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8011b00:	b538      	push	{r3, r4, r5, lr}
 8011b02:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_IN865 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8011b04:	6840      	ldr	r0, [r0, #4]
 8011b06:	f7ff fbf3 	bl	80112f0 <VerifyRfFreq>
 8011b0a:	b1c0      	cbz	r0, 8011b3e <RegionIN865RxParamSetupReq+0x3e>
    uint8_t status = 0x07;
 8011b0c:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE ) == false ) ||
 8011b0e:	2207      	movs	r2, #7
 8011b10:	2100      	movs	r1, #0
 8011b12:	f994 0000 	ldrsb.w	r0, [r4]
 8011b16:	f7fd fcce 	bl	800f4b6 <RegionCommonValueInRange>
 8011b1a:	b118      	cbz	r0, 8011b24 <RegionIN865RxParamSetupReq+0x24>
        // DR_6 is not supported by this region
        ( rxParamSetupReq->Datarate == DR_6 ) )
 8011b1c:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE ) == false ) ||
 8011b20:	2b06      	cmp	r3, #6
 8011b22:	d101      	bne.n	8011b28 <RegionIN865RxParamSetupReq+0x28>
    {
        status &= 0xFD; // Datarate KO
 8011b24:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, IN865_MIN_RX1_DR_OFFSET, IN865_MAX_RX1_DR_OFFSET ) == false )
 8011b28:	2207      	movs	r2, #7
 8011b2a:	2100      	movs	r1, #0
 8011b2c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8011b30:	f7fd fcc1 	bl	800f4b6 <RegionCommonValueInRange>
 8011b34:	b908      	cbnz	r0, 8011b3a <RegionIN865RxParamSetupReq+0x3a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8011b36:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_IN865 */
    return status;
}
 8011b3a:	4628      	mov	r0, r5
 8011b3c:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 8011b3e:	2506      	movs	r5, #6
 8011b40:	e7e5      	b.n	8011b0e <RegionIN865RxParamSetupReq+0xe>

08011b42 <RegionIN865TxParamSetupReq>:

int8_t RegionIN865TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 8011b42:	f04f 30ff 	mov.w	r0, #4294967295
 8011b46:	4770      	bx	lr

08011b48 <RegionIN865DlChannelReq>:

int8_t RegionIN865DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8011b48:	b510      	push	{r4, lr}
 8011b4a:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_IN865 )

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8011b4c:	6840      	ldr	r0, [r0, #4]
 8011b4e:	f7ff fbcf 	bl	80112f0 <VerifyRfFreq>
 8011b52:	b170      	cbz	r0, 8011b72 <RegionIN865DlChannelReq+0x2a>
    uint8_t status = 0x03;
 8011b54:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8011b56:	4b0b      	ldr	r3, [pc, #44]	; (8011b84 <RegionIN865DlChannelReq+0x3c>)
 8011b58:	681a      	ldr	r2, [r3, #0]
 8011b5a:	7823      	ldrb	r3, [r4, #0]
 8011b5c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8011b60:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8011b64:	b909      	cbnz	r1, 8011b6a <RegionIN865DlChannelReq+0x22>
    {
        status &= 0xFD;
 8011b66:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8011b6a:	2803      	cmp	r0, #3
 8011b6c:	d003      	beq.n	8011b76 <RegionIN865DlChannelReq+0x2e>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_IN865 */
    return status;
}
 8011b6e:	b240      	sxtb	r0, r0
 8011b70:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 8011b72:	2002      	movs	r0, #2
 8011b74:	e7ef      	b.n	8011b56 <RegionIN865DlChannelReq+0xe>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8011b76:	6861      	ldr	r1, [r4, #4]
 8011b78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011b7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011b80:	6059      	str	r1, [r3, #4]
 8011b82:	e7f4      	b.n	8011b6e <RegionIN865DlChannelReq+0x26>
 8011b84:	20001460 	.word	0x20001460

08011b88 <RegionIN865AlternateDr>:
#if defined( REGION_IN865 )
    return currentDr;
#else
    return -1;
#endif /* REGION_IN865 */
}
 8011b88:	4770      	bx	lr
	...

08011b8c <RegionIN865NextChannel>:

LoRaMacStatus_t RegionIN865NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8011b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b8e:	b097      	sub	sp, #92	; 0x5c
 8011b90:	4604      	mov	r4, r0
 8011b92:	460f      	mov	r7, r1
 8011b94:	4616      	mov	r6, r2
 8011b96:	461d      	mov	r5, r3
#if defined( REGION_IN865 )
    uint8_t nbEnabledChannels = 0;
 8011b98:	2100      	movs	r1, #0
 8011b9a:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 8011b9e:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[IN865_MAX_NB_CHANNELS] = { 0 };
 8011ba2:	9111      	str	r1, [sp, #68]	; 0x44
 8011ba4:	9112      	str	r1, [sp, #72]	; 0x48
 8011ba6:	9113      	str	r1, [sp, #76]	; 0x4c
 8011ba8:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = IN865_JOIN_CHANNELS;
 8011baa:	2307      	movs	r3, #7
 8011bac:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8011bb0:	4b32      	ldr	r3, [pc, #200]	; (8011c7c <RegionIN865NextChannel+0xf0>)
 8011bb2:	6818      	ldr	r0, [r3, #0]
 8011bb4:	2201      	movs	r2, #1
 8011bb6:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8011bba:	f7fd fcd8 	bl	800f56e <RegionCommonCountChannels>
 8011bbe:	b938      	cbnz	r0, 8011bd0 <RegionIN865NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8011bc0:	4b2e      	ldr	r3, [pc, #184]	; (8011c7c <RegionIN865NextChannel+0xf0>)
 8011bc2:	681a      	ldr	r2, [r3, #0]
 8011bc4:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 8011bc8:	f043 0307 	orr.w	r3, r3, #7
 8011bcc:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8011bd0:	7a63      	ldrb	r3, [r4, #9]
 8011bd2:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8011bd6:	7a23      	ldrb	r3, [r4, #8]
 8011bd8:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8011bdc:	4b27      	ldr	r3, [pc, #156]	; (8011c7c <RegionIN865NextChannel+0xf0>)
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	f503 6290 	add.w	r2, r3, #1152	; 0x480
 8011be4:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8011be6:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8011be8:	4b25      	ldr	r3, [pc, #148]	; (8011c80 <RegionIN865NextChannel+0xf4>)
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = IN865_MAX_NB_CHANNELS;
 8011bee:	2310      	movs	r3, #16
 8011bf0:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 8011bf4:	f10d 030a 	add.w	r3, sp, #10
 8011bf8:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8011bfa:	6823      	ldr	r3, [r4, #0]
 8011bfc:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8011bfe:	6863      	ldr	r3, [r4, #4]
 8011c00:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8011c02:	7aa3      	ldrb	r3, [r4, #10]
 8011c04:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = IN865_MAX_NB_BANDS;
 8011c08:	2301      	movs	r3, #1
 8011c0a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8011c0e:	ab0c      	add	r3, sp, #48	; 0x30
 8011c10:	6921      	ldr	r1, [r4, #16]
 8011c12:	68e0      	ldr	r0, [r4, #12]
 8011c14:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8011c18:	7d23      	ldrb	r3, [r4, #20]
 8011c1a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8011c1e:	8ae1      	ldrh	r1, [r4, #22]
 8011c20:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8011c24:	f7ff fb78 	bl	8011318 <GetTimeOnAir>
 8011c28:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8011c2a:	ab03      	add	r3, sp, #12
 8011c2c:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8011c2e:	9601      	str	r6, [sp, #4]
 8011c30:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 8011c34:	9300      	str	r3, [sp, #0]
 8011c36:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 8011c3a:	aa11      	add	r2, sp, #68	; 0x44
 8011c3c:	4629      	mov	r1, r5
 8011c3e:	a809      	add	r0, sp, #36	; 0x24
 8011c40:	f7fd fe88 	bl	800f954 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8011c44:	4604      	mov	r4, r0
 8011c46:	b120      	cbz	r0, 8011c52 <RegionIN865NextChannel+0xc6>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8011c48:	280c      	cmp	r0, #12
 8011c4a:	d00d      	beq.n	8011c68 <RegionIN865NextChannel+0xdc>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_IN865 */
}
 8011c4c:	4620      	mov	r0, r4
 8011c4e:	b017      	add	sp, #92	; 0x5c
 8011c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8011c52:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 8011c56:	3901      	subs	r1, #1
 8011c58:	f002 fc08 	bl	801446c <randr>
 8011c5c:	ab16      	add	r3, sp, #88	; 0x58
 8011c5e:	4418      	add	r0, r3
 8011c60:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 8011c64:	703b      	strb	r3, [r7, #0]
 8011c66:	e7f1      	b.n	8011c4c <RegionIN865NextChannel+0xc0>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8011c68:	4b04      	ldr	r3, [pc, #16]	; (8011c7c <RegionIN865NextChannel+0xf0>)
 8011c6a:	681a      	ldr	r2, [r3, #0]
 8011c6c:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 8011c70:	f043 0307 	orr.w	r3, r3, #7
 8011c74:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
 8011c78:	e7e8      	b.n	8011c4c <RegionIN865NextChannel+0xc0>
 8011c7a:	bf00      	nop
 8011c7c:	20001460 	.word	0x20001460
 8011c80:	2000145c 	.word	0x2000145c

08011c84 <RegionIN865ChannelAdd>:

LoRaMacStatus_t RegionIN865ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8011c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined( REGION_IN865 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 8011c86:	7905      	ldrb	r5, [r0, #4]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 8011c88:	2d02      	cmp	r5, #2
 8011c8a:	d94b      	bls.n	8011d24 <RegionIN865ChannelAdd+0xa0>
 8011c8c:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= IN865_MAX_NB_CHANNELS )
 8011c8e:	2d0f      	cmp	r5, #15
 8011c90:	d84a      	bhi.n	8011d28 <RegionIN865ChannelAdd+0xa4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 8011c92:	6803      	ldr	r3, [r0, #0]
 8011c94:	7a18      	ldrb	r0, [r3, #8]
 8011c96:	f340 0003 	sbfx	r0, r0, #0, #4
 8011c9a:	2207      	movs	r2, #7
 8011c9c:	2100      	movs	r1, #0
 8011c9e:	b240      	sxtb	r0, r0
 8011ca0:	f7fd fc09 	bl	800f4b6 <RegionCommonValueInRange>
 8011ca4:	2800      	cmp	r0, #0
 8011ca6:	d039      	beq.n	8011d1c <RegionIN865ChannelAdd+0x98>
    bool drInvalid = false;
 8011ca8:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 8011caa:	6823      	ldr	r3, [r4, #0]
 8011cac:	7a18      	ldrb	r0, [r3, #8]
 8011cae:	f340 1003 	sbfx	r0, r0, #4, #4
 8011cb2:	2207      	movs	r2, #7
 8011cb4:	2100      	movs	r1, #0
 8011cb6:	b240      	sxtb	r0, r0
 8011cb8:	f7fd fbfd 	bl	800f4b6 <RegionCommonValueInRange>
 8011cbc:	b900      	cbnz	r0, 8011cc0 <RegionIN865ChannelAdd+0x3c>
    {
        drInvalid = true;
 8011cbe:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8011cc0:	6821      	ldr	r1, [r4, #0]
 8011cc2:	7a0b      	ldrb	r3, [r1, #8]
 8011cc4:	f343 0203 	sbfx	r2, r3, #0, #4
 8011cc8:	b252      	sxtb	r2, r2
 8011cca:	f343 1303 	sbfx	r3, r3, #4, #4
 8011cce:	b25b      	sxtb	r3, r3
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	dd00      	ble.n	8011cd6 <RegionIN865ChannelAdd+0x52>
    {
        drInvalid = true;
 8011cd4:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8011cd6:	6808      	ldr	r0, [r1, #0]
 8011cd8:	f7ff fb0a 	bl	80112f0 <VerifyRfFreq>
 8011cdc:	b300      	cbz	r0, 8011d20 <RegionIN865ChannelAdd+0x9c>
    bool freqInvalid = false;
 8011cde:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8011ce0:	b106      	cbz	r6, 8011ce4 <RegionIN865ChannelAdd+0x60>
 8011ce2:	bb1b      	cbnz	r3, 8011d2c <RegionIN865ChannelAdd+0xa8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 8011ce4:	bb26      	cbnz	r6, 8011d30 <RegionIN865ChannelAdd+0xac>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 8011ce6:	bb2b      	cbnz	r3, 8011d34 <RegionIN865ChannelAdd+0xb0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8011ce8:	4f13      	ldr	r7, [pc, #76]	; (8011d38 <RegionIN865ChannelAdd+0xb4>)
 8011cea:	683b      	ldr	r3, [r7, #0]
 8011cec:	006e      	lsls	r6, r5, #1
 8011cee:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8011cf2:	220c      	movs	r2, #12
 8011cf4:	6821      	ldr	r1, [r4, #0]
 8011cf6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011cfa:	f002 fbc4 	bl	8014486 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 8011cfe:	683a      	ldr	r2, [r7, #0]
 8011d00:	442e      	add	r6, r5
 8011d02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011d06:	2000      	movs	r0, #0
 8011d08:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8011d0a:	2301      	movs	r3, #1
 8011d0c:	fa03 f505 	lsl.w	r5, r3, r5
 8011d10:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 8011d14:	431d      	orrs	r5, r3
 8011d16:	f8a2 5480 	strh.w	r5, [r2, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 8011d1a:	e006      	b.n	8011d2a <RegionIN865ChannelAdd+0xa6>
        drInvalid = true;
 8011d1c:	2601      	movs	r6, #1
 8011d1e:	e7c4      	b.n	8011caa <RegionIN865ChannelAdd+0x26>
            freqInvalid = true;
 8011d20:	2301      	movs	r3, #1
 8011d22:	e7dd      	b.n	8011ce0 <RegionIN865ChannelAdd+0x5c>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8011d24:	2006      	movs	r0, #6
 8011d26:	e000      	b.n	8011d2a <RegionIN865ChannelAdd+0xa6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011d28:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_IN865 */
}
 8011d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8011d2c:	2006      	movs	r0, #6
 8011d2e:	e7fc      	b.n	8011d2a <RegionIN865ChannelAdd+0xa6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 8011d30:	2005      	movs	r0, #5
 8011d32:	e7fa      	b.n	8011d2a <RegionIN865ChannelAdd+0xa6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8011d34:	2004      	movs	r0, #4
 8011d36:	e7f8      	b.n	8011d2a <RegionIN865ChannelAdd+0xa6>
 8011d38:	20001460 	.word	0x20001460

08011d3c <RegionIN865ChannelsRemove>:

bool RegionIN865ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_IN865 )
    uint8_t id = channelRemove->ChannelId;
 8011d3c:	7801      	ldrb	r1, [r0, #0]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 8011d3e:	2902      	cmp	r1, #2
 8011d40:	d801      	bhi.n	8011d46 <RegionIN865ChannelsRemove+0xa>
    {
        return false;
 8011d42:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, IN865_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_IN865 */
}
 8011d44:	4770      	bx	lr
{
 8011d46:	b510      	push	{r4, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8011d48:	4b08      	ldr	r3, [pc, #32]	; (8011d6c <RegionIN865ChannelsRemove+0x30>)
 8011d4a:	6818      	ldr	r0, [r3, #0]
 8011d4c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8011d50:	009c      	lsls	r4, r3, #2
 8011d52:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8011d56:	2200      	movs	r2, #0
 8011d58:	5102      	str	r2, [r0, r4]
 8011d5a:	605a      	str	r2, [r3, #4]
 8011d5c:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, IN865_MAX_NB_CHANNELS );
 8011d5e:	2210      	movs	r2, #16
 8011d60:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8011d64:	f7fd fbe9 	bl	800f53a <RegionCommonChanDisable>
}
 8011d68:	bd10      	pop	{r4, pc}
 8011d6a:	bf00      	nop
 8011d6c:	20001460 	.word	0x20001460

08011d70 <RegionIN865ApplyCFList>:
{
 8011d70:	b570      	push	{r4, r5, r6, lr}
 8011d72:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8011d74:	2350      	movs	r3, #80	; 0x50
 8011d76:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 8011d7a:	7903      	ldrb	r3, [r0, #4]
 8011d7c:	2b10      	cmp	r3, #16
 8011d7e:	d135      	bne.n	8011dec <RegionIN865ApplyCFList+0x7c>
 8011d80:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 8011d82:	6803      	ldr	r3, [r0, #0]
 8011d84:	7bdd      	ldrb	r5, [r3, #15]
 8011d86:	2d00      	cmp	r5, #0
 8011d88:	d130      	bne.n	8011dec <RegionIN865ApplyCFList+0x7c>
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8011d8a:	2403      	movs	r4, #3
 8011d8c:	e01a      	b.n	8011dc4 <RegionIN865ApplyCFList+0x54>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8011d8e:	6832      	ldr	r2, [r6, #0]
 8011d90:	5d53      	ldrb	r3, [r2, r5]
 8011d92:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8011d94:	442a      	add	r2, r5
 8011d96:	7851      	ldrb	r1, [r2, #1]
 8011d98:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8011d9c:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8011d9e:	7892      	ldrb	r2, [r2, #2]
 8011da0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 8011da4:	2264      	movs	r2, #100	; 0x64
 8011da6:	fb02 f303 	mul.w	r3, r2, r3
 8011daa:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 8011dac:	2300      	movs	r3, #0
 8011dae:	9304      	str	r3, [sp, #16]
 8011db0:	e011      	b.n	8011dd6 <RegionIN865ApplyCFList+0x66>
            channelRemove.ChannelId = chanIdx;
 8011db2:	f88d 4000 	strb.w	r4, [sp]
            RegionIN865ChannelsRemove( &channelRemove );
 8011db6:	4668      	mov	r0, sp
 8011db8:	f7ff ffc0 	bl	8011d3c <RegionIN865ChannelsRemove>
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8011dbc:	3503      	adds	r5, #3
 8011dbe:	b2ed      	uxtb	r5, r5
 8011dc0:	3401      	adds	r4, #1
 8011dc2:	b2e4      	uxtb	r4, r4
 8011dc4:	2c0f      	cmp	r4, #15
 8011dc6:	d811      	bhi.n	8011dec <RegionIN865ApplyCFList+0x7c>
        if( chanIdx < ( IN865_NUMB_CHANNELS_CF_LIST + IN865_NUMB_DEFAULT_CHANNELS ) )
 8011dc8:	2c07      	cmp	r4, #7
 8011dca:	d9e0      	bls.n	8011d8e <RegionIN865ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 8011dcc:	2300      	movs	r3, #0
 8011dce:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 8011dd0:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 8011dd4:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 8011dd6:	9b03      	ldr	r3, [sp, #12]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d0ea      	beq.n	8011db2 <RegionIN865ApplyCFList+0x42>
            channelAdd.NewChannel = &newChannel;
 8011ddc:	ab03      	add	r3, sp, #12
 8011dde:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 8011de0:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionIN865ChannelAdd( &channelAdd );
 8011de4:	a801      	add	r0, sp, #4
 8011de6:	f7ff ff4d 	bl	8011c84 <RegionIN865ChannelAdd>
 8011dea:	e7e7      	b.n	8011dbc <RegionIN865ApplyCFList+0x4c>
}
 8011dec:	b006      	add	sp, #24
 8011dee:	bd70      	pop	{r4, r5, r6, pc}

08011df0 <RegionIN865NewChannelReq>:
{
 8011df0:	b500      	push	{lr}
 8011df2:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 8011df4:	6803      	ldr	r3, [r0, #0]
 8011df6:	681a      	ldr	r2, [r3, #0]
 8011df8:	b952      	cbnz	r2, 8011e10 <RegionIN865NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8011dfa:	7903      	ldrb	r3, [r0, #4]
 8011dfc:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionIN865ChannelsRemove( &channelRemove ) == false )
 8011e00:	a801      	add	r0, sp, #4
 8011e02:	f7ff ff9b 	bl	8011d3c <RegionIN865ChannelsRemove>
 8011e06:	b1d0      	cbz	r0, 8011e3e <RegionIN865NewChannelReq+0x4e>
    uint8_t status = 0x03;
 8011e08:	2003      	movs	r0, #3
}
 8011e0a:	b005      	add	sp, #20
 8011e0c:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8011e10:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8011e12:	7903      	ldrb	r3, [r0, #4]
 8011e14:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionIN865ChannelAdd( &channelAdd ) )
 8011e18:	a802      	add	r0, sp, #8
 8011e1a:	f7ff ff33 	bl	8011c84 <RegionIN865ChannelAdd>
 8011e1e:	2806      	cmp	r0, #6
 8011e20:	d80b      	bhi.n	8011e3a <RegionIN865NewChannelReq+0x4a>
 8011e22:	e8df f000 	tbb	[pc, r0]
 8011e26:	0a04      	.short	0x0a04
 8011e28:	060e0a0a 	.word	0x060e0a0a
 8011e2c:	08          	.byte	0x08
 8011e2d:	00          	.byte	0x00
 8011e2e:	2003      	movs	r0, #3
 8011e30:	e7eb      	b.n	8011e0a <RegionIN865NewChannelReq+0x1a>
                status &= 0xFD;
 8011e32:	2001      	movs	r0, #1
                break;
 8011e34:	e7e9      	b.n	8011e0a <RegionIN865NewChannelReq+0x1a>
                status &= 0xFC;
 8011e36:	2000      	movs	r0, #0
                break;
 8011e38:	e7e7      	b.n	8011e0a <RegionIN865NewChannelReq+0x1a>
                status &= 0xFC;
 8011e3a:	2000      	movs	r0, #0
                break;
 8011e3c:	e7e5      	b.n	8011e0a <RegionIN865NewChannelReq+0x1a>
            status &= 0xFC;
 8011e3e:	2000      	movs	r0, #0
 8011e40:	e7e3      	b.n	8011e0a <RegionIN865NewChannelReq+0x1a>
                status &= 0xFE;
 8011e42:	2002      	movs	r0, #2
 8011e44:	e7e1      	b.n	8011e0a <RegionIN865NewChannelReq+0x1a>
	...

08011e48 <RegionIN865SetContinuousWave>:

void RegionIN865SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8011e48:	b538      	push	{r3, r4, r5, lr}
 8011e4a:	4604      	mov	r4, r0
#if defined( REGION_IN865 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8011e4c:	4b12      	ldr	r3, [pc, #72]	; (8011e98 <RegionIN865SetContinuousWave+0x50>)
 8011e4e:	6819      	ldr	r1, [r3, #0]
 8011e50:	4d12      	ldr	r5, [pc, #72]	; (8011e9c <RegionIN865SetContinuousWave+0x54>)
 8011e52:	682b      	ldr	r3, [r5, #0]
 8011e54:	7802      	ldrb	r2, [r0, #0]
 8011e56:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011e5a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8011e5e:	7a53      	ldrb	r3, [r2, #9]
 8011e60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011e64:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8011e68:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8011e6c:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8011e70:	f7fd fdd7 	bl	800fa22 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8011e74:	682a      	ldr	r2, [r5, #0]
 8011e76:	7823      	ldrb	r3, [r4, #0]
 8011e78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011e7c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8011e80:	68a2      	ldr	r2, [r4, #8]
 8011e82:	6861      	ldr	r1, [r4, #4]
 8011e84:	f7fd fcea 	bl	800f85c <RegionCommonComputeTxPower>
 8011e88:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8011e8a:	4b05      	ldr	r3, [pc, #20]	; (8011ea0 <RegionIN865SetContinuousWave+0x58>)
 8011e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e8e:	89a2      	ldrh	r2, [r4, #12]
 8011e90:	4628      	mov	r0, r5
 8011e92:	4798      	blx	r3
#endif /* REGION_IN865 */
}
 8011e94:	bd38      	pop	{r3, r4, r5, pc}
 8011e96:	bf00      	nop
 8011e98:	2000145c 	.word	0x2000145c
 8011e9c:	20001460 	.word	0x20001460
 8011ea0:	08018318 	.word	0x08018318

08011ea4 <RegionIN865ApplyDrOffset>:

uint8_t RegionIN865ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_IN865 )
    // Apply offset formula
    return MIN( DR_5, MAX( DR_0, dr - EffectiveRx1DrOffsetIN865[drOffset] ) );
 8011ea4:	4b05      	ldr	r3, [pc, #20]	; (8011ebc <RegionIN865ApplyDrOffset+0x18>)
 8011ea6:	5698      	ldrsb	r0, [r3, r2]
 8011ea8:	1a09      	subs	r1, r1, r0
 8011eaa:	2905      	cmp	r1, #5
 8011eac:	dc03      	bgt.n	8011eb6 <RegionIN865ApplyDrOffset+0x12>
 8011eae:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8011eb2:	b2c8      	uxtb	r0, r1
 8011eb4:	4770      	bx	lr
 8011eb6:	2005      	movs	r0, #5
#else
    return 0;
#endif /* REGION_IN865 */
}
 8011eb8:	4770      	bx	lr
 8011eba:	bf00      	nop
 8011ebc:	08017d4c 	.word	0x08017d4c

08011ec0 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 8011ec0:	b510      	push	{r4, lr}
 8011ec2:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8011ec4:	4b05      	ldr	r3, [pc, #20]	; (8011edc <VerifyRfFreq+0x1c>)
 8011ec6:	6a1b      	ldr	r3, [r3, #32]
 8011ec8:	4798      	blx	r3
 8011eca:	b120      	cbz	r0, 8011ed6 <VerifyRfFreq+0x16>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq < 864000000 ) ||  ( freq > 870000000 ) )
 8011ecc:	4b04      	ldr	r3, [pc, #16]	; (8011ee0 <VerifyRfFreq+0x20>)
 8011ece:	4423      	add	r3, r4
 8011ed0:	4a04      	ldr	r2, [pc, #16]	; (8011ee4 <VerifyRfFreq+0x24>)
 8011ed2:	4293      	cmp	r3, r2
 8011ed4:	d800      	bhi.n	8011ed8 <VerifyRfFreq+0x18>
    {
        return false;
    }
    return true;
}
 8011ed6:	bd10      	pop	{r4, pc}
        return false;
 8011ed8:	2000      	movs	r0, #0
 8011eda:	e7fc      	b.n	8011ed6 <VerifyRfFreq+0x16>
 8011edc:	08018318 	.word	0x08018318
 8011ee0:	cc806800 	.word	0xcc806800
 8011ee4:	005b8d80 	.word	0x005b8d80

08011ee8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8011ee8:	b570      	push	{r4, r5, r6, lr}
 8011eea:	b084      	sub	sp, #16
 8011eec:	4605      	mov	r5, r0
 8011eee:	460c      	mov	r4, r1
    int8_t phyDr = DataratesRU864[datarate];
 8011ef0:	4b13      	ldr	r3, [pc, #76]	; (8011f40 <GetTimeOnAir+0x58>)
 8011ef2:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsRU864 );
 8011ef4:	4913      	ldr	r1, [pc, #76]	; (8011f44 <GetTimeOnAir+0x5c>)
 8011ef6:	f7fd fd99 	bl	800fa2c <RegionCommonGetBandwidth>
 8011efa:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 8011efc:	2d07      	cmp	r5, #7
 8011efe:	d00e      	beq.n	8011f1e <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8011f00:	4b11      	ldr	r3, [pc, #68]	; (8011f48 <GetTimeOnAir+0x60>)
 8011f02:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8011f04:	2001      	movs	r0, #1
 8011f06:	9003      	str	r0, [sp, #12]
 8011f08:	b2e4      	uxtb	r4, r4
 8011f0a:	9402      	str	r4, [sp, #8]
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	9301      	str	r3, [sp, #4]
 8011f10:	2308      	movs	r3, #8
 8011f12:	9300      	str	r3, [sp, #0]
 8011f14:	4603      	mov	r3, r0
 8011f16:	4632      	mov	r2, r6
 8011f18:	47a8      	blx	r5
    }
    return timeOnAir;
}
 8011f1a:	b004      	add	sp, #16
 8011f1c:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8011f1e:	4b0a      	ldr	r3, [pc, #40]	; (8011f48 <GetTimeOnAir+0x60>)
 8011f20:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8011f22:	2301      	movs	r3, #1
 8011f24:	9303      	str	r3, [sp, #12]
 8011f26:	b2e4      	uxtb	r4, r4
 8011f28:	9402      	str	r4, [sp, #8]
 8011f2a:	2000      	movs	r0, #0
 8011f2c:	9001      	str	r0, [sp, #4]
 8011f2e:	2305      	movs	r3, #5
 8011f30:	9300      	str	r3, [sp, #0]
 8011f32:	4603      	mov	r3, r0
 8011f34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011f38:	fb02 f206 	mul.w	r2, r2, r6
 8011f3c:	47a8      	blx	r5
 8011f3e:	e7ec      	b.n	8011f1a <GetTimeOnAir+0x32>
 8011f40:	08017d84 	.word	0x08017d84
 8011f44:	08017d64 	.word	0x08017d64
 8011f48:	08018318 	.word	0x08018318

08011f4c <RegionRU864GetPhyParam>:
#endif /* REGION_RU864 */

PhyParam_t RegionRU864GetPhyParam( GetPhyParams_t* getPhy )
{
 8011f4c:	b500      	push	{lr}
 8011f4e:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 8011f50:	2300      	movs	r3, #0
 8011f52:	9304      	str	r3, [sp, #16]

#if defined( REGION_RU864 )
    switch( getPhy->Attribute )
 8011f54:	7803      	ldrb	r3, [r0, #0]
 8011f56:	3b0b      	subs	r3, #11
 8011f58:	2b2e      	cmp	r3, #46	; 0x2e
 8011f5a:	d830      	bhi.n	8011fbe <RegionRU864GetPhyParam+0x72>
 8011f5c:	e8df f003 	tbb	[pc, r3]
 8011f60:	3f393633 	.word	0x3f393633
 8011f64:	504c4845 	.word	0x504c4845
 8011f68:	605c5854 	.word	0x605c5854
 8011f6c:	6c2f692f 	.word	0x6c2f692f
 8011f70:	2f7b7872 	.word	0x2f7b7872
 8011f74:	18837f2f 	.word	0x18837f2f
 8011f78:	2f2f2f2f 	.word	0x2f2f2f2f
 8011f7c:	2f2f2f2f 	.word	0x2f2f2f2f
 8011f80:	2f2f2f2f 	.word	0x2f2f2f2f
 8011f84:	9389862f 	.word	0x9389862f
 8011f88:	99962f2f 	.word	0x99962f2f
 8011f8c:	9c2f      	.short	0x9c2f
 8011f8e:	a2          	.byte	0xa2
 8011f8f:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8011f90:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8011f94:	f88d 3004 	strb.w	r3, [sp, #4]
 8011f98:	2307      	movs	r3, #7
 8011f9a:	f88d 3005 	strb.w	r3, [sp, #5]
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	f88d 3006 	strb.w	r3, [sp, #6]
 8011fa4:	2308      	movs	r3, #8
 8011fa6:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )RU864_TX_MAX_DATARATE,
                .MinDr = ( int8_t )RU864_TX_MIN_DATARATE,
                .NbChannels = RU864_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8011faa:	4b42      	ldr	r3, [pc, #264]	; (80120b4 <RegionRU864GetPhyParam+0x168>)
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8011fb2:	9202      	str	r2, [sp, #8]
 8011fb4:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8011fb6:	a801      	add	r0, sp, #4
 8011fb8:	f7fd fd14 	bl	800f9e4 <RegionCommonGetNextLowerTxDr>
 8011fbc:	9004      	str	r0, [sp, #16]
        }
    }

#endif /* REGION_RU864 */
    return phyParam;
}
 8011fbe:	9804      	ldr	r0, [sp, #16]
 8011fc0:	b007      	add	sp, #28
 8011fc2:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8011fc6:	2340      	movs	r3, #64	; 0x40
 8011fc8:	9304      	str	r3, [sp, #16]
            break;
 8011fca:	e7f8      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8011fcc:	2320      	movs	r3, #32
 8011fce:	9304      	str	r3, [sp, #16]
            break;
 8011fd0:	e7f5      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRU864[getPhy->Datarate];
 8011fd2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011fd6:	4a38      	ldr	r2, [pc, #224]	; (80120b8 <RegionRU864GetPhyParam+0x16c>)
 8011fd8:	5cd3      	ldrb	r3, [r2, r3]
 8011fda:	9304      	str	r3, [sp, #16]
            break;
 8011fdc:	e7ef      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterRU864[getPhy->Datarate];
 8011fde:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011fe2:	4a36      	ldr	r2, [pc, #216]	; (80120bc <RegionRU864GetPhyParam+0x170>)
 8011fe4:	5cd3      	ldrb	r3, [r2, r3]
 8011fe6:	9304      	str	r3, [sp, #16]
            break;
 8011fe8:	e7e9      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RU864_DUTY_CYCLE_ENABLED;
 8011fea:	2301      	movs	r3, #1
 8011fec:	9304      	str	r3, [sp, #16]
            break;
 8011fee:	e7e6      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RU864_MAX_RX_WINDOW;
 8011ff0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011ff4:	9304      	str	r3, [sp, #16]
            break;
 8011ff6:	e7e2      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8011ff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011ffc:	9304      	str	r3, [sp, #16]
            break;
 8011ffe:	e7de      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8012000:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8012004:	9304      	str	r3, [sp, #16]
            break;
 8012006:	e7da      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8012008:	f241 3388 	movw	r3, #5000	; 0x1388
 801200c:	9304      	str	r3, [sp, #16]
            break;
 801200e:	e7d6      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8012010:	f241 7370 	movw	r3, #6000	; 0x1770
 8012014:	9304      	str	r3, [sp, #16]
            break;
 8012016:	e7d2      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8012018:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801201c:	9304      	str	r3, [sp, #16]
            break;
 801201e:	e7ce      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8012020:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012024:	4826      	ldr	r0, [pc, #152]	; (80120c0 <RegionRU864GetPhyParam+0x174>)
 8012026:	f002 fa21 	bl	801446c <randr>
 801202a:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 801202e:	9004      	str	r0, [sp, #16]
            break;
 8012030:	e7c5      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RU864_RX_WND_2_FREQ;
 8012032:	4b24      	ldr	r3, [pc, #144]	; (80120c4 <RegionRU864GetPhyParam+0x178>)
 8012034:	9304      	str	r3, [sp, #16]
            break;
 8012036:	e7c2      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8012038:	4b1e      	ldr	r3, [pc, #120]	; (80120b4 <RegionRU864GetPhyParam+0x168>)
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8012040:	9304      	str	r3, [sp, #16]
            break;
 8012042:	e7bc      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8012044:	4b1b      	ldr	r3, [pc, #108]	; (80120b4 <RegionRU864GetPhyParam+0x168>)
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 801204c:	9304      	str	r3, [sp, #16]
            break;
 801204e:	e7b6      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RU864_MAX_NB_CHANNELS;
 8012050:	2308      	movs	r3, #8
 8012052:	9304      	str	r3, [sp, #16]
            break;
 8012054:	e7b3      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 8012056:	4b17      	ldr	r3, [pc, #92]	; (80120b4 <RegionRU864GetPhyParam+0x168>)
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	9304      	str	r3, [sp, #16]
            break;
 801205c:	e7af      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
            phyParam.fValue = RU864_DEFAULT_MAX_EIRP;
 801205e:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8012062:	9304      	str	r3, [sp, #16]
            break;
 8012064:	e7ab      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
            phyParam.fValue = RU864_DEFAULT_ANTENNA_GAIN;
 8012066:	4b18      	ldr	r3, [pc, #96]	; (80120c8 <RegionRU864GetPhyParam+0x17c>)
 8012068:	9304      	str	r3, [sp, #16]
            break;
 801206a:	e7a8      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RU864_BEACON_CHANNEL_FREQ;
 801206c:	4b15      	ldr	r3, [pc, #84]	; (80120c4 <RegionRU864GetPhyParam+0x178>)
 801206e:	9304      	str	r3, [sp, #16]
            break;
 8012070:	e7a5      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = RU864_BEACON_SIZE;
 8012072:	2311      	movs	r3, #17
 8012074:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = RU864_RFU1_SIZE;
 8012078:	2302      	movs	r3, #2
 801207a:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = RU864_RFU2_SIZE;
 801207e:	2300      	movs	r3, #0
 8012080:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 8012084:	e79b      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RU864_BEACON_CHANNEL_DR;
 8012086:	2303      	movs	r3, #3
 8012088:	9304      	str	r3, [sp, #16]
            break;
 801208a:	e798      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RU864_PING_SLOT_CHANNEL_FREQ;
 801208c:	4b0f      	ldr	r3, [pc, #60]	; (80120cc <RegionRU864GetPhyParam+0x180>)
 801208e:	9304      	str	r3, [sp, #16]
            break;
 8012090:	e795      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RU864_PING_SLOT_CHANNEL_DR;
 8012092:	2303      	movs	r3, #3
 8012094:	9304      	str	r3, [sp, #16]
            break;
 8012096:	e792      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
            phyParam.Value = DataratesRU864[getPhy->Datarate];
 8012098:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801209c:	4a0c      	ldr	r2, [pc, #48]	; (80120d0 <RegionRU864GetPhyParam+0x184>)
 801209e:	5cd3      	ldrb	r3, [r2, r3]
 80120a0:	9304      	str	r3, [sp, #16]
            break;
 80120a2:	e78c      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsRU864 );
 80120a4:	490b      	ldr	r1, [pc, #44]	; (80120d4 <RegionRU864GetPhyParam+0x188>)
 80120a6:	f990 0001 	ldrsb.w	r0, [r0, #1]
 80120aa:	f7fd fcbf 	bl	800fa2c <RegionCommonGetBandwidth>
 80120ae:	9004      	str	r0, [sp, #16]
            break;
 80120b0:	e785      	b.n	8011fbe <RegionRU864GetPhyParam+0x72>
 80120b2:	bf00      	nop
 80120b4:	20001468 	.word	0x20001468
 80120b8:	08017d8c 	.word	0x08017d8c
 80120bc:	08017d94 	.word	0x08017d94
 80120c0:	fffffc18 	.word	0xfffffc18
 80120c4:	33cd69e0 	.word	0x33cd69e0
 80120c8:	4009999a 	.word	0x4009999a
 80120cc:	33ca5ca0 	.word	0x33ca5ca0
 80120d0:	08017d84 	.word	0x08017d84
 80120d4:	08017d64 	.word	0x08017d64

080120d8 <RegionRU864SetBandTxDone>:

void RegionRU864SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80120d8:	b530      	push	{r4, r5, lr}
 80120da:	b083      	sub	sp, #12
#if defined( REGION_RU864 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80120dc:	4b0b      	ldr	r3, [pc, #44]	; (801210c <RegionRU864SetBandTxDone+0x34>)
 80120de:	681d      	ldr	r5, [r3, #0]
 80120e0:	4b0b      	ldr	r3, [pc, #44]	; (8012110 <RegionRU864SetBandTxDone+0x38>)
 80120e2:	681a      	ldr	r2, [r3, #0]
 80120e4:	7803      	ldrb	r3, [r0, #0]
 80120e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80120ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80120ee:	7a5b      	ldrb	r3, [r3, #9]
 80120f0:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 80120f4:	6903      	ldr	r3, [r0, #16]
 80120f6:	9300      	str	r3, [sp, #0]
 80120f8:	68c3      	ldr	r3, [r0, #12]
 80120fa:	7842      	ldrb	r2, [r0, #1]
 80120fc:	6881      	ldr	r1, [r0, #8]
 80120fe:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 8012102:	f7fd fa5b 	bl	800f5bc <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_RU864 */
}
 8012106:	b003      	add	sp, #12
 8012108:	bd30      	pop	{r4, r5, pc}
 801210a:	bf00      	nop
 801210c:	20001464 	.word	0x20001464
 8012110:	20001468 	.word	0x20001468

08012114 <RegionRU864InitDefaults>:

void RegionRU864InitDefaults( InitDefaultsParams_t* params )
{
 8012114:	b530      	push	{r4, r5, lr}
 8012116:	b087      	sub	sp, #28
#if defined( REGION_RU864 )
    Band_t bands[RU864_MAX_NB_BANDS] =
 8012118:	2364      	movs	r3, #100	; 0x64
 801211a:	f8ad 3000 	strh.w	r3, [sp]
 801211e:	2300      	movs	r3, #0
 8012120:	f88d 3002 	strb.w	r3, [sp, #2]
 8012124:	9301      	str	r3, [sp, #4]
 8012126:	9302      	str	r3, [sp, #8]
 8012128:	9303      	str	r3, [sp, #12]
 801212a:	9304      	str	r3, [sp, #16]
 801212c:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        RU864_BAND0
    };

    switch( params->Type )
 8012130:	7a03      	ldrb	r3, [r0, #8]
 8012132:	2b01      	cmp	r3, #1
 8012134:	d02b      	beq.n	801218e <RegionRU864InitDefaults+0x7a>
 8012136:	2b02      	cmp	r3, #2
 8012138:	d036      	beq.n	80121a8 <RegionRU864InitDefaults+0x94>
 801213a:	b10b      	cbz	r3, 8012140 <RegionRU864InitDefaults+0x2c>
        {
            break;
        }
    }
#endif /* REGION_RU864 */
}
 801213c:	b007      	add	sp, #28
 801213e:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8012140:	6803      	ldr	r3, [r0, #0]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d0fa      	beq.n	801213c <RegionRU864InitDefaults+0x28>
 8012146:	6842      	ldr	r2, [r0, #4]
 8012148:	2a00      	cmp	r2, #0
 801214a:	d0f7      	beq.n	801213c <RegionRU864InitDefaults+0x28>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801214c:	491b      	ldr	r1, [pc, #108]	; (80121bc <RegionRU864InitDefaults+0xa8>)
 801214e:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8012150:	4c1b      	ldr	r4, [pc, #108]	; (80121c0 <RegionRU864InitDefaults+0xac>)
 8012152:	6022      	str	r2, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * RU864_MAX_NB_BANDS );
 8012154:	2218      	movs	r2, #24
 8012156:	4669      	mov	r1, sp
 8012158:	4618      	mov	r0, r3
 801215a:	f002 f994 	bl	8014486 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) RU864_LC1;
 801215e:	6824      	ldr	r4, [r4, #0]
 8012160:	4b18      	ldr	r3, [pc, #96]	; (80121c4 <RegionRU864InitDefaults+0xb0>)
 8012162:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012166:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) RU864_LC2;
 801216a:	f104 050c 	add.w	r5, r4, #12
 801216e:	330c      	adds	r3, #12
 8012170:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012174:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 8012178:	2303      	movs	r3, #3
 801217a:	f8a4 348c 	strh.w	r3, [r4, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801217e:	2201      	movs	r2, #1
 8012180:	f204 418c 	addw	r1, r4, #1164	; 0x48c
 8012184:	f504 6090 	add.w	r0, r4, #1152	; 0x480
 8012188:	f7fd fa07 	bl	800f59a <RegionCommonChanMaskCopy>
            break;
 801218c:	e7d6      	b.n	801213c <RegionRU864InitDefaults+0x28>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 801218e:	4b0c      	ldr	r3, [pc, #48]	; (80121c0 <RegionRU864InitDefaults+0xac>)
 8012190:	6818      	ldr	r0, [r3, #0]
 8012192:	2300      	movs	r3, #0
 8012194:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8012196:	6103      	str	r3, [r0, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8012198:	2201      	movs	r2, #1
 801219a:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 801219e:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 80121a2:	f7fd f9fa 	bl	800f59a <RegionCommonChanMaskCopy>
            break;
 80121a6:	e7c9      	b.n	801213c <RegionRU864InitDefaults+0x28>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 80121a8:	4b05      	ldr	r3, [pc, #20]	; (80121c0 <RegionRU864InitDefaults+0xac>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 80121b0:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 80121b4:	430a      	orrs	r2, r1
 80121b6:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 80121ba:	e7bf      	b.n	801213c <RegionRU864InitDefaults+0x28>
 80121bc:	20001464 	.word	0x20001464
 80121c0:	20001468 	.word	0x20001468
 80121c4:	08017544 	.word	0x08017544

080121c8 <RegionRU864Verify>:

bool RegionRU864Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80121c8:	b508      	push	{r3, lr}
#if defined( REGION_RU864 )
    switch( phyAttribute )
 80121ca:	290f      	cmp	r1, #15
 80121cc:	d837      	bhi.n	801223e <RegionRU864Verify+0x76>
 80121ce:	e8df f001 	tbb	[pc, r1]
 80121d2:	360a      	.short	0x360a
 80121d4:	0e363636 	.word	0x0e363636
 80121d8:	2c362218 	.word	0x2c362218
 80121dc:	3636362c 	.word	0x3636362c
 80121e0:	0836      	.short	0x0836
        case PHY_DUTY_CYCLE:
        {
            return RU864_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 80121e2:	2001      	movs	r0, #1
 80121e4:	e02c      	b.n	8012240 <RegionRU864Verify+0x78>
            return VerifyRfFreq( verify->Frequency );
 80121e6:	6800      	ldr	r0, [r0, #0]
 80121e8:	f7ff fe6a 	bl	8011ec0 <VerifyRfFreq>
 80121ec:	e028      	b.n	8012240 <RegionRU864Verify+0x78>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, RU864_TX_MIN_DATARATE, RU864_TX_MAX_DATARATE );
 80121ee:	2207      	movs	r2, #7
 80121f0:	2100      	movs	r1, #0
 80121f2:	f990 0000 	ldrsb.w	r0, [r0]
 80121f6:	f7fd f95e 	bl	800f4b6 <RegionCommonValueInRange>
 80121fa:	3800      	subs	r0, #0
 80121fc:	bf18      	it	ne
 80121fe:	2001      	movne	r0, #1
 8012200:	e01e      	b.n	8012240 <RegionRU864Verify+0x78>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8012202:	2205      	movs	r2, #5
 8012204:	2100      	movs	r1, #0
 8012206:	f990 0000 	ldrsb.w	r0, [r0]
 801220a:	f7fd f954 	bl	800f4b6 <RegionCommonValueInRange>
 801220e:	3800      	subs	r0, #0
 8012210:	bf18      	it	ne
 8012212:	2001      	movne	r0, #1
 8012214:	e014      	b.n	8012240 <RegionRU864Verify+0x78>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, RU864_RX_MIN_DATARATE, RU864_RX_MAX_DATARATE );
 8012216:	2207      	movs	r2, #7
 8012218:	2100      	movs	r1, #0
 801221a:	f990 0000 	ldrsb.w	r0, [r0]
 801221e:	f7fd f94a 	bl	800f4b6 <RegionCommonValueInRange>
 8012222:	3800      	subs	r0, #0
 8012224:	bf18      	it	ne
 8012226:	2001      	movne	r0, #1
 8012228:	e00a      	b.n	8012240 <RegionRU864Verify+0x78>
            return RegionCommonValueInRange( verify->TxPower, RU864_MAX_TX_POWER, RU864_MIN_TX_POWER );
 801222a:	2207      	movs	r2, #7
 801222c:	2100      	movs	r1, #0
 801222e:	f990 0000 	ldrsb.w	r0, [r0]
 8012232:	f7fd f940 	bl	800f4b6 <RegionCommonValueInRange>
 8012236:	3800      	subs	r0, #0
 8012238:	bf18      	it	ne
 801223a:	2001      	movne	r0, #1
 801223c:	e000      	b.n	8012240 <RegionRU864Verify+0x78>
            return false;
 801223e:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_RU864 */
}
 8012240:	bd08      	pop	{r3, pc}
	...

08012244 <RegionRU864ChanMaskSet>:
    }
#endif /* REGION_RU864 */
}

bool RegionRU864ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8012244:	b508      	push	{r3, lr}
#if defined( REGION_RU864 )
    switch( chanMaskSet->ChannelsMaskType )
 8012246:	7903      	ldrb	r3, [r0, #4]
 8012248:	b11b      	cbz	r3, 8012252 <RegionRU864ChanMaskSet+0xe>
 801224a:	2b01      	cmp	r3, #1
 801224c:	d00b      	beq.n	8012266 <RegionRU864ChanMaskSet+0x22>
 801224e:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_RU864 */
}
 8012250:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8012252:	4b0a      	ldr	r3, [pc, #40]	; (801227c <RegionRU864ChanMaskSet+0x38>)
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	2201      	movs	r2, #1
 8012258:	6801      	ldr	r1, [r0, #0]
 801225a:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 801225e:	f7fd f99c 	bl	800f59a <RegionCommonChanMaskCopy>
    return true;
 8012262:	2001      	movs	r0, #1
            break;
 8012264:	e7f4      	b.n	8012250 <RegionRU864ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8012266:	4b05      	ldr	r3, [pc, #20]	; (801227c <RegionRU864ChanMaskSet+0x38>)
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	2201      	movs	r2, #1
 801226c:	6801      	ldr	r1, [r0, #0]
 801226e:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8012272:	f7fd f992 	bl	800f59a <RegionCommonChanMaskCopy>
    return true;
 8012276:	2001      	movs	r0, #1
            break;
 8012278:	e7ea      	b.n	8012250 <RegionRU864ChanMaskSet+0xc>
 801227a:	bf00      	nop
 801227c:	20001468 	.word	0x20001468

08012280 <RegionRU864ComputeRxWindowParameters>:

void RegionRU864ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8012280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012282:	b083      	sub	sp, #12
 8012284:	460e      	mov	r6, r1
 8012286:	4617      	mov	r7, r2
 8012288:	461c      	mov	r4, r3
#if defined( REGION_RU864 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, RU864_RX_MAX_DATARATE );
 801228a:	2807      	cmp	r0, #7
 801228c:	bfa8      	it	ge
 801228e:	2007      	movge	r0, #7
 8012290:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsRU864 );
 8012292:	4913      	ldr	r1, [pc, #76]	; (80122e0 <RegionRU864ComputeRxWindowParameters+0x60>)
 8012294:	f7fd fbca 	bl	800fa2c <RegionCommonGetBandwidth>
 8012298:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 801229a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801229e:	2b07      	cmp	r3, #7
 80122a0:	d017      	beq.n	80122d2 <RegionRU864ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesRU864[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesRU864[rxConfigParams->Datarate], BandwidthsRU864[rxConfigParams->Datarate] );
 80122a2:	4a0f      	ldr	r2, [pc, #60]	; (80122e0 <RegionRU864ComputeRxWindowParameters+0x60>)
 80122a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80122a8:	4a0e      	ldr	r2, [pc, #56]	; (80122e4 <RegionRU864ComputeRxWindowParameters+0x64>)
 80122aa:	5cd0      	ldrb	r0, [r2, r3]
 80122ac:	f7fd fa8e 	bl	800f7cc <RegionCommonComputeSymbolTimeLoRa>
 80122b0:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80122b2:	4b0d      	ldr	r3, [pc, #52]	; (80122e8 <RegionRU864ComputeRxWindowParameters+0x68>)
 80122b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80122b6:	4798      	blx	r3
 80122b8:	4603      	mov	r3, r0
 80122ba:	f104 020c 	add.w	r2, r4, #12
 80122be:	9201      	str	r2, [sp, #4]
 80122c0:	3408      	adds	r4, #8
 80122c2:	9400      	str	r4, [sp, #0]
 80122c4:	463a      	mov	r2, r7
 80122c6:	4631      	mov	r1, r6
 80122c8:	4628      	mov	r0, r5
 80122ca:	f7fd fa8d 	bl	800f7e8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_RU864 */
}
 80122ce:	b003      	add	sp, #12
 80122d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesRU864[rxConfigParams->Datarate] );
 80122d2:	4a04      	ldr	r2, [pc, #16]	; (80122e4 <RegionRU864ComputeRxWindowParameters+0x64>)
 80122d4:	5cd0      	ldrb	r0, [r2, r3]
 80122d6:	f7fd fa81 	bl	800f7dc <RegionCommonComputeSymbolTimeFsk>
 80122da:	4605      	mov	r5, r0
 80122dc:	e7e9      	b.n	80122b2 <RegionRU864ComputeRxWindowParameters+0x32>
 80122de:	bf00      	nop
 80122e0:	08017d64 	.word	0x08017d64
 80122e4:	08017d84 	.word	0x08017d84
 80122e8:	08018318 	.word	0x08018318

080122ec <RegionRU864RxConfig>:

bool RegionRU864RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80122ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122f0:	b08a      	sub	sp, #40	; 0x28
 80122f2:	4604      	mov	r4, r0
 80122f4:	460f      	mov	r7, r1
#if defined( REGION_RU864 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80122f6:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 80122fa:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 80122fe:	4b37      	ldr	r3, [pc, #220]	; (80123dc <RegionRU864RxConfig+0xf0>)
 8012300:	685b      	ldr	r3, [r3, #4]
 8012302:	4798      	blx	r3
 8012304:	2800      	cmp	r0, #0
 8012306:	d167      	bne.n	80123d8 <RegionRU864RxConfig+0xec>
 8012308:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801230a:	7ce3      	ldrb	r3, [r4, #19]
 801230c:	b983      	cbnz	r3, 8012330 <RegionRU864RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801230e:	4b34      	ldr	r3, [pc, #208]	; (80123e0 <RegionRU864RxConfig+0xf4>)
 8012310:	681a      	ldr	r2, [r3, #0]
 8012312:	7823      	ldrb	r3, [r4, #0]
 8012314:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8012318:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801231c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012320:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012324:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8012328:	f1b8 0f00 	cmp.w	r8, #0
 801232c:	d100      	bne.n	8012330 <RegionRU864RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801232e:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesRU864[dr];
 8012330:	4b2c      	ldr	r3, [pc, #176]	; (80123e4 <RegionRU864RxConfig+0xf8>)
 8012332:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 8012336:	4b29      	ldr	r3, [pc, #164]	; (80123dc <RegionRU864RxConfig+0xf0>)
 8012338:	68db      	ldr	r3, [r3, #12]
 801233a:	4640      	mov	r0, r8
 801233c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801233e:	2d07      	cmp	r5, #7
 8012340:	d02b      	beq.n	801239a <RegionRU864RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8012342:	4b26      	ldr	r3, [pc, #152]	; (80123dc <RegionRU864RxConfig+0xf0>)
 8012344:	f8d3 a018 	ldr.w	sl, [r3, #24]
 8012348:	7ca3      	ldrb	r3, [r4, #18]
 801234a:	9309      	str	r3, [sp, #36]	; 0x24
 801234c:	2601      	movs	r6, #1
 801234e:	9608      	str	r6, [sp, #32]
 8012350:	2300      	movs	r3, #0
 8012352:	9307      	str	r3, [sp, #28]
 8012354:	9306      	str	r3, [sp, #24]
 8012356:	9305      	str	r3, [sp, #20]
 8012358:	9304      	str	r3, [sp, #16]
 801235a:	9303      	str	r3, [sp, #12]
 801235c:	8922      	ldrh	r2, [r4, #8]
 801235e:	9202      	str	r2, [sp, #8]
 8012360:	2208      	movs	r2, #8
 8012362:	9201      	str	r2, [sp, #4]
 8012364:	9300      	str	r3, [sp, #0]
 8012366:	4633      	mov	r3, r6
 8012368:	464a      	mov	r2, r9
 801236a:	78a1      	ldrb	r1, [r4, #2]
 801236c:	4630      	mov	r0, r6
 801236e:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8012370:	7c63      	ldrb	r3, [r4, #17]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d02d      	beq.n	80123d2 <RegionRU864RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterRU864[dr];
 8012376:	4b1c      	ldr	r3, [pc, #112]	; (80123e8 <RegionRU864RxConfig+0xfc>)
 8012378:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateRU864[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801237a:	4b18      	ldr	r3, [pc, #96]	; (80123dc <RegionRU864RxConfig+0xf0>)
 801237c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801237e:	310d      	adds	r1, #13
 8012380:	b2c9      	uxtb	r1, r1
 8012382:	4630      	mov	r0, r6
 8012384:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8012386:	462a      	mov	r2, r5
 8012388:	4641      	mov	r1, r8
 801238a:	7ce0      	ldrb	r0, [r4, #19]
 801238c:	f7fd fb60 	bl	800fa50 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8012390:	703d      	strb	r5, [r7, #0]
    return true;
 8012392:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_RU864 */
}
 8012394:	b00a      	add	sp, #40	; 0x28
 8012396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801239a:	4b10      	ldr	r3, [pc, #64]	; (80123dc <RegionRU864RxConfig+0xf0>)
 801239c:	f8d3 a018 	ldr.w	sl, [r3, #24]
 80123a0:	7ca3      	ldrb	r3, [r4, #18]
 80123a2:	9309      	str	r3, [sp, #36]	; 0x24
 80123a4:	2000      	movs	r0, #0
 80123a6:	9008      	str	r0, [sp, #32]
 80123a8:	9007      	str	r0, [sp, #28]
 80123aa:	9006      	str	r0, [sp, #24]
 80123ac:	2301      	movs	r3, #1
 80123ae:	9305      	str	r3, [sp, #20]
 80123b0:	9004      	str	r0, [sp, #16]
 80123b2:	9003      	str	r0, [sp, #12]
 80123b4:	8923      	ldrh	r3, [r4, #8]
 80123b6:	9302      	str	r3, [sp, #8]
 80123b8:	2305      	movs	r3, #5
 80123ba:	9301      	str	r3, [sp, #4]
 80123bc:	4b0b      	ldr	r3, [pc, #44]	; (80123ec <RegionRU864RxConfig+0x100>)
 80123be:	9300      	str	r3, [sp, #0]
 80123c0:	4603      	mov	r3, r0
 80123c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80123c6:	fb02 f209 	mul.w	r2, r2, r9
 80123ca:	f24c 3150 	movw	r1, #50000	; 0xc350
 80123ce:	47d0      	blx	sl
 80123d0:	e7ce      	b.n	8012370 <RegionRU864RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateRU864[dr];
 80123d2:	4b07      	ldr	r3, [pc, #28]	; (80123f0 <RegionRU864RxConfig+0x104>)
 80123d4:	5d59      	ldrb	r1, [r3, r5]
 80123d6:	e7d0      	b.n	801237a <RegionRU864RxConfig+0x8e>
        return false;
 80123d8:	2000      	movs	r0, #0
 80123da:	e7db      	b.n	8012394 <RegionRU864RxConfig+0xa8>
 80123dc:	08018318 	.word	0x08018318
 80123e0:	20001468 	.word	0x20001468
 80123e4:	08017d84 	.word	0x08017d84
 80123e8:	08017d94 	.word	0x08017d94
 80123ec:	00014585 	.word	0x00014585
 80123f0:	08017d8c 	.word	0x08017d8c

080123f4 <RegionRU864TxConfig>:

bool RegionRU864TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80123f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123f8:	b08d      	sub	sp, #52	; 0x34
 80123fa:	4604      	mov	r4, r0
 80123fc:	460f      	mov	r7, r1
 80123fe:	4690      	mov	r8, r2
#if defined( REGION_RU864 )
    RadioModems_t modem;
    int8_t phyDr = DataratesRU864[txConfig->Datarate];
 8012400:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8012404:	4a42      	ldr	r2, [pc, #264]	; (8012510 <RegionRU864TxConfig+0x11c>)
 8012406:	f912 a003 	ldrsb.w	sl, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801240a:	4b42      	ldr	r3, [pc, #264]	; (8012514 <RegionRU864TxConfig+0x120>)
 801240c:	6819      	ldr	r1, [r3, #0]
 801240e:	4d42      	ldr	r5, [pc, #264]	; (8012518 <RegionRU864TxConfig+0x124>)
 8012410:	682b      	ldr	r3, [r5, #0]
 8012412:	7802      	ldrb	r2, [r0, #0]
 8012414:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012418:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801241c:	7a53      	ldrb	r3, [r2, #9]
 801241e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012422:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8012426:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801242a:	f990 0002 	ldrsb.w	r0, [r0, #2]
 801242e:	f7fd faf8 	bl	800fa22 <RegionCommonLimitTxPower>
 8012432:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsRU864 );
 8012434:	4939      	ldr	r1, [pc, #228]	; (801251c <RegionRU864TxConfig+0x128>)
 8012436:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801243a:	f7fd faf7 	bl	800fa2c <RegionCommonGetBandwidth>
 801243e:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8012440:	68a2      	ldr	r2, [r4, #8]
 8012442:	6861      	ldr	r1, [r4, #4]
 8012444:	4630      	mov	r0, r6
 8012446:	f7fd fa09 	bl	800f85c <RegionCommonComputeTxPower>
 801244a:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801244c:	4b34      	ldr	r3, [pc, #208]	; (8012520 <RegionRU864TxConfig+0x12c>)
 801244e:	68da      	ldr	r2, [r3, #12]
 8012450:	6829      	ldr	r1, [r5, #0]
 8012452:	7823      	ldrb	r3, [r4, #0]
 8012454:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012458:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 801245c:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801245e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8012462:	2b07      	cmp	r3, #7
 8012464:	d031      	beq.n	80124ca <RegionRU864TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8012466:	4b2e      	ldr	r3, [pc, #184]	; (8012520 <RegionRU864TxConfig+0x12c>)
 8012468:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 801246c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8012470:	9308      	str	r3, [sp, #32]
 8012472:	2200      	movs	r2, #0
 8012474:	9207      	str	r2, [sp, #28]
 8012476:	9206      	str	r2, [sp, #24]
 8012478:	9205      	str	r2, [sp, #20]
 801247a:	2501      	movs	r5, #1
 801247c:	9504      	str	r5, [sp, #16]
 801247e:	9203      	str	r2, [sp, #12]
 8012480:	2308      	movs	r3, #8
 8012482:	9302      	str	r3, [sp, #8]
 8012484:	9501      	str	r5, [sp, #4]
 8012486:	f8cd a000 	str.w	sl, [sp]
 801248a:	464b      	mov	r3, r9
 801248c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801248e:	4628      	mov	r0, r5
 8012490:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8012492:	4b21      	ldr	r3, [pc, #132]	; (8012518 <RegionRU864TxConfig+0x124>)
 8012494:	681a      	ldr	r2, [r3, #0]
 8012496:	7823      	ldrb	r3, [r4, #0]
 8012498:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801249c:	f994 1001 	ldrsb.w	r1, [r4, #1]
 80124a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80124a4:	f7fd fb04 	bl	800fab0 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80124a8:	89a1      	ldrh	r1, [r4, #12]
 80124aa:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80124ae:	f7ff fd1b 	bl	8011ee8 <GetTimeOnAir>
 80124b2:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80124b6:	4b1a      	ldr	r3, [pc, #104]	; (8012520 <RegionRU864TxConfig+0x12c>)
 80124b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80124ba:	7b21      	ldrb	r1, [r4, #12]
 80124bc:	4628      	mov	r0, r5
 80124be:	4798      	blx	r3

    *txPower = txPowerLimited;
 80124c0:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_RU864 */
}
 80124c2:	2001      	movs	r0, #1
 80124c4:	b00d      	add	sp, #52	; 0x34
 80124c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 80124ca:	4b15      	ldr	r3, [pc, #84]	; (8012520 <RegionRU864TxConfig+0x12c>)
 80124cc:	69dd      	ldr	r5, [r3, #28]
 80124ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80124d2:	fb03 f30a 	mul.w	r3, r3, sl
 80124d6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80124da:	9208      	str	r2, [sp, #32]
 80124dc:	f04f 0b00 	mov.w	fp, #0
 80124e0:	f8cd b01c 	str.w	fp, [sp, #28]
 80124e4:	f8cd b018 	str.w	fp, [sp, #24]
 80124e8:	f8cd b014 	str.w	fp, [sp, #20]
 80124ec:	2201      	movs	r2, #1
 80124ee:	9204      	str	r2, [sp, #16]
 80124f0:	f8cd b00c 	str.w	fp, [sp, #12]
 80124f4:	2205      	movs	r2, #5
 80124f6:	9202      	str	r2, [sp, #8]
 80124f8:	f8cd b004 	str.w	fp, [sp, #4]
 80124fc:	9300      	str	r3, [sp, #0]
 80124fe:	464b      	mov	r3, r9
 8012500:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8012504:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012506:	4658      	mov	r0, fp
 8012508:	47a8      	blx	r5
        modem = MODEM_FSK;
 801250a:	465d      	mov	r5, fp
 801250c:	e7c1      	b.n	8012492 <RegionRU864TxConfig+0x9e>
 801250e:	bf00      	nop
 8012510:	08017d84 	.word	0x08017d84
 8012514:	20001464 	.word	0x20001464
 8012518:	20001468 	.word	0x20001468
 801251c:	08017d64 	.word	0x08017d64
 8012520:	08018318 	.word	0x08018318

08012524 <RegionRU864LinkAdrReq>:

uint8_t RegionRU864LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8012524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012528:	b08e      	sub	sp, #56	; 0x38
 801252a:	4606      	mov	r6, r0
 801252c:	4689      	mov	r9, r1
 801252e:	4690      	mov	r8, r2
 8012530:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_RU864 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8012532:	2500      	movs	r5, #0
 8012534:	950c      	str	r5, [sp, #48]	; 0x30
 8012536:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 801253a:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 801253e:	f04f 0a07 	mov.w	sl, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8012542:	e02d      	b.n	80125a0 <RegionRU864LinkAdrReq+0x7c>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < RU864_MAX_NB_CHANNELS; i++ )
 8012544:	2400      	movs	r4, #0
        status = 0x07;
 8012546:	f04f 0a07 	mov.w	sl, #7
 801254a:	e00f      	b.n	801256c <RegionRU864LinkAdrReq+0x48>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 801254c:	4b55      	ldr	r3, [pc, #340]	; (80126a4 <RegionRU864LinkAdrReq+0x180>)
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8012554:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012558:	b133      	cbz	r3, 8012568 <RegionRU864LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 801255a:	2301      	movs	r3, #1
 801255c:	40a3      	lsls	r3, r4
 801255e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8012562:	430b      	orrs	r3, r1
 8012564:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < RU864_MAX_NB_CHANNELS; i++ )
 8012568:	3401      	adds	r4, #1
 801256a:	b2e4      	uxtb	r4, r4
 801256c:	2c07      	cmp	r4, #7
 801256e:	d817      	bhi.n	80125a0 <RegionRU864LinkAdrReq+0x7c>
                if( linkAdrParams.ChMaskCtrl == 6 )
 8012570:	2a06      	cmp	r2, #6
 8012572:	d0eb      	beq.n	801254c <RegionRU864LinkAdrReq+0x28>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8012574:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8012578:	4123      	asrs	r3, r4
 801257a:	f013 0f01 	tst.w	r3, #1
 801257e:	d0f3      	beq.n	8012568 <RegionRU864LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8012580:	4b48      	ldr	r3, [pc, #288]	; (80126a4 <RegionRU864LinkAdrReq+0x180>)
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8012588:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801258c:	2b00      	cmp	r3, #0
 801258e:	d1eb      	bne.n	8012568 <RegionRU864LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8012590:	f00a 0afe 	and.w	sl, sl, #254	; 0xfe
 8012594:	e7e8      	b.n	8012568 <RegionRU864LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 8012596:	f04f 0a06 	mov.w	sl, #6
 801259a:	e001      	b.n	80125a0 <RegionRU864LinkAdrReq+0x7c>
            status &= 0xFE; // Channel mask KO
 801259c:	f04f 0a06 	mov.w	sl, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80125a0:	7a33      	ldrb	r3, [r6, #8]
 80125a2:	42ab      	cmp	r3, r5
 80125a4:	d919      	bls.n	80125da <RegionRU864LinkAdrReq+0xb6>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80125a6:	6870      	ldr	r0, [r6, #4]
 80125a8:	a90c      	add	r1, sp, #48	; 0x30
 80125aa:	4428      	add	r0, r5
 80125ac:	f7fd f8a6 	bl	800f6fc <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 80125b0:	b198      	cbz	r0, 80125da <RegionRU864LinkAdrReq+0xb6>
        bytesProcessed += nextIndex;
 80125b2:	4405      	add	r5, r0
 80125b4:	b2ed      	uxtb	r5, r5
        chMask = linkAdrParams.ChMask;
 80125b6:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80125ba:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80125be:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 80125c2:	b90a      	cbnz	r2, 80125c8 <RegionRU864LinkAdrReq+0xa4>
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d0e6      	beq.n	8012596 <RegionRU864LinkAdrReq+0x72>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80125c8:	1e53      	subs	r3, r2, #1
 80125ca:	b2db      	uxtb	r3, r3
 80125cc:	2b04      	cmp	r3, #4
 80125ce:	d9e5      	bls.n	801259c <RegionRU864LinkAdrReq+0x78>
 80125d0:	2a06      	cmp	r2, #6
 80125d2:	d9b7      	bls.n	8012544 <RegionRU864LinkAdrReq+0x20>
            status &= 0xFE; // Channel mask KO
 80125d4:	f04f 0a06 	mov.w	sl, #6
 80125d8:	e7e2      	b.n	80125a0 <RegionRU864LinkAdrReq+0x7c>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80125da:	2302      	movs	r3, #2
 80125dc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80125e0:	7a73      	ldrb	r3, [r6, #9]
 80125e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionRU864GetPhyParam( &getPhy );
 80125e6:	a80a      	add	r0, sp, #40	; 0x28
 80125e8:	f7ff fcb0 	bl	8011f4c <RegionRU864GetPhyParam>

    linkAdrVerifyParams.Status = status;
 80125ec:	f88d a008 	strb.w	sl, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80125f0:	7ab3      	ldrb	r3, [r6, #10]
 80125f2:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80125f6:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 80125fa:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80125fe:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 8012602:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8012606:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 801260a:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801260e:	f996 300b 	ldrsb.w	r3, [r6, #11]
 8012612:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8012616:	f996 300c 	ldrsb.w	r3, [r6, #12]
 801261a:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801261e:	f996 300d 	ldrsb.w	r3, [r6, #13]
 8012622:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = RU864_MAX_NB_CHANNELS;
 8012626:	2308      	movs	r3, #8
 8012628:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801262c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8012630:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8012632:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = RU864_TX_MAX_DATARATE;
 8012636:	2307      	movs	r3, #7
 8012638:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801263c:	4a19      	ldr	r2, [pc, #100]	; (80126a4 <RegionRU864LinkAdrReq+0x180>)
 801263e:	6812      	ldr	r2, [r2, #0]
 8012640:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = RU864_MIN_TX_POWER;
 8012642:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = RU864_MAX_TX_POWER;
 8012646:	2300      	movs	r3, #0
 8012648:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801264c:	6833      	ldr	r3, [r6, #0]
 801264e:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8012650:	ab0c      	add	r3, sp, #48	; 0x30
 8012652:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8012656:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 801265a:	a801      	add	r0, sp, #4
 801265c:	f7fd f86a 	bl	800f734 <RegionCommonLinkAdrReqVerifyParams>
 8012660:	4604      	mov	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8012662:	2807      	cmp	r0, #7
 8012664:	d010      	beq.n	8012688 <RegionRU864LinkAdrReq+0x164>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8012666:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 801266a:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 801266e:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 8012672:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 8012676:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 801267a:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 801267c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801267e:	701d      	strb	r5, [r3, #0]

#endif /* REGION_RU864 */
    return status;
}
 8012680:	4620      	mov	r0, r4
 8012682:	b00e      	add	sp, #56	; 0x38
 8012684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8012688:	4e06      	ldr	r6, [pc, #24]	; (80126a4 <RegionRU864LinkAdrReq+0x180>)
 801268a:	6830      	ldr	r0, [r6, #0]
 801268c:	220c      	movs	r2, #12
 801268e:	2100      	movs	r1, #0
 8012690:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8012694:	f001 ff0d 	bl	80144b2 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8012698:	6833      	ldr	r3, [r6, #0]
 801269a:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801269e:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
 80126a2:	e7e0      	b.n	8012666 <RegionRU864LinkAdrReq+0x142>
 80126a4:	20001468 	.word	0x20001468

080126a8 <RegionRU864RxParamSetupReq>:

uint8_t RegionRU864RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80126a8:	b538      	push	{r3, r4, r5, lr}
 80126aa:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_RU864 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 80126ac:	6840      	ldr	r0, [r0, #4]
 80126ae:	f7ff fc07 	bl	8011ec0 <VerifyRfFreq>
 80126b2:	b1a0      	cbz	r0, 80126de <RegionRU864RxParamSetupReq+0x36>
    uint8_t status = 0x07;
 80126b4:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, RU864_RX_MIN_DATARATE, RU864_RX_MAX_DATARATE ) == false )
 80126b6:	2207      	movs	r2, #7
 80126b8:	2100      	movs	r1, #0
 80126ba:	f994 0000 	ldrsb.w	r0, [r4]
 80126be:	f7fc fefa 	bl	800f4b6 <RegionCommonValueInRange>
 80126c2:	b908      	cbnz	r0, 80126c8 <RegionRU864RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 80126c4:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, RU864_MIN_RX1_DR_OFFSET, RU864_MAX_RX1_DR_OFFSET ) == false )
 80126c8:	2205      	movs	r2, #5
 80126ca:	2100      	movs	r1, #0
 80126cc:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80126d0:	f7fc fef1 	bl	800f4b6 <RegionCommonValueInRange>
 80126d4:	b908      	cbnz	r0, 80126da <RegionRU864RxParamSetupReq+0x32>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80126d6:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_RU864 */
    return status;
}
 80126da:	4628      	mov	r0, r5
 80126dc:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 80126de:	2506      	movs	r5, #6
 80126e0:	e7e9      	b.n	80126b6 <RegionRU864RxParamSetupReq+0xe>

080126e2 <RegionRU864TxParamSetupReq>:

int8_t RegionRU864TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 80126e2:	f04f 30ff 	mov.w	r0, #4294967295
 80126e6:	4770      	bx	lr

080126e8 <RegionRU864DlChannelReq>:

int8_t RegionRU864DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80126e8:	b510      	push	{r4, lr}
 80126ea:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_RU864 )

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 80126ec:	6840      	ldr	r0, [r0, #4]
 80126ee:	f7ff fbe7 	bl	8011ec0 <VerifyRfFreq>
 80126f2:	b170      	cbz	r0, 8012712 <RegionRU864DlChannelReq+0x2a>
    uint8_t status = 0x03;
 80126f4:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80126f6:	4b0b      	ldr	r3, [pc, #44]	; (8012724 <RegionRU864DlChannelReq+0x3c>)
 80126f8:	681a      	ldr	r2, [r3, #0]
 80126fa:	7823      	ldrb	r3, [r4, #0]
 80126fc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8012700:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8012704:	b909      	cbnz	r1, 801270a <RegionRU864DlChannelReq+0x22>
    {
        status &= 0xFD;
 8012706:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801270a:	2803      	cmp	r0, #3
 801270c:	d003      	beq.n	8012716 <RegionRU864DlChannelReq+0x2e>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_RU864 */
    return status;
}
 801270e:	b240      	sxtb	r0, r0
 8012710:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 8012712:	2002      	movs	r0, #2
 8012714:	e7ef      	b.n	80126f6 <RegionRU864DlChannelReq+0xe>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8012716:	6861      	ldr	r1, [r4, #4]
 8012718:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801271c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012720:	6059      	str	r1, [r3, #4]
 8012722:	e7f4      	b.n	801270e <RegionRU864DlChannelReq+0x26>
 8012724:	20001468 	.word	0x20001468

08012728 <RegionRU864AlternateDr>:
#if defined( REGION_RU864 )
    return currentDr;
#else
    return -1;
#endif /* REGION_RU864 */
}
 8012728:	4770      	bx	lr
	...

0801272c <RegionRU864NextChannel>:

LoRaMacStatus_t RegionRU864NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801272c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801272e:	b095      	sub	sp, #84	; 0x54
 8012730:	4604      	mov	r4, r0
 8012732:	460f      	mov	r7, r1
 8012734:	4616      	mov	r6, r2
 8012736:	461d      	mov	r5, r3
#if defined( REGION_RU864 )
    uint8_t nbEnabledChannels = 0;
 8012738:	2100      	movs	r1, #0
 801273a:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    uint8_t nbRestrictedChannels = 0;
 801273e:	f88d 104e 	strb.w	r1, [sp, #78]	; 0x4e
    uint8_t enabledChannels[RU864_MAX_NB_CHANNELS] = { 0 };
 8012742:	9111      	str	r1, [sp, #68]	; 0x44
 8012744:	9112      	str	r1, [sp, #72]	; 0x48
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = RU864_JOIN_CHANNELS;
 8012746:	2303      	movs	r3, #3
 8012748:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 801274c:	4b32      	ldr	r3, [pc, #200]	; (8012818 <RegionRU864NextChannel+0xec>)
 801274e:	6818      	ldr	r0, [r3, #0]
 8012750:	2201      	movs	r2, #1
 8012752:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8012756:	f7fc ff0a 	bl	800f56e <RegionCommonCountChannels>
 801275a:	b938      	cbnz	r0, 801276c <RegionRU864NextChannel+0x40>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 801275c:	4b2e      	ldr	r3, [pc, #184]	; (8012818 <RegionRU864NextChannel+0xec>)
 801275e:	681a      	ldr	r2, [r3, #0]
 8012760:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 8012764:	f043 0303 	orr.w	r3, r3, #3
 8012768:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801276c:	7a63      	ldrb	r3, [r4, #9]
 801276e:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8012772:	7a23      	ldrb	r3, [r4, #8]
 8012774:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8012778:	4b27      	ldr	r3, [pc, #156]	; (8012818 <RegionRU864NextChannel+0xec>)
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	f503 6290 	add.w	r2, r3, #1152	; 0x480
 8012780:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8012782:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8012784:	4b25      	ldr	r3, [pc, #148]	; (801281c <RegionRU864NextChannel+0xf0>)
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = RU864_MAX_NB_CHANNELS;
 801278a:	2308      	movs	r3, #8
 801278c:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 8012790:	f10d 030a 	add.w	r3, sp, #10
 8012794:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8012796:	6823      	ldr	r3, [r4, #0]
 8012798:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801279a:	6863      	ldr	r3, [r4, #4]
 801279c:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801279e:	7aa3      	ldrb	r3, [r4, #10]
 80127a0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = RU864_MAX_NB_BANDS;
 80127a4:	2301      	movs	r3, #1
 80127a6:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80127aa:	ab0c      	add	r3, sp, #48	; 0x30
 80127ac:	6921      	ldr	r1, [r4, #16]
 80127ae:	68e0      	ldr	r0, [r4, #12]
 80127b0:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80127b4:	7d23      	ldrb	r3, [r4, #20]
 80127b6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80127ba:	8ae1      	ldrh	r1, [r4, #22]
 80127bc:	f994 0008 	ldrsb.w	r0, [r4, #8]
 80127c0:	f7ff fb92 	bl	8011ee8 <GetTimeOnAir>
 80127c4:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80127c6:	ab03      	add	r3, sp, #12
 80127c8:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80127ca:	9601      	str	r6, [sp, #4]
 80127cc:	f10d 034e 	add.w	r3, sp, #78	; 0x4e
 80127d0:	9300      	str	r3, [sp, #0]
 80127d2:	f10d 034f 	add.w	r3, sp, #79	; 0x4f
 80127d6:	aa11      	add	r2, sp, #68	; 0x44
 80127d8:	4629      	mov	r1, r5
 80127da:	a809      	add	r0, sp, #36	; 0x24
 80127dc:	f7fd f8ba 	bl	800f954 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80127e0:	4604      	mov	r4, r0
 80127e2:	b120      	cbz	r0, 80127ee <RegionRU864NextChannel+0xc2>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80127e4:	280c      	cmp	r0, #12
 80127e6:	d00d      	beq.n	8012804 <RegionRU864NextChannel+0xd8>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_RU864 */
}
 80127e8:	4620      	mov	r0, r4
 80127ea:	b015      	add	sp, #84	; 0x54
 80127ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80127ee:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 80127f2:	3901      	subs	r1, #1
 80127f4:	f001 fe3a 	bl	801446c <randr>
 80127f8:	ab14      	add	r3, sp, #80	; 0x50
 80127fa:	4418      	add	r0, r3
 80127fc:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
 8012800:	703b      	strb	r3, [r7, #0]
 8012802:	e7f1      	b.n	80127e8 <RegionRU864NextChannel+0xbc>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8012804:	4b04      	ldr	r3, [pc, #16]	; (8012818 <RegionRU864NextChannel+0xec>)
 8012806:	681a      	ldr	r2, [r3, #0]
 8012808:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 801280c:	f043 0303 	orr.w	r3, r3, #3
 8012810:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
 8012814:	e7e8      	b.n	80127e8 <RegionRU864NextChannel+0xbc>
 8012816:	bf00      	nop
 8012818:	20001468 	.word	0x20001468
 801281c:	20001464 	.word	0x20001464

08012820 <RegionRU864ChannelAdd>:

LoRaMacStatus_t RegionRU864ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8012820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined( REGION_RU864 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 8012822:	7905      	ldrb	r5, [r0, #4]

    if( id < RU864_NUMB_DEFAULT_CHANNELS )
 8012824:	2d01      	cmp	r5, #1
 8012826:	d94b      	bls.n	80128c0 <RegionRU864ChannelAdd+0xa0>
 8012828:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= RU864_MAX_NB_CHANNELS )
 801282a:	2d07      	cmp	r5, #7
 801282c:	d84a      	bhi.n	80128c4 <RegionRU864ChannelAdd+0xa4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, RU864_TX_MIN_DATARATE, RU864_TX_MAX_DATARATE ) == false )
 801282e:	6803      	ldr	r3, [r0, #0]
 8012830:	7a18      	ldrb	r0, [r3, #8]
 8012832:	f340 0003 	sbfx	r0, r0, #0, #4
 8012836:	2207      	movs	r2, #7
 8012838:	2100      	movs	r1, #0
 801283a:	b240      	sxtb	r0, r0
 801283c:	f7fc fe3b 	bl	800f4b6 <RegionCommonValueInRange>
 8012840:	2800      	cmp	r0, #0
 8012842:	d039      	beq.n	80128b8 <RegionRU864ChannelAdd+0x98>
    bool drInvalid = false;
 8012844:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, RU864_TX_MIN_DATARATE, RU864_TX_MAX_DATARATE ) == false )
 8012846:	6823      	ldr	r3, [r4, #0]
 8012848:	7a18      	ldrb	r0, [r3, #8]
 801284a:	f340 1003 	sbfx	r0, r0, #4, #4
 801284e:	2207      	movs	r2, #7
 8012850:	2100      	movs	r1, #0
 8012852:	b240      	sxtb	r0, r0
 8012854:	f7fc fe2f 	bl	800f4b6 <RegionCommonValueInRange>
 8012858:	b900      	cbnz	r0, 801285c <RegionRU864ChannelAdd+0x3c>
    {
        drInvalid = true;
 801285a:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801285c:	6821      	ldr	r1, [r4, #0]
 801285e:	7a0b      	ldrb	r3, [r1, #8]
 8012860:	f343 0203 	sbfx	r2, r3, #0, #4
 8012864:	b252      	sxtb	r2, r2
 8012866:	f343 1303 	sbfx	r3, r3, #4, #4
 801286a:	b25b      	sxtb	r3, r3
 801286c:	429a      	cmp	r2, r3
 801286e:	dd00      	ble.n	8012872 <RegionRU864ChannelAdd+0x52>
    {
        drInvalid = true;
 8012870:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8012872:	6808      	ldr	r0, [r1, #0]
 8012874:	f7ff fb24 	bl	8011ec0 <VerifyRfFreq>
 8012878:	b300      	cbz	r0, 80128bc <RegionRU864ChannelAdd+0x9c>
    bool freqInvalid = false;
 801287a:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801287c:	b106      	cbz	r6, 8012880 <RegionRU864ChannelAdd+0x60>
 801287e:	bb1b      	cbnz	r3, 80128c8 <RegionRU864ChannelAdd+0xa8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 8012880:	bb26      	cbnz	r6, 80128cc <RegionRU864ChannelAdd+0xac>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 8012882:	bb2b      	cbnz	r3, 80128d0 <RegionRU864ChannelAdd+0xb0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8012884:	4f13      	ldr	r7, [pc, #76]	; (80128d4 <RegionRU864ChannelAdd+0xb4>)
 8012886:	683b      	ldr	r3, [r7, #0]
 8012888:	006e      	lsls	r6, r5, #1
 801288a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 801288e:	220c      	movs	r2, #12
 8012890:	6821      	ldr	r1, [r4, #0]
 8012892:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012896:	f001 fdf6 	bl	8014486 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 801289a:	683a      	ldr	r2, [r7, #0]
 801289c:	442e      	add	r6, r5
 801289e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80128a2:	2000      	movs	r0, #0
 80128a4:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80128a6:	2301      	movs	r3, #1
 80128a8:	fa03 f505 	lsl.w	r5, r3, r5
 80128ac:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 80128b0:	431d      	orrs	r5, r3
 80128b2:	f8a2 5480 	strh.w	r5, [r2, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 80128b6:	e006      	b.n	80128c6 <RegionRU864ChannelAdd+0xa6>
        drInvalid = true;
 80128b8:	2601      	movs	r6, #1
 80128ba:	e7c4      	b.n	8012846 <RegionRU864ChannelAdd+0x26>
            freqInvalid = true;
 80128bc:	2301      	movs	r3, #1
 80128be:	e7dd      	b.n	801287c <RegionRU864ChannelAdd+0x5c>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80128c0:	2006      	movs	r0, #6
 80128c2:	e000      	b.n	80128c6 <RegionRU864ChannelAdd+0xa6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80128c4:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_RU864 */
}
 80128c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80128c8:	2006      	movs	r0, #6
 80128ca:	e7fc      	b.n	80128c6 <RegionRU864ChannelAdd+0xa6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 80128cc:	2005      	movs	r0, #5
 80128ce:	e7fa      	b.n	80128c6 <RegionRU864ChannelAdd+0xa6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80128d0:	2004      	movs	r0, #4
 80128d2:	e7f8      	b.n	80128c6 <RegionRU864ChannelAdd+0xa6>
 80128d4:	20001468 	.word	0x20001468

080128d8 <RegionRU864ChannelsRemove>:

bool RegionRU864ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_RU864 )
    uint8_t id = channelRemove->ChannelId;
 80128d8:	7801      	ldrb	r1, [r0, #0]

    if( id < RU864_NUMB_DEFAULT_CHANNELS )
 80128da:	2901      	cmp	r1, #1
 80128dc:	d911      	bls.n	8012902 <RegionRU864ChannelsRemove+0x2a>
{
 80128de:	b510      	push	{r4, lr}
    {
        return false;
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80128e0:	4b09      	ldr	r3, [pc, #36]	; (8012908 <RegionRU864ChannelsRemove+0x30>)
 80128e2:	6818      	ldr	r0, [r3, #0]
 80128e4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80128e8:	009c      	lsls	r4, r3, #2
 80128ea:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80128ee:	2200      	movs	r2, #0
 80128f0:	5102      	str	r2, [r0, r4]
 80128f2:	605a      	str	r2, [r3, #4]
 80128f4:	609a      	str	r2, [r3, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, RU864_MAX_NB_CHANNELS );
 80128f6:	2208      	movs	r2, #8
 80128f8:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 80128fc:	f7fc fe1d 	bl	800f53a <RegionCommonChanDisable>
#else
    return false;
#endif /* REGION_RU864 */
}
 8012900:	bd10      	pop	{r4, pc}
        return false;
 8012902:	2000      	movs	r0, #0
}
 8012904:	4770      	bx	lr
 8012906:	bf00      	nop
 8012908:	20001468 	.word	0x20001468

0801290c <RegionRU864ApplyCFList>:
{
 801290c:	b570      	push	{r4, r5, r6, lr}
 801290e:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8012910:	2350      	movs	r3, #80	; 0x50
 8012912:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 8012916:	7903      	ldrb	r3, [r0, #4]
 8012918:	2b10      	cmp	r3, #16
 801291a:	d135      	bne.n	8012988 <RegionRU864ApplyCFList+0x7c>
 801291c:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 801291e:	6803      	ldr	r3, [r0, #0]
 8012920:	7bdd      	ldrb	r5, [r3, #15]
 8012922:	2d00      	cmp	r5, #0
 8012924:	d130      	bne.n	8012988 <RegionRU864ApplyCFList+0x7c>
    for( uint8_t i = 0, chanIdx = RU864_NUMB_DEFAULT_CHANNELS; chanIdx < RU864_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8012926:	2402      	movs	r4, #2
 8012928:	e00e      	b.n	8012948 <RegionRU864ApplyCFList+0x3c>
            newChannel.Frequency = 0;
 801292a:	2300      	movs	r3, #0
 801292c:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 801292e:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 8012932:	9304      	str	r3, [sp, #16]
 8012934:	e01d      	b.n	8012972 <RegionRU864ApplyCFList+0x66>
            channelRemove.ChannelId = chanIdx;
 8012936:	f88d 4000 	strb.w	r4, [sp]
            RegionRU864ChannelsRemove( &channelRemove );
 801293a:	4668      	mov	r0, sp
 801293c:	f7ff ffcc 	bl	80128d8 <RegionRU864ChannelsRemove>
    for( uint8_t i = 0, chanIdx = RU864_NUMB_DEFAULT_CHANNELS; chanIdx < RU864_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8012940:	3503      	adds	r5, #3
 8012942:	b2ed      	uxtb	r5, r5
 8012944:	3401      	adds	r4, #1
 8012946:	b2e4      	uxtb	r4, r4
 8012948:	2c07      	cmp	r4, #7
 801294a:	d81d      	bhi.n	8012988 <RegionRU864ApplyCFList+0x7c>
        if( chanIdx < ( RU864_NUMB_CHANNELS_CF_LIST + RU864_NUMB_DEFAULT_CHANNELS ) )
 801294c:	2c06      	cmp	r4, #6
 801294e:	d8ec      	bhi.n	801292a <RegionRU864ApplyCFList+0x1e>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8012950:	6832      	ldr	r2, [r6, #0]
 8012952:	5d53      	ldrb	r3, [r2, r5]
 8012954:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8012956:	442a      	add	r2, r5
 8012958:	7851      	ldrb	r1, [r2, #1]
 801295a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801295e:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8012960:	7892      	ldrb	r2, [r2, #2]
 8012962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 8012966:	2264      	movs	r2, #100	; 0x64
 8012968:	fb02 f303 	mul.w	r3, r2, r3
 801296c:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 801296e:	2300      	movs	r3, #0
 8012970:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 8012972:	9b03      	ldr	r3, [sp, #12]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d0de      	beq.n	8012936 <RegionRU864ApplyCFList+0x2a>
            channelAdd.NewChannel = &newChannel;
 8012978:	ab03      	add	r3, sp, #12
 801297a:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 801297c:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionRU864ChannelAdd( &channelAdd );
 8012980:	a801      	add	r0, sp, #4
 8012982:	f7ff ff4d 	bl	8012820 <RegionRU864ChannelAdd>
 8012986:	e7db      	b.n	8012940 <RegionRU864ApplyCFList+0x34>
}
 8012988:	b006      	add	sp, #24
 801298a:	bd70      	pop	{r4, r5, r6, pc}

0801298c <RegionRU864NewChannelReq>:
{
 801298c:	b500      	push	{lr}
 801298e:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 8012990:	6803      	ldr	r3, [r0, #0]
 8012992:	681a      	ldr	r2, [r3, #0]
 8012994:	b952      	cbnz	r2, 80129ac <RegionRU864NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8012996:	7903      	ldrb	r3, [r0, #4]
 8012998:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionRU864ChannelsRemove( &channelRemove ) == false )
 801299c:	a801      	add	r0, sp, #4
 801299e:	f7ff ff9b 	bl	80128d8 <RegionRU864ChannelsRemove>
 80129a2:	b1d0      	cbz	r0, 80129da <RegionRU864NewChannelReq+0x4e>
    uint8_t status = 0x03;
 80129a4:	2003      	movs	r0, #3
}
 80129a6:	b005      	add	sp, #20
 80129a8:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80129ac:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80129ae:	7903      	ldrb	r3, [r0, #4]
 80129b0:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionRU864ChannelAdd( &channelAdd ) )
 80129b4:	a802      	add	r0, sp, #8
 80129b6:	f7ff ff33 	bl	8012820 <RegionRU864ChannelAdd>
 80129ba:	2806      	cmp	r0, #6
 80129bc:	d80b      	bhi.n	80129d6 <RegionRU864NewChannelReq+0x4a>
 80129be:	e8df f000 	tbb	[pc, r0]
 80129c2:	0a04      	.short	0x0a04
 80129c4:	060e0a0a 	.word	0x060e0a0a
 80129c8:	08          	.byte	0x08
 80129c9:	00          	.byte	0x00
 80129ca:	2003      	movs	r0, #3
 80129cc:	e7eb      	b.n	80129a6 <RegionRU864NewChannelReq+0x1a>
                status &= 0xFD;
 80129ce:	2001      	movs	r0, #1
                break;
 80129d0:	e7e9      	b.n	80129a6 <RegionRU864NewChannelReq+0x1a>
                status &= 0xFC;
 80129d2:	2000      	movs	r0, #0
                break;
 80129d4:	e7e7      	b.n	80129a6 <RegionRU864NewChannelReq+0x1a>
                status &= 0xFC;
 80129d6:	2000      	movs	r0, #0
                break;
 80129d8:	e7e5      	b.n	80129a6 <RegionRU864NewChannelReq+0x1a>
            status &= 0xFC;
 80129da:	2000      	movs	r0, #0
 80129dc:	e7e3      	b.n	80129a6 <RegionRU864NewChannelReq+0x1a>
                status &= 0xFE;
 80129de:	2002      	movs	r0, #2
 80129e0:	e7e1      	b.n	80129a6 <RegionRU864NewChannelReq+0x1a>
	...

080129e4 <RegionRU864SetContinuousWave>:

void RegionRU864SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 80129e4:	b538      	push	{r3, r4, r5, lr}
 80129e6:	4604      	mov	r4, r0
#if defined( REGION_RU864 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 80129e8:	4b12      	ldr	r3, [pc, #72]	; (8012a34 <RegionRU864SetContinuousWave+0x50>)
 80129ea:	6819      	ldr	r1, [r3, #0]
 80129ec:	4d12      	ldr	r5, [pc, #72]	; (8012a38 <RegionRU864SetContinuousWave+0x54>)
 80129ee:	682b      	ldr	r3, [r5, #0]
 80129f0:	7802      	ldrb	r2, [r0, #0]
 80129f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80129f6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80129fa:	7a53      	ldrb	r3, [r2, #9]
 80129fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012a00:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8012a04:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8012a08:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8012a0c:	f7fd f809 	bl	800fa22 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8012a10:	682a      	ldr	r2, [r5, #0]
 8012a12:	7823      	ldrb	r3, [r4, #0]
 8012a14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012a18:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8012a1c:	68a2      	ldr	r2, [r4, #8]
 8012a1e:	6861      	ldr	r1, [r4, #4]
 8012a20:	f7fc ff1c 	bl	800f85c <RegionCommonComputeTxPower>
 8012a24:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8012a26:	4b05      	ldr	r3, [pc, #20]	; (8012a3c <RegionRU864SetContinuousWave+0x58>)
 8012a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a2a:	89a2      	ldrh	r2, [r4, #12]
 8012a2c:	4628      	mov	r0, r5
 8012a2e:	4798      	blx	r3
#endif /* REGION_RU864 */
}
 8012a30:	bd38      	pop	{r3, r4, r5, pc}
 8012a32:	bf00      	nop
 8012a34:	20001464 	.word	0x20001464
 8012a38:	20001468 	.word	0x20001468
 8012a3c:	08018318 	.word	0x08018318

08012a40 <RegionRU864ApplyDrOffset>:

uint8_t RegionRU864ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_RU864 )
    int8_t datarate = dr - drOffset;
 8012a40:	1a88      	subs	r0, r1, r2
 8012a42:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 8012a44:	2800      	cmp	r0, #0
 8012a46:	db01      	blt.n	8012a4c <RegionRU864ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_RU864 */
}
 8012a48:	b2c0      	uxtb	r0, r0
 8012a4a:	4770      	bx	lr
        datarate = DR_0;
 8012a4c:	2000      	movs	r0, #0
 8012a4e:	e7fb      	b.n	8012a48 <RegionRU864ApplyDrOffset+0x8>

08012a50 <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 8012a50:	b510      	push	{r4, lr}
 8012a52:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8012a54:	4b10      	ldr	r3, [pc, #64]	; (8012a98 <VerifyRfFreq+0x48>)
 8012a56:	6a1b      	ldr	r3, [r3, #32]
 8012a58:	4798      	blx	r3
 8012a5a:	b1c8      	cbz	r0, 8012a90 <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8012a5c:	4b0f      	ldr	r3, [pc, #60]	; (8012a9c <VerifyRfFreq+0x4c>)
 8012a5e:	4423      	add	r3, r4
 8012a60:	4a0f      	ldr	r2, [pc, #60]	; (8012aa0 <VerifyRfFreq+0x50>)
 8012a62:	4293      	cmp	r3, r2
 8012a64:	d813      	bhi.n	8012a8e <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8012a66:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 8012a6a:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 8012a6e:	f202 7245 	addw	r2, r2, #1861	; 0x745
 8012a72:	fba2 1203 	umull	r1, r2, r2, r3
 8012a76:	0c92      	lsrs	r2, r2, #18
 8012a78:	490a      	ldr	r1, [pc, #40]	; (8012aa4 <VerifyRfFreq+0x54>)
 8012a7a:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 8012a7e:	b942      	cbnz	r2, 8012a92 <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8012a80:	4b09      	ldr	r3, [pc, #36]	; (8012aa8 <VerifyRfFreq+0x58>)
 8012a82:	4423      	add	r3, r4
 8012a84:	4a09      	ldr	r2, [pc, #36]	; (8012aac <VerifyRfFreq+0x5c>)
 8012a86:	4293      	cmp	r3, r2
 8012a88:	d902      	bls.n	8012a90 <VerifyRfFreq+0x40>
    {
        return false;
 8012a8a:	2000      	movs	r0, #0
 8012a8c:	e000      	b.n	8012a90 <VerifyRfFreq+0x40>
        return false;
 8012a8e:	2000      	movs	r0, #0
    }
    return true;
}
 8012a90:	bd10      	pop	{r4, pc}
        return false;
 8012a92:	2000      	movs	r0, #0
 8012a94:	e7fc      	b.n	8012a90 <VerifyRfFreq+0x40>
 8012a96:	bf00      	nop
 8012a98:	08018318 	.word	0x08018318
 8012a9c:	c8f78f60 	.word	0xc8f78f60
 8012aa0:	00401640 	.word	0x00401640
 8012aa4:	000927c0 	.word	0x000927c0
 8012aa8:	ca37fea0 	.word	0xca37fea0
 8012aac:	01808580 	.word	0x01808580

08012ab0 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8012ab0:	b570      	push	{r4, r5, r6, lr}
 8012ab2:	b084      	sub	sp, #16
 8012ab4:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 8012ab6:	4b0a      	ldr	r3, [pc, #40]	; (8012ae0 <GetTimeOnAir+0x30>)
 8012ab8:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8012aba:	490a      	ldr	r1, [pc, #40]	; (8012ae4 <GetTimeOnAir+0x34>)
 8012abc:	f7fc ffb6 	bl	800fa2c <RegionCommonGetBandwidth>
 8012ac0:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8012ac2:	4b09      	ldr	r3, [pc, #36]	; (8012ae8 <GetTimeOnAir+0x38>)
 8012ac4:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8012ac6:	2001      	movs	r0, #1
 8012ac8:	9003      	str	r0, [sp, #12]
 8012aca:	b2e4      	uxtb	r4, r4
 8012acc:	9402      	str	r4, [sp, #8]
 8012ace:	2200      	movs	r2, #0
 8012ad0:	9201      	str	r2, [sp, #4]
 8012ad2:	2208      	movs	r2, #8
 8012ad4:	9200      	str	r2, [sp, #0]
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	4632      	mov	r2, r6
 8012ada:	47a8      	blx	r5
}
 8012adc:	b004      	add	sp, #16
 8012ade:	bd70      	pop	{r4, r5, r6, pc}
 8012ae0:	08017df0 	.word	0x08017df0
 8012ae4:	08017d9c 	.word	0x08017d9c
 8012ae8:	08018318 	.word	0x08018318

08012aec <LimitTxPower>:
{
 8012aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012aee:	4606      	mov	r6, r0
 8012af0:	4615      	mov	r5, r2
 8012af2:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8012af4:	f7fc ff95 	bl	800fa22 <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 8012af8:	2d04      	cmp	r5, #4
 8012afa:	d105      	bne.n	8012b08 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8012afc:	4634      	mov	r4, r6
 8012afe:	2e02      	cmp	r6, #2
 8012b00:	bfb8      	it	lt
 8012b02:	2402      	movlt	r4, #2
}
 8012b04:	4620      	mov	r0, r4
 8012b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b08:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8012b0a:	2204      	movs	r2, #4
 8012b0c:	2100      	movs	r1, #0
 8012b0e:	4638      	mov	r0, r7
 8012b10:	f7fc fd2d 	bl	800f56e <RegionCommonCountChannels>
 8012b14:	2831      	cmp	r0, #49	; 0x31
 8012b16:	d8f5      	bhi.n	8012b04 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8012b18:	4634      	mov	r4, r6
 8012b1a:	2e05      	cmp	r6, #5
 8012b1c:	bfb8      	it	lt
 8012b1e:	2405      	movlt	r4, #5
 8012b20:	e7f0      	b.n	8012b04 <LimitTxPower+0x18>
	...

08012b24 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8012b24:	b500      	push	{lr}
 8012b26:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 8012b28:	2300      	movs	r3, #0
 8012b2a:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8012b2c:	7803      	ldrb	r3, [r0, #0]
 8012b2e:	3b01      	subs	r3, #1
 8012b30:	2b38      	cmp	r3, #56	; 0x38
 8012b32:	d820      	bhi.n	8012b76 <RegionUS915GetPhyParam+0x52>
 8012b34:	e8df f003 	tbb	[pc, r3]
 8012b38:	1f1f1f1d 	.word	0x1f1f1f1d
 8012b3c:	1f1f1f1f 	.word	0x1f1f1f1f
 8012b40:	3e3b1f1f 	.word	0x3e3b1f1f
 8012b44:	4d1f4741 	.word	0x4d1f4741
 8012b48:	5d595551 	.word	0x5d595551
 8012b4c:	6e1f6561 	.word	0x6e1f6561
 8012b50:	807a7471 	.word	0x807a7471
 8012b54:	871f1f83 	.word	0x871f1f83
 8012b58:	1f1f238a 	.word	0x1f1f238a
 8012b5c:	1f1f1f1f 	.word	0x1f1f1f1f
 8012b60:	1f1f1f1f 	.word	0x1f1f1f1f
 8012b64:	8d1f1f1f 	.word	0x8d1f1f1f
 8012b68:	1fa19e94 	.word	0x1fa19e94
 8012b6c:	b1aeaba4 	.word	0xb1aeaba4
 8012b70:	b7          	.byte	0xb7
 8012b71:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8012b72:	2308      	movs	r3, #8
 8012b74:	9304      	str	r3, [sp, #16]
        }
    }

#endif /* REGION_US915 */
    return phyParam;
}
 8012b76:	9804      	ldr	r0, [sp, #16]
 8012b78:	b007      	add	sp, #28
 8012b7a:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 8012b7e:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8012b82:	f88d 3004 	strb.w	r3, [sp, #4]
 8012b86:	2304      	movs	r3, #4
 8012b88:	f88d 3005 	strb.w	r3, [sp, #5]
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	f88d 3006 	strb.w	r3, [sp, #6]
 8012b92:	2348      	movs	r3, #72	; 0x48
 8012b94:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8012b98:	4b46      	ldr	r3, [pc, #280]	; (8012cb4 <RegionUS915GetPhyParam+0x190>)
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8012ba0:	9202      	str	r2, [sp, #8]
 8012ba2:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8012ba4:	a801      	add	r0, sp, #4
 8012ba6:	f7fc ff1d 	bl	800f9e4 <RegionCommonGetNextLowerTxDr>
 8012baa:	9004      	str	r0, [sp, #16]
            break;
 8012bac:	e7e3      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8012bae:	2340      	movs	r3, #64	; 0x40
 8012bb0:	9304      	str	r3, [sp, #16]
            break;
 8012bb2:	e7e0      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8012bb4:	2320      	movs	r3, #32
 8012bb6:	9304      	str	r3, [sp, #16]
            break;
 8012bb8:	e7dd      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8012bba:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8012bbe:	4a3e      	ldr	r2, [pc, #248]	; (8012cb8 <RegionUS915GetPhyParam+0x194>)
 8012bc0:	5cd3      	ldrb	r3, [r2, r3]
 8012bc2:	9304      	str	r3, [sp, #16]
            break;
 8012bc4:	e7d7      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8012bc6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8012bca:	4a3c      	ldr	r2, [pc, #240]	; (8012cbc <RegionUS915GetPhyParam+0x198>)
 8012bcc:	5cd3      	ldrb	r3, [r2, r3]
 8012bce:	9304      	str	r3, [sp, #16]
            break;
 8012bd0:	e7d1      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_RX_WINDOW;
 8012bd2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8012bd6:	9304      	str	r3, [sp, #16]
            break;
 8012bd8:	e7cd      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8012bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012bde:	9304      	str	r3, [sp, #16]
            break;
 8012be0:	e7c9      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8012be2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8012be6:	9304      	str	r3, [sp, #16]
            break;
 8012be8:	e7c5      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8012bea:	f241 3388 	movw	r3, #5000	; 0x1388
 8012bee:	9304      	str	r3, [sp, #16]
            break;
 8012bf0:	e7c1      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8012bf2:	f241 7370 	movw	r3, #6000	; 0x1770
 8012bf6:	9304      	str	r3, [sp, #16]
            break;
 8012bf8:	e7bd      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8012bfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012bfe:	9304      	str	r3, [sp, #16]
            break;
 8012c00:	e7b9      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8012c02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012c06:	482e      	ldr	r0, [pc, #184]	; (8012cc0 <RegionUS915GetPhyParam+0x19c>)
 8012c08:	f001 fc30 	bl	801446c <randr>
 8012c0c:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 8012c10:	9004      	str	r0, [sp, #16]
            break;
 8012c12:	e7b0      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_FREQ;
 8012c14:	4b2b      	ldr	r3, [pc, #172]	; (8012cc4 <RegionUS915GetPhyParam+0x1a0>)
 8012c16:	9304      	str	r3, [sp, #16]
            break;
 8012c18:	e7ad      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_DR;
 8012c1a:	2308      	movs	r3, #8
 8012c1c:	9304      	str	r3, [sp, #16]
            break;
 8012c1e:	e7aa      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8012c20:	4b24      	ldr	r3, [pc, #144]	; (8012cb4 <RegionUS915GetPhyParam+0x190>)
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8012c28:	9304      	str	r3, [sp, #16]
            break;
 8012c2a:	e7a4      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8012c2c:	4b21      	ldr	r3, [pc, #132]	; (8012cb4 <RegionUS915GetPhyParam+0x190>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8012c34:	9304      	str	r3, [sp, #16]
            break;
 8012c36:	e79e      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8012c38:	2348      	movs	r3, #72	; 0x48
 8012c3a:	9304      	str	r3, [sp, #16]
            break;
 8012c3c:	e79b      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.Channels = RegionNvmGroup2->Channels;
 8012c3e:	4b1d      	ldr	r3, [pc, #116]	; (8012cb4 <RegionUS915GetPhyParam+0x190>)
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	9304      	str	r3, [sp, #16]
            break;
 8012c44:	e797      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8012c46:	4b20      	ldr	r3, [pc, #128]	; (8012cc8 <RegionUS915GetPhyParam+0x1a4>)
 8012c48:	9304      	str	r3, [sp, #16]
            break;
 8012c4a:	e794      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = 0;
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	9304      	str	r3, [sp, #16]
            break;
 8012c50:	e791      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8012c52:	4a1e      	ldr	r2, [pc, #120]	; (8012ccc <RegionUS915GetPhyParam+0x1a8>)
 8012c54:	491b      	ldr	r1, [pc, #108]	; (8012cc4 <RegionUS915GetPhyParam+0x1a0>)
 8012c56:	7900      	ldrb	r0, [r0, #4]
 8012c58:	f7fb f8d7 	bl	800de0a <RegionBaseUSCalcDownlinkFrequency>
 8012c5c:	9004      	str	r0, [sp, #16]
            break;
 8012c5e:	e78a      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8012c60:	2317      	movs	r3, #23
 8012c62:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8012c66:	2305      	movs	r3, #5
 8012c68:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8012c6c:	2303      	movs	r3, #3
 8012c6e:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 8012c72:	e780      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8012c74:	2308      	movs	r3, #8
 8012c76:	9304      	str	r3, [sp, #16]
            break;
 8012c78:	e77d      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8012c7a:	2308      	movs	r3, #8
 8012c7c:	9304      	str	r3, [sp, #16]
            break;
 8012c7e:	e77a      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8012c80:	4a12      	ldr	r2, [pc, #72]	; (8012ccc <RegionUS915GetPhyParam+0x1a8>)
 8012c82:	4910      	ldr	r1, [pc, #64]	; (8012cc4 <RegionUS915GetPhyParam+0x1a0>)
 8012c84:	7900      	ldrb	r0, [r0, #4]
 8012c86:	f7fb f8c0 	bl	800de0a <RegionBaseUSCalcDownlinkFrequency>
 8012c8a:	9004      	str	r0, [sp, #16]
            break;
 8012c8c:	e773      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8012c8e:	2308      	movs	r3, #8
 8012c90:	9304      	str	r3, [sp, #16]
            break;
 8012c92:	e770      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8012c94:	2308      	movs	r3, #8
 8012c96:	9304      	str	r3, [sp, #16]
            break;
 8012c98:	e76d      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8012c9a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8012c9e:	4a0c      	ldr	r2, [pc, #48]	; (8012cd0 <RegionUS915GetPhyParam+0x1ac>)
 8012ca0:	5cd3      	ldrb	r3, [r2, r3]
 8012ca2:	9304      	str	r3, [sp, #16]
            break;
 8012ca4:	e767      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8012ca6:	490b      	ldr	r1, [pc, #44]	; (8012cd4 <RegionUS915GetPhyParam+0x1b0>)
 8012ca8:	f990 0001 	ldrsb.w	r0, [r0, #1]
 8012cac:	f7fc febe 	bl	800fa2c <RegionCommonGetBandwidth>
 8012cb0:	9004      	str	r0, [sp, #16]
            break;
 8012cb2:	e760      	b.n	8012b76 <RegionUS915GetPhyParam+0x52>
 8012cb4:	20001470 	.word	0x20001470
 8012cb8:	08017e10 	.word	0x08017e10
 8012cbc:	08017e00 	.word	0x08017e00
 8012cc0:	fffffc18 	.word	0xfffffc18
 8012cc4:	370870a0 	.word	0x370870a0
 8012cc8:	4200999a 	.word	0x4200999a
 8012ccc:	000927c0 	.word	0x000927c0
 8012cd0:	08017df0 	.word	0x08017df0
 8012cd4:	08017d9c 	.word	0x08017d9c

08012cd8 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8012cd8:	b530      	push	{r4, r5, lr}
 8012cda:	b083      	sub	sp, #12
#if defined( REGION_US915 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8012cdc:	4b0b      	ldr	r3, [pc, #44]	; (8012d0c <RegionUS915SetBandTxDone+0x34>)
 8012cde:	681d      	ldr	r5, [r3, #0]
 8012ce0:	4b0b      	ldr	r3, [pc, #44]	; (8012d10 <RegionUS915SetBandTxDone+0x38>)
 8012ce2:	681a      	ldr	r2, [r3, #0]
 8012ce4:	7803      	ldrb	r3, [r0, #0]
 8012ce6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012cea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012cee:	7a5b      	ldrb	r3, [r3, #9]
 8012cf0:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8012cf4:	6903      	ldr	r3, [r0, #16]
 8012cf6:	9300      	str	r3, [sp, #0]
 8012cf8:	68c3      	ldr	r3, [r0, #12]
 8012cfa:	7842      	ldrb	r2, [r0, #1]
 8012cfc:	6881      	ldr	r1, [r0, #8]
 8012cfe:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 8012d02:	f7fc fc5b 	bl	800f5bc <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_US915 */
}
 8012d06:	b003      	add	sp, #12
 8012d08:	bd30      	pop	{r4, r5, pc}
 8012d0a:	bf00      	nop
 8012d0c:	2000146c 	.word	0x2000146c
 8012d10:	20001470 	.word	0x20001470

08012d14 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8012d14:	b510      	push	{r4, lr}
 8012d16:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8012d18:	2301      	movs	r3, #1
 8012d1a:	f8ad 3000 	strh.w	r3, [sp]
 8012d1e:	2300      	movs	r3, #0
 8012d20:	f88d 3002 	strb.w	r3, [sp, #2]
 8012d24:	9301      	str	r3, [sp, #4]
 8012d26:	9302      	str	r3, [sp, #8]
 8012d28:	9303      	str	r3, [sp, #12]
 8012d2a:	9304      	str	r3, [sp, #16]
 8012d2c:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 8012d30:	7a04      	ldrb	r4, [r0, #8]
 8012d32:	b17c      	cbz	r4, 8012d54 <RegionUS915InitDefaults+0x40>
 8012d34:	3c01      	subs	r4, #1
 8012d36:	b2e4      	uxtb	r4, r4
 8012d38:	2c01      	cmp	r4, #1
 8012d3a:	f200 8082 	bhi.w	8012e42 <RegionUS915InitDefaults+0x12e>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8012d3e:	4b42      	ldr	r3, [pc, #264]	; (8012e48 <RegionUS915InitDefaults+0x134>)
 8012d40:	6818      	ldr	r0, [r3, #0]
 8012d42:	2206      	movs	r2, #6
 8012d44:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 8012d48:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8012d4c:	f7fc fc25 	bl	800f59a <RegionCommonChanMaskCopy>

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8012d50:	2300      	movs	r3, #0
 8012d52:	e074      	b.n	8012e3e <RegionUS915InitDefaults+0x12a>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8012d54:	6803      	ldr	r3, [r0, #0]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d073      	beq.n	8012e42 <RegionUS915InitDefaults+0x12e>
 8012d5a:	6842      	ldr	r2, [r0, #4]
 8012d5c:	2a00      	cmp	r2, #0
 8012d5e:	d070      	beq.n	8012e42 <RegionUS915InitDefaults+0x12e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8012d60:	493a      	ldr	r1, [pc, #232]	; (8012e4c <RegionUS915InitDefaults+0x138>)
 8012d62:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8012d64:	4938      	ldr	r1, [pc, #224]	; (8012e48 <RegionUS915InitDefaults+0x134>)
 8012d66:	600a      	str	r2, [r1, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8012d68:	2200      	movs	r2, #0
 8012d6a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8012d6e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8012d72:	2218      	movs	r2, #24
 8012d74:	4669      	mov	r1, sp
 8012d76:	4618      	mov	r0, r3
 8012d78:	f001 fb85 	bl	8014486 <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8012d7c:	e011      	b.n	8012da2 <RegionUS915InitDefaults+0x8e>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 8012d7e:	4b32      	ldr	r3, [pc, #200]	; (8012e48 <RegionUS915InitDefaults+0x134>)
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	4a33      	ldr	r2, [pc, #204]	; (8012e50 <RegionUS915InitDefaults+0x13c>)
 8012d84:	4933      	ldr	r1, [pc, #204]	; (8012e54 <RegionUS915InitDefaults+0x140>)
 8012d86:	fb02 1204 	mla	r2, r2, r4, r1
 8012d8a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8012d8e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8012d92:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 8012d96:	2230      	movs	r2, #48	; 0x30
 8012d98:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8012d9e:	3401      	adds	r4, #1
 8012da0:	b2e4      	uxtb	r4, r4
 8012da2:	2c3f      	cmp	r4, #63	; 0x3f
 8012da4:	d9eb      	bls.n	8012d7e <RegionUS915InitDefaults+0x6a>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8012da6:	2340      	movs	r3, #64	; 0x40
 8012da8:	e013      	b.n	8012dd2 <RegionUS915InitDefaults+0xbe>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8012daa:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 8012dae:	4a26      	ldr	r2, [pc, #152]	; (8012e48 <RegionUS915InitDefaults+0x134>)
 8012db0:	6812      	ldr	r2, [r2, #0]
 8012db2:	4c29      	ldr	r4, [pc, #164]	; (8012e58 <RegionUS915InitDefaults+0x144>)
 8012db4:	4829      	ldr	r0, [pc, #164]	; (8012e5c <RegionUS915InitDefaults+0x148>)
 8012db6:	fb04 0101 	mla	r1, r4, r1, r0
 8012dba:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8012dbe:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 8012dc2:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 8012dc6:	2144      	movs	r1, #68	; 0x44
 8012dc8:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 8012dca:	2100      	movs	r1, #0
 8012dcc:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8012dce:	3301      	adds	r3, #1
 8012dd0:	b2db      	uxtb	r3, r3
 8012dd2:	2b47      	cmp	r3, #71	; 0x47
 8012dd4:	d9e9      	bls.n	8012daa <RegionUS915InitDefaults+0x96>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8012dd6:	4c1c      	ldr	r4, [pc, #112]	; (8012e48 <RegionUS915InitDefaults+0x134>)
 8012dd8:	6820      	ldr	r0, [r4, #0]
 8012dda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012dde:	f8a0 348c 	strh.w	r3, [r0, #1164]	; 0x48c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8012de2:	f8a0 348e 	strh.w	r3, [r0, #1166]	; 0x48e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8012de6:	f8a0 3490 	strh.w	r3, [r0, #1168]	; 0x490
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8012dea:	f8a0 3492 	strh.w	r3, [r0, #1170]	; 0x492
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 8012dee:	23ff      	movs	r3, #255	; 0xff
 8012df0:	f8a0 3494 	strh.w	r3, [r0, #1172]	; 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8012df4:	2300      	movs	r3, #0
 8012df6:	f8a0 3496 	strh.w	r3, [r0, #1174]	; 0x496
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8012dfa:	2206      	movs	r2, #6
 8012dfc:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 8012e00:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8012e04:	f7fc fbc9 	bl	800f59a <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8012e08:	4b10      	ldr	r3, [pc, #64]	; (8012e4c <RegionUS915InitDefaults+0x138>)
 8012e0a:	6818      	ldr	r0, [r3, #0]
 8012e0c:	6821      	ldr	r1, [r4, #0]
 8012e0e:	2206      	movs	r2, #6
 8012e10:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 8012e14:	3090      	adds	r0, #144	; 0x90
 8012e16:	f7fc fbc0 	bl	800f59a <RegionCommonChanMaskCopy>
            break;
 8012e1a:	e012      	b.n	8012e42 <RegionUS915InitDefaults+0x12e>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8012e1c:	4a0b      	ldr	r2, [pc, #44]	; (8012e4c <RegionUS915InitDefaults+0x138>)
 8012e1e:	6811      	ldr	r1, [r2, #0]
 8012e20:	4a09      	ldr	r2, [pc, #36]	; (8012e48 <RegionUS915InitDefaults+0x134>)
 8012e22:	6812      	ldr	r2, [r2, #0]
 8012e24:	f503 7010 	add.w	r0, r3, #576	; 0x240
 8012e28:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8012e2c:	f103 0048 	add.w	r0, r3, #72	; 0x48
 8012e30:	f831 4010 	ldrh.w	r4, [r1, r0, lsl #1]
 8012e34:	4022      	ands	r2, r4
 8012e36:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8012e3a:	3301      	adds	r3, #1
 8012e3c:	b2db      	uxtb	r3, r3
 8012e3e:	2b05      	cmp	r3, #5
 8012e40:	d9ec      	bls.n	8012e1c <RegionUS915InitDefaults+0x108>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 8012e42:	b006      	add	sp, #24
 8012e44:	bd10      	pop	{r4, pc}
 8012e46:	bf00      	nop
 8012e48:	20001470 	.word	0x20001470
 8012e4c:	2000146c 	.word	0x2000146c
 8012e50:	00030d40 	.word	0x00030d40
 8012e54:	35c80160 	.word	0x35c80160
 8012e58:	00186a00 	.word	0x00186a00
 8012e5c:	35d2afc0 	.word	0x35d2afc0

08012e60 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8012e60:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 8012e62:	290a      	cmp	r1, #10
 8012e64:	d829      	bhi.n	8012eba <RegionUS915Verify+0x5a>
 8012e66:	e8df f001 	tbb	[pc, r1]
 8012e6a:	2806      	.short	0x2806
 8012e6c:	0a282828 	.word	0x0a282828
 8012e70:	1e28140a 	.word	0x1e28140a
 8012e74:	1e          	.byte	0x1e
 8012e75:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8012e76:	6800      	ldr	r0, [r0, #0]
 8012e78:	f7ff fdea 	bl	8012a50 <VerifyRfFreq>
 8012e7c:	e01e      	b.n	8012ebc <RegionUS915Verify+0x5c>
        }
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 8012e7e:	2204      	movs	r2, #4
 8012e80:	2100      	movs	r1, #0
 8012e82:	f990 0000 	ldrsb.w	r0, [r0]
 8012e86:	f7fc fb16 	bl	800f4b6 <RegionCommonValueInRange>
 8012e8a:	3800      	subs	r0, #0
 8012e8c:	bf18      	it	ne
 8012e8e:	2001      	movne	r0, #1
 8012e90:	e014      	b.n	8012ebc <RegionUS915Verify+0x5c>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 8012e92:	220d      	movs	r2, #13
 8012e94:	2108      	movs	r1, #8
 8012e96:	f990 0000 	ldrsb.w	r0, [r0]
 8012e9a:	f7fc fb0c 	bl	800f4b6 <RegionCommonValueInRange>
 8012e9e:	3800      	subs	r0, #0
 8012ea0:	bf18      	it	ne
 8012ea2:	2001      	movne	r0, #1
 8012ea4:	e00a      	b.n	8012ebc <RegionUS915Verify+0x5c>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 8012ea6:	220e      	movs	r2, #14
 8012ea8:	2100      	movs	r1, #0
 8012eaa:	f990 0000 	ldrsb.w	r0, [r0]
 8012eae:	f7fc fb02 	bl	800f4b6 <RegionCommonValueInRange>
 8012eb2:	3800      	subs	r0, #0
 8012eb4:	bf18      	it	ne
 8012eb6:	2001      	movne	r0, #1
 8012eb8:	e000      	b.n	8012ebc <RegionUS915Verify+0x5c>
{
 8012eba:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 8012ebc:	bd08      	pop	{r3, pc}
	...

08012ec0 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8012ec0:	7903      	ldrb	r3, [r0, #4]
 8012ec2:	2b10      	cmp	r3, #16
 8012ec4:	d134      	bne.n	8012f30 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8012ec6:	6803      	ldr	r3, [r0, #0]
 8012ec8:	7bdb      	ldrb	r3, [r3, #15]
 8012eca:	2b01      	cmp	r3, #1
 8012ecc:	d130      	bne.n	8012f30 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8012ece:	2200      	movs	r2, #0
 8012ed0:	4613      	mov	r3, r2
 8012ed2:	2a04      	cmp	r2, #4
 8012ed4:	d82b      	bhi.n	8012f2e <RegionUS915ApplyCFList+0x6e>
{
 8012ed6:	b4f0      	push	{r4, r5, r6, r7}
 8012ed8:	e014      	b.n	8012f04 <RegionUS915ApplyCFList+0x44>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8012eda:	b2e4      	uxtb	r4, r4
 8012edc:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8012ee0:	4c14      	ldr	r4, [pc, #80]	; (8012f34 <RegionUS915ApplyCFList+0x74>)
 8012ee2:	6826      	ldr	r6, [r4, #0]
 8012ee4:	f501 7410 	add.w	r4, r1, #576	; 0x240
 8012ee8:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
 8012eec:	3148      	adds	r1, #72	; 0x48
 8012eee:	f836 5011 	ldrh.w	r5, [r6, r1, lsl #1]
 8012ef2:	402c      	ands	r4, r5
 8012ef4:	f826 4011 	strh.w	r4, [r6, r1, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8012ef8:	3301      	adds	r3, #1
 8012efa:	b2db      	uxtb	r3, r3
 8012efc:	3202      	adds	r2, #2
 8012efe:	b2d2      	uxtb	r2, r2
 8012f00:	2b04      	cmp	r3, #4
 8012f02:	d812      	bhi.n	8012f2a <RegionUS915ApplyCFList+0x6a>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8012f04:	6804      	ldr	r4, [r0, #0]
 8012f06:	490c      	ldr	r1, [pc, #48]	; (8012f38 <RegionUS915ApplyCFList+0x78>)
 8012f08:	680d      	ldr	r5, [r1, #0]
 8012f0a:	4619      	mov	r1, r3
 8012f0c:	5ca4      	ldrb	r4, [r4, r2]
 8012f0e:	f503 7710 	add.w	r7, r3, #576	; 0x240
 8012f12:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8012f16:	6806      	ldr	r6, [r0, #0]
 8012f18:	4416      	add	r6, r2
 8012f1a:	7876      	ldrb	r6, [r6, #1]
 8012f1c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8012f20:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
        if( chMaskItr == 4 )
 8012f24:	2b04      	cmp	r3, #4
 8012f26:	d1db      	bne.n	8012ee0 <RegionUS915ApplyCFList+0x20>
 8012f28:	e7d7      	b.n	8012eda <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 8012f2a:	bcf0      	pop	{r4, r5, r6, r7}
 8012f2c:	4770      	bx	lr
 8012f2e:	4770      	bx	lr
 8012f30:	4770      	bx	lr
 8012f32:	bf00      	nop
 8012f34:	2000146c 	.word	0x2000146c
 8012f38:	20001470 	.word	0x20001470

08012f3c <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8012f3c:	b570      	push	{r4, r5, r6, lr}
 8012f3e:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8012f40:	2204      	movs	r2, #4
 8012f42:	2100      	movs	r1, #0
 8012f44:	6800      	ldr	r0, [r0, #0]
 8012f46:	f7fc fb12 	bl	800f56e <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 8012f4a:	2801      	cmp	r0, #1
 8012f4c:	d033      	beq.n	8012fb6 <RegionUS915ChanMaskSet+0x7a>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 8012f4e:	792c      	ldrb	r4, [r5, #4]
 8012f50:	b11c      	cbz	r4, 8012f5a <RegionUS915ChanMaskSet+0x1e>
 8012f52:	2c01      	cmp	r4, #1
 8012f54:	d025      	beq.n	8012fa2 <RegionUS915ChanMaskSet+0x66>
 8012f56:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 8012f58:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8012f5a:	4e18      	ldr	r6, [pc, #96]	; (8012fbc <RegionUS915ChanMaskSet+0x80>)
 8012f5c:	6830      	ldr	r0, [r6, #0]
 8012f5e:	2206      	movs	r2, #6
 8012f60:	6829      	ldr	r1, [r5, #0]
 8012f62:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8012f66:	f7fc fb18 	bl	800f59a <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8012f6a:	6835      	ldr	r5, [r6, #0]
 8012f6c:	f895 3494 	ldrb.w	r3, [r5, #1172]	; 0x494
 8012f70:	f8a5 3494 	strh.w	r3, [r5, #1172]	; 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8012f74:	2300      	movs	r3, #0
 8012f76:	f8a5 3496 	strh.w	r3, [r5, #1174]	; 0x496
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8012f7a:	2c05      	cmp	r4, #5
 8012f7c:	d80f      	bhi.n	8012f9e <RegionUS915ChanMaskSet+0x62>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8012f7e:	4b10      	ldr	r3, [pc, #64]	; (8012fc0 <RegionUS915ChanMaskSet+0x84>)
 8012f80:	681a      	ldr	r2, [r3, #0]
 8012f82:	f504 7310 	add.w	r3, r4, #576	; 0x240
 8012f86:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8012f8a:	f104 0148 	add.w	r1, r4, #72	; 0x48
 8012f8e:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 8012f92:	4003      	ands	r3, r0
 8012f94:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8012f98:	3401      	adds	r4, #1
 8012f9a:	b2e4      	uxtb	r4, r4
 8012f9c:	e7ed      	b.n	8012f7a <RegionUS915ChanMaskSet+0x3e>
    return true;
 8012f9e:	2001      	movs	r0, #1
 8012fa0:	e7da      	b.n	8012f58 <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8012fa2:	4b06      	ldr	r3, [pc, #24]	; (8012fbc <RegionUS915ChanMaskSet+0x80>)
 8012fa4:	6818      	ldr	r0, [r3, #0]
 8012fa6:	2206      	movs	r2, #6
 8012fa8:	6829      	ldr	r1, [r5, #0]
 8012faa:	f200 408c 	addw	r0, r0, #1164	; 0x48c
 8012fae:	f7fc faf4 	bl	800f59a <RegionCommonChanMaskCopy>
    return true;
 8012fb2:	2001      	movs	r0, #1
            break;
 8012fb4:	e7d0      	b.n	8012f58 <RegionUS915ChanMaskSet+0x1c>
        return false;
 8012fb6:	2000      	movs	r0, #0
 8012fb8:	e7ce      	b.n	8012f58 <RegionUS915ChanMaskSet+0x1c>
 8012fba:	bf00      	nop
 8012fbc:	20001470 	.word	0x20001470
 8012fc0:	2000146c 	.word	0x2000146c

08012fc4 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8012fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012fc6:	b083      	sub	sp, #12
 8012fc8:	460e      	mov	r6, r1
 8012fca:	4617      	mov	r7, r2
 8012fcc:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 8012fce:	280d      	cmp	r0, #13
 8012fd0:	bfa8      	it	ge
 8012fd2:	200d      	movge	r0, #13
 8012fd4:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 8012fd6:	4d0f      	ldr	r5, [pc, #60]	; (8013014 <RegionUS915ComputeRxWindowParameters+0x50>)
 8012fd8:	4629      	mov	r1, r5
 8012fda:	f7fc fd27 	bl	800fa2c <RegionCommonGetBandwidth>
 8012fde:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 8012fe0:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8012fe4:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8012fe8:	4a0b      	ldr	r2, [pc, #44]	; (8013018 <RegionUS915ComputeRxWindowParameters+0x54>)
 8012fea:	5cd0      	ldrb	r0, [r2, r3]
 8012fec:	f7fc fbee 	bl	800f7cc <RegionCommonComputeSymbolTimeLoRa>
 8012ff0:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8012ff2:	4b0a      	ldr	r3, [pc, #40]	; (801301c <RegionUS915ComputeRxWindowParameters+0x58>)
 8012ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012ff6:	4798      	blx	r3
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	f104 020c 	add.w	r2, r4, #12
 8012ffe:	9201      	str	r2, [sp, #4]
 8013000:	3408      	adds	r4, #8
 8013002:	9400      	str	r4, [sp, #0]
 8013004:	463a      	mov	r2, r7
 8013006:	4631      	mov	r1, r6
 8013008:	4628      	mov	r0, r5
 801300a:	f7fc fbed 	bl	800f7e8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 801300e:	b003      	add	sp, #12
 8013010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013012:	bf00      	nop
 8013014:	08017d9c 	.word	0x08017d9c
 8013018:	08017df0 	.word	0x08017df0
 801301c:	08018318 	.word	0x08018318

08013020 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8013020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013024:	b08b      	sub	sp, #44	; 0x2c
 8013026:	4604      	mov	r4, r0
 8013028:	460e      	mov	r6, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 801302a:	f990 7001 	ldrsb.w	r7, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 801302e:	6845      	ldr	r5, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 8013030:	4b22      	ldr	r3, [pc, #136]	; (80130bc <RegionUS915RxConfig+0x9c>)
 8013032:	685b      	ldr	r3, [r3, #4]
 8013034:	4798      	blx	r3
 8013036:	2800      	cmp	r0, #0
 8013038:	d13d      	bne.n	80130b6 <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801303a:	7ce3      	ldrb	r3, [r4, #19]
 801303c:	b933      	cbnz	r3, 801304c <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801303e:	7825      	ldrb	r5, [r4, #0]
 8013040:	f005 0507 	and.w	r5, r5, #7
 8013044:	4a1e      	ldr	r2, [pc, #120]	; (80130c0 <RegionUS915RxConfig+0xa0>)
 8013046:	4b1f      	ldr	r3, [pc, #124]	; (80130c4 <RegionUS915RxConfig+0xa4>)
 8013048:	fb02 3505 	mla	r5, r2, r5, r3
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 801304c:	4b1e      	ldr	r3, [pc, #120]	; (80130c8 <RegionUS915RxConfig+0xa8>)
 801304e:	f913 9007 	ldrsb.w	r9, [r3, r7]

    Radio.SetChannel( frequency );
 8013052:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80130bc <RegionUS915RxConfig+0x9c>
 8013056:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801305a:	4628      	mov	r0, r5
 801305c:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801305e:	f8d8 8018 	ldr.w	r8, [r8, #24]
 8013062:	7ca3      	ldrb	r3, [r4, #18]
 8013064:	9309      	str	r3, [sp, #36]	; 0x24
 8013066:	2001      	movs	r0, #1
 8013068:	9008      	str	r0, [sp, #32]
 801306a:	2200      	movs	r2, #0
 801306c:	9207      	str	r2, [sp, #28]
 801306e:	9206      	str	r2, [sp, #24]
 8013070:	9205      	str	r2, [sp, #20]
 8013072:	9204      	str	r2, [sp, #16]
 8013074:	9203      	str	r2, [sp, #12]
 8013076:	8923      	ldrh	r3, [r4, #8]
 8013078:	9302      	str	r3, [sp, #8]
 801307a:	2308      	movs	r3, #8
 801307c:	9301      	str	r3, [sp, #4]
 801307e:	9200      	str	r2, [sp, #0]
 8013080:	4603      	mov	r3, r0
 8013082:	464a      	mov	r2, r9
 8013084:	78a1      	ldrb	r1, [r4, #2]
 8013086:	47c0      	blx	r8

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8013088:	7c63      	ldrb	r3, [r4, #17]
 801308a:	b18b      	cbz	r3, 80130b0 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 801308c:	4b0f      	ldr	r3, [pc, #60]	; (80130cc <RegionUS915RxConfig+0xac>)
 801308e:	5dd9      	ldrb	r1, [r3, r7]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8013090:	4b0a      	ldr	r3, [pc, #40]	; (80130bc <RegionUS915RxConfig+0x9c>)
 8013092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013094:	310d      	adds	r1, #13
 8013096:	b2c9      	uxtb	r1, r1
 8013098:	2001      	movs	r0, #1
 801309a:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801309c:	463a      	mov	r2, r7
 801309e:	4629      	mov	r1, r5
 80130a0:	7ce0      	ldrb	r0, [r4, #19]
 80130a2:	f7fc fcd5 	bl	800fa50 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 80130a6:	7037      	strb	r7, [r6, #0]
    return true;
 80130a8:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80130aa:	b00b      	add	sp, #44	; 0x2c
 80130ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 80130b0:	4b07      	ldr	r3, [pc, #28]	; (80130d0 <RegionUS915RxConfig+0xb0>)
 80130b2:	5dd9      	ldrb	r1, [r3, r7]
 80130b4:	e7ec      	b.n	8013090 <RegionUS915RxConfig+0x70>
        return false;
 80130b6:	2000      	movs	r0, #0
 80130b8:	e7f7      	b.n	80130aa <RegionUS915RxConfig+0x8a>
 80130ba:	bf00      	nop
 80130bc:	08018318 	.word	0x08018318
 80130c0:	000927c0 	.word	0x000927c0
 80130c4:	370870a0 	.word	0x370870a0
 80130c8:	08017df0 	.word	0x08017df0
 80130cc:	08017e00 	.word	0x08017e00
 80130d0:	08017e10 	.word	0x08017e10

080130d4 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80130d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130d8:	b08d      	sub	sp, #52	; 0x34
 80130da:	4604      	mov	r4, r0
 80130dc:	910b      	str	r1, [sp, #44]	; 0x2c
 80130de:	4690      	mov	r8, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 80130e0:	f990 2001 	ldrsb.w	r2, [r0, #1]
 80130e4:	4b32      	ldr	r3, [pc, #200]	; (80131b0 <RegionUS915TxConfig+0xdc>)
 80130e6:	f913 b002 	ldrsb.w	fp, [r3, r2]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 80130ea:	4b32      	ldr	r3, [pc, #200]	; (80131b4 <RegionUS915TxConfig+0xe0>)
 80130ec:	6818      	ldr	r0, [r3, #0]
 80130ee:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 80131c0 <RegionUS915TxConfig+0xec>
 80130f2:	f8da 3000 	ldr.w	r3, [sl]
 80130f6:	7821      	ldrb	r1, [r4, #0]
 80130f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80130fc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8013100:	7a49      	ldrb	r1, [r1, #9]
 8013102:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013106:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801310a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801310e:	f991 1002 	ldrsb.w	r1, [r1, #2]
 8013112:	f994 0002 	ldrsb.w	r0, [r4, #2]
 8013116:	f7ff fce9 	bl	8012aec <LimitTxPower>
 801311a:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 801311c:	4926      	ldr	r1, [pc, #152]	; (80131b8 <RegionUS915TxConfig+0xe4>)
 801311e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8013122:	f7fc fc83 	bl	800fa2c <RegionCommonGetBandwidth>
 8013126:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8013128:	2200      	movs	r2, #0
 801312a:	4924      	ldr	r1, [pc, #144]	; (80131bc <RegionUS915TxConfig+0xe8>)
 801312c:	4630      	mov	r0, r6
 801312e:	f7fc fb95 	bl	800f85c <RegionCommonComputeTxPower>
 8013132:	4607      	mov	r7, r0

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8013134:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80131c4 <RegionUS915TxConfig+0xf0>
 8013138:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801313c:	f8da 1000 	ldr.w	r1, [sl]
 8013140:	7823      	ldrb	r3, [r4, #0]
 8013142:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013146:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 801314a:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801314c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8013150:	9308      	str	r3, [sp, #32]
 8013152:	2200      	movs	r2, #0
 8013154:	9207      	str	r2, [sp, #28]
 8013156:	9206      	str	r2, [sp, #24]
 8013158:	9205      	str	r2, [sp, #20]
 801315a:	2501      	movs	r5, #1
 801315c:	9504      	str	r5, [sp, #16]
 801315e:	9203      	str	r2, [sp, #12]
 8013160:	2308      	movs	r3, #8
 8013162:	9302      	str	r3, [sp, #8]
 8013164:	9501      	str	r5, [sp, #4]
 8013166:	f8cd b000 	str.w	fp, [sp]
 801316a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801316c:	4639      	mov	r1, r7
 801316e:	4628      	mov	r0, r5
 8013170:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8013174:	47b8      	blx	r7
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8013176:	f8da 2000 	ldr.w	r2, [sl]
 801317a:	7823      	ldrb	r3, [r4, #0]
 801317c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013180:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8013184:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013188:	f7fc fc92 	bl	800fab0 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 801318c:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8013190:	7b21      	ldrb	r1, [r4, #12]
 8013192:	4628      	mov	r0, r5
 8013194:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8013196:	89a1      	ldrh	r1, [r4, #12]
 8013198:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801319c:	f7ff fc88 	bl	8012ab0 <GetTimeOnAir>
 80131a0:	f8c8 0000 	str.w	r0, [r8]

    *txPower = txPowerLimited;
 80131a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131a6:	701e      	strb	r6, [r3, #0]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 80131a8:	4628      	mov	r0, r5
 80131aa:	b00d      	add	sp, #52	; 0x34
 80131ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131b0:	08017df0 	.word	0x08017df0
 80131b4:	2000146c 	.word	0x2000146c
 80131b8:	08017d9c 	.word	0x08017d9c
 80131bc:	41f00000 	.word	0x41f00000
 80131c0:	20001470 	.word	0x20001470
 80131c4:	08018318 	.word	0x08018318

080131c8 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80131c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80131cc:	b091      	sub	sp, #68	; 0x44
 80131ce:	4606      	mov	r6, r0
 80131d0:	4689      	mov	r9, r1
 80131d2:	4690      	mov	r8, r2
 80131d4:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80131d6:	2400      	movs	r4, #0
 80131d8:	940e      	str	r4, [sp, #56]	; 0x38
 80131da:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 80131de:	940b      	str	r4, [sp, #44]	; 0x2c
 80131e0:	940c      	str	r4, [sp, #48]	; 0x30
 80131e2:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80131e4:	4b95      	ldr	r3, [pc, #596]	; (801343c <RegionUS915LinkAdrReq+0x274>)
 80131e6:	6819      	ldr	r1, [r3, #0]
 80131e8:	2206      	movs	r2, #6
 80131ea:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 80131ee:	a80b      	add	r0, sp, #44	; 0x2c
 80131f0:	f7fc f9d3 	bl	800f59a <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80131f4:	e00d      	b.n	8013212 <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 80131f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80131fa:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 80131fe:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 8013202:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 8013206:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801320a:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 801320e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8013212:	7a33      	ldrb	r3, [r6, #8]
 8013214:	42a3      	cmp	r3, r4
 8013216:	d978      	bls.n	801330a <RegionUS915LinkAdrReq+0x142>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8013218:	6870      	ldr	r0, [r6, #4]
 801321a:	a90e      	add	r1, sp, #56	; 0x38
 801321c:	4420      	add	r0, r4
 801321e:	f7fc fa6d 	bl	800f6fc <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8013222:	2800      	cmp	r0, #0
 8013224:	d071      	beq.n	801330a <RegionUS915LinkAdrReq+0x142>
        bytesProcessed += nextIndex;
 8013226:	4404      	add	r4, r0
 8013228:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 801322a:	f89d 503b 	ldrb.w	r5, [sp, #59]	; 0x3b
 801322e:	2d06      	cmp	r5, #6
 8013230:	d0e1      	beq.n	80131f6 <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8013232:	2d07      	cmp	r5, #7
 8013234:	d009      	beq.n	801324a <RegionUS915LinkAdrReq+0x82>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8013236:	2d05      	cmp	r5, #5
 8013238:	d064      	beq.n	8013304 <RegionUS915LinkAdrReq+0x13c>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801323a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801323e:	aa10      	add	r2, sp, #64	; 0x40
 8013240:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8013244:	f825 3c14 	strh.w	r3, [r5, #-20]
 8013248:	e7e3      	b.n	8013212 <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 801324a:	2300      	movs	r3, #0
 801324c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 8013250:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 8013254:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 8013258:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801325c:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8013260:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8013264:	e7d5      	b.n	8013212 <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 8013266:	aa10      	add	r2, sp, #64	; 0x40
 8013268:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 801326c:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 8013270:	f062 02ff 	orn	r2, r2, #255	; 0xff
 8013274:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 8013278:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801327c:	4313      	orrs	r3, r2
 801327e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 8013282:	3101      	adds	r1, #1
 8013284:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 8013286:	3501      	adds	r5, #1
 8013288:	b2ed      	uxtb	r5, r5
 801328a:	2d07      	cmp	r5, #7
 801328c:	d8c1      	bhi.n	8013212 <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 801328e:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8013292:	2301      	movs	r3, #1
 8013294:	40ab      	lsls	r3, r5
 8013296:	421a      	tst	r2, r3
 8013298:	d011      	beq.n	80132be <RegionUS915LinkAdrReq+0xf6>
                    if( ( i % 2 ) == 0 )
 801329a:	f015 0f01 	tst.w	r5, #1
 801329e:	d1e2      	bne.n	8013266 <RegionUS915LinkAdrReq+0x9e>
                        channelsMask[cntChannelMask] |= 0x00FF;
 80132a0:	aa10      	add	r2, sp, #64	; 0x40
 80132a2:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 80132a6:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 80132aa:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 80132ae:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 80132b2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80132b6:	4313      	orrs	r3, r2
 80132b8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80132bc:	e7e3      	b.n	8013286 <RegionUS915LinkAdrReq+0xbe>
                    if( ( i % 2 ) == 0 )
 80132be:	f015 0f01 	tst.w	r5, #1
 80132c2:	d10f      	bne.n	80132e4 <RegionUS915LinkAdrReq+0x11c>
                        channelsMask[cntChannelMask] &= 0xFF00;
 80132c4:	aa10      	add	r2, sp, #64	; 0x40
 80132c6:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 80132ca:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 80132ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80132d2:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 80132d6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80132da:	ea22 0303 	bic.w	r3, r2, r3
 80132de:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80132e2:	e7d0      	b.n	8013286 <RegionUS915LinkAdrReq+0xbe>
                        channelsMask[cntChannelMask] &= 0x00FF;
 80132e4:	aa10      	add	r2, sp, #64	; 0x40
 80132e6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80132ea:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 80132ee:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 80132f2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80132f6:	ea22 0303 	bic.w	r3, r2, r3
 80132fa:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 80132fe:	3101      	adds	r1, #1
 8013300:	b2c9      	uxtb	r1, r1
 8013302:	e7c0      	b.n	8013286 <RegionUS915LinkAdrReq+0xbe>
            for( uint8_t i = 0; i <= 7; i++ )
 8013304:	2500      	movs	r5, #0
            uint8_t cntChannelMask = 0;
 8013306:	4629      	mov	r1, r5
 8013308:	e7bf      	b.n	801328a <RegionUS915LinkAdrReq+0xc2>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 801330a:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 801330e:	2b03      	cmp	r3, #3
 8013310:	dd58      	ble.n	80133c4 <RegionUS915LinkAdrReq+0x1fc>
 8013312:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8013314:	2302      	movs	r3, #2
 8013316:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801331a:	7a73      	ldrb	r3, [r6, #9]
 801331c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8013320:	a809      	add	r0, sp, #36	; 0x24
 8013322:	f7ff fbff 	bl	8012b24 <RegionUS915GetPhyParam>
 8013326:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 8013328:	f88d 5004 	strb.w	r5, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801332c:	7ab3      	ldrb	r3, [r6, #10]
 801332e:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8013332:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8013336:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801333a:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 801333e:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8013342:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8013346:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801334a:	f996 300b 	ldrsb.w	r3, [r6, #11]
 801334e:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8013352:	f996 300c 	ldrsb.w	r3, [r6, #12]
 8013356:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801335a:	f996 300d 	ldrsb.w	r3, [r6, #13]
 801335e:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8013362:	2348      	movs	r3, #72	; 0x48
 8013364:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8013368:	ab0b      	add	r3, sp, #44	; 0x2c
 801336a:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801336c:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8013370:	2304      	movs	r3, #4
 8013372:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8013376:	4b31      	ldr	r3, [pc, #196]	; (801343c <RegionUS915LinkAdrReq+0x274>)
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 801337c:	230e      	movs	r3, #14
 801337e:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8013382:	2300      	movs	r3, #0
 8013384:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8013388:	6833      	ldr	r3, [r6, #0]
 801338a:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801338c:	ab0e      	add	r3, sp, #56	; 0x38
 801338e:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 8013392:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 8013396:	4668      	mov	r0, sp
 8013398:	f7fc f9cc 	bl	800f734 <RegionCommonLinkAdrReqVerifyParams>
 801339c:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801339e:	2807      	cmp	r0, #7
 80133a0:	d01b      	beq.n	80133da <RegionUS915LinkAdrReq+0x212>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80133a2:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 80133a6:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 80133aa:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 80133ae:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 80133b2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80133b6:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 80133b8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80133ba:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 80133bc:	4628      	mov	r0, r5
 80133be:	b011      	add	sp, #68	; 0x44
 80133c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 80133c4:	2204      	movs	r2, #4
 80133c6:	2100      	movs	r1, #0
 80133c8:	a80b      	add	r0, sp, #44	; 0x2c
 80133ca:	f7fc f8d0 	bl	800f56e <RegionCommonCountChannels>
 80133ce:	2801      	cmp	r0, #1
 80133d0:	d901      	bls.n	80133d6 <RegionUS915LinkAdrReq+0x20e>
 80133d2:	2507      	movs	r5, #7
 80133d4:	e79e      	b.n	8013314 <RegionUS915LinkAdrReq+0x14c>
        status &= 0xFE; // Channel mask KO
 80133d6:	2506      	movs	r5, #6
 80133d8:	e79c      	b.n	8013314 <RegionUS915LinkAdrReq+0x14c>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 80133da:	4e18      	ldr	r6, [pc, #96]	; (801343c <RegionUS915LinkAdrReq+0x274>)
 80133dc:	6830      	ldr	r0, [r6, #0]
 80133de:	2206      	movs	r2, #6
 80133e0:	a90b      	add	r1, sp, #44	; 0x2c
 80133e2:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 80133e6:	f7fc f8d8 	bl	800f59a <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 80133ea:	4b15      	ldr	r3, [pc, #84]	; (8013440 <RegionUS915LinkAdrReq+0x278>)
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	6832      	ldr	r2, [r6, #0]
 80133f0:	f8b2 1480 	ldrh.w	r1, [r2, #1152]	; 0x480
 80133f4:	f8b3 0090 	ldrh.w	r0, [r3, #144]	; 0x90
 80133f8:	4001      	ands	r1, r0
 80133fa:	f8a3 1090 	strh.w	r1, [r3, #144]	; 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 80133fe:	f8b2 1482 	ldrh.w	r1, [r2, #1154]	; 0x482
 8013402:	f8b3 0092 	ldrh.w	r0, [r3, #146]	; 0x92
 8013406:	4001      	ands	r1, r0
 8013408:	f8a3 1092 	strh.w	r1, [r3, #146]	; 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 801340c:	f8b2 1484 	ldrh.w	r1, [r2, #1156]	; 0x484
 8013410:	f8b3 0094 	ldrh.w	r0, [r3, #148]	; 0x94
 8013414:	4001      	ands	r1, r0
 8013416:	f8a3 1094 	strh.w	r1, [r3, #148]	; 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 801341a:	f8b2 1486 	ldrh.w	r1, [r2, #1158]	; 0x486
 801341e:	f8b3 0096 	ldrh.w	r0, [r3, #150]	; 0x96
 8013422:	4001      	ands	r1, r0
 8013424:	f8a3 1096 	strh.w	r1, [r3, #150]	; 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8013428:	f8b2 1488 	ldrh.w	r1, [r2, #1160]	; 0x488
 801342c:	f8a3 1098 	strh.w	r1, [r3, #152]	; 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8013430:	f8b2 248a 	ldrh.w	r2, [r2, #1162]	; 0x48a
 8013434:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8013438:	e7b3      	b.n	80133a2 <RegionUS915LinkAdrReq+0x1da>
 801343a:	bf00      	nop
 801343c:	20001470 	.word	0x20001470
 8013440:	2000146c 	.word	0x2000146c

08013444 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8013444:	b538      	push	{r3, r4, r5, lr}
 8013446:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8013448:	6840      	ldr	r0, [r0, #4]
 801344a:	f7ff fb01 	bl	8012a50 <VerifyRfFreq>
 801344e:	b310      	cbz	r0, 8013496 <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 8013450:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8013452:	220d      	movs	r2, #13
 8013454:	2108      	movs	r1, #8
 8013456:	f994 0000 	ldrsb.w	r0, [r4]
 801345a:	f7fc f82c 	bl	800f4b6 <RegionCommonValueInRange>
 801345e:	b908      	cbnz	r0, 8013464 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 8013460:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8013464:	2207      	movs	r2, #7
 8013466:	2105      	movs	r1, #5
 8013468:	f994 0000 	ldrsb.w	r0, [r4]
 801346c:	f7fc f823 	bl	800f4b6 <RegionCommonValueInRange>
 8013470:	2801      	cmp	r0, #1
 8013472:	d003      	beq.n	801347c <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8013474:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8013478:	2b0d      	cmp	r3, #13
 801347a:	dd01      	ble.n	8013480 <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 801347c:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8013480:	2203      	movs	r2, #3
 8013482:	2100      	movs	r1, #0
 8013484:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8013488:	f7fc f815 	bl	800f4b6 <RegionCommonValueInRange>
 801348c:	b908      	cbnz	r0, 8013492 <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801348e:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 8013492:	4628      	mov	r0, r5
 8013494:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 8013496:	2506      	movs	r5, #6
 8013498:	e7db      	b.n	8013452 <RegionUS915RxParamSetupReq+0xe>

0801349a <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 801349a:	f04f 30ff 	mov.w	r0, #4294967295
 801349e:	4770      	bx	lr

080134a0 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 80134a0:	f04f 30ff 	mov.w	r0, #4294967295
 80134a4:	4770      	bx	lr

080134a6 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 80134a6:	f04f 30ff 	mov.w	r0, #4294967295
 80134aa:	4770      	bx	lr

080134ac <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 80134ac:	b9b1      	cbnz	r1, 80134dc <RegionUS915AlternateDr+0x30>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 80134ae:	4b10      	ldr	r3, [pc, #64]	; (80134f0 <RegionUS915AlternateDr+0x44>)
 80134b0:	681a      	ldr	r2, [r3, #0]
 80134b2:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 80134b6:	3301      	adds	r3, #1
 80134b8:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 80134bc:	4b0c      	ldr	r3, [pc, #48]	; (80134f0 <RegionUS915AlternateDr+0x44>)
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 80134c4:	4b0b      	ldr	r3, [pc, #44]	; (80134f4 <RegionUS915AlternateDr+0x48>)
 80134c6:	fba3 1302 	umull	r1, r3, r3, r2
 80134ca:	085b      	lsrs	r3, r3, #1
 80134cc:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80134d0:	1ad3      	subs	r3, r2, r3
 80134d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80134d6:	d009      	beq.n	80134ec <RegionUS915AlternateDr+0x40>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 80134d8:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 80134da:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 80134dc:	4b04      	ldr	r3, [pc, #16]	; (80134f0 <RegionUS915AlternateDr+0x44>)
 80134de:	681a      	ldr	r2, [r3, #0]
 80134e0:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 80134e4:	3b01      	subs	r3, #1
 80134e6:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
 80134ea:	e7e7      	b.n	80134bc <RegionUS915AlternateDr+0x10>
        currentDr = DR_4;
 80134ec:	2004      	movs	r0, #4
 80134ee:	4770      	bx	lr
 80134f0:	2000146c 	.word	0x2000146c
 80134f4:	38e38e39 	.word	0x38e38e39

080134f8 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80134f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134fc:	b0a4      	sub	sp, #144	; 0x90
 80134fe:	4604      	mov	r4, r0
 8013500:	460e      	mov	r6, r1
 8013502:	4690      	mov	r8, r2
 8013504:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8013506:	2500      	movs	r5, #0
 8013508:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 801350c:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8013510:	9511      	str	r5, [sp, #68]	; 0x44
 8013512:	2244      	movs	r2, #68	; 0x44
 8013514:	4629      	mov	r1, r5
 8013516:	a812      	add	r0, sp, #72	; 0x48
 8013518:	f003 ff10 	bl	801733c <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 801351c:	4b4c      	ldr	r3, [pc, #304]	; (8013650 <RegionUS915NextChannel+0x158>)
 801351e:	6818      	ldr	r0, [r3, #0]
 8013520:	2204      	movs	r2, #4
 8013522:	4629      	mov	r1, r5
 8013524:	3090      	adds	r0, #144	; 0x90
 8013526:	f7fc f822 	bl	800f56e <RegionCommonCountChannels>
 801352a:	2800      	cmp	r0, #0
 801352c:	d05c      	beq.n	80135e8 <RegionUS915NextChannel+0xf0>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 801352e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8013532:	2b03      	cmp	r3, #3
 8013534:	dd0a      	ble.n	801354c <RegionUS915NextChannel+0x54>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8013536:	4b46      	ldr	r3, [pc, #280]	; (8013650 <RegionUS915NextChannel+0x158>)
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 801353e:	b92a      	cbnz	r2, 801354c <RegionUS915NextChannel+0x54>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8013540:	4a44      	ldr	r2, [pc, #272]	; (8013654 <RegionUS915NextChannel+0x15c>)
 8013542:	6812      	ldr	r2, [r2, #0]
 8013544:	f8b2 2488 	ldrh.w	r2, [r2, #1160]	; 0x488
 8013548:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801354c:	7a63      	ldrb	r3, [r4, #9]
 801354e:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8013552:	7a23      	ldrb	r3, [r4, #8]
 8013554:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8013558:	4b3d      	ldr	r3, [pc, #244]	; (8013650 <RegionUS915NextChannel+0x158>)
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8013560:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8013562:	4a3c      	ldr	r2, [pc, #240]	; (8013654 <RegionUS915NextChannel+0x15c>)
 8013564:	6812      	ldr	r2, [r2, #0]
 8013566:	9205      	str	r2, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8013568:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 801356a:	2348      	movs	r3, #72	; 0x48
 801356c:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 8013570:	2300      	movs	r3, #0
 8013572:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8013574:	6823      	ldr	r3, [r4, #0]
 8013576:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8013578:	6863      	ldr	r3, [r4, #4]
 801357a:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801357c:	7aa3      	ldrb	r3, [r4, #10]
 801357e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8013582:	2301      	movs	r3, #1
 8013584:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8013588:	ab0c      	add	r3, sp, #48	; 0x30
 801358a:	6921      	ldr	r1, [r4, #16]
 801358c:	68e0      	ldr	r0, [r4, #12]
 801358e:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8013592:	7d23      	ldrb	r3, [r4, #20]
 8013594:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8013598:	8ae1      	ldrh	r1, [r4, #22]
 801359a:	f994 0008 	ldrsb.w	r0, [r4, #8]
 801359e:	f7ff fa87 	bl	8012ab0 <GetTimeOnAir>
 80135a2:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80135a4:	ab03      	add	r3, sp, #12
 80135a6:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80135a8:	f8cd 8004 	str.w	r8, [sp, #4]
 80135ac:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 80135b0:	9300      	str	r3, [sp, #0]
 80135b2:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 80135b6:	aa11      	add	r2, sp, #68	; 0x44
 80135b8:	4639      	mov	r1, r7
 80135ba:	a809      	add	r0, sp, #36	; 0x24
 80135bc:	f7fc f9ca 	bl	800f954 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80135c0:	4605      	mov	r5, r0
 80135c2:	2800      	cmp	r0, #0
 80135c4:	d13f      	bne.n	8013646 <RegionUS915NextChannel+0x14e>
    {
        if( nextChanParams->Joined == true )
 80135c6:	7a63      	ldrb	r3, [r4, #9]
 80135c8:	b9eb      	cbnz	r3, 8013606 <RegionUS915NextChannel+0x10e>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 80135ca:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80135ce:	b32b      	cbz	r3, 801361c <RegionUS915NextChannel+0x124>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 80135d0:	4603      	mov	r3, r0
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 80135d2:	4a1f      	ldr	r2, [pc, #124]	; (8013650 <RegionUS915NextChannel+0x158>)
 80135d4:	6812      	ldr	r2, [r2, #0]
 80135d6:	f892 2098 	ldrb.w	r2, [r2, #152]	; 0x98
 80135da:	411a      	asrs	r2, r3
 80135dc:	f012 0f01 	tst.w	r2, #1
 80135e0:	d128      	bne.n	8013634 <RegionUS915NextChannel+0x13c>
                {
                    i++;
 80135e2:	3301      	adds	r3, #1
 80135e4:	b2db      	uxtb	r3, r3
 80135e6:	e7f4      	b.n	80135d2 <RegionUS915NextChannel+0xda>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 80135e8:	4d19      	ldr	r5, [pc, #100]	; (8013650 <RegionUS915NextChannel+0x158>)
 80135ea:	6828      	ldr	r0, [r5, #0]
 80135ec:	4b19      	ldr	r3, [pc, #100]	; (8013654 <RegionUS915NextChannel+0x15c>)
 80135ee:	6819      	ldr	r1, [r3, #0]
 80135f0:	2204      	movs	r2, #4
 80135f2:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 80135f6:	3090      	adds	r0, #144	; 0x90
 80135f8:	f7fb ffcf 	bl	800f59a <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 80135fc:	682b      	ldr	r3, [r5, #0]
 80135fe:	2200      	movs	r2, #0
 8013600:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8013604:	e793      	b.n	801352e <RegionUS915NextChannel+0x36>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8013606:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 801360a:	3901      	subs	r1, #1
 801360c:	f000 ff2e 	bl	801446c <randr>
 8013610:	ab24      	add	r3, sp, #144	; 0x90
 8013612:	4418      	add	r0, r3
 8013614:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 8013618:	7033      	strb	r3, [r6, #0]
 801361a:	e00d      	b.n	8013638 <RegionUS915NextChannel+0x140>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801361c:	4b0c      	ldr	r3, [pc, #48]	; (8013650 <RegionUS915NextChannel+0x158>)
 801361e:	6818      	ldr	r0, [r3, #0]
 8013620:	4632      	mov	r2, r6
 8013622:	f100 019c 	add.w	r1, r0, #156	; 0x9c
 8013626:	3090      	adds	r0, #144	; 0x90
 8013628:	f7fa fba3 	bl	800dd72 <RegionBaseUSComputeNext125kHzJoinChannel>
 801362c:	2803      	cmp	r0, #3
 801362e:	d103      	bne.n	8013638 <RegionUS915NextChannel+0x140>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8013630:	4605      	mov	r5, r0
 8013632:	e008      	b.n	8013646 <RegionUS915NextChannel+0x14e>
                }
                *channel = 64 + i;
 8013634:	3340      	adds	r3, #64	; 0x40
 8013636:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8013638:	4b05      	ldr	r3, [pc, #20]	; (8013650 <RegionUS915NextChannel+0x158>)
 801363a:	6818      	ldr	r0, [r3, #0]
 801363c:	2248      	movs	r2, #72	; 0x48
 801363e:	7831      	ldrb	r1, [r6, #0]
 8013640:	3090      	adds	r0, #144	; 0x90
 8013642:	f7fb ff7a 	bl	800f53a <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8013646:	4628      	mov	r0, r5
 8013648:	b024      	add	sp, #144	; 0x90
 801364a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801364e:	bf00      	nop
 8013650:	2000146c 	.word	0x2000146c
 8013654:	20001470 	.word	0x20001470

08013658 <RegionUS915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8013658:	b538      	push	{r3, r4, r5, lr}
 801365a:	4604      	mov	r4, r0
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 801365c:	4b14      	ldr	r3, [pc, #80]	; (80136b0 <RegionUS915SetContinuousWave+0x58>)
 801365e:	6819      	ldr	r1, [r3, #0]
 8013660:	4d14      	ldr	r5, [pc, #80]	; (80136b4 <RegionUS915SetContinuousWave+0x5c>)
 8013662:	682b      	ldr	r3, [r5, #0]
 8013664:	7802      	ldrb	r2, [r0, #0]
 8013666:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801366a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801366e:	7a52      	ldrb	r2, [r2, #9]
 8013670:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013674:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8013678:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801367c:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8013680:	f991 1002 	ldrsb.w	r1, [r1, #2]
 8013684:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8013688:	f7ff fa30 	bl	8012aec <LimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 801368c:	682a      	ldr	r2, [r5, #0]
 801368e:	7823      	ldrb	r3, [r4, #0]
 8013690:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013694:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8013698:	2200      	movs	r2, #0
 801369a:	4907      	ldr	r1, [pc, #28]	; (80136b8 <RegionUS915SetContinuousWave+0x60>)
 801369c:	f7fc f8de 	bl	800f85c <RegionCommonComputeTxPower>
 80136a0:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80136a2:	4b06      	ldr	r3, [pc, #24]	; (80136bc <RegionUS915SetContinuousWave+0x64>)
 80136a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136a6:	89a2      	ldrh	r2, [r4, #12]
 80136a8:	4628      	mov	r0, r5
 80136aa:	4798      	blx	r3
#endif /* REGION_US915 */
}
 80136ac:	bd38      	pop	{r3, r4, r5, pc}
 80136ae:	bf00      	nop
 80136b0:	2000146c 	.word	0x2000146c
 80136b4:	20001470 	.word	0x20001470
 80136b8:	41f00000 	.word	0x41f00000
 80136bc:	08018318 	.word	0x08018318

080136c0 <RegionUS915ApplyDrOffset>:

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 80136c0:	4b04      	ldr	r3, [pc, #16]	; (80136d4 <RegionUS915ApplyDrOffset+0x14>)
 80136c2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80136c6:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 80136c8:	2800      	cmp	r0, #0
 80136ca:	db01      	blt.n	80136d0 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 80136cc:	b2c0      	uxtb	r0, r0
 80136ce:	4770      	bx	lr
        datarate = DR_0;
 80136d0:	2000      	movs	r0, #0
 80136d2:	e7fb      	b.n	80136cc <RegionUS915ApplyDrOffset+0xc>
 80136d4:	08017ddc 	.word	0x08017ddc

080136d8 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 80136d8:	b510      	push	{r4, lr}
 80136da:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 80136dc:	2210      	movs	r2, #16
 80136de:	2100      	movs	r1, #0
 80136e0:	30f1      	adds	r0, #241	; 0xf1
 80136e2:	f000 fee6 	bl	80144b2 <memset1>
    ctx->M_n = 0;
 80136e6:	2100      	movs	r1, #0
 80136e8:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 80136ec:	22f0      	movs	r2, #240	; 0xf0
 80136ee:	4620      	mov	r0, r4
 80136f0:	f000 fedf 	bl	80144b2 <memset1>
}
 80136f4:	bd10      	pop	{r4, pc}

080136f6 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 80136f6:	b508      	push	{r3, lr}
 80136f8:	4602      	mov	r2, r0
 80136fa:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 80136fc:	2110      	movs	r1, #16
 80136fe:	f000 fb05 	bl	8013d0c <lorawan_aes_set_key>
}
 8013702:	bd08      	pop	{r3, pc}

08013704 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8013704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013708:	b085      	sub	sp, #20
 801370a:	4607      	mov	r7, r0
 801370c:	4688      	mov	r8, r1
 801370e:	4691      	mov	r9, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8013710:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8013714:	2b00      	cmp	r3, #0
 8013716:	d04b      	beq.n	80137b0 <AES_CMAC_Update+0xac>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 8013718:	f1c3 0510 	rsb	r5, r3, #16
 801371c:	462c      	mov	r4, r5
 801371e:	4295      	cmp	r5, r2
 8013720:	bf28      	it	cs
 8013722:	4614      	movcs	r4, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8013724:	f200 1001 	addw	r0, r0, #257	; 0x101
 8013728:	b2a2      	uxth	r2, r4
 801372a:	4418      	add	r0, r3
 801372c:	f000 feab 	bl	8014486 <memcpy1>
        ctx->M_n += mlen;
 8013730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013734:	4423      	add	r3, r4
 8013736:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 801373a:	2b0f      	cmp	r3, #15
 801373c:	d951      	bls.n	80137e2 <AES_CMAC_Update+0xde>
 801373e:	454d      	cmp	r5, r9
 8013740:	d24f      	bcs.n	80137e2 <AES_CMAC_Update+0xde>
            return;
        XOR( ctx->M_last, ctx->X );
 8013742:	2300      	movs	r3, #0
 8013744:	e008      	b.n	8013758 <AES_CMAC_Update+0x54>
 8013746:	18fa      	adds	r2, r7, r3
 8013748:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 801374c:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 8013750:	4041      	eors	r1, r0
 8013752:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 8013756:	3301      	adds	r3, #1
 8013758:	2b0f      	cmp	r3, #15
 801375a:	ddf4      	ble.n	8013746 <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 801375c:	f107 05f1 	add.w	r5, r7, #241	; 0xf1
 8013760:	2210      	movs	r2, #16
 8013762:	4629      	mov	r1, r5
 8013764:	4668      	mov	r0, sp
 8013766:	f000 fe8e 	bl	8014486 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 801376a:	463a      	mov	r2, r7
 801376c:	4669      	mov	r1, sp
 801376e:	4668      	mov	r0, sp
 8013770:	f000 fb56 	bl	8013e20 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8013774:	2210      	movs	r2, #16
 8013776:	4669      	mov	r1, sp
 8013778:	4628      	mov	r0, r5
 801377a:	f000 fe84 	bl	8014486 <memcpy1>

        data += mlen;
 801377e:	44a0      	add	r8, r4
        len -= mlen;
 8013780:	eba9 0904 	sub.w	r9, r9, r4
 8013784:	e014      	b.n	80137b0 <AES_CMAC_Update+0xac>
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8013786:	f107 04f1 	add.w	r4, r7, #241	; 0xf1
 801378a:	2210      	movs	r2, #16
 801378c:	4621      	mov	r1, r4
 801378e:	4668      	mov	r0, sp
 8013790:	f000 fe79 	bl	8014486 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8013794:	463a      	mov	r2, r7
 8013796:	4669      	mov	r1, sp
 8013798:	4668      	mov	r0, sp
 801379a:	f000 fb41 	bl	8013e20 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 801379e:	2210      	movs	r2, #16
 80137a0:	4669      	mov	r1, sp
 80137a2:	4620      	mov	r0, r4
 80137a4:	f000 fe6f 	bl	8014486 <memcpy1>

        data += 16;
 80137a8:	f108 0810 	add.w	r8, r8, #16
        len -= 16;
 80137ac:	f1a9 0910 	sub.w	r9, r9, #16
    while( len > 16 )
 80137b0:	f1b9 0f10 	cmp.w	r9, #16
 80137b4:	d90c      	bls.n	80137d0 <AES_CMAC_Update+0xcc>
        XOR( data, ctx->X );
 80137b6:	2300      	movs	r3, #0
 80137b8:	2b0f      	cmp	r3, #15
 80137ba:	dce4      	bgt.n	8013786 <AES_CMAC_Update+0x82>
 80137bc:	18fd      	adds	r5, r7, r3
 80137be:	f895 40f1 	ldrb.w	r4, [r5, #241]	; 0xf1
 80137c2:	f818 6003 	ldrb.w	r6, [r8, r3]
 80137c6:	4074      	eors	r4, r6
 80137c8:	f885 40f1 	strb.w	r4, [r5, #241]	; 0xf1
 80137cc:	3301      	adds	r3, #1
 80137ce:	e7f3      	b.n	80137b8 <AES_CMAC_Update+0xb4>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 80137d0:	fa1f f289 	uxth.w	r2, r9
 80137d4:	4641      	mov	r1, r8
 80137d6:	f207 1001 	addw	r0, r7, #257	; 0x101
 80137da:	f000 fe54 	bl	8014486 <memcpy1>
    ctx->M_n = len;
 80137de:	f8c7 9114 	str.w	r9, [r7, #276]	; 0x114
}
 80137e2:	b005      	add	sp, #20
 80137e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080137e8 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 80137e8:	b570      	push	{r4, r5, r6, lr}
 80137ea:	b088      	sub	sp, #32
 80137ec:	4606      	mov	r6, r0
 80137ee:	460d      	mov	r5, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 80137f0:	2210      	movs	r2, #16
 80137f2:	2100      	movs	r1, #0
 80137f4:	eb0d 0002 	add.w	r0, sp, r2
 80137f8:	f000 fe5b 	bl	80144b2 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 80137fc:	462a      	mov	r2, r5
 80137fe:	a904      	add	r1, sp, #16
 8013800:	4608      	mov	r0, r1
 8013802:	f000 fb0d 	bl	8013e20 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8013806:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 801380a:	2b00      	cmp	r3, #0
 801380c:	db19      	blt.n	8013842 <AES_CMAC_Final+0x5a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 801380e:	2300      	movs	r3, #0
 8013810:	e026      	b.n	8013860 <AES_CMAC_Final+0x78>
        LSHIFT( K, K );
 8013812:	aa08      	add	r2, sp, #32
 8013814:	18d1      	adds	r1, r2, r3
 8013816:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 801381a:	3301      	adds	r3, #1
 801381c:	441a      	add	r2, r3
 801381e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8013822:	09d2      	lsrs	r2, r2, #7
 8013824:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8013828:	f801 2c10 	strb.w	r2, [r1, #-16]
 801382c:	2b0e      	cmp	r3, #14
 801382e:	ddf0      	ble.n	8013812 <AES_CMAC_Final+0x2a>
 8013830:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013834:	005b      	lsls	r3, r3, #1
 8013836:	b2db      	uxtb	r3, r3
        K[15] ^= 0x87;
 8013838:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 801383c:	f88d 301f 	strb.w	r3, [sp, #31]
 8013840:	e015      	b.n	801386e <AES_CMAC_Final+0x86>
        LSHIFT( K, K );
 8013842:	2300      	movs	r3, #0
 8013844:	e7f2      	b.n	801382c <AES_CMAC_Final+0x44>
        LSHIFT( K, K );
 8013846:	aa08      	add	r2, sp, #32
 8013848:	18d1      	adds	r1, r2, r3
 801384a:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 801384e:	3301      	adds	r3, #1
 8013850:	441a      	add	r2, r3
 8013852:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8013856:	09d2      	lsrs	r2, r2, #7
 8013858:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 801385c:	f801 2c10 	strb.w	r2, [r1, #-16]
 8013860:	2b0e      	cmp	r3, #14
 8013862:	ddf0      	ble.n	8013846 <AES_CMAC_Final+0x5e>
 8013864:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013868:	005b      	lsls	r3, r3, #1
 801386a:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 801386e:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
 8013872:	2810      	cmp	r0, #16
 8013874:	d014      	beq.n	80138a0 <AES_CMAC_Final+0xb8>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 8013876:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 801387a:	2b00      	cmp	r3, #0
 801387c:	db1f      	blt.n	80138be <AES_CMAC_Final+0xd6>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 801387e:	2300      	movs	r3, #0
 8013880:	2b0e      	cmp	r3, #14
 8013882:	dc36      	bgt.n	80138f2 <AES_CMAC_Final+0x10a>
 8013884:	aa08      	add	r2, sp, #32
 8013886:	18d1      	adds	r1, r2, r3
 8013888:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 801388c:	3301      	adds	r3, #1
 801388e:	441a      	add	r2, r3
 8013890:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8013894:	09d2      	lsrs	r2, r2, #7
 8013896:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 801389a:	f801 2c10 	strb.w	r2, [r1, #-16]
 801389e:	e7ef      	b.n	8013880 <AES_CMAC_Final+0x98>
        XOR( K, ctx->M_last );
 80138a0:	2300      	movs	r3, #0
 80138a2:	2b0f      	cmp	r3, #15
 80138a4:	dc49      	bgt.n	801393a <AES_CMAC_Final+0x152>
 80138a6:	18e9      	adds	r1, r5, r3
 80138a8:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 80138ac:	a808      	add	r0, sp, #32
 80138ae:	4418      	add	r0, r3
 80138b0:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 80138b4:	4042      	eors	r2, r0
 80138b6:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 80138ba:	3301      	adds	r3, #1
 80138bc:	e7f1      	b.n	80138a2 <AES_CMAC_Final+0xba>
            LSHIFT( K, K );
 80138be:	2300      	movs	r3, #0
 80138c0:	2b0e      	cmp	r3, #14
 80138c2:	dc0d      	bgt.n	80138e0 <AES_CMAC_Final+0xf8>
 80138c4:	aa08      	add	r2, sp, #32
 80138c6:	18d1      	adds	r1, r2, r3
 80138c8:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 80138cc:	3301      	adds	r3, #1
 80138ce:	441a      	add	r2, r3
 80138d0:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80138d4:	09d2      	lsrs	r2, r2, #7
 80138d6:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 80138da:	f801 2c10 	strb.w	r2, [r1, #-16]
 80138de:	e7ef      	b.n	80138c0 <AES_CMAC_Final+0xd8>
 80138e0:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80138e4:	005b      	lsls	r3, r3, #1
 80138e6:	b2db      	uxtb	r3, r3
            K[15] ^= 0x87;
 80138e8:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 80138ec:	f88d 301f 	strb.w	r3, [sp, #31]
 80138f0:	e004      	b.n	80138fc <AES_CMAC_Final+0x114>
            LSHIFT( K, K );
 80138f2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80138f6:	005b      	lsls	r3, r3, #1
 80138f8:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 80138fc:	4428      	add	r0, r5
 80138fe:	2380      	movs	r3, #128	; 0x80
 8013900:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8013904:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 8013908:	3301      	adds	r3, #1
 801390a:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
 801390e:	2b0f      	cmp	r3, #15
 8013910:	d804      	bhi.n	801391c <AES_CMAC_Final+0x134>
            ctx->M_last[ctx->M_n] = 0;
 8013912:	442b      	add	r3, r5
 8013914:	2200      	movs	r2, #0
 8013916:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 801391a:	e7f3      	b.n	8013904 <AES_CMAC_Final+0x11c>

        XOR( K, ctx->M_last );
 801391c:	2300      	movs	r3, #0
 801391e:	2b0f      	cmp	r3, #15
 8013920:	dc0b      	bgt.n	801393a <AES_CMAC_Final+0x152>
 8013922:	18e9      	adds	r1, r5, r3
 8013924:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 8013928:	a808      	add	r0, sp, #32
 801392a:	4418      	add	r0, r3
 801392c:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8013930:	4042      	eors	r2, r0
 8013932:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 8013936:	3301      	adds	r3, #1
 8013938:	e7f1      	b.n	801391e <AES_CMAC_Final+0x136>
 801393a:	2300      	movs	r3, #0
    }
    XOR( ctx->M_last, ctx->X );
 801393c:	2b0f      	cmp	r3, #15
 801393e:	dc09      	bgt.n	8013954 <AES_CMAC_Final+0x16c>
 8013940:	18ea      	adds	r2, r5, r3
 8013942:	f892 40f1 	ldrb.w	r4, [r2, #241]	; 0xf1
 8013946:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 801394a:	404c      	eors	r4, r1
 801394c:	f882 40f1 	strb.w	r4, [r2, #241]	; 0xf1
 8013950:	3301      	adds	r3, #1
 8013952:	e7f3      	b.n	801393c <AES_CMAC_Final+0x154>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8013954:	2210      	movs	r2, #16
 8013956:	f105 01f1 	add.w	r1, r5, #241	; 0xf1
 801395a:	4668      	mov	r0, sp
 801395c:	f000 fd93 	bl	8014486 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8013960:	462a      	mov	r2, r5
 8013962:	4631      	mov	r1, r6
 8013964:	4668      	mov	r0, sp
 8013966:	f000 fa5b 	bl	8013e20 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 801396a:	2210      	movs	r2, #16
 801396c:	2100      	movs	r1, #0
 801396e:	eb0d 0002 	add.w	r0, sp, r2
 8013972:	f000 fd9e 	bl	80144b2 <memset1>
}
 8013976:	b008      	add	sp, #32
 8013978:	bd70      	pop	{r4, r5, r6, pc}

0801397a <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 801397a:	780b      	ldrb	r3, [r1, #0]
 801397c:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 801397e:	784b      	ldrb	r3, [r1, #1]
 8013980:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8013982:	788b      	ldrb	r3, [r1, #2]
 8013984:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8013986:	78cb      	ldrb	r3, [r1, #3]
 8013988:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 801398a:	790b      	ldrb	r3, [r1, #4]
 801398c:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 801398e:	794b      	ldrb	r3, [r1, #5]
 8013990:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8013992:	798b      	ldrb	r3, [r1, #6]
 8013994:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8013996:	79cb      	ldrb	r3, [r1, #7]
 8013998:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 801399a:	7a0b      	ldrb	r3, [r1, #8]
 801399c:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 801399e:	7a4b      	ldrb	r3, [r1, #9]
 80139a0:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 80139a2:	7a8b      	ldrb	r3, [r1, #10]
 80139a4:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 80139a6:	7acb      	ldrb	r3, [r1, #11]
 80139a8:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 80139aa:	7b0b      	ldrb	r3, [r1, #12]
 80139ac:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 80139ae:	7b4b      	ldrb	r3, [r1, #13]
 80139b0:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 80139b2:	7b8b      	ldrb	r3, [r1, #14]
 80139b4:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 80139b6:	7bcb      	ldrb	r3, [r1, #15]
 80139b8:	73c3      	strb	r3, [r0, #15]
#endif
}
 80139ba:	4770      	bx	lr

080139bc <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 80139bc:	1e53      	subs	r3, r2, #1
 80139be:	b2db      	uxtb	r3, r3
 80139c0:	b12a      	cbz	r2, 80139ce <copy_block_nn+0x12>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 80139c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80139c6:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 80139ca:	461a      	mov	r2, r3
 80139cc:	e7f6      	b.n	80139bc <copy_block_nn>
}
 80139ce:	4770      	bx	lr

080139d0 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 80139d0:	780b      	ldrb	r3, [r1, #0]
 80139d2:	7802      	ldrb	r2, [r0, #0]
 80139d4:	4053      	eors	r3, r2
 80139d6:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 80139d8:	784b      	ldrb	r3, [r1, #1]
 80139da:	7842      	ldrb	r2, [r0, #1]
 80139dc:	4053      	eors	r3, r2
 80139de:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 80139e0:	788b      	ldrb	r3, [r1, #2]
 80139e2:	7882      	ldrb	r2, [r0, #2]
 80139e4:	4053      	eors	r3, r2
 80139e6:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 80139e8:	78cb      	ldrb	r3, [r1, #3]
 80139ea:	78c2      	ldrb	r2, [r0, #3]
 80139ec:	4053      	eors	r3, r2
 80139ee:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 80139f0:	790b      	ldrb	r3, [r1, #4]
 80139f2:	7902      	ldrb	r2, [r0, #4]
 80139f4:	4053      	eors	r3, r2
 80139f6:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 80139f8:	794b      	ldrb	r3, [r1, #5]
 80139fa:	7942      	ldrb	r2, [r0, #5]
 80139fc:	4053      	eors	r3, r2
 80139fe:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8013a00:	798b      	ldrb	r3, [r1, #6]
 8013a02:	7982      	ldrb	r2, [r0, #6]
 8013a04:	4053      	eors	r3, r2
 8013a06:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8013a08:	79cb      	ldrb	r3, [r1, #7]
 8013a0a:	79c2      	ldrb	r2, [r0, #7]
 8013a0c:	4053      	eors	r3, r2
 8013a0e:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8013a10:	7a0b      	ldrb	r3, [r1, #8]
 8013a12:	7a02      	ldrb	r2, [r0, #8]
 8013a14:	4053      	eors	r3, r2
 8013a16:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8013a18:	7a4b      	ldrb	r3, [r1, #9]
 8013a1a:	7a42      	ldrb	r2, [r0, #9]
 8013a1c:	4053      	eors	r3, r2
 8013a1e:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8013a20:	7a8b      	ldrb	r3, [r1, #10]
 8013a22:	7a82      	ldrb	r2, [r0, #10]
 8013a24:	4053      	eors	r3, r2
 8013a26:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8013a28:	7acb      	ldrb	r3, [r1, #11]
 8013a2a:	7ac2      	ldrb	r2, [r0, #11]
 8013a2c:	4053      	eors	r3, r2
 8013a2e:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8013a30:	7b0b      	ldrb	r3, [r1, #12]
 8013a32:	7b02      	ldrb	r2, [r0, #12]
 8013a34:	4053      	eors	r3, r2
 8013a36:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8013a38:	7b4b      	ldrb	r3, [r1, #13]
 8013a3a:	7b42      	ldrb	r2, [r0, #13]
 8013a3c:	4053      	eors	r3, r2
 8013a3e:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8013a40:	7b8b      	ldrb	r3, [r1, #14]
 8013a42:	7b82      	ldrb	r2, [r0, #14]
 8013a44:	4053      	eors	r3, r2
 8013a46:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8013a48:	7bcb      	ldrb	r3, [r1, #15]
 8013a4a:	7bc2      	ldrb	r2, [r0, #15]
 8013a4c:	4053      	eors	r3, r2
 8013a4e:	73c3      	strb	r3, [r0, #15]
#endif
}
 8013a50:	4770      	bx	lr

08013a52 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8013a52:	b410      	push	{r4}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8013a54:	780b      	ldrb	r3, [r1, #0]
 8013a56:	7814      	ldrb	r4, [r2, #0]
 8013a58:	4063      	eors	r3, r4
 8013a5a:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8013a5c:	784b      	ldrb	r3, [r1, #1]
 8013a5e:	7854      	ldrb	r4, [r2, #1]
 8013a60:	4063      	eors	r3, r4
 8013a62:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8013a64:	788b      	ldrb	r3, [r1, #2]
 8013a66:	7894      	ldrb	r4, [r2, #2]
 8013a68:	4063      	eors	r3, r4
 8013a6a:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8013a6c:	78cb      	ldrb	r3, [r1, #3]
 8013a6e:	78d4      	ldrb	r4, [r2, #3]
 8013a70:	4063      	eors	r3, r4
 8013a72:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8013a74:	790b      	ldrb	r3, [r1, #4]
 8013a76:	7914      	ldrb	r4, [r2, #4]
 8013a78:	4063      	eors	r3, r4
 8013a7a:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8013a7c:	794b      	ldrb	r3, [r1, #5]
 8013a7e:	7954      	ldrb	r4, [r2, #5]
 8013a80:	4063      	eors	r3, r4
 8013a82:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8013a84:	798b      	ldrb	r3, [r1, #6]
 8013a86:	7994      	ldrb	r4, [r2, #6]
 8013a88:	4063      	eors	r3, r4
 8013a8a:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8013a8c:	79cb      	ldrb	r3, [r1, #7]
 8013a8e:	79d4      	ldrb	r4, [r2, #7]
 8013a90:	4063      	eors	r3, r4
 8013a92:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8013a94:	7a0b      	ldrb	r3, [r1, #8]
 8013a96:	7a14      	ldrb	r4, [r2, #8]
 8013a98:	4063      	eors	r3, r4
 8013a9a:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8013a9c:	7a4b      	ldrb	r3, [r1, #9]
 8013a9e:	7a54      	ldrb	r4, [r2, #9]
 8013aa0:	4063      	eors	r3, r4
 8013aa2:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8013aa4:	7a8b      	ldrb	r3, [r1, #10]
 8013aa6:	7a94      	ldrb	r4, [r2, #10]
 8013aa8:	4063      	eors	r3, r4
 8013aaa:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8013aac:	7acb      	ldrb	r3, [r1, #11]
 8013aae:	7ad4      	ldrb	r4, [r2, #11]
 8013ab0:	4063      	eors	r3, r4
 8013ab2:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8013ab4:	7b0b      	ldrb	r3, [r1, #12]
 8013ab6:	7b14      	ldrb	r4, [r2, #12]
 8013ab8:	4063      	eors	r3, r4
 8013aba:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8013abc:	7b4b      	ldrb	r3, [r1, #13]
 8013abe:	7b54      	ldrb	r4, [r2, #13]
 8013ac0:	4063      	eors	r3, r4
 8013ac2:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8013ac4:	7b8b      	ldrb	r3, [r1, #14]
 8013ac6:	7b94      	ldrb	r4, [r2, #14]
 8013ac8:	4063      	eors	r3, r4
 8013aca:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8013acc:	7bcb      	ldrb	r3, [r1, #15]
 8013ace:	7bd2      	ldrb	r2, [r2, #15]
 8013ad0:	4053      	eors	r3, r2
 8013ad2:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8013ad4:	bc10      	pop	{r4}
 8013ad6:	4770      	bx	lr

08013ad8 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8013ad8:	b508      	push	{r3, lr}
    xor_block(d, k);
 8013ada:	f7ff ff79 	bl	80139d0 <xor_block>
}
 8013ade:	bd08      	pop	{r3, pc}

08013ae0 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8013ae0:	7802      	ldrb	r2, [r0, #0]
 8013ae2:	4b18      	ldr	r3, [pc, #96]	; (8013b44 <shift_sub_rows+0x64>)
 8013ae4:	5c9a      	ldrb	r2, [r3, r2]
 8013ae6:	7002      	strb	r2, [r0, #0]
 8013ae8:	7902      	ldrb	r2, [r0, #4]
 8013aea:	5c9a      	ldrb	r2, [r3, r2]
 8013aec:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8013aee:	7a02      	ldrb	r2, [r0, #8]
 8013af0:	5c9a      	ldrb	r2, [r3, r2]
 8013af2:	7202      	strb	r2, [r0, #8]
 8013af4:	7b02      	ldrb	r2, [r0, #12]
 8013af6:	5c9a      	ldrb	r2, [r3, r2]
 8013af8:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8013afa:	7842      	ldrb	r2, [r0, #1]
 8013afc:	7941      	ldrb	r1, [r0, #5]
 8013afe:	5c59      	ldrb	r1, [r3, r1]
 8013b00:	7041      	strb	r1, [r0, #1]
 8013b02:	7a41      	ldrb	r1, [r0, #9]
 8013b04:	5c59      	ldrb	r1, [r3, r1]
 8013b06:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8013b08:	7b41      	ldrb	r1, [r0, #13]
 8013b0a:	5c59      	ldrb	r1, [r3, r1]
 8013b0c:	7241      	strb	r1, [r0, #9]
 8013b0e:	5c9a      	ldrb	r2, [r3, r2]
 8013b10:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8013b12:	7882      	ldrb	r2, [r0, #2]
 8013b14:	7a81      	ldrb	r1, [r0, #10]
 8013b16:	5c59      	ldrb	r1, [r3, r1]
 8013b18:	7081      	strb	r1, [r0, #2]
 8013b1a:	5c9a      	ldrb	r2, [r3, r2]
 8013b1c:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8013b1e:	7982      	ldrb	r2, [r0, #6]
 8013b20:	7b81      	ldrb	r1, [r0, #14]
 8013b22:	5c59      	ldrb	r1, [r3, r1]
 8013b24:	7181      	strb	r1, [r0, #6]
 8013b26:	5c9a      	ldrb	r2, [r3, r2]
 8013b28:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8013b2a:	7bc2      	ldrb	r2, [r0, #15]
 8013b2c:	7ac1      	ldrb	r1, [r0, #11]
 8013b2e:	5c59      	ldrb	r1, [r3, r1]
 8013b30:	73c1      	strb	r1, [r0, #15]
 8013b32:	79c1      	ldrb	r1, [r0, #7]
 8013b34:	5c59      	ldrb	r1, [r3, r1]
 8013b36:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8013b38:	78c1      	ldrb	r1, [r0, #3]
 8013b3a:	5c59      	ldrb	r1, [r3, r1]
 8013b3c:	71c1      	strb	r1, [r0, #7]
 8013b3e:	5c9b      	ldrb	r3, [r3, r2]
 8013b40:	70c3      	strb	r3, [r0, #3]
}
 8013b42:	4770      	bx	lr
 8013b44:	08018020 	.word	0x08018020

08013b48 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8013b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b4c:	b084      	sub	sp, #16
 8013b4e:	4604      	mov	r4, r0
    block_copy(st, dt);
 8013b50:	4601      	mov	r1, r0
 8013b52:	4668      	mov	r0, sp
 8013b54:	f7ff ff11 	bl	801397a <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8013b58:	f89d c000 	ldrb.w	ip, [sp]
 8013b5c:	4b68      	ldr	r3, [pc, #416]	; (8013d00 <mix_sub_columns+0x1b8>)
 8013b5e:	f813 000c 	ldrb.w	r0, [r3, ip]
 8013b62:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8013b66:	4a67      	ldr	r2, [pc, #412]	; (8013d04 <mix_sub_columns+0x1bc>)
 8013b68:	f812 9008 	ldrb.w	r9, [r2, r8]
 8013b6c:	f89d e00a 	ldrb.w	lr, [sp, #10]
 8013b70:	4965      	ldr	r1, [pc, #404]	; (8013d08 <mix_sub_columns+0x1c0>)
 8013b72:	f811 500e 	ldrb.w	r5, [r1, lr]
 8013b76:	f89d 700f 	ldrb.w	r7, [sp, #15]
 8013b7a:	5dce      	ldrb	r6, [r1, r7]
 8013b7c:	ea80 0009 	eor.w	r0, r0, r9
 8013b80:	4068      	eors	r0, r5
 8013b82:	4070      	eors	r0, r6
 8013b84:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8013b86:	f811 000c 	ldrb.w	r0, [r1, ip]
 8013b8a:	f813 a008 	ldrb.w	sl, [r3, r8]
 8013b8e:	f812 900e 	ldrb.w	r9, [r2, lr]
 8013b92:	ea80 0a0a 	eor.w	sl, r0, sl
 8013b96:	ea89 090a 	eor.w	r9, r9, sl
 8013b9a:	ea86 0609 	eor.w	r6, r6, r9
 8013b9e:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8013ba0:	f811 8008 	ldrb.w	r8, [r1, r8]
 8013ba4:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8013ba8:	5dd6      	ldrb	r6, [r2, r7]
 8013baa:	ea80 0008 	eor.w	r0, r0, r8
 8013bae:	ea8e 0000 	eor.w	r0, lr, r0
 8013bb2:	4070      	eors	r0, r6
 8013bb4:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8013bb6:	f812 600c 	ldrb.w	r6, [r2, ip]
 8013bba:	5dd8      	ldrb	r0, [r3, r7]
 8013bbc:	ea86 0608 	eor.w	r6, r6, r8
 8013bc0:	4075      	eors	r5, r6
 8013bc2:	4045      	eors	r5, r0
 8013bc4:	70e5      	strb	r5, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8013bc6:	f89d c004 	ldrb.w	ip, [sp, #4]
 8013bca:	f813 000c 	ldrb.w	r0, [r3, ip]
 8013bce:	f89d 8009 	ldrb.w	r8, [sp, #9]
 8013bd2:	f812 9008 	ldrb.w	r9, [r2, r8]
 8013bd6:	f89d e00e 	ldrb.w	lr, [sp, #14]
 8013bda:	f811 500e 	ldrb.w	r5, [r1, lr]
 8013bde:	f89d 7003 	ldrb.w	r7, [sp, #3]
 8013be2:	5dce      	ldrb	r6, [r1, r7]
 8013be4:	ea80 0009 	eor.w	r0, r0, r9
 8013be8:	4068      	eors	r0, r5
 8013bea:	4070      	eors	r0, r6
 8013bec:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8013bee:	f811 000c 	ldrb.w	r0, [r1, ip]
 8013bf2:	f813 a008 	ldrb.w	sl, [r3, r8]
 8013bf6:	f812 900e 	ldrb.w	r9, [r2, lr]
 8013bfa:	ea80 0a0a 	eor.w	sl, r0, sl
 8013bfe:	ea89 090a 	eor.w	r9, r9, sl
 8013c02:	ea86 0609 	eor.w	r6, r6, r9
 8013c06:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8013c08:	f811 8008 	ldrb.w	r8, [r1, r8]
 8013c0c:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8013c10:	5dd6      	ldrb	r6, [r2, r7]
 8013c12:	ea80 0008 	eor.w	r0, r0, r8
 8013c16:	ea8e 0000 	eor.w	r0, lr, r0
 8013c1a:	4070      	eors	r0, r6
 8013c1c:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8013c1e:	f812 600c 	ldrb.w	r6, [r2, ip]
 8013c22:	5dd8      	ldrb	r0, [r3, r7]
 8013c24:	ea86 0608 	eor.w	r6, r6, r8
 8013c28:	4075      	eors	r5, r6
 8013c2a:	4045      	eors	r5, r0
 8013c2c:	71e5      	strb	r5, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8013c2e:	f89d c008 	ldrb.w	ip, [sp, #8]
 8013c32:	f813 000c 	ldrb.w	r0, [r3, ip]
 8013c36:	f89d 800d 	ldrb.w	r8, [sp, #13]
 8013c3a:	f812 9008 	ldrb.w	r9, [r2, r8]
 8013c3e:	f89d e002 	ldrb.w	lr, [sp, #2]
 8013c42:	f811 500e 	ldrb.w	r5, [r1, lr]
 8013c46:	f89d 7007 	ldrb.w	r7, [sp, #7]
 8013c4a:	5dce      	ldrb	r6, [r1, r7]
 8013c4c:	ea80 0009 	eor.w	r0, r0, r9
 8013c50:	4068      	eors	r0, r5
 8013c52:	4070      	eors	r0, r6
 8013c54:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8013c56:	f811 000c 	ldrb.w	r0, [r1, ip]
 8013c5a:	f813 a008 	ldrb.w	sl, [r3, r8]
 8013c5e:	f812 900e 	ldrb.w	r9, [r2, lr]
 8013c62:	ea80 0a0a 	eor.w	sl, r0, sl
 8013c66:	ea89 090a 	eor.w	r9, r9, sl
 8013c6a:	ea86 0609 	eor.w	r6, r6, r9
 8013c6e:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8013c70:	f811 8008 	ldrb.w	r8, [r1, r8]
 8013c74:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8013c78:	5dd6      	ldrb	r6, [r2, r7]
 8013c7a:	ea80 0008 	eor.w	r0, r0, r8
 8013c7e:	ea8e 0000 	eor.w	r0, lr, r0
 8013c82:	4070      	eors	r0, r6
 8013c84:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8013c86:	f812 600c 	ldrb.w	r6, [r2, ip]
 8013c8a:	5dd8      	ldrb	r0, [r3, r7]
 8013c8c:	ea86 0608 	eor.w	r6, r6, r8
 8013c90:	4075      	eors	r5, r6
 8013c92:	4045      	eors	r5, r0
 8013c94:	72e5      	strb	r5, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8013c96:	f89d c00c 	ldrb.w	ip, [sp, #12]
 8013c9a:	f813 000c 	ldrb.w	r0, [r3, ip]
 8013c9e:	f89d 8001 	ldrb.w	r8, [sp, #1]
 8013ca2:	f812 9008 	ldrb.w	r9, [r2, r8]
 8013ca6:	f89d e006 	ldrb.w	lr, [sp, #6]
 8013caa:	f811 500e 	ldrb.w	r5, [r1, lr]
 8013cae:	f89d 700b 	ldrb.w	r7, [sp, #11]
 8013cb2:	5dce      	ldrb	r6, [r1, r7]
 8013cb4:	ea80 0009 	eor.w	r0, r0, r9
 8013cb8:	4068      	eors	r0, r5
 8013cba:	4070      	eors	r0, r6
 8013cbc:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8013cbe:	f811 000c 	ldrb.w	r0, [r1, ip]
 8013cc2:	f813 a008 	ldrb.w	sl, [r3, r8]
 8013cc6:	f812 900e 	ldrb.w	r9, [r2, lr]
 8013cca:	ea80 0a0a 	eor.w	sl, r0, sl
 8013cce:	ea89 090a 	eor.w	r9, r9, sl
 8013cd2:	ea86 0609 	eor.w	r6, r6, r9
 8013cd6:	7366      	strb	r6, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8013cd8:	f811 1008 	ldrb.w	r1, [r1, r8]
 8013cdc:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8013ce0:	5dd6      	ldrb	r6, [r2, r7]
 8013ce2:	4048      	eors	r0, r1
 8013ce4:	ea8e 0000 	eor.w	r0, lr, r0
 8013ce8:	4070      	eors	r0, r6
 8013cea:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8013cec:	f812 200c 	ldrb.w	r2, [r2, ip]
 8013cf0:	5ddb      	ldrb	r3, [r3, r7]
 8013cf2:	4051      	eors	r1, r2
 8013cf4:	404d      	eors	r5, r1
 8013cf6:	405d      	eors	r5, r3
 8013cf8:	73e5      	strb	r5, [r4, #15]
  }
 8013cfa:	b004      	add	sp, #16
 8013cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d00:	08017e20 	.word	0x08017e20
 8013d04:	08017f20 	.word	0x08017f20
 8013d08:	08018020 	.word	0x08018020

08013d0c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8013d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d10:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 8013d12:	f1a1 0310 	sub.w	r3, r1, #16
 8013d16:	b2da      	uxtb	r2, r3
 8013d18:	2a10      	cmp	r2, #16
 8013d1a:	d807      	bhi.n	8013d2c <lorawan_aes_set_key+0x20>
 8013d1c:	460d      	mov	r5, r1
 8013d1e:	2301      	movs	r3, #1
 8013d20:	4093      	lsls	r3, r2
 8013d22:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8013d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013d2a:	b92b      	cbnz	r3, 8013d38 <lorawan_aes_set_key+0x2c>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 8013d32:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8013d34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 8013d38:	460a      	mov	r2, r1
 8013d3a:	4601      	mov	r1, r0
 8013d3c:	4620      	mov	r0, r4
 8013d3e:	f7ff fe3d 	bl	80139bc <copy_block_nn>
    hi = (keylen + 28) << 2;
 8013d42:	f105 031c 	add.w	r3, r5, #28
 8013d46:	b2db      	uxtb	r3, r3
 8013d48:	009b      	lsls	r3, r3, #2
 8013d4a:	b2df      	uxtb	r7, r3
    ctx->rnd = (hi >> 4) - 1;
 8013d4c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8013d50:	3b01      	subs	r3, #1
 8013d52:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8013d56:	462b      	mov	r3, r5
 8013d58:	2601      	movs	r6, #1
 8013d5a:	e028      	b.n	8013dae <lorawan_aes_set_key+0xa2>
        else if( keylen > 24 && cc % keylen == 16 )
 8013d5c:	2d18      	cmp	r5, #24
 8013d5e:	d901      	bls.n	8013d64 <lorawan_aes_set_key+0x58>
 8013d60:	2a10      	cmp	r2, #16
 8013d62:	d04f      	beq.n	8013e04 <lorawan_aes_set_key+0xf8>
        tt = cc - keylen;
 8013d64:	1b5a      	subs	r2, r3, r5
 8013d66:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8013d68:	f814 9002 	ldrb.w	r9, [r4, r2]
 8013d6c:	ea89 0808 	eor.w	r8, r9, r8
 8013d70:	f804 8001 	strb.w	r8, [r4, r1]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8013d74:	f102 0801 	add.w	r8, r2, #1
 8013d78:	f814 8008 	ldrb.w	r8, [r4, r8]
 8013d7c:	f101 0901 	add.w	r9, r1, #1
 8013d80:	ea88 0e0e 	eor.w	lr, r8, lr
 8013d84:	f804 e009 	strb.w	lr, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8013d88:	f102 0e02 	add.w	lr, r2, #2
 8013d8c:	f814 e00e 	ldrb.w	lr, [r4, lr]
 8013d90:	f101 0802 	add.w	r8, r1, #2
 8013d94:	ea8e 0c0c 	eor.w	ip, lr, ip
 8013d98:	f804 c008 	strb.w	ip, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8013d9c:	3203      	adds	r2, #3
 8013d9e:	f814 c002 	ldrb.w	ip, [r4, r2]
 8013da2:	1cca      	adds	r2, r1, #3
 8013da4:	ea8c 0000 	eor.w	r0, ip, r0
 8013da8:	54a0      	strb	r0, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8013daa:	3304      	adds	r3, #4
 8013dac:	b2db      	uxtb	r3, r3
 8013dae:	42bb      	cmp	r3, r7
 8013db0:	d231      	bcs.n	8013e16 <lorawan_aes_set_key+0x10a>
        t0 = ctx->ksch[cc - 4];
 8013db2:	4619      	mov	r1, r3
 8013db4:	1f1a      	subs	r2, r3, #4
 8013db6:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 8013dba:	1eda      	subs	r2, r3, #3
 8013dbc:	f814 e002 	ldrb.w	lr, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 8013dc0:	1e9a      	subs	r2, r3, #2
 8013dc2:	f814 c002 	ldrb.w	ip, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 8013dc6:	1e5a      	subs	r2, r3, #1
 8013dc8:	5ca0      	ldrb	r0, [r4, r2]
        if( cc % keylen == 0 )
 8013dca:	fbb3 f2f5 	udiv	r2, r3, r5
 8013dce:	fb05 3212 	mls	r2, r5, r2, r3
 8013dd2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8013dd6:	d1c1      	bne.n	8013d5c <lorawan_aes_set_key+0x50>
            t0 = s_box(t1) ^ rc;
 8013dd8:	4a10      	ldr	r2, [pc, #64]	; (8013e1c <lorawan_aes_set_key+0x110>)
 8013dda:	f812 900e 	ldrb.w	r9, [r2, lr]
 8013dde:	ea89 0906 	eor.w	r9, r9, r6
            t1 = s_box(t2);
 8013de2:	f812 e00c 	ldrb.w	lr, [r2, ip]
            t2 = s_box(t3);
 8013de6:	f812 c000 	ldrb.w	ip, [r2, r0]
            t3 = s_box(tt);
 8013dea:	f812 0008 	ldrb.w	r0, [r2, r8]
            rc = f2(rc);
 8013dee:	09f2      	lsrs	r2, r6, #7
 8013df0:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8013df4:	4442      	add	r2, r8
 8013df6:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8013dfa:	ea82 0646 	eor.w	r6, r2, r6, lsl #1
 8013dfe:	b2f6      	uxtb	r6, r6
            t0 = s_box(t1) ^ rc;
 8013e00:	46c8      	mov	r8, r9
 8013e02:	e7af      	b.n	8013d64 <lorawan_aes_set_key+0x58>
            t0 = s_box(t0);
 8013e04:	4a05      	ldr	r2, [pc, #20]	; (8013e1c <lorawan_aes_set_key+0x110>)
 8013e06:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 8013e0a:	f812 e00e 	ldrb.w	lr, [r2, lr]
            t2 = s_box(t2);
 8013e0e:	f812 c00c 	ldrb.w	ip, [r2, ip]
            t3 = s_box(t3);
 8013e12:	5c10      	ldrb	r0, [r2, r0]
 8013e14:	e7a6      	b.n	8013d64 <lorawan_aes_set_key+0x58>
    return 0;
 8013e16:	2000      	movs	r0, #0
 8013e18:	e78c      	b.n	8013d34 <lorawan_aes_set_key+0x28>
 8013e1a:	bf00      	nop
 8013e1c:	08018020 	.word	0x08018020

08013e20 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 8013e20:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 8013e24:	b323      	cbz	r3, 8013e70 <lorawan_aes_encrypt+0x50>
{
 8013e26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e28:	b085      	sub	sp, #20
 8013e2a:	460f      	mov	r7, r1
 8013e2c:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8013e2e:	4616      	mov	r6, r2
 8013e30:	4601      	mov	r1, r0
 8013e32:	4668      	mov	r0, sp
 8013e34:	f7ff fe0d 	bl	8013a52 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8013e38:	2401      	movs	r4, #1
 8013e3a:	e009      	b.n	8013e50 <lorawan_aes_encrypt+0x30>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 8013e3c:	4668      	mov	r0, sp
 8013e3e:	f7ff fe83 	bl	8013b48 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8013e42:	eb06 1104 	add.w	r1, r6, r4, lsl #4
 8013e46:	4668      	mov	r0, sp
 8013e48:	f7ff fe46 	bl	8013ad8 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8013e4c:	3401      	adds	r4, #1
 8013e4e:	b2e4      	uxtb	r4, r4
 8013e50:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 8013e54:	42a3      	cmp	r3, r4
 8013e56:	d8f1      	bhi.n	8013e3c <lorawan_aes_encrypt+0x1c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8013e58:	4668      	mov	r0, sp
 8013e5a:	f7ff fe41 	bl	8013ae0 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8013e5e:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8013e62:	4669      	mov	r1, sp
 8013e64:	4638      	mov	r0, r7
 8013e66:	f7ff fdf4 	bl	8013a52 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8013e6a:	2000      	movs	r0, #0
}
 8013e6c:	b005      	add	sp, #20
 8013e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ( uint8_t )-1;
 8013e70:	20ff      	movs	r0, #255	; 0xff
}
 8013e72:	4770      	bx	lr

08013e74 <GetKeyByID>:
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8013e74:	2300      	movs	r3, #0
 8013e76:	2b09      	cmp	r3, #9
 8013e78:	d816      	bhi.n	8013ea8 <GetKeyByID+0x34>
{
 8013e7a:	b430      	push	{r4, r5}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8013e7c:	4a0b      	ldr	r2, [pc, #44]	; (8013eac <GetKeyByID+0x38>)
 8013e7e:	6814      	ldr	r4, [r2, #0]
 8013e80:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8013e84:	4422      	add	r2, r4
 8013e86:	7c12      	ldrb	r2, [r2, #16]
 8013e88:	4282      	cmp	r2, r0
 8013e8a:	d006      	beq.n	8013e9a <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8013e8c:	3301      	adds	r3, #1
 8013e8e:	b2db      	uxtb	r3, r3
 8013e90:	2b09      	cmp	r3, #9
 8013e92:	d9f3      	bls.n	8013e7c <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8013e94:	2003      	movs	r0, #3
}
 8013e96:	bc30      	pop	{r4, r5}
 8013e98:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 8013e9a:	eb03 1503 	add.w	r5, r3, r3, lsl #4
 8013e9e:	3510      	adds	r5, #16
 8013ea0:	442c      	add	r4, r5
 8013ea2:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8013ea4:	2000      	movs	r0, #0
 8013ea6:	e7f6      	b.n	8013e96 <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8013ea8:	2003      	movs	r0, #3
}
 8013eaa:	4770      	bx	lr
 8013eac:	20001474 	.word	0x20001474

08013eb0 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 8013eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013eb4:	b0cc      	sub	sp, #304	; 0x130
 8013eb6:	9e52      	ldr	r6, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8013eb8:	b3a9      	cbz	r1, 8013f26 <ComputeCmac+0x76>
 8013eba:	4605      	mov	r5, r0
 8013ebc:	4617      	mov	r7, r2
 8013ebe:	461c      	mov	r4, r3
 8013ec0:	4688      	mov	r8, r1
 8013ec2:	b396      	cbz	r6, 8013f2a <ComputeCmac+0x7a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 8013ec4:	a802      	add	r0, sp, #8
 8013ec6:	f7ff fc07 	bl	80136d8 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8013eca:	a901      	add	r1, sp, #4
 8013ecc:	4620      	mov	r0, r4
 8013ece:	f7ff ffd1 	bl	8013e74 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8013ed2:	4604      	mov	r4, r0
 8013ed4:	b118      	cbz	r0, 8013ede <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 8013ed6:	4620      	mov	r0, r4
 8013ed8:	b04c      	add	sp, #304	; 0x130
 8013eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8013ede:	9901      	ldr	r1, [sp, #4]
 8013ee0:	3101      	adds	r1, #1
 8013ee2:	a802      	add	r0, sp, #8
 8013ee4:	f7ff fc07 	bl	80136f6 <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 8013ee8:	b125      	cbz	r5, 8013ef4 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 8013eea:	2210      	movs	r2, #16
 8013eec:	4629      	mov	r1, r5
 8013eee:	a802      	add	r0, sp, #8
 8013ef0:	f7ff fc08 	bl	8013704 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8013ef4:	463a      	mov	r2, r7
 8013ef6:	4641      	mov	r1, r8
 8013ef8:	a802      	add	r0, sp, #8
 8013efa:	f7ff fc03 	bl	8013704 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 8013efe:	a902      	add	r1, sp, #8
 8013f00:	a848      	add	r0, sp, #288	; 0x120
 8013f02:	f7ff fc71 	bl	80137e8 <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 8013f06:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 8013f0a:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 8013f0e:	041b      	lsls	r3, r3, #16
 8013f10:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013f14:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 8013f18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              ( uint32_t ) Cmac[0] );
 8013f1c:	f89d 2120 	ldrb.w	r2, [sp, #288]	; 0x120
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 8013f20:	4313      	orrs	r3, r2
 8013f22:	6033      	str	r3, [r6, #0]
 8013f24:	e7d7      	b.n	8013ed6 <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 8013f26:	2402      	movs	r4, #2
 8013f28:	e7d5      	b.n	8013ed6 <ComputeCmac+0x26>
 8013f2a:	2402      	movs	r4, #2
 8013f2c:	e7d3      	b.n	8013ed6 <ComputeCmac+0x26>
	...

08013f30 <SecureElementGetKeyByID>:
/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 8013f30:	2300      	movs	r3, #0
 8013f32:	2b09      	cmp	r3, #9
 8013f34:	d816      	bhi.n	8013f64 <SecureElementGetKeyByID+0x34>
{
 8013f36:	b430      	push	{r4, r5}
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 8013f38:	4a0b      	ldr	r2, [pc, #44]	; (8013f68 <SecureElementGetKeyByID+0x38>)
 8013f3a:	6814      	ldr	r4, [r2, #0]
 8013f3c:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8013f40:	4422      	add	r2, r4
 8013f42:	7c12      	ldrb	r2, [r2, #16]
 8013f44:	4282      	cmp	r2, r0
 8013f46:	d006      	beq.n	8013f56 <SecureElementGetKeyByID+0x26>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 8013f48:	3301      	adds	r3, #1
 8013f4a:	b2db      	uxtb	r3, r3
 8013f4c:	2b09      	cmp	r3, #9
 8013f4e:	d9f3      	bls.n	8013f38 <SecureElementGetKeyByID+0x8>
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8013f50:	2003      	movs	r0, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 8013f52:	bc30      	pop	{r4, r5}
 8013f54:	4770      	bx	lr
            *keyItem = &(SeNvm->KeyList[i]);
 8013f56:	eb03 1503 	add.w	r5, r3, r3, lsl #4
 8013f5a:	3510      	adds	r5, #16
 8013f5c:	442c      	add	r4, r5
 8013f5e:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8013f60:	2000      	movs	r0, #0
 8013f62:	e7f6      	b.n	8013f52 <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8013f64:	2003      	movs	r0, #3
}
 8013f66:	4770      	bx	lr
 8013f68:	20001474 	.word	0x20001474

08013f6c <PrintKey>:
{
 8013f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f70:	b095      	sub	sp, #84	; 0x54
 8013f72:	4604      	mov	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 8013f74:	a913      	add	r1, sp, #76	; 0x4c
 8013f76:	f7ff ffdb 	bl	8013f30 <SecureElementGetKeyByID>
    if (retval == SECURE_ELEMENT_SUCCESS)
 8013f7a:	2800      	cmp	r0, #0
 8013f7c:	d154      	bne.n	8014028 <PrintKey+0xbc>
        if (key == APP_KEY)
 8013f7e:	b1b4      	cbz	r4, 8013fae <PrintKey+0x42>
        else if (key == NWK_KEY)
 8013f80:	2c01      	cmp	r4, #1
 8013f82:	d054      	beq.n	801402e <PrintKey+0xc2>
        else if (key == APP_S_KEY)
 8013f84:	2c03      	cmp	r4, #3
 8013f86:	d059      	beq.n	801403c <PrintKey+0xd0>
        else if (key == NWK_S_KEY)
 8013f88:	2c02      	cmp	r4, #2
 8013f8a:	d05e      	beq.n	801404a <PrintKey+0xde>
        else if (key == MC_ROOT_KEY)
 8013f8c:	2c04      	cmp	r4, #4
 8013f8e:	d063      	beq.n	8014058 <PrintKey+0xec>
        else if (key == MC_KE_KEY)
 8013f90:	2c7f      	cmp	r4, #127	; 0x7f
 8013f92:	d068      	beq.n	8014066 <PrintKey+0xfa>
        else if (key == MC_KEY_0)
 8013f94:	2c80      	cmp	r4, #128	; 0x80
 8013f96:	d06d      	beq.n	8014074 <PrintKey+0x108>
        else if (key == MC_APP_S_KEY_0)
 8013f98:	2c81      	cmp	r4, #129	; 0x81
 8013f9a:	d072      	beq.n	8014082 <PrintKey+0x116>
        else if (key == MC_NWK_S_KEY_0)
 8013f9c:	2c82      	cmp	r4, #130	; 0x82
 8013f9e:	d10c      	bne.n	8013fba <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 8013fa0:	4b3b      	ldr	r3, [pc, #236]	; (8014090 <PrintKey+0x124>)
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	4611      	mov	r1, r2
 8013fa6:	2002      	movs	r0, #2
 8013fa8:	f002 fbf6 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
 8013fac:	e005      	b.n	8013fba <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 8013fae:	4b39      	ldr	r3, [pc, #228]	; (8014094 <PrintKey+0x128>)
 8013fb0:	2200      	movs	r2, #0
 8013fb2:	4611      	mov	r1, r2
 8013fb4:	2002      	movs	r0, #2
 8013fb6:	f002 fbef 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8013fba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013fbc:	785a      	ldrb	r2, [r3, #1]
 8013fbe:	9210      	str	r2, [sp, #64]	; 0x40
 8013fc0:	7899      	ldrb	r1, [r3, #2]
 8013fc2:	9111      	str	r1, [sp, #68]	; 0x44
 8013fc4:	78da      	ldrb	r2, [r3, #3]
 8013fc6:	7919      	ldrb	r1, [r3, #4]
 8013fc8:	7958      	ldrb	r0, [r3, #5]
 8013fca:	799c      	ldrb	r4, [r3, #6]
 8013fcc:	79dd      	ldrb	r5, [r3, #7]
 8013fce:	7a1e      	ldrb	r6, [r3, #8]
 8013fd0:	7a5f      	ldrb	r7, [r3, #9]
 8013fd2:	f893 c00a 	ldrb.w	ip, [r3, #10]
 8013fd6:	f893 e00b 	ldrb.w	lr, [r3, #11]
 8013fda:	f893 800c 	ldrb.w	r8, [r3, #12]
 8013fde:	f893 900d 	ldrb.w	r9, [r3, #13]
 8013fe2:	f893 a00e 	ldrb.w	sl, [r3, #14]
 8013fe6:	f893 b00f 	ldrb.w	fp, [r3, #15]
 8013fea:	7c1b      	ldrb	r3, [r3, #16]
 8013fec:	930f      	str	r3, [sp, #60]	; 0x3c
 8013fee:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8013ff2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8013ff6:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8013ffa:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8013ffe:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8014002:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8014006:	9708      	str	r7, [sp, #32]
 8014008:	9607      	str	r6, [sp, #28]
 801400a:	9506      	str	r5, [sp, #24]
 801400c:	9405      	str	r4, [sp, #20]
 801400e:	9004      	str	r0, [sp, #16]
 8014010:	9103      	str	r1, [sp, #12]
 8014012:	9202      	str	r2, [sp, #8]
 8014014:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014016:	9101      	str	r1, [sp, #4]
 8014018:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801401a:	9200      	str	r2, [sp, #0]
 801401c:	4b1e      	ldr	r3, [pc, #120]	; (8014098 <PrintKey+0x12c>)
 801401e:	2200      	movs	r2, #0
 8014020:	4611      	mov	r1, r2
 8014022:	2002      	movs	r0, #2
 8014024:	f002 fbb8 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
}
 8014028:	b015      	add	sp, #84	; 0x54
 801402a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 801402e:	4b1b      	ldr	r3, [pc, #108]	; (801409c <PrintKey+0x130>)
 8014030:	2200      	movs	r2, #0
 8014032:	4611      	mov	r1, r2
 8014034:	2002      	movs	r0, #2
 8014036:	f002 fbaf 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
 801403a:	e7be      	b.n	8013fba <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 801403c:	4b18      	ldr	r3, [pc, #96]	; (80140a0 <PrintKey+0x134>)
 801403e:	2200      	movs	r2, #0
 8014040:	4611      	mov	r1, r2
 8014042:	2002      	movs	r0, #2
 8014044:	f002 fba8 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
 8014048:	e7b7      	b.n	8013fba <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 801404a:	4b16      	ldr	r3, [pc, #88]	; (80140a4 <PrintKey+0x138>)
 801404c:	2200      	movs	r2, #0
 801404e:	4611      	mov	r1, r2
 8014050:	2002      	movs	r0, #2
 8014052:	f002 fba1 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
 8014056:	e7b0      	b.n	8013fba <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 8014058:	4b13      	ldr	r3, [pc, #76]	; (80140a8 <PrintKey+0x13c>)
 801405a:	2200      	movs	r2, #0
 801405c:	4611      	mov	r1, r2
 801405e:	2002      	movs	r0, #2
 8014060:	f002 fb9a 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
 8014064:	e7a9      	b.n	8013fba <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 8014066:	4b11      	ldr	r3, [pc, #68]	; (80140ac <PrintKey+0x140>)
 8014068:	2200      	movs	r2, #0
 801406a:	4611      	mov	r1, r2
 801406c:	2002      	movs	r0, #2
 801406e:	f002 fb93 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
 8014072:	e7a2      	b.n	8013fba <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 8014074:	4b0e      	ldr	r3, [pc, #56]	; (80140b0 <PrintKey+0x144>)
 8014076:	2200      	movs	r2, #0
 8014078:	4611      	mov	r1, r2
 801407a:	2002      	movs	r0, #2
 801407c:	f002 fb8c 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
 8014080:	e79b      	b.n	8013fba <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 8014082:	4b0c      	ldr	r3, [pc, #48]	; (80140b4 <PrintKey+0x148>)
 8014084:	2200      	movs	r2, #0
 8014086:	4611      	mov	r1, r2
 8014088:	2002      	movs	r0, #2
 801408a:	f002 fb85 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
 801408e:	e794      	b.n	8013fba <PrintKey+0x4e>
 8014090:	080181e0 	.word	0x080181e0
 8014094:	08018120 	.word	0x08018120
 8014098:	080181f8 	.word	0x080181f8
 801409c:	08018138 	.word	0x08018138
 80140a0:	08018150 	.word	0x08018150
 80140a4:	08018168 	.word	0x08018168
 80140a8:	08018180 	.word	0x08018180
 80140ac:	08018198 	.word	0x08018198
 80140b0:	080181b0 	.word	0x080181b0
 80140b4:	080181c8 	.word	0x080181c8

080140b8 <SecureElementInit>:
{
 80140b8:	b570      	push	{r4, r5, r6, lr}
 80140ba:	b0b0      	sub	sp, #192	; 0xc0
 80140bc:	4606      	mov	r6, r0
    SecureElementNvmData_t seNvmInit =
 80140be:	22b0      	movs	r2, #176	; 0xb0
 80140c0:	2100      	movs	r1, #0
 80140c2:	a804      	add	r0, sp, #16
 80140c4:	f003 f93a 	bl	801733c <memset>
 80140c8:	4a37      	ldr	r2, [pc, #220]	; (80141a8 <SecureElementInit+0xf0>)
 80140ca:	466b      	mov	r3, sp
 80140cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80140d0:	e883 0003 	stmia.w	r3, {r0, r1}
 80140d4:	4a35      	ldr	r2, [pc, #212]	; (80141ac <SecureElementInit+0xf4>)
 80140d6:	ab02      	add	r3, sp, #8
 80140d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80140dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80140e0:	4c33      	ldr	r4, [pc, #204]	; (80141b0 <SecureElementInit+0xf8>)
 80140e2:	4625      	mov	r5, r4
 80140e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80140e6:	f8cd 0011 	str.w	r0, [sp, #17]
 80140ea:	f8cd 1015 	str.w	r1, [sp, #21]
 80140ee:	f8cd 2019 	str.w	r2, [sp, #25]
 80140f2:	f8cd 301d 	str.w	r3, [sp, #29]
 80140f6:	2301      	movs	r3, #1
 80140f8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80140fc:	4625      	mov	r5, r4
 80140fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014100:	f8cd 0022 	str.w	r0, [sp, #34]	; 0x22
 8014104:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 8014108:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 801410c:	f8cd 302e 	str.w	r3, [sp, #46]	; 0x2e
 8014110:	2302      	movs	r3, #2
 8014112:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 8014116:	4625      	mov	r5, r4
 8014118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801411a:	f8cd 0033 	str.w	r0, [sp, #51]	; 0x33
 801411e:	f8cd 1037 	str.w	r1, [sp, #55]	; 0x37
 8014122:	f8cd 203b 	str.w	r2, [sp, #59]	; 0x3b
 8014126:	f8cd 303f 	str.w	r3, [sp, #63]	; 0x3f
 801412a:	2303      	movs	r3, #3
 801412c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
 8014130:	ad11      	add	r5, sp, #68	; 0x44
 8014132:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014136:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801413a:	2304      	movs	r3, #4
 801413c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8014140:	237f      	movs	r3, #127	; 0x7f
 8014142:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
 8014146:	2380      	movs	r3, #128	; 0x80
 8014148:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
 801414c:	2381      	movs	r3, #129	; 0x81
 801414e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 8014152:	2382      	movs	r3, #130	; 0x82
 8014154:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
 8014158:	2383      	movs	r3, #131	; 0x83
 801415a:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
    if( nvm == NULL )
 801415e:	b30e      	cbz	r6, 80141a4 <SecureElementInit+0xec>
    SeNvm = nvm;
 8014160:	4b14      	ldr	r3, [pc, #80]	; (80141b4 <SecureElementInit+0xfc>)
 8014162:	601e      	str	r6, [r3, #0]
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 8014164:	22c0      	movs	r2, #192	; 0xc0
 8014166:	4669      	mov	r1, sp
 8014168:	4630      	mov	r0, r6
 801416a:	f000 f98c 	bl	8014486 <memcpy1>
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 801416e:	4b12      	ldr	r3, [pc, #72]	; (80141b8 <SecureElementInit+0x100>)
 8014170:	2200      	movs	r2, #0
 8014172:	4611      	mov	r1, r2
 8014174:	2002      	movs	r0, #2
 8014176:	f002 fb0f 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 801417a:	2000      	movs	r0, #0
 801417c:	f7ff fef6 	bl	8013f6c <PrintKey>
    PrintKey(NWK_KEY);
 8014180:	2001      	movs	r0, #1
 8014182:	f7ff fef3 	bl	8013f6c <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 8014186:	4b0d      	ldr	r3, [pc, #52]	; (80141bc <SecureElementInit+0x104>)
 8014188:	2200      	movs	r2, #0
 801418a:	4611      	mov	r1, r2
 801418c:	2002      	movs	r0, #2
 801418e:	f002 fb03 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 8014192:	2003      	movs	r0, #3
 8014194:	f7ff feea 	bl	8013f6c <PrintKey>
    PrintKey(NWK_S_KEY);
 8014198:	2002      	movs	r0, #2
 801419a:	f7ff fee7 	bl	8013f6c <PrintKey>
    return SECURE_ELEMENT_SUCCESS;
 801419e:	2000      	movs	r0, #0
}
 80141a0:	b030      	add	sp, #192	; 0xc0
 80141a2:	bd70      	pop	{r4, r5, r6, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80141a4:	2002      	movs	r0, #2
 80141a6:	e7fb      	b.n	80141a0 <SecureElementInit+0xe8>
 80141a8:	0801827c 	.word	0x0801827c
 80141ac:	08018288 	.word	0x08018288
 80141b0:	08018294 	.word	0x08018294
 80141b4:	20001474 	.word	0x20001474
 80141b8:	0801824c 	.word	0x0801824c
 80141bc:	08018264 	.word	0x08018264

080141c0 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 80141c0:	2b7e      	cmp	r3, #126	; 0x7e
 80141c2:	d807      	bhi.n	80141d4 <SecureElementComputeAesCmac+0x14>
{
 80141c4:	b510      	push	{r4, lr}
 80141c6:	b082      	sub	sp, #8
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 80141c8:	9c04      	ldr	r4, [sp, #16]
 80141ca:	9400      	str	r4, [sp, #0]
 80141cc:	f7ff fe70 	bl	8013eb0 <ComputeCmac>
}
 80141d0:	b002      	add	sp, #8
 80141d2:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80141d4:	2003      	movs	r0, #3
}
 80141d6:	4770      	bx	lr

080141d8 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 80141d8:	b190      	cbz	r0, 8014200 <SecureElementVerifyAesCmac+0x28>
{
 80141da:	b530      	push	{r4, r5, lr}
 80141dc:	b085      	sub	sp, #20
 80141de:	460c      	mov	r4, r1
 80141e0:	4615      	mov	r5, r2
 80141e2:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 80141e4:	2000      	movs	r0, #0
 80141e6:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 80141e8:	aa03      	add	r2, sp, #12
 80141ea:	9200      	str	r2, [sp, #0]
 80141ec:	4622      	mov	r2, r4
 80141ee:	f7ff fe5f 	bl	8013eb0 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 80141f2:	b918      	cbnz	r0, 80141fc <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 80141f4:	9b03      	ldr	r3, [sp, #12]
 80141f6:	42ab      	cmp	r3, r5
 80141f8:	d000      	beq.n	80141fc <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 80141fa:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 80141fc:	b005      	add	sp, #20
 80141fe:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8014200:	2002      	movs	r0, #2
}
 8014202:	4770      	bx	lr

08014204 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 8014204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014208:	b0be      	sub	sp, #248	; 0xf8
    if( buffer == NULL || encBuffer == NULL )
 801420a:	b350      	cbz	r0, 8014262 <SecureElementAesEncrypt+0x5e>
 801420c:	460c      	mov	r4, r1
 801420e:	4615      	mov	r5, r2
 8014210:	461e      	mov	r6, r3
 8014212:	4607      	mov	r7, r0
 8014214:	b343      	cbz	r3, 8014268 <SecureElementAesEncrypt+0x64>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 8014216:	f011 0f0f 	tst.w	r1, #15
 801421a:	d128      	bne.n	801426e <SecureElementAesEncrypt+0x6a>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 801421c:	22f0      	movs	r2, #240	; 0xf0
 801421e:	2100      	movs	r1, #0
 8014220:	a801      	add	r0, sp, #4
 8014222:	f000 f946 	bl	80144b2 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8014226:	4669      	mov	r1, sp
 8014228:	4628      	mov	r0, r5
 801422a:	f7ff fe23 	bl	8013e74 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 801422e:	4680      	mov	r8, r0
 8014230:	b118      	cbz	r0, 801423a <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 8014232:	4640      	mov	r0, r8
 8014234:	b03e      	add	sp, #248	; 0xf8
 8014236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 801423a:	aa01      	add	r2, sp, #4
 801423c:	2110      	movs	r1, #16
 801423e:	9800      	ldr	r0, [sp, #0]
 8014240:	3001      	adds	r0, #1
 8014242:	f7ff fd63 	bl	8013d0c <lorawan_aes_set_key>
        uint8_t block = 0;
 8014246:	4645      	mov	r5, r8
        while( size != 0 )
 8014248:	e008      	b.n	801425c <SecureElementAesEncrypt+0x58>
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 801424a:	aa01      	add	r2, sp, #4
 801424c:	1971      	adds	r1, r6, r5
 801424e:	1978      	adds	r0, r7, r5
 8014250:	f7ff fde6 	bl	8013e20 <lorawan_aes_encrypt>
            block = block + 16;
 8014254:	3510      	adds	r5, #16
 8014256:	b2ed      	uxtb	r5, r5
            size  = size - 16;
 8014258:	3c10      	subs	r4, #16
 801425a:	b2a4      	uxth	r4, r4
        while( size != 0 )
 801425c:	2c00      	cmp	r4, #0
 801425e:	d1f4      	bne.n	801424a <SecureElementAesEncrypt+0x46>
 8014260:	e7e7      	b.n	8014232 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 8014262:	f04f 0802 	mov.w	r8, #2
 8014266:	e7e4      	b.n	8014232 <SecureElementAesEncrypt+0x2e>
 8014268:	f04f 0802 	mov.w	r8, #2
 801426c:	e7e1      	b.n	8014232 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 801426e:	f04f 0805 	mov.w	r8, #5
 8014272:	e7de      	b.n	8014232 <SecureElementAesEncrypt+0x2e>

08014274 <SecureElementSetKey>:
{
 8014274:	b530      	push	{r4, r5, lr}
 8014276:	b085      	sub	sp, #20
    if( key == NULL )
 8014278:	2900      	cmp	r1, #0
 801427a:	d038      	beq.n	80142ee <SecureElementSetKey+0x7a>
 801427c:	460d      	mov	r5, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801427e:	2300      	movs	r3, #0
 8014280:	2b09      	cmp	r3, #9
 8014282:	d830      	bhi.n	80142e6 <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 8014284:	4a1b      	ldr	r2, [pc, #108]	; (80142f4 <SecureElementSetKey+0x80>)
 8014286:	6811      	ldr	r1, [r2, #0]
 8014288:	461c      	mov	r4, r3
 801428a:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 801428e:	440a      	add	r2, r1
 8014290:	7c12      	ldrb	r2, [r2, #16]
 8014292:	4282      	cmp	r2, r0
 8014294:	d002      	beq.n	801429c <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8014296:	3301      	adds	r3, #1
 8014298:	b2db      	uxtb	r3, r3
 801429a:	e7f1      	b.n	8014280 <SecureElementSetKey+0xc>
            if ( keyID == MC_KEY_0 )
 801429c:	2880      	cmp	r0, #128	; 0x80
 801429e:	d00a      	beq.n	80142b6 <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 80142a0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80142a4:	3310      	adds	r3, #16
 80142a6:	440b      	add	r3, r1
 80142a8:	2210      	movs	r2, #16
 80142aa:	4629      	mov	r1, r5
 80142ac:	1c58      	adds	r0, r3, #1
 80142ae:	f000 f8ea 	bl	8014486 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 80142b2:	2500      	movs	r5, #0
 80142b4:	e018      	b.n	80142e8 <SecureElementSetKey+0x74>
                uint8_t               decryptedKey[16] = { 0 };
 80142b6:	2300      	movs	r3, #0
 80142b8:	9300      	str	r3, [sp, #0]
 80142ba:	9301      	str	r3, [sp, #4]
 80142bc:	9302      	str	r3, [sp, #8]
 80142be:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 80142c0:	466b      	mov	r3, sp
 80142c2:	227f      	movs	r2, #127	; 0x7f
 80142c4:	2110      	movs	r1, #16
 80142c6:	4628      	mov	r0, r5
 80142c8:	f7ff ff9c 	bl	8014204 <SecureElementAesEncrypt>
 80142cc:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 80142ce:	4b09      	ldr	r3, [pc, #36]	; (80142f4 <SecureElementSetKey+0x80>)
 80142d0:	6818      	ldr	r0, [r3, #0]
 80142d2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80142d6:	3410      	adds	r4, #16
 80142d8:	4420      	add	r0, r4
 80142da:	2210      	movs	r2, #16
 80142dc:	4669      	mov	r1, sp
 80142de:	3001      	adds	r0, #1
 80142e0:	f000 f8d1 	bl	8014486 <memcpy1>
                return retval;
 80142e4:	e000      	b.n	80142e8 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80142e6:	2503      	movs	r5, #3
}
 80142e8:	4628      	mov	r0, r5
 80142ea:	b005      	add	sp, #20
 80142ec:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80142ee:	2502      	movs	r5, #2
 80142f0:	e7fa      	b.n	80142e8 <SecureElementSetKey+0x74>
 80142f2:	bf00      	nop
 80142f4:	20001474 	.word	0x20001474

080142f8 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 80142f8:	b1d0      	cbz	r0, 8014330 <SecureElementDeriveAndStoreKey+0x38>
{
 80142fa:	b530      	push	{r4, r5, lr}
 80142fc:	b085      	sub	sp, #20
 80142fe:	4614      	mov	r4, r2
 8014300:	4605      	mov	r5, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 8014302:	2a7f      	cmp	r2, #127	; 0x7f
 8014304:	d101      	bne.n	801430a <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 8014306:	2904      	cmp	r1, #4
 8014308:	d114      	bne.n	8014334 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 801430a:	2300      	movs	r3, #0
 801430c:	9300      	str	r3, [sp, #0]
 801430e:	9301      	str	r3, [sp, #4]
 8014310:	9302      	str	r3, [sp, #8]
 8014312:	9303      	str	r3, [sp, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8014314:	466b      	mov	r3, sp
 8014316:	460a      	mov	r2, r1
 8014318:	2110      	movs	r1, #16
 801431a:	4628      	mov	r0, r5
 801431c:	f7ff ff72 	bl	8014204 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8014320:	b108      	cbz	r0, 8014326 <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8014322:	b005      	add	sp, #20
 8014324:	bd30      	pop	{r4, r5, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 8014326:	4669      	mov	r1, sp
 8014328:	4620      	mov	r0, r4
 801432a:	f7ff ffa3 	bl	8014274 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 801432e:	e7f8      	b.n	8014322 <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 8014330:	2002      	movs	r0, #2
}
 8014332:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8014334:	2003      	movs	r0, #3
 8014336:	e7f4      	b.n	8014322 <SecureElementDeriveAndStoreKey+0x2a>

08014338 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 8014338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801433c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8014340:	9d07      	ldr	r5, [sp, #28]
 8014342:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8014344:	b37b      	cbz	r3, 80143a6 <SecureElementProcessJoinAccept+0x6e>
 8014346:	4698      	mov	r8, r3
 8014348:	b37d      	cbz	r5, 80143aa <SecureElementProcessJoinAccept+0x72>
 801434a:	b386      	cbz	r6, 80143ae <SecureElementProcessJoinAccept+0x76>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 801434c:	2c21      	cmp	r4, #33	; 0x21
 801434e:	d830      	bhi.n	80143b2 <SecureElementProcessJoinAccept+0x7a>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8014350:	b2a7      	uxth	r7, r4
 8014352:	463a      	mov	r2, r7
 8014354:	4619      	mov	r1, r3
 8014356:	4628      	mov	r0, r5
 8014358:	f000 f895 	bl	8014486 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 801435c:	1e79      	subs	r1, r7, #1
 801435e:	1c6b      	adds	r3, r5, #1
 8014360:	2201      	movs	r2, #1
 8014362:	b289      	uxth	r1, r1
 8014364:	eb08 0002 	add.w	r0, r8, r2
 8014368:	f7ff ff4c 	bl	8014204 <SecureElementAesEncrypt>
 801436c:	bb20      	cbnz	r0, 80143b8 <SecureElementProcessJoinAccept+0x80>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 801436e:	7aeb      	ldrb	r3, [r5, #11]
 8014370:	09db      	lsrs	r3, r3, #7
 8014372:	7033      	strb	r3, [r6, #0]

    uint32_t mic = 0;

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 8014374:	442c      	add	r4, r5
 8014376:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 801437a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801437e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8014382:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8014386:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 801438a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801438e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 8014392:	b99b      	cbnz	r3, 80143bc <SecureElementProcessJoinAccept+0x84>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8014394:	1f39      	subs	r1, r7, #4
 8014396:	2301      	movs	r3, #1
 8014398:	b289      	uxth	r1, r1
 801439a:	4628      	mov	r0, r5
 801439c:	f7ff ff1c 	bl	80141d8 <SecureElementVerifyAesCmac>
 80143a0:	b140      	cbz	r0, 80143b4 <SecureElementProcessJoinAccept+0x7c>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 80143a2:	2001      	movs	r0, #1
 80143a4:	e006      	b.n	80143b4 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_NPE;
 80143a6:	2002      	movs	r0, #2
 80143a8:	e004      	b.n	80143b4 <SecureElementProcessJoinAccept+0x7c>
 80143aa:	2002      	movs	r0, #2
 80143ac:	e002      	b.n	80143b4 <SecureElementProcessJoinAccept+0x7c>
 80143ae:	2002      	movs	r0, #2
 80143b0:	e000      	b.n	80143b4 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80143b2:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 80143b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 80143b8:	2007      	movs	r0, #7
 80143ba:	e7fb      	b.n	80143b4 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 80143bc:	2004      	movs	r0, #4
 80143be:	e7f9      	b.n	80143b4 <SecureElementProcessJoinAccept+0x7c>

080143c0 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
    if( randomNum == NULL )
 80143c0:	b138      	cbz	r0, 80143d2 <SecureElementRandomNumber+0x12>
{
 80143c2:	b510      	push	{r4, lr}
 80143c4:	4604      	mov	r4, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random();
 80143c6:	4b04      	ldr	r3, [pc, #16]	; (80143d8 <SecureElementRandomNumber+0x18>)
 80143c8:	695b      	ldr	r3, [r3, #20]
 80143ca:	4798      	blx	r3
 80143cc:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 80143ce:	2000      	movs	r0, #0
}
 80143d0:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80143d2:	2002      	movs	r0, #2
}
 80143d4:	4770      	bx	lr
 80143d6:	bf00      	nop
 80143d8:	08018318 	.word	0x08018318

080143dc <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
 80143dc:	b140      	cbz	r0, 80143f0 <SecureElementSetDevEui+0x14>
{
 80143de:	b508      	push	{r3, lr}
 80143e0:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 80143e2:	2208      	movs	r2, #8
 80143e4:	4b03      	ldr	r3, [pc, #12]	; (80143f4 <SecureElementSetDevEui+0x18>)
 80143e6:	6818      	ldr	r0, [r3, #0]
 80143e8:	f000 f84d 	bl	8014486 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80143ec:	2000      	movs	r0, #0
}
 80143ee:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80143f0:	2002      	movs	r0, #2
}
 80143f2:	4770      	bx	lr
 80143f4:	20001474 	.word	0x20001474

080143f8 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 80143f8:	4b01      	ldr	r3, [pc, #4]	; (8014400 <SecureElementGetDevEui+0x8>)
 80143fa:	6818      	ldr	r0, [r3, #0]
 80143fc:	4770      	bx	lr
 80143fe:	bf00      	nop
 8014400:	20001474 	.word	0x20001474

08014404 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
 8014404:	b148      	cbz	r0, 801441a <SecureElementSetJoinEui+0x16>
{
 8014406:	b508      	push	{r3, lr}
 8014408:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 801440a:	4b05      	ldr	r3, [pc, #20]	; (8014420 <SecureElementSetJoinEui+0x1c>)
 801440c:	6818      	ldr	r0, [r3, #0]
 801440e:	2208      	movs	r2, #8
 8014410:	4410      	add	r0, r2
 8014412:	f000 f838 	bl	8014486 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8014416:	2000      	movs	r0, #0
}
 8014418:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 801441a:	2002      	movs	r0, #2
}
 801441c:	4770      	bx	lr
 801441e:	bf00      	nop
 8014420:	20001474 	.word	0x20001474

08014424 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 8014424:	4b01      	ldr	r3, [pc, #4]	; (801442c <SecureElementGetJoinEui+0x8>)
 8014426:	6818      	ldr	r0, [r3, #0]
}
 8014428:	3008      	adds	r0, #8
 801442a:	4770      	bx	lr
 801442c:	20001474 	.word	0x20001474

08014430 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8014430:	4b09      	ldr	r3, [pc, #36]	; (8014458 <rand1+0x28>)
 8014432:	6818      	ldr	r0, [r3, #0]
 8014434:	4909      	ldr	r1, [pc, #36]	; (801445c <rand1+0x2c>)
 8014436:	f243 0239 	movw	r2, #12345	; 0x3039
 801443a:	fb01 2000 	mla	r0, r1, r0, r2
 801443e:	6018      	str	r0, [r3, #0]
 8014440:	2303      	movs	r3, #3
 8014442:	fba3 2300 	umull	r2, r3, r3, r0
 8014446:	1ac2      	subs	r2, r0, r3
 8014448:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 801444c:	0f9b      	lsrs	r3, r3, #30
 801444e:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 8014452:	1ac0      	subs	r0, r0, r3
 8014454:	4770      	bx	lr
 8014456:	bf00      	nop
 8014458:	200000d4 	.word	0x200000d4
 801445c:	41c64e6d 	.word	0x41c64e6d

08014460 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 8014460:	4b01      	ldr	r3, [pc, #4]	; (8014468 <srand1+0x8>)
 8014462:	6018      	str	r0, [r3, #0]
}
 8014464:	4770      	bx	lr
 8014466:	bf00      	nop
 8014468:	200000d4 	.word	0x200000d4

0801446c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801446c:	b538      	push	{r3, r4, r5, lr}
 801446e:	4605      	mov	r5, r0
 8014470:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8014472:	f7ff ffdd 	bl	8014430 <rand1>
 8014476:	1b61      	subs	r1, r4, r5
 8014478:	3101      	adds	r1, #1
 801447a:	fb90 f3f1 	sdiv	r3, r0, r1
 801447e:	fb01 0013 	mls	r0, r1, r3, r0
}
 8014482:	4428      	add	r0, r5
 8014484:	bd38      	pop	{r3, r4, r5, pc}

08014486 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8014486:	1e53      	subs	r3, r2, #1
 8014488:	b29b      	uxth	r3, r3
 801448a:	b12a      	cbz	r2, 8014498 <memcpy1+0x12>
    {
        *dst++ = *src++;
 801448c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014490:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 8014494:	461a      	mov	r2, r3
 8014496:	e7f6      	b.n	8014486 <memcpy1>
    }
}
 8014498:	4770      	bx	lr

0801449a <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 801449a:	1e53      	subs	r3, r2, #1
 801449c:	4418      	add	r0, r3
    while( size-- )
 801449e:	1e53      	subs	r3, r2, #1
 80144a0:	b29b      	uxth	r3, r3
 80144a2:	b12a      	cbz	r2, 80144b0 <memcpyr+0x16>
    {
        *dst-- = *src++;
 80144a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80144a8:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 80144ac:	461a      	mov	r2, r3
 80144ae:	e7f6      	b.n	801449e <memcpyr+0x4>
    }
}
 80144b0:	4770      	bx	lr

080144b2 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 80144b2:	1e53      	subs	r3, r2, #1
 80144b4:	b29b      	uxth	r3, r3
 80144b6:	b11a      	cbz	r2, 80144c0 <memset1+0xe>
    {
        *dst++ = value;
 80144b8:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 80144bc:	461a      	mov	r2, r3
 80144be:	e7f8      	b.n	80144b2 <memset1>
    }
}
 80144c0:	4770      	bx	lr
	...

080144c4 <Crc32>:
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 80144c4:	b1d0      	cbz	r0, 80144fc <Crc32+0x38>
{
 80144c6:	b470      	push	{r4, r5, r6}
 80144c8:	4606      	mov	r6, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 80144ca:	2500      	movs	r5, #0
    uint32_t crc = 0xFFFFFFFF;
 80144cc:	f04f 30ff 	mov.w	r0, #4294967295
 80144d0:	e00b      	b.n	80144ea <Crc32+0x26>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80144d2:	f340 0400 	sbfx	r4, r0, #0, #1
 80144d6:	4a0a      	ldr	r2, [pc, #40]	; (8014500 <Crc32+0x3c>)
 80144d8:	4022      	ands	r2, r4
 80144da:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 80144de:	3301      	adds	r3, #1
 80144e0:	b29b      	uxth	r3, r3
 80144e2:	2b07      	cmp	r3, #7
 80144e4:	d9f5      	bls.n	80144d2 <Crc32+0xe>
    for( uint16_t i = 0; i < length; ++i )
 80144e6:	3501      	adds	r5, #1
 80144e8:	b2ad      	uxth	r5, r5
 80144ea:	428d      	cmp	r5, r1
 80144ec:	d203      	bcs.n	80144f6 <Crc32+0x32>
        crc ^= ( uint32_t )buffer[i];
 80144ee:	5d73      	ldrb	r3, [r6, r5]
 80144f0:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 80144f2:	2300      	movs	r3, #0
 80144f4:	e7f5      	b.n	80144e2 <Crc32+0x1e>
        }
    }

    return ~crc;
 80144f6:	43c0      	mvns	r0, r0
}
 80144f8:	bc70      	pop	{r4, r5, r6}
 80144fa:	4770      	bx	lr
        return 0;
 80144fc:	2000      	movs	r0, #0
}
 80144fe:	4770      	bx	lr
 8014500:	edb88320 	.word	0xedb88320

08014504 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8014504:	2001      	movs	r0, #1
 8014506:	4770      	bx	lr

08014508 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8014508:	280a      	cmp	r0, #10
 801450a:	d807      	bhi.n	801451c <RadioGetLoRaBandwidthInHz+0x14>
 801450c:	e8df f000 	tbb	[pc, r0]
 8014510:	17110b20 	.word	0x17110b20
 8014514:	061e1c1a 	.word	0x061e1c1a
 8014518:	0e08      	.short	0x0e08
 801451a:	14          	.byte	0x14
 801451b:	00          	.byte	0x00
        break;
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
        break;
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801451c:	2000      	movs	r0, #0
 801451e:	4770      	bx	lr
        bandwidthInHz = 10417UL;
 8014520:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 8014524:	4770      	bx	lr
        bandwidthInHz = 15625UL;
 8014526:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 801452a:	4770      	bx	lr
        bandwidthInHz = 20833UL;
 801452c:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 8014530:	4770      	bx	lr
        bandwidthInHz = 31250UL;
 8014532:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 8014536:	4770      	bx	lr
        bandwidthInHz = 41667UL;
 8014538:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 801453c:	4770      	bx	lr
        bandwidthInHz = 62500UL;
 801453e:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 8014542:	4770      	bx	lr
        bandwidthInHz = 125000UL;
 8014544:	4804      	ldr	r0, [pc, #16]	; (8014558 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 8014546:	4770      	bx	lr
        bandwidthInHz = 250000UL;
 8014548:	4804      	ldr	r0, [pc, #16]	; (801455c <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 801454a:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801454c:	4804      	ldr	r0, [pc, #16]	; (8014560 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 801454e:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 8014550:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 8014554:	4770      	bx	lr
 8014556:	bf00      	nop
 8014558:	0001e848 	.word	0x0001e848
 801455c:	0003d090 	.word	0x0003d090
 8014560:	0007a120 	.word	0x0007a120

08014564 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8014564:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8014568:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801456a:	b953      	cbnz	r3, 8014582 <RadioGetGfskTimeOnAirNumerator+0x1e>
 801456c:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 801456e:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8014570:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8014572:	b141      	cbz	r1, 8014586 <RadioGetGfskTimeOnAirNumerator+0x22>
 8014574:	2302      	movs	r3, #2
 8014576:	f89d 0000 	ldrb.w	r0, [sp]
 801457a:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 801457c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8014580:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8014582:	2000      	movs	r0, #0
 8014584:	e7f3      	b.n	801456e <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8014586:	2300      	movs	r3, #0
 8014588:	e7f5      	b.n	8014576 <RadioGetGfskTimeOnAirNumerator+0x12>

0801458a <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801458a:	b4f0      	push	{r4, r5, r6, r7}
 801458c:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8014590:	f89d 4018 	ldrb.w	r4, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8014594:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8014596:	1f4d      	subs	r5, r1, #5
 8014598:	2d01      	cmp	r5, #1
 801459a:	d92d      	bls.n	80145f8 <RadioGetLoRaTimeOnAirNumerator+0x6e>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801459c:	b918      	cbnz	r0, 80145a6 <RadioGetLoRaTimeOnAirNumerator+0x1c>
 801459e:	f1a1 050b 	sub.w	r5, r1, #11
 80145a2:	2d01      	cmp	r5, #1
 80145a4:	d930      	bls.n	8014608 <RadioGetLoRaTimeOnAirNumerator+0x7e>
 80145a6:	2801      	cmp	r0, #1
 80145a8:	d02a      	beq.n	8014600 <RadioGetLoRaTimeOnAirNumerator+0x76>
    bool    lowDatareOptimize = false;
 80145aa:	2700      	movs	r7, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80145ac:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80145b0:	00ed      	lsls	r5, r5, #3
                            ( crcOn ? 16 : 0 ) -
 80145b2:	b36c      	cbz	r4, 8014610 <RadioGetLoRaTimeOnAirNumerator+0x86>
 80145b4:	2410      	movs	r4, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80145b6:	4425      	add	r5, r4
                            ( 4 * datarate ) +
 80145b8:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 80145ba:	eba5 0581 	sub.w	r5, r5, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 80145be:	b34e      	cbz	r6, 8014614 <RadioGetLoRaTimeOnAirNumerator+0x8a>
 80145c0:	2400      	movs	r4, #0
                            ( 4 * datarate ) +
 80145c2:	442c      	add	r4, r5

    if( datarate <= 6 )
 80145c4:	2906      	cmp	r1, #6
 80145c6:	d903      	bls.n	80145d0 <RadioGetLoRaTimeOnAirNumerator+0x46>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 80145c8:	3408      	adds	r4, #8

        if( lowDatareOptimize == true )
 80145ca:	b10f      	cbz	r7, 80145d0 <RadioGetLoRaTimeOnAirNumerator+0x46>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80145cc:	1e88      	subs	r0, r1, #2
 80145ce:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 80145d0:	2c00      	cmp	r4, #0
 80145d2:	db21      	blt.n	8014618 <RadioGetLoRaTimeOnAirNumerator+0x8e>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80145d4:	4404      	add	r4, r0
 80145d6:	3c01      	subs	r4, #1
 80145d8:	fb94 f4f0 	sdiv	r4, r4, r0
 80145dc:	fb02 3304 	mla	r3, r2, r4, r3
    int32_t intermediate =
 80145e0:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 80145e4:	2906      	cmp	r1, #6
 80145e6:	d801      	bhi.n	80145ec <RadioGetLoRaTimeOnAirNumerator+0x62>
    {
        intermediate += 2;
 80145e8:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80145ec:	0080      	lsls	r0, r0, #2
 80145ee:	3001      	adds	r0, #1
 80145f0:	3902      	subs	r1, #2
}
 80145f2:	4088      	lsls	r0, r1
 80145f4:	bcf0      	pop	{r4, r5, r6, r7}
 80145f6:	4770      	bx	lr
        if( preambleLen < 12 )
 80145f8:	2b0b      	cmp	r3, #11
 80145fa:	d8cf      	bhi.n	801459c <RadioGetLoRaTimeOnAirNumerator+0x12>
            preambleLen = 12;
 80145fc:	230c      	movs	r3, #12
 80145fe:	e7cd      	b.n	801459c <RadioGetLoRaTimeOnAirNumerator+0x12>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8014600:	290c      	cmp	r1, #12
 8014602:	d003      	beq.n	801460c <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 8014604:	2700      	movs	r7, #0
 8014606:	e7d1      	b.n	80145ac <RadioGetLoRaTimeOnAirNumerator+0x22>
        lowDatareOptimize = true;
 8014608:	2701      	movs	r7, #1
 801460a:	e7cf      	b.n	80145ac <RadioGetLoRaTimeOnAirNumerator+0x22>
 801460c:	2701      	movs	r7, #1
 801460e:	e7cd      	b.n	80145ac <RadioGetLoRaTimeOnAirNumerator+0x22>
                            ( crcOn ? 16 : 0 ) -
 8014610:	2400      	movs	r4, #0
 8014612:	e7d0      	b.n	80145b6 <RadioGetLoRaTimeOnAirNumerator+0x2c>
                            ( fixLen ? 0 : 20 );
 8014614:	2414      	movs	r4, #20
 8014616:	e7d4      	b.n	80145c2 <RadioGetLoRaTimeOnAirNumerator+0x38>
        ceilNumerator = 0;
 8014618:	2400      	movs	r4, #0
 801461a:	e7db      	b.n	80145d4 <RadioGetLoRaTimeOnAirNumerator+0x4a>

0801461c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801461c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801461e:	b085      	sub	sp, #20
 8014620:	460e      	mov	r6, r1
 8014622:	4615      	mov	r5, r2
 8014624:	4619      	mov	r1, r3
 8014626:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801462a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801462e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8014632:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 8014636:	b148      	cbz	r0, 801464c <RadioTimeOnAir+0x30>
 8014638:	2801      	cmp	r0, #1
 801463a:	d012      	beq.n	8014662 <RadioTimeOnAir+0x46>
 801463c:	2501      	movs	r5, #1
 801463e:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8014640:	1960      	adds	r0, r4, r5
 8014642:	3801      	subs	r0, #1
}
 8014644:	fbb0 f0f5 	udiv	r0, r0, r5
 8014648:	b005      	add	sp, #20
 801464a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801464c:	f8cd c004 	str.w	ip, [sp, #4]
 8014650:	9700      	str	r7, [sp, #0]
 8014652:	4628      	mov	r0, r5
 8014654:	f7ff ff86 	bl	8014564 <RadioGetGfskTimeOnAirNumerator>
 8014658:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 801465c:	fb04 f400 	mul.w	r4, r4, r0
        break;
 8014660:	e7ee      	b.n	8014640 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8014662:	f8cd c008 	str.w	ip, [sp, #8]
 8014666:	9701      	str	r7, [sp, #4]
 8014668:	9300      	str	r3, [sp, #0]
 801466a:	4613      	mov	r3, r2
 801466c:	460a      	mov	r2, r1
 801466e:	4629      	mov	r1, r5
 8014670:	4630      	mov	r0, r6
 8014672:	f7ff ff8a 	bl	801458a <RadioGetLoRaTimeOnAirNumerator>
 8014676:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 801467a:	fb04 f400 	mul.w	r4, r4, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801467e:	4b03      	ldr	r3, [pc, #12]	; (801468c <RadioTimeOnAir+0x70>)
 8014680:	5d98      	ldrb	r0, [r3, r6]
 8014682:	f7ff ff41 	bl	8014508 <RadioGetLoRaBandwidthInHz>
 8014686:	4605      	mov	r5, r0
        break;
 8014688:	e7da      	b.n	8014640 <RadioTimeOnAir+0x24>
 801468a:	bf00      	nop
 801468c:	08018314 	.word	0x08018314

08014690 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 8014690:	b508      	push	{r3, lr}
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8014692:	4b03      	ldr	r3, [pc, #12]	; (80146a0 <RadioOnTxTimeoutProcess+0x10>)
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	b113      	cbz	r3, 801469e <RadioOnTxTimeoutProcess+0xe>
 8014698:	685b      	ldr	r3, [r3, #4]
 801469a:	b103      	cbz	r3, 801469e <RadioOnTxTimeoutProcess+0xe>
    {
        RadioEvents->TxTimeout( );
 801469c:	4798      	blx	r3
    }
}
 801469e:	bd08      	pop	{r3, pc}
 80146a0:	20001578 	.word	0x20001578

080146a4 <RadioOnTxTimeoutIrq>:
{
 80146a4:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 80146a6:	f7ff fff3 	bl	8014690 <RadioOnTxTimeoutProcess>
}
 80146aa:	bd08      	pop	{r3, pc}

080146ac <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80146ac:	b508      	push	{r3, lr}
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80146ae:	4b03      	ldr	r3, [pc, #12]	; (80146bc <RadioOnRxTimeoutProcess+0x10>)
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	b113      	cbz	r3, 80146ba <RadioOnRxTimeoutProcess+0xe>
 80146b4:	68db      	ldr	r3, [r3, #12]
 80146b6:	b103      	cbz	r3, 80146ba <RadioOnRxTimeoutProcess+0xe>
    {
        RadioEvents->RxTimeout( );
 80146b8:	4798      	blx	r3
    }
}
 80146ba:	bd08      	pop	{r3, pc}
 80146bc:	20001578 	.word	0x20001578

080146c0 <RadioOnRxTimeoutIrq>:
{
 80146c0:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 80146c2:	f7ff fff3 	bl	80146ac <RadioOnRxTimeoutProcess>
}
 80146c6:	bd08      	pop	{r3, pc}

080146c8 <payload_integration>:
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
    SUBGRF_SetTxContinuousWave( );
}

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80146c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;

    for (i = 0; i < size; i++)
 80146ca:	2300      	movs	r3, #0
 80146cc:	4616      	mov	r6, r2
 80146ce:	429a      	cmp	r2, r3
 80146d0:	dd06      	ble.n	80146e0 <payload_integration+0x18>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80146d2:	5ccc      	ldrb	r4, [r1, r3]
 80146d4:	43e4      	mvns	r4, r4
 80146d6:	54cc      	strb	r4, [r1, r3]
        /* init outBuffer */
        outBuffer[i] = 0;
 80146d8:	2400      	movs	r4, #0
 80146da:	54c4      	strb	r4, [r0, r3]
    for (i = 0; i < size; i++)
 80146dc:	3301      	adds	r3, #1
 80146de:	e7f5      	b.n	80146cc <payload_integration+0x4>
    }

    for (i = 0; i < (size * 8); i++)
 80146e0:	2300      	movs	r3, #0
    uint8_t prevInt = 0;
 80146e2:	461f      	mov	r7, r3
 80146e4:	e013      	b.n	801470e <payload_integration+0x46>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
        index_byte = i / 8;
 80146e6:	f103 0c07 	add.w	ip, r3, #7
 80146ea:	e021      	b.n	8014730 <payload_integration+0x68>
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
        index_byte_out = ( i + 1 ) / 8;
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80146ec:	fa5f fc8c 	uxtb.w	ip, ip
 80146f0:	f811 c00c 	ldrb.w	ip, [r1, ip]
 80146f4:	fa4c f505 	asr.w	r5, ip, r5
 80146f8:	f005 0501 	and.w	r5, r5, #1
        /* integration */
        prevInt ^= currBit;
 80146fc:	406f      	eors	r7, r5
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80146fe:	f3ce 05c7 	ubfx	r5, lr, #3, #8
 8014702:	fa07 fc04 	lsl.w	ip, r7, r4
 8014706:	5d44      	ldrb	r4, [r0, r5]
 8014708:	ea44 040c 	orr.w	r4, r4, ip
 801470c:	5544      	strb	r4, [r0, r5]
    for (i = 0; i < (size * 8); i++)
 801470e:	ebb3 0fc6 	cmp.w	r3, r6, lsl #3
 8014712:	da23      	bge.n	801475c <payload_integration+0x94>
        index_bit = 7 - ( i % 8 );
 8014714:	425d      	negs	r5, r3
 8014716:	f003 0407 	and.w	r4, r3, #7
 801471a:	f005 0507 	and.w	r5, r5, #7
 801471e:	bf58      	it	pl
 8014720:	426c      	negpl	r4, r5
 8014722:	b2e5      	uxtb	r5, r4
 8014724:	f1c5 0507 	rsb	r5, r5, #7
 8014728:	b2ed      	uxtb	r5, r5
        index_byte = i / 8;
 801472a:	469c      	mov	ip, r3
 801472c:	2b00      	cmp	r3, #0
 801472e:	dbda      	blt.n	80146e6 <payload_integration+0x1e>
 8014730:	ea4f 0cec 	mov.w	ip, ip, asr #3
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8014734:	3301      	adds	r3, #1
 8014736:	f1d3 0e00 	rsbs	lr, r3, #0
 801473a:	f003 0407 	and.w	r4, r3, #7
 801473e:	f00e 0e07 	and.w	lr, lr, #7
 8014742:	bf58      	it	pl
 8014744:	f1ce 0400 	rsbpl	r4, lr, #0
 8014748:	b2e4      	uxtb	r4, r4
 801474a:	f1c4 0407 	rsb	r4, r4, #7
 801474e:	b2e4      	uxtb	r4, r4
        index_byte_out = ( i + 1 ) / 8;
 8014750:	469e      	mov	lr, r3
 8014752:	2b00      	cmp	r3, #0
 8014754:	daca      	bge.n	80146ec <payload_integration+0x24>
 8014756:	f103 0e07 	add.w	lr, r3, #7
 801475a:	e7c7      	b.n	80146ec <payload_integration+0x24>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801475c:	01bb      	lsls	r3, r7, #6
 801475e:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
 8014762:	b25b      	sxtb	r3, r3
 8014764:	b91f      	cbnz	r7, 801476e <payload_integration+0xa6>
 8014766:	2120      	movs	r1, #32
 8014768:	430b      	orrs	r3, r1
 801476a:	5483      	strb	r3, [r0, r2]
}
 801476c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801476e:	2100      	movs	r1, #0
 8014770:	e7fa      	b.n	8014768 <payload_integration+0xa0>
	...

08014774 <RadioSetMaxPayloadLength>:
{
 8014774:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 8014776:	2801      	cmp	r0, #1
 8014778:	d004      	beq.n	8014784 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801477a:	4b0a      	ldr	r3, [pc, #40]	; (80147a4 <RadioSetMaxPayloadLength+0x30>)
 801477c:	7d5b      	ldrb	r3, [r3, #21]
 801477e:	2b01      	cmp	r3, #1
 8014780:	d008      	beq.n	8014794 <RadioSetMaxPayloadLength+0x20>
}
 8014782:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8014784:	4b08      	ldr	r3, [pc, #32]	; (80147a8 <RadioSetMaxPayloadLength+0x34>)
 8014786:	7019      	strb	r1, [r3, #0]
 8014788:	4806      	ldr	r0, [pc, #24]	; (80147a4 <RadioSetMaxPayloadLength+0x30>)
 801478a:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801478c:	300e      	adds	r0, #14
 801478e:	f001 fd37 	bl	8016200 <SUBGRF_SetPacketParams>
 8014792:	e7f6      	b.n	8014782 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8014794:	4b04      	ldr	r3, [pc, #16]	; (80147a8 <RadioSetMaxPayloadLength+0x34>)
 8014796:	7019      	strb	r1, [r3, #0]
 8014798:	4802      	ldr	r0, [pc, #8]	; (80147a4 <RadioSetMaxPayloadLength+0x30>)
 801479a:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801479c:	300e      	adds	r0, #14
 801479e:	f001 fd2f 	bl	8016200 <SUBGRF_SetPacketParams>
}
 80147a2:	e7ee      	b.n	8014782 <RadioSetMaxPayloadLength+0xe>
 80147a4:	20002504 	.word	0x20002504
 80147a8:	200000d8 	.word	0x200000d8

080147ac <RadioRead>:
{
 80147ac:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister(addr);
 80147ae:	f001 fbdf 	bl	8015f70 <SUBGRF_ReadRegister>
}
 80147b2:	bd08      	pop	{r3, pc}

080147b4 <RadioWrite>:
{
 80147b4:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister(addr, data );
 80147b6:	f001 faeb 	bl	8015d90 <SUBGRF_WriteRegister>
}
 80147ba:	bd08      	pop	{r3, pc}

080147bc <RadioTxCw>:
{
 80147bc:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80147be:	f001 fe35 	bl	801642c <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80147c2:	2101      	movs	r1, #1
 80147c4:	f001 fe1e 	bl	8016404 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80147c8:	f001 f970 	bl	8015aac <SUBGRF_SetTxContinuousWave>
}
 80147cc:	bd08      	pop	{r3, pc}
	...

080147d0 <RadioTxPrbs>:
{
 80147d0:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80147d2:	2101      	movs	r1, #1
 80147d4:	4b07      	ldr	r3, [pc, #28]	; (80147f4 <RadioTxPrbs+0x24>)
 80147d6:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 80147da:	f001 fe13 	bl	8016404 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 80147de:	212d      	movs	r1, #45	; 0x2d
 80147e0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80147e4:	f7ff ffe6 	bl	80147b4 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 80147e8:	f001 f967 	bl	8015aba <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80147ec:	4802      	ldr	r0, [pc, #8]	; (80147f8 <RadioTxPrbs+0x28>)
 80147ee:	f001 f8f9 	bl	80159e4 <SUBGRF_SetTx>
}
 80147f2:	bd08      	pop	{r3, pc}
 80147f4:	20002504 	.word	0x20002504
 80147f8:	000fffff 	.word	0x000fffff

080147fc <RadioSetRxDutyCycle>:
{
 80147fc:	b538      	push	{r3, r4, r5, lr}
 80147fe:	4604      	mov	r4, r0
 8014800:	460d      	mov	r5, r1
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8014802:	2100      	movs	r1, #0
 8014804:	4b04      	ldr	r3, [pc, #16]	; (8014818 <RadioSetRxDutyCycle+0x1c>)
 8014806:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 801480a:	f001 fdfb 	bl	8016404 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801480e:	4629      	mov	r1, r5
 8014810:	4620      	mov	r0, r4
 8014812:	f001 f91b 	bl	8015a4c <SUBGRF_SetRxDutyCycle>
}
 8014816:	bd38      	pop	{r3, r4, r5, pc}
 8014818:	20002504 	.word	0x20002504

0801481c <RadioRxBoosted>:
{
 801481c:	b538      	push	{r3, r4, r5, lr}
 801481e:	4604      	mov	r4, r0
    if (1UL==RFW_Is_Init())
 8014820:	f001 feda 	bl	80165d8 <RFW_Is_Init>
 8014824:	2801      	cmp	r0, #1
 8014826:	d014      	beq.n	8014852 <RadioRxBoosted+0x36>
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8014828:	2300      	movs	r3, #0
 801482a:	461a      	mov	r2, r3
 801482c:	f240 2162 	movw	r1, #610	; 0x262
 8014830:	4608      	mov	r0, r1
 8014832:	f001 f9ec 	bl	8015c0e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8014836:	b97c      	cbnz	r4, 8014858 <RadioRxBoosted+0x3c>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8014838:	4c0f      	ldr	r4, [pc, #60]	; (8014878 <RadioRxBoosted+0x5c>)
 801483a:	2100      	movs	r1, #0
 801483c:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8014840:	f001 fde0 	bl	8016404 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8014844:	7863      	ldrb	r3, [r4, #1]
 8014846:	b183      	cbz	r3, 801486a <RadioRxBoosted+0x4e>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8014848:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801484c:	f001 fab0 	bl	8015db0 <SUBGRF_SetRxBoosted>
}
 8014850:	bd38      	pop	{r3, r4, r5, pc}
      RFW_ReceiveInit();
 8014852:	f001 fec9 	bl	80165e8 <RFW_ReceiveInit>
 8014856:	e7ee      	b.n	8014836 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8014858:	4d08      	ldr	r5, [pc, #32]	; (801487c <RadioRxBoosted+0x60>)
 801485a:	4621      	mov	r1, r4
 801485c:	4628      	mov	r0, r5
 801485e:	f002 fb7d 	bl	8016f5c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8014862:	4628      	mov	r0, r5
 8014864:	f002 fb34 	bl	8016ed0 <UTIL_TIMER_Start>
 8014868:	e7e6      	b.n	8014838 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801486a:	4b03      	ldr	r3, [pc, #12]	; (8014878 <RadioRxBoosted+0x5c>)
 801486c:	6898      	ldr	r0, [r3, #8]
 801486e:	0180      	lsls	r0, r0, #6
 8014870:	f001 fa9e 	bl	8015db0 <SUBGRF_SetRxBoosted>
}
 8014874:	e7ec      	b.n	8014850 <RadioRxBoosted+0x34>
 8014876:	bf00      	nop
 8014878:	20002504 	.word	0x20002504
 801487c:	20002574 	.word	0x20002574

08014880 <RadioStandby>:
{
 8014880:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 8014882:	2000      	movs	r0, #0
 8014884:	f001 f894 	bl	80159b0 <SUBGRF_SetStandby>
}
 8014888:	bd08      	pop	{r3, pc}

0801488a <RadioGetStatus>:
{
 801488a:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 801488c:	f001 f88a 	bl	80159a4 <SUBGRF_GetOperatingMode>
 8014890:	2805      	cmp	r0, #5
 8014892:	d007      	beq.n	80148a4 <RadioGetStatus+0x1a>
 8014894:	2807      	cmp	r0, #7
 8014896:	d007      	beq.n	80148a8 <RadioGetStatus+0x1e>
 8014898:	2804      	cmp	r0, #4
 801489a:	d001      	beq.n	80148a0 <RadioGetStatus+0x16>
            return RF_IDLE;
 801489c:	2000      	movs	r0, #0
}
 801489e:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 80148a0:	2002      	movs	r0, #2
 80148a2:	e7fc      	b.n	801489e <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 80148a4:	2001      	movs	r0, #1
 80148a6:	e7fa      	b.n	801489e <RadioGetStatus+0x14>
            return RF_CAD;
 80148a8:	2003      	movs	r0, #3
 80148aa:	e7f8      	b.n	801489e <RadioGetStatus+0x14>

080148ac <RadioIrqProcess>:
{
 80148ac:	b530      	push	{r4, r5, lr}
 80148ae:	b083      	sub	sp, #12
    uint8_t size = 0;
 80148b0:	2300      	movs	r3, #0
 80148b2:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 80148b6:	9300      	str	r3, [sp, #0]
    switch ( SubgRf.RadioIrq )
 80148b8:	4b9c      	ldr	r3, [pc, #624]	; (8014b2c <RadioIrqProcess+0x280>)
 80148ba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80148be:	2b20      	cmp	r3, #32
 80148c0:	d829      	bhi.n	8014916 <RadioIrqProcess+0x6a>
 80148c2:	b21a      	sxth	r2, r3
 80148c4:	2a00      	cmp	r2, #0
 80148c6:	f000 80eb 	beq.w	8014aa0 <RadioIrqProcess+0x1f4>
 80148ca:	3b01      	subs	r3, #1
 80148cc:	2b1f      	cmp	r3, #31
 80148ce:	f200 80e7 	bhi.w	8014aa0 <RadioIrqProcess+0x1f4>
 80148d2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80148d6:	005f      	.short	0x005f
 80148d8:	00e50075 	.word	0x00e50075
 80148dc:	00e500df 	.word	0x00e500df
 80148e0:	00e500e5 	.word	0x00e500e5
 80148e4:	00e500e7 	.word	0x00e500e7
 80148e8:	00e500e5 	.word	0x00e500e5
 80148ec:	00e500e5 	.word	0x00e500e5
 80148f0:	00e500e5 	.word	0x00e500e5
 80148f4:	00e500f4 	.word	0x00e500f4
 80148f8:	00e500e5 	.word	0x00e500e5
 80148fc:	00e500e5 	.word	0x00e500e5
 8014900:	00e500e5 	.word	0x00e500e5
 8014904:	00e500e5 	.word	0x00e500e5
 8014908:	00e500e5 	.word	0x00e500e5
 801490c:	00e500e5 	.word	0x00e500e5
 8014910:	00e500e5 	.word	0x00e500e5
 8014914:	00fb      	.short	0x00fb
 8014916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801491a:	f000 80a3 	beq.w	8014a64 <RadioIrqProcess+0x1b8>
 801491e:	d924      	bls.n	801496a <RadioIrqProcess+0xbe>
 8014920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014924:	f040 80bc 	bne.w	8014aa0 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8014928:	4b81      	ldr	r3, [pc, #516]	; (8014b30 <RadioIrqProcess+0x284>)
 801492a:	2201      	movs	r2, #1
 801492c:	2100      	movs	r1, #0
 801492e:	2002      	movs	r0, #2
 8014930:	f001 ff32 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8014934:	f001 f836 	bl	80159a4 <SUBGRF_GetOperatingMode>
 8014938:	2804      	cmp	r0, #4
 801493a:	f000 809e 	beq.w	8014a7a <RadioIrqProcess+0x1ce>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801493e:	f001 f831 	bl	80159a4 <SUBGRF_GetOperatingMode>
 8014942:	2805      	cmp	r0, #5
 8014944:	f040 80ac 	bne.w	8014aa0 <RadioIrqProcess+0x1f4>
            TimerStop( &RxTimeoutTimer );
 8014948:	487a      	ldr	r0, [pc, #488]	; (8014b34 <RadioIrqProcess+0x288>)
 801494a:	f002 fa5f 	bl	8016e0c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801494e:	2000      	movs	r0, #0
 8014950:	f001 f82e 	bl	80159b0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8014954:	4b78      	ldr	r3, [pc, #480]	; (8014b38 <RadioIrqProcess+0x28c>)
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	2b00      	cmp	r3, #0
 801495a:	f000 80a1 	beq.w	8014aa0 <RadioIrqProcess+0x1f4>
 801495e:	68db      	ldr	r3, [r3, #12]
 8014960:	2b00      	cmp	r3, #0
 8014962:	f000 809d 	beq.w	8014aa0 <RadioIrqProcess+0x1f4>
                RadioEvents->RxTimeout( );
 8014966:	4798      	blx	r3
 8014968:	e09a      	b.n	8014aa0 <RadioIrqProcess+0x1f4>
    switch ( SubgRf.RadioIrq )
 801496a:	2b40      	cmp	r3, #64	; 0x40
 801496c:	f000 80c7 	beq.w	8014afe <RadioIrqProcess+0x252>
 8014970:	2b80      	cmp	r3, #128	; 0x80
 8014972:	f040 8095 	bne.w	8014aa0 <RadioIrqProcess+0x1f4>
        SUBGRF_SetStandby( STDBY_RC );
 8014976:	2000      	movs	r0, #0
 8014978:	f001 f81a 	bl	80159b0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801497c:	4b6e      	ldr	r3, [pc, #440]	; (8014b38 <RadioIrqProcess+0x28c>)
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	2b00      	cmp	r3, #0
 8014982:	f000 808d 	beq.w	8014aa0 <RadioIrqProcess+0x1f4>
 8014986:	699b      	ldr	r3, [r3, #24]
 8014988:	2b00      	cmp	r3, #0
 801498a:	f000 8089 	beq.w	8014aa0 <RadioIrqProcess+0x1f4>
            RadioEvents->CadDone( false );
 801498e:	2000      	movs	r0, #0
 8014990:	4798      	blx	r3
 8014992:	e085      	b.n	8014aa0 <RadioIrqProcess+0x1f4>
        TimerStop( &TxTimeoutTimer );
 8014994:	4869      	ldr	r0, [pc, #420]	; (8014b3c <RadioIrqProcess+0x290>)
 8014996:	f002 fa39 	bl	8016e0c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801499a:	2000      	movs	r0, #0
 801499c:	f001 f808 	bl	80159b0 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 80149a0:	f001 fe1c 	bl	80165dc <RFW_Is_LongPacketModeEnabled>
 80149a4:	2801      	cmp	r0, #1
 80149a6:	d008      	beq.n	80149ba <RadioIrqProcess+0x10e>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80149a8:	4b63      	ldr	r3, [pc, #396]	; (8014b38 <RadioIrqProcess+0x28c>)
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d077      	beq.n	8014aa0 <RadioIrqProcess+0x1f4>
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d074      	beq.n	8014aa0 <RadioIrqProcess+0x1f4>
            RadioEvents->TxDone( );
 80149b6:	4798      	blx	r3
 80149b8:	e072      	b.n	8014aa0 <RadioIrqProcess+0x1f4>
            RFW_DeInit_TxLongPacket( );
 80149ba:	f001 fe18 	bl	80165ee <RFW_DeInit_TxLongPacket>
 80149be:	e7f3      	b.n	80149a8 <RadioIrqProcess+0xfc>
        TimerStop( &RxTimeoutTimer );
 80149c0:	485c      	ldr	r0, [pc, #368]	; (8014b34 <RadioIrqProcess+0x288>)
 80149c2:	f002 fa23 	bl	8016e0c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80149c6:	4b59      	ldr	r3, [pc, #356]	; (8014b2c <RadioIrqProcess+0x280>)
 80149c8:	785b      	ldrb	r3, [r3, #1]
 80149ca:	b1f3      	cbz	r3, 8014a0a <RadioIrqProcess+0x15e>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 80149cc:	22ff      	movs	r2, #255	; 0xff
 80149ce:	f10d 0107 	add.w	r1, sp, #7
 80149d2:	485b      	ldr	r0, [pc, #364]	; (8014b40 <RadioIrqProcess+0x294>)
 80149d4:	f001 fcfc 	bl	80163d0 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 80149d8:	485a      	ldr	r0, [pc, #360]	; (8014b44 <RadioIrqProcess+0x298>)
 80149da:	f001 f99d 	bl	8015d18 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80149de:	4b56      	ldr	r3, [pc, #344]	; (8014b38 <RadioIrqProcess+0x28c>)
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d05c      	beq.n	8014aa0 <RadioIrqProcess+0x1f4>
 80149e6:	689c      	ldr	r4, [r3, #8]
 80149e8:	2c00      	cmp	r4, #0
 80149ea:	d059      	beq.n	8014aa0 <RadioIrqProcess+0x1f4>
            switch ( SubgRf.PacketStatus.packetType )
 80149ec:	4b4f      	ldr	r3, [pc, #316]	; (8014b2c <RadioIrqProcess+0x280>)
 80149ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80149f2:	2b01      	cmp	r3, #1
 80149f4:	d11d      	bne.n	8014a32 <RadioIrqProcess+0x186>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 80149f6:	4a4d      	ldr	r2, [pc, #308]	; (8014b2c <RadioIrqProcess+0x280>)
 80149f8:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 80149fc:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 8014a00:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014a04:	484e      	ldr	r0, [pc, #312]	; (8014b40 <RadioIrqProcess+0x294>)
 8014a06:	47a0      	blx	r4
                break;
 8014a08:	e04a      	b.n	8014aa0 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 8014a0a:	2000      	movs	r0, #0
 8014a0c:	f000 ffd0 	bl	80159b0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8014a10:	2100      	movs	r1, #0
 8014a12:	f640 1002 	movw	r0, #2306	; 0x902
 8014a16:	f001 f9bb 	bl	8015d90 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 8014a1a:	f640 1044 	movw	r0, #2372	; 0x944
 8014a1e:	f001 faa7 	bl	8015f70 <SUBGRF_ReadRegister>
 8014a22:	f040 0102 	orr.w	r1, r0, #2
 8014a26:	b2c9      	uxtb	r1, r1
 8014a28:	f640 1044 	movw	r0, #2372	; 0x944
 8014a2c:	f001 f9b0 	bl	8015d90 <SUBGRF_WriteRegister>
 8014a30:	e7cc      	b.n	80149cc <RadioIrqProcess+0x120>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8014a32:	4c3e      	ldr	r4, [pc, #248]	; (8014b2c <RadioIrqProcess+0x280>)
 8014a34:	4669      	mov	r1, sp
 8014a36:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8014a38:	f001 fd80 	bl	801653c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8014a3c:	4b3e      	ldr	r3, [pc, #248]	; (8014b38 <RadioIrqProcess+0x28c>)
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	689d      	ldr	r5, [r3, #8]
 8014a42:	9b00      	ldr	r3, [sp, #0]
 8014a44:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8014a48:	4a3f      	ldr	r2, [pc, #252]	; (8014b48 <RadioIrqProcess+0x29c>)
 8014a4a:	fb82 1203 	smull	r1, r2, r2, r3
 8014a4e:	17db      	asrs	r3, r3, #31
 8014a50:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8014a54:	b25b      	sxtb	r3, r3
 8014a56:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 8014a5a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014a5e:	4838      	ldr	r0, [pc, #224]	; (8014b40 <RadioIrqProcess+0x294>)
 8014a60:	47a8      	blx	r5
                break;
 8014a62:	e01d      	b.n	8014aa0 <RadioIrqProcess+0x1f4>
        SUBGRF_SetStandby( STDBY_RC );
 8014a64:	2000      	movs	r0, #0
 8014a66:	f000 ffa3 	bl	80159b0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8014a6a:	4b33      	ldr	r3, [pc, #204]	; (8014b38 <RadioIrqProcess+0x28c>)
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	b1bb      	cbz	r3, 8014aa0 <RadioIrqProcess+0x1f4>
 8014a70:	699b      	ldr	r3, [r3, #24]
 8014a72:	b1ab      	cbz	r3, 8014aa0 <RadioIrqProcess+0x1f4>
            RadioEvents->CadDone( true );
 8014a74:	2001      	movs	r0, #1
 8014a76:	4798      	blx	r3
 8014a78:	e012      	b.n	8014aa0 <RadioIrqProcess+0x1f4>
            TimerStop( &TxTimeoutTimer );
 8014a7a:	4830      	ldr	r0, [pc, #192]	; (8014b3c <RadioIrqProcess+0x290>)
 8014a7c:	f002 f9c6 	bl	8016e0c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8014a80:	2000      	movs	r0, #0
 8014a82:	f000 ff95 	bl	80159b0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8014a86:	4b2c      	ldr	r3, [pc, #176]	; (8014b38 <RadioIrqProcess+0x28c>)
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	b14b      	cbz	r3, 8014aa0 <RadioIrqProcess+0x1f4>
 8014a8c:	685b      	ldr	r3, [r3, #4]
 8014a8e:	b13b      	cbz	r3, 8014aa0 <RadioIrqProcess+0x1f4>
                RadioEvents->TxTimeout( );
 8014a90:	4798      	blx	r3
 8014a92:	e005      	b.n	8014aa0 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8014a94:	4b2d      	ldr	r3, [pc, #180]	; (8014b4c <RadioIrqProcess+0x2a0>)
 8014a96:	2201      	movs	r2, #1
 8014a98:	2100      	movs	r1, #0
 8014a9a:	2002      	movs	r0, #2
 8014a9c:	f001 fe7c 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
}
 8014aa0:	b003      	add	sp, #12
 8014aa2:	bd30      	pop	{r4, r5, pc}
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8014aa4:	4b2a      	ldr	r3, [pc, #168]	; (8014b50 <RadioIrqProcess+0x2a4>)
 8014aa6:	2201      	movs	r2, #1
 8014aa8:	2100      	movs	r1, #0
 8014aaa:	2002      	movs	r0, #2
 8014aac:	f001 fe74 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 8014ab0:	f001 fd92 	bl	80165d8 <RFW_Is_Init>
 8014ab4:	2801      	cmp	r0, #1
 8014ab6:	d1f3      	bne.n	8014aa0 <RadioIrqProcess+0x1f4>
            RFW_ReceivePayload( );
 8014ab8:	f001 fd9a 	bl	80165f0 <RFW_ReceivePayload>
 8014abc:	e7f0      	b.n	8014aa0 <RadioIrqProcess+0x1f4>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8014abe:	4b25      	ldr	r3, [pc, #148]	; (8014b54 <RadioIrqProcess+0x2a8>)
 8014ac0:	2201      	movs	r2, #1
 8014ac2:	2100      	movs	r1, #0
 8014ac4:	2002      	movs	r0, #2
 8014ac6:	f001 fe67 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8014aca:	e7e9      	b.n	8014aa0 <RadioIrqProcess+0x1f4>
        TimerStop( &RxTimeoutTimer );
 8014acc:	4819      	ldr	r0, [pc, #100]	; (8014b34 <RadioIrqProcess+0x288>)
 8014ace:	f002 f99d 	bl	8016e0c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8014ad2:	4b16      	ldr	r3, [pc, #88]	; (8014b2c <RadioIrqProcess+0x280>)
 8014ad4:	785b      	ldrb	r3, [r3, #1]
 8014ad6:	b173      	cbz	r3, 8014af6 <RadioIrqProcess+0x24a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8014ad8:	4b17      	ldr	r3, [pc, #92]	; (8014b38 <RadioIrqProcess+0x28c>)
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d0df      	beq.n	8014aa0 <RadioIrqProcess+0x1f4>
 8014ae0:	68db      	ldr	r3, [r3, #12]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d0dc      	beq.n	8014aa0 <RadioIrqProcess+0x1f4>
            RadioEvents->RxTimeout( );
 8014ae6:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8014ae8:	4b1b      	ldr	r3, [pc, #108]	; (8014b58 <RadioIrqProcess+0x2ac>)
 8014aea:	2201      	movs	r2, #1
 8014aec:	2100      	movs	r1, #0
 8014aee:	2002      	movs	r0, #2
 8014af0:	f001 fe52 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
 8014af4:	e7d4      	b.n	8014aa0 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 8014af6:	2000      	movs	r0, #0
 8014af8:	f000 ff5a 	bl	80159b0 <SUBGRF_SetStandby>
 8014afc:	e7ec      	b.n	8014ad8 <RadioIrqProcess+0x22c>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8014afe:	4b17      	ldr	r3, [pc, #92]	; (8014b5c <RadioIrqProcess+0x2b0>)
 8014b00:	2201      	movs	r2, #1
 8014b02:	2100      	movs	r1, #0
 8014b04:	2002      	movs	r0, #2
 8014b06:	f001 fe47 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8014b0a:	4b08      	ldr	r3, [pc, #32]	; (8014b2c <RadioIrqProcess+0x280>)
 8014b0c:	785b      	ldrb	r3, [r3, #1]
 8014b0e:	b143      	cbz	r3, 8014b22 <RadioIrqProcess+0x276>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8014b10:	4b09      	ldr	r3, [pc, #36]	; (8014b38 <RadioIrqProcess+0x28c>)
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d0c3      	beq.n	8014aa0 <RadioIrqProcess+0x1f4>
 8014b18:	691b      	ldr	r3, [r3, #16]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d0c0      	beq.n	8014aa0 <RadioIrqProcess+0x1f4>
            RadioEvents->RxError( );
 8014b1e:	4798      	blx	r3
}
 8014b20:	e7be      	b.n	8014aa0 <RadioIrqProcess+0x1f4>
            SUBGRF_SetStandby( STDBY_RC );
 8014b22:	2000      	movs	r0, #0
 8014b24:	f000 ff44 	bl	80159b0 <SUBGRF_SetStandby>
 8014b28:	e7f2      	b.n	8014b10 <RadioIrqProcess+0x264>
 8014b2a:	bf00      	nop
 8014b2c:	20002504 	.word	0x20002504
 8014b30:	080182a8 	.word	0x080182a8
 8014b34:	20002574 	.word	0x20002574
 8014b38:	20001578 	.word	0x20001578
 8014b3c:	2000255c 	.word	0x2000255c
 8014b40:	20001478 	.word	0x20001478
 8014b44:	20002528 	.word	0x20002528
 8014b48:	10624dd3 	.word	0x10624dd3
 8014b4c:	080182bc 	.word	0x080182bc
 8014b50:	080182c8 	.word	0x080182c8
 8014b54:	080182d4 	.word	0x080182d4
 8014b58:	080182e0 	.word	0x080182e0
 8014b5c:	080182ec 	.word	0x080182ec

08014b60 <RadioOnDioIrq>:
{
 8014b60:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 8014b62:	4b03      	ldr	r3, [pc, #12]	; (8014b70 <RadioOnDioIrq+0x10>)
 8014b64:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 8014b68:	f7ff fea0 	bl	80148ac <RadioIrqProcess>
}
 8014b6c:	bd08      	pop	{r3, pc}
 8014b6e:	bf00      	nop
 8014b70:	20002504 	.word	0x20002504

08014b74 <RadioGetWakeupTime>:
{
 8014b74:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8014b76:	f001 fc70 	bl	801645a <SUBGRF_GetRadioWakeUpTime>
}
 8014b7a:	3003      	adds	r0, #3
 8014b7c:	bd08      	pop	{r3, pc}

08014b7e <RadioReadRegisters>:
{
 8014b7e:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 8014b80:	f001 fbb0 	bl	80162e4 <SUBGRF_ReadRegisters>
}
 8014b84:	bd08      	pop	{r3, pc}

08014b86 <RadioWriteRegisters>:
{
 8014b86:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 8014b88:	f001 faf8 	bl	801617c <SUBGRF_WriteRegisters>
}
 8014b8c:	bd08      	pop	{r3, pc}

08014b8e <RadioRssi>:
{
 8014b8e:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 8014b90:	f001 f8b4 	bl	8015cfc <SUBGRF_GetRssiInst>
}
 8014b94:	b200      	sxth	r0, r0
 8014b96:	bd08      	pop	{r3, pc}

08014b98 <RadioSetTxContinuousWave>:
{
 8014b98:	b538      	push	{r3, r4, r5, lr}
 8014b9a:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8014b9c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8014ba0:	fb04 f402 	mul.w	r4, r4, r2
    SUBGRF_SetRfFrequency( freq );
 8014ba4:	f001 f86a 	bl	8015c7c <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8014ba8:	4628      	mov	r0, r5
 8014baa:	f001 fc3f 	bl	801642c <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8014bae:	2101      	movs	r1, #1
 8014bb0:	f001 fc28 	bl	8016404 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8014bb4:	f000 ff7a 	bl	8015aac <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8014bb8:	4d04      	ldr	r5, [pc, #16]	; (8014bcc <RadioSetTxContinuousWave+0x34>)
 8014bba:	4621      	mov	r1, r4
 8014bbc:	4628      	mov	r0, r5
 8014bbe:	f002 f9cd 	bl	8016f5c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8014bc2:	4628      	mov	r0, r5
 8014bc4:	f002 f984 	bl	8016ed0 <UTIL_TIMER_Start>
}
 8014bc8:	bd38      	pop	{r3, r4, r5, pc}
 8014bca:	bf00      	nop
 8014bcc:	2000255c 	.word	0x2000255c

08014bd0 <RadioSetChannel>:
{
 8014bd0:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 8014bd2:	f001 f853 	bl	8015c7c <SUBGRF_SetRfFrequency>
}
 8014bd6:	bd08      	pop	{r3, pc}

08014bd8 <RadioStartCad>:
{
 8014bd8:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8014bda:	2100      	movs	r1, #0
 8014bdc:	4b07      	ldr	r3, [pc, #28]	; (8014bfc <RadioStartCad+0x24>)
 8014bde:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8014be2:	f001 fc0f 	bl	8016404 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8014be6:	2300      	movs	r3, #0
 8014be8:	461a      	mov	r2, r3
 8014bea:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8014bee:	4608      	mov	r0, r1
 8014bf0:	f001 f80d 	bl	8015c0e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8014bf4:	f000 ff4e 	bl	8015a94 <SUBGRF_SetCad>
}
 8014bf8:	bd08      	pop	{r3, pc}
 8014bfa:	bf00      	nop
 8014bfc:	20002504 	.word	0x20002504

08014c00 <RadioRx>:
{
 8014c00:	b538      	push	{r3, r4, r5, lr}
 8014c02:	4604      	mov	r4, r0
    if ( 1UL == RFW_Is_Init( ) )
 8014c04:	f001 fce8 	bl	80165d8 <RFW_Is_Init>
 8014c08:	2801      	cmp	r0, #1
 8014c0a:	d014      	beq.n	8014c36 <RadioRx+0x36>
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	461a      	mov	r2, r3
 8014c10:	f240 2162 	movw	r1, #610	; 0x262
 8014c14:	4608      	mov	r0, r1
 8014c16:	f000 fffa 	bl	8015c0e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8014c1a:	b97c      	cbnz	r4, 8014c3c <RadioRx+0x3c>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8014c1c:	4c0f      	ldr	r4, [pc, #60]	; (8014c5c <RadioRx+0x5c>)
 8014c1e:	2100      	movs	r1, #0
 8014c20:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8014c24:	f001 fbee 	bl	8016404 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8014c28:	7863      	ldrb	r3, [r4, #1]
 8014c2a:	b183      	cbz	r3, 8014c4e <RadioRx+0x4e>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8014c2c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8014c30:	f000 fef2 	bl	8015a18 <SUBGRF_SetRx>
}
 8014c34:	bd38      	pop	{r3, r4, r5, pc}
      RFW_ReceiveInit( );
 8014c36:	f001 fcd7 	bl	80165e8 <RFW_ReceiveInit>
 8014c3a:	e7ee      	b.n	8014c1a <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8014c3c:	4d08      	ldr	r5, [pc, #32]	; (8014c60 <RadioRx+0x60>)
 8014c3e:	4621      	mov	r1, r4
 8014c40:	4628      	mov	r0, r5
 8014c42:	f002 f98b 	bl	8016f5c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8014c46:	4628      	mov	r0, r5
 8014c48:	f002 f942 	bl	8016ed0 <UTIL_TIMER_Start>
 8014c4c:	e7e6      	b.n	8014c1c <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8014c4e:	4b03      	ldr	r3, [pc, #12]	; (8014c5c <RadioRx+0x5c>)
 8014c50:	6898      	ldr	r0, [r3, #8]
 8014c52:	0180      	lsls	r0, r0, #6
 8014c54:	f000 fee0 	bl	8015a18 <SUBGRF_SetRx>
}
 8014c58:	e7ec      	b.n	8014c34 <RadioRx+0x34>
 8014c5a:	bf00      	nop
 8014c5c:	20002504 	.word	0x20002504
 8014c60:	20002574 	.word	0x20002574

08014c64 <RadioSleep>:
{
 8014c64:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 8014c66:	f04f 0004 	mov.w	r0, #4
 8014c6a:	f001 f9db 	bl	8016024 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8014c6e:	2002      	movs	r0, #2
 8014c70:	f7ed fb90 	bl	8002394 <HAL_Delay>
}
 8014c74:	bd08      	pop	{r3, pc}
	...

08014c78 <RadioSend>:
{
 8014c78:	b570      	push	{r4, r5, r6, lr}
 8014c7a:	b082      	sub	sp, #8
 8014c7c:	4605      	mov	r5, r0
 8014c7e:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8014c80:	2300      	movs	r3, #0
 8014c82:	461a      	mov	r2, r3
 8014c84:	f240 2101 	movw	r1, #513	; 0x201
 8014c88:	4608      	mov	r0, r1
 8014c8a:	f000 ffc0 	bl	8015c0e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8014c8e:	4e5a      	ldr	r6, [pc, #360]	; (8014df8 <RadioSend+0x180>)
 8014c90:	2101      	movs	r1, #1
 8014c92:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8014c96:	f001 fbb5 	bl	8016404 <SUBGRF_SetSwitch>
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8014c9a:	7833      	ldrb	r3, [r6, #0]
 8014c9c:	2b01      	cmp	r3, #1
 8014c9e:	d103      	bne.n	8014ca8 <RadioSend+0x30>
 8014ca0:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 8014ca4:	2b06      	cmp	r3, #6
 8014ca6:	d012      	beq.n	8014cce <RadioSend+0x56>
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8014ca8:	f640 0089 	movw	r0, #2185	; 0x889
 8014cac:	f001 f960 	bl	8015f70 <SUBGRF_ReadRegister>
 8014cb0:	f040 0104 	orr.w	r1, r0, #4
 8014cb4:	b2c9      	uxtb	r1, r1
 8014cb6:	f640 0089 	movw	r0, #2185	; 0x889
 8014cba:	f001 f869 	bl	8015d90 <SUBGRF_WriteRegister>
    switch(SubgRf.Modem)
 8014cbe:	4b4e      	ldr	r3, [pc, #312]	; (8014df8 <RadioSend+0x180>)
 8014cc0:	781b      	ldrb	r3, [r3, #0]
 8014cc2:	2b03      	cmp	r3, #3
 8014cc4:	d818      	bhi.n	8014cf8 <RadioSend+0x80>
 8014cc6:	e8df f003 	tbb	[pc, r3]
 8014cca:	0d22      	.short	0x0d22
 8014ccc:	5a4d      	.short	0x5a4d
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8014cce:	f640 0089 	movw	r0, #2185	; 0x889
 8014cd2:	f001 f94d 	bl	8015f70 <SUBGRF_ReadRegister>
 8014cd6:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8014cda:	f640 0089 	movw	r0, #2185	; 0x889
 8014cde:	f001 f857 	bl	8015d90 <SUBGRF_WriteRegister>
 8014ce2:	e7ec      	b.n	8014cbe <RadioSend+0x46>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8014ce4:	4844      	ldr	r0, [pc, #272]	; (8014df8 <RadioSend+0x180>)
 8014ce6:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014ce8:	300e      	adds	r0, #14
 8014cea:	f001 fa89 	bl	8016200 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8014cee:	2200      	movs	r2, #0
 8014cf0:	4621      	mov	r1, r4
 8014cf2:	4628      	mov	r0, r5
 8014cf4:	f001 fb53 	bl	801639e <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8014cf8:	4c40      	ldr	r4, [pc, #256]	; (8014dfc <RadioSend+0x184>)
 8014cfa:	4b3f      	ldr	r3, [pc, #252]	; (8014df8 <RadioSend+0x180>)
 8014cfc:	6859      	ldr	r1, [r3, #4]
 8014cfe:	4620      	mov	r0, r4
 8014d00:	f002 f92c 	bl	8016f5c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8014d04:	4620      	mov	r0, r4
 8014d06:	f002 f8e3 	bl	8016ed0 <UTIL_TIMER_Start>
}
 8014d0a:	b002      	add	sp, #8
 8014d0c:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8014d0e:	f001 fc63 	bl	80165d8 <RFW_Is_Init>
 8014d12:	2801      	cmp	r0, #1
 8014d14:	d00a      	beq.n	8014d2c <RadioSend+0xb4>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8014d16:	4838      	ldr	r0, [pc, #224]	; (8014df8 <RadioSend+0x180>)
 8014d18:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014d1a:	300e      	adds	r0, #14
 8014d1c:	f001 fa70 	bl	8016200 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8014d20:	2200      	movs	r2, #0
 8014d22:	4621      	mov	r1, r4
 8014d24:	4628      	mov	r0, r5
 8014d26:	f001 fb3a 	bl	801639e <SUBGRF_SendPayload>
 8014d2a:	e7e5      	b.n	8014cf8 <RadioSend+0x80>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8014d2c:	f10d 0207 	add.w	r2, sp, #7
 8014d30:	4621      	mov	r1, r4
 8014d32:	4628      	mov	r0, r5
 8014d34:	f001 fc55 	bl	80165e2 <RFW_TransmitInit>
 8014d38:	b968      	cbnz	r0, 8014d56 <RadioSend+0xde>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8014d3a:	482f      	ldr	r0, [pc, #188]	; (8014df8 <RadioSend+0x180>)
 8014d3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014d40:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014d42:	300e      	adds	r0, #14
 8014d44:	f001 fa5c 	bl	8016200 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8014d48:	2200      	movs	r2, #0
 8014d4a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014d4e:	4628      	mov	r0, r5
 8014d50:	f001 fb25 	bl	801639e <SUBGRF_SendPayload>
 8014d54:	e7d0      	b.n	8014cf8 <RadioSend+0x80>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8014d56:	4b2a      	ldr	r3, [pc, #168]	; (8014e00 <RadioSend+0x188>)
 8014d58:	2201      	movs	r2, #1
 8014d5a:	2100      	movs	r1, #0
 8014d5c:	2002      	movs	r0, #2
 8014d5e:	f001 fd1b 	bl	8016798 <UTIL_ADV_TRACE_COND_FSend>
                return;
 8014d62:	e7d2      	b.n	8014d0a <RadioSend+0x92>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8014d64:	4824      	ldr	r0, [pc, #144]	; (8014df8 <RadioSend+0x180>)
 8014d66:	2302      	movs	r3, #2
 8014d68:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8014d6a:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014d6c:	300e      	adds	r0, #14
 8014d6e:	f001 fa47 	bl	8016200 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8014d72:	2200      	movs	r2, #0
 8014d74:	4621      	mov	r1, r4
 8014d76:	4628      	mov	r0, r5
 8014d78:	f001 fb11 	bl	801639e <SUBGRF_SendPayload>
            break;
 8014d7c:	e7bc      	b.n	8014cf8 <RadioSend+0x80>
            payload_integration( RadioBuffer, buffer, size );
 8014d7e:	4622      	mov	r2, r4
 8014d80:	4629      	mov	r1, r5
 8014d82:	4820      	ldr	r0, [pc, #128]	; (8014e04 <RadioSend+0x18c>)
 8014d84:	f7ff fca0 	bl	80146c8 <payload_integration>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8014d88:	4e1b      	ldr	r6, [pc, #108]	; (8014df8 <RadioSend+0x180>)
 8014d8a:	2302      	movs	r3, #2
 8014d8c:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8014d8e:	1c65      	adds	r5, r4, #1
 8014d90:	b2ed      	uxtb	r5, r5
 8014d92:	76b5      	strb	r5, [r6, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014d94:	f106 000e 	add.w	r0, r6, #14
 8014d98:	f001 fa32 	bl	8016200 <SUBGRF_SetPacketParams>
            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8014d9c:	2100      	movs	r1, #0
 8014d9e:	20f1      	movs	r0, #241	; 0xf1
 8014da0:	f7ff fd08 	bl	80147b4 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8014da4:	2100      	movs	r1, #0
 8014da6:	20f0      	movs	r0, #240	; 0xf0
 8014da8:	f7ff fd04 	bl	80147b4 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8014dac:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8014dae:	2b64      	cmp	r3, #100	; 0x64
 8014db0:	d019      	beq.n	8014de6 <RadioSend+0x16e>
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 8014db2:	21e1      	movs	r1, #225	; 0xe1
 8014db4:	20f3      	movs	r0, #243	; 0xf3
 8014db6:	f7ff fcfd 	bl	80147b4 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 8014dba:	2104      	movs	r1, #4
 8014dbc:	20f2      	movs	r0, #242	; 0xf2
 8014dbe:	f7ff fcf9 	bl	80147b4 <RadioWrite>
            uint16_t bitNum = ( size * 8 ) + 2;
 8014dc2:	00e1      	lsls	r1, r4, #3
 8014dc4:	1c8c      	adds	r4, r1, #2
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8014dc6:	0a09      	lsrs	r1, r1, #8
 8014dc8:	20f4      	movs	r0, #244	; 0xf4
 8014dca:	f7ff fcf3 	bl	80147b4 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 8014dce:	f004 01fe 	and.w	r1, r4, #254	; 0xfe
 8014dd2:	20f5      	movs	r0, #245	; 0xf5
 8014dd4:	f7ff fcee 	bl	80147b4 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8014dd8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8014ddc:	4629      	mov	r1, r5
 8014dde:	4809      	ldr	r0, [pc, #36]	; (8014e04 <RadioSend+0x18c>)
 8014de0:	f001 fadd 	bl	801639e <SUBGRF_SendPayload>
            break;
 8014de4:	e788      	b.n	8014cf8 <RadioSend+0x80>
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 8014de6:	2170      	movs	r1, #112	; 0x70
 8014de8:	20f3      	movs	r0, #243	; 0xf3
 8014dea:	f7ff fce3 	bl	80147b4 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 8014dee:	211d      	movs	r1, #29
 8014df0:	20f2      	movs	r0, #242	; 0xf2
 8014df2:	f7ff fcdf 	bl	80147b4 <RadioWrite>
 8014df6:	e7e4      	b.n	8014dc2 <RadioSend+0x14a>
 8014df8:	20002504 	.word	0x20002504
 8014dfc:	2000255c 	.word	0x2000255c
 8014e00:	080182fc 	.word	0x080182fc
 8014e04:	20001478 	.word	0x20001478

08014e08 <RadioSetModem>:
{
 8014e08:	b510      	push	{r4, lr}
 8014e0a:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8014e0c:	4b19      	ldr	r3, [pc, #100]	; (8014e74 <RadioSetModem+0x6c>)
 8014e0e:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem(modem);
 8014e10:	f001 fbef 	bl	80165f2 <RFW_SetRadioModem>
    switch( modem )
 8014e14:	3c01      	subs	r4, #1
 8014e16:	2c03      	cmp	r4, #3
 8014e18:	d803      	bhi.n	8014e22 <RadioSetModem+0x1a>
 8014e1a:	e8df f004 	tbb	[pc, r4]
 8014e1e:	1509      	.short	0x1509
 8014e20:	231c      	.short	0x231c
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8014e22:	2000      	movs	r0, #0
 8014e24:	f001 f804 	bl	8015e30 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8014e28:	4b12      	ldr	r3, [pc, #72]	; (8014e74 <RadioSetModem+0x6c>)
 8014e2a:	2200      	movs	r2, #0
 8014e2c:	735a      	strb	r2, [r3, #13]
        break;
 8014e2e:	e011      	b.n	8014e54 <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8014e30:	2001      	movs	r0, #1
 8014e32:	f000 fffd 	bl	8015e30 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8014e36:	4b0f      	ldr	r3, [pc, #60]	; (8014e74 <RadioSetModem+0x6c>)
 8014e38:	7b5a      	ldrb	r2, [r3, #13]
 8014e3a:	7b18      	ldrb	r0, [r3, #12]
 8014e3c:	4282      	cmp	r2, r0
 8014e3e:	d009      	beq.n	8014e54 <RadioSetModem+0x4c>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8014e40:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8014e42:	f000 fa83 	bl	801534c <RadioSetPublicNetwork>
 8014e46:	e005      	b.n	8014e54 <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8014e48:	2002      	movs	r0, #2
 8014e4a:	f000 fff1 	bl	8015e30 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8014e4e:	4b09      	ldr	r3, [pc, #36]	; (8014e74 <RadioSetModem+0x6c>)
 8014e50:	2200      	movs	r2, #0
 8014e52:	735a      	strb	r2, [r3, #13]
}
 8014e54:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8014e56:	2002      	movs	r0, #2
 8014e58:	f000 ffea 	bl	8015e30 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8014e5c:	4b05      	ldr	r3, [pc, #20]	; (8014e74 <RadioSetModem+0x6c>)
 8014e5e:	2200      	movs	r2, #0
 8014e60:	735a      	strb	r2, [r3, #13]
        break;
 8014e62:	e7f7      	b.n	8014e54 <RadioSetModem+0x4c>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8014e64:	2000      	movs	r0, #0
 8014e66:	f000 ffe3 	bl	8015e30 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8014e6a:	4b02      	ldr	r3, [pc, #8]	; (8014e74 <RadioSetModem+0x6c>)
 8014e6c:	2200      	movs	r2, #0
 8014e6e:	735a      	strb	r2, [r3, #13]
}
 8014e70:	e7f0      	b.n	8014e54 <RadioSetModem+0x4c>
 8014e72:	bf00      	nop
 8014e74:	20002504 	.word	0x20002504

08014e78 <RadioSetTxGenericConfig>:
    }
    return status;
}

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8014e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e7c:	b086      	sub	sp, #24
 8014e7e:	4605      	mov	r5, r0
 8014e80:	460c      	mov	r4, r1
 8014e82:	4617      	mov	r7, r2
 8014e84:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 8014e86:	2300      	movs	r3, #0
 8014e88:	9304      	str	r3, [sp, #16]
 8014e8a:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8014e8c:	f001 fba3 	bl	80165d6 <RFW_DeInit>
    switch( modem )
 8014e90:	2d01      	cmp	r5, #1
 8014e92:	f000 8085 	beq.w	8014fa0 <RadioSetTxGenericConfig+0x128>
 8014e96:	2d02      	cmp	r5, #2
 8014e98:	f000 80ed 	beq.w	8015076 <RadioSetTxGenericConfig+0x1fe>
 8014e9c:	b165      	cbz	r5, 8014eb8 <RadioSetTxGenericConfig+0x40>
        break;
    default:
        break;
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8014e9e:	4638      	mov	r0, r7
 8014ea0:	f001 fac4 	bl	801642c <SUBGRF_SetRfTxPower>
 8014ea4:	4c84      	ldr	r4, [pc, #528]	; (80150b8 <RadioSetTxGenericConfig+0x240>)
 8014ea6:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8014eaa:	f001 fb99 	bl	80165e0 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8014eae:	6066      	str	r6, [r4, #4]
    return 0;
 8014eb0:	2000      	movs	r0, #0
}
 8014eb2:	b006      	add	sp, #24
 8014eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8014eb8:	68a3      	ldr	r3, [r4, #8]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	f000 80f0 	beq.w	80150a0 <RadioSetTxGenericConfig+0x228>
 8014ec0:	6923      	ldr	r3, [r4, #16]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	f000 80ef 	beq.w	80150a6 <RadioSetTxGenericConfig+0x22e>
        if( config->fsk.SyncWordLength > 8 )
 8014ec8:	7d20      	ldrb	r0, [r4, #20]
 8014eca:	2808      	cmp	r0, #8
 8014ecc:	f200 80ee 	bhi.w	80150ac <RadioSetTxGenericConfig+0x234>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8014ed0:	2100      	movs	r1, #0
 8014ed2:	e006      	b.n	8014ee2 <RadioSetTxGenericConfig+0x6a>
                syncword[i] = config->fsk.SyncWord[i];
 8014ed4:	69a3      	ldr	r3, [r4, #24]
 8014ed6:	5c5a      	ldrb	r2, [r3, r1]
 8014ed8:	ab06      	add	r3, sp, #24
 8014eda:	440b      	add	r3, r1
 8014edc:	f803 2c08 	strb.w	r2, [r3, #-8]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8014ee0:	3101      	adds	r1, #1
 8014ee2:	4288      	cmp	r0, r1
 8014ee4:	dcf6      	bgt.n	8014ed4 <RadioSetTxGenericConfig+0x5c>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8014ee6:	4d74      	ldr	r5, [pc, #464]	; (80150b8 <RadioSetTxGenericConfig+0x240>)
 8014ee8:	f04f 0800 	mov.w	r8, #0
 8014eec:	f885 8038 	strb.w	r8, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8014ef0:	68a3      	ldr	r3, [r4, #8]
 8014ef2:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8014ef4:	7823      	ldrb	r3, [r4, #0]
 8014ef6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8014efa:	6860      	ldr	r0, [r4, #4]
 8014efc:	f001 fb04 	bl	8016508 <SUBGRF_GetFskBandwidthRegValue>
 8014f00:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8014f04:	68e3      	ldr	r3, [r4, #12]
 8014f06:	642b      	str	r3, [r5, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8014f08:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8014f0c:	6923      	ldr	r3, [r4, #16]
 8014f0e:	00db      	lsls	r3, r3, #3
 8014f10:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8014f12:	2304      	movs	r3, #4
 8014f14:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8014f16:	7d23      	ldrb	r3, [r4, #20]
 8014f18:	00db      	lsls	r3, r3, #3
 8014f1a:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8014f1c:	f885 8014 	strb.w	r8, [r5, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8014f20:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8014f24:	2b02      	cmp	r3, #2
 8014f26:	d008      	beq.n	8014f3a <RadioSetTxGenericConfig+0xc2>
 8014f28:	7fa2      	ldrb	r2, [r4, #30]
 8014f2a:	2a02      	cmp	r2, #2
 8014f2c:	d005      	beq.n	8014f3a <RadioSetTxGenericConfig+0xc2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8014f2e:	7fe0      	ldrb	r0, [r4, #31]
 8014f30:	4961      	ldr	r1, [pc, #388]	; (80150b8 <RadioSetTxGenericConfig+0x240>)
 8014f32:	75c8      	strb	r0, [r1, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8014f34:	760b      	strb	r3, [r1, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8014f36:	754a      	strb	r2, [r1, #21]
 8014f38:	e018      	b.n	8014f6c <RadioSetTxGenericConfig+0xf4>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8014f3a:	7fe2      	ldrb	r2, [r4, #31]
 8014f3c:	f102 030f 	add.w	r3, r2, #15
 8014f40:	b2db      	uxtb	r3, r3
 8014f42:	2b01      	cmp	r3, #1
 8014f44:	d901      	bls.n	8014f4a <RadioSetTxGenericConfig+0xd2>
 8014f46:	2a01      	cmp	r2, #1
 8014f48:	d127      	bne.n	8014f9a <RadioSetTxGenericConfig+0x122>
            ConfigGeneric.rtx = CONFIG_TX;
 8014f4a:	2301      	movs	r3, #1
 8014f4c:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 8014f50:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8014f52:	4a5a      	ldr	r2, [pc, #360]	; (80150bc <RadioSetTxGenericConfig+0x244>)
 8014f54:	4b5a      	ldr	r3, [pc, #360]	; (80150c0 <RadioSetTxGenericConfig+0x248>)
 8014f56:	6819      	ldr	r1, [r3, #0]
 8014f58:	a801      	add	r0, sp, #4
 8014f5a:	f001 fb39 	bl	80165d0 <RFW_Init>
 8014f5e:	b9e0      	cbnz	r0, 8014f9a <RadioSetTxGenericConfig+0x122>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8014f60:	4b55      	ldr	r3, [pc, #340]	; (80150b8 <RadioSetTxGenericConfig+0x240>)
 8014f62:	2200      	movs	r2, #0
 8014f64:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8014f66:	2101      	movs	r1, #1
 8014f68:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8014f6a:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8014f6c:	f7ff fc88 	bl	8014880 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8014f70:	2000      	movs	r0, #0
 8014f72:	f7ff ff49 	bl	8014e08 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8014f76:	4d53      	ldr	r5, [pc, #332]	; (80150c4 <RadioSetTxGenericConfig+0x24c>)
 8014f78:	4628      	mov	r0, r5
 8014f7a:	f000 ff71 	bl	8015e60 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014f7e:	f1a5 002a 	sub.w	r0, r5, #42	; 0x2a
 8014f82:	f001 f93d 	bl	8016200 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8014f86:	a804      	add	r0, sp, #16
 8014f88:	f001 f908 	bl	801619c <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8014f8c:	8ba0      	ldrh	r0, [r4, #28]
 8014f8e:	f001 f86b 	bl	8016068 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8014f92:	8c20      	ldrh	r0, [r4, #32]
 8014f94:	f001 f91f 	bl	80161d6 <SUBGRF_SetCrcPolynomial>
        break;
 8014f98:	e781      	b.n	8014e9e <RadioSetTxGenericConfig+0x26>
                return -1;
 8014f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8014f9e:	e788      	b.n	8014eb2 <RadioSetTxGenericConfig+0x3a>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8014fa0:	4b45      	ldr	r3, [pc, #276]	; (80150b8 <RadioSetTxGenericConfig+0x240>)
 8014fa2:	2201      	movs	r2, #1
 8014fa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8014fa8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8014fac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8014fb0:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8014fb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8014fb8:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8014fbc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8014fc0:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8014fc4:	2b01      	cmp	r3, #1
 8014fc6:	d036      	beq.n	8015036 <RadioSetTxGenericConfig+0x1be>
 8014fc8:	2b02      	cmp	r3, #2
 8014fca:	d039      	beq.n	8015040 <RadioSetTxGenericConfig+0x1c8>
 8014fcc:	b373      	cbz	r3, 801502c <RadioSetTxGenericConfig+0x1b4>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8014fce:	4d3a      	ldr	r5, [pc, #232]	; (80150b8 <RadioSetTxGenericConfig+0x240>)
 8014fd0:	f04f 0801 	mov.w	r8, #1
 8014fd4:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8014fd8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8014fda:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8014fdc:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8014fe0:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8014fe2:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8014fe6:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8014fea:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8014fee:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 8014ff2:	f7ff fc45 	bl	8014880 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8014ff6:	4640      	mov	r0, r8
 8014ff8:	f7ff ff06 	bl	8014e08 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8014ffc:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8015000:	f000 ff2e 	bl	8015e60 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015004:	f105 000e 	add.w	r0, r5, #14
 8015008:	f001 f8fa 	bl	8016200 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801500c:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 8015010:	2b06      	cmp	r3, #6
 8015012:	d025      	beq.n	8015060 <RadioSetTxGenericConfig+0x1e8>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8015014:	f640 0089 	movw	r0, #2185	; 0x889
 8015018:	f000 ffaa 	bl	8015f70 <SUBGRF_ReadRegister>
 801501c:	f040 0104 	orr.w	r1, r0, #4
 8015020:	b2c9      	uxtb	r1, r1
 8015022:	f640 0089 	movw	r0, #2185	; 0x889
 8015026:	f000 feb3 	bl	8015d90 <SUBGRF_WriteRegister>
 801502a:	e738      	b.n	8014e9e <RadioSetTxGenericConfig+0x26>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801502c:	4b22      	ldr	r3, [pc, #136]	; (80150b8 <RadioSetTxGenericConfig+0x240>)
 801502e:	2200      	movs	r2, #0
 8015030:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8015034:	e7cb      	b.n	8014fce <RadioSetTxGenericConfig+0x156>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8015036:	4b20      	ldr	r3, [pc, #128]	; (80150b8 <RadioSetTxGenericConfig+0x240>)
 8015038:	2201      	movs	r2, #1
 801503a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801503e:	e7c6      	b.n	8014fce <RadioSetTxGenericConfig+0x156>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8015040:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8015044:	3b0b      	subs	r3, #11
 8015046:	b2db      	uxtb	r3, r3
 8015048:	2b01      	cmp	r3, #1
 801504a:	d904      	bls.n	8015056 <RadioSetTxGenericConfig+0x1de>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801504c:	4b1a      	ldr	r3, [pc, #104]	; (80150b8 <RadioSetTxGenericConfig+0x240>)
 801504e:	2200      	movs	r2, #0
 8015050:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8015054:	e7bb      	b.n	8014fce <RadioSetTxGenericConfig+0x156>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8015056:	4b18      	ldr	r3, [pc, #96]	; (80150b8 <RadioSetTxGenericConfig+0x240>)
 8015058:	2201      	movs	r2, #1
 801505a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801505e:	e7b6      	b.n	8014fce <RadioSetTxGenericConfig+0x156>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8015060:	f640 0089 	movw	r0, #2185	; 0x889
 8015064:	f000 ff84 	bl	8015f70 <SUBGRF_ReadRegister>
 8015068:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 801506c:	f640 0089 	movw	r0, #2185	; 0x889
 8015070:	f000 fe8e 	bl	8015d90 <SUBGRF_WriteRegister>
 8015074:	e713      	b.n	8014e9e <RadioSetTxGenericConfig+0x26>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8015076:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015078:	3b01      	subs	r3, #1
 801507a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801507e:	d218      	bcs.n	80150b2 <RadioSetTxGenericConfig+0x23a>
        RadioSetModem( MODEM_BPSK );
 8015080:	2002      	movs	r0, #2
 8015082:	f7ff fec1 	bl	8014e08 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8015086:	480c      	ldr	r0, [pc, #48]	; (80150b8 <RadioSetTxGenericConfig+0x240>)
 8015088:	2302      	movs	r3, #2
 801508a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801508e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015090:	6483      	str	r3, [r0, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8015092:	2316      	movs	r3, #22
 8015094:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8015098:	3038      	adds	r0, #56	; 0x38
 801509a:	f000 fee1 	bl	8015e60 <SUBGRF_SetModulationParams>
        break;
 801509e:	e6fe      	b.n	8014e9e <RadioSetTxGenericConfig+0x26>
            return -1;
 80150a0:	f04f 30ff 	mov.w	r0, #4294967295
 80150a4:	e705      	b.n	8014eb2 <RadioSetTxGenericConfig+0x3a>
 80150a6:	f04f 30ff 	mov.w	r0, #4294967295
 80150aa:	e702      	b.n	8014eb2 <RadioSetTxGenericConfig+0x3a>
            return -1;
 80150ac:	f04f 30ff 	mov.w	r0, #4294967295
 80150b0:	e6ff      	b.n	8014eb2 <RadioSetTxGenericConfig+0x3a>
            return -1;
 80150b2:	f04f 30ff 	mov.w	r0, #4294967295
 80150b6:	e6fc      	b.n	8014eb2 <RadioSetTxGenericConfig+0x3a>
 80150b8:	20002504 	.word	0x20002504
 80150bc:	2000255c 	.word	0x2000255c
 80150c0:	20001578 	.word	0x20001578
 80150c4:	2000253c 	.word	0x2000253c

080150c8 <RadioSetRxGenericConfig>:
{
 80150c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150ca:	b087      	sub	sp, #28
 80150cc:	4607      	mov	r7, r0
 80150ce:	460c      	mov	r4, r1
 80150d0:	4615      	mov	r5, r2
 80150d2:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 80150d4:	2300      	movs	r3, #0
 80150d6:	9304      	str	r3, [sp, #16]
 80150d8:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80150da:	f001 fa7c 	bl	80165d6 <RFW_DeInit>
    if( rxContinuous != 0 )
 80150de:	b105      	cbz	r5, 80150e2 <RadioSetRxGenericConfig+0x1a>
        symbTimeout = 0;
 80150e0:	2600      	movs	r6, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80150e2:	3d00      	subs	r5, #0
 80150e4:	bf18      	it	ne
 80150e6:	2501      	movne	r5, #1
 80150e8:	4b94      	ldr	r3, [pc, #592]	; (801533c <RadioSetRxGenericConfig+0x274>)
 80150ea:	705d      	strb	r5, [r3, #1]
    switch( modem )
 80150ec:	b12f      	cbz	r7, 80150fa <RadioSetRxGenericConfig+0x32>
 80150ee:	2f01      	cmp	r7, #1
 80150f0:	f000 8094 	beq.w	801521c <RadioSetRxGenericConfig+0x154>
 80150f4:	2000      	movs	r0, #0
}
 80150f6:	b007      	add	sp, #28
 80150f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80150fa:	68e3      	ldr	r3, [r4, #12]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	f000 8110 	beq.w	8015322 <RadioSetRxGenericConfig+0x25a>
 8015102:	6923      	ldr	r3, [r4, #16]
 8015104:	2b00      	cmp	r3, #0
 8015106:	f000 810f 	beq.w	8015328 <RadioSetRxGenericConfig+0x260>
        if( config->fsk.SyncWordLength > 8 )
 801510a:	7d63      	ldrb	r3, [r4, #21]
 801510c:	2b08      	cmp	r3, #8
 801510e:	f200 810e 	bhi.w	801532e <RadioSetRxGenericConfig+0x266>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8015112:	2200      	movs	r2, #0
 8015114:	e006      	b.n	8015124 <RadioSetRxGenericConfig+0x5c>
                syncword[i] = config->fsk.SyncWord[i];
 8015116:	69a1      	ldr	r1, [r4, #24]
 8015118:	5c88      	ldrb	r0, [r1, r2]
 801511a:	a906      	add	r1, sp, #24
 801511c:	4411      	add	r1, r2
 801511e:	f801 0c08 	strb.w	r0, [r1, #-8]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8015122:	3201      	adds	r2, #1
 8015124:	4293      	cmp	r3, r2
 8015126:	dcf6      	bgt.n	8015116 <RadioSetRxGenericConfig+0x4e>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8015128:	6820      	ldr	r0, [r4, #0]
 801512a:	3800      	subs	r0, #0
 801512c:	bf18      	it	ne
 801512e:	2001      	movne	r0, #1
 8015130:	f000 fcca 	bl	8015ac8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8015134:	4d81      	ldr	r5, [pc, #516]	; (801533c <RadioSetRxGenericConfig+0x274>)
 8015136:	2700      	movs	r7, #0
 8015138:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801513c:	68e3      	ldr	r3, [r4, #12]
 801513e:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8015140:	7923      	ldrb	r3, [r4, #4]
 8015142:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8015146:	68a0      	ldr	r0, [r4, #8]
 8015148:	f001 f9de 	bl	8016508 <SUBGRF_GetFskBandwidthRegValue>
 801514c:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8015150:	73af      	strb	r7, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8015152:	6923      	ldr	r3, [r4, #16]
 8015154:	00db      	lsls	r3, r3, #3
 8015156:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8015158:	7d23      	ldrb	r3, [r4, #20]
 801515a:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801515c:	7d63      	ldrb	r3, [r4, #21]
 801515e:	00db      	lsls	r3, r3, #3
 8015160:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8015162:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8015166:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8015168:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 801516c:	b973      	cbnz	r3, 801518c <RadioSetRxGenericConfig+0xc4>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801516e:	69e1      	ldr	r1, [r4, #28]
 8015170:	75a9      	strb	r1, [r5, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8015172:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8015176:	2a02      	cmp	r2, #2
 8015178:	d012      	beq.n	80151a0 <RadioSetRxGenericConfig+0xd8>
 801517a:	2b02      	cmp	r3, #2
 801517c:	d010      	beq.n	80151a0 <RadioSetRxGenericConfig+0xd8>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801517e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8015182:	496e      	ldr	r1, [pc, #440]	; (801533c <RadioSetRxGenericConfig+0x274>)
 8015184:	75c8      	strb	r0, [r1, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8015186:	760a      	strb	r2, [r1, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8015188:	754b      	strb	r3, [r1, #21]
 801518a:	e023      	b.n	80151d4 <RadioSetRxGenericConfig+0x10c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801518c:	2b02      	cmp	r3, #2
 801518e:	d003      	beq.n	8015198 <RadioSetRxGenericConfig+0xd0>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8015190:	4a6a      	ldr	r2, [pc, #424]	; (801533c <RadioSetRxGenericConfig+0x274>)
 8015192:	21ff      	movs	r1, #255	; 0xff
 8015194:	7591      	strb	r1, [r2, #22]
 8015196:	e7ec      	b.n	8015172 <RadioSetRxGenericConfig+0xaa>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8015198:	4a68      	ldr	r2, [pc, #416]	; (801533c <RadioSetRxGenericConfig+0x274>)
 801519a:	21ff      	movs	r1, #255	; 0xff
 801519c:	7591      	strb	r1, [r2, #22]
 801519e:	e7e8      	b.n	8015172 <RadioSetRxGenericConfig+0xaa>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80151a0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80151a4:	f102 030f 	add.w	r3, r2, #15
 80151a8:	b2db      	uxtb	r3, r3
 80151aa:	2b01      	cmp	r3, #1
 80151ac:	d901      	bls.n	80151b2 <RadioSetRxGenericConfig+0xea>
 80151ae:	2a01      	cmp	r2, #1
 80151b0:	d131      	bne.n	8015216 <RadioSetRxGenericConfig+0x14e>
          ConfigGeneric.rtx = CONFIG_RX;
 80151b2:	2300      	movs	r3, #0
 80151b4:	f88d 300c 	strb.w	r3, [sp, #12]
          ConfigGeneric.RxConfig = config;
 80151b8:	9402      	str	r4, [sp, #8]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80151ba:	4a61      	ldr	r2, [pc, #388]	; (8015340 <RadioSetRxGenericConfig+0x278>)
 80151bc:	4b61      	ldr	r3, [pc, #388]	; (8015344 <RadioSetRxGenericConfig+0x27c>)
 80151be:	6819      	ldr	r1, [r3, #0]
 80151c0:	a801      	add	r0, sp, #4
 80151c2:	f001 fa05 	bl	80165d0 <RFW_Init>
 80151c6:	bb30      	cbnz	r0, 8015216 <RadioSetRxGenericConfig+0x14e>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80151c8:	4b5c      	ldr	r3, [pc, #368]	; (801533c <RadioSetRxGenericConfig+0x274>)
 80151ca:	2200      	movs	r2, #0
 80151cc:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80151ce:	2101      	movs	r1, #1
 80151d0:	75d9      	strb	r1, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80151d2:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80151d4:	f7ff fb54 	bl	8014880 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80151d8:	2000      	movs	r0, #0
 80151da:	f7ff fe15 	bl	8014e08 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80151de:	4d5a      	ldr	r5, [pc, #360]	; (8015348 <RadioSetRxGenericConfig+0x280>)
 80151e0:	4628      	mov	r0, r5
 80151e2:	f000 fe3d 	bl	8015e60 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80151e6:	f1a5 002a 	sub.w	r0, r5, #42	; 0x2a
 80151ea:	f001 f809 	bl	8016200 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80151ee:	a804      	add	r0, sp, #16
 80151f0:	f000 ffd4 	bl	801619c <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80151f4:	8c20      	ldrh	r0, [r4, #32]
 80151f6:	f000 ff37 	bl	8016068 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80151fa:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 80151fc:	f000 ffeb 	bl	80161d6 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8015200:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8015204:	fb03 f606 	mul.w	r6, r3, r6
 8015208:	68e3      	ldr	r3, [r4, #12]
 801520a:	fbb6 f6f3 	udiv	r6, r6, r3
 801520e:	f845 6c30 	str.w	r6, [r5, #-48]
    return status;
 8015212:	2000      	movs	r0, #0
        break;
 8015214:	e76f      	b.n	80150f6 <RadioSetRxGenericConfig+0x2e>
            return -1;
 8015216:	f04f 30ff 	mov.w	r0, #4294967295
 801521a:	e76c      	b.n	80150f6 <RadioSetRxGenericConfig+0x2e>
        if( config->lora.PreambleLen == 0 )
 801521c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801521e:	2b00      	cmp	r3, #0
 8015220:	f000 8088 	beq.w	8015334 <RadioSetRxGenericConfig+0x26c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8015224:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8015228:	2b01      	cmp	r3, #1
 801522a:	d053      	beq.n	80152d4 <RadioSetRxGenericConfig+0x20c>
            MaxPayloadLength = 0xFF;
 801522c:	27ff      	movs	r7, #255	; 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801522e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8015230:	3800      	subs	r0, #0
 8015232:	bf18      	it	ne
 8015234:	2001      	movne	r0, #1
 8015236:	f000 fc47 	bl	8015ac8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801523a:	b2f0      	uxtb	r0, r6
 801523c:	f000 fdd6 	bl	8015dec <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8015240:	4b3e      	ldr	r3, [pc, #248]	; (801533c <RadioSetRxGenericConfig+0x274>)
 8015242:	2201      	movs	r2, #1
 8015244:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8015248:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 801524c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8015250:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8015254:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8015258:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 801525c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8015260:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 8015264:	2b01      	cmp	r3, #1
 8015266:	d03c      	beq.n	80152e2 <RadioSetRxGenericConfig+0x21a>
 8015268:	2b02      	cmp	r3, #2
 801526a:	d03f      	beq.n	80152ec <RadioSetRxGenericConfig+0x224>
 801526c:	b3a3      	cbz	r3, 80152d8 <RadioSetRxGenericConfig+0x210>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801526e:	4d33      	ldr	r5, [pc, #204]	; (801533c <RadioSetRxGenericConfig+0x274>)
 8015270:	2601      	movs	r6, #1
 8015272:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8015274:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8015276:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8015278:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 801527c:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801527e:	77ef      	strb	r7, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8015280:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8015284:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8015288:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 801528c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 8015290:	f7ff faf6 	bl	8014880 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8015294:	4630      	mov	r0, r6
 8015296:	f7ff fdb7 	bl	8014e08 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801529a:	f105 0038 	add.w	r0, r5, #56	; 0x38
 801529e:	f000 fddf 	bl	8015e60 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80152a2:	f105 000e 	add.w	r0, r5, #14
 80152a6:	f000 ffab 	bl	8016200 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80152aa:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80152ae:	42b3      	cmp	r3, r6
 80152b0:	d02c      	beq.n	801530c <RadioSetRxGenericConfig+0x244>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80152b2:	f240 7036 	movw	r0, #1846	; 0x736
 80152b6:	f000 fe5b 	bl	8015f70 <SUBGRF_ReadRegister>
 80152ba:	f040 0104 	orr.w	r1, r0, #4
 80152be:	b2c9      	uxtb	r1, r1
 80152c0:	f240 7036 	movw	r0, #1846	; 0x736
 80152c4:	f000 fd64 	bl	8015d90 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80152c8:	4b1c      	ldr	r3, [pc, #112]	; (801533c <RadioSetRxGenericConfig+0x274>)
 80152ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80152ce:	609a      	str	r2, [r3, #8]
    return status;
 80152d0:	2000      	movs	r0, #0
        break;
 80152d2:	e710      	b.n	80150f6 <RadioSetRxGenericConfig+0x2e>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80152d4:	7f27      	ldrb	r7, [r4, #28]
 80152d6:	e7aa      	b.n	801522e <RadioSetRxGenericConfig+0x166>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80152d8:	4b18      	ldr	r3, [pc, #96]	; (801533c <RadioSetRxGenericConfig+0x274>)
 80152da:	2200      	movs	r2, #0
 80152dc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80152e0:	e7c5      	b.n	801526e <RadioSetRxGenericConfig+0x1a6>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80152e2:	4b16      	ldr	r3, [pc, #88]	; (801533c <RadioSetRxGenericConfig+0x274>)
 80152e4:	2201      	movs	r2, #1
 80152e6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80152ea:	e7c0      	b.n	801526e <RadioSetRxGenericConfig+0x1a6>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80152ec:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80152f0:	3b0b      	subs	r3, #11
 80152f2:	b2db      	uxtb	r3, r3
 80152f4:	2b01      	cmp	r3, #1
 80152f6:	d904      	bls.n	8015302 <RadioSetRxGenericConfig+0x23a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80152f8:	4b10      	ldr	r3, [pc, #64]	; (801533c <RadioSetRxGenericConfig+0x274>)
 80152fa:	2200      	movs	r2, #0
 80152fc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8015300:	e7b5      	b.n	801526e <RadioSetRxGenericConfig+0x1a6>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8015302:	4b0e      	ldr	r3, [pc, #56]	; (801533c <RadioSetRxGenericConfig+0x274>)
 8015304:	2201      	movs	r2, #1
 8015306:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801530a:	e7b0      	b.n	801526e <RadioSetRxGenericConfig+0x1a6>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 801530c:	f240 7036 	movw	r0, #1846	; 0x736
 8015310:	f000 fe2e 	bl	8015f70 <SUBGRF_ReadRegister>
 8015314:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8015318:	f240 7036 	movw	r0, #1846	; 0x736
 801531c:	f000 fd38 	bl	8015d90 <SUBGRF_WriteRegister>
 8015320:	e7d2      	b.n	80152c8 <RadioSetRxGenericConfig+0x200>
            return -1;
 8015322:	f04f 30ff 	mov.w	r0, #4294967295
 8015326:	e6e6      	b.n	80150f6 <RadioSetRxGenericConfig+0x2e>
 8015328:	f04f 30ff 	mov.w	r0, #4294967295
 801532c:	e6e3      	b.n	80150f6 <RadioSetRxGenericConfig+0x2e>
            return -1;
 801532e:	f04f 30ff 	mov.w	r0, #4294967295
 8015332:	e6e0      	b.n	80150f6 <RadioSetRxGenericConfig+0x2e>
            return -1;
 8015334:	f04f 30ff 	mov.w	r0, #4294967295
 8015338:	e6dd      	b.n	80150f6 <RadioSetRxGenericConfig+0x2e>
 801533a:	bf00      	nop
 801533c:	20002504 	.word	0x20002504
 8015340:	20002574 	.word	0x20002574
 8015344:	20001578 	.word	0x20001578
 8015348:	2000253c 	.word	0x2000253c

0801534c <RadioSetPublicNetwork>:
{
 801534c:	b510      	push	{r4, lr}
 801534e:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8015350:	4b0e      	ldr	r3, [pc, #56]	; (801538c <RadioSetPublicNetwork+0x40>)
 8015352:	7318      	strb	r0, [r3, #12]
 8015354:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 8015356:	2001      	movs	r0, #1
 8015358:	f7ff fd56 	bl	8014e08 <RadioSetModem>
    if( enable == true )
 801535c:	b154      	cbz	r4, 8015374 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801535e:	2134      	movs	r1, #52	; 0x34
 8015360:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8015364:	f000 fd14 	bl	8015d90 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8015368:	2144      	movs	r1, #68	; 0x44
 801536a:	f240 7041 	movw	r0, #1857	; 0x741
 801536e:	f000 fd0f 	bl	8015d90 <SUBGRF_WriteRegister>
}
 8015372:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8015374:	2114      	movs	r1, #20
 8015376:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801537a:	f000 fd09 	bl	8015d90 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801537e:	2124      	movs	r1, #36	; 0x24
 8015380:	f240 7041 	movw	r0, #1857	; 0x741
 8015384:	f000 fd04 	bl	8015d90 <SUBGRF_WriteRegister>
}
 8015388:	e7f3      	b.n	8015372 <RadioSetPublicNetwork+0x26>
 801538a:	bf00      	nop
 801538c:	20002504 	.word	0x20002504

08015390 <RadioSetTxConfig>:
{
 8015390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015394:	b083      	sub	sp, #12
 8015396:	4604      	mov	r4, r0
 8015398:	460d      	mov	r5, r1
 801539a:	4691      	mov	r9, r2
 801539c:	461f      	mov	r7, r3
 801539e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80153a2:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 80153a6:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80153aa:	f001 f914 	bl	80165d6 <RFW_DeInit>
    switch( modem )
 80153ae:	2c01      	cmp	r4, #1
 80153b0:	d05a      	beq.n	8015468 <RadioSetTxConfig+0xd8>
 80153b2:	2c03      	cmp	r4, #3
 80153b4:	f000 80ab 	beq.w	801550e <RadioSetTxConfig+0x17e>
 80153b8:	b164      	cbz	r4, 80153d4 <RadioSetTxConfig+0x44>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80153ba:	4628      	mov	r0, r5
 80153bc:	f001 f836 	bl	801642c <SUBGRF_SetRfTxPower>
 80153c0:	4c5b      	ldr	r4, [pc, #364]	; (8015530 <RadioSetTxConfig+0x1a0>)
 80153c2:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 80153c6:	f001 f90b 	bl	80165e0 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80153ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80153cc:	6063      	str	r3, [r4, #4]
}
 80153ce:	b003      	add	sp, #12
 80153d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80153d4:	4c56      	ldr	r4, [pc, #344]	; (8015530 <RadioSetTxConfig+0x1a0>)
 80153d6:	f04f 0b00 	mov.w	fp, #0
 80153da:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80153de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80153e0:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80153e2:	230b      	movs	r3, #11
 80153e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80153e8:	4638      	mov	r0, r7
 80153ea:	f001 f88d 	bl	8016508 <SUBGRF_GetFskBandwidthRegValue>
 80153ee:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80153f2:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80153f6:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80153fa:	00f6      	lsls	r6, r6, #3
 80153fc:	8226      	strh	r6, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80153fe:	2304      	movs	r3, #4
 8015400:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8015402:	2318      	movs	r3, #24
 8015404:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8015406:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801540a:	f088 0801 	eor.w	r8, r8, #1
 801540e:	f884 8015 	strb.w	r8, [r4, #21]
            if( crcOn == true )
 8015412:	f1ba 0f00 	cmp.w	sl, #0
 8015416:	d023      	beq.n	8015460 <RadioSetTxConfig+0xd0>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8015418:	22f2      	movs	r2, #242	; 0xf2
 801541a:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801541c:	4c44      	ldr	r4, [pc, #272]	; (8015530 <RadioSetTxConfig+0x1a0>)
 801541e:	2301      	movs	r3, #1
 8015420:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8015422:	f7ff fa2d 	bl	8014880 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8015426:	4626      	mov	r6, r4
 8015428:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 801542c:	3800      	subs	r0, #0
 801542e:	bf18      	it	ne
 8015430:	2001      	movne	r0, #1
 8015432:	f7ff fce9 	bl	8014e08 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8015436:	4630      	mov	r0, r6
 8015438:	f000 fd12 	bl	8015e60 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801543c:	f104 000e 	add.w	r0, r4, #14
 8015440:	f000 fede 	bl	8016200 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8015444:	4a3b      	ldr	r2, [pc, #236]	; (8015534 <RadioSetTxConfig+0x1a4>)
 8015446:	466b      	mov	r3, sp
 8015448:	e892 0003 	ldmia.w	r2, {r0, r1}
 801544c:	e883 0003 	stmia.w	r3, {r0, r1}
 8015450:	4618      	mov	r0, r3
 8015452:	f000 fea3 	bl	801619c <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8015456:	f240 10ff 	movw	r0, #511	; 0x1ff
 801545a:	f000 fe05 	bl	8016068 <SUBGRF_SetWhiteningSeed>
            break;
 801545e:	e7ac      	b.n	80153ba <RadioSetTxConfig+0x2a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8015460:	4b33      	ldr	r3, [pc, #204]	; (8015530 <RadioSetTxConfig+0x1a0>)
 8015462:	2201      	movs	r2, #1
 8015464:	75da      	strb	r2, [r3, #23]
 8015466:	e7d9      	b.n	801541c <RadioSetTxConfig+0x8c>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8015468:	4a31      	ldr	r2, [pc, #196]	; (8015530 <RadioSetTxConfig+0x1a0>)
 801546a:	2301      	movs	r3, #1
 801546c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8015470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015472:	b2db      	uxtb	r3, r3
 8015474:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8015478:	492f      	ldr	r1, [pc, #188]	; (8015538 <RadioSetTxConfig+0x1a8>)
 801547a:	5dc9      	ldrb	r1, [r1, r7]
 801547c:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8015480:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8015484:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8015488:	b91f      	cbnz	r7, 8015492 <RadioSetTxConfig+0x102>
 801548a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801548c:	3a0b      	subs	r2, #11
 801548e:	2a01      	cmp	r2, #1
 8015490:	d92f      	bls.n	80154f2 <RadioSetTxConfig+0x162>
 8015492:	2f01      	cmp	r7, #1
 8015494:	d02a      	beq.n	80154ec <RadioSetTxConfig+0x15c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8015496:	4a26      	ldr	r2, [pc, #152]	; (8015530 <RadioSetTxConfig+0x1a0>)
 8015498:	2100      	movs	r1, #0
 801549a:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801549e:	4a24      	ldr	r2, [pc, #144]	; (8015530 <RadioSetTxConfig+0x1a0>)
 80154a0:	2101      	movs	r1, #1
 80154a2:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80154a4:	3b05      	subs	r3, #5
 80154a6:	b2db      	uxtb	r3, r3
 80154a8:	428b      	cmp	r3, r1
 80154aa:	d927      	bls.n	80154fc <RadioSetTxConfig+0x16c>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80154ac:	4b20      	ldr	r3, [pc, #128]	; (8015530 <RadioSetTxConfig+0x1a0>)
 80154ae:	839e      	strh	r6, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80154b0:	4c1f      	ldr	r4, [pc, #124]	; (8015530 <RadioSetTxConfig+0x1a0>)
 80154b2:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80154b6:	4b21      	ldr	r3, [pc, #132]	; (801553c <RadioSetTxConfig+0x1ac>)
 80154b8:	781b      	ldrb	r3, [r3, #0]
 80154ba:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80154bc:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80154c0:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80154c4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 80154c8:	f7ff f9da 	bl	8014880 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80154cc:	4626      	mov	r6, r4
 80154ce:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 80154d2:	3800      	subs	r0, #0
 80154d4:	bf18      	it	ne
 80154d6:	2001      	movne	r0, #1
 80154d8:	f7ff fc96 	bl	8014e08 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80154dc:	4630      	mov	r0, r6
 80154de:	f000 fcbf 	bl	8015e60 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80154e2:	f104 000e 	add.w	r0, r4, #14
 80154e6:	f000 fe8b 	bl	8016200 <SUBGRF_SetPacketParams>
            break;
 80154ea:	e766      	b.n	80153ba <RadioSetTxConfig+0x2a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80154ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80154ee:	2a0c      	cmp	r2, #12
 80154f0:	d1d1      	bne.n	8015496 <RadioSetTxConfig+0x106>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80154f2:	4a0f      	ldr	r2, [pc, #60]	; (8015530 <RadioSetTxConfig+0x1a0>)
 80154f4:	2101      	movs	r1, #1
 80154f6:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 80154fa:	e7d0      	b.n	801549e <RadioSetTxConfig+0x10e>
                if( preambleLen < 12 )
 80154fc:	2e0b      	cmp	r6, #11
 80154fe:	d803      	bhi.n	8015508 <RadioSetTxConfig+0x178>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8015500:	4613      	mov	r3, r2
 8015502:	220c      	movs	r2, #12
 8015504:	839a      	strh	r2, [r3, #28]
 8015506:	e7d3      	b.n	80154b0 <RadioSetTxConfig+0x120>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8015508:	4b09      	ldr	r3, [pc, #36]	; (8015530 <RadioSetTxConfig+0x1a0>)
 801550a:	839e      	strh	r6, [r3, #28]
 801550c:	e7d0      	b.n	80154b0 <RadioSetTxConfig+0x120>
            RadioSetModem(MODEM_SIGFOX_TX);
 801550e:	2003      	movs	r0, #3
 8015510:	f7ff fc7a 	bl	8014e08 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8015514:	4806      	ldr	r0, [pc, #24]	; (8015530 <RadioSetTxConfig+0x1a0>)
 8015516:	2302      	movs	r3, #2
 8015518:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801551c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801551e:	6483      	str	r3, [r0, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8015520:	2316      	movs	r3, #22
 8015522:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8015526:	3038      	adds	r0, #56	; 0x38
 8015528:	f000 fc9a 	bl	8015e60 <SUBGRF_SetModulationParams>
            break;
 801552c:	e745      	b.n	80153ba <RadioSetTxConfig+0x2a>
 801552e:	bf00      	nop
 8015530:	20002504 	.word	0x20002504
 8015534:	0801755c 	.word	0x0801755c
 8015538:	08018314 	.word	0x08018314
 801553c:	200000d8 	.word	0x200000d8

08015540 <RadioSetRxConfig>:
{
 8015540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015544:	b087      	sub	sp, #28
 8015546:	4604      	mov	r4, r0
 8015548:	460e      	mov	r6, r1
 801554a:	4615      	mov	r5, r2
 801554c:	9301      	str	r3, [sp, #4]
 801554e:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
 8015552:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 8015556:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801555a:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
 801555e:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
    SubgRf.RxContinuous = rxContinuous;
 8015562:	4baf      	ldr	r3, [pc, #700]	; (8015820 <RadioSetRxConfig+0x2e0>)
 8015564:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8015568:	f001 f835 	bl	80165d6 <RFW_DeInit>
    if( rxContinuous == true )
 801556c:	f1b8 0f00 	cmp.w	r8, #0
 8015570:	d001      	beq.n	8015576 <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 8015572:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 8015576:	b16f      	cbz	r7, 8015594 <RadioSetRxConfig+0x54>
        MaxPayloadLength = payloadLen;
 8015578:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801557c:	4ba9      	ldr	r3, [pc, #676]	; (8015824 <RadioSetRxConfig+0x2e4>)
 801557e:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8015580:	2c01      	cmp	r4, #1
 8015582:	f000 80d6 	beq.w	8015732 <RadioSetRxConfig+0x1f2>
 8015586:	2c04      	cmp	r4, #4
 8015588:	d008      	beq.n	801559c <RadioSetRxConfig+0x5c>
 801558a:	2c00      	cmp	r4, #0
 801558c:	d07c      	beq.n	8015688 <RadioSetRxConfig+0x148>
}
 801558e:	b007      	add	sp, #28
 8015590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 8015594:	4ba3      	ldr	r3, [pc, #652]	; (8015824 <RadioSetRxConfig+0x2e4>)
 8015596:	22ff      	movs	r2, #255	; 0xff
 8015598:	701a      	strb	r2, [r3, #0]
 801559a:	e7f1      	b.n	8015580 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801559c:	2001      	movs	r0, #1
 801559e:	f000 fa93 	bl	8015ac8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80155a2:	4c9f      	ldr	r4, [pc, #636]	; (8015820 <RadioSetRxConfig+0x2e0>)
 80155a4:	2700      	movs	r7, #0
 80155a6:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80155aa:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80155ac:	2309      	movs	r3, #9
 80155ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80155b2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80155b6:	6423      	str	r3, [r4, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80155b8:	4630      	mov	r0, r6
 80155ba:	f000 ffa5 	bl	8016508 <SUBGRF_GetFskBandwidthRegValue>
 80155be:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80155c2:	73a7      	strb	r7, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80155c4:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80155c8:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80155cc:	74a7      	strb	r7, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80155ce:	2310      	movs	r3, #16
 80155d0:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80155d2:	7527      	strb	r7, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80155d4:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80155d6:	4b93      	ldr	r3, [pc, #588]	; (8015824 <RadioSetRxConfig+0x2e4>)
 80155d8:	781b      	ldrb	r3, [r3, #0]
 80155da:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80155dc:	2301      	movs	r3, #1
 80155de:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80155e0:	7627      	strb	r7, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80155e2:	2004      	movs	r0, #4
 80155e4:	f7ff fc10 	bl	8014e08 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80155e8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80155ec:	f000 fc38 	bl	8015e60 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80155f0:	f104 000e 	add.w	r0, r4, #14
 80155f4:	f000 fe04 	bl	8016200 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80155f8:	ab02      	add	r3, sp, #8
 80155fa:	4a8b      	ldr	r2, [pc, #556]	; (8015828 <RadioSetRxConfig+0x2e8>)
 80155fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015600:	e883 0003 	stmia.w	r3, {r0, r1}
 8015604:	4618      	mov	r0, r3
 8015606:	f000 fdc9 	bl	801619c <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801560a:	f240 10ff 	movw	r0, #511	; 0x1ff
 801560e:	f000 fd2b 	bl	8016068 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8015612:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8015616:	f7ff f8c9 	bl	80147ac <RadioRead>
            RadioWrite(0x8b8, modReg);
 801561a:	f000 01ef 	and.w	r1, r0, #239	; 0xef
 801561e:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8015622:	f7ff f8c7 	bl	80147b4 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8015626:	2104      	movs	r1, #4
 8015628:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801562c:	f7ff f8c2 	bl	80147b4 <RadioWrite>
            modReg= RadioRead(0x89b);
 8015630:	f640 009b 	movw	r0, #2203	; 0x89b
 8015634:	f7ff f8ba 	bl	80147ac <RadioRead>
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8015638:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 801563c:	f041 0108 	orr.w	r1, r1, #8
 8015640:	f640 009b 	movw	r0, #2203	; 0x89b
 8015644:	f7ff f8b6 	bl	80147b4 <RadioWrite>
            modReg= RadioRead(0x6d1);
 8015648:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801564c:	f7ff f8ae 	bl	80147ac <RadioRead>
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8015650:	f000 01e7 	and.w	r1, r0, #231	; 0xe7
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8015654:	f041 0118 	orr.w	r1, r1, #24
 8015658:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801565c:	f7ff f8aa 	bl	80147b4 <RadioWrite>
            modReg= RadioRead(0x6ac);
 8015660:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8015664:	f7ff f8a2 	bl	80147ac <RadioRead>
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8015668:	f000 018f 	and.w	r1, r0, #143	; 0x8f
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 801566c:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8015670:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8015674:	f7ff f89e 	bl	80147b4 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8015678:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 801567c:	fb03 fa0a 	mul.w	sl, r3, sl
 8015680:	fbba f5f5 	udiv	r5, sl, r5
 8015684:	60a5      	str	r5, [r4, #8]
            break;
 8015686:	e782      	b.n	801558e <RadioSetRxConfig+0x4e>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8015688:	2000      	movs	r0, #0
 801568a:	f000 fa1d 	bl	8015ac8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801568e:	4c64      	ldr	r4, [pc, #400]	; (8015820 <RadioSetRxConfig+0x2e0>)
 8015690:	f04f 0800 	mov.w	r8, #0
 8015694:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8015698:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801569a:	230b      	movs	r3, #11
 801569c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80156a0:	4630      	mov	r0, r6
 80156a2:	f000 ff31 	bl	8016508 <SUBGRF_GetFskBandwidthRegValue>
 80156a6:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80156aa:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80156ae:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80156b2:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80156b6:	2304      	movs	r3, #4
 80156b8:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80156ba:	2318      	movs	r3, #24
 80156bc:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80156be:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80156c2:	f087 0701 	eor.w	r7, r7, #1
 80156c6:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80156c8:	4b56      	ldr	r3, [pc, #344]	; (8015824 <RadioSetRxConfig+0x2e4>)
 80156ca:	781b      	ldrb	r3, [r3, #0]
 80156cc:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 80156ce:	f1bb 0f00 	cmp.w	fp, #0
 80156d2:	d02a      	beq.n	801572a <RadioSetRxConfig+0x1ea>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80156d4:	22f2      	movs	r2, #242	; 0xf2
 80156d6:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80156d8:	4c51      	ldr	r4, [pc, #324]	; (8015820 <RadioSetRxConfig+0x2e0>)
 80156da:	2301      	movs	r3, #1
 80156dc:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 80156de:	f7ff f8cf 	bl	8014880 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80156e2:	4626      	mov	r6, r4
 80156e4:	f816 0f38 	ldrb.w	r0, [r6, #56]!
 80156e8:	3800      	subs	r0, #0
 80156ea:	bf18      	it	ne
 80156ec:	2001      	movne	r0, #1
 80156ee:	f7ff fb8b 	bl	8014e08 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80156f2:	4630      	mov	r0, r6
 80156f4:	f000 fbb4 	bl	8015e60 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80156f8:	f104 000e 	add.w	r0, r4, #14
 80156fc:	f000 fd80 	bl	8016200 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8015700:	4a4a      	ldr	r2, [pc, #296]	; (801582c <RadioSetRxConfig+0x2ec>)
 8015702:	ab04      	add	r3, sp, #16
 8015704:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015708:	e883 0003 	stmia.w	r3, {r0, r1}
 801570c:	4618      	mov	r0, r3
 801570e:	f000 fd45 	bl	801619c <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8015712:	f240 10ff 	movw	r0, #511	; 0x1ff
 8015716:	f000 fca7 	bl	8016068 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801571a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 801571e:	fb03 fa0a 	mul.w	sl, r3, sl
 8015722:	fbba f5f5 	udiv	r5, sl, r5
 8015726:	60a5      	str	r5, [r4, #8]
            break;
 8015728:	e731      	b.n	801558e <RadioSetRxConfig+0x4e>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801572a:	4b3d      	ldr	r3, [pc, #244]	; (8015820 <RadioSetRxConfig+0x2e0>)
 801572c:	2201      	movs	r2, #1
 801572e:	75da      	strb	r2, [r3, #23]
 8015730:	e7d2      	b.n	80156d8 <RadioSetRxConfig+0x198>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8015732:	2000      	movs	r0, #0
 8015734:	f000 f9c8 	bl	8015ac8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8015738:	4a39      	ldr	r2, [pc, #228]	; (8015820 <RadioSetRxConfig+0x2e0>)
 801573a:	2301      	movs	r3, #1
 801573c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8015740:	b2eb      	uxtb	r3, r5
 8015742:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8015746:	493a      	ldr	r1, [pc, #232]	; (8015830 <RadioSetRxConfig+0x2f0>)
 8015748:	5d89      	ldrb	r1, [r1, r6]
 801574a:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801574e:	9901      	ldr	r1, [sp, #4]
 8015750:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8015754:	b91e      	cbnz	r6, 801575e <RadioSetRxConfig+0x21e>
 8015756:	f1a5 020b 	sub.w	r2, r5, #11
 801575a:	2a01      	cmp	r2, #1
 801575c:	d945      	bls.n	80157ea <RadioSetRxConfig+0x2aa>
 801575e:	2e01      	cmp	r6, #1
 8015760:	d041      	beq.n	80157e6 <RadioSetRxConfig+0x2a6>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8015762:	4a2f      	ldr	r2, [pc, #188]	; (8015820 <RadioSetRxConfig+0x2e0>)
 8015764:	2100      	movs	r1, #0
 8015766:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801576a:	4a2d      	ldr	r2, [pc, #180]	; (8015820 <RadioSetRxConfig+0x2e0>)
 801576c:	2101      	movs	r1, #1
 801576e:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8015770:	3b05      	subs	r3, #5
 8015772:	b2db      	uxtb	r3, r3
 8015774:	428b      	cmp	r3, r1
 8015776:	d93d      	bls.n	80157f4 <RadioSetRxConfig+0x2b4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8015778:	4b29      	ldr	r3, [pc, #164]	; (8015820 <RadioSetRxConfig+0x2e0>)
 801577a:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801577e:	4c28      	ldr	r4, [pc, #160]	; (8015820 <RadioSetRxConfig+0x2e0>)
 8015780:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8015782:	4b28      	ldr	r3, [pc, #160]	; (8015824 <RadioSetRxConfig+0x2e4>)
 8015784:	781b      	ldrb	r3, [r3, #0]
 8015786:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8015788:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801578c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8015790:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8015794:	f7ff f874 	bl	8014880 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8015798:	4625      	mov	r5, r4
 801579a:	f815 0f38 	ldrb.w	r0, [r5, #56]!
 801579e:	3800      	subs	r0, #0
 80157a0:	bf18      	it	ne
 80157a2:	2001      	movne	r0, #1
 80157a4:	f7ff fb30 	bl	8014e08 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80157a8:	4628      	mov	r0, r5
 80157aa:	f000 fb59 	bl	8015e60 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80157ae:	f104 000e 	add.w	r0, r4, #14
 80157b2:	f000 fd25 	bl	8016200 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80157b6:	fa5f f08a 	uxtb.w	r0, sl
 80157ba:	f000 fb17 	bl	8015dec <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80157be:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80157c2:	2b01      	cmp	r3, #1
 80157c4:	d021      	beq.n	801580a <RadioSetRxConfig+0x2ca>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80157c6:	f240 7036 	movw	r0, #1846	; 0x736
 80157ca:	f000 fbd1 	bl	8015f70 <SUBGRF_ReadRegister>
 80157ce:	f040 0104 	orr.w	r1, r0, #4
 80157d2:	b2c9      	uxtb	r1, r1
 80157d4:	f240 7036 	movw	r0, #1846	; 0x736
 80157d8:	f000 fada 	bl	8015d90 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80157dc:	4b10      	ldr	r3, [pc, #64]	; (8015820 <RadioSetRxConfig+0x2e0>)
 80157de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80157e2:	609a      	str	r2, [r3, #8]
}
 80157e4:	e6d3      	b.n	801558e <RadioSetRxConfig+0x4e>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80157e6:	2d0c      	cmp	r5, #12
 80157e8:	d1bb      	bne.n	8015762 <RadioSetRxConfig+0x222>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80157ea:	4a0d      	ldr	r2, [pc, #52]	; (8015820 <RadioSetRxConfig+0x2e0>)
 80157ec:	2101      	movs	r1, #1
 80157ee:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 80157f2:	e7ba      	b.n	801576a <RadioSetRxConfig+0x22a>
                if( preambleLen < 12 )
 80157f4:	f1b9 0f0b 	cmp.w	r9, #11
 80157f8:	d803      	bhi.n	8015802 <RadioSetRxConfig+0x2c2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80157fa:	4613      	mov	r3, r2
 80157fc:	220c      	movs	r2, #12
 80157fe:	839a      	strh	r2, [r3, #28]
 8015800:	e7bd      	b.n	801577e <RadioSetRxConfig+0x23e>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8015802:	4b07      	ldr	r3, [pc, #28]	; (8015820 <RadioSetRxConfig+0x2e0>)
 8015804:	f8a3 901c 	strh.w	r9, [r3, #28]
 8015808:	e7b9      	b.n	801577e <RadioSetRxConfig+0x23e>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 801580a:	f240 7036 	movw	r0, #1846	; 0x736
 801580e:	f000 fbaf 	bl	8015f70 <SUBGRF_ReadRegister>
 8015812:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8015816:	f240 7036 	movw	r0, #1846	; 0x736
 801581a:	f000 fab9 	bl	8015d90 <SUBGRF_WriteRegister>
 801581e:	e7dd      	b.n	80157dc <RadioSetRxConfig+0x29c>
 8015820:	20002504 	.word	0x20002504
 8015824:	200000d8 	.word	0x200000d8
 8015828:	08017564 	.word	0x08017564
 801582c:	0801755c 	.word	0x0801755c
 8015830:	08018314 	.word	0x08018314

08015834 <RadioRandom>:
{
 8015834:	b508      	push	{r3, lr}
    RadioSetModem( MODEM_LORA );
 8015836:	2001      	movs	r0, #1
 8015838:	f7ff fae6 	bl	8014e08 <RadioSetModem>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801583c:	2300      	movs	r3, #0
 801583e:	461a      	mov	r2, r3
 8015840:	4619      	mov	r1, r3
 8015842:	4618      	mov	r0, r3
 8015844:	f000 f9e3 	bl	8015c0e <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8015848:	f000 fd5c 	bl	8016304 <SUBGRF_GetRandom>
}
 801584c:	bd08      	pop	{r3, pc}

0801584e <RadioIsChannelFree>:
{
 801584e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015850:	b08b      	sub	sp, #44	; 0x2c
 8015852:	4604      	mov	r4, r0
 8015854:	460f      	mov	r7, r1
 8015856:	4616      	mov	r6, r2
 8015858:	461d      	mov	r5, r3
    RadioStandby( );
 801585a:	f7ff f811 	bl	8014880 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 801585e:	2000      	movs	r0, #0
 8015860:	f7ff fad2 	bl	8014e08 <RadioSetModem>
    RadioSetChannel( freq );
 8015864:	4620      	mov	r0, r4
 8015866:	f7ff f9b3 	bl	8014bd0 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801586a:	2301      	movs	r3, #1
 801586c:	9309      	str	r3, [sp, #36]	; 0x24
 801586e:	2400      	movs	r4, #0
 8015870:	9408      	str	r4, [sp, #32]
 8015872:	9407      	str	r4, [sp, #28]
 8015874:	9406      	str	r4, [sp, #24]
 8015876:	9405      	str	r4, [sp, #20]
 8015878:	9404      	str	r4, [sp, #16]
 801587a:	9403      	str	r4, [sp, #12]
 801587c:	9402      	str	r4, [sp, #8]
 801587e:	2303      	movs	r3, #3
 8015880:	9301      	str	r3, [sp, #4]
 8015882:	9700      	str	r7, [sp, #0]
 8015884:	4623      	mov	r3, r4
 8015886:	f44f 7216 	mov.w	r2, #600	; 0x258
 801588a:	4639      	mov	r1, r7
 801588c:	4620      	mov	r0, r4
 801588e:	f7ff fe57 	bl	8015540 <RadioSetRxConfig>
    RadioRx( 0 );
 8015892:	4620      	mov	r0, r4
 8015894:	f7ff f9b4 	bl	8014c00 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8015898:	f7ff f96c 	bl	8014b74 <RadioGetWakeupTime>
 801589c:	f7ec fd7a 	bl	8002394 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 80158a0:	f001 fa74 	bl	8016d8c <UTIL_TIMER_GetCurrentTime>
 80158a4:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80158a6:	4620      	mov	r0, r4
 80158a8:	f001 fa7a 	bl	8016da0 <UTIL_TIMER_GetElapsedTime>
 80158ac:	42a8      	cmp	r0, r5
 80158ae:	d206      	bcs.n	80158be <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 80158b0:	2000      	movs	r0, #0
 80158b2:	f7ff f96c 	bl	8014b8e <RadioRssi>
        if( rssi > rssiThresh )
 80158b6:	42b0      	cmp	r0, r6
 80158b8:	ddf5      	ble.n	80158a6 <RadioIsChannelFree+0x58>
            status = false;
 80158ba:	2400      	movs	r4, #0
 80158bc:	e000      	b.n	80158c0 <RadioIsChannelFree+0x72>
    bool status = true;
 80158be:	2401      	movs	r4, #1
    RadioStandby( );
 80158c0:	f7fe ffde 	bl	8014880 <RadioStandby>
}
 80158c4:	4620      	mov	r0, r4
 80158c6:	b00b      	add	sp, #44	; 0x2c
 80158c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080158cc <RadioInit>:
{
 80158cc:	b570      	push	{r4, r5, r6, lr}
 80158ce:	b082      	sub	sp, #8
    RadioEvents = events;
 80158d0:	4b1d      	ldr	r3, [pc, #116]	; (8015948 <RadioInit+0x7c>)
 80158d2:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 80158d4:	4b1d      	ldr	r3, [pc, #116]	; (801594c <RadioInit+0x80>)
 80158d6:	2400      	movs	r4, #0
 80158d8:	705c      	strb	r4, [r3, #1]
    SubgRf.TxTimeout = 0;
 80158da:	605c      	str	r4, [r3, #4]
    SubgRf.RxTimeout = 0;
 80158dc:	609c      	str	r4, [r3, #8]
    SUBGRF_Init( RadioOnDioIrq );
 80158de:	481c      	ldr	r0, [pc, #112]	; (8015950 <RadioInit+0x84>)
 80158e0:	f000 fb6a 	bl	8015fb8 <SUBGRF_Init>
    RadioSetPublicNetwork( false );
 80158e4:	4620      	mov	r0, r4
 80158e6:	f7ff fd31 	bl	801534c <RadioSetPublicNetwork>
    SUBGRF_SetRegulatorMode(  );
 80158ea:	f000 f8fa 	bl	8015ae2 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80158ee:	4621      	mov	r1, r4
 80158f0:	4620      	mov	r0, r4
 80158f2:	f000 f9f5 	bl	8015ce0 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 80158f6:	2204      	movs	r2, #4
 80158f8:	4621      	mov	r1, r4
 80158fa:	2001      	movs	r0, #1
 80158fc:	f000 fbcd 	bl	801609a <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8015900:	4623      	mov	r3, r4
 8015902:	4622      	mov	r2, r4
 8015904:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015908:	4608      	mov	r0, r1
 801590a:	f000 f980 	bl	8015c0e <SUBGRF_SetDioIrqParams>
    RadioSleep();
 801590e:	f7ff f9a9 	bl	8014c64 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8015912:	4e10      	ldr	r6, [pc, #64]	; (8015954 <RadioInit+0x88>)
 8015914:	9400      	str	r4, [sp, #0]
 8015916:	4b10      	ldr	r3, [pc, #64]	; (8015958 <RadioInit+0x8c>)
 8015918:	4622      	mov	r2, r4
 801591a:	f04f 31ff 	mov.w	r1, #4294967295
 801591e:	4630      	mov	r0, r6
 8015920:	f001 fa16 	bl	8016d50 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8015924:	4d0d      	ldr	r5, [pc, #52]	; (801595c <RadioInit+0x90>)
 8015926:	9400      	str	r4, [sp, #0]
 8015928:	4b0d      	ldr	r3, [pc, #52]	; (8015960 <RadioInit+0x94>)
 801592a:	4622      	mov	r2, r4
 801592c:	f04f 31ff 	mov.w	r1, #4294967295
 8015930:	4628      	mov	r0, r5
 8015932:	f001 fa0d 	bl	8016d50 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8015936:	4630      	mov	r0, r6
 8015938:	f001 fa68 	bl	8016e0c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801593c:	4628      	mov	r0, r5
 801593e:	f001 fa65 	bl	8016e0c <UTIL_TIMER_Stop>
}
 8015942:	b002      	add	sp, #8
 8015944:	bd70      	pop	{r4, r5, r6, pc}
 8015946:	bf00      	nop
 8015948:	20001578 	.word	0x20001578
 801594c:	20002504 	.word	0x20002504
 8015950:	08014b61 	.word	0x08014b61
 8015954:	2000255c 	.word	0x2000255c
 8015958:	080146a5 	.word	0x080146a5
 801595c:	20002574 	.word	0x20002574
 8015960:	080146c1 	.word	0x080146c1

08015964 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8015964:	b510      	push	{r4, lr}
 8015966:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015968:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801596c:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801596e:	460a      	mov	r2, r1
 8015970:	4601      	mov	r1, r0
 8015972:	4803      	ldr	r0, [pc, #12]	; (8015980 <SUBGRF_WriteCommand+0x1c>)
 8015974:	f7ef fe56 	bl	8005624 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015978:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 801597c:	bd10      	pop	{r4, pc}
 801597e:	bf00      	nop
 8015980:	200024e4 	.word	0x200024e4

08015984 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8015984:	b510      	push	{r4, lr}
 8015986:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015988:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801598c:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801598e:	460a      	mov	r2, r1
 8015990:	4601      	mov	r1, r0
 8015992:	4803      	ldr	r0, [pc, #12]	; (80159a0 <SUBGRF_ReadCommand+0x1c>)
 8015994:	f7ef fe9c 	bl	80056d0 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015998:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 801599c:	bd10      	pop	{r4, pc}
 801599e:	bf00      	nop
 80159a0:	200024e4 	.word	0x200024e4

080159a4 <SUBGRF_GetOperatingMode>:
}
 80159a4:	4b01      	ldr	r3, [pc, #4]	; (80159ac <SUBGRF_GetOperatingMode+0x8>)
 80159a6:	7818      	ldrb	r0, [r3, #0]
 80159a8:	4770      	bx	lr
 80159aa:	bf00      	nop
 80159ac:	20001582 	.word	0x20001582

080159b0 <SUBGRF_SetStandby>:
{
 80159b0:	b500      	push	{lr}
 80159b2:	b083      	sub	sp, #12
 80159b4:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80159b8:	2201      	movs	r2, #1
 80159ba:	f10d 0107 	add.w	r1, sp, #7
 80159be:	2080      	movs	r0, #128	; 0x80
 80159c0:	f7ff ffd0 	bl	8015964 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80159c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80159c8:	b92b      	cbnz	r3, 80159d6 <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 80159ca:	4b05      	ldr	r3, [pc, #20]	; (80159e0 <SUBGRF_SetStandby+0x30>)
 80159cc:	2201      	movs	r2, #1
 80159ce:	701a      	strb	r2, [r3, #0]
}
 80159d0:	b003      	add	sp, #12
 80159d2:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 80159d6:	4b02      	ldr	r3, [pc, #8]	; (80159e0 <SUBGRF_SetStandby+0x30>)
 80159d8:	2202      	movs	r2, #2
 80159da:	701a      	strb	r2, [r3, #0]
}
 80159dc:	e7f8      	b.n	80159d0 <SUBGRF_SetStandby+0x20>
 80159de:	bf00      	nop
 80159e0:	20001582 	.word	0x20001582

080159e4 <SUBGRF_SetTx>:
{
 80159e4:	b500      	push	{lr}
 80159e6:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 80159e8:	4b0a      	ldr	r3, [pc, #40]	; (8015a14 <SUBGRF_SetTx+0x30>)
 80159ea:	2204      	movs	r2, #4
 80159ec:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80159ee:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80159f2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80159f6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80159fa:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80159fe:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8015a02:	2203      	movs	r2, #3
 8015a04:	a901      	add	r1, sp, #4
 8015a06:	2083      	movs	r0, #131	; 0x83
 8015a08:	f7ff ffac 	bl	8015964 <SUBGRF_WriteCommand>
}
 8015a0c:	b003      	add	sp, #12
 8015a0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015a12:	bf00      	nop
 8015a14:	20001582 	.word	0x20001582

08015a18 <SUBGRF_SetRx>:
{
 8015a18:	b500      	push	{lr}
 8015a1a:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8015a1c:	4b0a      	ldr	r3, [pc, #40]	; (8015a48 <SUBGRF_SetRx+0x30>)
 8015a1e:	2205      	movs	r2, #5
 8015a20:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8015a22:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8015a26:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8015a2a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8015a2e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8015a32:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8015a36:	2203      	movs	r2, #3
 8015a38:	a901      	add	r1, sp, #4
 8015a3a:	2082      	movs	r0, #130	; 0x82
 8015a3c:	f7ff ff92 	bl	8015964 <SUBGRF_WriteCommand>
}
 8015a40:	b003      	add	sp, #12
 8015a42:	f85d fb04 	ldr.w	pc, [sp], #4
 8015a46:	bf00      	nop
 8015a48:	20001582 	.word	0x20001582

08015a4c <SUBGRF_SetRxDutyCycle>:
{
 8015a4c:	b500      	push	{lr}
 8015a4e:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8015a50:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8015a54:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8015a58:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8015a5c:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8015a60:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8015a64:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8015a68:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8015a6c:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8015a70:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8015a74:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8015a78:	2206      	movs	r2, #6
 8015a7a:	4669      	mov	r1, sp
 8015a7c:	2094      	movs	r0, #148	; 0x94
 8015a7e:	f7ff ff71 	bl	8015964 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8015a82:	4b03      	ldr	r3, [pc, #12]	; (8015a90 <SUBGRF_SetRxDutyCycle+0x44>)
 8015a84:	2206      	movs	r2, #6
 8015a86:	701a      	strb	r2, [r3, #0]
}
 8015a88:	b003      	add	sp, #12
 8015a8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8015a8e:	bf00      	nop
 8015a90:	20001582 	.word	0x20001582

08015a94 <SUBGRF_SetCad>:
{
 8015a94:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8015a96:	2200      	movs	r2, #0
 8015a98:	4611      	mov	r1, r2
 8015a9a:	20c5      	movs	r0, #197	; 0xc5
 8015a9c:	f7ff ff62 	bl	8015964 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8015aa0:	4b01      	ldr	r3, [pc, #4]	; (8015aa8 <SUBGRF_SetCad+0x14>)
 8015aa2:	2207      	movs	r2, #7
 8015aa4:	701a      	strb	r2, [r3, #0]
}
 8015aa6:	bd08      	pop	{r3, pc}
 8015aa8:	20001582 	.word	0x20001582

08015aac <SUBGRF_SetTxContinuousWave>:
{
 8015aac:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8015aae:	2200      	movs	r2, #0
 8015ab0:	4611      	mov	r1, r2
 8015ab2:	20d1      	movs	r0, #209	; 0xd1
 8015ab4:	f7ff ff56 	bl	8015964 <SUBGRF_WriteCommand>
}
 8015ab8:	bd08      	pop	{r3, pc}

08015aba <SUBGRF_SetTxInfinitePreamble>:
{
 8015aba:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8015abc:	2200      	movs	r2, #0
 8015abe:	4611      	mov	r1, r2
 8015ac0:	20d2      	movs	r0, #210	; 0xd2
 8015ac2:	f7ff ff4f 	bl	8015964 <SUBGRF_WriteCommand>
}
 8015ac6:	bd08      	pop	{r3, pc}

08015ac8 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8015ac8:	b500      	push	{lr}
 8015aca:	b083      	sub	sp, #12
 8015acc:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8015ad0:	2201      	movs	r2, #1
 8015ad2:	f10d 0107 	add.w	r1, sp, #7
 8015ad6:	209f      	movs	r0, #159	; 0x9f
 8015ad8:	f7ff ff44 	bl	8015964 <SUBGRF_WriteCommand>
}
 8015adc:	b003      	add	sp, #12
 8015ade:	f85d fb04 	ldr.w	pc, [sp], #4

08015ae2 <SUBGRF_SetRegulatorMode>:
{
 8015ae2:	b500      	push	{lr}
 8015ae4:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8015ae6:	f7ec f8f7 	bl	8001cd8 <RBI_IsDCDC>
 8015aea:	2801      	cmp	r0, #1
 8015aec:	d00b      	beq.n	8015b06 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8015aee:	2300      	movs	r3, #0
 8015af0:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8015af4:	2201      	movs	r2, #1
 8015af6:	f10d 0107 	add.w	r1, sp, #7
 8015afa:	2096      	movs	r0, #150	; 0x96
 8015afc:	f7ff ff32 	bl	8015964 <SUBGRF_WriteCommand>
}
 8015b00:	b003      	add	sp, #12
 8015b02:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8015b06:	2301      	movs	r3, #1
 8015b08:	f88d 3007 	strb.w	r3, [sp, #7]
 8015b0c:	e7f2      	b.n	8015af4 <SUBGRF_SetRegulatorMode+0x12>

08015b0e <SUBGRF_Calibrate>:
{
 8015b0e:	b500      	push	{lr}
 8015b10:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8015b12:	f3c0 1280 	ubfx	r2, r0, #6, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8015b16:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8015b1a:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8015b1c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8015b20:	f3c0 1200 	ubfx	r2, r0, #4, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8015b24:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8015b28:	f3c0 02c0 	ubfx	r2, r0, #3, #1
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8015b2c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8015b30:	f3c0 0280 	ubfx	r2, r0, #2, #1
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8015b34:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8015b38:	f3c0 0240 	ubfx	r2, r0, #1, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8015b3c:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8015b40:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8015b44:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8015b46:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8015b4a:	2201      	movs	r2, #1
 8015b4c:	f10d 0107 	add.w	r1, sp, #7
 8015b50:	2089      	movs	r0, #137	; 0x89
 8015b52:	f7ff ff07 	bl	8015964 <SUBGRF_WriteCommand>
}
 8015b56:	b003      	add	sp, #12
 8015b58:	f85d fb04 	ldr.w	pc, [sp], #4

08015b5c <SUBGRF_CalibrateImage>:
{
 8015b5c:	b500      	push	{lr}
 8015b5e:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8015b60:	4b1c      	ldr	r3, [pc, #112]	; (8015bd4 <SUBGRF_CalibrateImage+0x78>)
 8015b62:	4298      	cmp	r0, r3
 8015b64:	d90d      	bls.n	8015b82 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 8015b66:	23e1      	movs	r3, #225	; 0xe1
 8015b68:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8015b6c:	23e9      	movs	r3, #233	; 0xe9
 8015b6e:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8015b72:	2202      	movs	r2, #2
 8015b74:	a901      	add	r1, sp, #4
 8015b76:	2098      	movs	r0, #152	; 0x98
 8015b78:	f7ff fef4 	bl	8015964 <SUBGRF_WriteCommand>
}
 8015b7c:	b003      	add	sp, #12
 8015b7e:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 8015b82:	4b15      	ldr	r3, [pc, #84]	; (8015bd8 <SUBGRF_CalibrateImage+0x7c>)
 8015b84:	4298      	cmp	r0, r3
 8015b86:	d906      	bls.n	8015b96 <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8015b88:	23d7      	movs	r3, #215	; 0xd7
 8015b8a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8015b8e:	23db      	movs	r3, #219	; 0xdb
 8015b90:	f88d 3005 	strb.w	r3, [sp, #5]
 8015b94:	e7ed      	b.n	8015b72 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 8015b96:	4b11      	ldr	r3, [pc, #68]	; (8015bdc <SUBGRF_CalibrateImage+0x80>)
 8015b98:	4298      	cmp	r0, r3
 8015b9a:	d906      	bls.n	8015baa <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8015b9c:	23c1      	movs	r3, #193	; 0xc1
 8015b9e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 8015ba2:	23c5      	movs	r3, #197	; 0xc5
 8015ba4:	f88d 3005 	strb.w	r3, [sp, #5]
 8015ba8:	e7e3      	b.n	8015b72 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 8015baa:	4b0d      	ldr	r3, [pc, #52]	; (8015be0 <SUBGRF_CalibrateImage+0x84>)
 8015bac:	4298      	cmp	r0, r3
 8015bae:	d906      	bls.n	8015bbe <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8015bb0:	2375      	movs	r3, #117	; 0x75
 8015bb2:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 8015bb6:	2381      	movs	r3, #129	; 0x81
 8015bb8:	f88d 3005 	strb.w	r3, [sp, #5]
 8015bbc:	e7d9      	b.n	8015b72 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 8015bbe:	4b09      	ldr	r3, [pc, #36]	; (8015be4 <SUBGRF_CalibrateImage+0x88>)
 8015bc0:	4298      	cmp	r0, r3
 8015bc2:	d9d6      	bls.n	8015b72 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 8015bc4:	236b      	movs	r3, #107	; 0x6b
 8015bc6:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8015bca:	236f      	movs	r3, #111	; 0x6f
 8015bcc:	f88d 3005 	strb.w	r3, [sp, #5]
 8015bd0:	e7cf      	b.n	8015b72 <SUBGRF_CalibrateImage+0x16>
 8015bd2:	bf00      	nop
 8015bd4:	35a4e900 	.word	0x35a4e900
 8015bd8:	32a9f880 	.word	0x32a9f880
 8015bdc:	2de54480 	.word	0x2de54480
 8015be0:	1b6b0b00 	.word	0x1b6b0b00
 8015be4:	1954fc40 	.word	0x1954fc40

08015be8 <SUBGRF_SetPaConfig>:
{
 8015be8:	b500      	push	{lr}
 8015bea:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8015bec:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8015bf0:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8015bf4:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8015bf8:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8015bfc:	2204      	movs	r2, #4
 8015bfe:	eb0d 0102 	add.w	r1, sp, r2
 8015c02:	2095      	movs	r0, #149	; 0x95
 8015c04:	f7ff feae 	bl	8015964 <SUBGRF_WriteCommand>
}
 8015c08:	b003      	add	sp, #12
 8015c0a:	f85d fb04 	ldr.w	pc, [sp], #4

08015c0e <SUBGRF_SetDioIrqParams>:
{
 8015c0e:	b510      	push	{r4, lr}
 8015c10:	b082      	sub	sp, #8
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8015c12:	0a04      	lsrs	r4, r0, #8
 8015c14:	f88d 4000 	strb.w	r4, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8015c18:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8015c1c:	0a08      	lsrs	r0, r1, #8
 8015c1e:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8015c22:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8015c26:	0a11      	lsrs	r1, r2, #8
 8015c28:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8015c2c:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8015c30:	0a1a      	lsrs	r2, r3, #8
 8015c32:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8015c36:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8015c3a:	2208      	movs	r2, #8
 8015c3c:	4669      	mov	r1, sp
 8015c3e:	4610      	mov	r0, r2
 8015c40:	f7ff fe90 	bl	8015964 <SUBGRF_WriteCommand>
}
 8015c44:	b002      	add	sp, #8
 8015c46:	bd10      	pop	{r4, pc}

08015c48 <SUBGRF_SetTcxoMode>:
{
 8015c48:	b500      	push	{lr}
 8015c4a:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8015c4c:	f000 0007 	and.w	r0, r0, #7
 8015c50:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8015c54:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8015c58:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8015c5c:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8015c60:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8015c64:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8015c68:	2204      	movs	r2, #4
 8015c6a:	eb0d 0102 	add.w	r1, sp, r2
 8015c6e:	2097      	movs	r0, #151	; 0x97
 8015c70:	f7ff fe78 	bl	8015964 <SUBGRF_WriteCommand>
}
 8015c74:	b003      	add	sp, #12
 8015c76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015c7c <SUBGRF_SetRfFrequency>:
{
 8015c7c:	b510      	push	{r4, lr}
 8015c7e:	b082      	sub	sp, #8
 8015c80:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8015c82:	4b12      	ldr	r3, [pc, #72]	; (8015ccc <SUBGRF_SetRfFrequency+0x50>)
 8015c84:	781b      	ldrb	r3, [r3, #0]
 8015c86:	b1d3      	cbz	r3, 8015cbe <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8015c88:	4a11      	ldr	r2, [pc, #68]	; (8015cd0 <SUBGRF_SetRfFrequency+0x54>)
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	0660      	lsls	r0, r4, #25
 8015c8e:	09e1      	lsrs	r1, r4, #7
 8015c90:	f7ea fdf4 	bl	800087c <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8015c94:	0e03      	lsrs	r3, r0, #24
 8015c96:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8015c9a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8015c9e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8015ca2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8015ca6:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8015caa:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8015cae:	2204      	movs	r2, #4
 8015cb0:	eb0d 0102 	add.w	r1, sp, r2
 8015cb4:	2086      	movs	r0, #134	; 0x86
 8015cb6:	f7ff fe55 	bl	8015964 <SUBGRF_WriteCommand>
}
 8015cba:	b002      	add	sp, #8
 8015cbc:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8015cbe:	f7ff ff4d 	bl	8015b5c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8015cc2:	4b02      	ldr	r3, [pc, #8]	; (8015ccc <SUBGRF_SetRfFrequency+0x50>)
 8015cc4:	2201      	movs	r2, #1
 8015cc6:	701a      	strb	r2, [r3, #0]
 8015cc8:	e7de      	b.n	8015c88 <SUBGRF_SetRfFrequency+0xc>
 8015cca:	bf00      	nop
 8015ccc:	20001580 	.word	0x20001580
 8015cd0:	01e84800 	.word	0x01e84800

08015cd4 <SUBGRF_GetPacketType>:
}
 8015cd4:	4b01      	ldr	r3, [pc, #4]	; (8015cdc <SUBGRF_GetPacketType+0x8>)
 8015cd6:	7818      	ldrb	r0, [r3, #0]
 8015cd8:	4770      	bx	lr
 8015cda:	bf00      	nop
 8015cdc:	20001583 	.word	0x20001583

08015ce0 <SUBGRF_SetBufferBaseAddress>:
{
 8015ce0:	b500      	push	{lr}
 8015ce2:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8015ce4:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8015ce8:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8015cec:	2202      	movs	r2, #2
 8015cee:	a901      	add	r1, sp, #4
 8015cf0:	208f      	movs	r0, #143	; 0x8f
 8015cf2:	f7ff fe37 	bl	8015964 <SUBGRF_WriteCommand>
}
 8015cf6:	b003      	add	sp, #12
 8015cf8:	f85d fb04 	ldr.w	pc, [sp], #4

08015cfc <SUBGRF_GetRssiInst>:
{
 8015cfc:	b500      	push	{lr}
 8015cfe:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8015d00:	2201      	movs	r2, #1
 8015d02:	a901      	add	r1, sp, #4
 8015d04:	2015      	movs	r0, #21
 8015d06:	f7ff fe3d 	bl	8015984 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8015d0a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8015d0e:	4240      	negs	r0, r0
}
 8015d10:	1040      	asrs	r0, r0, #1
 8015d12:	b003      	add	sp, #12
 8015d14:	f85d fb04 	ldr.w	pc, [sp], #4

08015d18 <SUBGRF_GetPacketStatus>:
{
 8015d18:	b510      	push	{r4, lr}
 8015d1a:	b082      	sub	sp, #8
 8015d1c:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8015d1e:	2203      	movs	r2, #3
 8015d20:	a901      	add	r1, sp, #4
 8015d22:	2014      	movs	r0, #20
 8015d24:	f7ff fe2e 	bl	8015984 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8015d28:	f7ff ffd4 	bl	8015cd4 <SUBGRF_GetPacketType>
 8015d2c:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8015d2e:	b148      	cbz	r0, 8015d44 <SUBGRF_GetPacketStatus+0x2c>
 8015d30:	2801      	cmp	r0, #1
 8015d32:	d018      	beq.n	8015d66 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8015d34:	2214      	movs	r2, #20
 8015d36:	2100      	movs	r1, #0
 8015d38:	4620      	mov	r0, r4
 8015d3a:	f000 fe4b 	bl	80169d4 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8015d3e:	230f      	movs	r3, #15
 8015d40:	7023      	strb	r3, [r4, #0]
}
 8015d42:	e00e      	b.n	8015d62 <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8015d44:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8015d48:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8015d4a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8015d4e:	425b      	negs	r3, r3
 8015d50:	105b      	asrs	r3, r3, #1
 8015d52:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8015d54:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8015d58:	425b      	negs	r3, r3
 8015d5a:	105b      	asrs	r3, r3, #1
 8015d5c:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8015d5e:	2300      	movs	r3, #0
 8015d60:	60a3      	str	r3, [r4, #8]
}
 8015d62:	b002      	add	sp, #8
 8015d64:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8015d66:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8015d6a:	425b      	negs	r3, r3
 8015d6c:	105b      	asrs	r3, r3, #1
 8015d6e:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8015d70:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8015d74:	3302      	adds	r3, #2
 8015d76:	109b      	asrs	r3, r3, #2
 8015d78:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8015d7a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8015d7e:	425b      	negs	r3, r3
 8015d80:	105b      	asrs	r3, r3, #1
 8015d82:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8015d84:	4b01      	ldr	r3, [pc, #4]	; (8015d8c <SUBGRF_GetPacketStatus+0x74>)
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	6123      	str	r3, [r4, #16]
            break;
 8015d8a:	e7ea      	b.n	8015d62 <SUBGRF_GetPacketStatus+0x4a>
 8015d8c:	2000157c 	.word	0x2000157c

08015d90 <SUBGRF_WriteRegister>:
{
 8015d90:	b500      	push	{lr}
 8015d92:	b083      	sub	sp, #12
 8015d94:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8015d98:	2301      	movs	r3, #1
 8015d9a:	f10d 0207 	add.w	r2, sp, #7
 8015d9e:	4601      	mov	r1, r0
 8015da0:	4802      	ldr	r0, [pc, #8]	; (8015dac <SUBGRF_WriteRegister+0x1c>)
 8015da2:	f7ef fb9b 	bl	80054dc <HAL_SUBGHZ_WriteRegisters>
}
 8015da6:	b003      	add	sp, #12
 8015da8:	f85d fb04 	ldr.w	pc, [sp], #4
 8015dac:	200024e4 	.word	0x200024e4

08015db0 <SUBGRF_SetRxBoosted>:
{
 8015db0:	b510      	push	{r4, lr}
 8015db2:	b082      	sub	sp, #8
 8015db4:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8015db6:	4b0c      	ldr	r3, [pc, #48]	; (8015de8 <SUBGRF_SetRxBoosted+0x38>)
 8015db8:	2205      	movs	r2, #5
 8015dba:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8015dbc:	2197      	movs	r1, #151	; 0x97
 8015dbe:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8015dc2:	f7ff ffe5 	bl	8015d90 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8015dc6:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8015dca:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8015dce:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8015dd2:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8015dd6:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8015dda:	2203      	movs	r2, #3
 8015ddc:	a901      	add	r1, sp, #4
 8015dde:	2082      	movs	r0, #130	; 0x82
 8015de0:	f7ff fdc0 	bl	8015964 <SUBGRF_WriteCommand>
}
 8015de4:	b002      	add	sp, #8
 8015de6:	bd10      	pop	{r4, pc}
 8015de8:	20001582 	.word	0x20001582

08015dec <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8015dec:	b500      	push	{lr}
 8015dee:	b083      	sub	sp, #12
 8015df0:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8015df4:	2201      	movs	r2, #1
 8015df6:	f10d 0107 	add.w	r1, sp, #7
 8015dfa:	20a0      	movs	r0, #160	; 0xa0
 8015dfc:	f7ff fdb2 	bl	8015964 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8015e00:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015e04:	2b3f      	cmp	r3, #63	; 0x3f
 8015e06:	d90f      	bls.n	8015e28 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8015e08:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8015e0a:	2200      	movs	r2, #0
        while( mant > 31 )
 8015e0c:	2b1f      	cmp	r3, #31
 8015e0e:	d903      	bls.n	8015e18 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
            mant >>= 2;
 8015e10:	089b      	lsrs	r3, r3, #2
            exp++;
 8015e12:	1c51      	adds	r1, r2, #1
 8015e14:	b2ca      	uxtb	r2, r1
 8015e16:	e7f9      	b.n	8015e0c <SUBGRF_SetLoRaSymbNumTimeout+0x20>
        reg = exp + ( mant << 3 );
 8015e18:	00d9      	lsls	r1, r3, #3
 8015e1a:	b2c9      	uxtb	r1, r1
 8015e1c:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8015e1e:	b2c9      	uxtb	r1, r1
 8015e20:	f240 7006 	movw	r0, #1798	; 0x706
 8015e24:	f7ff ffb4 	bl	8015d90 <SUBGRF_WriteRegister>
}
 8015e28:	b003      	add	sp, #12
 8015e2a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015e30 <SUBGRF_SetPacketType>:
{
 8015e30:	b500      	push	{lr}
 8015e32:	b083      	sub	sp, #12
 8015e34:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8015e38:	4b08      	ldr	r3, [pc, #32]	; (8015e5c <SUBGRF_SetPacketType+0x2c>)
 8015e3a:	7018      	strb	r0, [r3, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8015e3c:	b140      	cbz	r0, 8015e50 <SUBGRF_SetPacketType+0x20>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8015e3e:	2201      	movs	r2, #1
 8015e40:	f10d 0107 	add.w	r1, sp, #7
 8015e44:	208a      	movs	r0, #138	; 0x8a
 8015e46:	f7ff fd8d 	bl	8015964 <SUBGRF_WriteCommand>
}
 8015e4a:	b003      	add	sp, #12
 8015e4c:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8015e50:	2100      	movs	r1, #0
 8015e52:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8015e56:	f7ff ff9b 	bl	8015d90 <SUBGRF_WriteRegister>
 8015e5a:	e7f0      	b.n	8015e3e <SUBGRF_SetPacketType+0xe>
 8015e5c:	20001583 	.word	0x20001583

08015e60 <SUBGRF_SetModulationParams>:
{
 8015e60:	b510      	push	{r4, lr}
 8015e62:	b082      	sub	sp, #8
 8015e64:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8015e66:	4b3e      	ldr	r3, [pc, #248]	; (8015f60 <SUBGRF_SetModulationParams+0x100>)
 8015e68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015e6c:	ab02      	add	r3, sp, #8
 8015e6e:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8015e72:	7820      	ldrb	r0, [r4, #0]
 8015e74:	4b3b      	ldr	r3, [pc, #236]	; (8015f64 <SUBGRF_SetModulationParams+0x104>)
 8015e76:	781b      	ldrb	r3, [r3, #0]
 8015e78:	4298      	cmp	r0, r3
 8015e7a:	d106      	bne.n	8015e8a <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 8015e7c:	7823      	ldrb	r3, [r4, #0]
 8015e7e:	2b03      	cmp	r3, #3
 8015e80:	d82c      	bhi.n	8015edc <SUBGRF_SetModulationParams+0x7c>
 8015e82:	e8df f003 	tbb	[pc, r3]
 8015e86:	4205      	.short	0x4205
 8015e88:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8015e8a:	f7ff ffd1 	bl	8015e30 <SUBGRF_SetPacketType>
 8015e8e:	e7f5      	b.n	8015e7c <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8015e90:	6862      	ldr	r2, [r4, #4]
 8015e92:	4b35      	ldr	r3, [pc, #212]	; (8015f68 <SUBGRF_SetModulationParams+0x108>)
 8015e94:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8015e98:	0c1a      	lsrs	r2, r3, #16
 8015e9a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8015e9e:	0a1a      	lsrs	r2, r3, #8
 8015ea0:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8015ea4:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8015ea8:	7b23      	ldrb	r3, [r4, #12]
 8015eaa:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8015eae:	7b63      	ldrb	r3, [r4, #13]
 8015eb0:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8015eb4:	68a1      	ldr	r1, [r4, #8]
 8015eb6:	4a2d      	ldr	r2, [pc, #180]	; (8015f6c <SUBGRF_SetModulationParams+0x10c>)
 8015eb8:	2300      	movs	r3, #0
 8015eba:	0648      	lsls	r0, r1, #25
 8015ebc:	09c9      	lsrs	r1, r1, #7
 8015ebe:	f7ea fcdd 	bl	800087c <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8015ec2:	0c03      	lsrs	r3, r0, #16
 8015ec4:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8015ec8:	0a03      	lsrs	r3, r0, #8
 8015eca:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8015ece:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8015ed2:	2208      	movs	r2, #8
 8015ed4:	4669      	mov	r1, sp
 8015ed6:	208b      	movs	r0, #139	; 0x8b
 8015ed8:	f7ff fd44 	bl	8015964 <SUBGRF_WriteCommand>
}
 8015edc:	b002      	add	sp, #8
 8015ede:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8015ee0:	6922      	ldr	r2, [r4, #16]
 8015ee2:	4b21      	ldr	r3, [pc, #132]	; (8015f68 <SUBGRF_SetModulationParams+0x108>)
 8015ee4:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8015ee8:	0c1a      	lsrs	r2, r3, #16
 8015eea:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8015eee:	0a1a      	lsrs	r2, r3, #8
 8015ef0:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8015ef4:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8015ef8:	7d23      	ldrb	r3, [r4, #20]
 8015efa:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8015efe:	2204      	movs	r2, #4
 8015f00:	4669      	mov	r1, sp
 8015f02:	208b      	movs	r0, #139	; 0x8b
 8015f04:	f7ff fd2e 	bl	8015964 <SUBGRF_WriteCommand>
        break;
 8015f08:	e7e8      	b.n	8015edc <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8015f0a:	7e23      	ldrb	r3, [r4, #24]
 8015f0c:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8015f10:	7e63      	ldrb	r3, [r4, #25]
 8015f12:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8015f16:	7ea3      	ldrb	r3, [r4, #26]
 8015f18:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8015f1c:	7ee3      	ldrb	r3, [r4, #27]
 8015f1e:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8015f22:	2204      	movs	r2, #4
 8015f24:	4669      	mov	r1, sp
 8015f26:	208b      	movs	r0, #139	; 0x8b
 8015f28:	f7ff fd1c 	bl	8015964 <SUBGRF_WriteCommand>
        break;
 8015f2c:	e7d6      	b.n	8015edc <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8015f2e:	6862      	ldr	r2, [r4, #4]
 8015f30:	4b0d      	ldr	r3, [pc, #52]	; (8015f68 <SUBGRF_SetModulationParams+0x108>)
 8015f32:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8015f36:	0c1a      	lsrs	r2, r3, #16
 8015f38:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8015f3c:	0a1a      	lsrs	r2, r3, #8
 8015f3e:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8015f42:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8015f46:	7b23      	ldrb	r3, [r4, #12]
 8015f48:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8015f4c:	7b63      	ldrb	r3, [r4, #13]
 8015f4e:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8015f52:	2205      	movs	r2, #5
 8015f54:	4669      	mov	r1, sp
 8015f56:	208b      	movs	r0, #139	; 0x8b
 8015f58:	f7ff fd04 	bl	8015964 <SUBGRF_WriteCommand>
}
 8015f5c:	e7be      	b.n	8015edc <SUBGRF_SetModulationParams+0x7c>
 8015f5e:	bf00      	nop
 8015f60:	0801756c 	.word	0x0801756c
 8015f64:	20001583 	.word	0x20001583
 8015f68:	3d090000 	.word	0x3d090000
 8015f6c:	01e84800 	.word	0x01e84800

08015f70 <SUBGRF_ReadRegister>:
{
 8015f70:	b500      	push	{lr}
 8015f72:	b083      	sub	sp, #12
 8015f74:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8015f76:	2301      	movs	r3, #1
 8015f78:	f10d 0207 	add.w	r2, sp, #7
 8015f7c:	4803      	ldr	r0, [pc, #12]	; (8015f8c <SUBGRF_ReadRegister+0x1c>)
 8015f7e:	f7ef fafd 	bl	800557c <HAL_SUBGHZ_ReadRegisters>
}
 8015f82:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8015f86:	b003      	add	sp, #12
 8015f88:	f85d fb04 	ldr.w	pc, [sp], #4
 8015f8c:	200024e4 	.word	0x200024e4

08015f90 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8015f90:	b510      	push	{r4, lr}
 8015f92:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8015f94:	f7eb fea0 	bl	8001cd8 <RBI_IsDCDC>
 8015f98:	2801      	cmp	r0, #1
 8015f9a:	d000      	beq.n	8015f9e <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8015f9c:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8015f9e:	f640 1023 	movw	r0, #2339	; 0x923
 8015fa2:	f7ff ffe5 	bl	8015f70 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 8015fa6:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8015faa:	4321      	orrs	r1, r4
 8015fac:	f640 1023 	movw	r0, #2339	; 0x923
 8015fb0:	f7ff feee 	bl	8015d90 <SUBGRF_WriteRegister>
}
 8015fb4:	e7f2      	b.n	8015f9c <Radio_SMPS_Set+0xc>
	...

08015fb8 <SUBGRF_Init>:
{
 8015fb8:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 8015fba:	b108      	cbz	r0, 8015fc0 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8015fbc:	4a16      	ldr	r2, [pc, #88]	; (8016018 <SUBGRF_Init+0x60>)
 8015fbe:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 8015fc0:	f7ec f948 	bl	8002254 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8015fc4:	2002      	movs	r0, #2
 8015fc6:	f7ff ffe3 	bl	8015f90 <Radio_SMPS_Set>
    ImageCalibrated = false;
 8015fca:	2000      	movs	r0, #0
 8015fcc:	4b13      	ldr	r3, [pc, #76]	; (801601c <SUBGRF_Init+0x64>)
 8015fce:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8015fd0:	f7ff fcee 	bl	80159b0 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8015fd4:	f7eb fe7e 	bl	8001cd4 <RBI_IsTCXO>
 8015fd8:	2801      	cmp	r0, #1
 8015fda:	d00f      	beq.n	8015ffc <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8015fdc:	2120      	movs	r1, #32
 8015fde:	f640 1011 	movw	r0, #2321	; 0x911
 8015fe2:	f7ff fed5 	bl	8015d90 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8015fe6:	2120      	movs	r1, #32
 8015fe8:	f640 1012 	movw	r0, #2322	; 0x912
 8015fec:	f7ff fed0 	bl	8015d90 <SUBGRF_WriteRegister>
    RBI_Init();
 8015ff0:	f7eb fdda 	bl	8001ba8 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8015ff4:	4b0a      	ldr	r3, [pc, #40]	; (8016020 <SUBGRF_Init+0x68>)
 8015ff6:	2201      	movs	r2, #1
 8015ff8:	701a      	strb	r2, [r3, #0]
}
 8015ffa:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8015ffc:	2140      	movs	r1, #64	; 0x40
 8015ffe:	f7ff fe23 	bl	8015c48 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8016002:	2100      	movs	r1, #0
 8016004:	f640 1011 	movw	r0, #2321	; 0x911
 8016008:	f7ff fec2 	bl	8015d90 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 801600c:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8016010:	f7ff fd7d 	bl	8015b0e <SUBGRF_Calibrate>
 8016014:	e7ec      	b.n	8015ff0 <SUBGRF_Init+0x38>
 8016016:	bf00      	nop
 8016018:	20001584 	.word	0x20001584
 801601c:	20001580 	.word	0x20001580
 8016020:	20001582 	.word	0x20001582

08016024 <SUBGRF_SetSleep>:
{
 8016024:	b510      	push	{r4, lr}
 8016026:	b082      	sub	sp, #8
 8016028:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801602a:	2000      	movs	r0, #0
 801602c:	f7eb fdf2 	bl	8001c14 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8016030:	2002      	movs	r0, #2
 8016032:	f7ff ffad 	bl	8015f90 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8016036:	f3c4 0080 	ubfx	r0, r4, #2, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801603a:	f3c4 0340 	ubfx	r3, r4, #1, #1
 801603e:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8016040:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8016044:	f004 0001 	and.w	r0, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8016048:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801604a:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801604e:	2201      	movs	r2, #1
 8016050:	f10d 0107 	add.w	r1, sp, #7
 8016054:	2084      	movs	r0, #132	; 0x84
 8016056:	f7ff fc85 	bl	8015964 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801605a:	4b02      	ldr	r3, [pc, #8]	; (8016064 <SUBGRF_SetSleep+0x40>)
 801605c:	2200      	movs	r2, #0
 801605e:	701a      	strb	r2, [r3, #0]
}
 8016060:	b002      	add	sp, #8
 8016062:	bd10      	pop	{r4, pc}
 8016064:	20001582 	.word	0x20001582

08016068 <SUBGRF_SetWhiteningSeed>:
{
 8016068:	b510      	push	{r4, lr}
 801606a:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 801606c:	f7ff fe32 	bl	8015cd4 <SUBGRF_GetPacketType>
 8016070:	b100      	cbz	r0, 8016074 <SUBGRF_SetWhiteningSeed+0xc>
}
 8016072:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8016074:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8016078:	f7ff ff7a 	bl	8015f70 <SUBGRF_ReadRegister>
 801607c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8016080:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8016084:	4301      	orrs	r1, r0
 8016086:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801608a:	f7ff fe81 	bl	8015d90 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801608e:	b2e1      	uxtb	r1, r4
 8016090:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8016094:	f7ff fe7c 	bl	8015d90 <SUBGRF_WriteRegister>
}
 8016098:	e7eb      	b.n	8016072 <SUBGRF_SetWhiteningSeed+0xa>

0801609a <SUBGRF_SetTxParams>:
{
 801609a:	b530      	push	{r4, r5, lr}
 801609c:	b083      	sub	sp, #12
 801609e:	460c      	mov	r4, r1
 80160a0:	4615      	mov	r5, r2
    if( paSelect == RFO_LP )
 80160a2:	2801      	cmp	r0, #1
 80160a4:	d127      	bne.n	80160f6 <SUBGRF_SetTxParams+0x5c>
        if( power == 15 )
 80160a6:	290f      	cmp	r1, #15
 80160a8:	d00d      	beq.n	80160c6 <SUBGRF_SetTxParams+0x2c>
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 80160aa:	2301      	movs	r3, #1
 80160ac:	461a      	mov	r2, r3
 80160ae:	2100      	movs	r1, #0
 80160b0:	2004      	movs	r0, #4
 80160b2:	f7ff fd99 	bl	8015be8 <SUBGRF_SetPaConfig>
        if( power >= 14 )
 80160b6:	2c0d      	cmp	r4, #13
 80160b8:	dc0c      	bgt.n	80160d4 <SUBGRF_SetTxParams+0x3a>
        else if( power < -17 )
 80160ba:	f114 0f11 	cmn.w	r4, #17
 80160be:	da0a      	bge.n	80160d6 <SUBGRF_SetTxParams+0x3c>
            power = -17;
 80160c0:	f06f 0410 	mvn.w	r4, #16
 80160c4:	e007      	b.n	80160d6 <SUBGRF_SetTxParams+0x3c>
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 80160c6:	2301      	movs	r3, #1
 80160c8:	461a      	mov	r2, r3
 80160ca:	2100      	movs	r1, #0
 80160cc:	2006      	movs	r0, #6
 80160ce:	f7ff fd8b 	bl	8015be8 <SUBGRF_SetPaConfig>
 80160d2:	e7f0      	b.n	80160b6 <SUBGRF_SetTxParams+0x1c>
            power = 14;
 80160d4:	240e      	movs	r4, #14
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 80160d6:	2118      	movs	r1, #24
 80160d8:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80160dc:	f7ff fe58 	bl	8015d90 <SUBGRF_WriteRegister>
    buf[0] = power;
 80160e0:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = ( uint8_t )rampTime;
 80160e4:	f88d 5005 	strb.w	r5, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 80160e8:	2202      	movs	r2, #2
 80160ea:	a901      	add	r1, sp, #4
 80160ec:	208e      	movs	r0, #142	; 0x8e
 80160ee:	f7ff fc39 	bl	8015964 <SUBGRF_WriteCommand>
}
 80160f2:	b003      	add	sp, #12
 80160f4:	bd30      	pop	{r4, r5, pc}
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 80160f6:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80160fa:	f7ff ff39 	bl	8015f70 <SUBGRF_ReadRegister>
 80160fe:	f040 011e 	orr.w	r1, r0, #30
 8016102:	b2c9      	uxtb	r1, r1
 8016104:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8016108:	f7ff fe42 	bl	8015d90 <SUBGRF_WriteRegister>
        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 801610c:	2301      	movs	r3, #1
 801610e:	2200      	movs	r2, #0
 8016110:	2107      	movs	r1, #7
 8016112:	2004      	movs	r0, #4
 8016114:	f7ff fd68 	bl	8015be8 <SUBGRF_SetPaConfig>
        if( power > 22 )
 8016118:	2c16      	cmp	r4, #22
 801611a:	dc05      	bgt.n	8016128 <SUBGRF_SetTxParams+0x8e>
        else if( power < -9 )
 801611c:	f114 0f09 	cmn.w	r4, #9
 8016120:	da03      	bge.n	801612a <SUBGRF_SetTxParams+0x90>
            power = -9;
 8016122:	f06f 0408 	mvn.w	r4, #8
 8016126:	e000      	b.n	801612a <SUBGRF_SetTxParams+0x90>
            power = 22;
 8016128:	2416      	movs	r4, #22
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 801612a:	2138      	movs	r1, #56	; 0x38
 801612c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8016130:	f7ff fe2e 	bl	8015d90 <SUBGRF_WriteRegister>
 8016134:	e7d4      	b.n	80160e0 <SUBGRF_SetTxParams+0x46>
	...

08016138 <SUBGRF_GetRxBufferStatus>:
{
 8016138:	b530      	push	{r4, r5, lr}
 801613a:	b083      	sub	sp, #12
 801613c:	4605      	mov	r5, r0
 801613e:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8016140:	2202      	movs	r2, #2
 8016142:	a901      	add	r1, sp, #4
 8016144:	2013      	movs	r0, #19
 8016146:	f7ff fc1d 	bl	8015984 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801614a:	f7ff fdc3 	bl	8015cd4 <SUBGRF_GetPacketType>
 801614e:	2801      	cmp	r0, #1
 8016150:	d007      	beq.n	8016162 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8016152:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8016156:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8016158:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801615c:	7023      	strb	r3, [r4, #0]
}
 801615e:	b003      	add	sp, #12
 8016160:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8016162:	4b05      	ldr	r3, [pc, #20]	; (8016178 <SUBGRF_GetRxBufferStatus+0x40>)
 8016164:	781b      	ldrb	r3, [r3, #0]
 8016166:	b2db      	uxtb	r3, r3
 8016168:	2b01      	cmp	r3, #1
 801616a:	d1f2      	bne.n	8016152 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801616c:	f240 7002 	movw	r0, #1794	; 0x702
 8016170:	f7ff fefe 	bl	8015f70 <SUBGRF_ReadRegister>
 8016174:	7028      	strb	r0, [r5, #0]
 8016176:	e7ef      	b.n	8016158 <SUBGRF_GetRxBufferStatus+0x20>
 8016178:	20001581 	.word	0x20001581

0801617c <SUBGRF_WriteRegisters>:
{
 801617c:	b510      	push	{r4, lr}
 801617e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016180:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016184:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8016186:	460a      	mov	r2, r1
 8016188:	4601      	mov	r1, r0
 801618a:	4803      	ldr	r0, [pc, #12]	; (8016198 <SUBGRF_WriteRegisters+0x1c>)
 801618c:	f7ef f9a6 	bl	80054dc <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016190:	f384 8810 	msr	PRIMASK, r4
}
 8016194:	bd10      	pop	{r4, pc}
 8016196:	bf00      	nop
 8016198:	200024e4 	.word	0x200024e4

0801619c <SUBGRF_SetSyncWord>:
{
 801619c:	b508      	push	{r3, lr}
 801619e:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80161a0:	2208      	movs	r2, #8
 80161a2:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80161a6:	f7ff ffe9 	bl	801617c <SUBGRF_WriteRegisters>
}
 80161aa:	2000      	movs	r0, #0
 80161ac:	bd08      	pop	{r3, pc}

080161ae <SUBGRF_SetCrcSeed>:
{
 80161ae:	b500      	push	{lr}
 80161b0:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80161b2:	0a03      	lsrs	r3, r0, #8
 80161b4:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80161b8:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 80161bc:	f7ff fd8a 	bl	8015cd4 <SUBGRF_GetPacketType>
 80161c0:	b110      	cbz	r0, 80161c8 <SUBGRF_SetCrcSeed+0x1a>
}
 80161c2:	b003      	add	sp, #12
 80161c4:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80161c8:	2202      	movs	r2, #2
 80161ca:	a901      	add	r1, sp, #4
 80161cc:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80161d0:	f7ff ffd4 	bl	801617c <SUBGRF_WriteRegisters>
}
 80161d4:	e7f5      	b.n	80161c2 <SUBGRF_SetCrcSeed+0x14>

080161d6 <SUBGRF_SetCrcPolynomial>:
{
 80161d6:	b500      	push	{lr}
 80161d8:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80161da:	0a03      	lsrs	r3, r0, #8
 80161dc:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80161e0:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 80161e4:	f7ff fd76 	bl	8015cd4 <SUBGRF_GetPacketType>
 80161e8:	b110      	cbz	r0, 80161f0 <SUBGRF_SetCrcPolynomial+0x1a>
}
 80161ea:	b003      	add	sp, #12
 80161ec:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80161f0:	2202      	movs	r2, #2
 80161f2:	a901      	add	r1, sp, #4
 80161f4:	f240 60be 	movw	r0, #1726	; 0x6be
 80161f8:	f7ff ffc0 	bl	801617c <SUBGRF_WriteRegisters>
}
 80161fc:	e7f5      	b.n	80161ea <SUBGRF_SetCrcPolynomial+0x14>
	...

08016200 <SUBGRF_SetPacketParams>:
{
 8016200:	b510      	push	{r4, lr}
 8016202:	b084      	sub	sp, #16
 8016204:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8016206:	ab01      	add	r3, sp, #4
 8016208:	4a33      	ldr	r2, [pc, #204]	; (80162d8 <SUBGRF_SetPacketParams+0xd8>)
 801620a:	ca07      	ldmia	r2, {r0, r1, r2}
 801620c:	c303      	stmia	r3!, {r0, r1}
 801620e:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8016210:	7820      	ldrb	r0, [r4, #0]
 8016212:	4b32      	ldr	r3, [pc, #200]	; (80162dc <SUBGRF_SetPacketParams+0xdc>)
 8016214:	781b      	ldrb	r3, [r3, #0]
 8016216:	4298      	cmp	r0, r3
 8016218:	d106      	bne.n	8016228 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 801621a:	7823      	ldrb	r3, [r4, #0]
 801621c:	2b03      	cmp	r3, #3
 801621e:	d82a      	bhi.n	8016276 <SUBGRF_SetPacketParams+0x76>
 8016220:	e8df f003 	tbb	[pc, r3]
 8016224:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8016228:	f7ff fe02 	bl	8015e30 <SUBGRF_SetPacketType>
 801622c:	e7f5      	b.n	801621a <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801622e:	7a63      	ldrb	r3, [r4, #9]
 8016230:	2bf1      	cmp	r3, #241	; 0xf1
 8016232:	d022      	beq.n	801627a <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8016234:	2bf2      	cmp	r3, #242	; 0xf2
 8016236:	d02a      	beq.n	801628e <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8016238:	8862      	ldrh	r2, [r4, #2]
 801623a:	0a11      	lsrs	r1, r2, #8
 801623c:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8016240:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8016244:	7922      	ldrb	r2, [r4, #4]
 8016246:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801624a:	7962      	ldrb	r2, [r4, #5]
 801624c:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8016250:	79a2      	ldrb	r2, [r4, #6]
 8016252:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8016256:	79e2      	ldrb	r2, [r4, #7]
 8016258:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801625c:	7a22      	ldrb	r2, [r4, #8]
 801625e:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8016262:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8016266:	7aa3      	ldrb	r3, [r4, #10]
 8016268:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 801626c:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801626e:	a901      	add	r1, sp, #4
 8016270:	208c      	movs	r0, #140	; 0x8c
 8016272:	f7ff fb77 	bl	8015964 <SUBGRF_WriteCommand>
}
 8016276:	b004      	add	sp, #16
 8016278:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801627a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801627e:	f7ff ff96 	bl	80161ae <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8016282:	f248 0005 	movw	r0, #32773	; 0x8005
 8016286:	f7ff ffa6 	bl	80161d6 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801628a:	2302      	movs	r3, #2
 801628c:	e7d4      	b.n	8016238 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801628e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8016292:	f7ff ff8c 	bl	80161ae <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8016296:	f241 0021 	movw	r0, #4129	; 0x1021
 801629a:	f7ff ff9c 	bl	80161d6 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801629e:	2306      	movs	r3, #6
 80162a0:	e7ca      	b.n	8016238 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80162a2:	7b23      	ldrb	r3, [r4, #12]
 80162a4:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 80162a8:	2201      	movs	r2, #1
        break;
 80162aa:	e7e0      	b.n	801626e <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80162ac:	89e3      	ldrh	r3, [r4, #14]
 80162ae:	0a1a      	lsrs	r2, r3, #8
 80162b0:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80162b4:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80162b8:	7c23      	ldrb	r3, [r4, #16]
 80162ba:	4a09      	ldr	r2, [pc, #36]	; (80162e0 <SUBGRF_SetPacketParams+0xe0>)
 80162bc:	7013      	strb	r3, [r2, #0]
 80162be:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80162c2:	7c63      	ldrb	r3, [r4, #17]
 80162c4:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80162c8:	7ca3      	ldrb	r3, [r4, #18]
 80162ca:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80162ce:	7ce3      	ldrb	r3, [r4, #19]
 80162d0:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 80162d4:	2206      	movs	r2, #6
        break;
 80162d6:	e7ca      	b.n	801626e <SUBGRF_SetPacketParams+0x6e>
 80162d8:	08017574 	.word	0x08017574
 80162dc:	20001583 	.word	0x20001583
 80162e0:	20001581 	.word	0x20001581

080162e4 <SUBGRF_ReadRegisters>:
{
 80162e4:	b510      	push	{r4, lr}
 80162e6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80162e8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80162ec:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80162ee:	460a      	mov	r2, r1
 80162f0:	4601      	mov	r1, r0
 80162f2:	4803      	ldr	r0, [pc, #12]	; (8016300 <SUBGRF_ReadRegisters+0x1c>)
 80162f4:	f7ef f942 	bl	800557c <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80162f8:	f384 8810 	msr	PRIMASK, r4
}
 80162fc:	bd10      	pop	{r4, pc}
 80162fe:	bf00      	nop
 8016300:	200024e4 	.word	0x200024e4

08016304 <SUBGRF_GetRandom>:
{
 8016304:	b570      	push	{r4, r5, r6, lr}
 8016306:	b082      	sub	sp, #8
    uint32_t number = 0;
 8016308:	2600      	movs	r6, #0
 801630a:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801630c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8016310:	f7ff fe2e 	bl	8015f70 <SUBGRF_ReadRegister>
 8016314:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8016316:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 801631a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801631e:	f7ff fd37 	bl	8015d90 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8016322:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8016326:	f7ff fe23 	bl	8015f70 <SUBGRF_ReadRegister>
 801632a:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801632c:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8016330:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8016334:	f7ff fd2c 	bl	8015d90 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8016338:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801633c:	f7ff fb6c 	bl	8015a18 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8016340:	2204      	movs	r2, #4
 8016342:	eb0d 0102 	add.w	r1, sp, r2
 8016346:	f640 0019 	movw	r0, #2073	; 0x819
 801634a:	f7ff ffcb 	bl	80162e4 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 801634e:	4630      	mov	r0, r6
 8016350:	f7ff fb2e 	bl	80159b0 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8016354:	4629      	mov	r1, r5
 8016356:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801635a:	f7ff fd19 	bl	8015d90 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801635e:	4621      	mov	r1, r4
 8016360:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8016364:	f7ff fd14 	bl	8015d90 <SUBGRF_WriteRegister>
}
 8016368:	9801      	ldr	r0, [sp, #4]
 801636a:	b002      	add	sp, #8
 801636c:	bd70      	pop	{r4, r5, r6, pc}
	...

08016370 <SUBGRF_WriteBuffer>:
{
 8016370:	b510      	push	{r4, lr}
 8016372:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016374:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016378:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801637a:	460a      	mov	r2, r1
 801637c:	4601      	mov	r1, r0
 801637e:	4803      	ldr	r0, [pc, #12]	; (801638c <SUBGRF_WriteBuffer+0x1c>)
 8016380:	f7ef fa52 	bl	8005828 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016384:	f384 8810 	msr	PRIMASK, r4
}
 8016388:	bd10      	pop	{r4, pc}
 801638a:	bf00      	nop
 801638c:	200024e4 	.word	0x200024e4

08016390 <SUBGRF_SetPayload>:
{
 8016390:	b508      	push	{r3, lr}
 8016392:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8016394:	4601      	mov	r1, r0
 8016396:	2000      	movs	r0, #0
 8016398:	f7ff ffea 	bl	8016370 <SUBGRF_WriteBuffer>
}
 801639c:	bd08      	pop	{r3, pc}

0801639e <SUBGRF_SendPayload>:
{
 801639e:	b510      	push	{r4, lr}
 80163a0:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 80163a2:	f7ff fff5 	bl	8016390 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80163a6:	4620      	mov	r0, r4
 80163a8:	f7ff fb1c 	bl	80159e4 <SUBGRF_SetTx>
}
 80163ac:	bd10      	pop	{r4, pc}
	...

080163b0 <SUBGRF_ReadBuffer>:
{
 80163b0:	b510      	push	{r4, lr}
 80163b2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80163b4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80163b8:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80163ba:	460a      	mov	r2, r1
 80163bc:	4601      	mov	r1, r0
 80163be:	4803      	ldr	r0, [pc, #12]	; (80163cc <SUBGRF_ReadBuffer+0x1c>)
 80163c0:	f7ef fa7c 	bl	80058bc <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80163c4:	f384 8810 	msr	PRIMASK, r4
}
 80163c8:	bd10      	pop	{r4, pc}
 80163ca:	bf00      	nop
 80163cc:	200024e4 	.word	0x200024e4

080163d0 <SUBGRF_GetPayload>:
{
 80163d0:	b570      	push	{r4, r5, r6, lr}
 80163d2:	b082      	sub	sp, #8
 80163d4:	4606      	mov	r6, r0
 80163d6:	460c      	mov	r4, r1
 80163d8:	4615      	mov	r5, r2
    uint8_t offset = 0;
 80163da:	2300      	movs	r3, #0
 80163dc:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 80163e0:	f10d 0107 	add.w	r1, sp, #7
 80163e4:	4620      	mov	r0, r4
 80163e6:	f7ff fea7 	bl	8016138 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80163ea:	7822      	ldrb	r2, [r4, #0]
 80163ec:	42aa      	cmp	r2, r5
 80163ee:	d902      	bls.n	80163f6 <SUBGRF_GetPayload+0x26>
        return 1;
 80163f0:	2001      	movs	r0, #1
}
 80163f2:	b002      	add	sp, #8
 80163f4:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80163f6:	4631      	mov	r1, r6
 80163f8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80163fc:	f7ff ffd8 	bl	80163b0 <SUBGRF_ReadBuffer>
    return 0;
 8016400:	2000      	movs	r0, #0
 8016402:	e7f6      	b.n	80163f2 <SUBGRF_GetPayload+0x22>

08016404 <SUBGRF_SetSwitch>:
{
 8016404:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8016406:	2901      	cmp	r1, #1
 8016408:	d003      	beq.n	8016412 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801640a:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 801640c:	f7eb fc02 	bl	8001c14 <RBI_ConfigRFSwitch>
}
 8016410:	bd10      	pop	{r4, pc}
 8016412:	4604      	mov	r4, r0
 8016414:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8016416:	2c01      	cmp	r4, #1
 8016418:	d003      	beq.n	8016422 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 801641a:	2c02      	cmp	r4, #2
 801641c:	d1f6      	bne.n	801640c <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 801641e:	2003      	movs	r0, #3
 8016420:	e7f4      	b.n	801640c <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8016422:	2004      	movs	r0, #4
 8016424:	f7ff fdb4 	bl	8015f90 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8016428:	2002      	movs	r0, #2
 801642a:	e7f6      	b.n	801641a <SUBGRF_SetSwitch+0x16>

0801642c <SUBGRF_SetRfTxPower>:
{
 801642c:	b538      	push	{r3, r4, r5, lr}
 801642e:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8016430:	f7eb fc4e 	bl	8001cd0 <RBI_GetTxConfig>
    switch (TxConfig)
 8016434:	b148      	cbz	r0, 801644a <SUBGRF_SetRfTxPower+0x1e>
 8016436:	2802      	cmp	r0, #2
 8016438:	d10d      	bne.n	8016456 <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 801643a:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801643c:	2202      	movs	r2, #2
 801643e:	4621      	mov	r1, r4
 8016440:	4628      	mov	r0, r5
 8016442:	f7ff fe2a 	bl	801609a <SUBGRF_SetTxParams>
}
 8016446:	4628      	mov	r0, r5
 8016448:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 801644a:	2c0f      	cmp	r4, #15
 801644c:	dc01      	bgt.n	8016452 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 801644e:	2501      	movs	r5, #1
 8016450:	e7f4      	b.n	801643c <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8016452:	2502      	movs	r5, #2
 8016454:	e7f2      	b.n	801643c <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8016456:	2501      	movs	r5, #1
 8016458:	e7f0      	b.n	801643c <SUBGRF_SetRfTxPower+0x10>

0801645a <SUBGRF_GetRadioWakeUpTime>:
}
 801645a:	2001      	movs	r0, #1
 801645c:	4770      	bx	lr
	...

08016460 <HAL_SUBGHZ_TxCpltCallback>:
{
 8016460:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8016462:	4b02      	ldr	r3, [pc, #8]	; (801646c <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	2001      	movs	r0, #1
 8016468:	4798      	blx	r3
}
 801646a:	bd08      	pop	{r3, pc}
 801646c:	20001584 	.word	0x20001584

08016470 <HAL_SUBGHZ_RxCpltCallback>:
{
 8016470:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8016472:	4b02      	ldr	r3, [pc, #8]	; (801647c <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	2002      	movs	r0, #2
 8016478:	4798      	blx	r3
}
 801647a:	bd08      	pop	{r3, pc}
 801647c:	20001584 	.word	0x20001584

08016480 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8016480:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8016482:	4b02      	ldr	r3, [pc, #8]	; (801648c <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	2040      	movs	r0, #64	; 0x40
 8016488:	4798      	blx	r3
}
 801648a:	bd08      	pop	{r3, pc}
 801648c:	20001584 	.word	0x20001584

08016490 <HAL_SUBGHZ_CADStatusCallback>:
{
 8016490:	b508      	push	{r3, lr}
    switch (cadstatus)
 8016492:	b111      	cbz	r1, 801649a <HAL_SUBGHZ_CADStatusCallback+0xa>
 8016494:	2901      	cmp	r1, #1
 8016496:	d005      	beq.n	80164a4 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8016498:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801649a:	4b05      	ldr	r3, [pc, #20]	; (80164b0 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	2080      	movs	r0, #128	; 0x80
 80164a0:	4798      	blx	r3
            break;
 80164a2:	e7f9      	b.n	8016498 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80164a4:	4b02      	ldr	r3, [pc, #8]	; (80164b0 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80164ac:	4798      	blx	r3
}
 80164ae:	e7f3      	b.n	8016498 <HAL_SUBGHZ_CADStatusCallback+0x8>
 80164b0:	20001584 	.word	0x20001584

080164b4 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 80164b4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80164b6:	4b03      	ldr	r3, [pc, #12]	; (80164c4 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80164be:	4798      	blx	r3
}
 80164c0:	bd08      	pop	{r3, pc}
 80164c2:	bf00      	nop
 80164c4:	20001584 	.word	0x20001584

080164c8 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 80164c8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80164ca:	4b02      	ldr	r3, [pc, #8]	; (80164d4 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	2020      	movs	r0, #32
 80164d0:	4798      	blx	r3
}
 80164d2:	bd08      	pop	{r3, pc}
 80164d4:	20001584 	.word	0x20001584

080164d8 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 80164d8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80164da:	4b02      	ldr	r3, [pc, #8]	; (80164e4 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	2004      	movs	r0, #4
 80164e0:	4798      	blx	r3
}
 80164e2:	bd08      	pop	{r3, pc}
 80164e4:	20001584 	.word	0x20001584

080164e8 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 80164e8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80164ea:	4b02      	ldr	r3, [pc, #8]	; (80164f4 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	2008      	movs	r0, #8
 80164f0:	4798      	blx	r3
}
 80164f2:	bd08      	pop	{r3, pc}
 80164f4:	20001584 	.word	0x20001584

080164f8 <HAL_SUBGHZ_HeaderValidCallback>:
{
 80164f8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80164fa:	4b02      	ldr	r3, [pc, #8]	; (8016504 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	2010      	movs	r0, #16
 8016500:	4798      	blx	r3
}
 8016502:	bd08      	pop	{r3, pc}
 8016504:	20001584 	.word	0x20001584

08016508 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8016508:	b1a0      	cbz	r0, 8016534 <SUBGRF_GetFskBandwidthRegValue+0x2c>
{
 801650a:	b410      	push	{r4}
 801650c:	4604      	mov	r4, r0
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801650e:	2300      	movs	r3, #0
 8016510:	2b15      	cmp	r3, #21
 8016512:	d80e      	bhi.n	8016532 <SUBGRF_GetFskBandwidthRegValue+0x2a>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8016514:	4619      	mov	r1, r3
 8016516:	4a08      	ldr	r2, [pc, #32]	; (8016538 <SUBGRF_GetFskBandwidthRegValue+0x30>)
 8016518:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801651c:	42a2      	cmp	r2, r4
 801651e:	d802      	bhi.n	8016526 <SUBGRF_GetFskBandwidthRegValue+0x1e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8016520:	3301      	adds	r3, #1
 8016522:	b2db      	uxtb	r3, r3
 8016524:	e7f4      	b.n	8016510 <SUBGRF_GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
 8016526:	4b04      	ldr	r3, [pc, #16]	; (8016538 <SUBGRF_GetFskBandwidthRegValue+0x30>)
 8016528:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801652c:	7918      	ldrb	r0, [r3, #4]
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
}
 801652e:	bc10      	pop	{r4}
 8016530:	4770      	bx	lr
    while( 1 );
 8016532:	e7fe      	b.n	8016532 <SUBGRF_GetFskBandwidthRegValue+0x2a>
        return( 0x1F );
 8016534:	201f      	movs	r0, #31
}
 8016536:	4770      	bx	lr
 8016538:	0801839c 	.word	0x0801839c

0801653c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801653c:	b570      	push	{r4, r5, r6, lr}
 801653e:	b082      	sub	sp, #8
 8016540:	4604      	mov	r4, r0
 8016542:	460d      	mov	r5, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8016544:	4b1d      	ldr	r3, [pc, #116]	; (80165bc <SUBGRF_GetCFO+0x80>)
 8016546:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 8016548:	f640 0007 	movw	r0, #2055	; 0x807
 801654c:	f7ff fd10 	bl	8015f70 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8016550:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8016554:	aa02      	add	r2, sp, #8
 8016556:	4413      	add	r3, r2
 8016558:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 801655c:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8016560:	3b01      	subs	r3, #1
 8016562:	fa02 f003 	lsl.w	r0, r2, r3
 8016566:	4b16      	ldr	r3, [pc, #88]	; (80165c0 <SUBGRF_GetCFO+0x84>)
 8016568:	fbb3 f3f0 	udiv	r3, r3, r0
  uint32_t cf_osr = cf_fs / bitRate;
 801656c:	fbb3 f0f4 	udiv	r0, r3, r4
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8016570:	2807      	cmp	r0, #7
 8016572:	d921      	bls.n	80165b8 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8016574:	2401      	movs	r4, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8016576:	fb00 f004 	mul.w	r0, r0, r4
 801657a:	2803      	cmp	r0, #3
 801657c:	d800      	bhi.n	8016580 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 801657e:	2404      	movs	r4, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8016580:	fb03 f404 	mul.w	r4, r3, r4
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8016584:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8016588:	f7ff fcf2 	bl	8015f70 <SUBGRF_ReadRegister>
 801658c:	0200      	lsls	r0, r0, #8
 801658e:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 8016592:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8016596:	f7ff fceb 	bl	8015f70 <SUBGRF_ReadRegister>
 801659a:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801659c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80165a0:	d003      	beq.n	80165aa <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 80165a2:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 80165a6:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80165aa:	0963      	lsrs	r3, r4, #5
 80165ac:	fb03 f300 	mul.w	r3, r3, r0
 80165b0:	11db      	asrs	r3, r3, #7
 80165b2:	602b      	str	r3, [r5, #0]
}
 80165b4:	b002      	add	sp, #8
 80165b6:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 80165b8:	2402      	movs	r4, #2
 80165ba:	e7dc      	b.n	8016576 <SUBGRF_GetCFO+0x3a>
 80165bc:	0c0a0804 	.word	0x0c0a0804
 80165c0:	01e84800 	.word	0x01e84800

080165c4 <RFW_TransmitLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 80165c4:	f04f 30ff 	mov.w	r0, #4294967295
 80165c8:	4770      	bx	lr

080165ca <RFW_ReceiveLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 80165ca:	f04f 30ff 	mov.w	r0, #4294967295
 80165ce:	4770      	bx	lr

080165d0 <RFW_Init>:
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
#endif
}
 80165d0:	f04f 30ff 	mov.w	r0, #4294967295
 80165d4:	4770      	bx	lr

080165d6 <RFW_DeInit>:
void RFW_DeInit( void)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 80165d6:	4770      	bx	lr

080165d8 <RFW_Is_Init>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
#endif
}
 80165d8:	2000      	movs	r0, #0
 80165da:	4770      	bx	lr

080165dc <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
#endif
}
 80165dc:	2000      	movs	r0, #0
 80165de:	4770      	bx	lr

080165e0 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 80165e0:	4770      	bx	lr

080165e2 <RFW_TransmitInit>:
    
    status= 0;
  }
#endif
  return status;
}
 80165e2:	f04f 30ff 	mov.w	r0, #4294967295
 80165e6:	4770      	bx	lr

080165e8 <RFW_ReceiveInit>:
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
#endif
}
 80165e8:	f04f 30ff 	mov.w	r0, #4294967295
 80165ec:	4770      	bx	lr

080165ee <RFW_DeInit_TxLongPacket>:
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 80165ee:	4770      	bx	lr

080165f0 <RFW_ReceivePayload>:
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 80165f0:	4770      	bx	lr

080165f2 <RFW_SetRadioModem>:
void RFW_SetRadioModem(RadioModems_t Modem)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 80165f2:	4770      	bx	lr

080165f4 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 80165f4:	b470      	push	{r4, r5, r6}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80165f6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80165fa:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 80165fc:	4b1b      	ldr	r3, [pc, #108]	; (801666c <TRACE_AllocateBufer+0x78>)
 80165fe:	8a5c      	ldrh	r4, [r3, #18]
 8016600:	8a1a      	ldrh	r2, [r3, #16]
 8016602:	4294      	cmp	r4, r2
 8016604:	d010      	beq.n	8016628 <TRACE_AllocateBufer+0x34>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8016606:	4294      	cmp	r4, r2
 8016608:	d91d      	bls.n	8016646 <TRACE_AllocateBufer+0x52>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801660a:	f5c4 6380 	rsb	r3, r4, #1024	; 0x400
 801660e:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8016610:	4283      	cmp	r3, r0
 8016612:	d81a      	bhi.n	801664a <TRACE_AllocateBufer+0x56>
 8016614:	4282      	cmp	r2, r0
 8016616:	d918      	bls.n	801664a <TRACE_AllocateBufer+0x56>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8016618:	4b14      	ldr	r3, [pc, #80]	; (801666c <TRACE_AllocateBufer+0x78>)
 801661a:	2601      	movs	r6, #1
 801661c:	709e      	strb	r6, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801661e:	801c      	strh	r4, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8016620:	2400      	movs	r4, #0
 8016622:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8016624:	4613      	mov	r3, r2
 8016626:	e010      	b.n	801664a <TRACE_AllocateBufer+0x56>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8016628:	f5c4 6380 	rsb	r3, r4, #1024	; 0x400
 801662c:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801662e:	4298      	cmp	r0, r3
 8016630:	d30b      	bcc.n	801664a <TRACE_AllocateBufer+0x56>
 8016632:	4282      	cmp	r2, r0
 8016634:	d909      	bls.n	801664a <TRACE_AllocateBufer+0x56>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8016636:	4b0d      	ldr	r3, [pc, #52]	; (801666c <TRACE_AllocateBufer+0x78>)
 8016638:	2601      	movs	r6, #1
 801663a:	709e      	strb	r6, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801663c:	801c      	strh	r4, [r3, #0]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801663e:	2400      	movs	r4, #0
 8016640:	825c      	strh	r4, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8016642:	4613      	mov	r3, r2
 8016644:	e001      	b.n	801664a <TRACE_AllocateBufer+0x56>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8016646:	1b13      	subs	r3, r2, r4
 8016648:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801664a:	4283      	cmp	r3, r0
 801664c:	d90b      	bls.n	8016666 <TRACE_AllocateBufer+0x72>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801664e:	4a07      	ldr	r2, [pc, #28]	; (801666c <TRACE_AllocateBufer+0x78>)
 8016650:	8a53      	ldrh	r3, [r2, #18]
 8016652:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8016654:	4403      	add	r3, r0
 8016656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801665a:	8253      	strh	r3, [r2, #18]
    ret = 0;
 801665c:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801665e:	f385 8810 	msr	PRIMASK, r5
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8016662:	bc70      	pop	{r4, r5, r6}
 8016664:	4770      	bx	lr
  int16_t ret = -1;
 8016666:	f04f 30ff 	mov.w	r0, #4294967295
 801666a:	e7f8      	b.n	801665e <TRACE_AllocateBufer+0x6a>
 801666c:	20001988 	.word	0x20001988

08016670 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016670:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016674:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8016676:	4a03      	ldr	r2, [pc, #12]	; (8016684 <TRACE_Lock+0x14>)
 8016678:	8ad3      	ldrh	r3, [r2, #22]
 801667a:	3301      	adds	r3, #1
 801667c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801667e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8016682:	4770      	bx	lr
 8016684:	20001988 	.word	0x20001988

08016688 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016688:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801668c:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 801668e:	4a03      	ldr	r2, [pc, #12]	; (801669c <TRACE_UnLock+0x14>)
 8016690:	8ad3      	ldrh	r3, [r2, #22]
 8016692:	3b01      	subs	r3, #1
 8016694:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016696:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801669a:	4770      	bx	lr
 801669c:	20001988 	.word	0x20001988

080166a0 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 80166a0:	4b02      	ldr	r3, [pc, #8]	; (80166ac <TRACE_IsLocked+0xc>)
 80166a2:	8ad8      	ldrh	r0, [r3, #22]
}
 80166a4:	3800      	subs	r0, #0
 80166a6:	bf18      	it	ne
 80166a8:	2001      	movne	r0, #1
 80166aa:	4770      	bx	lr
 80166ac:	20001988 	.word	0x20001988

080166b0 <UTIL_ADV_TRACE_Init>:
{
 80166b0:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 80166b2:	2218      	movs	r2, #24
 80166b4:	2100      	movs	r1, #0
 80166b6:	4807      	ldr	r0, [pc, #28]	; (80166d4 <UTIL_ADV_TRACE_Init+0x24>)
 80166b8:	f000 f98c 	bl	80169d4 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 80166bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80166c0:	2100      	movs	r1, #0
 80166c2:	4805      	ldr	r0, [pc, #20]	; (80166d8 <UTIL_ADV_TRACE_Init+0x28>)
 80166c4:	f000 f986 	bl	80169d4 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 80166c8:	4b04      	ldr	r3, [pc, #16]	; (80166dc <UTIL_ADV_TRACE_Init+0x2c>)
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	4804      	ldr	r0, [pc, #16]	; (80166e0 <UTIL_ADV_TRACE_Init+0x30>)
 80166ce:	4798      	blx	r3
}
 80166d0:	bd08      	pop	{r3, pc}
 80166d2:	bf00      	nop
 80166d4:	20001988 	.word	0x20001988
 80166d8:	20001588 	.word	0x20001588
 80166dc:	08017880 	.word	0x08017880
 80166e0:	08016861 	.word	0x08016861

080166e4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 80166e4:	4b01      	ldr	r3, [pc, #4]	; (80166ec <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 80166e6:	6058      	str	r0, [r3, #4]
}
 80166e8:	4770      	bx	lr
 80166ea:	bf00      	nop
 80166ec:	20001988 	.word	0x20001988

080166f0 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 80166f0:	4b01      	ldr	r3, [pc, #4]	; (80166f8 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 80166f2:	7218      	strb	r0, [r3, #8]
}
 80166f4:	4770      	bx	lr
 80166f6:	bf00      	nop
 80166f8:	20001988 	.word	0x20001988

080166fc <TRACE_Send>:
{
 80166fc:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80166fe:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016702:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8016704:	f7ff ffcc 	bl	80166a0 <TRACE_IsLocked>
 8016708:	b118      	cbz	r0, 8016712 <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801670a:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801670e:	2000      	movs	r0, #0
}
 8016710:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8016712:	f7ff ffad 	bl	8016670 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8016716:	4b1d      	ldr	r3, [pc, #116]	; (801678c <TRACE_Send+0x90>)
 8016718:	8a1a      	ldrh	r2, [r3, #16]
 801671a:	8a5b      	ldrh	r3, [r3, #18]
 801671c:	429a      	cmp	r2, r3
 801671e:	d02e      	beq.n	801677e <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8016720:	491a      	ldr	r1, [pc, #104]	; (801678c <TRACE_Send+0x90>)
 8016722:	7889      	ldrb	r1, [r1, #2]
 8016724:	2901      	cmp	r1, #1
 8016726:	d017      	beq.n	8016758 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8016728:	4a18      	ldr	r2, [pc, #96]	; (801678c <TRACE_Send+0x90>)
 801672a:	7892      	ldrb	r2, [r2, #2]
 801672c:	b932      	cbnz	r2, 801673c <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801672e:	4a17      	ldr	r2, [pc, #92]	; (801678c <TRACE_Send+0x90>)
 8016730:	8a12      	ldrh	r2, [r2, #16]
 8016732:	4293      	cmp	r3, r2
 8016734:	d91e      	bls.n	8016774 <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8016736:	1a9b      	subs	r3, r3, r2
 8016738:	4a14      	ldr	r2, [pc, #80]	; (801678c <TRACE_Send+0x90>)
 801673a:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801673c:	4e13      	ldr	r6, [pc, #76]	; (801678c <TRACE_Send+0x90>)
 801673e:	8a33      	ldrh	r3, [r6, #16]
 8016740:	4d13      	ldr	r5, [pc, #76]	; (8016790 <TRACE_Send+0x94>)
 8016742:	441d      	add	r5, r3
 8016744:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8016748:	f7eb ff9c 	bl	8002684 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801674c:	4b11      	ldr	r3, [pc, #68]	; (8016794 <TRACE_Send+0x98>)
 801674e:	68db      	ldr	r3, [r3, #12]
 8016750:	8ab1      	ldrh	r1, [r6, #20]
 8016752:	4628      	mov	r0, r5
 8016754:	4798      	blx	r3
 8016756:	e7db      	b.n	8016710 <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8016758:	480c      	ldr	r0, [pc, #48]	; (801678c <TRACE_Send+0x90>)
 801675a:	8801      	ldrh	r1, [r0, #0]
 801675c:	1a8a      	subs	r2, r1, r2
 801675e:	b292      	uxth	r2, r2
 8016760:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8016762:	2102      	movs	r1, #2
 8016764:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8016766:	2100      	movs	r1, #0
 8016768:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801676a:	2a00      	cmp	r2, #0
 801676c:	d1dc      	bne.n	8016728 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801676e:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8016770:	8201      	strh	r1, [r0, #16]
 8016772:	e7d9      	b.n	8016728 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8016774:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8016778:	4a04      	ldr	r2, [pc, #16]	; (801678c <TRACE_Send+0x90>)
 801677a:	8293      	strh	r3, [r2, #20]
 801677c:	e7de      	b.n	801673c <TRACE_Send+0x40>
      TRACE_UnLock();
 801677e:	f7ff ff83 	bl	8016688 <TRACE_UnLock>
 8016782:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8016786:	2000      	movs	r0, #0
}
 8016788:	e7c2      	b.n	8016710 <TRACE_Send+0x14>
 801678a:	bf00      	nop
 801678c:	20001988 	.word	0x20001988
 8016790:	20001588 	.word	0x20001588
 8016794:	08017880 	.word	0x08017880

08016798 <UTIL_ADV_TRACE_COND_FSend>:
{
 8016798:	b408      	push	{r3}
 801679a:	b530      	push	{r4, r5, lr}
 801679c:	b086      	sub	sp, #24
 801679e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 80167a0:	2300      	movs	r3, #0
 80167a2:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 80167a6:	4b2b      	ldr	r3, [pc, #172]	; (8016854 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 80167a8:	7a1b      	ldrb	r3, [r3, #8]
 80167aa:	4283      	cmp	r3, r0
 80167ac:	d34c      	bcc.n	8016848 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 80167ae:	4b29      	ldr	r3, [pc, #164]	; (8016854 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 80167b0:	68db      	ldr	r3, [r3, #12]
 80167b2:	ea31 0303 	bics.w	r3, r1, r3
 80167b6:	d14a      	bne.n	801684e <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 80167b8:	4b26      	ldr	r3, [pc, #152]	; (8016854 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 80167ba:	685b      	ldr	r3, [r3, #4]
 80167bc:	b123      	cbz	r3, 80167c8 <UTIL_ADV_TRACE_COND_FSend+0x30>
 80167be:	b11a      	cbz	r2, 80167c8 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 80167c0:	f10d 0102 	add.w	r1, sp, #2
 80167c4:	a801      	add	r0, sp, #4
 80167c6:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 80167c8:	ab0a      	add	r3, sp, #40	; 0x28
 80167ca:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80167cc:	4622      	mov	r2, r4
 80167ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80167d2:	4821      	ldr	r0, [pc, #132]	; (8016858 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 80167d4:	f000 fcba 	bl	801714c <tiny_vsnprintf_like>
 80167d8:	b285      	uxth	r5, r0
  TRACE_Lock();
 80167da:	f7ff ff49 	bl	8016670 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 80167de:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80167e2:	4428      	add	r0, r5
 80167e4:	4669      	mov	r1, sp
 80167e6:	b280      	uxth	r0, r0
 80167e8:	f7ff ff04 	bl	80165f4 <TRACE_AllocateBufer>
 80167ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80167f0:	d025      	beq.n	801683e <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 80167f2:	2300      	movs	r3, #0
 80167f4:	e00c      	b.n	8016810 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 80167f6:	f8bd 2000 	ldrh.w	r2, [sp]
 80167fa:	a906      	add	r1, sp, #24
 80167fc:	4419      	add	r1, r3
 80167fe:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8016802:	4916      	ldr	r1, [pc, #88]	; (801685c <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8016804:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8016806:	3201      	adds	r2, #1
 8016808:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 801680c:	3301      	adds	r3, #1
 801680e:	b29b      	uxth	r3, r3
 8016810:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8016814:	429a      	cmp	r2, r3
 8016816:	d8ee      	bhi.n	80167f6 <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8016818:	f8bd 0000 	ldrh.w	r0, [sp]
 801681c:	9b05      	ldr	r3, [sp, #20]
 801681e:	4622      	mov	r2, r4
 8016820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016824:	4c0d      	ldr	r4, [pc, #52]	; (801685c <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8016826:	4420      	add	r0, r4
 8016828:	f000 fc90 	bl	801714c <tiny_vsnprintf_like>
    TRACE_UnLock();
 801682c:	f7ff ff2c 	bl	8016688 <TRACE_UnLock>
    return TRACE_Send();
 8016830:	f7ff ff64 	bl	80166fc <TRACE_Send>
}
 8016834:	b006      	add	sp, #24
 8016836:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801683a:	b001      	add	sp, #4
 801683c:	4770      	bx	lr
  TRACE_UnLock();
 801683e:	f7ff ff23 	bl	8016688 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8016842:	f06f 0002 	mvn.w	r0, #2
 8016846:	e7f5      	b.n	8016834 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 8016848:	f06f 0004 	mvn.w	r0, #4
 801684c:	e7f2      	b.n	8016834 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 801684e:	f06f 0005 	mvn.w	r0, #5
 8016852:	e7ef      	b.n	8016834 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 8016854:	20001988 	.word	0x20001988
 8016858:	200019a0 	.word	0x200019a0
 801685c:	20001588 	.word	0x20001588

08016860 <TRACE_TxCpltCallback>:
{
 8016860:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016862:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016866:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8016868:	4b25      	ldr	r3, [pc, #148]	; (8016900 <TRACE_TxCpltCallback+0xa0>)
 801686a:	789b      	ldrb	r3, [r3, #2]
 801686c:	2b02      	cmp	r3, #2
 801686e:	d016      	beq.n	801689e <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8016870:	4a23      	ldr	r2, [pc, #140]	; (8016900 <TRACE_TxCpltCallback+0xa0>)
 8016872:	8a13      	ldrh	r3, [r2, #16]
 8016874:	8a90      	ldrh	r0, [r2, #20]
 8016876:	4403      	add	r3, r0
 8016878:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801687c:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801687e:	4b20      	ldr	r3, [pc, #128]	; (8016900 <TRACE_TxCpltCallback+0xa0>)
 8016880:	8a1a      	ldrh	r2, [r3, #16]
 8016882:	8a5b      	ldrh	r3, [r3, #18]
 8016884:	429a      	cmp	r2, r3
 8016886:	d003      	beq.n	8016890 <TRACE_TxCpltCallback+0x30>
 8016888:	481d      	ldr	r0, [pc, #116]	; (8016900 <TRACE_TxCpltCallback+0xa0>)
 801688a:	8ac0      	ldrh	r0, [r0, #22]
 801688c:	2801      	cmp	r0, #1
 801688e:	d00b      	beq.n	80168a8 <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016890:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8016894:	f7eb fefc 	bl	8002690 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8016898:	f7ff fef6 	bl	8016688 <TRACE_UnLock>
}
 801689c:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801689e:	4b18      	ldr	r3, [pc, #96]	; (8016900 <TRACE_TxCpltCallback+0xa0>)
 80168a0:	2200      	movs	r2, #0
 80168a2:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 80168a4:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 80168a6:	e7ea      	b.n	801687e <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80168a8:	4815      	ldr	r0, [pc, #84]	; (8016900 <TRACE_TxCpltCallback+0xa0>)
 80168aa:	7880      	ldrb	r0, [r0, #2]
 80168ac:	2801      	cmp	r0, #1
 80168ae:	d014      	beq.n	80168da <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80168b0:	4a13      	ldr	r2, [pc, #76]	; (8016900 <TRACE_TxCpltCallback+0xa0>)
 80168b2:	7892      	ldrb	r2, [r2, #2]
 80168b4:	b932      	cbnz	r2, 80168c4 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80168b6:	4a12      	ldr	r2, [pc, #72]	; (8016900 <TRACE_TxCpltCallback+0xa0>)
 80168b8:	8a12      	ldrh	r2, [r2, #16]
 80168ba:	4293      	cmp	r3, r2
 80168bc:	d91b      	bls.n	80168f6 <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80168be:	1a9b      	subs	r3, r3, r2
 80168c0:	4a0f      	ldr	r2, [pc, #60]	; (8016900 <TRACE_TxCpltCallback+0xa0>)
 80168c2:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80168c4:	4b0e      	ldr	r3, [pc, #56]	; (8016900 <TRACE_TxCpltCallback+0xa0>)
 80168c6:	8a1a      	ldrh	r2, [r3, #16]
 80168c8:	480e      	ldr	r0, [pc, #56]	; (8016904 <TRACE_TxCpltCallback+0xa4>)
 80168ca:	4410      	add	r0, r2
 80168cc:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80168d0:	4a0d      	ldr	r2, [pc, #52]	; (8016908 <TRACE_TxCpltCallback+0xa8>)
 80168d2:	68d2      	ldr	r2, [r2, #12]
 80168d4:	8a99      	ldrh	r1, [r3, #20]
 80168d6:	4790      	blx	r2
 80168d8:	e7e0      	b.n	801689c <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 80168da:	4c09      	ldr	r4, [pc, #36]	; (8016900 <TRACE_TxCpltCallback+0xa0>)
 80168dc:	8820      	ldrh	r0, [r4, #0]
 80168de:	1a82      	subs	r2, r0, r2
 80168e0:	b292      	uxth	r2, r2
 80168e2:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80168e4:	2002      	movs	r0, #2
 80168e6:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 80168e8:	2000      	movs	r0, #0
 80168ea:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80168ec:	2a00      	cmp	r2, #0
 80168ee:	d1df      	bne.n	80168b0 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80168f0:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 80168f2:	8220      	strh	r0, [r4, #16]
 80168f4:	e7dc      	b.n	80168b0 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80168f6:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 80168fa:	4a01      	ldr	r2, [pc, #4]	; (8016900 <TRACE_TxCpltCallback+0xa0>)
 80168fc:	8293      	strh	r3, [r2, #20]
 80168fe:	e7e1      	b.n	80168c4 <TRACE_TxCpltCallback+0x64>
 8016900:	20001988 	.word	0x20001988
 8016904:	20001588 	.word	0x20001588
 8016908:	08017880 	.word	0x08017880

0801690c <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801690c:	2300      	movs	r3, #0
 801690e:	4a02      	ldr	r2, [pc, #8]	; (8016918 <UTIL_LPM_Init+0xc>)
 8016910:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8016912:	4a02      	ldr	r2, [pc, #8]	; (801691c <UTIL_LPM_Init+0x10>)
 8016914:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8016916:	4770      	bx	lr
 8016918:	20001ba4 	.word	0x20001ba4
 801691c:	20001ba0 	.word	0x20001ba0

08016920 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016920:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016924:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8016926:	b141      	cbz	r1, 801693a <UTIL_LPM_SetStopMode+0x1a>
 8016928:	2901      	cmp	r1, #1
 801692a:	d103      	bne.n	8016934 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801692c:	4906      	ldr	r1, [pc, #24]	; (8016948 <UTIL_LPM_SetStopMode+0x28>)
 801692e:	680a      	ldr	r2, [r1, #0]
 8016930:	4310      	orrs	r0, r2
 8016932:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016934:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8016938:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 801693a:	4903      	ldr	r1, [pc, #12]	; (8016948 <UTIL_LPM_SetStopMode+0x28>)
 801693c:	680a      	ldr	r2, [r1, #0]
 801693e:	ea22 0000 	bic.w	r0, r2, r0
 8016942:	6008      	str	r0, [r1, #0]
      break;
 8016944:	e7f6      	b.n	8016934 <UTIL_LPM_SetStopMode+0x14>
 8016946:	bf00      	nop
 8016948:	20001ba4 	.word	0x20001ba4

0801694c <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801694c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016950:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8016952:	b141      	cbz	r1, 8016966 <UTIL_LPM_SetOffMode+0x1a>
 8016954:	2901      	cmp	r1, #1
 8016956:	d103      	bne.n	8016960 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8016958:	4906      	ldr	r1, [pc, #24]	; (8016974 <UTIL_LPM_SetOffMode+0x28>)
 801695a:	680a      	ldr	r2, [r1, #0]
 801695c:	4310      	orrs	r0, r2
 801695e:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016960:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8016964:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8016966:	4903      	ldr	r1, [pc, #12]	; (8016974 <UTIL_LPM_SetOffMode+0x28>)
 8016968:	680a      	ldr	r2, [r1, #0]
 801696a:	ea22 0000 	bic.w	r0, r2, r0
 801696e:	6008      	str	r0, [r1, #0]
      break;
 8016970:	e7f6      	b.n	8016960 <UTIL_LPM_SetOffMode+0x14>
 8016972:	bf00      	nop
 8016974:	20001ba0 	.word	0x20001ba0

08016978 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8016978:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801697a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801697e:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8016980:	4b0c      	ldr	r3, [pc, #48]	; (80169b4 <UTIL_LPM_EnterLowPower+0x3c>)
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	b13b      	cbz	r3, 8016996 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8016986:	4d0c      	ldr	r5, [pc, #48]	; (80169b8 <UTIL_LPM_EnterLowPower+0x40>)
 8016988:	682b      	ldr	r3, [r5, #0]
 801698a:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801698c:	686b      	ldr	r3, [r5, #4]
 801698e:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016990:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8016994:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8016996:	4b09      	ldr	r3, [pc, #36]	; (80169bc <UTIL_LPM_EnterLowPower+0x44>)
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	b12b      	cbz	r3, 80169a8 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 801699c:	4d06      	ldr	r5, [pc, #24]	; (80169b8 <UTIL_LPM_EnterLowPower+0x40>)
 801699e:	68ab      	ldr	r3, [r5, #8]
 80169a0:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 80169a2:	68eb      	ldr	r3, [r5, #12]
 80169a4:	4798      	blx	r3
 80169a6:	e7f3      	b.n	8016990 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 80169a8:	4d03      	ldr	r5, [pc, #12]	; (80169b8 <UTIL_LPM_EnterLowPower+0x40>)
 80169aa:	692b      	ldr	r3, [r5, #16]
 80169ac:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 80169ae:	696b      	ldr	r3, [r5, #20]
 80169b0:	4798      	blx	r3
 80169b2:	e7ed      	b.n	8016990 <UTIL_LPM_EnterLowPower+0x18>
 80169b4:	20001ba4 	.word	0x20001ba4
 80169b8:	08017828 	.word	0x08017828
 80169bc:	20001ba0 	.word	0x20001ba0

080169c0 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 80169c0:	1e53      	subs	r3, r2, #1
 80169c2:	b29b      	uxth	r3, r3
 80169c4:	b12a      	cbz	r2, 80169d2 <UTIL_MEM_cpy_8+0x12>
    {
        *dst8++ = *src8++;
 80169c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80169ca:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 80169ce:	461a      	mov	r2, r3
 80169d0:	e7f6      	b.n	80169c0 <UTIL_MEM_cpy_8>
    }
}
 80169d2:	4770      	bx	lr

080169d4 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 80169d4:	1e53      	subs	r3, r2, #1
 80169d6:	b29b      	uxth	r3, r3
 80169d8:	b11a      	cbz	r2, 80169e2 <UTIL_MEM_set_8+0xe>
  {
    *dst8++ = value;
 80169da:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 80169de:	461a      	mov	r2, r3
 80169e0:	e7f8      	b.n	80169d4 <UTIL_MEM_set_8>
  }
}
 80169e2:	4770      	bx	lr

080169e4 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80169e4:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80169e6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80169ea:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 80169ec:	4a06      	ldr	r2, [pc, #24]	; (8016a08 <UTIL_SEQ_SetTask+0x24>)
 80169ee:	6813      	ldr	r3, [r2, #0]
 80169f0:	4303      	orrs	r3, r0
 80169f2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80169f4:	4a05      	ldr	r2, [pc, #20]	; (8016a0c <UTIL_SEQ_SetTask+0x28>)
 80169f6:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 80169fa:	4318      	orrs	r0, r3
 80169fc:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a00:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8016a04:	bc10      	pop	{r4}
 8016a06:	4770      	bx	lr
 8016a08:	20001c44 	.word	0x20001c44
 8016a0c:	20001c34 	.word	0x20001c34

08016a10 <UTIL_SEQ_PreIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8016a10:	4770      	bx	lr

08016a12 <UTIL_SEQ_PostIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8016a12:	4770      	bx	lr

08016a14 <SEQ_BitPosition>:
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8016a14:	0c03      	lsrs	r3, r0, #16
 8016a16:	041b      	lsls	r3, r3, #16
 8016a18:	b9b3      	cbnz	r3, 8016a48 <SEQ_BitPosition+0x34>
 8016a1a:	0400      	lsls	r0, r0, #16
 8016a1c:	2310      	movs	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8016a1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016a22:	d102      	bne.n	8016a2a <SEQ_BitPosition+0x16>
 8016a24:	3308      	adds	r3, #8
 8016a26:	b2db      	uxtb	r3, r3
 8016a28:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8016a2a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016a2e:	d102      	bne.n	8016a36 <SEQ_BitPosition+0x22>
 8016a30:	3304      	adds	r3, #4
 8016a32:	b2db      	uxtb	r3, r3
 8016a34:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8016a36:	0f00      	lsrs	r0, r0, #28
 8016a38:	4a04      	ldr	r2, [pc, #16]	; (8016a4c <SEQ_BitPosition+0x38>)
 8016a3a:	5c10      	ldrb	r0, [r2, r0]
 8016a3c:	4418      	add	r0, r3
 8016a3e:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8016a40:	f1c0 001f 	rsb	r0, r0, #31
}
 8016a44:	b2c0      	uxtb	r0, r0
 8016a46:	4770      	bx	lr
  uint8_t n = 0U;
 8016a48:	2300      	movs	r3, #0
 8016a4a:	e7e8      	b.n	8016a1e <SEQ_BitPosition+0xa>
 8016a4c:	0801844c 	.word	0x0801844c

08016a50 <UTIL_SEQ_Run>:
{
 8016a50:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 8016a52:	4b3b      	ldr	r3, [pc, #236]	; (8016b40 <UTIL_SEQ_Run+0xf0>)
 8016a54:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8016a56:	4020      	ands	r0, r4
 8016a58:	6018      	str	r0, [r3, #0]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8016a5a:	e012      	b.n	8016a82 <UTIL_SEQ_Run+0x32>
      counter++;
 8016a5c:	3301      	adds	r3, #1
 8016a5e:	e01f      	b.n	8016aa0 <UTIL_SEQ_Run+0x50>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8016a60:	3b01      	subs	r3, #1
 8016a62:	4938      	ldr	r1, [pc, #224]	; (8016b44 <UTIL_SEQ_Run+0xf4>)
 8016a64:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8016a68:	4002      	ands	r2, r0
 8016a6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d1f6      	bne.n	8016a60 <UTIL_SEQ_Run+0x10>
 8016a72:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 8016a76:	4b34      	ldr	r3, [pc, #208]	; (8016b48 <UTIL_SEQ_Run+0xf8>)
 8016a78:	681a      	ldr	r2, [r3, #0]
 8016a7a:	4b34      	ldr	r3, [pc, #208]	; (8016b4c <UTIL_SEQ_Run+0xfc>)
 8016a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a80:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8016a82:	4b33      	ldr	r3, [pc, #204]	; (8016b50 <UTIL_SEQ_Run+0x100>)
 8016a84:	6819      	ldr	r1, [r3, #0]
 8016a86:	4b33      	ldr	r3, [pc, #204]	; (8016b54 <UTIL_SEQ_Run+0x104>)
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	400b      	ands	r3, r1
 8016a8c:	4a2c      	ldr	r2, [pc, #176]	; (8016b40 <UTIL_SEQ_Run+0xf0>)
 8016a8e:	6812      	ldr	r2, [r2, #0]
 8016a90:	4213      	tst	r3, r2
 8016a92:	d033      	beq.n	8016afc <UTIL_SEQ_Run+0xac>
 8016a94:	4b30      	ldr	r3, [pc, #192]	; (8016b58 <UTIL_SEQ_Run+0x108>)
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	4830      	ldr	r0, [pc, #192]	; (8016b5c <UTIL_SEQ_Run+0x10c>)
 8016a9a:	6800      	ldr	r0, [r0, #0]
 8016a9c:	4003      	ands	r3, r0
 8016a9e:	d12d      	bne.n	8016afc <UTIL_SEQ_Run+0xac>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8016aa0:	4828      	ldr	r0, [pc, #160]	; (8016b44 <UTIL_SEQ_Run+0xf4>)
 8016aa2:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 8016aa6:	4008      	ands	r0, r1
 8016aa8:	4010      	ands	r0, r2
 8016aaa:	d0d7      	beq.n	8016a5c <UTIL_SEQ_Run+0xc>
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8016aac:	4a25      	ldr	r2, [pc, #148]	; (8016b44 <UTIL_SEQ_Run+0xf4>)
 8016aae:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016ab2:	6852      	ldr	r2, [r2, #4]
 8016ab4:	4210      	tst	r0, r2
 8016ab6:	d105      	bne.n	8016ac4 <UTIL_SEQ_Run+0x74>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8016ab8:	4a22      	ldr	r2, [pc, #136]	; (8016b44 <UTIL_SEQ_Run+0xf4>)
 8016aba:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016abe:	f04f 31ff 	mov.w	r1, #4294967295
 8016ac2:	6051      	str	r1, [r2, #4]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8016ac4:	4d1f      	ldr	r5, [pc, #124]	; (8016b44 <UTIL_SEQ_Run+0xf4>)
 8016ac6:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8016aca:	686e      	ldr	r6, [r5, #4]
 8016acc:	4030      	ands	r0, r6
 8016ace:	f7ff ffa1 	bl	8016a14 <SEQ_BitPosition>
 8016ad2:	4a1d      	ldr	r2, [pc, #116]	; (8016b48 <UTIL_SEQ_Run+0xf8>)
 8016ad4:	6010      	str	r0, [r2, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8016ad6:	2301      	movs	r3, #1
 8016ad8:	fa03 f000 	lsl.w	r0, r3, r0
 8016adc:	ea26 0000 	bic.w	r0, r6, r0
 8016ae0:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ae2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016ae6:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8016ae8:	6812      	ldr	r2, [r2, #0]
 8016aea:	4093      	lsls	r3, r2
 8016aec:	43d8      	mvns	r0, r3
 8016aee:	4919      	ldr	r1, [pc, #100]	; (8016b54 <UTIL_SEQ_Run+0x104>)
 8016af0:	680a      	ldr	r2, [r1, #0]
 8016af2:	ea22 0303 	bic.w	r3, r2, r3
 8016af6:	600b      	str	r3, [r1, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8016af8:	2302      	movs	r3, #2
 8016afa:	e7b8      	b.n	8016a6e <UTIL_SEQ_Run+0x1e>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8016afc:	4b12      	ldr	r3, [pc, #72]	; (8016b48 <UTIL_SEQ_Run+0xf8>)
 8016afe:	f04f 32ff 	mov.w	r2, #4294967295
 8016b02:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8016b04:	f7ff ff84 	bl	8016a10 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016b08:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016b0c:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8016b0e:	4b11      	ldr	r3, [pc, #68]	; (8016b54 <UTIL_SEQ_Run+0x104>)
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	4a0f      	ldr	r2, [pc, #60]	; (8016b50 <UTIL_SEQ_Run+0x100>)
 8016b14:	6812      	ldr	r2, [r2, #0]
 8016b16:	4013      	ands	r3, r2
 8016b18:	4a09      	ldr	r2, [pc, #36]	; (8016b40 <UTIL_SEQ_Run+0xf0>)
 8016b1a:	6812      	ldr	r2, [r2, #0]
 8016b1c:	4213      	tst	r3, r2
 8016b1e:	d105      	bne.n	8016b2c <UTIL_SEQ_Run+0xdc>
 8016b20:	4b0d      	ldr	r3, [pc, #52]	; (8016b58 <UTIL_SEQ_Run+0x108>)
 8016b22:	681a      	ldr	r2, [r3, #0]
 8016b24:	4b0d      	ldr	r3, [pc, #52]	; (8016b5c <UTIL_SEQ_Run+0x10c>)
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	421a      	tst	r2, r3
 8016b2a:	d006      	beq.n	8016b3a <UTIL_SEQ_Run+0xea>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b2c:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8016b30:	f7ff ff6f 	bl	8016a12 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8016b34:	4b02      	ldr	r3, [pc, #8]	; (8016b40 <UTIL_SEQ_Run+0xf0>)
 8016b36:	601c      	str	r4, [r3, #0]
}
 8016b38:	bd70      	pop	{r4, r5, r6, pc}
	UTIL_SEQ_Idle( );
 8016b3a:	f7eb fd9f 	bl	800267c <UTIL_SEQ_Idle>
 8016b3e:	e7f5      	b.n	8016b2c <UTIL_SEQ_Run+0xdc>
 8016b40:	200000dc 	.word	0x200000dc
 8016b44:	20001c34 	.word	0x20001c34
 8016b48:	20001ba8 	.word	0x20001ba8
 8016b4c:	20001bb4 	.word	0x20001bb4
 8016b50:	200000e0 	.word	0x200000e0
 8016b54:	20001c44 	.word	0x20001c44
 8016b58:	20001bac 	.word	0x20001bac
 8016b5c:	20001bb0 	.word	0x20001bb0

08016b60 <UTIL_SEQ_RegTask>:
{
 8016b60:	b538      	push	{r3, r4, r5, lr}
 8016b62:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016b64:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016b68:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8016b6a:	f7ff ff53 	bl	8016a14 <SEQ_BitPosition>
 8016b6e:	4b03      	ldr	r3, [pc, #12]	; (8016b7c <UTIL_SEQ_RegTask+0x1c>)
 8016b70:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b74:	f385 8810 	msr	PRIMASK, r5
}
 8016b78:	bd38      	pop	{r3, r4, r5, pc}
 8016b7a:	bf00      	nop
 8016b7c:	20001bb4 	.word	0x20001bb4

08016b80 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8016b80:	b082      	sub	sp, #8
 8016b82:	b082      	sub	sp, #8
 8016b84:	f10d 0c08 	add.w	ip, sp, #8
 8016b88:	e90c 0006 	stmdb	ip, {r1, r2}
 8016b8c:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds + b.Seconds;
 8016b8e:	9a00      	ldr	r2, [sp, #0]
 8016b90:	4413      	add	r3, r2
 8016b92:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8016b94:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8016b98:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8016b9c:	440a      	add	r2, r1
 8016b9e:	b291      	uxth	r1, r2
 8016ba0:	b212      	sxth	r2, r2
 8016ba2:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8016ba4:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8016ba8:	db04      	blt.n	8016bb4 <SysTimeAdd+0x34>
  {
    c.Seconds++;
 8016baa:	3301      	adds	r3, #1
 8016bac:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8016bae:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8016bb2:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8016bb4:	b002      	add	sp, #8
 8016bb6:	b002      	add	sp, #8
 8016bb8:	4770      	bx	lr

08016bba <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8016bba:	b082      	sub	sp, #8
 8016bbc:	b082      	sub	sp, #8
 8016bbe:	f10d 0c08 	add.w	ip, sp, #8
 8016bc2:	e90c 0006 	stmdb	ip, {r1, r2}
 8016bc6:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds - b.Seconds;
 8016bc8:	9a00      	ldr	r2, [sp, #0]
 8016bca:	1ad3      	subs	r3, r2, r3
 8016bcc:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8016bce:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8016bd2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8016bd6:	1a52      	subs	r2, r2, r1
 8016bd8:	b291      	uxth	r1, r2
 8016bda:	b212      	sxth	r2, r2
 8016bdc:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 8016bde:	2a00      	cmp	r2, #0
 8016be0:	db02      	blt.n	8016be8 <SysTimeSub+0x2e>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 8016be2:	b002      	add	sp, #8
 8016be4:	b002      	add	sp, #8
 8016be6:	4770      	bx	lr
    c.Seconds--;
 8016be8:	3b01      	subs	r3, #1
 8016bea:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8016bec:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8016bf0:	8081      	strh	r1, [r0, #4]
  return c;
 8016bf2:	e7f6      	b.n	8016be2 <SysTimeSub+0x28>

08016bf4 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8016bf4:	b530      	push	{r4, r5, lr}
 8016bf6:	b089      	sub	sp, #36	; 0x24
 8016bf8:	ac02      	add	r4, sp, #8
 8016bfa:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8016bfe:	2300      	movs	r3, #0
 8016c00:	9304      	str	r3, [sp, #16]
 8016c02:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8016c06:	4d0b      	ldr	r5, [pc, #44]	; (8016c34 <SysTimeSet+0x40>)
 8016c08:	692b      	ldr	r3, [r5, #16]
 8016c0a:	a805      	add	r0, sp, #20
 8016c0c:	4798      	blx	r3
 8016c0e:	4603      	mov	r3, r0
 8016c10:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8016c12:	9a05      	ldr	r2, [sp, #20]
 8016c14:	9200      	str	r2, [sp, #0]
 8016c16:	e894 0006 	ldmia.w	r4, {r1, r2}
 8016c1a:	a806      	add	r0, sp, #24
 8016c1c:	f7ff ffcd 	bl	8016bba <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8016c20:	682b      	ldr	r3, [r5, #0]
 8016c22:	9806      	ldr	r0, [sp, #24]
 8016c24:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8016c26:	68ab      	ldr	r3, [r5, #8]
 8016c28:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8016c2c:	4798      	blx	r3
}
 8016c2e:	b009      	add	sp, #36	; 0x24
 8016c30:	bd30      	pop	{r4, r5, pc}
 8016c32:	bf00      	nop
 8016c34:	08017840 	.word	0x08017840

08016c38 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8016c38:	b530      	push	{r4, r5, lr}
 8016c3a:	b087      	sub	sp, #28
 8016c3c:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8016c3e:	2300      	movs	r3, #0
 8016c40:	9304      	str	r3, [sp, #16]
 8016c42:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8016c46:	4d0b      	ldr	r5, [pc, #44]	; (8016c74 <SysTimeGet+0x3c>)
 8016c48:	692b      	ldr	r3, [r5, #16]
 8016c4a:	a805      	add	r0, sp, #20
 8016c4c:	4798      	blx	r3
 8016c4e:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8016c50:	68eb      	ldr	r3, [r5, #12]
 8016c52:	4798      	blx	r3
 8016c54:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8016c58:	686b      	ldr	r3, [r5, #4]
 8016c5a:	4798      	blx	r3
 8016c5c:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8016c5e:	9b05      	ldr	r3, [sp, #20]
 8016c60:	9300      	str	r3, [sp, #0]
 8016c62:	9b04      	ldr	r3, [sp, #16]
 8016c64:	9a03      	ldr	r2, [sp, #12]
 8016c66:	4601      	mov	r1, r0
 8016c68:	4620      	mov	r0, r4
 8016c6a:	f7ff ff89 	bl	8016b80 <SysTimeAdd>

  return sysTime;
}
 8016c6e:	4620      	mov	r0, r4
 8016c70:	b007      	add	sp, #28
 8016c72:	bd30      	pop	{r4, r5, pc}
 8016c74:	08017840 	.word	0x08017840

08016c78 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8016c78:	b530      	push	{r4, r5, lr}
 8016c7a:	b083      	sub	sp, #12
 8016c7c:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8016c7e:	2300      	movs	r3, #0
 8016c80:	9300      	str	r3, [sp, #0]
 8016c82:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8016c86:	4b06      	ldr	r3, [pc, #24]	; (8016ca0 <SysTimeGetMcuTime+0x28>)
 8016c88:	691b      	ldr	r3, [r3, #16]
 8016c8a:	466d      	mov	r5, sp
 8016c8c:	a801      	add	r0, sp, #4
 8016c8e:	4798      	blx	r3
 8016c90:	9000      	str	r0, [sp, #0]
  
  return calendarTime;
 8016c92:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016c96:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8016c9a:	4620      	mov	r0, r4
 8016c9c:	b003      	add	sp, #12
 8016c9e:	bd30      	pop	{r4, r5, pc}
 8016ca0:	08017840 	.word	0x08017840

08016ca4 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8016ca4:	b530      	push	{r4, r5, lr}
 8016ca6:	b089      	sub	sp, #36	; 0x24
 8016ca8:	ac02      	add	r4, sp, #8
 8016caa:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8016cae:	4d0c      	ldr	r5, [pc, #48]	; (8016ce0 <SysTimeToMs+0x3c>)
 8016cb0:	68eb      	ldr	r3, [r5, #12]
 8016cb2:	4798      	blx	r3
 8016cb4:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8016cb8:	686b      	ldr	r3, [r5, #4]
 8016cba:	4798      	blx	r3
 8016cbc:	4603      	mov	r3, r0
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8016cbe:	9a07      	ldr	r2, [sp, #28]
 8016cc0:	9200      	str	r2, [sp, #0]
 8016cc2:	e894 0006 	ldmia.w	r4, {r1, r2}
 8016cc6:	a804      	add	r0, sp, #16
 8016cc8:	f7ff ff77 	bl	8016bba <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8016ccc:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 8016cd0:	9a04      	ldr	r2, [sp, #16]
 8016cd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016cd6:	fb00 3002 	mla	r0, r0, r2, r3
 8016cda:	b009      	add	sp, #36	; 0x24
 8016cdc:	bd30      	pop	{r4, r5, pc}
 8016cde:	bf00      	nop
 8016ce0:	08017840 	.word	0x08017840

08016ce4 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8016ce4:	b530      	push	{r4, r5, lr}
 8016ce6:	b087      	sub	sp, #28
 8016ce8:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 8016cea:	4b11      	ldr	r3, [pc, #68]	; (8016d30 <SysTimeFromMs+0x4c>)
 8016cec:	fba3 2301 	umull	r2, r3, r3, r1
 8016cf0:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8016cf2:	9304      	str	r3, [sp, #16]
 8016cf4:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8016cf8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8016cfc:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 8016d00:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8016d04:	2300      	movs	r3, #0
 8016d06:	f8ad 300e 	strh.w	r3, [sp, #14]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8016d0a:	4d0a      	ldr	r5, [pc, #40]	; (8016d34 <SysTimeFromMs+0x50>)
 8016d0c:	68eb      	ldr	r3, [r5, #12]
 8016d0e:	4798      	blx	r3
 8016d10:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8016d14:	686b      	ldr	r3, [r5, #4]
 8016d16:	4798      	blx	r3
 8016d18:	4603      	mov	r3, r0
  return SysTimeAdd( sysTime, DeltaTime );
 8016d1a:	9a03      	ldr	r2, [sp, #12]
 8016d1c:	9200      	str	r2, [sp, #0]
 8016d1e:	aa06      	add	r2, sp, #24
 8016d20:	e912 0006 	ldmdb	r2, {r1, r2}
 8016d24:	4620      	mov	r0, r4
 8016d26:	f7ff ff2b 	bl	8016b80 <SysTimeAdd>
}
 8016d2a:	4620      	mov	r0, r4
 8016d2c:	b007      	add	sp, #28
 8016d2e:	bd30      	pop	{r4, r5, pc}
 8016d30:	10624dd3 	.word	0x10624dd3
 8016d34:	08017840 	.word	0x08017840

08016d38 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8016d38:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8016d3a:	4b03      	ldr	r3, [pc, #12]	; (8016d48 <UTIL_TIMER_Init+0x10>)
 8016d3c:	2200      	movs	r2, #0
 8016d3e:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8016d40:	4b02      	ldr	r3, [pc, #8]	; (8016d4c <UTIL_TIMER_Init+0x14>)
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	4798      	blx	r3
}
 8016d46:	bd08      	pop	{r3, pc}
 8016d48:	20001c48 	.word	0x20001c48
 8016d4c:	08017854 	.word	0x08017854

08016d50 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8016d50:	b1a8      	cbz	r0, 8016d7e <UTIL_TIMER_Create+0x2e>
{
 8016d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d54:	4617      	mov	r7, r2
 8016d56:	461e      	mov	r6, r3
 8016d58:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8016d5a:	b193      	cbz	r3, 8016d82 <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8016d5c:	2500      	movs	r5, #0
 8016d5e:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8016d60:	4b09      	ldr	r3, [pc, #36]	; (8016d88 <UTIL_TIMER_Create+0x38>)
 8016d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d64:	4608      	mov	r0, r1
 8016d66:	4798      	blx	r3
 8016d68:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8016d6a:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8016d6c:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8016d6e:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8016d70:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8016d72:	9b06      	ldr	r3, [sp, #24]
 8016d74:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8016d76:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8016d78:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8016d7a:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8016d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8016d7e:	2001      	movs	r0, #1
}
 8016d80:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8016d82:	2001      	movs	r0, #1
 8016d84:	e7fa      	b.n	8016d7c <UTIL_TIMER_Create+0x2c>
 8016d86:	bf00      	nop
 8016d88:	08017854 	.word	0x08017854

08016d8c <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8016d8c:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8016d8e:	4c03      	ldr	r4, [pc, #12]	; (8016d9c <UTIL_TIMER_GetCurrentTime+0x10>)
 8016d90:	69e3      	ldr	r3, [r4, #28]
 8016d92:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8016d94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016d96:	4798      	blx	r3
}
 8016d98:	bd10      	pop	{r4, pc}
 8016d9a:	bf00      	nop
 8016d9c:	08017854 	.word	0x08017854

08016da0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8016da0:	b570      	push	{r4, r5, r6, lr}
 8016da2:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8016da4:	4d05      	ldr	r5, [pc, #20]	; (8016dbc <UTIL_TIMER_GetElapsedTime+0x1c>)
 8016da6:	69eb      	ldr	r3, [r5, #28]
 8016da8:	4798      	blx	r3
 8016daa:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8016dac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016dae:	4630      	mov	r0, r6
 8016db0:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8016db2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8016db4:	1a20      	subs	r0, r4, r0
 8016db6:	4798      	blx	r3
}
 8016db8:	bd70      	pop	{r4, r5, r6, pc}
 8016dba:	bf00      	nop
 8016dbc:	08017854 	.word	0x08017854

08016dc0 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8016dc0:	4b05      	ldr	r3, [pc, #20]	; (8016dd8 <TimerExists+0x18>)
 8016dc2:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8016dc4:	b11b      	cbz	r3, 8016dce <TimerExists+0xe>
  {
    if( cur == TimerObject )
 8016dc6:	4283      	cmp	r3, r0
 8016dc8:	d003      	beq.n	8016dd2 <TimerExists+0x12>
    {
      return true;
    }
    cur = cur->Next;
 8016dca:	695b      	ldr	r3, [r3, #20]
 8016dcc:	e7fa      	b.n	8016dc4 <TimerExists+0x4>
  }
  return false;
 8016dce:	2000      	movs	r0, #0
 8016dd0:	4770      	bx	lr
      return true;
 8016dd2:	2001      	movs	r0, #1
}
 8016dd4:	4770      	bx	lr
 8016dd6:	bf00      	nop
 8016dd8:	20001c48 	.word	0x20001c48

08016ddc <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8016ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dde:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8016de0:	4e09      	ldr	r6, [pc, #36]	; (8016e08 <TimerSetTimeout+0x2c>)
 8016de2:	6a33      	ldr	r3, [r6, #32]
 8016de4:	4798      	blx	r3
 8016de6:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8016de8:	2301      	movs	r3, #1
 8016dea:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8016dec:	6827      	ldr	r7, [r4, #0]
 8016dee:	69b6      	ldr	r6, [r6, #24]
 8016df0:	47b0      	blx	r6
 8016df2:	4428      	add	r0, r5
 8016df4:	4287      	cmp	r7, r0
 8016df6:	d202      	bcs.n	8016dfe <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8016df8:	47b0      	blx	r6
 8016dfa:	4405      	add	r5, r0
 8016dfc:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8016dfe:	4b02      	ldr	r3, [pc, #8]	; (8016e08 <TimerSetTimeout+0x2c>)
 8016e00:	689b      	ldr	r3, [r3, #8]
 8016e02:	6820      	ldr	r0, [r4, #0]
 8016e04:	4798      	blx	r3
}
 8016e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e08:	08017854 	.word	0x08017854

08016e0c <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8016e0c:	b368      	cbz	r0, 8016e6a <UTIL_TIMER_Stop+0x5e>
{
 8016e0e:	b510      	push	{r4, lr}
 8016e10:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016e12:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016e16:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8016e18:	4b15      	ldr	r3, [pc, #84]	; (8016e70 <UTIL_TIMER_Stop+0x64>)
 8016e1a:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8016e1c:	2301      	movs	r3, #1
 8016e1e:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8016e20:	b1e1      	cbz	r1, 8016e5c <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8016e22:	2300      	movs	r3, #0
 8016e24:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8016e26:	4288      	cmp	r0, r1
 8016e28:	d006      	beq.n	8016e38 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8016e2a:	460b      	mov	r3, r1
        while( cur != NULL )
 8016e2c:	b1b3      	cbz	r3, 8016e5c <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8016e2e:	4293      	cmp	r3, r2
 8016e30:	d011      	beq.n	8016e56 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8016e32:	4619      	mov	r1, r3
            cur = cur->Next;
 8016e34:	695b      	ldr	r3, [r3, #20]
 8016e36:	e7f9      	b.n	8016e2c <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8016e38:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8016e3a:	6948      	ldr	r0, [r1, #20]
 8016e3c:	b120      	cbz	r0, 8016e48 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8016e3e:	4b0c      	ldr	r3, [pc, #48]	; (8016e70 <UTIL_TIMER_Stop+0x64>)
 8016e40:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8016e42:	f7ff ffcb 	bl	8016ddc <TimerSetTimeout>
 8016e46:	e009      	b.n	8016e5c <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8016e48:	4b0a      	ldr	r3, [pc, #40]	; (8016e74 <UTIL_TIMER_Stop+0x68>)
 8016e4a:	68db      	ldr	r3, [r3, #12]
 8016e4c:	4798      	blx	r3
            TimerListHead = NULL;
 8016e4e:	4b08      	ldr	r3, [pc, #32]	; (8016e70 <UTIL_TIMER_Stop+0x64>)
 8016e50:	2200      	movs	r2, #0
 8016e52:	601a      	str	r2, [r3, #0]
 8016e54:	e002      	b.n	8016e5c <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8016e56:	695b      	ldr	r3, [r3, #20]
 8016e58:	b123      	cbz	r3, 8016e64 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8016e5a:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e5c:	f384 8810 	msr	PRIMASK, r4
}
 8016e60:	2000      	movs	r0, #0
}
 8016e62:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8016e64:	2300      	movs	r3, #0
 8016e66:	614b      	str	r3, [r1, #20]
 8016e68:	e7f8      	b.n	8016e5c <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8016e6a:	2001      	movs	r0, #1
}
 8016e6c:	4770      	bx	lr
 8016e6e:	bf00      	nop
 8016e70:	20001c48 	.word	0x20001c48
 8016e74:	08017854 	.word	0x08017854

08016e78 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8016e78:	4b0d      	ldr	r3, [pc, #52]	; (8016eb0 <TimerInsertTimer+0x38>)
 8016e7a:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8016e7c:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8016e7e:	6951      	ldr	r1, [r2, #20]
 8016e80:	b189      	cbz	r1, 8016ea6 <TimerInsertTimer+0x2e>
{
 8016e82:	b410      	push	{r4}
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8016e84:	6804      	ldr	r4, [r0, #0]
 8016e86:	6819      	ldr	r1, [r3, #0]
 8016e88:	428c      	cmp	r4, r1
 8016e8a:	d908      	bls.n	8016e9e <TimerInsertTimer+0x26>
    {
        cur = next;
 8016e8c:	461a      	mov	r2, r3
        next = next->Next;
 8016e8e:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8016e90:	6951      	ldr	r1, [r2, #20]
 8016e92:	2900      	cmp	r1, #0
 8016e94:	d1f6      	bne.n	8016e84 <TimerInsertTimer+0xc>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 8016e96:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8016e98:	2300      	movs	r3, #0
 8016e9a:	6143      	str	r3, [r0, #20]
 8016e9c:	e001      	b.n	8016ea2 <TimerInsertTimer+0x2a>
        cur->Next = TimerObject;
 8016e9e:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8016ea0:	6143      	str	r3, [r0, #20]
}
 8016ea2:	bc10      	pop	{r4}
 8016ea4:	4770      	bx	lr
  cur->Next = TimerObject;
 8016ea6:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	6143      	str	r3, [r0, #20]
 8016eac:	4770      	bx	lr
 8016eae:	bf00      	nop
 8016eb0:	20001c48 	.word	0x20001c48

08016eb4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8016eb4:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8016eb6:	4b05      	ldr	r3, [pc, #20]	; (8016ecc <TimerInsertNewHeadTimer+0x18>)
 8016eb8:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8016eba:	b10b      	cbz	r3, 8016ec0 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8016ebc:	2200      	movs	r2, #0
 8016ebe:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8016ec0:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8016ec2:	4b02      	ldr	r3, [pc, #8]	; (8016ecc <TimerInsertNewHeadTimer+0x18>)
 8016ec4:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8016ec6:	f7ff ff89 	bl	8016ddc <TimerSetTimeout>
}
 8016eca:	bd08      	pop	{r3, pc}
 8016ecc:	20001c48 	.word	0x20001c48

08016ed0 <UTIL_TIMER_Start>:
{
 8016ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8016ed2:	2800      	cmp	r0, #0
 8016ed4:	d036      	beq.n	8016f44 <UTIL_TIMER_Start+0x74>
 8016ed6:	4604      	mov	r4, r0
 8016ed8:	f7ff ff72 	bl	8016dc0 <TimerExists>
 8016edc:	2800      	cmp	r0, #0
 8016ede:	d134      	bne.n	8016f4a <UTIL_TIMER_Start+0x7a>
 8016ee0:	7a65      	ldrb	r5, [r4, #9]
 8016ee2:	2d00      	cmp	r5, #0
 8016ee4:	d133      	bne.n	8016f4e <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ee6:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016eea:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8016eec:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8016eee:	4b19      	ldr	r3, [pc, #100]	; (8016f54 <UTIL_TIMER_Start+0x84>)
 8016ef0:	6a1b      	ldr	r3, [r3, #32]
 8016ef2:	4798      	blx	r3
    if( ticks < minValue )
 8016ef4:	4287      	cmp	r7, r0
 8016ef6:	d300      	bcc.n	8016efa <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8016ef8:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8016efa:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8016efc:	2300      	movs	r3, #0
 8016efe:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8016f00:	2201      	movs	r2, #1
 8016f02:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8016f04:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8016f06:	4b14      	ldr	r3, [pc, #80]	; (8016f58 <UTIL_TIMER_Start+0x88>)
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	b183      	cbz	r3, 8016f2e <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8016f0c:	4b11      	ldr	r3, [pc, #68]	; (8016f54 <UTIL_TIMER_Start+0x84>)
 8016f0e:	699b      	ldr	r3, [r3, #24]
 8016f10:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8016f12:	6823      	ldr	r3, [r4, #0]
 8016f14:	4418      	add	r0, r3
 8016f16:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8016f18:	4b0f      	ldr	r3, [pc, #60]	; (8016f58 <UTIL_TIMER_Start+0x88>)
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	681b      	ldr	r3, [r3, #0]
 8016f1e:	4298      	cmp	r0, r3
 8016f20:	d20c      	bcs.n	8016f3c <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8016f22:	4620      	mov	r0, r4
 8016f24:	f7ff ffc6 	bl	8016eb4 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f28:	f386 8810 	msr	PRIMASK, r6
}
 8016f2c:	e00b      	b.n	8016f46 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8016f2e:	4b09      	ldr	r3, [pc, #36]	; (8016f54 <UTIL_TIMER_Start+0x84>)
 8016f30:	691b      	ldr	r3, [r3, #16]
 8016f32:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8016f34:	4620      	mov	r0, r4
 8016f36:	f7ff ffbd 	bl	8016eb4 <TimerInsertNewHeadTimer>
 8016f3a:	e7f5      	b.n	8016f28 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8016f3c:	4620      	mov	r0, r4
 8016f3e:	f7ff ff9b 	bl	8016e78 <TimerInsertTimer>
 8016f42:	e7f1      	b.n	8016f28 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8016f44:	2501      	movs	r5, #1
}
 8016f46:	4628      	mov	r0, r5
 8016f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8016f4a:	2501      	movs	r5, #1
 8016f4c:	e7fb      	b.n	8016f46 <UTIL_TIMER_Start+0x76>
 8016f4e:	2501      	movs	r5, #1
 8016f50:	e7f9      	b.n	8016f46 <UTIL_TIMER_Start+0x76>
 8016f52:	bf00      	nop
 8016f54:	08017854 	.word	0x08017854
 8016f58:	20001c48 	.word	0x20001c48

08016f5c <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8016f5c:	b198      	cbz	r0, 8016f86 <UTIL_TIMER_SetPeriod+0x2a>
{
 8016f5e:	b510      	push	{r4, lr}
 8016f60:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8016f62:	4b0a      	ldr	r3, [pc, #40]	; (8016f8c <UTIL_TIMER_SetPeriod+0x30>)
 8016f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f66:	4608      	mov	r0, r1
 8016f68:	4798      	blx	r3
 8016f6a:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8016f6c:	4620      	mov	r0, r4
 8016f6e:	f7ff ff27 	bl	8016dc0 <TimerExists>
 8016f72:	b908      	cbnz	r0, 8016f78 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8016f74:	2000      	movs	r0, #0
}
 8016f76:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8016f78:	4620      	mov	r0, r4
 8016f7a:	f7ff ff47 	bl	8016e0c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8016f7e:	4620      	mov	r0, r4
 8016f80:	f7ff ffa6 	bl	8016ed0 <UTIL_TIMER_Start>
 8016f84:	e7f7      	b.n	8016f76 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8016f86:	2001      	movs	r0, #1
}
 8016f88:	4770      	bx	lr
 8016f8a:	bf00      	nop
 8016f8c:	08017854 	.word	0x08017854

08016f90 <UTIL_TIMER_IRQ_Handler>:
{
 8016f90:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f92:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016f96:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8016f98:	4c1e      	ldr	r4, [pc, #120]	; (8017014 <UTIL_TIMER_IRQ_Handler+0x84>)
 8016f9a:	6963      	ldr	r3, [r4, #20]
 8016f9c:	4798      	blx	r3
 8016f9e:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8016fa0:	6923      	ldr	r3, [r4, #16]
 8016fa2:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8016fa4:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8016fa6:	4b1c      	ldr	r3, [pc, #112]	; (8017018 <UTIL_TIMER_IRQ_Handler+0x88>)
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	b923      	cbnz	r3, 8016fb6 <UTIL_TIMER_IRQ_Handler+0x26>
 8016fac:	e018      	b.n	8016fe0 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8016fae:	2200      	movs	r2, #0
 8016fb0:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8016fb2:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8016fb4:	b1a3      	cbz	r3, 8016fe0 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8016fb6:	681a      	ldr	r2, [r3, #0]
 8016fb8:	42a2      	cmp	r2, r4
 8016fba:	d9f8      	bls.n	8016fae <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8016fbc:	1a31      	subs	r1, r6, r0
 8016fbe:	440a      	add	r2, r1
 8016fc0:	601a      	str	r2, [r3, #0]
 8016fc2:	e7f6      	b.n	8016fb2 <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8016fc4:	4b14      	ldr	r3, [pc, #80]	; (8017018 <UTIL_TIMER_IRQ_Handler+0x88>)
 8016fc6:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8016fc8:	6962      	ldr	r2, [r4, #20]
 8016fca:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8016fcc:	2300      	movs	r3, #0
 8016fce:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8016fd0:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8016fd2:	68e3      	ldr	r3, [r4, #12]
 8016fd4:	6920      	ldr	r0, [r4, #16]
 8016fd6:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8016fd8:	8963      	ldrh	r3, [r4, #10]
 8016fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016fde:	d012      	beq.n	8017006 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8016fe0:	4b0d      	ldr	r3, [pc, #52]	; (8017018 <UTIL_TIMER_IRQ_Handler+0x88>)
 8016fe2:	681b      	ldr	r3, [r3, #0]
 8016fe4:	b13b      	cbz	r3, 8016ff6 <UTIL_TIMER_IRQ_Handler+0x66>
 8016fe6:	681c      	ldr	r4, [r3, #0]
 8016fe8:	2c00      	cmp	r4, #0
 8016fea:	d0eb      	beq.n	8016fc4 <UTIL_TIMER_IRQ_Handler+0x34>
 8016fec:	4b09      	ldr	r3, [pc, #36]	; (8017014 <UTIL_TIMER_IRQ_Handler+0x84>)
 8016fee:	699b      	ldr	r3, [r3, #24]
 8016ff0:	4798      	blx	r3
 8016ff2:	4284      	cmp	r4, r0
 8016ff4:	d3e6      	bcc.n	8016fc4 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8016ff6:	4b08      	ldr	r3, [pc, #32]	; (8017018 <UTIL_TIMER_IRQ_Handler+0x88>)
 8016ff8:	6818      	ldr	r0, [r3, #0]
 8016ffa:	b108      	cbz	r0, 8017000 <UTIL_TIMER_IRQ_Handler+0x70>
 8016ffc:	7a03      	ldrb	r3, [r0, #8]
 8016ffe:	b133      	cbz	r3, 801700e <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017000:	f385 8810 	msr	PRIMASK, r5
}
 8017004:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8017006:	4620      	mov	r0, r4
 8017008:	f7ff ff62 	bl	8016ed0 <UTIL_TIMER_Start>
 801700c:	e7e8      	b.n	8016fe0 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 801700e:	f7ff fee5 	bl	8016ddc <TimerSetTimeout>
 8017012:	e7f5      	b.n	8017000 <UTIL_TIMER_IRQ_Handler+0x70>
 8017014:	08017854 	.word	0x08017854
 8017018:	20001c48 	.word	0x20001c48

0801701c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801701c:	4601      	mov	r1, r0
  int i = 0;
 801701e:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8017020:	680a      	ldr	r2, [r1, #0]
 8017022:	7813      	ldrb	r3, [r2, #0]
 8017024:	3b30      	subs	r3, #48	; 0x30
 8017026:	b2db      	uxtb	r3, r3
 8017028:	2b09      	cmp	r3, #9
 801702a:	d808      	bhi.n	801703e <ee_skip_atoi+0x22>
 801702c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017030:	1c53      	adds	r3, r2, #1
 8017032:	600b      	str	r3, [r1, #0]
 8017034:	7813      	ldrb	r3, [r2, #0]
 8017036:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 801703a:	3830      	subs	r0, #48	; 0x30
 801703c:	e7f0      	b.n	8017020 <ee_skip_atoi+0x4>
  return i;
}
 801703e:	4770      	bx	lr

08017040 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8017040:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8017044:	b093      	sub	sp, #76	; 0x4c
 8017046:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8017048:	9d1c      	ldr	r5, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801704a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801704e:	d111      	bne.n	8017074 <ee_number+0x34>
  char *dig = lower_digits;
 8017050:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8017144 <ee_number+0x104>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8017054:	469c      	mov	ip, r3
 8017056:	3b02      	subs	r3, #2
 8017058:	2b22      	cmp	r3, #34	; 0x22
 801705a:	d871      	bhi.n	8017140 <ee_number+0x100>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 801705c:	f015 0401 	ands.w	r4, r5, #1
 8017060:	d00b      	beq.n	801707a <ee_number+0x3a>
 8017062:	2730      	movs	r7, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8017064:	f015 0f02 	tst.w	r5, #2
 8017068:	d010      	beq.n	801708c <ee_number+0x4c>
  {
    if (num < 0)
 801706a:	2a00      	cmp	r2, #0
 801706c:	db07      	blt.n	801707e <ee_number+0x3e>
  sign = 0;
 801706e:	f04f 0e00 	mov.w	lr, #0
 8017072:	e00d      	b.n	8017090 <ee_number+0x50>
  if (type & UPPERCASE)  dig = upper_digits;
 8017074:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017148 <ee_number+0x108>
 8017078:	e7ec      	b.n	8017054 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 801707a:	2720      	movs	r7, #32
 801707c:	e7f2      	b.n	8017064 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 801707e:	4252      	negs	r2, r2
      size--;
 8017080:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017082:	3b01      	subs	r3, #1
 8017084:	931a      	str	r3, [sp, #104]	; 0x68
      sign = '-';
 8017086:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
 801708a:	e001      	b.n	8017090 <ee_number+0x50>
  sign = 0;
 801708c:	f04f 0e00 	mov.w	lr, #0
  }
#endif
  
  i = 0;

  if (num == 0)
 8017090:	b9da      	cbnz	r2, 80170ca <ee_number+0x8a>
    tmp[i++] = '0';
 8017092:	2330      	movs	r3, #48	; 0x30
 8017094:	f88d 3004 	strb.w	r3, [sp, #4]
 8017098:	2501      	movs	r5, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 801709a:	42b5      	cmp	r5, r6
 801709c:	dd00      	ble.n	80170a0 <ee_number+0x60>
 801709e:	462e      	mov	r6, r5
  size -= precision;
 80170a0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80170a2:	1b9b      	subs	r3, r3, r6
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80170a4:	b30c      	cbz	r4, 80170ea <ee_number+0xaa>
  if (sign) ASSIGN_STR(sign);
 80170a6:	f1be 0f00 	cmp.w	lr, #0
 80170aa:	d003      	beq.n	80170b4 <ee_number+0x74>
 80170ac:	f800 eb01 	strb.w	lr, [r0], #1
 80170b0:	3901      	subs	r1, #1
 80170b2:	d007      	beq.n	80170c4 <ee_number+0x84>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80170ba:	dd20      	ble.n	80170fe <ee_number+0xbe>
 80170bc:	f800 7b01 	strb.w	r7, [r0], #1
 80170c0:	3901      	subs	r1, #1
 80170c2:	d1f7      	bne.n	80170b4 <ee_number+0x74>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 80170c4:	b013      	add	sp, #76	; 0x4c
 80170c6:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
  i = 0;
 80170ca:	2500      	movs	r5, #0
    while (num != 0)
 80170cc:	2a00      	cmp	r2, #0
 80170ce:	d0e4      	beq.n	801709a <ee_number+0x5a>
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80170d0:	fbb2 f3fc 	udiv	r3, r2, ip
 80170d4:	fb0c 2213 	mls	r2, ip, r3, r2
 80170d8:	f818 a002 	ldrb.w	sl, [r8, r2]
 80170dc:	aa12      	add	r2, sp, #72	; 0x48
 80170de:	442a      	add	r2, r5
 80170e0:	f802 ac44 	strb.w	sl, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 80170e4:	461a      	mov	r2, r3
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80170e6:	3501      	adds	r5, #1
 80170e8:	e7f0      	b.n	80170cc <ee_number+0x8c>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	f103 33ff 	add.w	r3, r3, #4294967295
 80170f0:	ddd9      	ble.n	80170a6 <ee_number+0x66>
 80170f2:	2220      	movs	r2, #32
 80170f4:	f800 2b01 	strb.w	r2, [r0], #1
 80170f8:	3901      	subs	r1, #1
 80170fa:	d1f6      	bne.n	80170ea <ee_number+0xaa>
 80170fc:	e7e2      	b.n	80170c4 <ee_number+0x84>
  while (i < precision--) ASSIGN_STR('0');
 80170fe:	42ae      	cmp	r6, r5
 8017100:	f106 36ff 	add.w	r6, r6, #4294967295
 8017104:	dd05      	ble.n	8017112 <ee_number+0xd2>
 8017106:	2230      	movs	r2, #48	; 0x30
 8017108:	f800 2b01 	strb.w	r2, [r0], #1
 801710c:	3901      	subs	r1, #1
 801710e:	d1f6      	bne.n	80170fe <ee_number+0xbe>
 8017110:	e7d8      	b.n	80170c4 <ee_number+0x84>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8017112:	2d00      	cmp	r5, #0
 8017114:	f105 35ff 	add.w	r5, r5, #4294967295
 8017118:	dd08      	ble.n	801712c <ee_number+0xec>
 801711a:	aa12      	add	r2, sp, #72	; 0x48
 801711c:	442a      	add	r2, r5
 801711e:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8017122:	f800 2b01 	strb.w	r2, [r0], #1
 8017126:	3901      	subs	r1, #1
 8017128:	d1f3      	bne.n	8017112 <ee_number+0xd2>
 801712a:	e7cb      	b.n	80170c4 <ee_number+0x84>
  while (size-- > 0) ASSIGN_STR(' ');
 801712c:	2b00      	cmp	r3, #0
 801712e:	f103 33ff 	add.w	r3, r3, #4294967295
 8017132:	ddc7      	ble.n	80170c4 <ee_number+0x84>
 8017134:	2220      	movs	r2, #32
 8017136:	f800 2b01 	strb.w	r2, [r0], #1
 801713a:	3901      	subs	r1, #1
 801713c:	d1f6      	bne.n	801712c <ee_number+0xec>
 801713e:	e7c1      	b.n	80170c4 <ee_number+0x84>
  if (base < 2 || base > 36) return 0;
 8017140:	2000      	movs	r0, #0
 8017142:	e7bf      	b.n	80170c4 <ee_number+0x84>
 8017144:	08018484 	.word	0x08018484
 8017148:	0801845c 	.word	0x0801845c

0801714c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801714c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017150:	b087      	sub	sp, #28
 8017152:	9205      	str	r2, [sp, #20]
 8017154:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8017156:	1e0f      	subs	r7, r1, #0
 8017158:	f340 80b9 	ble.w	80172ce <tiny_vsnprintf_like+0x182>
 801715c:	4606      	mov	r6, r0
  {
    return 0;
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801715e:	4604      	mov	r4, r0
 8017160:	e004      	b.n	801716c <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);
    
    if (*fmt != '%')
    {
      *str++ = *fmt;
 8017162:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8017166:	9b05      	ldr	r3, [sp, #20]
 8017168:	3301      	adds	r3, #1
 801716a:	9305      	str	r3, [sp, #20]
 801716c:	9905      	ldr	r1, [sp, #20]
 801716e:	780a      	ldrb	r2, [r1, #0]
 8017170:	b922      	cbnz	r2, 801717c <tiny_vsnprintf_like+0x30>
 8017172:	1ba3      	subs	r3, r4, r6
 8017174:	1e78      	subs	r0, r7, #1
 8017176:	4283      	cmp	r3, r0
 8017178:	f2c0 80a3 	blt.w	80172c2 <tiny_vsnprintf_like+0x176>
    CHECK_STR_SIZE(buf, str, size);
 801717c:	1ba3      	subs	r3, r4, r6
 801717e:	f107 38ff 	add.w	r8, r7, #4294967295
 8017182:	4543      	cmp	r3, r8
 8017184:	f280 809d 	bge.w	80172c2 <tiny_vsnprintf_like+0x176>
    if (*fmt != '%')
 8017188:	2a25      	cmp	r2, #37	; 0x25
 801718a:	d1ea      	bne.n	8017162 <tiny_vsnprintf_like+0x16>
                  
    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801718c:	1c4b      	adds	r3, r1, #1
 801718e:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8017190:	784b      	ldrb	r3, [r1, #1]
 8017192:	2b30      	cmp	r3, #48	; 0x30
 8017194:	d020      	beq.n	80171d8 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8017196:	f04f 0900 	mov.w	r9, #0
    }
#endif
    
    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 801719a:	3b30      	subs	r3, #48	; 0x30
 801719c:	b2db      	uxtb	r3, r3
 801719e:	2b09      	cmp	r3, #9
 80171a0:	d91d      	bls.n	80171de <tiny_vsnprintf_like+0x92>
    field_width = -1;
 80171a2:	f04f 35ff 	mov.w	r5, #4294967295
#endif
    
    // Default base
    base = 10;

    switch (*fmt)
 80171a6:	9b05      	ldr	r3, [sp, #20]
 80171a8:	781a      	ldrb	r2, [r3, #0]
 80171aa:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 80171ae:	2b20      	cmp	r3, #32
 80171b0:	d868      	bhi.n	8017284 <tiny_vsnprintf_like+0x138>
 80171b2:	e8df f003 	tbb	[pc, r3]
 80171b6:	674b      	.short	0x674b
 80171b8:	67676767 	.word	0x67676767
 80171bc:	67676767 	.word	0x67676767
 80171c0:	67631b67 	.word	0x67631b67
 80171c4:	63676767 	.word	0x63676767
 80171c8:	67676767 	.word	0x67676767
 80171cc:	67676767 	.word	0x67676767
 80171d0:	19672967 	.word	0x19672967
 80171d4:	6767      	.short	0x6767
 80171d6:	7d          	.byte	0x7d
 80171d7:	00          	.byte	0x00
      flags |= ZEROPAD;
 80171d8:	f04f 0901 	mov.w	r9, #1
 80171dc:	e7dd      	b.n	801719a <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 80171de:	a805      	add	r0, sp, #20
 80171e0:	f7ff ff1c 	bl	801701c <ee_skip_atoi>
 80171e4:	4605      	mov	r5, r0
 80171e6:	e7de      	b.n	80171a6 <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 80171e8:	230a      	movs	r3, #10
 80171ea:	e032      	b.n	8017252 <tiny_vsnprintf_like+0x106>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 80171ec:	3d01      	subs	r5, #1
 80171ee:	2d00      	cmp	r5, #0
 80171f0:	dd03      	ble.n	80171fa <tiny_vsnprintf_like+0xae>
 80171f2:	2320      	movs	r3, #32
 80171f4:	f804 3b01 	strb.w	r3, [r4], #1
 80171f8:	e7f8      	b.n	80171ec <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 80171fa:	9b04      	ldr	r3, [sp, #16]
 80171fc:	1d1a      	adds	r2, r3, #4
 80171fe:	9204      	str	r2, [sp, #16]
 8017200:	781b      	ldrb	r3, [r3, #0]
 8017202:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8017206:	e7ae      	b.n	8017166 <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8017208:	9b04      	ldr	r3, [sp, #16]
 801720a:	1d1a      	adds	r2, r3, #4
 801720c:	9204      	str	r2, [sp, #16]
 801720e:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8017212:	f1b8 0f00 	cmp.w	r8, #0
 8017216:	d00a      	beq.n	801722e <tiny_vsnprintf_like+0xe2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8017218:	4640      	mov	r0, r8
 801721a:	f7e8 ffad 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801721e:	1e6b      	subs	r3, r5, #1
 8017220:	4285      	cmp	r5, r0
 8017222:	dd07      	ble.n	8017234 <tiny_vsnprintf_like+0xe8>
 8017224:	2220      	movs	r2, #32
 8017226:	f804 2b01 	strb.w	r2, [r4], #1
 801722a:	461d      	mov	r5, r3
 801722c:	e7f7      	b.n	801721e <tiny_vsnprintf_like+0xd2>
        if (!s) s = "<NULL>";
 801722e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80172d4 <tiny_vsnprintf_like+0x188>
 8017232:	e7f1      	b.n	8017218 <tiny_vsnprintf_like+0xcc>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8017234:	2200      	movs	r2, #0
 8017236:	e006      	b.n	8017246 <tiny_vsnprintf_like+0xfa>
 8017238:	4643      	mov	r3, r8
 801723a:	f813 1b01 	ldrb.w	r1, [r3], #1
 801723e:	f804 1b01 	strb.w	r1, [r4], #1
 8017242:	3201      	adds	r2, #1
 8017244:	4698      	mov	r8, r3
 8017246:	4282      	cmp	r2, r0
 8017248:	dbf6      	blt.n	8017238 <tiny_vsnprintf_like+0xec>
 801724a:	e78c      	b.n	8017166 <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 801724c:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8017250:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8017252:	f019 0f02 	tst.w	r9, #2
 8017256:	d02f      	beq.n	80172b8 <tiny_vsnprintf_like+0x16c>
      num = va_arg(args, int);
 8017258:	9a04      	ldr	r2, [sp, #16]
 801725a:	1d11      	adds	r1, r2, #4
 801725c:	9104      	str	r1, [sp, #16]
 801725e:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8017260:	1ba1      	subs	r1, r4, r6
 8017262:	f8cd 9008 	str.w	r9, [sp, #8]
 8017266:	f04f 30ff 	mov.w	r0, #4294967295
 801726a:	9001      	str	r0, [sp, #4]
 801726c:	9500      	str	r5, [sp, #0]
 801726e:	eba8 0101 	sub.w	r1, r8, r1
 8017272:	4620      	mov	r0, r4
 8017274:	f7ff fee4 	bl	8017040 <ee_number>
 8017278:	4604      	mov	r4, r0
 801727a:	e774      	b.n	8017166 <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 801727c:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8017280:	230a      	movs	r3, #10
 8017282:	e7e6      	b.n	8017252 <tiny_vsnprintf_like+0x106>
        if (*fmt != '%') *str++ = '%';
 8017284:	2a25      	cmp	r2, #37	; 0x25
 8017286:	d002      	beq.n	801728e <tiny_vsnprintf_like+0x142>
 8017288:	2325      	movs	r3, #37	; 0x25
 801728a:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 801728e:	1ba3      	subs	r3, r4, r6
 8017290:	4598      	cmp	r8, r3
 8017292:	dd0f      	ble.n	80172b4 <tiny_vsnprintf_like+0x168>
        if (*fmt)
 8017294:	9b05      	ldr	r3, [sp, #20]
 8017296:	781a      	ldrb	r2, [r3, #0]
 8017298:	b13a      	cbz	r2, 80172aa <tiny_vsnprintf_like+0x15e>
          *str++ = *fmt;
 801729a:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 801729e:	1ba3      	subs	r3, r4, r6
 80172a0:	4598      	cmp	r8, r3
 80172a2:	f73f af60 	bgt.w	8017166 <tiny_vsnprintf_like+0x1a>
    base = 10;
 80172a6:	230a      	movs	r3, #10
    if (qualifier == 'l')
 80172a8:	e7d3      	b.n	8017252 <tiny_vsnprintf_like+0x106>
          --fmt;
 80172aa:	3b01      	subs	r3, #1
 80172ac:	9305      	str	r3, [sp, #20]
 80172ae:	e7f6      	b.n	801729e <tiny_vsnprintf_like+0x152>
        base = 16;
 80172b0:	2310      	movs	r3, #16
 80172b2:	e7ce      	b.n	8017252 <tiny_vsnprintf_like+0x106>
    base = 10;
 80172b4:	230a      	movs	r3, #10
 80172b6:	e7cc      	b.n	8017252 <tiny_vsnprintf_like+0x106>
      num = va_arg(args, unsigned int);
 80172b8:	9a04      	ldr	r2, [sp, #16]
 80172ba:	1d11      	adds	r1, r2, #4
 80172bc:	9104      	str	r1, [sp, #16]
 80172be:	6812      	ldr	r2, [r2, #0]
 80172c0:	e7ce      	b.n	8017260 <tiny_vsnprintf_like+0x114>
  }

  *str = '\0';
 80172c2:	2300      	movs	r3, #0
 80172c4:	7023      	strb	r3, [r4, #0]
  return str - buf;
 80172c6:	1ba0      	subs	r0, r4, r6
}
 80172c8:	b007      	add	sp, #28
 80172ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 80172ce:	2000      	movs	r0, #0
 80172d0:	e7fa      	b.n	80172c8 <tiny_vsnprintf_like+0x17c>
 80172d2:	bf00      	nop
 80172d4:	080184ac 	.word	0x080184ac

080172d8 <__libc_init_array>:
 80172d8:	b570      	push	{r4, r5, r6, lr}
 80172da:	4d0d      	ldr	r5, [pc, #52]	; (8017310 <__libc_init_array+0x38>)
 80172dc:	4c0d      	ldr	r4, [pc, #52]	; (8017314 <__libc_init_array+0x3c>)
 80172de:	1b64      	subs	r4, r4, r5
 80172e0:	10a4      	asrs	r4, r4, #2
 80172e2:	2600      	movs	r6, #0
 80172e4:	42a6      	cmp	r6, r4
 80172e6:	d109      	bne.n	80172fc <__libc_init_array+0x24>
 80172e8:	4d0b      	ldr	r5, [pc, #44]	; (8017318 <__libc_init_array+0x40>)
 80172ea:	4c0c      	ldr	r4, [pc, #48]	; (801731c <__libc_init_array+0x44>)
 80172ec:	f000 f8b0 	bl	8017450 <_init>
 80172f0:	1b64      	subs	r4, r4, r5
 80172f2:	10a4      	asrs	r4, r4, #2
 80172f4:	2600      	movs	r6, #0
 80172f6:	42a6      	cmp	r6, r4
 80172f8:	d105      	bne.n	8017306 <__libc_init_array+0x2e>
 80172fa:	bd70      	pop	{r4, r5, r6, pc}
 80172fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8017300:	4798      	blx	r3
 8017302:	3601      	adds	r6, #1
 8017304:	e7ee      	b.n	80172e4 <__libc_init_array+0xc>
 8017306:	f855 3b04 	ldr.w	r3, [r5], #4
 801730a:	4798      	blx	r3
 801730c:	3601      	adds	r6, #1
 801730e:	e7f2      	b.n	80172f6 <__libc_init_array+0x1e>
 8017310:	080184bc 	.word	0x080184bc
 8017314:	080184bc 	.word	0x080184bc
 8017318:	080184bc 	.word	0x080184bc
 801731c:	080184c0 	.word	0x080184c0

08017320 <memcpy>:
 8017320:	440a      	add	r2, r1
 8017322:	4291      	cmp	r1, r2
 8017324:	f100 33ff 	add.w	r3, r0, #4294967295
 8017328:	d100      	bne.n	801732c <memcpy+0xc>
 801732a:	4770      	bx	lr
 801732c:	b510      	push	{r4, lr}
 801732e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017332:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017336:	4291      	cmp	r1, r2
 8017338:	d1f9      	bne.n	801732e <memcpy+0xe>
 801733a:	bd10      	pop	{r4, pc}

0801733c <memset>:
 801733c:	4402      	add	r2, r0
 801733e:	4603      	mov	r3, r0
 8017340:	4293      	cmp	r3, r2
 8017342:	d100      	bne.n	8017346 <memset+0xa>
 8017344:	4770      	bx	lr
 8017346:	f803 1b01 	strb.w	r1, [r3], #1
 801734a:	e7f9      	b.n	8017340 <memset+0x4>
 801734c:	0000      	movs	r0, r0
	...

08017350 <floor>:
 8017350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017354:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8017358:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801735c:	2e13      	cmp	r6, #19
 801735e:	4602      	mov	r2, r0
 8017360:	460b      	mov	r3, r1
 8017362:	4607      	mov	r7, r0
 8017364:	460c      	mov	r4, r1
 8017366:	4605      	mov	r5, r0
 8017368:	dc34      	bgt.n	80173d4 <floor+0x84>
 801736a:	2e00      	cmp	r6, #0
 801736c:	da15      	bge.n	801739a <floor+0x4a>
 801736e:	a334      	add	r3, pc, #208	; (adr r3, 8017440 <floor+0xf0>)
 8017370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017374:	f7e8 ff0e 	bl	8000194 <__adddf3>
 8017378:	2200      	movs	r2, #0
 801737a:	2300      	movs	r3, #0
 801737c:	f7e9 f93e 	bl	80005fc <__aeabi_dcmpgt>
 8017380:	b140      	cbz	r0, 8017394 <floor+0x44>
 8017382:	2c00      	cmp	r4, #0
 8017384:	da59      	bge.n	801743a <floor+0xea>
 8017386:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801738a:	ea57 0503 	orrs.w	r5, r7, r3
 801738e:	d001      	beq.n	8017394 <floor+0x44>
 8017390:	4c2d      	ldr	r4, [pc, #180]	; (8017448 <floor+0xf8>)
 8017392:	2500      	movs	r5, #0
 8017394:	4623      	mov	r3, r4
 8017396:	462f      	mov	r7, r5
 8017398:	e025      	b.n	80173e6 <floor+0x96>
 801739a:	4a2c      	ldr	r2, [pc, #176]	; (801744c <floor+0xfc>)
 801739c:	fa42 f806 	asr.w	r8, r2, r6
 80173a0:	ea01 0208 	and.w	r2, r1, r8
 80173a4:	4302      	orrs	r2, r0
 80173a6:	d01e      	beq.n	80173e6 <floor+0x96>
 80173a8:	a325      	add	r3, pc, #148	; (adr r3, 8017440 <floor+0xf0>)
 80173aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173ae:	f7e8 fef1 	bl	8000194 <__adddf3>
 80173b2:	2200      	movs	r2, #0
 80173b4:	2300      	movs	r3, #0
 80173b6:	f7e9 f921 	bl	80005fc <__aeabi_dcmpgt>
 80173ba:	2800      	cmp	r0, #0
 80173bc:	d0ea      	beq.n	8017394 <floor+0x44>
 80173be:	2c00      	cmp	r4, #0
 80173c0:	bfbe      	ittt	lt
 80173c2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80173c6:	fa43 f606 	asrlt.w	r6, r3, r6
 80173ca:	19a4      	addlt	r4, r4, r6
 80173cc:	ea24 0408 	bic.w	r4, r4, r8
 80173d0:	2500      	movs	r5, #0
 80173d2:	e7df      	b.n	8017394 <floor+0x44>
 80173d4:	2e33      	cmp	r6, #51	; 0x33
 80173d6:	dd0a      	ble.n	80173ee <floor+0x9e>
 80173d8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80173dc:	d103      	bne.n	80173e6 <floor+0x96>
 80173de:	f7e8 fed9 	bl	8000194 <__adddf3>
 80173e2:	4607      	mov	r7, r0
 80173e4:	460b      	mov	r3, r1
 80173e6:	4638      	mov	r0, r7
 80173e8:	4619      	mov	r1, r3
 80173ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80173ee:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80173f2:	f04f 32ff 	mov.w	r2, #4294967295
 80173f6:	fa22 f808 	lsr.w	r8, r2, r8
 80173fa:	ea18 0f00 	tst.w	r8, r0
 80173fe:	d0f2      	beq.n	80173e6 <floor+0x96>
 8017400:	a30f      	add	r3, pc, #60	; (adr r3, 8017440 <floor+0xf0>)
 8017402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017406:	f7e8 fec5 	bl	8000194 <__adddf3>
 801740a:	2200      	movs	r2, #0
 801740c:	2300      	movs	r3, #0
 801740e:	f7e9 f8f5 	bl	80005fc <__aeabi_dcmpgt>
 8017412:	2800      	cmp	r0, #0
 8017414:	d0be      	beq.n	8017394 <floor+0x44>
 8017416:	2c00      	cmp	r4, #0
 8017418:	da02      	bge.n	8017420 <floor+0xd0>
 801741a:	2e14      	cmp	r6, #20
 801741c:	d103      	bne.n	8017426 <floor+0xd6>
 801741e:	3401      	adds	r4, #1
 8017420:	ea25 0508 	bic.w	r5, r5, r8
 8017424:	e7b6      	b.n	8017394 <floor+0x44>
 8017426:	2301      	movs	r3, #1
 8017428:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801742c:	fa03 f606 	lsl.w	r6, r3, r6
 8017430:	4435      	add	r5, r6
 8017432:	42bd      	cmp	r5, r7
 8017434:	bf38      	it	cc
 8017436:	18e4      	addcc	r4, r4, r3
 8017438:	e7f2      	b.n	8017420 <floor+0xd0>
 801743a:	2500      	movs	r5, #0
 801743c:	462c      	mov	r4, r5
 801743e:	e7a9      	b.n	8017394 <floor+0x44>
 8017440:	8800759c 	.word	0x8800759c
 8017444:	7e37e43c 	.word	0x7e37e43c
 8017448:	bff00000 	.word	0xbff00000
 801744c:	000fffff 	.word	0x000fffff

08017450 <_init>:
 8017450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017452:	bf00      	nop
 8017454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017456:	bc08      	pop	{r3}
 8017458:	469e      	mov	lr, r3
 801745a:	4770      	bx	lr

0801745c <_fini>:
 801745c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801745e:	bf00      	nop
 8017460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017462:	bc08      	pop	{r3}
 8017464:	469e      	mov	lr, r3
 8017466:	4770      	bx	lr
